
STM32H743_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a6d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003468  0801a978  0801a978  0002a978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801dde0  0801dde0  0002dde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801dde4  0801dde4  0002dde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000238  24000000  0801dde8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000ec04  24000238  0801e020  00030238  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400ee3c  0801e020  0003ee3c  2**0
                  ALLOC
  8 .lwip_sec     000419d0  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 10 .debug_info   000582f0  00000000  00000000  00030266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008ebc  00000000  00000000  00088556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002798  00000000  00000000  00091418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002620  00000000  00000000  00093bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001355a  00000000  00000000  000961d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003af38  00000000  00000000  000a972a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00186fec  00000000  00000000  000e4662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0026b64e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b74c  00000000  00000000  0026b6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000238 	.word	0x24000238
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a95c 	.word	0x0801a95c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400023c 	.word	0x2400023c
 80002dc:	0801a95c 	.word	0x0801a95c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2lz>:
 8000728:	b508      	push	{r3, lr}
 800072a:	4602      	mov	r2, r0
 800072c:	460b      	mov	r3, r1
 800072e:	ec43 2b17 	vmov	d7, r2, r3
 8000732:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	d403      	bmi.n	8000744 <__aeabi_d2lz+0x1c>
 800073c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000740:	f000 b80a 	b.w	8000758 <__aeabi_d2ulz>
 8000744:	eeb1 7b47 	vneg.f64	d7, d7
 8000748:	ec51 0b17 	vmov	r0, r1, d7
 800074c:	f000 f804 	bl	8000758 <__aeabi_d2ulz>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	bd08      	pop	{r3, pc}

08000758 <__aeabi_d2ulz>:
 8000758:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000788 <__aeabi_d2ulz+0x30>
 800075c:	ec41 0b17 	vmov	d7, r0, r1
 8000760:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000790 <__aeabi_d2ulz+0x38>
 8000764:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000768:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800076c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000770:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000774:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000778:	ee16 1a10 	vmov	r1, s12
 800077c:	ee17 0a90 	vmov	r0, s15
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	f3af 8000 	nop.w
 8000788:	00000000 	.word	0x00000000
 800078c:	3df00000 	.word	0x3df00000
 8000790:	00000000 	.word	0x00000000
 8000794:	41f00000 	.word	0x41f00000

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800079e:	f000 fa8f 	bl	8000cc0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007a2:	4b48      	ldr	r3, [pc, #288]	; (80008c4 <main+0x12c>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d11b      	bne.n	80007e6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007ae:	f3bf 8f4f 	dsb	sy
}
 80007b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007b4:	f3bf 8f6f 	isb	sy
}
 80007b8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ba:	4b42      	ldr	r3, [pc, #264]	; (80008c4 <main+0x12c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007c2:	f3bf 8f4f 	dsb	sy
}
 80007c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007c8:	f3bf 8f6f 	isb	sy
}
 80007cc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007ce:	4b3d      	ldr	r3, [pc, #244]	; (80008c4 <main+0x12c>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a3c      	ldr	r2, [pc, #240]	; (80008c4 <main+0x12c>)
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007da:	f3bf 8f4f 	dsb	sy
}
 80007de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007e0:	f3bf 8f6f 	isb	sy
}
 80007e4:	e000      	b.n	80007e8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007e6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007e8:	4b36      	ldr	r3, [pc, #216]	; (80008c4 <main+0x12c>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d138      	bne.n	8000866 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007f4:	4b33      	ldr	r3, [pc, #204]	; (80008c4 <main+0x12c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007fc:	f3bf 8f4f 	dsb	sy
}
 8000800:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000802:	4b30      	ldr	r3, [pc, #192]	; (80008c4 <main+0x12c>)
 8000804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000808:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	0b5b      	lsrs	r3, r3, #13
 800080e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000812:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800081c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	015a      	lsls	r2, r3, #5
 8000822:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000826:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800082c:	4925      	ldr	r1, [pc, #148]	; (80008c4 <main+0x12c>)
 800082e:	4313      	orrs	r3, r2
 8000830:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1ef      	bne.n	800081e <main+0x86>
    } while(sets-- != 0U);
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1e5a      	subs	r2, r3, #1
 8000842:	60ba      	str	r2, [r7, #8]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1e5      	bne.n	8000814 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000848:	f3bf 8f4f 	dsb	sy
}
 800084c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <main+0x12c>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <main+0x12c>)
 8000854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000858:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800085a:	f3bf 8f4f 	dsb	sy
}
 800085e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000860:	f3bf 8f6f 	isb	sy
}
 8000864:	e000      	b.n	8000868 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000866:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000868:	f000 ffde 	bl	8001828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086c:	f000 f840 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000870:	f000 f8c2 	bl	80009f8 <MX_GPIO_Init>
  MX_UART4_Init();
 8000874:	f000 f8b8 	bl	80009e8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000878:	f005 fb04 	bl	8005e84 <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */

  DebugLoggerQueue = osMessageQueueNew(16, sizeof(DebugLoggerMsg), NULL);
 800087c:	2200      	movs	r2, #0
 800087e:	2188      	movs	r1, #136	; 0x88
 8000880:	2010      	movs	r0, #16
 8000882:	f005 fe39 	bl	80064f8 <osMessageQueueNew>
 8000886:	4603      	mov	r3, r0
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <main+0x130>)
 800088a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800088c:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <main+0x134>)
 800088e:	2100      	movs	r1, #0
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <main+0x138>)
 8000892:	f005 fb56 	bl	8005f42 <osThreadNew>
 8000896:	4603      	mov	r3, r0
 8000898:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <main+0x13c>)
 800089a:	6013      	str	r3, [r2, #0]

  /* creation of DebugLogger */
  DebugLoggerHandle = osThreadNew(StartDebugLogger, NULL, &DebugLogger_attributes);
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <main+0x140>)
 800089e:	2100      	movs	r1, #0
 80008a0:	480e      	ldr	r0, [pc, #56]	; (80008dc <main+0x144>)
 80008a2:	f005 fb4e 	bl	8005f42 <osThreadNew>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <main+0x148>)
 80008aa:	6013      	str	r3, [r2, #0]

  /* creation of ChangeShare */
  ChangeShareHandle = osThreadNew(StartChangeShare, NULL, &ChangeShare_attributes);
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <main+0x14c>)
 80008ae:	2100      	movs	r1, #0
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <main+0x150>)
 80008b2:	f005 fb46 	bl	8005f42 <osThreadNew>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <main+0x154>)
 80008ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008bc:	f005 fb06 	bl	8005ecc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80008c0:	e7fe      	b.n	80008c0 <main+0x128>
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	2400b8e8 	.word	0x2400b8e8
 80008cc:	0801d798 	.word	0x0801d798
 80008d0:	08000c19 	.word	0x08000c19
 80008d4:	2400b8f0 	.word	0x2400b8f0
 80008d8:	0801d7bc 	.word	0x0801d7bc
 80008dc:	08000c4d 	.word	0x08000c4d
 80008e0:	2400b8ec 	.word	0x2400b8ec
 80008e4:	0801d7e0 	.word	0x0801d7e0
 80008e8:	08000c75 	.word	0x08000c75
 80008ec:	2400b8f4 	.word	0x2400b8f4

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	; 0x70
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	224c      	movs	r2, #76	; 0x4c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f017 f94e 	bl	8017ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2220      	movs	r2, #32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f017 f948 	bl	8017ba0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000910:	2002      	movs	r0, #2
 8000912:	f003 f9d7 	bl	8003cc4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <SystemClock_Config+0xf0>)
 800091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091e:	4a30      	ldr	r2, [pc, #192]	; (80009e0 <SystemClock_Config+0xf0>)
 8000920:	f023 0301 	bic.w	r3, r3, #1
 8000924:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000926:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <SystemClock_Config+0xf0>)
 8000928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <SystemClock_Config+0xf4>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a2b      	ldr	r2, [pc, #172]	; (80009e4 <SystemClock_Config+0xf4>)
 8000936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <SystemClock_Config+0xf4>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000948:	bf00      	nop
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <SystemClock_Config+0xf4>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000956:	d1f8      	bne.n	800094a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000958:	2301      	movs	r3, #1
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800095c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000966:	2302      	movs	r3, #2
 8000968:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800096a:	2304      	movs	r3, #4
 800096c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 800096e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000972:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000980:	2304      	movs	r3, #4
 8000982:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000984:	2300      	movs	r3, #0
 8000986:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	4618      	mov	r0, r3
 8000992:	f003 f9d1 	bl	8003d38 <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800099c:	f000 f9e0 	bl	8000d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	233f      	movs	r3, #63	; 0x3f
 80009a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a4:	2303      	movs	r3, #3
 80009a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009ac:	2308      	movs	r3, #8
 80009ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009b0:	2340      	movs	r3, #64	; 0x40
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009b4:	2340      	movs	r3, #64	; 0x40
 80009b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009be:	2340      	movs	r3, #64	; 0x40
 80009c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2102      	movs	r1, #2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 fdc6 	bl	8004558 <HAL_RCC_ClockConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80009d2:	f000 f9c5 	bl	8000d60 <Error_Handler>
  }
}
 80009d6:	bf00      	nop
 80009d8:	3770      	adds	r7, #112	; 0x70
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	58000400 	.word	0x58000400
 80009e4:	58024800 	.word	0x58024800

080009e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 1 */
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b7a      	ldr	r3, [pc, #488]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	4a78      	ldr	r2, [pc, #480]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1e:	4b76      	ldr	r3, [pc, #472]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2c:	4b72      	ldr	r3, [pc, #456]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4a71      	ldr	r2, [pc, #452]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4b6e      	ldr	r3, [pc, #440]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b6b      	ldr	r3, [pc, #428]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	4a69      	ldr	r2, [pc, #420]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5a:	4b67      	ldr	r3, [pc, #412]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a68:	4b63      	ldr	r3, [pc, #396]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	4a62      	ldr	r2, [pc, #392]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a78:	4b5f      	ldr	r3, [pc, #380]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a86:	4b5c      	ldr	r3, [pc, #368]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	4a5a      	ldr	r2, [pc, #360]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a96:	4b58      	ldr	r3, [pc, #352]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa4:	4b54      	ldr	r3, [pc, #336]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	4a53      	ldr	r2, [pc, #332]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab4:	4b50      	ldr	r3, [pc, #320]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac2:	4b4d      	ldr	r3, [pc, #308]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	4a4b      	ldr	r2, [pc, #300]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad2:	4b49      	ldr	r3, [pc, #292]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ae6:	4845      	ldr	r0, [pc, #276]	; (8000bfc <MX_GPIO_Init+0x204>)
 8000ae8:	f003 f8d2 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af2:	4843      	ldr	r0, [pc, #268]	; (8000c00 <MX_GPIO_Init+0x208>)
 8000af4:	f003 f8cc 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2102      	movs	r1, #2
 8000afc:	4841      	ldr	r0, [pc, #260]	; (8000c04 <MX_GPIO_Init+0x20c>)
 8000afe:	f003 f8c7 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	483c      	ldr	r0, [pc, #240]	; (8000c08 <MX_GPIO_Init+0x210>)
 8000b18:	f002 ff0a 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4835      	ldr	r0, [pc, #212]	; (8000c0c <MX_GPIO_Init+0x214>)
 8000b38:	f002 fefa 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b3c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4829      	ldr	r0, [pc, #164]	; (8000bfc <MX_GPIO_Init+0x204>)
 8000b56:	f002 feeb 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	4822      	ldr	r0, [pc, #136]	; (8000c00 <MX_GPIO_Init+0x208>)
 8000b78:	f002 feda 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	481a      	ldr	r0, [pc, #104]	; (8000c00 <MX_GPIO_Init+0x208>)
 8000b96:	f002 fecb 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MX_GPIO_Init+0x218>)
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4819      	ldr	r0, [pc, #100]	; (8000c14 <MX_GPIO_Init+0x21c>)
 8000bae:	f002 febf 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bb2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480f      	ldr	r0, [pc, #60]	; (8000c0c <MX_GPIO_Init+0x214>)
 8000bd0:	f002 feae 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <MX_GPIO_Init+0x20c>)
 8000bec:	f002 fea0 	bl	8003930 <HAL_GPIO_Init>

}
 8000bf0:	bf00      	nop
 8000bf2:	3730      	adds	r7, #48	; 0x30
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	58024400 	.word	0x58024400
 8000bfc:	58020400 	.word	0x58020400
 8000c00:	58020c00 	.word	0x58020c00
 8000c04:	58021000 	.word	0x58021000
 8000c08:	58020800 	.word	0x58020800
 8000c0c:	58020000 	.word	0x58020000
 8000c10:	11110000 	.word	0x11110000
 8000c14:	58021800 	.word	0x58021800

08000c18 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000c20:	f004 fb24 	bl	800526c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  ReadyETH=1;
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <StartDefaultTask+0x2c>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
  ShareInit();
 8000c2a:	f016 fb9f 	bl	801736c <ShareInit>
  Debug_Message(LOG_INFO, "Start Default Task");
 8000c2e:	4906      	ldr	r1, [pc, #24]	; (8000c48 <StartDefaultTask+0x30>)
 8000c30:	2009      	movs	r0, #9
 8000c32:	f000 facf 	bl	80011d4 <Debug_Message>

  for (;;) {
	  osDelay(5000);
 8000c36:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c3a:	f005 fa15 	bl	8006068 <osDelay>
	  ShareSaveChange();
 8000c3e:	f016 fb0b 	bl	8017258 <ShareSaveChange>
	  osDelay(5000);
 8000c42:	e7f8      	b.n	8000c36 <StartDefaultTask+0x1e>
 8000c44:	24000254 	.word	0x24000254
 8000c48:	0801a99c 	.word	0x0801a99c

08000c4c <StartDebugLogger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugLogger */
void StartDebugLogger(void *argument)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugLogger */
  /* Infinite loop */
	while (!ReadyShare) {
 8000c54:	e002      	b.n	8000c5c <StartDebugLogger+0x10>
		osDelay(100);
 8000c56:	2064      	movs	r0, #100	; 0x64
 8000c58:	f005 fa06 	bl	8006068 <osDelay>
	while (!ReadyShare) {
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <StartDebugLogger+0x24>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d0f8      	beq.n	8000c56 <StartDebugLogger+0xa>
	}
	DebugLoggerLoop();
 8000c64:	f000 fb18 	bl	8001298 <DebugLoggerLoop>
  /* USER CODE END StartDebugLogger */
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2400025c 	.word	0x2400025c

08000c74 <StartChangeShare>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartChangeShare */
void StartChangeShare(void *argument)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartChangeShare */
  /* Infinite loop */
	while (!ReadyShare) {
 8000c7c:	e002      	b.n	8000c84 <StartChangeShare+0x10>
		osDelay(100);
 8000c7e:	2064      	movs	r0, #100	; 0x64
 8000c80:	f005 f9f2 	bl	8006068 <osDelay>
	while (!ReadyShare) {
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <StartChangeShare+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0f8      	beq.n	8000c7e <StartChangeShare+0xa>
	}
  for(;;)
  {
	  JSON_Value* value=ShareGetJson("setup");
 8000c8c:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <StartChangeShare+0x44>)
 8000c8e:	f016 fbfb 	bl	8017488 <ShareGetJson>
 8000c92:	60f8      	str	r0, [r7, #12]
	  if(value!=NULL){
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d007      	beq.n	8000caa <StartChangeShare+0x36>
		  Debug_Message(LOG_INFO, "setup is modify");
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <StartChangeShare+0x48>)
 8000c9c:	2009      	movs	r0, #9
 8000c9e:	f000 fa99 	bl	80011d4 <Debug_Message>
		  ShareSetJson("setup",value);
 8000ca2:	68f9      	ldr	r1, [r7, #12]
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <StartChangeShare+0x44>)
 8000ca6:	f016 fc1d 	bl	80174e4 <ShareSetJson>
	  }
    osDelay(20000);
 8000caa:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000cae:	f005 f9db 	bl	8006068 <osDelay>
  {
 8000cb2:	e7eb      	b.n	8000c8c <StartChangeShare+0x18>
 8000cb4:	2400025c 	.word	0x2400025c
 8000cb8:	0801a9b0 	.word	0x0801a9b0
 8000cbc:	0801a9b8 	.word	0x0801a9b8

08000cc0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cd2:	f000 ff05 	bl	8001ae0 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MPU_Config+0x78>)
 8000ce0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000ce2:	230e      	movs	r3, #14
 8000ce4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d02:	463b      	mov	r3, r7
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 ff23 	bl	8001b50 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000d12:	2307      	movs	r3, #7
 8000d14:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d22:	463b      	mov	r3, r7
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 ff13 	bl	8001b50 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d2a:	2004      	movs	r0, #4
 8000d2c:	f000 fef0 	bl	8001b10 <HAL_MPU_Enable>

}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	30040000 	.word	0x30040000

08000d3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d101      	bne.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d4e:	f000 fda7 	bl	80018a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40001000 	.word	0x40001000

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x8>
	...

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_MspInit+0x38>)
 8000d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_MspInit+0x38>)
 8000d7a:	f043 0302 	orr.w	r3, r3, #2
 8000d7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_MspInit+0x38>)
 8000d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	210f      	movs	r1, #15
 8000d94:	f06f 0001 	mvn.w	r0, #1
 8000d98:	f000 fe7a 	bl	8001a90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	58024400 	.word	0x58024400

08000da8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b090      	sub	sp, #64	; 0x40
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b0f      	cmp	r3, #15
 8000db4:	d827      	bhi.n	8000e06 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000db6:	2200      	movs	r2, #0
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	2036      	movs	r0, #54	; 0x36
 8000dbc:	f000 fe68 	bl	8001a90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dc0:	2036      	movs	r0, #54	; 0x36
 8000dc2:	f000 fe7f 	bl	8001ac4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000dc6:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <HAL_InitTick+0xc4>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <HAL_InitTick+0xc8>)
 8000dce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dd2:	4a27      	ldr	r2, [pc, #156]	; (8000e70 <HAL_InitTick+0xc8>)
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ddc:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <HAL_InitTick+0xc8>)
 8000dde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dea:	f107 0210 	add.w	r2, r7, #16
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 ff25 	bl	8004c44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d106      	bne.n	8000e12 <HAL_InitTick+0x6a>
 8000e04:	e001      	b.n	8000e0a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e02b      	b.n	8000e62 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e0a:	f003 ff05 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8000e0e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000e10:	e004      	b.n	8000e1c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e12:	f003 ff01 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8000e16:	4603      	mov	r3, r0
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <HAL_InitTick+0xcc>)
 8000e20:	fba2 2303 	umull	r2, r3, r2, r3
 8000e24:	0c9b      	lsrs	r3, r3, #18
 8000e26:	3b01      	subs	r3, #1
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_InitTick+0xd0>)
 8000e2c:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <HAL_InitTick+0xd4>)
 8000e2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_InitTick+0xd0>)
 8000e32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e36:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e38:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <HAL_InitTick+0xd0>)
 8000e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_InitTick+0xd0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_InitTick+0xd0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e4a:	480b      	ldr	r0, [pc, #44]	; (8000e78 <HAL_InitTick+0xd0>)
 8000e4c:	f003 ff3c 	bl	8004cc8 <HAL_TIM_Base_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d104      	bne.n	8000e60 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e56:	4808      	ldr	r0, [pc, #32]	; (8000e78 <HAL_InitTick+0xd0>)
 8000e58:	f003 ff98 	bl	8004d8c <HAL_TIM_Base_Start_IT>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	e000      	b.n	8000e62 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3740      	adds	r7, #64	; 0x40
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	24000008 	.word	0x24000008
 8000e70:	58024400 	.word	0x58024400
 8000e74:	431bde83 	.word	0x431bde83
 8000e78:	2400b8f8 	.word	0x2400b8f8
 8000e7c:	40001000 	.word	0x40001000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <TIM6_DAC_IRQHandler+0x10>)
 8000eb2:	f003 ffdb 	bl	8004e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2400b8f8 	.word	0x2400b8f8

08000ec0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <ETH_IRQHandler+0x10>)
 8000ec6:	f001 fb61 	bl	800258c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2400bcac 	.word	0x2400bcac

08000ed4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
	return 1;
 8000ed8:	2301      	movs	r3, #1
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_kill>:

int _kill(int pid, int sig)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <_kill+0x20>)
 8000ef0:	2216      	movs	r2, #22
 8000ef2:	601a      	str	r2, [r3, #0]
	return -1;
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	2400ee28 	.word	0x2400ee28

08000f08 <_exit>:

void _exit (int status)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ffe5 	bl	8000ee4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f1a:	e7fe      	b.n	8000f1a <_exit+0x12>

08000f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e00a      	b.n	8000f44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f2e:	f3af 8000 	nop.w
 8000f32:	4601      	mov	r1, r0
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	60ba      	str	r2, [r7, #8]
 8000f3a:	b2ca      	uxtb	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbf0      	blt.n	8000f2e <_read+0x12>
	}

return len;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	e009      	b.n	8000f7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbf1      	blt.n	8000f68 <_write+0x12>
	}
	return len;
 8000f84:	687b      	ldr	r3, [r7, #4]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_close>:

int _close(int file)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	return -1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_isatty>:

int _isatty(int file)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	return 1;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d205      	bcs.n	8001034 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <_sbrk+0x6c>)
 800102a:	220c      	movs	r2, #12
 800102c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001032:	e009      	b.n	8001048 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	4a06      	ldr	r2, [pc, #24]	; (800105c <_sbrk+0x64>)
 8001044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	4618      	mov	r0, r3
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	24080000 	.word	0x24080000
 8001058:	00000400 	.word	0x00000400
 800105c:	24000260 	.word	0x24000260
 8001060:	2400ee40 	.word	0x2400ee40
 8001064:	2400ee28 	.word	0x2400ee28

08001068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800106c:	4b39      	ldr	r3, [pc, #228]	; (8001154 <SystemInit+0xec>)
 800106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001072:	4a38      	ldr	r2, [pc, #224]	; (8001154 <SystemInit+0xec>)
 8001074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <SystemInit+0xf0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	2b06      	cmp	r3, #6
 8001086:	d807      	bhi.n	8001098 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001088:	4b33      	ldr	r3, [pc, #204]	; (8001158 <SystemInit+0xf0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 030f 	bic.w	r3, r3, #15
 8001090:	4a31      	ldr	r2, [pc, #196]	; (8001158 <SystemInit+0xf0>)
 8001092:	f043 0307 	orr.w	r3, r3, #7
 8001096:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001098:	4b30      	ldr	r3, [pc, #192]	; (800115c <SystemInit+0xf4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a2f      	ldr	r2, [pc, #188]	; (800115c <SystemInit+0xf4>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010a4:	4b2d      	ldr	r3, [pc, #180]	; (800115c <SystemInit+0xf4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <SystemInit+0xf4>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	492b      	ldr	r1, [pc, #172]	; (800115c <SystemInit+0xf4>)
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <SystemInit+0xf8>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <SystemInit+0xf0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <SystemInit+0xf0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 030f 	bic.w	r3, r3, #15
 80010ca:	4a23      	ldr	r2, [pc, #140]	; (8001158 <SystemInit+0xf0>)
 80010cc:	f043 0307 	orr.w	r3, r3, #7
 80010d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <SystemInit+0xf4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <SystemInit+0xf4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <SystemInit+0xf4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <SystemInit+0xf4>)
 80010e6:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <SystemInit+0xfc>)
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <SystemInit+0xf4>)
 80010ec:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <SystemInit+0x100>)
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <SystemInit+0xf4>)
 80010f2:	4a1e      	ldr	r2, [pc, #120]	; (800116c <SystemInit+0x104>)
 80010f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <SystemInit+0xf4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <SystemInit+0xf4>)
 80010fe:	4a1b      	ldr	r2, [pc, #108]	; (800116c <SystemInit+0x104>)
 8001100:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <SystemInit+0xf4>)
 8001104:	2200      	movs	r2, #0
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <SystemInit+0xf4>)
 800110a:	4a18      	ldr	r2, [pc, #96]	; (800116c <SystemInit+0x104>)
 800110c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <SystemInit+0xf4>)
 8001110:	2200      	movs	r2, #0
 8001112:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <SystemInit+0xf4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a10      	ldr	r2, [pc, #64]	; (800115c <SystemInit+0xf4>)
 800111a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <SystemInit+0xf4>)
 8001122:	2200      	movs	r2, #0
 8001124:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <SystemInit+0x108>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <SystemInit+0x10c>)
 800112c:	4013      	ands	r3, r2
 800112e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001132:	d202      	bcs.n	800113a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <SystemInit+0x110>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <SystemInit+0x114>)
 800113c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001140:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SystemInit+0xec>)
 8001144:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001148:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00
 8001158:	52002000 	.word	0x52002000
 800115c:	58024400 	.word	0x58024400
 8001160:	eaf6ed7f 	.word	0xeaf6ed7f
 8001164:	02020200 	.word	0x02020200
 8001168:	01ff0000 	.word	0x01ff0000
 800116c:	01010280 	.word	0x01010280
 8001170:	5c001000 	.word	0x5c001000
 8001174:	ffff0000 	.word	0xffff0000
 8001178:	51008108 	.word	0x51008108
 800117c:	52004000 	.word	0x52004000

08001180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001184:	f7ff ff70 	bl	8001068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	; (80011c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	; (80011cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ae:	f016 fc25 	bl	80179fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b2:	f7ff faf1 	bl	8000798 <main>
  bx  lr
 80011b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011c0:	24000238 	.word	0x24000238
  ldr r2, =_sidata
 80011c4:	0801dde8 	.word	0x0801dde8
  ldr r2, =_sbss
 80011c8:	24000238 	.word	0x24000238
  ldr r4, =_ebss
 80011cc:	2400ee3c 	.word	0x2400ee3c

080011d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC3_IRQHandler>
	...

080011d4 <Debug_Message>:
struct {
	ip_addr_t 		ipAddr;
	unsigned int 	port;
} debugSetup;

void Debug_Message(int level,char *message){
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
	DebugLoggerMsg* newLog;
	newLog=malloc(sizeof(DebugLoggerMsg));
 80011de:	2088      	movs	r0, #136	; 0x88
 80011e0:	f016 fc98 	bl	8017b14 <malloc>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
	memset(newLog->Buffer,0,sizeof(newLog->Buffer));
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3308      	adds	r3, #8
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f016 fcd5 	bl	8017ba0 <memset>
	if (strlen(message)<(sizeof(newLog->Buffer)-1)) {
 80011f6:	6838      	ldr	r0, [r7, #0]
 80011f8:	f7ff f87c 	bl	80002f4 <strlen>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b7e      	cmp	r3, #126	; 0x7e
 8001200:	d81d      	bhi.n	800123e <Debug_Message+0x6a>
		memcpy(newLog->Buffer,message,strlen(message));
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f103 0408 	add.w	r4, r3, #8
 8001208:	6838      	ldr	r0, [r7, #0]
 800120a:	f7ff f873 	bl	80002f4 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	6839      	ldr	r1, [r7, #0]
 8001214:	4620      	mov	r0, r4
 8001216:	f016 fc9b 	bl	8017b50 <memcpy>
		newLog->Level=level;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	601a      	str	r2, [r3, #0]
		newLog->time=HAL_GetTick();
 8001220:	f000 fb52 	bl	80018c8 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	605a      	str	r2, [r3, #4]
		osMessageQueuePut(DebugLoggerQueue, newLog, 0, 0);
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <Debug_Message+0x74>)
 800122c:	6818      	ldr	r0, [r3, #0]
 800122e:	2300      	movs	r3, #0
 8001230:	2200      	movs	r2, #0
 8001232:	68f9      	ldr	r1, [r7, #12]
 8001234:	f005 f9d4 	bl	80065e0 <osMessageQueuePut>
		free(newLog);
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f016 fc73 	bl	8017b24 <free>
	}
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	bf00      	nop
 8001248:	2400b8e8 	.word	0x2400b8e8

0800124c <Debuger_Status>:
char *Debuger_Status(int level){
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	switch (level) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b09      	cmp	r3, #9
 8001258:	d00c      	beq.n	8001274 <Debuger_Status+0x28>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b09      	cmp	r3, #9
 800125e:	dc0b      	bgt.n	8001278 <Debuger_Status+0x2c>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d004      	beq.n	8001270 <Debuger_Status+0x24>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d105      	bne.n	8001278 <Debuger_Status+0x2c>
		case LOG_ERROR:
			return "ERROR";
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <Debuger_Status+0x3c>)
 800126e:	e004      	b.n	800127a <Debuger_Status+0x2e>
		case LOG_FATAL:
			return "FATAL";
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <Debuger_Status+0x40>)
 8001272:	e002      	b.n	800127a <Debuger_Status+0x2e>
		case LOG_INFO:
			return "INFO ";
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <Debuger_Status+0x44>)
 8001276:	e000      	b.n	800127a <Debuger_Status+0x2e>
		default:
			return "UNDEF";
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <Debuger_Status+0x48>)
	}
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	0801a9c8 	.word	0x0801a9c8
 800128c:	0801a9d0 	.word	0x0801a9d0
 8001290:	0801a9d8 	.word	0x0801a9d8
 8001294:	0801a9e0 	.word	0x0801a9e0

08001298 <DebugLoggerLoop>:
void DebugLoggerLoop(){
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b0ad      	sub	sp, #180	; 0xb4
 800129c:	af04      	add	r7, sp, #16
//	ip_addr_t PC_IPADDR;
	struct udp_pcb* udp;
	DebugReadSetup();
 800129e:	f000 f8c7 	bl	8001430 <DebugReadSetup>
	DebugWriteSetup();
 80012a2:	f000 f929 	bl	80014f8 <DebugWriteSetup>
	udp=udp_new();
 80012a6:	f010 fbe3 	bl	8011a70 <udp_new>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
//	IP_ADDR4(&PC_IPADDR, 192, 168, 115, 159);
	udp_connect(udp, &debugSetup.ipAddr, debugSetup.port);
 80012b0:	4b53      	ldr	r3, [pc, #332]	; (8001400 <DebugLoggerLoop+0x168>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4952      	ldr	r1, [pc, #328]	; (8001400 <DebugLoggerLoop+0x168>)
 80012b8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80012bc:	f010 fb6a 	bl	8011994 <udp_connect>
	ReadyLogger=1;
 80012c0:	4b50      	ldr	r3, [pc, #320]	; (8001404 <DebugLoggerLoop+0x16c>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
	Debug_Message(LOG_INFO, "Logger start");
 80012c6:	4950      	ldr	r1, [pc, #320]	; (8001408 <DebugLoggerLoop+0x170>)
 80012c8:	2009      	movs	r0, #9
 80012ca:	f7ff ff83 	bl	80011d4 <Debug_Message>
	/* Infinite loop */
	for (;;) {
		DebugLoggerMsg msg;
		if (osMessageQueueGet(DebugLoggerQueue, &msg, NULL, 0)==osOK){
 80012ce:	4b4f      	ldr	r3, [pc, #316]	; (800140c <DebugLoggerLoop+0x174>)
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	4639      	mov	r1, r7
 80012d4:	2300      	movs	r3, #0
 80012d6:	2200      	movs	r2, #0
 80012d8:	f005 f9e2 	bl	80066a0 <osMessageQueueGet>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f040 8089 	bne.w	80013f6 <DebugLoggerLoop+0x15e>
//			free(msg.free);
			int hour,minute,sec,msec;
			msec=msg.time%1000;
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <DebugLoggerLoop+0x178>)
 80012e8:	fba3 1302 	umull	r1, r3, r3, r2
 80012ec:	099b      	lsrs	r3, r3, #6
 80012ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012f2:	fb01 f303 	mul.w	r3, r1, r3
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			sec=(msg.time/1000U)%86400U;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a44      	ldr	r2, [pc, #272]	; (8001410 <DebugLoggerLoop+0x178>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	099a      	lsrs	r2, r3, #6
 8001306:	4b43      	ldr	r3, [pc, #268]	; (8001414 <DebugLoggerLoop+0x17c>)
 8001308:	fba3 1302 	umull	r1, r3, r3, r2
 800130c:	0c1b      	lsrs	r3, r3, #16
 800130e:	4942      	ldr	r1, [pc, #264]	; (8001418 <DebugLoggerLoop+0x180>)
 8001310:	fb01 f303 	mul.w	r3, r1, r3
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			hour=sec/3600;
 800131a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800131e:	4a3f      	ldr	r2, [pc, #252]	; (800141c <DebugLoggerLoop+0x184>)
 8001320:	fb82 1203 	smull	r1, r2, r2, r3
 8001324:	441a      	add	r2, r3
 8001326:	12d2      	asrs	r2, r2, #11
 8001328:	17db      	asrs	r3, r3, #31
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			sec-=hour*3600;
 8001330:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001334:	4a3a      	ldr	r2, [pc, #232]	; (8001420 <DebugLoggerLoop+0x188>)
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800133e:	4413      	add	r3, r2
 8001340:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			minute=sec/60;
 8001344:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001348:	4a36      	ldr	r2, [pc, #216]	; (8001424 <DebugLoggerLoop+0x18c>)
 800134a:	fb82 1203 	smull	r1, r2, r2, r3
 800134e:	441a      	add	r2, r3
 8001350:	1152      	asrs	r2, r2, #5
 8001352:	17db      	asrs	r3, r3, #31
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			sec=sec%60;
 800135a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <DebugLoggerLoop+0x18c>)
 8001360:	fb83 1302 	smull	r1, r3, r3, r2
 8001364:	4413      	add	r3, r2
 8001366:	1159      	asrs	r1, r3, #5
 8001368:	17d3      	asrs	r3, r2, #31
 800136a:	1ac9      	subs	r1, r1, r3
 800136c:	460b      	mov	r3, r1
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	1a5b      	subs	r3, r3, r1
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			sprintf(LoggerBuffer,"%02d.%02d.%02d.%03d:%6s:%s\n\r",hour,minute,sec,msec,Debuger_Status(msg.Level),msg.Buffer);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff65 	bl	800124c <Debuger_Status>
 8001382:	4602      	mov	r2, r0
 8001384:	463b      	mov	r3, r7
 8001386:	3308      	adds	r3, #8
 8001388:	9303      	str	r3, [sp, #12]
 800138a:	9202      	str	r2, [sp, #8]
 800138c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800139c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80013a0:	4921      	ldr	r1, [pc, #132]	; (8001428 <DebugLoggerLoop+0x190>)
 80013a2:	4822      	ldr	r0, [pc, #136]	; (800142c <DebugLoggerLoop+0x194>)
 80013a4:	f016 fd80 	bl	8017ea8 <siprintf>
			struct pbuf* udp_buffer=pbuf_alloc(PBUF_TRANSPORT, strlen(LoggerBuffer), PBUF_RAM);
 80013a8:	4820      	ldr	r0, [pc, #128]	; (800142c <DebugLoggerLoop+0x194>)
 80013aa:	f7fe ffa3 	bl	80002f4 <strlen>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80013b6:	4619      	mov	r1, r3
 80013b8:	2036      	movs	r0, #54	; 0x36
 80013ba:	f009 fe1d 	bl	800aff8 <pbuf_alloc>
 80013be:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			if (udp_buffer!=NULL){
 80013c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d015      	beq.n	80013f6 <DebugLoggerLoop+0x15e>
				memcpy(udp_buffer->payload,LoggerBuffer,strlen(LoggerBuffer));
 80013ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013ce:	685c      	ldr	r4, [r3, #4]
 80013d0:	4816      	ldr	r0, [pc, #88]	; (800142c <DebugLoggerLoop+0x194>)
 80013d2:	f7fe ff8f 	bl	80002f4 <strlen>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	4914      	ldr	r1, [pc, #80]	; (800142c <DebugLoggerLoop+0x194>)
 80013dc:	4620      	mov	r0, r4
 80013de:	f016 fbb7 	bl	8017b50 <memcpy>
				udp_send(udp,udp_buffer);
 80013e2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80013e6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80013ea:	f010 f861 	bl	80114b0 <udp_send>
				pbuf_free(udp_buffer);
 80013ee:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80013f2:	f00a f8e5 	bl	800b5c0 <pbuf_free>
			}
		}
		osDelay(100);
 80013f6:	2064      	movs	r0, #100	; 0x64
 80013f8:	f004 fe36 	bl	8006068 <osDelay>
	for (;;) {
 80013fc:	e767      	b.n	80012ce <DebugLoggerLoop+0x36>
 80013fe:	bf00      	nop
 8001400:	2400b944 	.word	0x2400b944
 8001404:	24000258 	.word	0x24000258
 8001408:	0801a9e8 	.word	0x0801a9e8
 800140c:	2400b8e8 	.word	0x2400b8e8
 8001410:	10624dd3 	.word	0x10624dd3
 8001414:	c22e4507 	.word	0xc22e4507
 8001418:	00015180 	.word	0x00015180
 800141c:	91a2b3c5 	.word	0x91a2b3c5
 8001420:	fffff1f0 	.word	0xfffff1f0
 8001424:	88888889 	.word	0x88888889
 8001428:	0801a9f8 	.word	0x0801a9f8
 800142c:	2400b94c 	.word	0x2400b94c

08001430 <DebugReadSetup>:
	}
}
void DebugReadSetup(void){
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
	JSON_Value* obj=ShareGetJson("debug");
 8001436:	482d      	ldr	r0, [pc, #180]	; (80014ec <DebugReadSetup+0xbc>)
 8001438:	f016 f826 	bl	8017488 <ShareGetJson>
 800143c:	4603      	mov	r3, r0
 800143e:	617b      	str	r3, [r7, #20]
	int adr1=192,adr2=168,adr3=115,adr4=159,port;
 8001440:	23c0      	movs	r3, #192	; 0xc0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	23a8      	movs	r3, #168	; 0xa8
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	2373      	movs	r3, #115	; 0x73
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	239f      	movs	r3, #159	; 0x9f
 800144e:	607b      	str	r3, [r7, #4]
	debugSetup.port=7777;
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <DebugReadSetup+0xc0>)
 8001452:	f641 6261 	movw	r2, #7777	; 0x1e61
 8001456:	605a      	str	r2, [r3, #4]

//	debugSetup.port=(int)json_object_get_number(obj,"port");
//	sscanf(json_object_get_string(obj,"ip"),"%d.%d.%d.%d",&adr1,&adr2,&adr3,&adr4);
	IP_ADDR4(&debugSetup.ipAddr, adr1, adr2, adr3, adr4);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	061a      	lsls	r2, r3, #24
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001464:	431a      	orrs	r2, r3
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b29b      	uxth	r3, r3
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	061a      	lsls	r2, r3, #24
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	0619      	lsls	r1, r3, #24
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	041b      	lsls	r3, r3, #16
 800147e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001482:	4319      	orrs	r1, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b29b      	uxth	r3, r3
 800148a:	4319      	orrs	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	430b      	orrs	r3, r1
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001498:	431a      	orrs	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	0619      	lsls	r1, r3, #24
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	041b      	lsls	r3, r3, #16
 80014a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80014a6:	4319      	orrs	r1, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4319      	orrs	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	430b      	orrs	r3, r1
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80014bc:	431a      	orrs	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	0619      	lsls	r1, r3, #24
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	041b      	lsls	r3, r3, #16
 80014c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80014ca:	4319      	orrs	r1, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4319      	orrs	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	430b      	orrs	r3, r1
 80014da:	0e1b      	lsrs	r3, r3, #24
 80014dc:	4313      	orrs	r3, r2
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <DebugReadSetup+0xc0>)
 80014e0:	6013      	str	r3, [r2, #0]
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	0801aa18 	.word	0x0801aa18
 80014f0:	2400b944 	.word	0x2400b944
 80014f4:	00000000 	.word	0x00000000

080014f8 <DebugWriteSetup>:

void DebugWriteSetup(void){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
    JSON_Value *root_value = json_value_init_object();
 80014fe:	f015 fbdf 	bl	8016cc0 <json_value_init_object>
 8001502:	60f8      	str	r0, [r7, #12]
    JSON_Object *root_object = json_value_get_object(root_value);
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f015 fb24 	bl	8016b52 <json_value_get_object>
 800150a:	60b8      	str	r0, [r7, #8]
    char *serialized_string = NULL;
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
    json_object_set_string(root_object, "ip", "192.168.115.159");
 8001510:	4a11      	ldr	r2, [pc, #68]	; (8001558 <DebugWriteSetup+0x60>)
 8001512:	4912      	ldr	r1, [pc, #72]	; (800155c <DebugWriteSetup+0x64>)
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f015 fe37 	bl	8017188 <json_object_set_string>
    json_object_set_number(root_object, "port", 7777);
 800151a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8001550 <DebugWriteSetup+0x58>
 800151e:	4910      	ldr	r1, [pc, #64]	; (8001560 <DebugWriteSetup+0x68>)
 8001520:	68b8      	ldr	r0, [r7, #8]
 8001522:	f015 fe4c 	bl	80171be <json_object_set_number>
    serialized_string = json_serialize_to_string(root_value);
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f015 fd32 	bl	8016f90 <json_serialize_to_string>
 800152c:	6078      	str	r0, [r7, #4]
    Debug_Message(LOG_INFO,serialized_string );
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	2009      	movs	r0, #9
 8001532:	f7ff fe4f 	bl	80011d4 <Debug_Message>
        json_free_serialized_string(serialized_string);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f015 fd5c 	bl	8016ff4 <json_free_serialized_string>
        json_value_free(root_value);
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f015 fb91 	bl	8016c64 <json_value_free>

}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	f3af 8000 	nop.w
 8001550:	00000000 	.word	0x00000000
 8001554:	40be6100 	.word	0x40be6100
 8001558:	0801aa20 	.word	0x0801aa20
 800155c:	0801aa30 	.word	0x0801aa30
 8001560:	0801aa34 	.word	0x0801aa34

08001564 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00b      	beq.n	800158c <LAN8742_RegisterBusIO+0x28>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <LAN8742_RegisterBusIO+0x28>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <LAN8742_RegisterBusIO+0x28>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800158c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001590:	e014      	b.n	80015bc <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d17c      	bne.n	80016e2 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2220      	movs	r2, #32
 80015fa:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e01c      	b.n	800163c <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f107 0208 	add.w	r2, r7, #8
 800160a:	2112      	movs	r1, #18
 800160c:	6978      	ldr	r0, [r7, #20]
 800160e:	4798      	blx	r3
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	da03      	bge.n	800161e <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001616:	f06f 0304 	mvn.w	r3, #4
 800161a:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800161c:	e00b      	b.n	8001636 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	429a      	cmp	r2, r3
 8001628:	d105      	bne.n	8001636 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
         break;
 8001634:	e005      	b.n	8001642 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b1f      	cmp	r3, #31
 8001640:	d9df      	bls.n	8001602 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b1f      	cmp	r3, #31
 8001648:	d902      	bls.n	8001650 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800164a:	f06f 0302 	mvn.w	r3, #2
 800164e:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d145      	bne.n	80016e2 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6810      	ldr	r0, [r2, #0]
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	2100      	movs	r1, #0
 8001664:	4798      	blx	r3
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	db37      	blt.n	80016dc <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6810      	ldr	r0, [r2, #0]
 8001674:	f107 0208 	add.w	r2, r7, #8
 8001678:	2100      	movs	r1, #0
 800167a:	4798      	blx	r3
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	db28      	blt.n	80016d4 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4798      	blx	r3
 8001688:	4603      	mov	r3, r0
 800168a:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800168c:	e01c      	b.n	80016c8 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	4798      	blx	r3
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016a0:	d80e      	bhi.n	80016c0 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6810      	ldr	r0, [r2, #0]
 80016aa:	f107 0208 	add.w	r2, r7, #8
 80016ae:	2100      	movs	r1, #0
 80016b0:	4798      	blx	r3
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da07      	bge.n	80016c8 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80016b8:	f06f 0304 	mvn.w	r3, #4
 80016bc:	613b      	str	r3, [r7, #16]
                 break;
 80016be:	e010      	b.n	80016e2 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80016c0:	f06f 0301 	mvn.w	r3, #1
 80016c4:	613b      	str	r3, [r7, #16]
               break;
 80016c6:	e00c      	b.n	80016e2 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1dd      	bne.n	800168e <LAN8742_Init+0xc6>
 80016d2:	e006      	b.n	80016e2 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80016d4:	f06f 0304 	mvn.w	r3, #4
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	e002      	b.n	80016e2 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80016dc:	f06f 0303 	mvn.w	r3, #3
 80016e0:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d112      	bne.n	800170e <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4798      	blx	r3
 80016ee:	4603      	mov	r3, r0
 80016f0:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80016f2:	bf00      	nop
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4798      	blx	r3
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001706:	d9f5      	bls.n	80016f4 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800170e:	693b      	ldr	r3, [r7, #16]
 }
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6810      	ldr	r0, [r2, #0]
 800172c:	f107 020c 	add.w	r2, r7, #12
 8001730:	2101      	movs	r1, #1
 8001732:	4798      	blx	r3
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	da02      	bge.n	8001740 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800173a:	f06f 0304 	mvn.w	r3, #4
 800173e:	e06e      	b.n	800181e <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6810      	ldr	r0, [r2, #0]
 8001748:	f107 020c 	add.w	r2, r7, #12
 800174c:	2101      	movs	r1, #1
 800174e:	4798      	blx	r3
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	da02      	bge.n	800175c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001756:	f06f 0304 	mvn.w	r3, #4
 800175a:	e060      	b.n	800181e <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001766:	2301      	movs	r3, #1
 8001768:	e059      	b.n	800181e <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6810      	ldr	r0, [r2, #0]
 8001772:	f107 020c 	add.w	r2, r7, #12
 8001776:	2100      	movs	r1, #0
 8001778:	4798      	blx	r3
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	da02      	bge.n	8001786 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001780:	f06f 0304 	mvn.w	r3, #4
 8001784:	e04b      	b.n	800181e <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d11b      	bne.n	80017c8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <LAN8742_GetLinkState+0x90>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80017a4:	2302      	movs	r3, #2
 80017a6:	e03a      	b.n	800181e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e033      	b.n	800181e <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017c0:	2304      	movs	r3, #4
 80017c2:	e02c      	b.n	800181e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017c4:	2305      	movs	r3, #5
 80017c6:	e02a      	b.n	800181e <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6810      	ldr	r0, [r2, #0]
 80017d0:	f107 020c 	add.w	r2, r7, #12
 80017d4:	211f      	movs	r1, #31
 80017d6:	4798      	blx	r3
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	da02      	bge.n	80017e4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80017de:	f06f 0304 	mvn.w	r3, #4
 80017e2:	e01c      	b.n	800181e <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80017ee:	2306      	movs	r3, #6
 80017f0:	e015      	b.n	800181e <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f003 031c 	and.w	r3, r3, #28
 80017f8:	2b18      	cmp	r3, #24
 80017fa:	d101      	bne.n	8001800 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80017fc:	2302      	movs	r3, #2
 80017fe:	e00e      	b.n	800181e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 031c 	and.w	r3, r3, #28
 8001806:	2b08      	cmp	r3, #8
 8001808:	d101      	bne.n	800180e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800180a:	2303      	movs	r3, #3
 800180c:	e007      	b.n	800181e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f003 031c 	and.w	r3, r3, #28
 8001814:	2b14      	cmp	r3, #20
 8001816:	d101      	bne.n	800181c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001818:	2304      	movs	r3, #4
 800181a:	e000      	b.n	800181e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800181c:	2305      	movs	r3, #5
    }				
  }
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182e:	2003      	movs	r0, #3
 8001830:	f000 f923 	bl	8001a7a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001834:	f003 f846 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8001838:	4602      	mov	r2, r0
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_Init+0x68>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	4913      	ldr	r1, [pc, #76]	; (8001894 <HAL_Init+0x6c>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_Init+0x68>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <HAL_Init+0x6c>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
 8001868:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_Init+0x70>)
 800186a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_Init+0x74>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff fa98 	bl	8000da8 <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e002      	b.n	8001888 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001882:	f7ff fa73 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	58024400 	.word	0x58024400
 8001894:	0801d804 	.word	0x0801d804
 8001898:	24000004 	.word	0x24000004
 800189c:	24000000 	.word	0x24000000

080018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x20>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x24>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_IncTick+0x24>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	2400000c 	.word	0x2400000c
 80018c4:	2400bb4c 	.word	0x2400bb4c

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_GetTick+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	2400bb4c 	.word	0x2400bb4c

080018e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetREVID+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	0c1b      	lsrs	r3, r3, #16
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	5c001000 	.word	0x5c001000

080018f8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001908:	4904      	ldr	r1, [pc, #16]	; (800191c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	58000400 	.word	0x58000400

08001920 <__NVIC_SetPriorityGrouping>:
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <__NVIC_SetPriorityGrouping+0x40>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	4313      	orrs	r3, r2
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	; (8001960 <__NVIC_SetPriorityGrouping+0x40>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00
 8001964:	05fa0000 	.word	0x05fa0000

08001968 <__NVIC_GetPriorityGrouping>:
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4907      	ldr	r1, [pc, #28]	; (80019bc <__NVIC_EnableIRQ+0x38>)
 800199e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff4c 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9e:	f7ff ff63 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001aa2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	6978      	ldr	r0, [r7, #20]
 8001aaa:	f7ff ffb3 	bl	8001a14 <NVIC_EncodePriority>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff82 	bl	80019c0 <__NVIC_SetPriority>
}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff56 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ae4:	f3bf 8f5f 	dmb	sy
}
 8001ae8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <HAL_MPU_Disable+0x28>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <HAL_MPU_Disable+0x28>)
 8001af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_MPU_Disable+0x2c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00
 8001b0c:	e000ed90 	.word	0xe000ed90

08001b10 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HAL_MPU_Enable+0x38>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_MPU_Enable+0x3c>)
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <HAL_MPU_Enable+0x3c>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2e:	f3bf 8f4f 	dsb	sy
}
 8001b32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b34:	f3bf 8f6f 	isb	sy
}
 8001b38:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed90 	.word	0xe000ed90
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	785a      	ldrb	r2, [r3, #1]
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_MPU_ConfigRegion+0x84>)
 8001b5e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d029      	beq.n	8001bbc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001b68:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <HAL_MPU_ConfigRegion+0x84>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7b1b      	ldrb	r3, [r3, #12]
 8001b74:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7adb      	ldrb	r3, [r3, #11]
 8001b7a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7a9b      	ldrb	r3, [r3, #10]
 8001b82:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7b5b      	ldrb	r3, [r3, #13]
 8001b8a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7b9b      	ldrb	r3, [r3, #14]
 8001b92:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7bdb      	ldrb	r3, [r3, #15]
 8001b9a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7a5b      	ldrb	r3, [r3, #9]
 8001ba2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ba4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7a1b      	ldrb	r3, [r3, #8]
 8001baa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bac:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	7812      	ldrb	r2, [r2, #0]
 8001bb2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bb6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bb8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001bba:	e005      	b.n	8001bc8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_MPU_ConfigRegion+0x84>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <HAL_MPU_ConfigRegion+0x84>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed90 	.word	0xe000ed90

08001bd8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0c6      	b.n	8001d78 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f003 fc92 	bl	800551c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2223      	movs	r2, #35	; 0x23
 8001bfc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	4b60      	ldr	r3, [pc, #384]	; (8001d80 <HAL_ETH_Init+0x1a8>)
 8001c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c04:	4a5e      	ldr	r2, [pc, #376]	; (8001d80 <HAL_ETH_Init+0x1a8>)
 8001c06:	f043 0302 	orr.w	r3, r3, #2
 8001c0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c0e:	4b5c      	ldr	r3, [pc, #368]	; (8001d80 <HAL_ETH_Init+0x1a8>)
 8001c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7a1b      	ldrb	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d103      	bne.n	8001c2c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fe67 	bl	80018f8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001c2a:	e003      	b.n	8001c34 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001c2c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c30:	f7ff fe62 	bl	80018f8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c4c:	f7ff fe3c 	bl	80018c8 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c52:	e00f      	b.n	8001c74 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001c54:	f7ff fe38 	bl	80018c8 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c62:	d907      	bls.n	8001c74 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2204      	movs	r2, #4
 8001c68:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	22e0      	movs	r2, #224	; 0xe0
 8001c6e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e081      	b.n	8001d78 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1e6      	bne.n	8001c54 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f001 fad8 	bl	800323c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001c8c:	f002 ff94 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a3c      	ldr	r2, [pc, #240]	; (8001d84 <HAL_ETH_Init+0x1ac>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	0c9a      	lsrs	r2, r3, #18
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3a01      	subs	r2, #1
 8001ca0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f001 fa2b 	bl	8003100 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001cc0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001cc4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	22e0      	movs	r2, #224	; 0xe0
 8001cdc:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e04a      	b.n	8001d78 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001cea:	4413      	add	r3, r2
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_ETH_Init+0x1b0>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6952      	ldr	r2, [r2, #20]
 8001cf6:	0052      	lsls	r2, r2, #1
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	6809      	ldr	r1, [r1, #0]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d02:	440b      	add	r3, r1
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f001 faf0 	bl	80032ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f001 fb34 	bl	800337a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	3305      	adds	r3, #5
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	021a      	lsls	r2, r3, #8
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	3304      	adds	r3, #4
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	3303      	adds	r3, #3
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	061a      	lsls	r2, r3, #24
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	3302      	adds	r3, #2
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	041b      	lsls	r3, r3, #16
 8001d44:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d50:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d5e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2210      	movs	r2, #16
 8001d74:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	58024400 	.word	0x58024400
 8001d84:	431bde83 	.word	0x431bde83
 8001d88:	ffff8001 	.word	0xffff8001

08001d8c <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	3310      	adds	r3, #16
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_ETH_DescAssignMemory+0x28>
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d904      	bls.n	8001dbe <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e021      	b.n	8001e02 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00b      	beq.n	8001df4 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b085      	sub	sp, #20
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d174      	bne.n	8001f08 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2223      	movs	r2, #35	; 0x23
 8001e22:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	e00f      	b.n	8001e4a <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3310      	adds	r3, #16
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3301      	adds	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d9ec      	bls.n	8001e2a <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0202 	orr.w	r2, r2, #2
 8001e64:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e92:	4413      	add	r3, r2
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6811      	ldr	r1, [r2, #0]
 8001e9a:	f043 0201 	orr.w	r2, r3, #1
 8001e9e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ea2:	440b      	add	r3, r1
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	f241 1308 	movw	r3, #4360	; 0x1108
 8001eae:	4413      	add	r3, r2
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6811      	ldr	r1, [r2, #0]
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ebe:	440b      	add	r3, r1
 8001ec0:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001ed4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001ed8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	f241 1334 	movw	r3, #4404	; 0x1134
 8001ee2:	4413      	add	r3, r2
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6811      	ldr	r1, [r2, #0]
 8001eea:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	f241 1334 	movw	r3, #4404	; 0x1134
 8001ef4:	440b      	add	r3, r1
 8001ef6:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2210      	movs	r2, #16
 8001efc:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2222      	movs	r2, #34	; 0x22
 8001f02:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e000      	b.n	8001f0a <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
  }
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d067      	beq.n	8001ff8 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2223      	movs	r2, #35	; 0x23
 8001f2c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	f241 1334 	movw	r3, #4404	; 0x1134
 8001f36:	4413      	add	r3, r2
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6811      	ldr	r1, [r2, #0]
 8001f3e:	4a32      	ldr	r2, [pc, #200]	; (8002008 <HAL_ETH_Stop_IT+0xf0>)
 8001f40:	401a      	ands	r2, r3
 8001f42:	f241 1334 	movw	r3, #4404	; 0x1134
 8001f46:	440b      	add	r3, r1
 8001f48:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001f52:	4413      	add	r3, r2
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6811      	ldr	r1, [r2, #0]
 8001f5a:	f023 0201 	bic.w	r2, r3, #1
 8001f5e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001f62:	440b      	add	r3, r1
 8001f64:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f6e:	4413      	add	r3, r2
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6811      	ldr	r1, [r2, #0]
 8001f76:	f023 0201 	bic.w	r2, r3, #1
 8001f7a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f7e:	440b      	add	r3, r1
 8001f80:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0202 	bic.w	r2, r2, #2
 8001fb4:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e00f      	b.n	8001fdc <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3310      	adds	r3, #16
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d9ec      	bls.n	8001fbc <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2210      	movs	r2, #16
 8001fec:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e000      	b.n	8001ffa <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
  }
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	ffff2fbe 	.word	0xffff2fbe

0800200c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d107      	bne.n	800202e <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002022:	f043 0201 	orr.w	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e073      	b.n	8002116 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002032:	2b10      	cmp	r3, #16
 8002034:	d16e      	bne.n	8002114 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002036:	2200      	movs	r2, #0
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f001 f9fa 	bl	8003434 <ETH_Prepare_Tx_Descriptors>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204a:	f043 0202 	orr.w	r2, r3, #2
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e05f      	b.n	8002116 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3206      	adds	r2, #6
 800205e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002062:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	629a      	str	r2, [r3, #40]	; 0x28
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	2b03      	cmp	r3, #3
 8002074:	d904      	bls.n	8002080 <HAL_ETH_Transmit+0x74>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	1f1a      	subs	r2, r3, #4
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	3106      	adds	r1, #6
 800208c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002090:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002094:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8002096:	f7ff fc17 	bl	80018c8 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800209c:	e034      	b.n	8002108 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d011      	beq.n	80020d4 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b4:	f043 0208 	orr.w	r2, r3, #8
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	22e0      	movs	r2, #224	; 0xe0
 80020ce:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e020      	b.n	8002116 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020da:	d015      	beq.n	8002108 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80020dc:	f7ff fbf4 	bl	80018c8 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d302      	bcc.n	80020f2 <HAL_ETH_Transmit+0xe6>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10a      	bne.n	8002108 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f6:	f043 0204 	orr.w	r2, r3, #4
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	22e0      	movs	r2, #224	; 0xe0
 8002102:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e006      	b.n	8002116 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	dbc6      	blt.n	800209e <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800211e:	b480      	push	{r7}
 8002120:	b089      	sub	sp, #36	; 0x24
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3344      	adds	r3, #68	; 0x44
 800212a:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d06b      	beq.n	8002228 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002150:	2300      	movs	r3, #0
 8002152:	e0ce      	b.n	80022f2 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	3301      	adds	r3, #1
 8002158:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d036      	beq.n	80021d4 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	3301      	adds	r3, #1
 800216a:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3301      	adds	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d902      	bls.n	8002188 <HAL_ETH_IsRxDataAvailable+0x6a>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b04      	subs	r3, #4
 8002186:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db11      	blt.n	80021be <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2201      	movs	r2, #1
 80021aa:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	3301      	adds	r3, #1
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d902      	bls.n	80021be <HAL_ETH_IsRxDataAvailable+0xa0>
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	3b04      	subs	r3, #4
 80021bc:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e08e      	b.n	80022f2 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d012      	beq.n	8002206 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80021e4:	2301      	movs	r3, #1
 80021e6:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	3301      	adds	r3, #1
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d902      	bls.n	80021fa <HAL_ETH_IsRxDataAvailable+0xdc>
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	3b04      	subs	r3, #4
 80021f8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	e010      	b.n	8002228 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	3301      	adds	r3, #1
 800220a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3301      	adds	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d902      	bls.n	800221e <HAL_ETH_IsRxDataAvailable+0x100>
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	3b04      	subs	r3, #4
 800221c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002226:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db02      	blt.n	8002236 <HAL_ETH_IsRxDataAvailable+0x118>
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d98e      	bls.n	8002154 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d056      	beq.n	80022ea <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002254:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e03b      	b.n	80022d4 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800226a:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d20d      	bcs.n	80022ce <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3301      	adds	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d902      	bls.n	80022c4 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b04      	subs	r3, #4
 80022c2:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022cc:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3301      	adds	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d3bf      	bcc.n	800225c <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	f241 1328 	movw	r3, #4392	; 0x1128
 80022e6:	440b      	add	r3, r1
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]

  return 0;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b08a      	sub	sp, #40	; 0x28
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3344      	adds	r3, #68	; 0x44
 800230c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002320:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d104      	bne.n	8002336 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e07d      	b.n	8002432 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10f      	bne.n	800235e <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff feed 	bl	800211e <HAL_ETH_IsRxDataAvailable>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e071      	b.n	8002432 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235c:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
 8002362:	e031      	b.n	80023c8 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	461a      	mov	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00b      	beq.n	8002396 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	461a      	mov	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800239e:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	3301      	adds	r3, #1
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d902      	bls.n	80023b2 <HAL_ETH_GetRxDataBuffer+0xb4>
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	3b04      	subs	r3, #4
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ba:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	3301      	adds	r3, #1
 80023c6:	623b      	str	r3, [r7, #32]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	6a3a      	ldr	r2, [r7, #32]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3c7      	bcc.n	8002364 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	461a      	mov	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d803      	bhi.n	80023fe <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	e018      	b.n	8002430 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d012      	beq.n	800242c <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	461a      	mov	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	1ad2      	subs	r2, r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	e001      	b.n	8002430 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3728      	adds	r7, #40	; 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3344      	adds	r3, #68	; 0x44
 8002448:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff fe60 	bl	800211e <HAL_ETH_IsRxDataAvailable>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e017      	b.n	8002498 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	4413      	add	r3, r2
 8002470:	3b01      	subs	r3, #1
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d902      	bls.n	8002480 <HAL_ETH_GetRxDataLength+0x46>
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3b04      	subs	r3, #4
 800247e:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002488:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3344      	adds	r3, #68	; 0x44
 80024ac:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024bc:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e057      	b.n	8002580 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3301      	adds	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	e03b      	b.n	800255c <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024f2:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d009      	beq.n	8002510 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3b01      	subs	r3, #1
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	429a      	cmp	r2, r3
 8002538:	d20d      	bcs.n	8002556 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3301      	adds	r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b03      	cmp	r3, #3
 8002544:	d902      	bls.n	800254c <HAL_ETH_BuildRxDescriptors+0xac>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b04      	subs	r3, #4
 800254a:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002554:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	3301      	adds	r3, #1
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	429a      	cmp	r2, r3
 8002562:	d3bf      	bcc.n	80024e4 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6819      	ldr	r1, [r3, #0]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	f241 1328 	movw	r3, #4392	; 0x1128
 800256e:	440b      	add	r3, r1
 8002570:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3724      	adds	r7, #36	; 0x24
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d113      	bne.n	80025ce <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	f241 1334 	movw	r3, #4404	; 0x1134
 80025ae:	4413      	add	r3, r2
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b6:	2b40      	cmp	r3, #64	; 0x40
 80025b8:	d109      	bne.n	80025ce <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f003 f884 	bl	80056c8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80025c8:	f248 0240 	movw	r2, #32832	; 0x8040
 80025cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d113      	bne.n	8002608 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	f241 1334 	movw	r3, #4404	; 0x1134
 80025e8:	4413      	add	r3, r2
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d109      	bne.n	8002608 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f8b7 	bl	8002768 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002602:	f248 0201 	movw	r2, #32769	; 0x8001
 8002606:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800261a:	d149      	bne.n	80026b0 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	f241 1334 	movw	r3, #4404	; 0x1134
 8002624:	4413      	add	r3, r2
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002630:	d13e      	bne.n	80026b0 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002636:	f043 0208 	orr.w	r2, r3, #8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800264c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002650:	d11b      	bne.n	800268a <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	f241 1302 	movw	r3, #4354	; 0x1102
 8002660:	4013      	ands	r3, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	f241 1334 	movw	r3, #4404	; 0x1134
 800266e:	4413      	add	r3, r2
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6811      	ldr	r1, [r2, #0]
 8002676:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800267a:	f241 1334 	movw	r3, #4404	; 0x1134
 800267e:	440b      	add	r3, r1
 8002680:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	22e0      	movs	r2, #224	; 0xe0
 8002686:	66da      	str	r2, [r3, #108]	; 0x6c
 8002688:	e00f      	b.n	80026aa <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026a4:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 80026a8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f866 	bl	800277c <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026b8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80026bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80026c0:	d10e      	bne.n	80026e0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	22e0      	movs	r2, #224	; 0xe0
 80026d2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f85b 	bl	8002790 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d10f      	bne.n	8002710 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026f8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f84e 	bl	80027a4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b20      	cmp	r3, #32
 800271e:	d10f      	bne.n	8002740 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002728:	f003 020f 	and.w	r2, r3, #15
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f840 	bl	80027b8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_ETH_IRQHandler+0x1d8>)
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d006      	beq.n	800275a <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_ETH_IRQHandler+0x1d8>)
 800274e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002752:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f839 	bl	80027cc <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	58000080 	.word	0x58000080

08002768 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e03e      	b.n	8002880 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800280a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	055b      	lsls	r3, r3, #21
 8002816:	4313      	orrs	r3, r2
 8002818:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f043 030c 	orr.w	r3, r3, #12
 800282e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002842:	f7ff f841 	bl	80018c8 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002848:	e009      	b.n	800285e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800284a:	f7ff f83d 	bl	80018c8 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002858:	d901      	bls.n	800285e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e010      	b.n	8002880 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ed      	bne.n	800284a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002876:	b29b      	uxth	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e03c      	b.n	8002924 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028b2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	055b      	lsls	r3, r3, #21
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	041b      	lsls	r3, r3, #16
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 030c 	bic.w	r3, r3, #12
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_ETH_WritePHYRegister+0xa4>)
 80028ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80028ee:	4a0f      	ldr	r2, [pc, #60]	; (800292c <HAL_ETH_WritePHYRegister+0xa4>)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80028f6:	f7fe ffe7 	bl	80018c8 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80028fc:	e009      	b.n	8002912 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80028fe:	f7fe ffe3 	bl	80018c8 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800290c:	d901      	bls.n	8002912 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e008      	b.n	8002924 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ed      	bne.n	80028fe <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40028000 	.word	0x40028000

08002930 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e1c3      	b.n	8002ccc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 020c 	and.w	r2, r3, #12
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf0c      	ite	eq
 800298a:	2301      	moveq	r3, #1
 800298c:	2300      	movne	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bf14      	ite	ne
 80029a6:	2301      	movne	r3, #1
 80029a8:	2300      	moveq	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf14      	ite	ne
 80029da:	2301      	movne	r3, #1
 80029dc:	2300      	moveq	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf14      	ite	ne
 80029f4:	2301      	movne	r3, #1
 80029f6:	2300      	moveq	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	bf14      	ite	ne
 8002a2a:	2301      	movne	r3, #1
 8002a2c:	2300      	moveq	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	bf0c      	ite	eq
 8002a5e:	2301      	moveq	r3, #1
 8002a60:	2300      	movne	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf14      	ite	ne
 8002a78:	2301      	movne	r3, #1
 8002a7a:	2300      	moveq	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf14      	ite	ne
 8002a92:	2301      	movne	r3, #1
 8002a94:	2300      	moveq	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	bf14      	ite	ne
 8002ac6:	2301      	movne	r3, #1
 8002ac8:	2300      	moveq	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	0e5b      	lsrs	r3, r3, #25
 8002b8e:	f003 021f 	and.w	r2, r3, #31
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 020f 	and.w	r2, r3, #15
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf14      	ite	ne
 8002bce:	2301      	movne	r3, #1
 8002bd0:	2300      	moveq	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002c58:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002c68:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e00a      	b.n	8002d02 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d105      	bne.n	8002d00 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002cf4:	6839      	ldr	r1, [r7, #0]
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f860 	bl	8002dbc <ETH_SetMACConfig>

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d1c:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d24:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d26:	f001 ff47 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8002d2a:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4a1e      	ldr	r2, [pc, #120]	; (8002da8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d908      	bls.n	8002d46 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d804      	bhi.n	8002d46 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	e027      	b.n	8002d96 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d908      	bls.n	8002d60 <HAL_ETH_SetMDIOClockRange+0x54>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d204      	bcs.n	8002d60 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e01a      	b.n	8002d96 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d303      	bcc.n	8002d70 <HAL_ETH_SetMDIOClockRange+0x64>
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d911      	bls.n	8002d94 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d908      	bls.n	8002d8a <HAL_ETH_SetMDIOClockRange+0x7e>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4a0f      	ldr	r2, [pc, #60]	; (8002db8 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d804      	bhi.n	8002d8a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e005      	b.n	8002d96 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	e000      	b.n	8002d96 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002d94:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	01312cff 	.word	0x01312cff
 8002dac:	02160ebf 	.word	0x02160ebf
 8002db0:	03938700 	.word	0x03938700
 8002db4:	05f5e0ff 	.word	0x05f5e0ff
 8002db8:	08f0d17f 	.word	0x08f0d17f

08002dbc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002dce:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	791b      	ldrb	r3, [r3, #4]
 8002dd4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002dd6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	7b1b      	ldrb	r3, [r3, #12]
 8002ddc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002dde:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	7b5b      	ldrb	r3, [r3, #13]
 8002de4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002de6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	7b9b      	ldrb	r3, [r3, #14]
 8002dec:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002dee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	7bdb      	ldrb	r3, [r3, #15]
 8002df4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002df6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	7c12      	ldrb	r2, [r2, #16]
 8002dfc:	2a00      	cmp	r2, #0
 8002dfe:	d102      	bne.n	8002e06 <ETH_SetMACConfig+0x4a>
 8002e00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002e04:	e000      	b.n	8002e08 <ETH_SetMACConfig+0x4c>
 8002e06:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002e08:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	7c52      	ldrb	r2, [r2, #17]
 8002e0e:	2a00      	cmp	r2, #0
 8002e10:	d102      	bne.n	8002e18 <ETH_SetMACConfig+0x5c>
 8002e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e16:	e000      	b.n	8002e1a <ETH_SetMACConfig+0x5e>
 8002e18:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002e1a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	7c9b      	ldrb	r3, [r3, #18]
 8002e20:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002e22:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002e28:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002e2e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	7f1b      	ldrb	r3, [r3, #28]
 8002e34:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002e36:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	7f5b      	ldrb	r3, [r3, #29]
 8002e3c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002e3e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	7f92      	ldrb	r2, [r2, #30]
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d102      	bne.n	8002e4e <ETH_SetMACConfig+0x92>
 8002e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e4c:	e000      	b.n	8002e50 <ETH_SetMACConfig+0x94>
 8002e4e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002e50:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	7fdb      	ldrb	r3, [r3, #31]
 8002e56:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002e58:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e60:	2a00      	cmp	r2, #0
 8002e62:	d102      	bne.n	8002e6a <ETH_SetMACConfig+0xae>
 8002e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e68:	e000      	b.n	8002e6c <ETH_SetMACConfig+0xb0>
 8002e6a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002e6c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002e72:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e7a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002e7c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b56      	ldr	r3, [pc, #344]	; (8002fe8 <ETH_SetMACConfig+0x22c>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	68f9      	ldr	r1, [r7, #12]
 8002e96:	430b      	orrs	r3, r1
 8002e98:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ea6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002ea8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002eb0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002eb2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002eba:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002ebc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002ec4:	2a00      	cmp	r2, #0
 8002ec6:	d102      	bne.n	8002ece <ETH_SetMACConfig+0x112>
 8002ec8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ecc:	e000      	b.n	8002ed0 <ETH_SetMACConfig+0x114>
 8002ece:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002ed0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4b42      	ldr	r3, [pc, #264]	; (8002fec <ETH_SetMACConfig+0x230>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	68f9      	ldr	r1, [r7, #12]
 8002eea:	430b      	orrs	r3, r1
 8002eec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ef4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	4b3a      	ldr	r3, [pc, #232]	; (8002ff0 <ETH_SetMACConfig+0x234>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	68f9      	ldr	r1, [r7, #12]
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f18:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f1e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f26:	2a00      	cmp	r2, #0
 8002f28:	d101      	bne.n	8002f2e <ETH_SetMACConfig+0x172>
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	e000      	b.n	8002f30 <ETH_SetMACConfig+0x174>
 8002f2e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002f30:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f36:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f42:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002f46:	4013      	ands	r3, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	68f9      	ldr	r1, [r7, #12]
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002f58:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002f60:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f023 0103 	bic.w	r1, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002f86:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002fa2:	2a00      	cmp	r2, #0
 8002fa4:	d101      	bne.n	8002faa <ETH_SetMACConfig+0x1ee>
 8002fa6:	2240      	movs	r2, #64	; 0x40
 8002fa8:	e000      	b.n	8002fac <ETH_SetMACConfig+0x1f0>
 8002faa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002fac:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002fb4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002fb6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002fbe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002fcc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	00048083 	.word	0x00048083
 8002fec:	c0f88000 	.word	0xc0f88000
 8002ff0:	fffffef0 	.word	0xfffffef0

08002ff4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b38      	ldr	r3, [pc, #224]	; (80030ec <ETH_SetDMAConfig+0xf8>)
 800300a:	4013      	ands	r3, r2
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	6809      	ldr	r1, [r1, #0]
 8003014:	431a      	orrs	r2, r3
 8003016:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800301a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	791b      	ldrb	r3, [r3, #4]
 8003020:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003026:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	7b1b      	ldrb	r3, [r3, #12]
 800302c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	f241 0304 	movw	r3, #4100	; 0x1004
 800303a:	4413      	add	r3, r2
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4b2c      	ldr	r3, [pc, #176]	; (80030f0 <ETH_SetDMAConfig+0xfc>)
 8003040:	4013      	ands	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6811      	ldr	r1, [r2, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	431a      	orrs	r2, r3
 800304a:	f241 0304 	movw	r3, #4100	; 0x1004
 800304e:	440b      	add	r3, r1
 8003050:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	7b5b      	ldrb	r3, [r3, #13]
 8003056:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b22      	ldr	r3, [pc, #136]	; (80030f4 <ETH_SetDMAConfig+0x100>)
 800306c:	4013      	ands	r3, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6811      	ldr	r1, [r2, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	431a      	orrs	r2, r3
 8003076:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800307a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	7d1b      	ldrb	r3, [r3, #20]
 8003084:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003086:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	7f5b      	ldrb	r3, [r3, #29]
 800308c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	f241 1304 	movw	r3, #4356	; 0x1104
 800309a:	4413      	add	r3, r2
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <ETH_SetDMAConfig+0x104>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6811      	ldr	r1, [r2, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	f241 1304 	movw	r3, #4356	; 0x1104
 80030ae:	440b      	add	r3, r1
 80030b0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	7f1b      	ldrb	r3, [r3, #28]
 80030b6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	f241 1308 	movw	r3, #4360	; 0x1108
 80030c8:	4413      	add	r3, r2
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <ETH_SetDMAConfig+0x108>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6811      	ldr	r1, [r2, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	f241 1308 	movw	r3, #4360	; 0x1108
 80030dc:	440b      	add	r3, r1
 80030de:	601a      	str	r2, [r3, #0]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	ffff87fd 	.word	0xffff87fd
 80030f0:	ffff2ffe 	.word	0xffff2ffe
 80030f4:	fffec000 	.word	0xfffec000
 80030f8:	ffc0efef 	.word	0xffc0efef
 80030fc:	7fc0ffff 	.word	0x7fc0ffff

08003100 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b0a4      	sub	sp, #144	; 0x90
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800310e:	2300      	movs	r3, #0
 8003110:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800311e:	2301      	movs	r3, #1
 8003120:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800312a:	2301      	movs	r3, #1
 800312c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003130:	2300      	movs	r3, #0
 8003132:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800313c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003140:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003142:	2300      	movs	r3, #0
 8003144:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003148:	2300      	movs	r3, #0
 800314a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003158:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800315c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800315e:	2300      	movs	r3, #0
 8003160:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003164:	2300      	movs	r3, #0
 8003166:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800316e:	2300      	movs	r3, #0
 8003170:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800317a:	2300      	movs	r3, #0
 800317c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800317e:	2300      	movs	r3, #0
 8003180:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003182:	2300      	movs	r3, #0
 8003184:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003198:	2320      	movs	r3, #32
 800319a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80031aa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031b4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80031bc:	2302      	movs	r3, #2
 80031be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80031da:	2300      	movs	r3, #0
 80031dc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80031e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff fde6 	bl	8002dbc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80031f0:	2301      	movs	r3, #1
 80031f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80031f4:	2301      	movs	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003202:	2300      	movs	r3, #0
 8003204:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800320a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800320e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003214:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003218:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800321a:	2300      	movs	r3, #0
 800321c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003220:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003224:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003226:	f107 0308 	add.w	r3, r7, #8
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fee1 	bl	8002ff4 <ETH_SetDMAConfig>
}
 8003232:	bf00      	nop
 8003234:	3790      	adds	r7, #144	; 0x90
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800324c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003254:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003256:	f001 fcaf 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 800325a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4a1e      	ldr	r2, [pc, #120]	; (80032d8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d908      	bls.n	8003276 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d804      	bhi.n	8003276 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	e027      	b.n	80032c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4a18      	ldr	r2, [pc, #96]	; (80032dc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d908      	bls.n	8003290 <ETH_MAC_MDIO_ClkConfig+0x54>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d204      	bcs.n	8003290 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	e01a      	b.n	80032c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d303      	bcc.n	80032a0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d911      	bls.n	80032c4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4a10      	ldr	r2, [pc, #64]	; (80032e4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d908      	bls.n	80032ba <ETH_MAC_MDIO_ClkConfig+0x7e>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d804      	bhi.n	80032ba <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	e005      	b.n	80032c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e000      	b.n	80032c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80032c4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	01312cff 	.word	0x01312cff
 80032dc:	02160ebf 	.word	0x02160ebf
 80032e0:	03938700 	.word	0x03938700
 80032e4:	05f5e0ff 	.word	0x05f5e0ff
 80032e8:	08f0d17f 	.word	0x08f0d17f

080032ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	e01d      	b.n	8003336 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68d9      	ldr	r1, [r3, #12]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	440b      	add	r3, r1
 800330a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2200      	movs	r2, #0
 8003316:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2200      	movs	r2, #0
 8003322:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	3206      	adds	r2, #6
 800332c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3301      	adds	r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d9de      	bls.n	80032fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	f241 132c 	movw	r3, #4396	; 0x112c
 800334a:	4413      	add	r3, r2
 800334c:	2203      	movs	r2, #3
 800334e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68d9      	ldr	r1, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	f241 1314 	movw	r3, #4372	; 0x1114
 800335c:	4413      	add	r3, r2
 800335e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800336c:	601a      	str	r2, [r3, #0]
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800337a:	b480      	push	{r7}
 800337c:	b085      	sub	sp, #20
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e024      	b.n	80033d2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6919      	ldr	r1, [r3, #16]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4613      	mov	r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	4413      	add	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	440b      	add	r3, r1
 8003398:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2200      	movs	r2, #0
 80033a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2200      	movs	r2, #0
 80033b6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2200      	movs	r2, #0
 80033bc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3310      	adds	r3, #16
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3301      	adds	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d9d7      	bls.n	8003388 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	f241 1330 	movw	r3, #4400	; 0x1130
 80033fe:	4413      	add	r3, r2
 8003400:	2203      	movs	r2, #3
 8003402:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6919      	ldr	r1, [r3, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	f241 131c 	movw	r3, #4380	; 0x111c
 8003410:	4413      	add	r3, r2
 8003412:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	f241 1328 	movw	r3, #4392	; 0x1128
 8003424:	4413      	add	r3, r2
 8003426:	6019      	str	r1, [r3, #0]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003434:	b480      	push	{r7}
 8003436:	b08d      	sub	sp, #52	; 0x34
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3318      	adds	r3, #24
 8003444:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8003452:	2300      	movs	r3, #0
 8003454:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800345a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003476:	d007      	beq.n	8003488 <ETH_Prepare_Tx_Descriptors+0x54>
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	3304      	adds	r3, #4
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003488:	2302      	movs	r3, #2
 800348a:	e24a      	b.n	8003922 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d044      	beq.n	8003522 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	4b72      	ldr	r3, [pc, #456]	; (8003668 <ETH_Prepare_Tx_Descriptors+0x234>)
 800349e:	4013      	ands	r3, r2
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034a4:	431a      	orrs	r2, r3
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80034c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d027      	beq.n	8003522 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	041b      	lsls	r3, r3, #16
 80034de:	431a      	orrs	r2, r3
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	431a      	orrs	r2, r3
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003510:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003520:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00e      	beq.n	800354c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	4b4e      	ldr	r3, [pc, #312]	; (800366c <ETH_Prepare_Tx_Descriptors+0x238>)
 8003534:	4013      	ands	r3, r2
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	6992      	ldr	r2, [r2, #24]
 800353a:	431a      	orrs	r2, r3
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <ETH_Prepare_Tx_Descriptors+0x130>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d030      	beq.n	80035c6 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	3301      	adds	r3, #1
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	2b03      	cmp	r3, #3
 8003586:	d902      	bls.n	800358e <ETH_Prepare_Tx_Descriptors+0x15a>
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	3b04      	subs	r3, #4
 800358c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003596:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	3301      	adds	r3, #1
 800359c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035aa:	d10c      	bne.n	80035c6 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b4:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80035c2:	2302      	movs	r3, #2
 80035c4:	e1ad      	b.n	8003922 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	3301      	adds	r3, #1
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	4b24      	ldr	r3, [pc, #144]	; (800366c <ETH_Prepare_Tx_Descriptors+0x238>)
 80035dc:	4013      	ands	r3, r2
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	6852      	ldr	r2, [r2, #4]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d012      	beq.n	8003616 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003606:	4013      	ands	r3, r2
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	6852      	ldr	r2, [r2, #4]
 800360c:	0412      	lsls	r2, r2, #16
 800360e:	431a      	orrs	r2, r3
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	e008      	b.n	8003628 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	2200      	movs	r2, #0
 800361a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	4b13      	ldr	r3, [pc, #76]	; (8003670 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003622:	4013      	ands	r3, r2
 8003624:	6a3a      	ldr	r2, [r7, #32]
 8003626:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	d021      	beq.n	8003678 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	04db      	lsls	r3, r3, #19
 8003642:	431a      	orrs	r2, r3
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <ETH_Prepare_Tx_Descriptors+0x240>)
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	69d2      	ldr	r2, [r2, #28]
 8003654:	431a      	orrs	r2, r3
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	e02e      	b.n	80036c6 <ETH_Prepare_Tx_Descriptors+0x292>
 8003668:	ffff0000 	.word	0xffff0000
 800366c:	ffffc000 	.word	0xffffc000
 8003670:	c000ffff 	.word	0xc000ffff
 8003674:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	4b93      	ldr	r3, [pc, #588]	; (80038cc <ETH_Prepare_Tx_Descriptors+0x498>)
 800367e:	4013      	ands	r3, r2
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	6852      	ldr	r2, [r2, #4]
 8003684:	431a      	orrs	r2, r3
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	431a      	orrs	r2, r3
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	431a      	orrs	r2, r3
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80cb 	beq.w	80038ac <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	431a      	orrs	r2, r3
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003728:	e0c0      	b.n	80038ac <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	3301      	adds	r3, #1
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373e:	2b03      	cmp	r3, #3
 8003740:	d902      	bls.n	8003748 <ETH_Prepare_Tx_Descriptors+0x314>
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	3b04      	subs	r3, #4
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003750:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800376a:	d007      	beq.n	800377c <ETH_Prepare_Tx_Descriptors+0x348>
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	3304      	adds	r3, #4
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d026      	beq.n	80037ca <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003788:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800378a:	2300      	movs	r3, #0
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
 800378e:	e016      	b.n	80037be <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	3301      	adds	r3, #1
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d902      	bls.n	80037ae <ETH_Prepare_Tx_Descriptors+0x37a>
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	3b04      	subs	r3, #4
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b6:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	3301      	adds	r3, #1
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
 80037be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d3e4      	bcc.n	8003790 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 80037c6:	2302      	movs	r3, #2
 80037c8:	e0ab      	b.n	8003922 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	3301      	adds	r3, #1
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	4b3a      	ldr	r3, [pc, #232]	; (80038d0 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	6852      	ldr	r2, [r2, #4]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d012      	beq.n	8003820 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003810:	4013      	ands	r3, r2
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	6852      	ldr	r2, [r2, #4]
 8003816:	0412      	lsls	r2, r2, #16
 8003818:	431a      	orrs	r2, r3
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	609a      	str	r2, [r3, #8]
 800381e:	e008      	b.n	8003832 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	2200      	movs	r2, #0
 8003824:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800382c:	4013      	ands	r3, r2
 800382e:	6a3a      	ldr	r2, [r7, #32]
 8003830:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00f      	beq.n	800385e <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003844:	4013      	ands	r3, r2
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	69d2      	ldr	r2, [r2, #28]
 800384a:	431a      	orrs	r2, r3
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	60da      	str	r2, [r3, #12]
 800385c:	e017      	b.n	800388e <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <ETH_Prepare_Tx_Descriptors+0x498>)
 8003864:	4013      	ands	r3, r2
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	6852      	ldr	r2, [r2, #4]
 800386a:	431a      	orrs	r2, r3
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	431a      	orrs	r2, r3
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	3301      	adds	r3, #1
 8003892:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f47f af3a 	bne.w	800372a <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00f      	beq.n	80038dc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	e00e      	b.n	80038e8 <ETH_Prepare_Tx_Descriptors+0x4b4>
 80038ca:	bf00      	nop
 80038cc:	ffff8000 	.word	0xffff8000
 80038d0:	ffffc000 	.word	0xffffc000
 80038d4:	c000ffff 	.word	0xc000ffff
 80038d8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f8:	6979      	ldr	r1, [r7, #20]
 80038fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fc:	3304      	adds	r3, #4
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003908:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800390a:	b672      	cpsid	i
}
 800390c:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	4413      	add	r3, r2
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800391c:	b662      	cpsie	i
}
 800391e:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3734      	adds	r7, #52	; 0x34
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop

08003930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003930:	b480      	push	{r7}
 8003932:	b089      	sub	sp, #36	; 0x24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800393e:	4b89      	ldr	r3, [pc, #548]	; (8003b64 <HAL_GPIO_Init+0x234>)
 8003940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003942:	e194      	b.n	8003c6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2101      	movs	r1, #1
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	fa01 f303 	lsl.w	r3, r1, r3
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8186 	beq.w	8003c68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d00b      	beq.n	800397c <HAL_GPIO_Init+0x4c>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d007      	beq.n	800397c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003970:	2b11      	cmp	r3, #17
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b12      	cmp	r3, #18
 800397a:	d130      	bne.n	80039de <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	2203      	movs	r2, #3
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039b2:	2201      	movs	r2, #1
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 0201 	and.w	r2, r3, #1
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2203      	movs	r2, #3
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_Init+0xee>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b12      	cmp	r3, #18
 8003a1c:	d123      	bne.n	8003a66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	08da      	lsrs	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3208      	adds	r2, #8
 8003a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	220f      	movs	r2, #15
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	08da      	lsrs	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3208      	adds	r2, #8
 8003a60:	69b9      	ldr	r1, [r7, #24]
 8003a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	2203      	movs	r2, #3
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 0203 	and.w	r2, r3, #3
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80e0 	beq.w	8003c68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa8:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <HAL_GPIO_Init+0x238>)
 8003aaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003aae:	4a2e      	ldr	r2, [pc, #184]	; (8003b68 <HAL_GPIO_Init+0x238>)
 8003ab0:	f043 0302 	orr.w	r3, r3, #2
 8003ab4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_GPIO_Init+0x238>)
 8003aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ac6:	4a29      	ldr	r2, [pc, #164]	; (8003b6c <HAL_GPIO_Init+0x23c>)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	089b      	lsrs	r3, r3, #2
 8003acc:	3302      	adds	r3, #2
 8003ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	220f      	movs	r2, #15
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a20      	ldr	r2, [pc, #128]	; (8003b70 <HAL_GPIO_Init+0x240>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d052      	beq.n	8003b98 <HAL_GPIO_Init+0x268>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <HAL_GPIO_Init+0x244>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d031      	beq.n	8003b5e <HAL_GPIO_Init+0x22e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <HAL_GPIO_Init+0x248>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d02b      	beq.n	8003b5a <HAL_GPIO_Init+0x22a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <HAL_GPIO_Init+0x24c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d025      	beq.n	8003b56 <HAL_GPIO_Init+0x226>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <HAL_GPIO_Init+0x250>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01f      	beq.n	8003b52 <HAL_GPIO_Init+0x222>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <HAL_GPIO_Init+0x254>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d019      	beq.n	8003b4e <HAL_GPIO_Init+0x21e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a1a      	ldr	r2, [pc, #104]	; (8003b88 <HAL_GPIO_Init+0x258>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_GPIO_Init+0x21a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a19      	ldr	r2, [pc, #100]	; (8003b8c <HAL_GPIO_Init+0x25c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00d      	beq.n	8003b46 <HAL_GPIO_Init+0x216>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_GPIO_Init+0x260>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d007      	beq.n	8003b42 <HAL_GPIO_Init+0x212>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <HAL_GPIO_Init+0x264>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d101      	bne.n	8003b3e <HAL_GPIO_Init+0x20e>
 8003b3a:	2309      	movs	r3, #9
 8003b3c:	e02d      	b.n	8003b9a <HAL_GPIO_Init+0x26a>
 8003b3e:	230a      	movs	r3, #10
 8003b40:	e02b      	b.n	8003b9a <HAL_GPIO_Init+0x26a>
 8003b42:	2308      	movs	r3, #8
 8003b44:	e029      	b.n	8003b9a <HAL_GPIO_Init+0x26a>
 8003b46:	2307      	movs	r3, #7
 8003b48:	e027      	b.n	8003b9a <HAL_GPIO_Init+0x26a>
 8003b4a:	2306      	movs	r3, #6
 8003b4c:	e025      	b.n	8003b9a <HAL_GPIO_Init+0x26a>
 8003b4e:	2305      	movs	r3, #5
 8003b50:	e023      	b.n	8003b9a <HAL_GPIO_Init+0x26a>
 8003b52:	2304      	movs	r3, #4
 8003b54:	e021      	b.n	8003b9a <HAL_GPIO_Init+0x26a>
 8003b56:	2303      	movs	r3, #3
 8003b58:	e01f      	b.n	8003b9a <HAL_GPIO_Init+0x26a>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e01d      	b.n	8003b9a <HAL_GPIO_Init+0x26a>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e01b      	b.n	8003b9a <HAL_GPIO_Init+0x26a>
 8003b62:	bf00      	nop
 8003b64:	58000080 	.word	0x58000080
 8003b68:	58024400 	.word	0x58024400
 8003b6c:	58000400 	.word	0x58000400
 8003b70:	58020000 	.word	0x58020000
 8003b74:	58020400 	.word	0x58020400
 8003b78:	58020800 	.word	0x58020800
 8003b7c:	58020c00 	.word	0x58020c00
 8003b80:	58021000 	.word	0x58021000
 8003b84:	58021400 	.word	0x58021400
 8003b88:	58021800 	.word	0x58021800
 8003b8c:	58021c00 	.word	0x58021c00
 8003b90:	58022000 	.word	0x58022000
 8003b94:	58022400 	.word	0x58022400
 8003b98:	2300      	movs	r3, #0
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	f002 0203 	and.w	r2, r2, #3
 8003ba0:	0092      	lsls	r2, r2, #2
 8003ba2:	4093      	lsls	r3, r2
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003baa:	4938      	ldr	r1, [pc, #224]	; (8003c8c <HAL_GPIO_Init+0x35c>)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	fa22 f303 	lsr.w	r3, r2, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f47f ae63 	bne.w	8003944 <HAL_GPIO_Init+0x14>
  }
}
 8003c7e:	bf00      	nop
 8003c80:	bf00      	nop
 8003c82:	3724      	adds	r7, #36	; 0x24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	58000400 	.word	0x58000400

08003c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ca0:	787b      	ldrb	r3, [r7, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003cac:	e003      	b.n	8003cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003cae:	887b      	ldrh	r3, [r7, #2]
 8003cb0:	041a      	lsls	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	619a      	str	r2, [r3, #24]
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003ccc:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <HAL_PWREx_ConfigSupply+0x70>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d00a      	beq.n	8003cee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003cd8:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <HAL_PWREx_ConfigSupply+0x70>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d001      	beq.n	8003cea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e01f      	b.n	8003d2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e01d      	b.n	8003d2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <HAL_PWREx_ConfigSupply+0x70>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f023 0207 	bic.w	r2, r3, #7
 8003cf6:	490f      	ldr	r1, [pc, #60]	; (8003d34 <HAL_PWREx_ConfigSupply+0x70>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003cfe:	f7fd fde3 	bl	80018c8 <HAL_GetTick>
 8003d02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d04:	e009      	b.n	8003d1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d06:	f7fd fddf 	bl	80018c8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d14:	d901      	bls.n	8003d1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e007      	b.n	8003d2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_PWREx_ConfigSupply+0x70>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d26:	d1ee      	bne.n	8003d06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	58024800 	.word	0x58024800

08003d38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08c      	sub	sp, #48	; 0x30
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e3ff      	b.n	800454a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8087 	beq.w	8003e66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d58:	4b99      	ldr	r3, [pc, #612]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d62:	4b97      	ldr	r3, [pc, #604]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d007      	beq.n	8003d7e <HAL_RCC_OscConfig+0x46>
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	2b18      	cmp	r3, #24
 8003d72:	d110      	bne.n	8003d96 <HAL_RCC_OscConfig+0x5e>
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d10b      	bne.n	8003d96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7e:	4b90      	ldr	r3, [pc, #576]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d06c      	beq.n	8003e64 <HAL_RCC_OscConfig+0x12c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d168      	bne.n	8003e64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e3d9      	b.n	800454a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9e:	d106      	bne.n	8003dae <HAL_RCC_OscConfig+0x76>
 8003da0:	4b87      	ldr	r3, [pc, #540]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a86      	ldr	r2, [pc, #536]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	e02e      	b.n	8003e0c <HAL_RCC_OscConfig+0xd4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x98>
 8003db6:	4b82      	ldr	r3, [pc, #520]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a81      	ldr	r2, [pc, #516]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b7f      	ldr	r3, [pc, #508]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7e      	ldr	r2, [pc, #504]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e01d      	b.n	8003e0c <HAL_RCC_OscConfig+0xd4>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCC_OscConfig+0xbc>
 8003dda:	4b79      	ldr	r3, [pc, #484]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a78      	ldr	r2, [pc, #480]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4b76      	ldr	r3, [pc, #472]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a75      	ldr	r2, [pc, #468]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	e00b      	b.n	8003e0c <HAL_RCC_OscConfig+0xd4>
 8003df4:	4b72      	ldr	r3, [pc, #456]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a71      	ldr	r2, [pc, #452]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4b6f      	ldr	r3, [pc, #444]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a6e      	ldr	r2, [pc, #440]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d013      	beq.n	8003e3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fd fd58 	bl	80018c8 <HAL_GetTick>
 8003e18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7fd fd54 	bl	80018c8 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	; 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e38d      	b.n	800454a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e2e:	4b64      	ldr	r3, [pc, #400]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0xe4>
 8003e3a:	e014      	b.n	8003e66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd fd44 	bl	80018c8 <HAL_GetTick>
 8003e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e44:	f7fd fd40 	bl	80018c8 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	; 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e379      	b.n	800454a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e56:	4b5a      	ldr	r3, [pc, #360]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x10c>
 8003e62:	e000      	b.n	8003e66 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 80ae 	beq.w	8003fd0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e74:	4b52      	ldr	r3, [pc, #328]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e7e:	4b50      	ldr	r3, [pc, #320]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <HAL_RCC_OscConfig+0x162>
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	2b18      	cmp	r3, #24
 8003e8e:	d13a      	bne.n	8003f06 <HAL_RCC_OscConfig+0x1ce>
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d135      	bne.n	8003f06 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e9a:	4b49      	ldr	r3, [pc, #292]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x17a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e34b      	b.n	800454a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb2:	f7fd fd15 	bl	80018e0 <HAL_GetREVID>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d817      	bhi.n	8003ef0 <HAL_RCC_OscConfig+0x1b8>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d108      	bne.n	8003eda <HAL_RCC_OscConfig+0x1a2>
 8003ec8:	4b3d      	ldr	r3, [pc, #244]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ed0:	4a3b      	ldr	r2, [pc, #236]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ed8:	e07a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eda:	4b39      	ldr	r3, [pc, #228]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	031b      	lsls	r3, r3, #12
 8003ee8:	4935      	ldr	r1, [pc, #212]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eee:	e06f      	b.n	8003fd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef0:	4b33      	ldr	r3, [pc, #204]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	061b      	lsls	r3, r3, #24
 8003efe:	4930      	ldr	r1, [pc, #192]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f04:	e064      	b.n	8003fd0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d045      	beq.n	8003f9a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f0e:	4b2c      	ldr	r3, [pc, #176]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 0219 	bic.w	r2, r3, #25
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	4929      	ldr	r1, [pc, #164]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd fcd2 	bl	80018c8 <HAL_GetTick>
 8003f24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f28:	f7fd fcce 	bl	80018c8 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e307      	b.n	800454a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f3a:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f46:	f7fd fccb 	bl	80018e0 <HAL_GetREVID>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d817      	bhi.n	8003f84 <HAL_RCC_OscConfig+0x24c>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d108      	bne.n	8003f6e <HAL_RCC_OscConfig+0x236>
 8003f5c:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003f64:	4a16      	ldr	r2, [pc, #88]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f6a:	6053      	str	r3, [r2, #4]
 8003f6c:	e030      	b.n	8003fd0 <HAL_RCC_OscConfig+0x298>
 8003f6e:	4b14      	ldr	r3, [pc, #80]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	031b      	lsls	r3, r3, #12
 8003f7c:	4910      	ldr	r1, [pc, #64]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]
 8003f82:	e025      	b.n	8003fd0 <HAL_RCC_OscConfig+0x298>
 8003f84:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	490b      	ldr	r1, [pc, #44]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
 8003f98:	e01a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <HAL_RCC_OscConfig+0x288>)
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa6:	f7fd fc8f 	bl	80018c8 <HAL_GetTick>
 8003faa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fae:	f7fd fc8b 	bl	80018c8 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d903      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e2c4      	b.n	800454a <HAL_RCC_OscConfig+0x812>
 8003fc0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fc4:	4ba4      	ldr	r3, [pc, #656]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ee      	bne.n	8003fae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 80a9 	beq.w	8004130 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fde:	4b9e      	ldr	r3, [pc, #632]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fe6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fe8:	4b9b      	ldr	r3, [pc, #620]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d007      	beq.n	8004004 <HAL_RCC_OscConfig+0x2cc>
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b18      	cmp	r3, #24
 8003ff8:	d13a      	bne.n	8004070 <HAL_RCC_OscConfig+0x338>
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d135      	bne.n	8004070 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004004:	4b94      	ldr	r3, [pc, #592]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_OscConfig+0x2e4>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b80      	cmp	r3, #128	; 0x80
 8004016:	d001      	beq.n	800401c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e296      	b.n	800454a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800401c:	f7fd fc60 	bl	80018e0 <HAL_GetREVID>
 8004020:	4603      	mov	r3, r0
 8004022:	f241 0203 	movw	r2, #4099	; 0x1003
 8004026:	4293      	cmp	r3, r2
 8004028:	d817      	bhi.n	800405a <HAL_RCC_OscConfig+0x322>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	2b20      	cmp	r3, #32
 8004030:	d108      	bne.n	8004044 <HAL_RCC_OscConfig+0x30c>
 8004032:	4b89      	ldr	r3, [pc, #548]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800403a:	4a87      	ldr	r2, [pc, #540]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 800403c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004040:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004042:	e075      	b.n	8004130 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004044:	4b84      	ldr	r3, [pc, #528]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	069b      	lsls	r3, r3, #26
 8004052:	4981      	ldr	r1, [pc, #516]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004058:	e06a      	b.n	8004130 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800405a:	4b7f      	ldr	r3, [pc, #508]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	061b      	lsls	r3, r3, #24
 8004068:	497b      	ldr	r1, [pc, #492]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 800406a:	4313      	orrs	r3, r2
 800406c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800406e:	e05f      	b.n	8004130 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d042      	beq.n	80040fe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004078:	4b77      	ldr	r3, [pc, #476]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a76      	ldr	r2, [pc, #472]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 800407e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fd fc20 	bl	80018c8 <HAL_GetTick>
 8004088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800408c:	f7fd fc1c 	bl	80018c8 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e255      	b.n	800454a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800409e:	4b6e      	ldr	r3, [pc, #440]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040aa:	f7fd fc19 	bl	80018e0 <HAL_GetREVID>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d817      	bhi.n	80040e8 <HAL_RCC_OscConfig+0x3b0>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d108      	bne.n	80040d2 <HAL_RCC_OscConfig+0x39a>
 80040c0:	4b65      	ldr	r3, [pc, #404]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80040c8:	4a63      	ldr	r2, [pc, #396]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 80040ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040ce:	6053      	str	r3, [r2, #4]
 80040d0:	e02e      	b.n	8004130 <HAL_RCC_OscConfig+0x3f8>
 80040d2:	4b61      	ldr	r3, [pc, #388]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	069b      	lsls	r3, r3, #26
 80040e0:	495d      	ldr	r1, [pc, #372]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
 80040e6:	e023      	b.n	8004130 <HAL_RCC_OscConfig+0x3f8>
 80040e8:	4b5b      	ldr	r3, [pc, #364]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	4958      	ldr	r1, [pc, #352]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60cb      	str	r3, [r1, #12]
 80040fc:	e018      	b.n	8004130 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040fe:	4b56      	ldr	r3, [pc, #344]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a55      	ldr	r2, [pc, #340]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 8004104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7fd fbdd 	bl	80018c8 <HAL_GetTick>
 800410e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004112:	f7fd fbd9 	bl	80018c8 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e212      	b.n	800454a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004124:	4b4c      	ldr	r3, [pc, #304]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1f0      	bne.n	8004112 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d036      	beq.n	80041aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d019      	beq.n	8004178 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004144:	4b44      	ldr	r3, [pc, #272]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 8004146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004148:	4a43      	ldr	r2, [pc, #268]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004150:	f7fd fbba 	bl	80018c8 <HAL_GetTick>
 8004154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004158:	f7fd fbb6 	bl	80018c8 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e1ef      	b.n	800454a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800416a:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 800416c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x420>
 8004176:	e018      	b.n	80041aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004178:	4b37      	ldr	r3, [pc, #220]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 800417a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417c:	4a36      	ldr	r2, [pc, #216]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 800417e:	f023 0301 	bic.w	r3, r3, #1
 8004182:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004184:	f7fd fba0 	bl	80018c8 <HAL_GetTick>
 8004188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800418c:	f7fd fb9c 	bl	80018c8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e1d5      	b.n	800454a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800419e:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 80041a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d036      	beq.n	8004224 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d019      	beq.n	80041f2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041be:	4b26      	ldr	r3, [pc, #152]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a25      	ldr	r2, [pc, #148]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 80041c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041ca:	f7fd fb7d 	bl	80018c8 <HAL_GetTick>
 80041ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041d2:	f7fd fb79 	bl	80018c8 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e1b2      	b.n	800454a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041e4:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x49a>
 80041f0:	e018      	b.n	8004224 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041f2:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 80041f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041fe:	f7fd fb63 	bl	80018c8 <HAL_GetTick>
 8004202:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004206:	f7fd fb5f 	bl	80018c8 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e198      	b.n	800454a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004218:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <HAL_RCC_OscConfig+0x520>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f0      	bne.n	8004206 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8085 	beq.w	800433c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004232:	4b0a      	ldr	r3, [pc, #40]	; (800425c <HAL_RCC_OscConfig+0x524>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a09      	ldr	r2, [pc, #36]	; (800425c <HAL_RCC_OscConfig+0x524>)
 8004238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800423e:	f7fd fb43 	bl	80018c8 <HAL_GetTick>
 8004242:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004244:	e00c      	b.n	8004260 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004246:	f7fd fb3f 	bl	80018c8 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b64      	cmp	r3, #100	; 0x64
 8004252:	d905      	bls.n	8004260 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e178      	b.n	800454a <HAL_RCC_OscConfig+0x812>
 8004258:	58024400 	.word	0x58024400
 800425c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004260:	4b96      	ldr	r3, [pc, #600]	; (80044bc <HAL_RCC_OscConfig+0x784>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0ec      	beq.n	8004246 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d106      	bne.n	8004282 <HAL_RCC_OscConfig+0x54a>
 8004274:	4b92      	ldr	r3, [pc, #584]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4a91      	ldr	r2, [pc, #580]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6713      	str	r3, [r2, #112]	; 0x70
 8004280:	e02d      	b.n	80042de <HAL_RCC_OscConfig+0x5a6>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x56c>
 800428a:	4b8d      	ldr	r3, [pc, #564]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a8c      	ldr	r2, [pc, #560]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
 8004296:	4b8a      	ldr	r3, [pc, #552]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a89      	ldr	r2, [pc, #548]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 800429c:	f023 0304 	bic.w	r3, r3, #4
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70
 80042a2:	e01c      	b.n	80042de <HAL_RCC_OscConfig+0x5a6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b05      	cmp	r3, #5
 80042aa:	d10c      	bne.n	80042c6 <HAL_RCC_OscConfig+0x58e>
 80042ac:	4b84      	ldr	r3, [pc, #528]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	4a83      	ldr	r2, [pc, #524]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80042b2:	f043 0304 	orr.w	r3, r3, #4
 80042b6:	6713      	str	r3, [r2, #112]	; 0x70
 80042b8:	4b81      	ldr	r3, [pc, #516]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	4a80      	ldr	r2, [pc, #512]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6713      	str	r3, [r2, #112]	; 0x70
 80042c4:	e00b      	b.n	80042de <HAL_RCC_OscConfig+0x5a6>
 80042c6:	4b7e      	ldr	r3, [pc, #504]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	4a7d      	ldr	r2, [pc, #500]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	6713      	str	r3, [r2, #112]	; 0x70
 80042d2:	4b7b      	ldr	r3, [pc, #492]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	4a7a      	ldr	r2, [pc, #488]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80042d8:	f023 0304 	bic.w	r3, r3, #4
 80042dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d015      	beq.n	8004312 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e6:	f7fd faef 	bl	80018c8 <HAL_GetTick>
 80042ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ec:	e00a      	b.n	8004304 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ee:	f7fd faeb 	bl	80018c8 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e122      	b.n	800454a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004304:	4b6e      	ldr	r3, [pc, #440]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0ee      	beq.n	80042ee <HAL_RCC_OscConfig+0x5b6>
 8004310:	e014      	b.n	800433c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004312:	f7fd fad9 	bl	80018c8 <HAL_GetTick>
 8004316:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004318:	e00a      	b.n	8004330 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7fd fad5 	bl	80018c8 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	; 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e10c      	b.n	800454a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004330:	4b63      	ldr	r3, [pc, #396]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1ee      	bne.n	800431a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8101 	beq.w	8004548 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004346:	4b5e      	ldr	r3, [pc, #376]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800434e:	2b18      	cmp	r3, #24
 8004350:	f000 80bc 	beq.w	80044cc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	2b02      	cmp	r3, #2
 800435a:	f040 8095 	bne.w	8004488 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435e:	4b58      	ldr	r3, [pc, #352]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a57      	ldr	r2, [pc, #348]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436a:	f7fd faad 	bl	80018c8 <HAL_GetTick>
 800436e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004372:	f7fd faa9 	bl	80018c8 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e0e2      	b.n	800454a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004384:	4b4e      	ldr	r3, [pc, #312]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f0      	bne.n	8004372 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004390:	4b4b      	ldr	r3, [pc, #300]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004394:	4b4b      	ldr	r3, [pc, #300]	; (80044c4 <HAL_RCC_OscConfig+0x78c>)
 8004396:	4013      	ands	r3, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043a0:	0112      	lsls	r2, r2, #4
 80043a2:	430a      	orrs	r2, r1
 80043a4:	4946      	ldr	r1, [pc, #280]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	628b      	str	r3, [r1, #40]	; 0x28
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	3b01      	subs	r3, #1
 80043b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b8:	3b01      	subs	r3, #1
 80043ba:	025b      	lsls	r3, r3, #9
 80043bc:	b29b      	uxth	r3, r3
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	3b01      	subs	r3, #1
 80043c6:	041b      	lsls	r3, r3, #16
 80043c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	3b01      	subs	r3, #1
 80043d4:	061b      	lsls	r3, r3, #24
 80043d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043da:	4939      	ldr	r1, [pc, #228]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80043e0:	4b37      	ldr	r3, [pc, #220]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	4a36      	ldr	r2, [pc, #216]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80043e6:	f023 0301 	bic.w	r3, r3, #1
 80043ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043ec:	4b34      	ldr	r3, [pc, #208]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80043ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f0:	4b35      	ldr	r3, [pc, #212]	; (80044c8 <HAL_RCC_OscConfig+0x790>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043f8:	00d2      	lsls	r2, r2, #3
 80043fa:	4931      	ldr	r1, [pc, #196]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004400:	4b2f      	ldr	r3, [pc, #188]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	f023 020c 	bic.w	r2, r3, #12
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	492c      	ldr	r1, [pc, #176]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 800440e:	4313      	orrs	r3, r2
 8004410:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004412:	4b2b      	ldr	r3, [pc, #172]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	f023 0202 	bic.w	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	4928      	ldr	r1, [pc, #160]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004420:	4313      	orrs	r3, r2
 8004422:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004424:	4b26      	ldr	r3, [pc, #152]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	4a25      	ldr	r2, [pc, #148]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 800442a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004430:	4b23      	ldr	r3, [pc, #140]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	4a22      	ldr	r2, [pc, #136]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800443a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800443c:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004442:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004446:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004448:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004454:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 800445a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800445e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd fa32 	bl	80018c8 <HAL_GetTick>
 8004464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004468:	f7fd fa2e 	bl	80018c8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e067      	b.n	800454a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800447a:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x730>
 8004486:	e05f      	b.n	8004548 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004488:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 800448e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fd fa18 	bl	80018c8 <HAL_GetTick>
 8004498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449c:	f7fd fa14 	bl	80018c8 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e04d      	b.n	800454a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ae:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <HAL_RCC_OscConfig+0x788>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x764>
 80044ba:	e045      	b.n	8004548 <HAL_RCC_OscConfig+0x810>
 80044bc:	58024800 	.word	0x58024800
 80044c0:	58024400 	.word	0x58024400
 80044c4:	fffffc0c 	.word	0xfffffc0c
 80044c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80044cc:	4b21      	ldr	r3, [pc, #132]	; (8004554 <HAL_RCC_OscConfig+0x81c>)
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80044d2:	4b20      	ldr	r3, [pc, #128]	; (8004554 <HAL_RCC_OscConfig+0x81c>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d031      	beq.n	8004544 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f003 0203 	and.w	r2, r3, #3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d12a      	bne.n	8004544 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d122      	bne.n	8004544 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800450a:	429a      	cmp	r2, r3
 800450c:	d11a      	bne.n	8004544 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	0a5b      	lsrs	r3, r3, #9
 8004512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800451c:	429a      	cmp	r2, r3
 800451e:	d111      	bne.n	8004544 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	0c1b      	lsrs	r3, r3, #16
 8004524:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d108      	bne.n	8004544 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	0e1b      	lsrs	r3, r3, #24
 8004536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3730      	adds	r7, #48	; 0x30
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	58024400 	.word	0x58024400

08004558 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e19c      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800456c:	4b8a      	ldr	r3, [pc, #552]	; (8004798 <HAL_RCC_ClockConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d910      	bls.n	800459c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b87      	ldr	r3, [pc, #540]	; (8004798 <HAL_RCC_ClockConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 020f 	bic.w	r2, r3, #15
 8004582:	4985      	ldr	r1, [pc, #532]	; (8004798 <HAL_RCC_ClockConfig+0x240>)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b83      	ldr	r3, [pc, #524]	; (8004798 <HAL_RCC_ClockConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e184      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d010      	beq.n	80045ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	4b7b      	ldr	r3, [pc, #492]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d908      	bls.n	80045ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045b8:	4b78      	ldr	r3, [pc, #480]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	4975      	ldr	r1, [pc, #468]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d010      	beq.n	80045f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	4b70      	ldr	r3, [pc, #448]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d908      	bls.n	80045f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045e6:	4b6d      	ldr	r3, [pc, #436]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	496a      	ldr	r1, [pc, #424]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b00      	cmp	r3, #0
 8004602:	d010      	beq.n	8004626 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699a      	ldr	r2, [r3, #24]
 8004608:	4b64      	ldr	r3, [pc, #400]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004610:	429a      	cmp	r2, r3
 8004612:	d908      	bls.n	8004626 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004614:	4b61      	ldr	r3, [pc, #388]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	495e      	ldr	r1, [pc, #376]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 8004622:	4313      	orrs	r3, r2
 8004624:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d010      	beq.n	8004654 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69da      	ldr	r2, [r3, #28]
 8004636:	4b59      	ldr	r3, [pc, #356]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800463e:	429a      	cmp	r2, r3
 8004640:	d908      	bls.n	8004654 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004642:	4b56      	ldr	r3, [pc, #344]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	4953      	ldr	r1, [pc, #332]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 8004650:	4313      	orrs	r3, r2
 8004652:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d010      	beq.n	8004682 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	4b4d      	ldr	r3, [pc, #308]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	429a      	cmp	r2, r3
 800466e:	d908      	bls.n	8004682 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004670:	4b4a      	ldr	r3, [pc, #296]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f023 020f 	bic.w	r2, r3, #15
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4947      	ldr	r1, [pc, #284]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 800467e:	4313      	orrs	r3, r2
 8004680:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d055      	beq.n	800473a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800468e:	4b43      	ldr	r3, [pc, #268]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	4940      	ldr	r1, [pc, #256]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 800469c:	4313      	orrs	r3, r2
 800469e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d107      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046a8:	4b3c      	ldr	r3, [pc, #240]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d121      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0f6      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d107      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046c0:	4b36      	ldr	r3, [pc, #216]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d115      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0ea      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046d8:	4b30      	ldr	r3, [pc, #192]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d109      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0de      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046e8:	4b2c      	ldr	r3, [pc, #176]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0d6      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046f8:	4b28      	ldr	r3, [pc, #160]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f023 0207 	bic.w	r2, r3, #7
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4925      	ldr	r1, [pc, #148]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 8004706:	4313      	orrs	r3, r2
 8004708:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470a:	f7fd f8dd 	bl	80018c8 <HAL_GetTick>
 800470e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004710:	e00a      	b.n	8004728 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004712:	f7fd f8d9 	bl	80018c8 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004720:	4293      	cmp	r3, r2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e0be      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004728:	4b1c      	ldr	r3, [pc, #112]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	429a      	cmp	r2, r3
 8004738:	d1eb      	bne.n	8004712 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d010      	beq.n	8004768 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	4b14      	ldr	r3, [pc, #80]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	429a      	cmp	r2, r3
 8004754:	d208      	bcs.n	8004768 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004756:	4b11      	ldr	r3, [pc, #68]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f023 020f 	bic.w	r2, r3, #15
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	490e      	ldr	r1, [pc, #56]	; (800479c <HAL_RCC_ClockConfig+0x244>)
 8004764:	4313      	orrs	r3, r2
 8004766:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_ClockConfig+0x240>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d214      	bcs.n	80047a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b08      	ldr	r3, [pc, #32]	; (8004798 <HAL_RCC_ClockConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 020f 	bic.w	r2, r3, #15
 800477e:	4906      	ldr	r1, [pc, #24]	; (8004798 <HAL_RCC_ClockConfig+0x240>)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	4313      	orrs	r3, r2
 8004784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004786:	4b04      	ldr	r3, [pc, #16]	; (8004798 <HAL_RCC_ClockConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e086      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
 8004798:	52002000 	.word	0x52002000
 800479c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d010      	beq.n	80047ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	4b3f      	ldr	r3, [pc, #252]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d208      	bcs.n	80047ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047bc:	4b3c      	ldr	r3, [pc, #240]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	4939      	ldr	r1, [pc, #228]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d010      	beq.n	80047fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	4b34      	ldr	r3, [pc, #208]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d208      	bcs.n	80047fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047ea:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	492e      	ldr	r1, [pc, #184]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004814:	429a      	cmp	r2, r3
 8004816:	d208      	bcs.n	800482a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004818:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	4922      	ldr	r1, [pc, #136]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 8004826:	4313      	orrs	r3, r2
 8004828:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d010      	beq.n	8004858 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004842:	429a      	cmp	r2, r3
 8004844:	d208      	bcs.n	8004858 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004846:	4b1a      	ldr	r3, [pc, #104]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4917      	ldr	r1, [pc, #92]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 8004854:	4313      	orrs	r3, r2
 8004856:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004858:	f000 f834 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	4912      	ldr	r1, [pc, #72]	; (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
 8004874:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004876:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <HAL_RCC_ClockConfig+0x358>)
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	4a0d      	ldr	r2, [pc, #52]	; (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 8004880:	5cd3      	ldrb	r3, [r2, r3]
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
 800488c:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <HAL_RCC_ClockConfig+0x360>)
 800488e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004890:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <HAL_RCC_ClockConfig+0x364>)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <HAL_RCC_ClockConfig+0x368>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fc fa84 	bl	8000da8 <HAL_InitTick>
 80048a0:	4603      	mov	r3, r0
 80048a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	58024400 	.word	0x58024400
 80048b4:	0801d804 	.word	0x0801d804
 80048b8:	24000004 	.word	0x24000004
 80048bc:	24000000 	.word	0x24000000
 80048c0:	24000008 	.word	0x24000008

080048c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b089      	sub	sp, #36	; 0x24
 80048c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ca:	4bb3      	ldr	r3, [pc, #716]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048d2:	2b18      	cmp	r3, #24
 80048d4:	f200 8155 	bhi.w	8004b82 <HAL_RCC_GetSysClockFreq+0x2be>
 80048d8:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	08004945 	.word	0x08004945
 80048e4:	08004b83 	.word	0x08004b83
 80048e8:	08004b83 	.word	0x08004b83
 80048ec:	08004b83 	.word	0x08004b83
 80048f0:	08004b83 	.word	0x08004b83
 80048f4:	08004b83 	.word	0x08004b83
 80048f8:	08004b83 	.word	0x08004b83
 80048fc:	08004b83 	.word	0x08004b83
 8004900:	0800496b 	.word	0x0800496b
 8004904:	08004b83 	.word	0x08004b83
 8004908:	08004b83 	.word	0x08004b83
 800490c:	08004b83 	.word	0x08004b83
 8004910:	08004b83 	.word	0x08004b83
 8004914:	08004b83 	.word	0x08004b83
 8004918:	08004b83 	.word	0x08004b83
 800491c:	08004b83 	.word	0x08004b83
 8004920:	08004971 	.word	0x08004971
 8004924:	08004b83 	.word	0x08004b83
 8004928:	08004b83 	.word	0x08004b83
 800492c:	08004b83 	.word	0x08004b83
 8004930:	08004b83 	.word	0x08004b83
 8004934:	08004b83 	.word	0x08004b83
 8004938:	08004b83 	.word	0x08004b83
 800493c:	08004b83 	.word	0x08004b83
 8004940:	08004977 	.word	0x08004977
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004944:	4b94      	ldr	r3, [pc, #592]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d009      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004950:	4b91      	ldr	r3, [pc, #580]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	08db      	lsrs	r3, r3, #3
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	4a90      	ldr	r2, [pc, #576]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
 8004960:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004962:	e111      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004964:	4b8d      	ldr	r3, [pc, #564]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004966:	61bb      	str	r3, [r7, #24]
    break;
 8004968:	e10e      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800496a:	4b8d      	ldr	r3, [pc, #564]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800496c:	61bb      	str	r3, [r7, #24]
    break;
 800496e:	e10b      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004970:	4b8c      	ldr	r3, [pc, #560]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004972:	61bb      	str	r3, [r7, #24]
    break;
 8004974:	e108      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004976:	4b88      	ldr	r3, [pc, #544]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004980:	4b85      	ldr	r3, [pc, #532]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	091b      	lsrs	r3, r3, #4
 8004986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800498a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800498c:	4b82      	ldr	r3, [pc, #520]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004996:	4b80      	ldr	r3, [pc, #512]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	08db      	lsrs	r3, r3, #3
 800499c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80e1 	beq.w	8004b7c <HAL_RCC_GetSysClockFreq+0x2b8>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	f000 8083 	beq.w	8004ac8 <HAL_RCC_GetSysClockFreq+0x204>
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	f200 80a1 	bhi.w	8004b0c <HAL_RCC_GetSysClockFreq+0x248>
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0x114>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d056      	beq.n	8004a84 <HAL_RCC_GetSysClockFreq+0x1c0>
 80049d6:	e099      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049d8:	4b6f      	ldr	r3, [pc, #444]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d02d      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049e4:	4b6c      	ldr	r3, [pc, #432]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	08db      	lsrs	r3, r3, #3
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	4a6b      	ldr	r2, [pc, #428]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
 80049f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	ee07 3a90 	vmov	s15, r3
 80049fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0e:	4b62      	ldr	r3, [pc, #392]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a22:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004a3e:	e087      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004bac <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a52:	4b51      	ldr	r3, [pc, #324]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a66:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a82:	e065      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004bb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a96:	4b40      	ldr	r3, [pc, #256]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aaa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ac6:	e043      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004bb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ada:	4b2f      	ldr	r3, [pc, #188]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b0a:	e021      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004bb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004b50:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	0a5b      	lsrs	r3, r3, #9
 8004b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b74:	ee17 3a90 	vmov	r3, s15
 8004b78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004b7a:	e005      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61bb      	str	r3, [r7, #24]
    break;
 8004b80:	e002      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004b82:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b84:	61bb      	str	r3, [r7, #24]
    break;
 8004b86:	bf00      	nop
  }

  return sysclockfreq;
 8004b88:	69bb      	ldr	r3, [r7, #24]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3724      	adds	r7, #36	; 0x24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	58024400 	.word	0x58024400
 8004b9c:	03d09000 	.word	0x03d09000
 8004ba0:	003d0900 	.word	0x003d0900
 8004ba4:	007a1200 	.word	0x007a1200
 8004ba8:	46000000 	.word	0x46000000
 8004bac:	4c742400 	.word	0x4c742400
 8004bb0:	4a742400 	.word	0x4a742400
 8004bb4:	4af42400 	.word	0x4af42400

08004bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bbe:	f7ff fe81 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	0a1b      	lsrs	r3, r3, #8
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	490f      	ldr	r1, [pc, #60]	; (8004c0c <HAL_RCC_GetHCLKFreq+0x54>)
 8004bd0:	5ccb      	ldrb	r3, [r1, r3]
 8004bd2:	f003 031f 	and.w	r3, r3, #31
 8004bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	4a09      	ldr	r2, [pc, #36]	; (8004c0c <HAL_RCC_GetHCLKFreq+0x54>)
 8004be6:	5cd3      	ldrb	r3, [r2, r3]
 8004be8:	f003 031f 	and.w	r3, r3, #31
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf2:	4a07      	ldr	r2, [pc, #28]	; (8004c10 <HAL_RCC_GetHCLKFreq+0x58>)
 8004bf4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bf6:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004bfc:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <HAL_RCC_GetHCLKFreq+0x58>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	58024400 	.word	0x58024400
 8004c0c:	0801d804 	.word	0x0801d804
 8004c10:	24000004 	.word	0x24000004
 8004c14:	24000000 	.word	0x24000000

08004c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c1c:	f7ff ffcc 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	091b      	lsrs	r3, r3, #4
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4904      	ldr	r1, [pc, #16]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	58024400 	.word	0x58024400
 8004c40:	0801d804 	.word	0x0801d804

08004c44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	223f      	movs	r2, #63	; 0x3f
 8004c52:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c54:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <HAL_RCC_GetClockConfig+0x7c>)
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	f003 0207 	and.w	r2, r3, #7
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004c60:	4b17      	ldr	r3, [pc, #92]	; (8004cc0 <HAL_RCC_GetClockConfig+0x7c>)
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004c6c:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <HAL_RCC_GetClockConfig+0x7c>)
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f003 020f 	and.w	r2, r3, #15
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004c78:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <HAL_RCC_GetClockConfig+0x7c>)
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004c84:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <HAL_RCC_GetClockConfig+0x7c>)
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <HAL_RCC_GetClockConfig+0x7c>)
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004c9c:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <HAL_RCC_GetClockConfig+0x7c>)
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <HAL_RCC_GetClockConfig+0x80>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 020f 	and.w	r2, r3, #15
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	601a      	str	r2, [r3, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	52002000 	.word	0x52002000

08004cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e049      	b.n	8004d6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f841 	bl	8004d76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f000 f9f8 	bl	80050fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d001      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e04f      	b.n	8004e44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a23      	ldr	r2, [pc, #140]	; (8004e50 <HAL_TIM_Base_Start_IT+0xc4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d01d      	beq.n	8004e02 <HAL_TIM_Base_Start_IT+0x76>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dce:	d018      	beq.n	8004e02 <HAL_TIM_Base_Start_IT+0x76>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1f      	ldr	r2, [pc, #124]	; (8004e54 <HAL_TIM_Base_Start_IT+0xc8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <HAL_TIM_Base_Start_IT+0x76>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <HAL_TIM_Base_Start_IT+0xcc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00e      	beq.n	8004e02 <HAL_TIM_Base_Start_IT+0x76>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d009      	beq.n	8004e02 <HAL_TIM_Base_Start_IT+0x76>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1b      	ldr	r2, [pc, #108]	; (8004e60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d004      	beq.n	8004e02 <HAL_TIM_Base_Start_IT+0x76>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a19      	ldr	r2, [pc, #100]	; (8004e64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d115      	bne.n	8004e2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b06      	cmp	r3, #6
 8004e12:	d015      	beq.n	8004e40 <HAL_TIM_Base_Start_IT+0xb4>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e1a:	d011      	beq.n	8004e40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2c:	e008      	b.n	8004e40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0201 	orr.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	e000      	b.n	8004e42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40000c00 	.word	0x40000c00
 8004e60:	40010400 	.word	0x40010400
 8004e64:	40001800 	.word	0x40001800
 8004e68:	00010007 	.word	0x00010007

08004e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d122      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d11b      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0202 	mvn.w	r2, #2
 8004e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f905 	bl	80050be <HAL_TIM_IC_CaptureCallback>
 8004eb4:	e005      	b.n	8004ec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f8f7 	bl	80050aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f908 	bl	80050d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d122      	bne.n	8004f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d11b      	bne.n	8004f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0204 	mvn.w	r2, #4
 8004eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f8db 	bl	80050be <HAL_TIM_IC_CaptureCallback>
 8004f08:	e005      	b.n	8004f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f8cd 	bl	80050aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f8de 	bl	80050d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d122      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d11b      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0208 	mvn.w	r2, #8
 8004f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2204      	movs	r2, #4
 8004f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f8b1 	bl	80050be <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f8a3 	bl	80050aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f8b4 	bl	80050d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d122      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d11b      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0210 	mvn.w	r2, #16
 8004f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2208      	movs	r2, #8
 8004f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f887 	bl	80050be <HAL_TIM_IC_CaptureCallback>
 8004fb0:	e005      	b.n	8004fbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f879 	bl	80050aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f88a 	bl	80050d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d10e      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d107      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0201 	mvn.w	r2, #1
 8004fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fb fea6 	bl	8000d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffa:	2b80      	cmp	r3, #128	; 0x80
 8004ffc:	d10e      	bne.n	800501c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005008:	2b80      	cmp	r3, #128	; 0x80
 800500a:	d107      	bne.n	800501c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f914 	bl	8005244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502a:	d10e      	bne.n	800504a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	2b80      	cmp	r3, #128	; 0x80
 8005038:	d107      	bne.n	800504a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f907 	bl	8005258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d10e      	bne.n	8005076 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	d107      	bne.n	8005076 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800506e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f838 	bl	80050e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b20      	cmp	r3, #32
 8005082:	d10e      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b20      	cmp	r3, #32
 8005090:	d107      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f06f 0220 	mvn.w	r2, #32
 800509a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f8c7 	bl	8005230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a40      	ldr	r2, [pc, #256]	; (8005210 <TIM_Base_SetConfig+0x114>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d013      	beq.n	800513c <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511a:	d00f      	beq.n	800513c <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a3d      	ldr	r2, [pc, #244]	; (8005214 <TIM_Base_SetConfig+0x118>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00b      	beq.n	800513c <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a3c      	ldr	r2, [pc, #240]	; (8005218 <TIM_Base_SetConfig+0x11c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d007      	beq.n	800513c <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a3b      	ldr	r2, [pc, #236]	; (800521c <TIM_Base_SetConfig+0x120>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d003      	beq.n	800513c <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a3a      	ldr	r2, [pc, #232]	; (8005220 <TIM_Base_SetConfig+0x124>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d108      	bne.n	800514e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2f      	ldr	r2, [pc, #188]	; (8005210 <TIM_Base_SetConfig+0x114>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d01f      	beq.n	8005196 <TIM_Base_SetConfig+0x9a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515c:	d01b      	beq.n	8005196 <TIM_Base_SetConfig+0x9a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2c      	ldr	r2, [pc, #176]	; (8005214 <TIM_Base_SetConfig+0x118>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d017      	beq.n	8005196 <TIM_Base_SetConfig+0x9a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2b      	ldr	r2, [pc, #172]	; (8005218 <TIM_Base_SetConfig+0x11c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <TIM_Base_SetConfig+0x9a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2a      	ldr	r2, [pc, #168]	; (800521c <TIM_Base_SetConfig+0x120>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00f      	beq.n	8005196 <TIM_Base_SetConfig+0x9a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a29      	ldr	r2, [pc, #164]	; (8005220 <TIM_Base_SetConfig+0x124>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00b      	beq.n	8005196 <TIM_Base_SetConfig+0x9a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a28      	ldr	r2, [pc, #160]	; (8005224 <TIM_Base_SetConfig+0x128>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d007      	beq.n	8005196 <TIM_Base_SetConfig+0x9a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a27      	ldr	r2, [pc, #156]	; (8005228 <TIM_Base_SetConfig+0x12c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d003      	beq.n	8005196 <TIM_Base_SetConfig+0x9a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a26      	ldr	r2, [pc, #152]	; (800522c <TIM_Base_SetConfig+0x130>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d108      	bne.n	80051a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a10      	ldr	r2, [pc, #64]	; (8005210 <TIM_Base_SetConfig+0x114>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00f      	beq.n	80051f4 <TIM_Base_SetConfig+0xf8>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a12      	ldr	r2, [pc, #72]	; (8005220 <TIM_Base_SetConfig+0x124>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00b      	beq.n	80051f4 <TIM_Base_SetConfig+0xf8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a11      	ldr	r2, [pc, #68]	; (8005224 <TIM_Base_SetConfig+0x128>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d007      	beq.n	80051f4 <TIM_Base_SetConfig+0xf8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a10      	ldr	r2, [pc, #64]	; (8005228 <TIM_Base_SetConfig+0x12c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_Base_SetConfig+0xf8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a0f      	ldr	r2, [pc, #60]	; (800522c <TIM_Base_SetConfig+0x130>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d103      	bne.n	80051fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	615a      	str	r2, [r3, #20]
}
 8005202:	bf00      	nop
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40010000 	.word	0x40010000
 8005214:	40000400 	.word	0x40000400
 8005218:	40000800 	.word	0x40000800
 800521c:	40000c00 	.word	0x40000c00
 8005220:	40010400 	.word	0x40010400
 8005224:	40014000 	.word	0x40014000
 8005228:	40014400 	.word	0x40014400
 800522c:	40014800 	.word	0x40014800

08005230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005272:	4b98      	ldr	r3, [pc, #608]	; (80054d4 <MX_LWIP_Init+0x268>)
 8005274:	22c0      	movs	r2, #192	; 0xc0
 8005276:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005278:	4b96      	ldr	r3, [pc, #600]	; (80054d4 <MX_LWIP_Init+0x268>)
 800527a:	22a8      	movs	r2, #168	; 0xa8
 800527c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 115;
 800527e:	4b95      	ldr	r3, [pc, #596]	; (80054d4 <MX_LWIP_Init+0x268>)
 8005280:	2273      	movs	r2, #115	; 0x73
 8005282:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 135;
 8005284:	4b93      	ldr	r3, [pc, #588]	; (80054d4 <MX_LWIP_Init+0x268>)
 8005286:	2287      	movs	r2, #135	; 0x87
 8005288:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800528a:	4b93      	ldr	r3, [pc, #588]	; (80054d8 <MX_LWIP_Init+0x26c>)
 800528c:	22ff      	movs	r2, #255	; 0xff
 800528e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005290:	4b91      	ldr	r3, [pc, #580]	; (80054d8 <MX_LWIP_Init+0x26c>)
 8005292:	22ff      	movs	r2, #255	; 0xff
 8005294:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005296:	4b90      	ldr	r3, [pc, #576]	; (80054d8 <MX_LWIP_Init+0x26c>)
 8005298:	22ff      	movs	r2, #255	; 0xff
 800529a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800529c:	4b8e      	ldr	r3, [pc, #568]	; (80054d8 <MX_LWIP_Init+0x26c>)
 800529e:	2200      	movs	r2, #0
 80052a0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80052a2:	4b8e      	ldr	r3, [pc, #568]	; (80054dc <MX_LWIP_Init+0x270>)
 80052a4:	22c0      	movs	r2, #192	; 0xc0
 80052a6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80052a8:	4b8c      	ldr	r3, [pc, #560]	; (80054dc <MX_LWIP_Init+0x270>)
 80052aa:	22a8      	movs	r2, #168	; 0xa8
 80052ac:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 115;
 80052ae:	4b8b      	ldr	r3, [pc, #556]	; (80054dc <MX_LWIP_Init+0x270>)
 80052b0:	2273      	movs	r2, #115	; 0x73
 80052b2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80052b4:	4b89      	ldr	r3, [pc, #548]	; (80054dc <MX_LWIP_Init+0x270>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80052ba:	2100      	movs	r1, #0
 80052bc:	2000      	movs	r0, #0
 80052be:	f004 fd47 	bl	8009d50 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80052c2:	4b84      	ldr	r3, [pc, #528]	; (80054d4 <MX_LWIP_Init+0x268>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	061a      	lsls	r2, r3, #24
 80052c8:	4b82      	ldr	r3, [pc, #520]	; (80054d4 <MX_LWIP_Init+0x268>)
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	431a      	orrs	r2, r3
 80052d0:	4b80      	ldr	r3, [pc, #512]	; (80054d4 <MX_LWIP_Init+0x268>)
 80052d2:	789b      	ldrb	r3, [r3, #2]
 80052d4:	021b      	lsls	r3, r3, #8
 80052d6:	4313      	orrs	r3, r2
 80052d8:	4a7e      	ldr	r2, [pc, #504]	; (80054d4 <MX_LWIP_Init+0x268>)
 80052da:	78d2      	ldrb	r2, [r2, #3]
 80052dc:	4313      	orrs	r3, r2
 80052de:	061a      	lsls	r2, r3, #24
 80052e0:	4b7c      	ldr	r3, [pc, #496]	; (80054d4 <MX_LWIP_Init+0x268>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	0619      	lsls	r1, r3, #24
 80052e6:	4b7b      	ldr	r3, [pc, #492]	; (80054d4 <MX_LWIP_Init+0x268>)
 80052e8:	785b      	ldrb	r3, [r3, #1]
 80052ea:	041b      	lsls	r3, r3, #16
 80052ec:	4319      	orrs	r1, r3
 80052ee:	4b79      	ldr	r3, [pc, #484]	; (80054d4 <MX_LWIP_Init+0x268>)
 80052f0:	789b      	ldrb	r3, [r3, #2]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	430b      	orrs	r3, r1
 80052f6:	4977      	ldr	r1, [pc, #476]	; (80054d4 <MX_LWIP_Init+0x268>)
 80052f8:	78c9      	ldrb	r1, [r1, #3]
 80052fa:	430b      	orrs	r3, r1
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005302:	431a      	orrs	r2, r3
 8005304:	4b73      	ldr	r3, [pc, #460]	; (80054d4 <MX_LWIP_Init+0x268>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	0619      	lsls	r1, r3, #24
 800530a:	4b72      	ldr	r3, [pc, #456]	; (80054d4 <MX_LWIP_Init+0x268>)
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	041b      	lsls	r3, r3, #16
 8005310:	4319      	orrs	r1, r3
 8005312:	4b70      	ldr	r3, [pc, #448]	; (80054d4 <MX_LWIP_Init+0x268>)
 8005314:	789b      	ldrb	r3, [r3, #2]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	430b      	orrs	r3, r1
 800531a:	496e      	ldr	r1, [pc, #440]	; (80054d4 <MX_LWIP_Init+0x268>)
 800531c:	78c9      	ldrb	r1, [r1, #3]
 800531e:	430b      	orrs	r3, r1
 8005320:	0a1b      	lsrs	r3, r3, #8
 8005322:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005326:	431a      	orrs	r2, r3
 8005328:	4b6a      	ldr	r3, [pc, #424]	; (80054d4 <MX_LWIP_Init+0x268>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	0619      	lsls	r1, r3, #24
 800532e:	4b69      	ldr	r3, [pc, #420]	; (80054d4 <MX_LWIP_Init+0x268>)
 8005330:	785b      	ldrb	r3, [r3, #1]
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	4319      	orrs	r1, r3
 8005336:	4b67      	ldr	r3, [pc, #412]	; (80054d4 <MX_LWIP_Init+0x268>)
 8005338:	789b      	ldrb	r3, [r3, #2]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	430b      	orrs	r3, r1
 800533e:	4965      	ldr	r1, [pc, #404]	; (80054d4 <MX_LWIP_Init+0x268>)
 8005340:	78c9      	ldrb	r1, [r1, #3]
 8005342:	430b      	orrs	r3, r1
 8005344:	0e1b      	lsrs	r3, r3, #24
 8005346:	4313      	orrs	r3, r2
 8005348:	4a65      	ldr	r2, [pc, #404]	; (80054e0 <MX_LWIP_Init+0x274>)
 800534a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800534c:	4b62      	ldr	r3, [pc, #392]	; (80054d8 <MX_LWIP_Init+0x26c>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	061a      	lsls	r2, r3, #24
 8005352:	4b61      	ldr	r3, [pc, #388]	; (80054d8 <MX_LWIP_Init+0x26c>)
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	041b      	lsls	r3, r3, #16
 8005358:	431a      	orrs	r2, r3
 800535a:	4b5f      	ldr	r3, [pc, #380]	; (80054d8 <MX_LWIP_Init+0x26c>)
 800535c:	789b      	ldrb	r3, [r3, #2]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	4313      	orrs	r3, r2
 8005362:	4a5d      	ldr	r2, [pc, #372]	; (80054d8 <MX_LWIP_Init+0x26c>)
 8005364:	78d2      	ldrb	r2, [r2, #3]
 8005366:	4313      	orrs	r3, r2
 8005368:	061a      	lsls	r2, r3, #24
 800536a:	4b5b      	ldr	r3, [pc, #364]	; (80054d8 <MX_LWIP_Init+0x26c>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	0619      	lsls	r1, r3, #24
 8005370:	4b59      	ldr	r3, [pc, #356]	; (80054d8 <MX_LWIP_Init+0x26c>)
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	041b      	lsls	r3, r3, #16
 8005376:	4319      	orrs	r1, r3
 8005378:	4b57      	ldr	r3, [pc, #348]	; (80054d8 <MX_LWIP_Init+0x26c>)
 800537a:	789b      	ldrb	r3, [r3, #2]
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	430b      	orrs	r3, r1
 8005380:	4955      	ldr	r1, [pc, #340]	; (80054d8 <MX_LWIP_Init+0x26c>)
 8005382:	78c9      	ldrb	r1, [r1, #3]
 8005384:	430b      	orrs	r3, r1
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800538c:	431a      	orrs	r2, r3
 800538e:	4b52      	ldr	r3, [pc, #328]	; (80054d8 <MX_LWIP_Init+0x26c>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	0619      	lsls	r1, r3, #24
 8005394:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <MX_LWIP_Init+0x26c>)
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	041b      	lsls	r3, r3, #16
 800539a:	4319      	orrs	r1, r3
 800539c:	4b4e      	ldr	r3, [pc, #312]	; (80054d8 <MX_LWIP_Init+0x26c>)
 800539e:	789b      	ldrb	r3, [r3, #2]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	430b      	orrs	r3, r1
 80053a4:	494c      	ldr	r1, [pc, #304]	; (80054d8 <MX_LWIP_Init+0x26c>)
 80053a6:	78c9      	ldrb	r1, [r1, #3]
 80053a8:	430b      	orrs	r3, r1
 80053aa:	0a1b      	lsrs	r3, r3, #8
 80053ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80053b0:	431a      	orrs	r2, r3
 80053b2:	4b49      	ldr	r3, [pc, #292]	; (80054d8 <MX_LWIP_Init+0x26c>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	0619      	lsls	r1, r3, #24
 80053b8:	4b47      	ldr	r3, [pc, #284]	; (80054d8 <MX_LWIP_Init+0x26c>)
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	4319      	orrs	r1, r3
 80053c0:	4b45      	ldr	r3, [pc, #276]	; (80054d8 <MX_LWIP_Init+0x26c>)
 80053c2:	789b      	ldrb	r3, [r3, #2]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	430b      	orrs	r3, r1
 80053c8:	4943      	ldr	r1, [pc, #268]	; (80054d8 <MX_LWIP_Init+0x26c>)
 80053ca:	78c9      	ldrb	r1, [r1, #3]
 80053cc:	430b      	orrs	r3, r1
 80053ce:	0e1b      	lsrs	r3, r3, #24
 80053d0:	4313      	orrs	r3, r2
 80053d2:	4a44      	ldr	r2, [pc, #272]	; (80054e4 <MX_LWIP_Init+0x278>)
 80053d4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80053d6:	4b41      	ldr	r3, [pc, #260]	; (80054dc <MX_LWIP_Init+0x270>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	061a      	lsls	r2, r3, #24
 80053dc:	4b3f      	ldr	r3, [pc, #252]	; (80054dc <MX_LWIP_Init+0x270>)
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	041b      	lsls	r3, r3, #16
 80053e2:	431a      	orrs	r2, r3
 80053e4:	4b3d      	ldr	r3, [pc, #244]	; (80054dc <MX_LWIP_Init+0x270>)
 80053e6:	789b      	ldrb	r3, [r3, #2]
 80053e8:	021b      	lsls	r3, r3, #8
 80053ea:	4313      	orrs	r3, r2
 80053ec:	4a3b      	ldr	r2, [pc, #236]	; (80054dc <MX_LWIP_Init+0x270>)
 80053ee:	78d2      	ldrb	r2, [r2, #3]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	061a      	lsls	r2, r3, #24
 80053f4:	4b39      	ldr	r3, [pc, #228]	; (80054dc <MX_LWIP_Init+0x270>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	0619      	lsls	r1, r3, #24
 80053fa:	4b38      	ldr	r3, [pc, #224]	; (80054dc <MX_LWIP_Init+0x270>)
 80053fc:	785b      	ldrb	r3, [r3, #1]
 80053fe:	041b      	lsls	r3, r3, #16
 8005400:	4319      	orrs	r1, r3
 8005402:	4b36      	ldr	r3, [pc, #216]	; (80054dc <MX_LWIP_Init+0x270>)
 8005404:	789b      	ldrb	r3, [r3, #2]
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	430b      	orrs	r3, r1
 800540a:	4934      	ldr	r1, [pc, #208]	; (80054dc <MX_LWIP_Init+0x270>)
 800540c:	78c9      	ldrb	r1, [r1, #3]
 800540e:	430b      	orrs	r3, r1
 8005410:	021b      	lsls	r3, r3, #8
 8005412:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005416:	431a      	orrs	r2, r3
 8005418:	4b30      	ldr	r3, [pc, #192]	; (80054dc <MX_LWIP_Init+0x270>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	0619      	lsls	r1, r3, #24
 800541e:	4b2f      	ldr	r3, [pc, #188]	; (80054dc <MX_LWIP_Init+0x270>)
 8005420:	785b      	ldrb	r3, [r3, #1]
 8005422:	041b      	lsls	r3, r3, #16
 8005424:	4319      	orrs	r1, r3
 8005426:	4b2d      	ldr	r3, [pc, #180]	; (80054dc <MX_LWIP_Init+0x270>)
 8005428:	789b      	ldrb	r3, [r3, #2]
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	430b      	orrs	r3, r1
 800542e:	492b      	ldr	r1, [pc, #172]	; (80054dc <MX_LWIP_Init+0x270>)
 8005430:	78c9      	ldrb	r1, [r1, #3]
 8005432:	430b      	orrs	r3, r1
 8005434:	0a1b      	lsrs	r3, r3, #8
 8005436:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800543a:	431a      	orrs	r2, r3
 800543c:	4b27      	ldr	r3, [pc, #156]	; (80054dc <MX_LWIP_Init+0x270>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	0619      	lsls	r1, r3, #24
 8005442:	4b26      	ldr	r3, [pc, #152]	; (80054dc <MX_LWIP_Init+0x270>)
 8005444:	785b      	ldrb	r3, [r3, #1]
 8005446:	041b      	lsls	r3, r3, #16
 8005448:	4319      	orrs	r1, r3
 800544a:	4b24      	ldr	r3, [pc, #144]	; (80054dc <MX_LWIP_Init+0x270>)
 800544c:	789b      	ldrb	r3, [r3, #2]
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	430b      	orrs	r3, r1
 8005452:	4922      	ldr	r1, [pc, #136]	; (80054dc <MX_LWIP_Init+0x270>)
 8005454:	78c9      	ldrb	r1, [r1, #3]
 8005456:	430b      	orrs	r3, r1
 8005458:	0e1b      	lsrs	r3, r3, #24
 800545a:	4313      	orrs	r3, r2
 800545c:	4a22      	ldr	r2, [pc, #136]	; (80054e8 <MX_LWIP_Init+0x27c>)
 800545e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005460:	4b22      	ldr	r3, [pc, #136]	; (80054ec <MX_LWIP_Init+0x280>)
 8005462:	9302      	str	r3, [sp, #8]
 8005464:	4b22      	ldr	r3, [pc, #136]	; (80054f0 <MX_LWIP_Init+0x284>)
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	2300      	movs	r3, #0
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	4b1e      	ldr	r3, [pc, #120]	; (80054e8 <MX_LWIP_Init+0x27c>)
 800546e:	4a1d      	ldr	r2, [pc, #116]	; (80054e4 <MX_LWIP_Init+0x278>)
 8005470:	491b      	ldr	r1, [pc, #108]	; (80054e0 <MX_LWIP_Init+0x274>)
 8005472:	4820      	ldr	r0, [pc, #128]	; (80054f4 <MX_LWIP_Init+0x288>)
 8005474:	f005 fa32 	bl	800a8dc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005478:	481e      	ldr	r0, [pc, #120]	; (80054f4 <MX_LWIP_Init+0x288>)
 800547a:	f005 fbe1 	bl	800ac40 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800547e:	4b1d      	ldr	r3, [pc, #116]	; (80054f4 <MX_LWIP_Init+0x288>)
 8005480:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005484:	089b      	lsrs	r3, r3, #2
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005490:	4818      	ldr	r0, [pc, #96]	; (80054f4 <MX_LWIP_Init+0x288>)
 8005492:	f005 fbe5 	bl	800ac60 <netif_set_up>
 8005496:	e002      	b.n	800549e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005498:	4816      	ldr	r0, [pc, #88]	; (80054f4 <MX_LWIP_Init+0x288>)
 800549a:	f005 fc4d 	bl	800ad38 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800549e:	4916      	ldr	r1, [pc, #88]	; (80054f8 <MX_LWIP_Init+0x28c>)
 80054a0:	4814      	ldr	r0, [pc, #80]	; (80054f4 <MX_LWIP_Init+0x288>)
 80054a2:	f005 fcdf 	bl	800ae64 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80054a6:	2224      	movs	r2, #36	; 0x24
 80054a8:	2100      	movs	r1, #0
 80054aa:	4814      	ldr	r0, [pc, #80]	; (80054fc <MX_LWIP_Init+0x290>)
 80054ac:	f012 fb78 	bl	8017ba0 <memset>
  attributes.name = "EthLink";
 80054b0:	4b12      	ldr	r3, [pc, #72]	; (80054fc <MX_LWIP_Init+0x290>)
 80054b2:	4a13      	ldr	r2, [pc, #76]	; (8005500 <MX_LWIP_Init+0x294>)
 80054b4:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80054b6:	4b11      	ldr	r3, [pc, #68]	; (80054fc <MX_LWIP_Init+0x290>)
 80054b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054bc:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80054be:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <MX_LWIP_Init+0x290>)
 80054c0:	2210      	movs	r2, #16
 80054c2:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80054c4:	4a0d      	ldr	r2, [pc, #52]	; (80054fc <MX_LWIP_Init+0x290>)
 80054c6:	490b      	ldr	r1, [pc, #44]	; (80054f4 <MX_LWIP_Init+0x288>)
 80054c8:	480e      	ldr	r0, [pc, #56]	; (8005504 <MX_LWIP_Init+0x298>)
 80054ca:	f000 fd3a 	bl	8005f42 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80054ce:	bf00      	nop
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	2400bbb4 	.word	0x2400bbb4
 80054d8:	2400bbb0 	.word	0x2400bbb0
 80054dc:	2400bb50 	.word	0x2400bb50
 80054e0:	2400bbac 	.word	0x2400bbac
 80054e4:	2400bbb8 	.word	0x2400bbb8
 80054e8:	2400bbbc 	.word	0x2400bbbc
 80054ec:	08009c8d 	.word	0x08009c8d
 80054f0:	08005bc9 	.word	0x08005bc9
 80054f4:	2400bb78 	.word	0x2400bb78
 80054f8:	08005509 	.word	0x08005509
 80054fc:	2400bb54 	.word	0x2400bb54
 8005500:	0801aa3c 	.word	0x0801aa3c
 8005504:	08005cf1 	.word	0x08005cf1

08005508 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08e      	sub	sp, #56	; 0x38
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	605a      	str	r2, [r3, #4]
 800552e:	609a      	str	r2, [r3, #8]
 8005530:	60da      	str	r2, [r3, #12]
 8005532:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a5d      	ldr	r2, [pc, #372]	; (80056b0 <HAL_ETH_MspInit+0x194>)
 800553a:	4293      	cmp	r3, r2
 800553c:	f040 80b3 	bne.w	80056a6 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005540:	4b5c      	ldr	r3, [pc, #368]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 8005542:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005546:	4a5b      	ldr	r2, [pc, #364]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 8005548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005550:	4b58      	ldr	r3, [pc, #352]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 8005552:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800555a:	623b      	str	r3, [r7, #32]
 800555c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800555e:	4b55      	ldr	r3, [pc, #340]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 8005560:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005564:	4a53      	ldr	r2, [pc, #332]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 8005566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800556e:	4b51      	ldr	r3, [pc, #324]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 8005570:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800557c:	4b4d      	ldr	r3, [pc, #308]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 800557e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005582:	4a4c      	ldr	r2, [pc, #304]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 8005584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005588:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800558c:	4b49      	ldr	r3, [pc, #292]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 800558e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005596:	61bb      	str	r3, [r7, #24]
 8005598:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800559a:	4b46      	ldr	r3, [pc, #280]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 800559c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055a0:	4a44      	ldr	r2, [pc, #272]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 80055a2:	f043 0304 	orr.w	r3, r3, #4
 80055a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055aa:	4b42      	ldr	r3, [pc, #264]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 80055ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055b8:	4b3e      	ldr	r3, [pc, #248]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 80055ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055be:	4a3d      	ldr	r2, [pc, #244]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055c8:	4b3a      	ldr	r3, [pc, #232]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 80055ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055d6:	4b37      	ldr	r3, [pc, #220]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 80055d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055dc:	4a35      	ldr	r2, [pc, #212]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 80055de:	f043 0302 	orr.w	r3, r3, #2
 80055e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055e6:	4b33      	ldr	r3, [pc, #204]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 80055e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80055f4:	4b2f      	ldr	r3, [pc, #188]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 80055f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055fa:	4a2e      	ldr	r2, [pc, #184]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 80055fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005604:	4b2b      	ldr	r3, [pc, #172]	; (80056b4 <HAL_ETH_MspInit+0x198>)
 8005606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800560a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005612:	2332      	movs	r3, #50	; 0x32
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005616:	2302      	movs	r3, #2
 8005618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561a:	2300      	movs	r3, #0
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800561e:	2303      	movs	r3, #3
 8005620:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005622:	230b      	movs	r3, #11
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800562a:	4619      	mov	r1, r3
 800562c:	4822      	ldr	r0, [pc, #136]	; (80056b8 <HAL_ETH_MspInit+0x19c>)
 800562e:	f7fe f97f 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005632:	2386      	movs	r3, #134	; 0x86
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005636:	2302      	movs	r3, #2
 8005638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563a:	2300      	movs	r3, #0
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800563e:	2303      	movs	r3, #3
 8005640:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005642:	230b      	movs	r3, #11
 8005644:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800564a:	4619      	mov	r1, r3
 800564c:	481b      	ldr	r0, [pc, #108]	; (80056bc <HAL_ETH_MspInit+0x1a0>)
 800564e:	f7fe f96f 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005658:	2302      	movs	r3, #2
 800565a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565c:	2300      	movs	r3, #0
 800565e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005660:	2303      	movs	r3, #3
 8005662:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005664:	230b      	movs	r3, #11
 8005666:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800566c:	4619      	mov	r1, r3
 800566e:	4814      	ldr	r0, [pc, #80]	; (80056c0 <HAL_ETH_MspInit+0x1a4>)
 8005670:	f7fe f95e 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005674:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800567a:	2302      	movs	r3, #2
 800567c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567e:	2300      	movs	r3, #0
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005682:	2303      	movs	r3, #3
 8005684:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005686:	230b      	movs	r3, #11
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800568a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800568e:	4619      	mov	r1, r3
 8005690:	480c      	ldr	r0, [pc, #48]	; (80056c4 <HAL_ETH_MspInit+0x1a8>)
 8005692:	f7fe f94d 	bl	8003930 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005696:	2200      	movs	r2, #0
 8005698:	2105      	movs	r1, #5
 800569a:	203d      	movs	r0, #61	; 0x3d
 800569c:	f7fc f9f8 	bl	8001a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80056a0:	203d      	movs	r0, #61	; 0x3d
 80056a2:	f7fc fa0f 	bl	8001ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80056a6:	bf00      	nop
 80056a8:	3738      	adds	r7, #56	; 0x38
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40028000 	.word	0x40028000
 80056b4:	58024400 	.word	0x58024400
 80056b8:	58020800 	.word	0x58020800
 80056bc:	58020000 	.word	0x58020000
 80056c0:	58020400 	.word	0x58020400
 80056c4:	58021800 	.word	0x58021800

080056c8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <HAL_ETH_RxCpltCallback+0x1c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fecb 	bl	8006470 <osSemaphoreRelease>
}
 80056da:	bf00      	nop
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	24000264 	.word	0x24000264

080056e8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b0ac      	sub	sp, #176	; 0xb0
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t idx = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005702:	4b8f      	ldr	r3, [pc, #572]	; (8005940 <low_level_init+0x258>)
 8005704:	4a8f      	ldr	r2, [pc, #572]	; (8005944 <low_level_init+0x25c>)
 8005706:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005708:	2300      	movs	r3, #0
 800570a:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800570c:	2380      	movs	r3, #128	; 0x80
 800570e:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8005710:	23e1      	movs	r3, #225	; 0xe1
 8005712:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8005714:	2300      	movs	r3, #0
 8005716:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8005718:	2300      	movs	r3, #0
 800571a:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800571c:	2300      	movs	r3, #0
 800571e:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8005720:	4a87      	ldr	r2, [pc, #540]	; (8005940 <low_level_init+0x258>)
 8005722:	f107 030c 	add.w	r3, r7, #12
 8005726:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005728:	4b85      	ldr	r3, [pc, #532]	; (8005940 <low_level_init+0x258>)
 800572a:	2201      	movs	r2, #1
 800572c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800572e:	4b84      	ldr	r3, [pc, #528]	; (8005940 <low_level_init+0x258>)
 8005730:	4a85      	ldr	r2, [pc, #532]	; (8005948 <low_level_init+0x260>)
 8005732:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005734:	4b82      	ldr	r3, [pc, #520]	; (8005940 <low_level_init+0x258>)
 8005736:	4a85      	ldr	r2, [pc, #532]	; (800594c <low_level_init+0x264>)
 8005738:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800573a:	4b81      	ldr	r3, [pc, #516]	; (8005940 <low_level_init+0x258>)
 800573c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005740:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005742:	487f      	ldr	r0, [pc, #508]	; (8005940 <low_level_init+0x258>)
 8005744:	f7fc fa48 	bl	8001bd8 <HAL_ETH_Init>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800574e:	2234      	movs	r2, #52	; 0x34
 8005750:	2100      	movs	r1, #0
 8005752:	487f      	ldr	r0, [pc, #508]	; (8005950 <low_level_init+0x268>)
 8005754:	f012 fa24 	bl	8017ba0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005758:	4b7d      	ldr	r3, [pc, #500]	; (8005950 <low_level_init+0x268>)
 800575a:	2221      	movs	r2, #33	; 0x21
 800575c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800575e:	4b7c      	ldr	r3, [pc, #496]	; (8005950 <low_level_init+0x268>)
 8005760:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005764:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005766:	4b7a      	ldr	r3, [pc, #488]	; (8005950 <low_level_init+0x268>)
 8005768:	2200      	movs	r2, #0
 800576a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800576c:	4879      	ldr	r0, [pc, #484]	; (8005954 <low_level_init+0x26c>)
 800576e:	f004 ff6f 	bl	800a650 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2206      	movs	r2, #6
 8005776:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800577a:	4b71      	ldr	r3, [pc, #452]	; (8005940 <low_level_init+0x258>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	781a      	ldrb	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005786:	4b6e      	ldr	r3, [pc, #440]	; (8005940 <low_level_init+0x258>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	785a      	ldrb	r2, [r3, #1]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005792:	4b6b      	ldr	r3, [pc, #428]	; (8005940 <low_level_init+0x258>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	789a      	ldrb	r2, [r3, #2]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800579e:	4b68      	ldr	r3, [pc, #416]	; (8005940 <low_level_init+0x258>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	78da      	ldrb	r2, [r3, #3]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80057aa:	4b65      	ldr	r3, [pc, #404]	; (8005940 <low_level_init+0x258>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	791a      	ldrb	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80057b6:	4b62      	ldr	r3, [pc, #392]	; (8005940 <low_level_init+0x258>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	795a      	ldrb	r2, [r3, #5]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80057c8:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057d0:	f043 030a 	orr.w	r3, r3, #10
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80057dc:	2300      	movs	r3, #0
 80057de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057e2:	e012      	b.n	800580a <low_level_init+0x122>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80057e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057e8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80057ec:	fb02 f303 	mul.w	r3, r2, r3
 80057f0:	4a59      	ldr	r2, [pc, #356]	; (8005958 <low_level_init+0x270>)
 80057f2:	441a      	add	r2, r3
 80057f4:	2300      	movs	r3, #0
 80057f6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80057fa:	4851      	ldr	r0, [pc, #324]	; (8005940 <low_level_init+0x258>)
 80057fc:	f7fc fac6 	bl	8001d8c <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8005800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005804:	3301      	adds	r3, #1
 8005806:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800580a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800580e:	2b03      	cmp	r3, #3
 8005810:	d9e8      	bls.n	80057e4 <low_level_init+0xfc>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005812:	2200      	movs	r2, #0
 8005814:	2101      	movs	r1, #1
 8005816:	2001      	movs	r0, #1
 8005818:	f000 fd4f 	bl	80062ba <osSemaphoreNew>
 800581c:	4603      	mov	r3, r0
 800581e:	4a4f      	ldr	r2, [pc, #316]	; (800595c <low_level_init+0x274>)
 8005820:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005822:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005826:	2224      	movs	r2, #36	; 0x24
 8005828:	2100      	movs	r1, #0
 800582a:	4618      	mov	r0, r3
 800582c:	f012 f9b8 	bl	8017ba0 <memset>
  attributes.name = "EthIf";
 8005830:	4b4b      	ldr	r3, [pc, #300]	; (8005960 <low_level_init+0x278>)
 8005832:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005834:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityRealtime;
 800583c:	2330      	movs	r3, #48	; 0x30
 800583e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 8005842:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005846:	461a      	mov	r2, r3
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	4846      	ldr	r0, [pc, #280]	; (8005964 <low_level_init+0x27c>)
 800584c:	f000 fb79 	bl	8005f42 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005850:	4945      	ldr	r1, [pc, #276]	; (8005968 <low_level_init+0x280>)
 8005852:	4846      	ldr	r0, [pc, #280]	; (800596c <low_level_init+0x284>)
 8005854:	f7fb fe86 	bl	8001564 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005858:	4844      	ldr	r0, [pc, #272]	; (800596c <low_level_init+0x284>)
 800585a:	f7fb feb5 	bl	80015c8 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800585e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d165      	bne.n	8005932 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005866:	4841      	ldr	r0, [pc, #260]	; (800596c <low_level_init+0x284>)
 8005868:	f7fb ff56 	bl	8001718 <LAN8742_GetLinkState>
 800586c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005870:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005874:	2b01      	cmp	r3, #1
 8005876:	dc06      	bgt.n	8005886 <low_level_init+0x19e>
    {
      netif_set_link_down(netif);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f005 fac3 	bl	800ae04 <netif_set_link_down>
      netif_set_down(netif);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f005 fa5a 	bl	800ad38 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005884:	e057      	b.n	8005936 <low_level_init+0x24e>
 8005886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800588a:	3b02      	subs	r3, #2
 800588c:	2b03      	cmp	r3, #3
 800588e:	d82b      	bhi.n	80058e8 <low_level_init+0x200>
 8005890:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <low_level_init+0x1b0>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058a9 	.word	0x080058a9
 800589c:	080058bb 	.word	0x080058bb
 80058a0:	080058cb 	.word	0x080058cb
 80058a4:	080058db 	.word	0x080058db
        duplex = ETH_FULLDUPLEX_MODE;
 80058a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80058b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80058b8:	e01f      	b.n	80058fa <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 80058ba:	2300      	movs	r3, #0
 80058bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80058c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80058c8:	e017      	b.n	80058fa <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 80058ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80058d2:	2300      	movs	r3, #0
 80058d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80058d8:	e00f      	b.n	80058fa <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 80058da:	2300      	movs	r3, #0
 80058dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80058e0:	2300      	movs	r3, #0
 80058e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80058e6:	e008      	b.n	80058fa <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 80058e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80058f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80058f8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80058fa:	f107 0314 	add.w	r3, r7, #20
 80058fe:	4619      	mov	r1, r3
 8005900:	480f      	ldr	r0, [pc, #60]	; (8005940 <low_level_init+0x258>)
 8005902:	f7fd f815 	bl	8002930 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
    MACConf.Speed = speed;
 800590c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005912:	f107 0314 	add.w	r3, r7, #20
 8005916:	4619      	mov	r1, r3
 8005918:	4809      	ldr	r0, [pc, #36]	; (8005940 <low_level_init+0x258>)
 800591a:	f7fd f9dd 	bl	8002cd8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800591e:	4808      	ldr	r0, [pc, #32]	; (8005940 <low_level_init+0x258>)
 8005920:	f7fc fa75 	bl	8001e0e <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f005 f99b 	bl	800ac60 <netif_set_up>
    netif_set_link_up(netif);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f005 fa36 	bl	800ad9c <netif_set_link_up>
}
 8005930:	e001      	b.n	8005936 <low_level_init+0x24e>
    Error_Handler();
 8005932:	f7fb fa15 	bl	8000d60 <Error_Handler>
}
 8005936:	bf00      	nop
 8005938:	37b0      	adds	r7, #176	; 0xb0
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	2400bcac 	.word	0x2400bcac
 8005944:	40028000 	.word	0x40028000
 8005948:	30040060 	.word	0x30040060
 800594c:	30040000 	.word	0x30040000
 8005950:	2400bd34 	.word	0x2400bd34
 8005954:	0801d814 	.word	0x0801d814
 8005958:	30040200 	.word	0x30040200
 800595c:	24000264 	.word	0x24000264
 8005960:	0801aa44 	.word	0x0801aa44
 8005964:	08005b79 	.word	0x08005b79
 8005968:	24000010 	.word	0x24000010
 800596c:	2400bc8c 	.word	0x2400bc8c

08005970 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b092      	sub	sp, #72	; 0x48
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800597a:	2300      	movs	r3, #0
 800597c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005984:	f107 030c 	add.w	r3, r7, #12
 8005988:	2230      	movs	r2, #48	; 0x30
 800598a:	2100      	movs	r1, #0
 800598c:	4618      	mov	r0, r3
 800598e:	f012 f907 	bl	8017ba0 <memset>

  for(q = p; q != NULL; q = q->next)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	643b      	str	r3, [r7, #64]	; 0x40
 8005996:	e049      	b.n	8005a2c <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800599a:	2b03      	cmp	r3, #3
 800599c:	d902      	bls.n	80059a4 <low_level_output+0x34>
      return ERR_IF;
 800599e:	f06f 030b 	mvn.w	r3, #11
 80059a2:	e056      	b.n	8005a52 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 80059a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a6:	6859      	ldr	r1, [r3, #4]
 80059a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059aa:	4613      	mov	r3, r2
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80059b6:	4413      	add	r3, r2
 80059b8:	3b3c      	subs	r3, #60	; 0x3c
 80059ba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80059bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059be:	895b      	ldrh	r3, [r3, #10]
 80059c0:	4619      	mov	r1, r3
 80059c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c4:	4613      	mov	r3, r2
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80059d0:	4413      	add	r3, r2
 80059d2:	3b38      	subs	r3, #56	; 0x38
 80059d4:	6019      	str	r1, [r3, #0]

    if(i>0)
 80059d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d012      	beq.n	8005a02 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80059dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059de:	1e5a      	subs	r2, r3, #1
 80059e0:	f107 000c 	add.w	r0, r7, #12
 80059e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059e6:	460b      	mov	r3, r1
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	440b      	add	r3, r1
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	18c1      	adds	r1, r0, r3
 80059f0:	4613      	mov	r3, r2
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80059fc:	4413      	add	r3, r2
 80059fe:	3b34      	subs	r3, #52	; 0x34
 8005a00:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10a      	bne.n	8005a20 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8005a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005a18:	4413      	add	r3, r2
 8005a1a:	3b34      	subs	r3, #52	; 0x34
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a22:	3301      	adds	r3, #1
 8005a24:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1b2      	bne.n	8005998 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	891b      	ldrh	r3, [r3, #8]
 8005a36:	461a      	mov	r2, r3
 8005a38:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <low_level_output+0xec>)
 8005a3a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005a3c:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <low_level_output+0xec>)
 8005a3e:	f107 030c 	add.w	r3, r7, #12
 8005a42:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005a44:	2214      	movs	r2, #20
 8005a46:	4905      	ldr	r1, [pc, #20]	; (8005a5c <low_level_output+0xec>)
 8005a48:	4805      	ldr	r0, [pc, #20]	; (8005a60 <low_level_output+0xf0>)
 8005a4a:	f7fc fadf 	bl	800200c <HAL_ETH_Transmit>

  return errval;
 8005a4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3748      	adds	r7, #72	; 0x48
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	2400bd34 	.word	0x2400bd34
 8005a60:	2400bcac 	.word	0x2400bcac

08005a64 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b098      	sub	sp, #96	; 0x60
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60bb      	str	r3, [r7, #8]
 8005a74:	2300      	movs	r3, #0
 8005a76:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005a78:	f107 030c 	add.w	r3, r7, #12
 8005a7c:	2230      	movs	r2, #48	; 0x30
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4618      	mov	r0, r3
 8005a82:	f012 f88d 	bl	8017ba0 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8005a86:	2300      	movs	r3, #0
 8005a88:	653b      	str	r3, [r7, #80]	; 0x50
 8005a8a:	e015      	b.n	8005ab8 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8005a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	f107 010c 	add.w	r1, r7, #12
 8005a94:	4613      	mov	r3, r2
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4419      	add	r1, r3
 8005a9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005aac:	4413      	add	r3, r2
 8005aae:	3b44      	subs	r3, #68	; 0x44
 8005ab0:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8005ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d9e6      	bls.n	8005a8c <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8005abe:	f107 030c 	add.w	r3, r7, #12
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4828      	ldr	r0, [pc, #160]	; (8005b68 <low_level_input+0x104>)
 8005ac6:	f7fc fc1a 	bl	80022fe <HAL_ETH_GetRxDataBuffer>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d145      	bne.n	8005b5c <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8005ad0:	f107 0308 	add.w	r3, r7, #8
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4824      	ldr	r0, [pc, #144]	; (8005b68 <low_level_input+0x104>)
 8005ad8:	f7fc fcaf 	bl	800243a <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8005adc:	4822      	ldr	r0, [pc, #136]	; (8005b68 <low_level_input+0x104>)
 8005ade:	f7fc fcdf 	bl	80024a0 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ae8:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8005aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dd1d      	ble.n	8005b2c <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af2:	f003 021f 	and.w	r2, r3, #31
 8005af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af8:	4413      	add	r3, r2
 8005afa:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8005b00:	f3bf 8f4f 	dsb	sy
}
 8005b04:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005b06:	4a19      	ldr	r2, [pc, #100]	; (8005b6c <low_level_input+0x108>)
 8005b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b10:	3320      	adds	r3, #32
 8005b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b16:	3b20      	subs	r3, #32
 8005b18:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8005b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	dcf2      	bgt.n	8005b06 <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 8005b20:	f3bf 8f4f 	dsb	sy
}
 8005b24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005b26:	f3bf 8f6f 	isb	sy
}
 8005b2a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005b2c:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005b2e:	4810      	ldr	r0, [pc, #64]	; (8005b70 <low_level_input+0x10c>)
 8005b30:	f004 fe0a 	bl	800a748 <memp_malloc_pool>
 8005b34:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 8005b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00f      	beq.n	8005b5c <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8005b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3e:	4a0d      	ldr	r2, [pc, #52]	; (8005b74 <low_level_input+0x110>)
 8005b40:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	b299      	uxth	r1, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	b292      	uxth	r2, r2
 8005b4c:	9201      	str	r2, [sp, #4]
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b52:	2241      	movs	r2, #65	; 0x41
 8005b54:	2000      	movs	r0, #0
 8005b56:	f005 fb79 	bl	800b24c <pbuf_alloced_custom>
 8005b5a:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 8005b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3758      	adds	r7, #88	; 0x58
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	2400bcac 	.word	0x2400bcac
 8005b6c:	e000ed00 	.word	0xe000ed00
 8005b70:	0801d814 	.word	0x0801d814
 8005b74:	08005c25 	.word	0x08005c25

08005b78 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005b84:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <ethernetif_input+0x4c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 fc1d 	bl	80063cc <osSemaphoreAcquire>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1f5      	bne.n	8005b84 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7ff ff63 	bl	8005a64 <low_level_input>
 8005b9e:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	68b8      	ldr	r0, [r7, #8]
 8005bae:	4798      	blx	r3
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8005bb6:	68b8      	ldr	r0, [r7, #8]
 8005bb8:	f005 fd02 	bl	800b5c0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1ea      	bne.n	8005b98 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005bc2:	e7df      	b.n	8005b84 <ethernetif_input+0xc>
 8005bc4:	24000264 	.word	0x24000264

08005bc8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <ethernetif_init+0x1c>
 8005bd6:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <ethernetif_init+0x48>)
 8005bd8:	f240 224d 	movw	r2, #589	; 0x24d
 8005bdc:	490d      	ldr	r1, [pc, #52]	; (8005c14 <ethernetif_init+0x4c>)
 8005bde:	480e      	ldr	r0, [pc, #56]	; (8005c18 <ethernetif_init+0x50>)
 8005be0:	f012 f890 	bl	8017d04 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2273      	movs	r2, #115	; 0x73
 8005be8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2274      	movs	r2, #116	; 0x74
 8005bf0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a09      	ldr	r2, [pc, #36]	; (8005c1c <ethernetif_init+0x54>)
 8005bf8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a08      	ldr	r2, [pc, #32]	; (8005c20 <ethernetif_init+0x58>)
 8005bfe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff fd71 	bl	80056e8 <low_level_init>

  return ERR_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	0801aa4c 	.word	0x0801aa4c
 8005c14:	0801aa68 	.word	0x0801aa68
 8005c18:	0801aa78 	.word	0x0801aa78
 8005c1c:	08012399 	.word	0x08012399
 8005c20:	08005971 	.word	0x08005971

08005c24 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005c30:	68f9      	ldr	r1, [r7, #12]
 8005c32:	4803      	ldr	r0, [pc, #12]	; (8005c40 <pbuf_free_custom+0x1c>)
 8005c34:	f004 fdfc 	bl	800a830 <memp_free_pool>
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	0801d814 	.word	0x0801d814

08005c44 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005c48:	f7fb fe3e 	bl	80018c8 <HAL_GetTick>
 8005c4c:	4603      	mov	r3, r0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005c58:	4802      	ldr	r0, [pc, #8]	; (8005c64 <ETH_PHY_IO_Init+0x10>)
 8005c5a:	f7fd f857 	bl	8002d0c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	2400bcac 	.word	0x2400bcac

08005c68 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  return 0;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	68f9      	ldr	r1, [r7, #12]
 8005c8a:	4807      	ldr	r0, [pc, #28]	; (8005ca8 <ETH_PHY_IO_ReadReg+0x30>)
 8005c8c:	f7fc fda8 	bl	80027e0 <HAL_ETH_ReadPHYRegister>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c9a:	e000      	b.n	8005c9e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	2400bcac 	.word	0x2400bcac

08005cac <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	68f9      	ldr	r1, [r7, #12]
 8005cbe:	4807      	ldr	r0, [pc, #28]	; (8005cdc <ETH_PHY_IO_WriteReg+0x30>)
 8005cc0:	f7fc fde2 	bl	8002888 <HAL_ETH_WritePHYRegister>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cce:	e000      	b.n	8005cd2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	2400bcac 	.word	0x2400bcac

08005ce0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005ce4:	f7fb fdf0 	bl	80018c8 <HAL_GetTick>
 8005ce8:	4603      	mov	r3, r0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b0a0      	sub	sp, #128	; 0x80
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d00:	2300      	movs	r3, #0
 8005d02:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005d08:	483a      	ldr	r0, [pc, #232]	; (8005df4 <ethernet_link_thread+0x104>)
 8005d0a:	f7fb fd05 	bl	8001718 <LAN8742_GetLinkState>
 8005d0e:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d16:	089b      	lsrs	r3, r3, #2
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00c      	beq.n	8005d3c <ethernet_link_thread+0x4c>
 8005d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	dc09      	bgt.n	8005d3c <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 8005d28:	4833      	ldr	r0, [pc, #204]	; (8005df8 <ethernet_link_thread+0x108>)
 8005d2a:	f7fc f8f5 	bl	8001f18 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005d2e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005d30:	f005 f802 	bl	800ad38 <netif_set_down>
    netif_set_link_down(netif);
 8005d34:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005d36:	f005 f865 	bl	800ae04 <netif_set_link_down>
 8005d3a:	e056      	b.n	8005dea <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d14f      	bne.n	8005dea <ethernet_link_thread+0xfa>
 8005d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	dd4c      	ble.n	8005dea <ethernet_link_thread+0xfa>
 8005d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d52:	3b02      	subs	r3, #2
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d82b      	bhi.n	8005db0 <ethernet_link_thread+0xc0>
 8005d58:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <ethernet_link_thread+0x70>)
 8005d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5e:	bf00      	nop
 8005d60:	08005d71 	.word	0x08005d71
 8005d64:	08005d83 	.word	0x08005d83
 8005d68:	08005d93 	.word	0x08005d93
 8005d6c:	08005da3 	.word	0x08005da3
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d74:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005d76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d7a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005d80:	e017      	b.n	8005db2 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005d86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d8a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005d90:	e00f      	b.n	8005db2 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d96:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005da0:	e007      	b.n	8005db2 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005da2:	2300      	movs	r3, #0
 8005da4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005da6:	2300      	movs	r3, #0
 8005da8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005daa:	2301      	movs	r3, #1
 8005dac:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005dae:	e000      	b.n	8005db2 <ethernet_link_thread+0xc2>
    default:
      break;
 8005db0:	bf00      	nop
    }

    if(linkchanged)
 8005db2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d018      	beq.n	8005dea <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005db8:	f107 0308 	add.w	r3, r7, #8
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	480e      	ldr	r0, [pc, #56]	; (8005df8 <ethernet_link_thread+0x108>)
 8005dc0:	f7fc fdb6 	bl	8002930 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dca:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005dcc:	f107 0308 	add.w	r3, r7, #8
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4809      	ldr	r0, [pc, #36]	; (8005df8 <ethernet_link_thread+0x108>)
 8005dd4:	f7fc ff80 	bl	8002cd8 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8005dd8:	4807      	ldr	r0, [pc, #28]	; (8005df8 <ethernet_link_thread+0x108>)
 8005dda:	f7fc f818 	bl	8001e0e <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005dde:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005de0:	f004 ff3e 	bl	800ac60 <netif_set_up>
      netif_set_link_up(netif);
 8005de4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005de6:	f004 ffd9 	bl	800ad9c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005dea:	2064      	movs	r0, #100	; 0x64
 8005dec:	f000 f93c 	bl	8006068 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005df0:	e78a      	b.n	8005d08 <ethernet_link_thread+0x18>
 8005df2:	bf00      	nop
 8005df4:	2400bc8c 	.word	0x2400bc8c
 8005df8:	2400bcac 	.word	0x2400bcac

08005dfc <__NVIC_SetPriority>:
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	6039      	str	r1, [r7, #0]
 8005e06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	db0a      	blt.n	8005e26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	490c      	ldr	r1, [pc, #48]	; (8005e48 <__NVIC_SetPriority+0x4c>)
 8005e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e1a:	0112      	lsls	r2, r2, #4
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	440b      	add	r3, r1
 8005e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e24:	e00a      	b.n	8005e3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	4908      	ldr	r1, [pc, #32]	; (8005e4c <__NVIC_SetPriority+0x50>)
 8005e2c:	88fb      	ldrh	r3, [r7, #6]
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	3b04      	subs	r3, #4
 8005e34:	0112      	lsls	r2, r2, #4
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	440b      	add	r3, r1
 8005e3a:	761a      	strb	r2, [r3, #24]
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	e000e100 	.word	0xe000e100
 8005e4c:	e000ed00 	.word	0xe000ed00

08005e50 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005e54:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <SysTick_Handler+0x1c>)
 8005e56:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005e58:	f002 fc9a 	bl	8008790 <xTaskGetSchedulerState>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d001      	beq.n	8005e66 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005e62:	f003 fb81 	bl	8009568 <xPortSysTickHandler>
  }
}
 8005e66:	bf00      	nop
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	e000e010 	.word	0xe000e010

08005e70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005e74:	2100      	movs	r1, #0
 8005e76:	f06f 0004 	mvn.w	r0, #4
 8005e7a:	f7ff ffbf 	bl	8005dfc <__NVIC_SetPriority>
#endif
}
 8005e7e:	bf00      	nop
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e8a:	f3ef 8305 	mrs	r3, IPSR
 8005e8e:	603b      	str	r3, [r7, #0]
  return(result);
 8005e90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005e96:	f06f 0305 	mvn.w	r3, #5
 8005e9a:	607b      	str	r3, [r7, #4]
 8005e9c:	e00c      	b.n	8005eb8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <osKernelInitialize+0x44>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d105      	bne.n	8005eb2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ea6:	4b08      	ldr	r3, [pc, #32]	; (8005ec8 <osKernelInitialize+0x44>)
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	607b      	str	r3, [r7, #4]
 8005eb0:	e002      	b.n	8005eb8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005eb8:	687b      	ldr	r3, [r7, #4]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	2400026c 	.word	0x2400026c

08005ecc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ed2:	f3ef 8305 	mrs	r3, IPSR
 8005ed6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ed8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ede:	f06f 0305 	mvn.w	r3, #5
 8005ee2:	607b      	str	r3, [r7, #4]
 8005ee4:	e010      	b.n	8005f08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <osKernelStart+0x48>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d109      	bne.n	8005f02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005eee:	f7ff ffbf 	bl	8005e70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ef2:	4b08      	ldr	r3, [pc, #32]	; (8005f14 <osKernelStart+0x48>)
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ef8:	f001 ffcc 	bl	8007e94 <vTaskStartScheduler>
      stat = osOK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	607b      	str	r3, [r7, #4]
 8005f00:	e002      	b.n	8005f08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f08:	687b      	ldr	r3, [r7, #4]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	2400026c 	.word	0x2400026c

08005f18 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f1e:	f3ef 8305 	mrs	r3, IPSR
 8005f22:	603b      	str	r3, [r7, #0]
  return(result);
 8005f24:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005f2a:	f002 f8df 	bl	80080ec <xTaskGetTickCountFromISR>
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	e002      	b.n	8005f38 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005f32:	f002 f8cb 	bl	80080cc <xTaskGetTickCount>
 8005f36:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005f38:	687b      	ldr	r3, [r7, #4]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b08e      	sub	sp, #56	; 0x38
 8005f46:	af04      	add	r7, sp, #16
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f52:	f3ef 8305 	mrs	r3, IPSR
 8005f56:	617b      	str	r3, [r7, #20]
  return(result);
 8005f58:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d17f      	bne.n	800605e <osThreadNew+0x11c>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d07c      	beq.n	800605e <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8005f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005f6a:	2318      	movs	r3, #24
 8005f6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d045      	beq.n	800600a <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <osThreadNew+0x4a>
        name = attr->name;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <osThreadNew+0x70>
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2b38      	cmp	r3, #56	; 0x38
 8005fa4:	d805      	bhi.n	8005fb2 <osThreadNew+0x70>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <osThreadNew+0x74>
        return (NULL);
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e054      	b.n	8006060 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	089b      	lsrs	r3, r3, #2
 8005fc4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00e      	beq.n	8005fec <osThreadNew+0xaa>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	2bbf      	cmp	r3, #191	; 0xbf
 8005fd4:	d90a      	bls.n	8005fec <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d006      	beq.n	8005fec <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <osThreadNew+0xaa>
        mem = 1;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	e010      	b.n	800600e <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10c      	bne.n	800600e <osThreadNew+0xcc>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d108      	bne.n	800600e <osThreadNew+0xcc>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <osThreadNew+0xcc>
          mem = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	61bb      	str	r3, [r7, #24]
 8006008:	e001      	b.n	800600e <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d110      	bne.n	8006036 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800601c:	9202      	str	r2, [sp, #8]
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	6a3a      	ldr	r2, [r7, #32]
 8006028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f001 fd42 	bl	8007ab4 <xTaskCreateStatic>
 8006030:	4603      	mov	r3, r0
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	e013      	b.n	800605e <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d110      	bne.n	800605e <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	b29a      	uxth	r2, r3
 8006040:	f107 0310 	add.w	r3, r7, #16
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f001 fd8d 	bl	8007b6e <xTaskCreate>
 8006054:	4603      	mov	r3, r0
 8006056:	2b01      	cmp	r3, #1
 8006058:	d001      	beq.n	800605e <osThreadNew+0x11c>
            hTask = NULL;
 800605a:	2300      	movs	r3, #0
 800605c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800605e:	693b      	ldr	r3, [r7, #16]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3728      	adds	r7, #40	; 0x28
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006070:	f3ef 8305 	mrs	r3, IPSR
 8006074:	60bb      	str	r3, [r7, #8]
  return(result);
 8006076:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <osDelay+0x1c>
    stat = osErrorISR;
 800607c:	f06f 0305 	mvn.w	r3, #5
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e007      	b.n	8006094 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <osDelay+0x2c>
      vTaskDelay(ticks);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 fecc 	bl	8007e2c <vTaskDelay>
    }
  }

  return (stat);
 8006094:	68fb      	ldr	r3, [r7, #12]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800609e:	b580      	push	{r7, lr}
 80060a0:	b088      	sub	sp, #32
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060aa:	f3ef 8305 	mrs	r3, IPSR
 80060ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80060b0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d174      	bne.n	80061a0 <osMutexNew+0x102>
    if (attr != NULL) {
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	e001      	b.n	80060c8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <osMutexNew+0x3a>
      rmtx = 1U;
 80060d2:	2301      	movs	r3, #1
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	e001      	b.n	80060dc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d15c      	bne.n	80061a0 <osMutexNew+0x102>
      mem = -1;
 80060e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ea:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d015      	beq.n	800611e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d006      	beq.n	8006108 <osMutexNew+0x6a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	2b4f      	cmp	r3, #79	; 0x4f
 8006100:	d902      	bls.n	8006108 <osMutexNew+0x6a>
          mem = 1;
 8006102:	2301      	movs	r3, #1
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	e00c      	b.n	8006122 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d108      	bne.n	8006122 <osMutexNew+0x84>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d104      	bne.n	8006122 <osMutexNew+0x84>
            mem = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	e001      	b.n	8006122 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d112      	bne.n	800614e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	4619      	mov	r1, r3
 8006134:	2004      	movs	r0, #4
 8006136:	f000 fd68 	bl	8006c0a <xQueueCreateMutexStatic>
 800613a:	61f8      	str	r0, [r7, #28]
 800613c:	e016      	b.n	800616c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	4619      	mov	r1, r3
 8006144:	2001      	movs	r0, #1
 8006146:	f000 fd60 	bl	8006c0a <xQueueCreateMutexStatic>
 800614a:	61f8      	str	r0, [r7, #28]
 800614c:	e00e      	b.n	800616c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10b      	bne.n	800616c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d004      	beq.n	8006164 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800615a:	2004      	movs	r0, #4
 800615c:	f000 fd3d 	bl	8006bda <xQueueCreateMutex>
 8006160:	61f8      	str	r0, [r7, #28]
 8006162:	e003      	b.n	800616c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006164:	2001      	movs	r0, #1
 8006166:	f000 fd38 	bl	8006bda <xQueueCreateMutex>
 800616a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00c      	beq.n	800618c <osMutexNew+0xee>
        if (attr != NULL) {
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <osMutexNew+0xe2>
          name = attr->name;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	e001      	b.n	8006184 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006184:	68f9      	ldr	r1, [r7, #12]
 8006186:	69f8      	ldr	r0, [r7, #28]
 8006188:	f001 fc0c 	bl	80079a4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d006      	beq.n	80061a0 <osMutexNew+0x102>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80061a0:	69fb      	ldr	r3, [r7, #28]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3720      	adds	r7, #32
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b086      	sub	sp, #24
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061c8:	f3ef 8305 	mrs	r3, IPSR
 80061cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80061ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80061d4:	f06f 0305 	mvn.w	r3, #5
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	e02c      	b.n	8006236 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80061e2:	f06f 0303 	mvn.w	r3, #3
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	e025      	b.n	8006236 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d011      	beq.n	8006214 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6938      	ldr	r0, [r7, #16]
 80061f4:	f000 fd58 	bl	8006ca8 <xQueueTakeMutexRecursive>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d01b      	beq.n	8006236 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006204:	f06f 0301 	mvn.w	r3, #1
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e014      	b.n	8006236 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800620c:	f06f 0302 	mvn.w	r3, #2
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	e010      	b.n	8006236 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6938      	ldr	r0, [r7, #16]
 8006218:	f001 f8ec 	bl	80073f4 <xQueueSemaphoreTake>
 800621c:	4603      	mov	r3, r0
 800621e:	2b01      	cmp	r3, #1
 8006220:	d009      	beq.n	8006236 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006228:	f06f 0301 	mvn.w	r3, #1
 800622c:	617b      	str	r3, [r7, #20]
 800622e:	e002      	b.n	8006236 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006230:	f06f 0302 	mvn.w	r3, #2
 8006234:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006236:	697b      	ldr	r3, [r7, #20]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f023 0301 	bic.w	r3, r3, #1
 800624e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800625c:	f3ef 8305 	mrs	r3, IPSR
 8006260:	60bb      	str	r3, [r7, #8]
  return(result);
 8006262:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006268:	f06f 0305 	mvn.w	r3, #5
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e01f      	b.n	80062b0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d103      	bne.n	800627e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006276:	f06f 0303 	mvn.w	r3, #3
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	e018      	b.n	80062b0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d009      	beq.n	8006298 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006284:	6938      	ldr	r0, [r7, #16]
 8006286:	f000 fcdb 	bl	8006c40 <xQueueGiveMutexRecursive>
 800628a:	4603      	mov	r3, r0
 800628c:	2b01      	cmp	r3, #1
 800628e:	d00f      	beq.n	80062b0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006290:	f06f 0302 	mvn.w	r3, #2
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	e00b      	b.n	80062b0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006298:	2300      	movs	r3, #0
 800629a:	2200      	movs	r2, #0
 800629c:	2100      	movs	r1, #0
 800629e:	6938      	ldr	r0, [r7, #16]
 80062a0:	f000 fda2 	bl	8006de8 <xQueueGenericSend>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d002      	beq.n	80062b0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80062aa:	f06f 0302 	mvn.w	r3, #2
 80062ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80062b0:	697b      	ldr	r3, [r7, #20]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b08a      	sub	sp, #40	; 0x28
 80062be:	af02      	add	r7, sp, #8
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062ca:	f3ef 8305 	mrs	r3, IPSR
 80062ce:	613b      	str	r3, [r7, #16]
  return(result);
 80062d0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d175      	bne.n	80063c2 <osSemaphoreNew+0x108>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d072      	beq.n	80063c2 <osSemaphoreNew+0x108>
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d86e      	bhi.n	80063c2 <osSemaphoreNew+0x108>
    mem = -1;
 80062e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d015      	beq.n	800631c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d006      	beq.n	8006306 <osSemaphoreNew+0x4c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	2b4f      	cmp	r3, #79	; 0x4f
 80062fe:	d902      	bls.n	8006306 <osSemaphoreNew+0x4c>
        mem = 1;
 8006300:	2301      	movs	r3, #1
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	e00c      	b.n	8006320 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d108      	bne.n	8006320 <osSemaphoreNew+0x66>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d104      	bne.n	8006320 <osSemaphoreNew+0x66>
          mem = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	e001      	b.n	8006320 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800631c:	2300      	movs	r3, #0
 800631e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006326:	d04c      	beq.n	80063c2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d128      	bne.n	8006380 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d10a      	bne.n	800634a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	2203      	movs	r2, #3
 800633a:	9200      	str	r2, [sp, #0]
 800633c:	2200      	movs	r2, #0
 800633e:	2100      	movs	r1, #0
 8006340:	2001      	movs	r0, #1
 8006342:	f000 fb5b 	bl	80069fc <xQueueGenericCreateStatic>
 8006346:	61f8      	str	r0, [r7, #28]
 8006348:	e005      	b.n	8006356 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800634a:	2203      	movs	r2, #3
 800634c:	2100      	movs	r1, #0
 800634e:	2001      	movs	r0, #1
 8006350:	f000 fbcc 	bl	8006aec <xQueueGenericCreate>
 8006354:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d022      	beq.n	80063a2 <osSemaphoreNew+0xe8>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d01f      	beq.n	80063a2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006362:	2300      	movs	r3, #0
 8006364:	2200      	movs	r2, #0
 8006366:	2100      	movs	r1, #0
 8006368:	69f8      	ldr	r0, [r7, #28]
 800636a:	f000 fd3d 	bl	8006de8 <xQueueGenericSend>
 800636e:	4603      	mov	r3, r0
 8006370:	2b01      	cmp	r3, #1
 8006372:	d016      	beq.n	80063a2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006374:	69f8      	ldr	r0, [r7, #28]
 8006376:	f001 f9c9 	bl	800770c <vQueueDelete>
            hSemaphore = NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	61fb      	str	r3, [r7, #28]
 800637e:	e010      	b.n	80063a2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d108      	bne.n	8006398 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	461a      	mov	r2, r3
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 fcc0 	bl	8006d14 <xQueueCreateCountingSemaphoreStatic>
 8006394:	61f8      	str	r0, [r7, #28]
 8006396:	e004      	b.n	80063a2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006398:	68b9      	ldr	r1, [r7, #8]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 fcf1 	bl	8006d82 <xQueueCreateCountingSemaphore>
 80063a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00c      	beq.n	80063c2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	e001      	b.n	80063ba <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80063ba:	6979      	ldr	r1, [r7, #20]
 80063bc:	69f8      	ldr	r0, [r7, #28]
 80063be:	f001 faf1 	bl	80079a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80063c2:	69fb      	ldr	r3, [r7, #28]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80063da:	2300      	movs	r3, #0
 80063dc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d103      	bne.n	80063ec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80063e4:	f06f 0303 	mvn.w	r3, #3
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	e039      	b.n	8006460 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ec:	f3ef 8305 	mrs	r3, IPSR
 80063f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80063f2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d022      	beq.n	800643e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80063fe:	f06f 0303 	mvn.w	r3, #3
 8006402:	617b      	str	r3, [r7, #20]
 8006404:	e02c      	b.n	8006460 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006406:	2300      	movs	r3, #0
 8006408:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800640a:	f107 0308 	add.w	r3, r7, #8
 800640e:	461a      	mov	r2, r3
 8006410:	2100      	movs	r1, #0
 8006412:	6938      	ldr	r0, [r7, #16]
 8006414:	f001 f8fa 	bl	800760c <xQueueReceiveFromISR>
 8006418:	4603      	mov	r3, r0
 800641a:	2b01      	cmp	r3, #1
 800641c:	d003      	beq.n	8006426 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800641e:	f06f 0302 	mvn.w	r3, #2
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	e01c      	b.n	8006460 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d019      	beq.n	8006460 <osSemaphoreAcquire+0x94>
 800642c:	4b0f      	ldr	r3, [pc, #60]	; (800646c <osSemaphoreAcquire+0xa0>)
 800642e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	e010      	b.n	8006460 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6938      	ldr	r0, [r7, #16]
 8006442:	f000 ffd7 	bl	80073f4 <xQueueSemaphoreTake>
 8006446:	4603      	mov	r3, r0
 8006448:	2b01      	cmp	r3, #1
 800644a:	d009      	beq.n	8006460 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006452:	f06f 0301 	mvn.w	r3, #1
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	e002      	b.n	8006460 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800645a:	f06f 0302 	mvn.w	r3, #2
 800645e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006460:	697b      	ldr	r3, [r7, #20]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	e000ed04 	.word	0xe000ed04

08006470 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800647c:	2300      	movs	r3, #0
 800647e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006486:	f06f 0303 	mvn.w	r3, #3
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	e02c      	b.n	80064e8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800648e:	f3ef 8305 	mrs	r3, IPSR
 8006492:	60fb      	str	r3, [r7, #12]
  return(result);
 8006494:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006496:	2b00      	cmp	r3, #0
 8006498:	d01a      	beq.n	80064d0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800649e:	f107 0308 	add.w	r3, r7, #8
 80064a2:	4619      	mov	r1, r3
 80064a4:	6938      	ldr	r0, [r7, #16]
 80064a6:	f000 fe38 	bl	800711a <xQueueGiveFromISR>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d003      	beq.n	80064b8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80064b0:	f06f 0302 	mvn.w	r3, #2
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e017      	b.n	80064e8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d014      	beq.n	80064e8 <osSemaphoreRelease+0x78>
 80064be:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <osSemaphoreRelease+0x84>)
 80064c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	e00b      	b.n	80064e8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80064d0:	2300      	movs	r3, #0
 80064d2:	2200      	movs	r2, #0
 80064d4:	2100      	movs	r1, #0
 80064d6:	6938      	ldr	r0, [r7, #16]
 80064d8:	f000 fc86 	bl	8006de8 <xQueueGenericSend>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d002      	beq.n	80064e8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80064e2:	f06f 0302 	mvn.w	r3, #2
 80064e6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80064e8:	697b      	ldr	r3, [r7, #20]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	e000ed04 	.word	0xe000ed04

080064f8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	; 0x28
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006508:	f3ef 8305 	mrs	r3, IPSR
 800650c:	613b      	str	r3, [r7, #16]
  return(result);
 800650e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006510:	2b00      	cmp	r3, #0
 8006512:	d15f      	bne.n	80065d4 <osMessageQueueNew+0xdc>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d05c      	beq.n	80065d4 <osMessageQueueNew+0xdc>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d059      	beq.n	80065d4 <osMessageQueueNew+0xdc>
    mem = -1;
 8006520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006524:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d029      	beq.n	8006580 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d012      	beq.n	800655a <osMessageQueueNew+0x62>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	2b4f      	cmp	r3, #79	; 0x4f
 800653a:	d90e      	bls.n	800655a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695a      	ldr	r2, [r3, #20]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	fb01 f303 	mul.w	r3, r1, r3
 8006550:	429a      	cmp	r2, r3
 8006552:	d302      	bcc.n	800655a <osMessageQueueNew+0x62>
        mem = 1;
 8006554:	2301      	movs	r3, #1
 8006556:	61bb      	str	r3, [r7, #24]
 8006558:	e014      	b.n	8006584 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d110      	bne.n	8006584 <osMessageQueueNew+0x8c>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10c      	bne.n	8006584 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800656e:	2b00      	cmp	r3, #0
 8006570:	d108      	bne.n	8006584 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d104      	bne.n	8006584 <osMessageQueueNew+0x8c>
          mem = 0;
 800657a:	2300      	movs	r3, #0
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	e001      	b.n	8006584 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d10b      	bne.n	80065a2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691a      	ldr	r2, [r3, #16]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	2100      	movs	r1, #0
 8006594:	9100      	str	r1, [sp, #0]
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 fa2f 	bl	80069fc <xQueueGenericCreateStatic>
 800659e:	61f8      	str	r0, [r7, #28]
 80065a0:	e008      	b.n	80065b4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d105      	bne.n	80065b4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80065a8:	2200      	movs	r2, #0
 80065aa:	68b9      	ldr	r1, [r7, #8]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 fa9d 	bl	8006aec <xQueueGenericCreate>
 80065b2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00c      	beq.n	80065d4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	e001      	b.n	80065cc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80065cc:	6979      	ldr	r1, [r7, #20]
 80065ce:	69f8      	ldr	r0, [r7, #28]
 80065d0:	f001 f9e8 	bl	80079a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80065d4:	69fb      	ldr	r3, [r7, #28]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3720      	adds	r7, #32
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	603b      	str	r3, [r7, #0]
 80065ec:	4613      	mov	r3, r2
 80065ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065f8:	f3ef 8305 	mrs	r3, IPSR
 80065fc:	617b      	str	r3, [r7, #20]
  return(result);
 80065fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006600:	2b00      	cmp	r3, #0
 8006602:	d028      	beq.n	8006656 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <osMessageQueuePut+0x36>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <osMessageQueuePut+0x36>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006616:	f06f 0303 	mvn.w	r3, #3
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	e038      	b.n	8006690 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800661e:	2300      	movs	r3, #0
 8006620:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006622:	f107 0210 	add.w	r2, r7, #16
 8006626:	2300      	movs	r3, #0
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	69b8      	ldr	r0, [r7, #24]
 800662c:	f000 fcda 	bl	8006fe4 <xQueueGenericSendFromISR>
 8006630:	4603      	mov	r3, r0
 8006632:	2b01      	cmp	r3, #1
 8006634:	d003      	beq.n	800663e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006636:	f06f 0302 	mvn.w	r3, #2
 800663a:	61fb      	str	r3, [r7, #28]
 800663c:	e028      	b.n	8006690 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d025      	beq.n	8006690 <osMessageQueuePut+0xb0>
 8006644:	4b15      	ldr	r3, [pc, #84]	; (800669c <osMessageQueuePut+0xbc>)
 8006646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	e01c      	b.n	8006690 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <osMessageQueuePut+0x82>
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d103      	bne.n	800666a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006662:	f06f 0303 	mvn.w	r3, #3
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	e012      	b.n	8006690 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800666a:	2300      	movs	r3, #0
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	69b8      	ldr	r0, [r7, #24]
 8006672:	f000 fbb9 	bl	8006de8 <xQueueGenericSend>
 8006676:	4603      	mov	r3, r0
 8006678:	2b01      	cmp	r3, #1
 800667a:	d009      	beq.n	8006690 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006682:	f06f 0301 	mvn.w	r3, #1
 8006686:	61fb      	str	r3, [r7, #28]
 8006688:	e002      	b.n	8006690 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800668a:	f06f 0302 	mvn.w	r3, #2
 800668e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006690:	69fb      	ldr	r3, [r7, #28]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3720      	adds	r7, #32
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	e000ed04 	.word	0xe000ed04

080066a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066b6:	f3ef 8305 	mrs	r3, IPSR
 80066ba:	617b      	str	r3, [r7, #20]
  return(result);
 80066bc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d028      	beq.n	8006714 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d005      	beq.n	80066d4 <osMessageQueueGet+0x34>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <osMessageQueueGet+0x34>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80066d4:	f06f 0303 	mvn.w	r3, #3
 80066d8:	61fb      	str	r3, [r7, #28]
 80066da:	e037      	b.n	800674c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80066dc:	2300      	movs	r3, #0
 80066de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80066e0:	f107 0310 	add.w	r3, r7, #16
 80066e4:	461a      	mov	r2, r3
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	69b8      	ldr	r0, [r7, #24]
 80066ea:	f000 ff8f 	bl	800760c <xQueueReceiveFromISR>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d003      	beq.n	80066fc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80066f4:	f06f 0302 	mvn.w	r3, #2
 80066f8:	61fb      	str	r3, [r7, #28]
 80066fa:	e027      	b.n	800674c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d024      	beq.n	800674c <osMessageQueueGet+0xac>
 8006702:	4b15      	ldr	r3, [pc, #84]	; (8006758 <osMessageQueueGet+0xb8>)
 8006704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	e01b      	b.n	800674c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <osMessageQueueGet+0x80>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d103      	bne.n	8006728 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006720:	f06f 0303 	mvn.w	r3, #3
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	e011      	b.n	800674c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	69b8      	ldr	r0, [r7, #24]
 800672e:	f000 fd81 	bl	8007234 <xQueueReceive>
 8006732:	4603      	mov	r3, r0
 8006734:	2b01      	cmp	r3, #1
 8006736:	d009      	beq.n	800674c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800673e:	f06f 0301 	mvn.w	r3, #1
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	e002      	b.n	800674c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006746:	f06f 0302 	mvn.w	r3, #2
 800674a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800674c:	69fb      	ldr	r3, [r7, #28]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3720      	adds	r7, #32
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a07      	ldr	r2, [pc, #28]	; (8006788 <vApplicationGetIdleTaskMemory+0x2c>)
 800676c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	4a06      	ldr	r2, [pc, #24]	; (800678c <vApplicationGetIdleTaskMemory+0x30>)
 8006772:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800677a:	601a      	str	r2, [r3, #0]
}
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	24000270 	.word	0x24000270
 800678c:	24000330 	.word	0x24000330

08006790 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4a07      	ldr	r2, [pc, #28]	; (80067bc <vApplicationGetTimerTaskMemory+0x2c>)
 80067a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4a06      	ldr	r2, [pc, #24]	; (80067c0 <vApplicationGetTimerTaskMemory+0x30>)
 80067a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ae:	601a      	str	r2, [r3, #0]
}
 80067b0:	bf00      	nop
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	24000730 	.word	0x24000730
 80067c0:	240007f0 	.word	0x240007f0

080067c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f103 0208 	add.w	r2, r3, #8
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f103 0208 	add.w	r2, r3, #8
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f103 0208 	add.w	r2, r3, #8
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	601a      	str	r2, [r3, #0]
}
 800685a:	bf00      	nop
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800687c:	d103      	bne.n	8006886 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e00c      	b.n	80068a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3308      	adds	r3, #8
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	e002      	b.n	8006894 <vListInsert+0x2e>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	429a      	cmp	r2, r3
 800689e:	d2f6      	bcs.n	800688e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	601a      	str	r2, [r3, #0]
}
 80068cc:	bf00      	nop
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	6892      	ldr	r2, [r2, #8]
 80068ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6852      	ldr	r2, [r2, #4]
 80068f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	429a      	cmp	r2, r3
 8006902:	d103      	bne.n	800690c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	1e5a      	subs	r2, r3, #1
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006956:	f002 fd75 	bl	8009444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006962:	68f9      	ldr	r1, [r7, #12]
 8006964:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006966:	fb01 f303 	mul.w	r3, r1, r3
 800696a:	441a      	add	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006986:	3b01      	subs	r3, #1
 8006988:	68f9      	ldr	r1, [r7, #12]
 800698a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800698c:	fb01 f303 	mul.w	r3, r1, r3
 8006990:	441a      	add	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	22ff      	movs	r2, #255	; 0xff
 800699a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	22ff      	movs	r2, #255	; 0xff
 80069a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d114      	bne.n	80069d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01a      	beq.n	80069ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3310      	adds	r3, #16
 80069b8:	4618      	mov	r0, r3
 80069ba:	f001 fd17 	bl	80083ec <xTaskRemoveFromEventList>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d012      	beq.n	80069ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069c4:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <xQueueGenericReset+0xcc>)
 80069c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	e009      	b.n	80069ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	3310      	adds	r3, #16
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fef2 	bl	80067c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3324      	adds	r3, #36	; 0x24
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff feed 	bl	80067c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069ea:	f002 fd5b 	bl	80094a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069ee:	2301      	movs	r3, #1
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08e      	sub	sp, #56	; 0x38
 8006a00:	af02      	add	r7, sp, #8
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <xQueueGenericCreateStatic+0x52>
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <xQueueGenericCreateStatic+0x56>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <xQueueGenericCreateStatic+0x58>
 8006a52:	2300      	movs	r3, #0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10a      	bne.n	8006a6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	623b      	str	r3, [r7, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	e7fe      	b.n	8006a6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <xQueueGenericCreateStatic+0x7e>
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <xQueueGenericCreateStatic+0x82>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <xQueueGenericCreateStatic+0x84>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	61fb      	str	r3, [r7, #28]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a9a:	2350      	movs	r3, #80	; 0x50
 8006a9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b50      	cmp	r3, #80	; 0x50
 8006aa2:	d00a      	beq.n	8006aba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	61bb      	str	r3, [r7, #24]
}
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006aba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00d      	beq.n	8006ae2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ace:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	68b9      	ldr	r1, [r7, #8]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f83f 	bl	8006b60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3730      	adds	r7, #48	; 0x30
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08a      	sub	sp, #40	; 0x28
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10a      	bne.n	8006b16 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	613b      	str	r3, [r7, #16]
}
 8006b12:	bf00      	nop
 8006b14:	e7fe      	b.n	8006b14 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	fb02 f303 	mul.w	r3, r2, r3
 8006b1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	3350      	adds	r3, #80	; 0x50
 8006b24:	4618      	mov	r0, r3
 8006b26:	f002 fdaf 	bl	8009688 <pvPortMalloc>
 8006b2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d011      	beq.n	8006b56 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	3350      	adds	r3, #80	; 0x50
 8006b3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b44:	79fa      	ldrb	r2, [r7, #7]
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	68b9      	ldr	r1, [r7, #8]
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 f805 	bl	8006b60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b56:	69bb      	ldr	r3, [r7, #24]
	}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d103      	bne.n	8006b7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	e002      	b.n	8006b82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b8e:	2101      	movs	r1, #1
 8006b90:	69b8      	ldr	r0, [r7, #24]
 8006b92:	f7ff fecb 	bl	800692c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	78fa      	ldrb	r2, [r7, #3]
 8006b9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b9e:	bf00      	nop
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00e      	beq.n	8006bd2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2100      	movs	r1, #0
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f90b 	bl	8006de8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006bd2:	bf00      	nop
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b086      	sub	sp, #24
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	4603      	mov	r3, r0
 8006be2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006be4:	2301      	movs	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	2300      	movs	r3, #0
 8006bea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	6939      	ldr	r1, [r7, #16]
 8006bf2:	6978      	ldr	r0, [r7, #20]
 8006bf4:	f7ff ff7a 	bl	8006aec <xQueueGenericCreate>
 8006bf8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f7ff ffd3 	bl	8006ba6 <prvInitialiseMutex>

		return xNewQueue;
 8006c00:	68fb      	ldr	r3, [r7, #12]
	}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b088      	sub	sp, #32
 8006c0e:	af02      	add	r7, sp, #8
 8006c10:	4603      	mov	r3, r0
 8006c12:	6039      	str	r1, [r7, #0]
 8006c14:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c16:	2301      	movs	r3, #1
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2200      	movs	r2, #0
 8006c26:	6939      	ldr	r1, [r7, #16]
 8006c28:	6978      	ldr	r0, [r7, #20]
 8006c2a:	f7ff fee7 	bl	80069fc <xQueueGenericCreateStatic>
 8006c2e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff ffb8 	bl	8006ba6 <prvInitialiseMutex>

		return xNewQueue;
 8006c36:	68fb      	ldr	r3, [r7, #12]
	}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006c40:	b590      	push	{r4, r7, lr}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10a      	bne.n	8006c68 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	60fb      	str	r3, [r7, #12]
}
 8006c64:	bf00      	nop
 8006c66:	e7fe      	b.n	8006c66 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	689c      	ldr	r4, [r3, #8]
 8006c6c:	f001 fd80 	bl	8008770 <xTaskGetCurrentTaskHandle>
 8006c70:	4603      	mov	r3, r0
 8006c72:	429c      	cmp	r4, r3
 8006c74:	d111      	bne.n	8006c9a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	1e5a      	subs	r2, r3, #1
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d105      	bne.n	8006c94 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006c88:	2300      	movs	r3, #0
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	6938      	ldr	r0, [r7, #16]
 8006c90:	f000 f8aa 	bl	8006de8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006c94:	2301      	movs	r3, #1
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	e001      	b.n	8006c9e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006c9e:	697b      	ldr	r3, [r7, #20]
	}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd90      	pop	{r4, r7, pc}

08006ca8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006ca8:	b590      	push	{r4, r7, lr}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	60fb      	str	r3, [r7, #12]
}
 8006cce:	bf00      	nop
 8006cd0:	e7fe      	b.n	8006cd0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	689c      	ldr	r4, [r3, #8]
 8006cd6:	f001 fd4b 	bl	8008770 <xTaskGetCurrentTaskHandle>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	429c      	cmp	r4, r3
 8006cde:	d107      	bne.n	8006cf0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006cea:	2301      	movs	r3, #1
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	e00c      	b.n	8006d0a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6938      	ldr	r0, [r7, #16]
 8006cf4:	f000 fb7e 	bl	80073f4 <xQueueSemaphoreTake>
 8006cf8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d004      	beq.n	8006d0a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006d0a:	697b      	ldr	r3, [r7, #20]
	}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd90      	pop	{r4, r7, pc}

08006d14 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08a      	sub	sp, #40	; 0x28
 8006d18:	af02      	add	r7, sp, #8
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	61bb      	str	r3, [r7, #24]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d90a      	bls.n	8006d5a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	617b      	str	r3, [r7, #20]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	2100      	movs	r1, #0
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff fe49 	bl	80069fc <xQueueGenericCreateStatic>
 8006d6a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006d78:	69fb      	ldr	r3, [r7, #28]
	}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3720      	adds	r7, #32
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b086      	sub	sp, #24
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	613b      	str	r3, [r7, #16]
}
 8006da4:	bf00      	nop
 8006da6:	e7fe      	b.n	8006da6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d90a      	bls.n	8006dc6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60fb      	str	r3, [r7, #12]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	2100      	movs	r1, #0
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff fe8e 	bl	8006aec <xQueueGenericCreate>
 8006dd0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006dde:	697b      	ldr	r3, [r7, #20]
	}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08e      	sub	sp, #56	; 0x38
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006df6:	2300      	movs	r3, #0
 8006df8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <xQueueGenericSend+0x32>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <xQueueGenericSend+0x40>
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <xQueueGenericSend+0x44>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e000      	b.n	8006e2e <xQueueGenericSend+0x46>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <xQueueGenericSend+0x60>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d103      	bne.n	8006e56 <xQueueGenericSend+0x6e>
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <xQueueGenericSend+0x72>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <xQueueGenericSend+0x74>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10a      	bne.n	8006e76 <xQueueGenericSend+0x8e>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	623b      	str	r3, [r7, #32]
}
 8006e72:	bf00      	nop
 8006e74:	e7fe      	b.n	8006e74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e76:	f001 fc8b 	bl	8008790 <xTaskGetSchedulerState>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d102      	bne.n	8006e86 <xQueueGenericSend+0x9e>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <xQueueGenericSend+0xa2>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <xQueueGenericSend+0xa4>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	61fb      	str	r3, [r7, #28]
}
 8006ea2:	bf00      	nop
 8006ea4:	e7fe      	b.n	8006ea4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ea6:	f002 facd 	bl	8009444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <xQueueGenericSend+0xd4>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d129      	bne.n	8006f10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	68b9      	ldr	r1, [r7, #8]
 8006ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ec2:	f000 fc5e 	bl	8007782 <prvCopyDataToQueue>
 8006ec6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d010      	beq.n	8006ef2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	3324      	adds	r3, #36	; 0x24
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f001 fa89 	bl	80083ec <xTaskRemoveFromEventList>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d013      	beq.n	8006f08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ee0:	4b3f      	ldr	r3, [pc, #252]	; (8006fe0 <xQueueGenericSend+0x1f8>)
 8006ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	e00a      	b.n	8006f08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d007      	beq.n	8006f08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ef8:	4b39      	ldr	r3, [pc, #228]	; (8006fe0 <xQueueGenericSend+0x1f8>)
 8006efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f08:	f002 facc 	bl	80094a4 <vPortExitCritical>
				return pdPASS;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e063      	b.n	8006fd8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d103      	bne.n	8006f1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f16:	f002 fac5 	bl	80094a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e05c      	b.n	8006fd8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f24:	f107 0314 	add.w	r3, r7, #20
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 fac3 	bl	80084b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f32:	f002 fab7 	bl	80094a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f36:	f001 f81d 	bl	8007f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f3a:	f002 fa83 	bl	8009444 <vPortEnterCritical>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f44:	b25b      	sxtb	r3, r3
 8006f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f4a:	d103      	bne.n	8006f54 <xQueueGenericSend+0x16c>
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f5a:	b25b      	sxtb	r3, r3
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f60:	d103      	bne.n	8006f6a <xQueueGenericSend+0x182>
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f6a:	f002 fa9b 	bl	80094a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f6e:	1d3a      	adds	r2, r7, #4
 8006f70:	f107 0314 	add.w	r3, r7, #20
 8006f74:	4611      	mov	r1, r2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 fab2 	bl	80084e0 <xTaskCheckForTimeOut>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d124      	bne.n	8006fcc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f84:	f000 fcf5 	bl	8007972 <prvIsQueueFull>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d018      	beq.n	8006fc0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	3310      	adds	r3, #16
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	4611      	mov	r1, r2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f001 f9d8 	bl	800834c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f9e:	f000 fc80 	bl	80078a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fa2:	f000 fff5 	bl	8007f90 <xTaskResumeAll>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f47f af7c 	bne.w	8006ea6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006fae:	4b0c      	ldr	r3, [pc, #48]	; (8006fe0 <xQueueGenericSend+0x1f8>)
 8006fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	e772      	b.n	8006ea6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fc2:	f000 fc6e 	bl	80078a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fc6:	f000 ffe3 	bl	8007f90 <xTaskResumeAll>
 8006fca:	e76c      	b.n	8006ea6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fce:	f000 fc68 	bl	80078a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fd2:	f000 ffdd 	bl	8007f90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006fd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3738      	adds	r7, #56	; 0x38
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b090      	sub	sp, #64	; 0x40
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d103      	bne.n	8007020 <xQueueGenericSendFromISR+0x3c>
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <xQueueGenericSendFromISR+0x40>
 8007020:	2301      	movs	r3, #1
 8007022:	e000      	b.n	8007026 <xQueueGenericSendFromISR+0x42>
 8007024:	2300      	movs	r3, #0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10a      	bne.n	8007040 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800703c:	bf00      	nop
 800703e:	e7fe      	b.n	800703e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	2b02      	cmp	r3, #2
 8007044:	d103      	bne.n	800704e <xQueueGenericSendFromISR+0x6a>
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <xQueueGenericSendFromISR+0x6e>
 800704e:	2301      	movs	r3, #1
 8007050:	e000      	b.n	8007054 <xQueueGenericSendFromISR+0x70>
 8007052:	2300      	movs	r3, #0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	623b      	str	r3, [r7, #32]
}
 800706a:	bf00      	nop
 800706c:	e7fe      	b.n	800706c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800706e:	f002 facb 	bl	8009608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007072:	f3ef 8211 	mrs	r2, BASEPRI
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	61fa      	str	r2, [r7, #28]
 8007088:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800708a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800708c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007096:	429a      	cmp	r2, r3
 8007098:	d302      	bcc.n	80070a0 <xQueueGenericSendFromISR+0xbc>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d12f      	bne.n	8007100 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070b6:	f000 fb64 	bl	8007782 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80070be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070c2:	d112      	bne.n	80070ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d016      	beq.n	80070fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	3324      	adds	r3, #36	; 0x24
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 f98b 	bl	80083ec <xTaskRemoveFromEventList>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00e      	beq.n	80070fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	e007      	b.n	80070fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070ee:	3301      	adds	r3, #1
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	b25a      	sxtb	r2, r3
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80070fa:	2301      	movs	r3, #1
 80070fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80070fe:	e001      	b.n	8007104 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007100:	2300      	movs	r3, #0
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007106:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800710e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007112:	4618      	mov	r0, r3
 8007114:	3740      	adds	r7, #64	; 0x40
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b08e      	sub	sp, #56	; 0x38
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	623b      	str	r3, [r7, #32]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <xQueueGiveFromISR+0x48>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	61fb      	str	r3, [r7, #28]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d103      	bne.n	8007172 <xQueueGiveFromISR+0x58>
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <xQueueGiveFromISR+0x5c>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <xQueueGiveFromISR+0x5e>
 8007176:	2300      	movs	r3, #0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <xQueueGiveFromISR+0x78>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	61bb      	str	r3, [r7, #24]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007192:	f002 fa39 	bl	8009608 <vPortValidateInterruptPriority>
	__asm volatile
 8007196:	f3ef 8211 	mrs	r2, BASEPRI
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	617a      	str	r2, [r7, #20]
 80071ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80071ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071be:	429a      	cmp	r2, r3
 80071c0:	d22b      	bcs.n	800721a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80071d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071dc:	d112      	bne.n	8007204 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d016      	beq.n	8007214 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	3324      	adds	r3, #36	; 0x24
 80071ea:	4618      	mov	r0, r3
 80071ec:	f001 f8fe 	bl	80083ec <xTaskRemoveFromEventList>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00e      	beq.n	8007214 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2201      	movs	r2, #1
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	e007      	b.n	8007214 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007208:	3301      	adds	r3, #1
 800720a:	b2db      	uxtb	r3, r3
 800720c:	b25a      	sxtb	r2, r3
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007214:	2301      	movs	r3, #1
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
 8007218:	e001      	b.n	800721e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800721a:	2300      	movs	r3, #0
 800721c:	637b      	str	r3, [r7, #52]	; 0x34
 800721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007220:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f383 8811 	msr	BASEPRI, r3
}
 8007228:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800722a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800722c:	4618      	mov	r0, r3
 800722e:	3738      	adds	r7, #56	; 0x38
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08c      	sub	sp, #48	; 0x30
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007240:	2300      	movs	r3, #0
 8007242:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10a      	bne.n	8007264 <xQueueReceive+0x30>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	623b      	str	r3, [r7, #32]
}
 8007260:	bf00      	nop
 8007262:	e7fe      	b.n	8007262 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d103      	bne.n	8007272 <xQueueReceive+0x3e>
 800726a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <xQueueReceive+0x42>
 8007272:	2301      	movs	r3, #1
 8007274:	e000      	b.n	8007278 <xQueueReceive+0x44>
 8007276:	2300      	movs	r3, #0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <xQueueReceive+0x5e>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	61fb      	str	r3, [r7, #28]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007292:	f001 fa7d 	bl	8008790 <xTaskGetSchedulerState>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <xQueueReceive+0x6e>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <xQueueReceive+0x72>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e000      	b.n	80072a8 <xQueueReceive+0x74>
 80072a6:	2300      	movs	r3, #0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <xQueueReceive+0x8e>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	61bb      	str	r3, [r7, #24]
}
 80072be:	bf00      	nop
 80072c0:	e7fe      	b.n	80072c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072c2:	f002 f8bf 	bl	8009444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d01f      	beq.n	8007312 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072d6:	f000 fabe 	bl	8007856 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	1e5a      	subs	r2, r3, #1
 80072de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00f      	beq.n	800730a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	3310      	adds	r3, #16
 80072ee:	4618      	mov	r0, r3
 80072f0:	f001 f87c 	bl	80083ec <xTaskRemoveFromEventList>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d007      	beq.n	800730a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072fa:	4b3d      	ldr	r3, [pc, #244]	; (80073f0 <xQueueReceive+0x1bc>)
 80072fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800730a:	f002 f8cb 	bl	80094a4 <vPortExitCritical>
				return pdPASS;
 800730e:	2301      	movs	r3, #1
 8007310:	e069      	b.n	80073e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d103      	bne.n	8007320 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007318:	f002 f8c4 	bl	80094a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800731c:	2300      	movs	r3, #0
 800731e:	e062      	b.n	80073e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d106      	bne.n	8007334 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007326:	f107 0310 	add.w	r3, r7, #16
 800732a:	4618      	mov	r0, r3
 800732c:	f001 f8c2 	bl	80084b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007330:	2301      	movs	r3, #1
 8007332:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007334:	f002 f8b6 	bl	80094a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007338:	f000 fe1c 	bl	8007f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800733c:	f002 f882 	bl	8009444 <vPortEnterCritical>
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007346:	b25b      	sxtb	r3, r3
 8007348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800734c:	d103      	bne.n	8007356 <xQueueReceive+0x122>
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800735c:	b25b      	sxtb	r3, r3
 800735e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007362:	d103      	bne.n	800736c <xQueueReceive+0x138>
 8007364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800736c:	f002 f89a 	bl	80094a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007370:	1d3a      	adds	r2, r7, #4
 8007372:	f107 0310 	add.w	r3, r7, #16
 8007376:	4611      	mov	r1, r2
 8007378:	4618      	mov	r0, r3
 800737a:	f001 f8b1 	bl	80084e0 <xTaskCheckForTimeOut>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d123      	bne.n	80073cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007386:	f000 fade 	bl	8007946 <prvIsQueueEmpty>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d017      	beq.n	80073c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	3324      	adds	r3, #36	; 0x24
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	4611      	mov	r1, r2
 8007398:	4618      	mov	r0, r3
 800739a:	f000 ffd7 	bl	800834c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800739e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a0:	f000 fa7f 	bl	80078a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073a4:	f000 fdf4 	bl	8007f90 <xTaskResumeAll>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d189      	bne.n	80072c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80073ae:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <xQueueReceive+0x1bc>)
 80073b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	e780      	b.n	80072c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80073c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073c2:	f000 fa6e 	bl	80078a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073c6:	f000 fde3 	bl	8007f90 <xTaskResumeAll>
 80073ca:	e77a      	b.n	80072c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80073cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ce:	f000 fa68 	bl	80078a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073d2:	f000 fddd 	bl	8007f90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073d8:	f000 fab5 	bl	8007946 <prvIsQueueEmpty>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f43f af6f 	beq.w	80072c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3730      	adds	r7, #48	; 0x30
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08e      	sub	sp, #56	; 0x38
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80073fe:	2300      	movs	r3, #0
 8007400:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007406:	2300      	movs	r3, #0
 8007408:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	623b      	str	r3, [r7, #32]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	61fb      	str	r3, [r7, #28]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007444:	f001 f9a4 	bl	8008790 <xTaskGetSchedulerState>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <xQueueSemaphoreTake+0x60>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <xQueueSemaphoreTake+0x64>
 8007454:	2301      	movs	r3, #1
 8007456:	e000      	b.n	800745a <xQueueSemaphoreTake+0x66>
 8007458:	2300      	movs	r3, #0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	61bb      	str	r3, [r7, #24]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007474:	f001 ffe6 	bl	8009444 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	2b00      	cmp	r3, #0
 8007482:	d024      	beq.n	80074ce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007486:	1e5a      	subs	r2, r3, #1
 8007488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007494:	f001 faf2 	bl	8008a7c <pvTaskIncrementMutexHeldCount>
 8007498:	4602      	mov	r2, r0
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00f      	beq.n	80074c6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	3310      	adds	r3, #16
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 ff9e 	bl	80083ec <xTaskRemoveFromEventList>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074b6:	4b54      	ldr	r3, [pc, #336]	; (8007608 <xQueueSemaphoreTake+0x214>)
 80074b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074c6:	f001 ffed 	bl	80094a4 <vPortExitCritical>
				return pdPASS;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e097      	b.n	80075fe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d111      	bne.n	80074f8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	617b      	str	r3, [r7, #20]
}
 80074ec:	bf00      	nop
 80074ee:	e7fe      	b.n	80074ee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80074f0:	f001 ffd8 	bl	80094a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074f4:	2300      	movs	r3, #0
 80074f6:	e082      	b.n	80075fe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074fe:	f107 030c 	add.w	r3, r7, #12
 8007502:	4618      	mov	r0, r3
 8007504:	f000 ffd6 	bl	80084b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800750c:	f001 ffca 	bl	80094a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007510:	f000 fd30 	bl	8007f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007514:	f001 ff96 	bl	8009444 <vPortEnterCritical>
 8007518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800751e:	b25b      	sxtb	r3, r3
 8007520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007524:	d103      	bne.n	800752e <xQueueSemaphoreTake+0x13a>
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007534:	b25b      	sxtb	r3, r3
 8007536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800753a:	d103      	bne.n	8007544 <xQueueSemaphoreTake+0x150>
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007544:	f001 ffae 	bl	80094a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007548:	463a      	mov	r2, r7
 800754a:	f107 030c 	add.w	r3, r7, #12
 800754e:	4611      	mov	r1, r2
 8007550:	4618      	mov	r0, r3
 8007552:	f000 ffc5 	bl	80084e0 <xTaskCheckForTimeOut>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d132      	bne.n	80075c2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800755c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800755e:	f000 f9f2 	bl	8007946 <prvIsQueueEmpty>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d026      	beq.n	80075b6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d109      	bne.n	8007584 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007570:	f001 ff68 	bl	8009444 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	4618      	mov	r0, r3
 800757a:	f001 f927 	bl	80087cc <xTaskPriorityInherit>
 800757e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007580:	f001 ff90 	bl	80094a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007586:	3324      	adds	r3, #36	; 0x24
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	4611      	mov	r1, r2
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fedd 	bl	800834c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007594:	f000 f985 	bl	80078a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007598:	f000 fcfa 	bl	8007f90 <xTaskResumeAll>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f47f af68 	bne.w	8007474 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80075a4:	4b18      	ldr	r3, [pc, #96]	; (8007608 <xQueueSemaphoreTake+0x214>)
 80075a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	e75e      	b.n	8007474 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80075b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075b8:	f000 f973 	bl	80078a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075bc:	f000 fce8 	bl	8007f90 <xTaskResumeAll>
 80075c0:	e758      	b.n	8007474 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80075c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075c4:	f000 f96d 	bl	80078a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075c8:	f000 fce2 	bl	8007f90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075ce:	f000 f9ba 	bl	8007946 <prvIsQueueEmpty>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f43f af4d 	beq.w	8007474 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00d      	beq.n	80075fc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80075e0:	f001 ff30 	bl	8009444 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80075e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075e6:	f000 f8b4 	bl	8007752 <prvGetDisinheritPriorityAfterTimeout>
 80075ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075f2:	4618      	mov	r0, r3
 80075f4:	f001 f9c0 	bl	8008978 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80075f8:	f001 ff54 	bl	80094a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3738      	adds	r7, #56	; 0x38
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08e      	sub	sp, #56	; 0x38
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	623b      	str	r3, [r7, #32]
}
 8007634:	bf00      	nop
 8007636:	e7fe      	b.n	8007636 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d103      	bne.n	8007646 <xQueueReceiveFromISR+0x3a>
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <xQueueReceiveFromISR+0x3e>
 8007646:	2301      	movs	r3, #1
 8007648:	e000      	b.n	800764c <xQueueReceiveFromISR+0x40>
 800764a:	2300      	movs	r3, #0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	61fb      	str	r3, [r7, #28]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007666:	f001 ffcf 	bl	8009608 <vPortValidateInterruptPriority>
	__asm volatile
 800766a:	f3ef 8211 	mrs	r2, BASEPRI
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	61ba      	str	r2, [r7, #24]
 8007680:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007682:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007684:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800768c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768e:	2b00      	cmp	r3, #0
 8007690:	d02f      	beq.n	80076f2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800769c:	68b9      	ldr	r1, [r7, #8]
 800769e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076a0:	f000 f8d9 	bl	8007856 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	1e5a      	subs	r2, r3, #1
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80076ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076b4:	d112      	bne.n	80076dc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d016      	beq.n	80076ec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	3310      	adds	r3, #16
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 fe92 	bl	80083ec <xTaskRemoveFromEventList>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00e      	beq.n	80076ec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	e007      	b.n	80076ec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80076dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076e0:	3301      	adds	r3, #1
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	b25a      	sxtb	r2, r3
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80076ec:	2301      	movs	r3, #1
 80076ee:	637b      	str	r3, [r7, #52]	; 0x34
 80076f0:	e001      	b.n	80076f6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	637b      	str	r3, [r7, #52]	; 0x34
 80076f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f383 8811 	msr	BASEPRI, r3
}
 8007700:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007704:	4618      	mov	r0, r3
 8007706:	3738      	adds	r7, #56	; 0x38
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10a      	bne.n	8007734 <vQueueDelete+0x28>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	60bb      	str	r3, [r7, #8]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 f95f 	bl	80079f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f002 f86b 	bl	8009820 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800774a:	bf00      	nop
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	2b00      	cmp	r3, #0
 8007760:	d006      	beq.n	8007770 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	e001      	b.n	8007774 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007774:	68fb      	ldr	r3, [r7, #12]
	}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b086      	sub	sp, #24
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007796:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10d      	bne.n	80077bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d14d      	bne.n	8007844 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f001 f875 	bl	800889c <xTaskPriorityDisinherit>
 80077b2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	609a      	str	r2, [r3, #8]
 80077ba:	e043      	b.n	8007844 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d119      	bne.n	80077f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6858      	ldr	r0, [r3, #4]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	461a      	mov	r2, r3
 80077cc:	68b9      	ldr	r1, [r7, #8]
 80077ce:	f010 f9bf 	bl	8017b50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	441a      	add	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d32b      	bcc.n	8007844 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	605a      	str	r2, [r3, #4]
 80077f4:	e026      	b.n	8007844 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	68d8      	ldr	r0, [r3, #12]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	461a      	mov	r2, r3
 8007800:	68b9      	ldr	r1, [r7, #8]
 8007802:	f010 f9a5 	bl	8017b50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	68da      	ldr	r2, [r3, #12]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	425b      	negs	r3, r3
 8007810:	441a      	add	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d207      	bcs.n	8007832 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	425b      	negs	r3, r3
 800782c:	441a      	add	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b02      	cmp	r3, #2
 8007836:	d105      	bne.n	8007844 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	3b01      	subs	r3, #1
 8007842:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800784c:	697b      	ldr	r3, [r7, #20]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007864:	2b00      	cmp	r3, #0
 8007866:	d018      	beq.n	800789a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007870:	441a      	add	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	429a      	cmp	r2, r3
 8007880:	d303      	bcc.n	800788a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68d9      	ldr	r1, [r3, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	461a      	mov	r2, r3
 8007894:	6838      	ldr	r0, [r7, #0]
 8007896:	f010 f95b 	bl	8017b50 <memcpy>
	}
}
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078aa:	f001 fdcb 	bl	8009444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078b6:	e011      	b.n	80078dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d012      	beq.n	80078e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3324      	adds	r3, #36	; 0x24
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 fd91 	bl	80083ec <xTaskRemoveFromEventList>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80078d0:	f000 fe68 	bl	80085a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dce9      	bgt.n	80078b8 <prvUnlockQueue+0x16>
 80078e4:	e000      	b.n	80078e8 <prvUnlockQueue+0x46>
					break;
 80078e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	22ff      	movs	r2, #255	; 0xff
 80078ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80078f0:	f001 fdd8 	bl	80094a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80078f4:	f001 fda6 	bl	8009444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007900:	e011      	b.n	8007926 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d012      	beq.n	8007930 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3310      	adds	r3, #16
 800790e:	4618      	mov	r0, r3
 8007910:	f000 fd6c 	bl	80083ec <xTaskRemoveFromEventList>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800791a:	f000 fe43 	bl	80085a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	3b01      	subs	r3, #1
 8007922:	b2db      	uxtb	r3, r3
 8007924:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007926:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800792a:	2b00      	cmp	r3, #0
 800792c:	dce9      	bgt.n	8007902 <prvUnlockQueue+0x60>
 800792e:	e000      	b.n	8007932 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007930:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	22ff      	movs	r2, #255	; 0xff
 8007936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800793a:	f001 fdb3 	bl	80094a4 <vPortExitCritical>
}
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800794e:	f001 fd79 	bl	8009444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	2b00      	cmp	r3, #0
 8007958:	d102      	bne.n	8007960 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800795a:	2301      	movs	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]
 800795e:	e001      	b.n	8007964 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007964:	f001 fd9e 	bl	80094a4 <vPortExitCritical>

	return xReturn;
 8007968:	68fb      	ldr	r3, [r7, #12]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800797a:	f001 fd63 	bl	8009444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007986:	429a      	cmp	r2, r3
 8007988:	d102      	bne.n	8007990 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800798a:	2301      	movs	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	e001      	b.n	8007994 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007990:	2300      	movs	r3, #0
 8007992:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007994:	f001 fd86 	bl	80094a4 <vPortExitCritical>

	return xReturn;
 8007998:	68fb      	ldr	r3, [r7, #12]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	e014      	b.n	80079de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80079b4:	4a0f      	ldr	r2, [pc, #60]	; (80079f4 <vQueueAddToRegistry+0x50>)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10b      	bne.n	80079d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80079c0:	490c      	ldr	r1, [pc, #48]	; (80079f4 <vQueueAddToRegistry+0x50>)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80079ca:	4a0a      	ldr	r2, [pc, #40]	; (80079f4 <vQueueAddToRegistry+0x50>)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	4413      	add	r3, r2
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80079d6:	e006      	b.n	80079e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3301      	adds	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b07      	cmp	r3, #7
 80079e2:	d9e7      	bls.n	80079b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	2400bd68 	.word	0x2400bd68

080079f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a00:	2300      	movs	r3, #0
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	e016      	b.n	8007a34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007a06:	4a10      	ldr	r2, [pc, #64]	; (8007a48 <vQueueUnregisterQueue+0x50>)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	4413      	add	r3, r2
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d10b      	bne.n	8007a2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007a16:	4a0c      	ldr	r2, [pc, #48]	; (8007a48 <vQueueUnregisterQueue+0x50>)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007a20:	4a09      	ldr	r2, [pc, #36]	; (8007a48 <vQueueUnregisterQueue+0x50>)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	00db      	lsls	r3, r3, #3
 8007a26:	4413      	add	r3, r2
 8007a28:	2200      	movs	r2, #0
 8007a2a:	605a      	str	r2, [r3, #4]
				break;
 8007a2c:	e006      	b.n	8007a3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3301      	adds	r3, #1
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b07      	cmp	r3, #7
 8007a38:	d9e5      	bls.n	8007a06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007a3a:	bf00      	nop
 8007a3c:	bf00      	nop
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	2400bd68 	.word	0x2400bd68

08007a4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a5c:	f001 fcf2 	bl	8009444 <vPortEnterCritical>
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a66:	b25b      	sxtb	r3, r3
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a6c:	d103      	bne.n	8007a76 <vQueueWaitForMessageRestricted+0x2a>
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a7c:	b25b      	sxtb	r3, r3
 8007a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a82:	d103      	bne.n	8007a8c <vQueueWaitForMessageRestricted+0x40>
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a8c:	f001 fd0a 	bl	80094a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d106      	bne.n	8007aa6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	3324      	adds	r3, #36	; 0x24
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 fc77 	bl	8008394 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007aa6:	6978      	ldr	r0, [r7, #20]
 8007aa8:	f7ff fefb 	bl	80078a2 <prvUnlockQueue>
	}
 8007aac:	bf00      	nop
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08e      	sub	sp, #56	; 0x38
 8007ab8:	af04      	add	r7, sp, #16
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	623b      	str	r3, [r7, #32]
}
 8007ada:	bf00      	nop
 8007adc:	e7fe      	b.n	8007adc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10a      	bne.n	8007afa <xTaskCreateStatic+0x46>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	61fb      	str	r3, [r7, #28]
}
 8007af6:	bf00      	nop
 8007af8:	e7fe      	b.n	8007af8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007afa:	23c0      	movs	r3, #192	; 0xc0
 8007afc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2bc0      	cmp	r3, #192	; 0xc0
 8007b02:	d00a      	beq.n	8007b1a <xTaskCreateStatic+0x66>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	61bb      	str	r3, [r7, #24]
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d01e      	beq.n	8007b60 <xTaskCreateStatic+0xac>
 8007b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01b      	beq.n	8007b60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	2202      	movs	r2, #2
 8007b36:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	9303      	str	r3, [sp, #12]
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	9302      	str	r3, [sp, #8]
 8007b42:	f107 0314 	add.w	r3, r7, #20
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 f850 	bl	8007bf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b5a:	f000 f8f7 	bl	8007d4c <prvAddNewTaskToReadyList>
 8007b5e:	e001      	b.n	8007b64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b64:	697b      	ldr	r3, [r7, #20]
	}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3728      	adds	r7, #40	; 0x28
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b08c      	sub	sp, #48	; 0x30
 8007b72:	af04      	add	r7, sp, #16
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	603b      	str	r3, [r7, #0]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b7e:	88fb      	ldrh	r3, [r7, #6]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 fd80 	bl	8009688 <pvPortMalloc>
 8007b88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00e      	beq.n	8007bae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b90:	20c0      	movs	r0, #192	; 0xc0
 8007b92:	f001 fd79 	bl	8009688 <pvPortMalloc>
 8007b96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8007ba4:	e005      	b.n	8007bb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ba6:	6978      	ldr	r0, [r7, #20]
 8007ba8:	f001 fe3a 	bl	8009820 <vPortFree>
 8007bac:	e001      	b.n	8007bb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d017      	beq.n	8007be8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bc0:	88fa      	ldrh	r2, [r7, #6]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9303      	str	r3, [sp, #12]
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	9302      	str	r3, [sp, #8]
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	9301      	str	r3, [sp, #4]
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68b9      	ldr	r1, [r7, #8]
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 f80e 	bl	8007bf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bdc:	69f8      	ldr	r0, [r7, #28]
 8007bde:	f000 f8b5 	bl	8007d4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007be2:	2301      	movs	r3, #1
 8007be4:	61bb      	str	r3, [r7, #24]
 8007be6:	e002      	b.n	8007bee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bee:	69bb      	ldr	r3, [r7, #24]
	}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3720      	adds	r7, #32
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	461a      	mov	r2, r3
 8007c10:	21a5      	movs	r1, #165	; 0xa5
 8007c12:	f00f ffc5 	bl	8017ba0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007c20:	440b      	add	r3, r1
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	f023 0307 	bic.w	r3, r3, #7
 8007c2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	617b      	str	r3, [r7, #20]
}
 8007c4c:	bf00      	nop
 8007c4e:	e7fe      	b.n	8007c4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d01f      	beq.n	8007c96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c56:	2300      	movs	r3, #0
 8007c58:	61fb      	str	r3, [r7, #28]
 8007c5a:	e012      	b.n	8007c82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	4413      	add	r3, r2
 8007c62:	7819      	ldrb	r1, [r3, #0]
 8007c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	4413      	add	r3, r2
 8007c6a:	3334      	adds	r3, #52	; 0x34
 8007c6c:	460a      	mov	r2, r1
 8007c6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	4413      	add	r3, r2
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d006      	beq.n	8007c8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	61fb      	str	r3, [r7, #28]
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	2b0f      	cmp	r3, #15
 8007c86:	d9e9      	bls.n	8007c5c <prvInitialiseNewTask+0x64>
 8007c88:	e000      	b.n	8007c8c <prvInitialiseNewTask+0x94>
			{
				break;
 8007c8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c94:	e003      	b.n	8007c9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	2b37      	cmp	r3, #55	; 0x37
 8007ca2:	d901      	bls.n	8007ca8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ca4:	2337      	movs	r3, #55	; 0x37
 8007ca6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe fda0 	bl	8006804 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc6:	3318      	adds	r3, #24
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fe fd9b 	bl	8006804 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	3358      	adds	r3, #88	; 0x58
 8007cfe:	2260      	movs	r2, #96	; 0x60
 8007d00:	2100      	movs	r1, #0
 8007d02:	4618      	mov	r0, r3
 8007d04:	f00f ff4c 	bl	8017ba0 <memset>
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	4a0d      	ldr	r2, [pc, #52]	; (8007d40 <prvInitialiseNewTask+0x148>)
 8007d0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	4a0c      	ldr	r2, [pc, #48]	; (8007d44 <prvInitialiseNewTask+0x14c>)
 8007d12:	661a      	str	r2, [r3, #96]	; 0x60
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	4a0c      	ldr	r2, [pc, #48]	; (8007d48 <prvInitialiseNewTask+0x150>)
 8007d18:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	68f9      	ldr	r1, [r7, #12]
 8007d1e:	69b8      	ldr	r0, [r7, #24]
 8007d20:	f001 fa62 	bl	80091e8 <pxPortInitialiseStack>
 8007d24:	4602      	mov	r2, r0
 8007d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d36:	bf00      	nop
 8007d38:	3720      	adds	r7, #32
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	0801da64 	.word	0x0801da64
 8007d44:	0801da84 	.word	0x0801da84
 8007d48:	0801da44 	.word	0x0801da44

08007d4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d54:	f001 fb76 	bl	8009444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d58:	4b2d      	ldr	r3, [pc, #180]	; (8007e10 <prvAddNewTaskToReadyList+0xc4>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	4a2c      	ldr	r2, [pc, #176]	; (8007e10 <prvAddNewTaskToReadyList+0xc4>)
 8007d60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d62:	4b2c      	ldr	r3, [pc, #176]	; (8007e14 <prvAddNewTaskToReadyList+0xc8>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d6a:	4a2a      	ldr	r2, [pc, #168]	; (8007e14 <prvAddNewTaskToReadyList+0xc8>)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d70:	4b27      	ldr	r3, [pc, #156]	; (8007e10 <prvAddNewTaskToReadyList+0xc4>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d110      	bne.n	8007d9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d78:	f000 fc38 	bl	80085ec <prvInitialiseTaskLists>
 8007d7c:	e00d      	b.n	8007d9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d7e:	4b26      	ldr	r3, [pc, #152]	; (8007e18 <prvAddNewTaskToReadyList+0xcc>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d109      	bne.n	8007d9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d86:	4b23      	ldr	r3, [pc, #140]	; (8007e14 <prvAddNewTaskToReadyList+0xc8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d802      	bhi.n	8007d9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d94:	4a1f      	ldr	r2, [pc, #124]	; (8007e14 <prvAddNewTaskToReadyList+0xc8>)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d9a:	4b20      	ldr	r3, [pc, #128]	; (8007e1c <prvAddNewTaskToReadyList+0xd0>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	4a1e      	ldr	r2, [pc, #120]	; (8007e1c <prvAddNewTaskToReadyList+0xd0>)
 8007da2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007da4:	4b1d      	ldr	r3, [pc, #116]	; (8007e1c <prvAddNewTaskToReadyList+0xd0>)
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db0:	4b1b      	ldr	r3, [pc, #108]	; (8007e20 <prvAddNewTaskToReadyList+0xd4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d903      	bls.n	8007dc0 <prvAddNewTaskToReadyList+0x74>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	4a18      	ldr	r2, [pc, #96]	; (8007e20 <prvAddNewTaskToReadyList+0xd4>)
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4a15      	ldr	r2, [pc, #84]	; (8007e24 <prvAddNewTaskToReadyList+0xd8>)
 8007dce:	441a      	add	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	f7fe fd21 	bl	800681e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ddc:	f001 fb62 	bl	80094a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007de0:	4b0d      	ldr	r3, [pc, #52]	; (8007e18 <prvAddNewTaskToReadyList+0xcc>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00e      	beq.n	8007e06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007de8:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <prvAddNewTaskToReadyList+0xc8>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d207      	bcs.n	8007e06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007df6:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <prvAddNewTaskToReadyList+0xdc>)
 8007df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e06:	bf00      	nop
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	240014c4 	.word	0x240014c4
 8007e14:	24000ff0 	.word	0x24000ff0
 8007e18:	240014d0 	.word	0x240014d0
 8007e1c:	240014e0 	.word	0x240014e0
 8007e20:	240014cc 	.word	0x240014cc
 8007e24:	24000ff4 	.word	0x24000ff4
 8007e28:	e000ed04 	.word	0xe000ed04

08007e2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d017      	beq.n	8007e6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e3e:	4b13      	ldr	r3, [pc, #76]	; (8007e8c <vTaskDelay+0x60>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <vTaskDelay+0x30>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	60bb      	str	r3, [r7, #8]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e5c:	f000 f88a 	bl	8007f74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e60:	2100      	movs	r1, #0
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fe1e 	bl	8008aa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e68:	f000 f892 	bl	8007f90 <xTaskResumeAll>
 8007e6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d107      	bne.n	8007e84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e74:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <vTaskDelay+0x64>)
 8007e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e84:	bf00      	nop
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	240014ec 	.word	0x240014ec
 8007e90:	e000ed04 	.word	0xe000ed04

08007e94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08a      	sub	sp, #40	; 0x28
 8007e98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ea2:	463a      	mov	r2, r7
 8007ea4:	1d39      	adds	r1, r7, #4
 8007ea6:	f107 0308 	add.w	r3, r7, #8
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fc56 	bl	800675c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	9202      	str	r2, [sp, #8]
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	460a      	mov	r2, r1
 8007ec2:	4924      	ldr	r1, [pc, #144]	; (8007f54 <vTaskStartScheduler+0xc0>)
 8007ec4:	4824      	ldr	r0, [pc, #144]	; (8007f58 <vTaskStartScheduler+0xc4>)
 8007ec6:	f7ff fdf5 	bl	8007ab4 <xTaskCreateStatic>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	4a23      	ldr	r2, [pc, #140]	; (8007f5c <vTaskStartScheduler+0xc8>)
 8007ece:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ed0:	4b22      	ldr	r3, [pc, #136]	; (8007f5c <vTaskStartScheduler+0xc8>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	617b      	str	r3, [r7, #20]
 8007edc:	e001      	b.n	8007ee2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d102      	bne.n	8007eee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ee8:	f000 fe30 	bl	8008b4c <xTimerCreateTimerTask>
 8007eec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d11b      	bne.n	8007f2c <vTaskStartScheduler+0x98>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	613b      	str	r3, [r7, #16]
}
 8007f06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f08:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <vTaskStartScheduler+0xcc>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3358      	adds	r3, #88	; 0x58
 8007f0e:	4a15      	ldr	r2, [pc, #84]	; (8007f64 <vTaskStartScheduler+0xd0>)
 8007f10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f12:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <vTaskStartScheduler+0xd4>)
 8007f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f1a:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <vTaskStartScheduler+0xd8>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f20:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <vTaskStartScheduler+0xdc>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f26:	f001 f9eb 	bl	8009300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f2a:	e00e      	b.n	8007f4a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f32:	d10a      	bne.n	8007f4a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	60fb      	str	r3, [r7, #12]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <vTaskStartScheduler+0xb4>
}
 8007f4a:	bf00      	nop
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	0801aaa0 	.word	0x0801aaa0
 8007f58:	080085bd 	.word	0x080085bd
 8007f5c:	240014e8 	.word	0x240014e8
 8007f60:	24000ff0 	.word	0x24000ff0
 8007f64:	24000060 	.word	0x24000060
 8007f68:	240014e4 	.word	0x240014e4
 8007f6c:	240014d0 	.word	0x240014d0
 8007f70:	240014c8 	.word	0x240014c8

08007f74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f74:	b480      	push	{r7}
 8007f76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f78:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <vTaskSuspendAll+0x18>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	4a03      	ldr	r2, [pc, #12]	; (8007f8c <vTaskSuspendAll+0x18>)
 8007f80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f82:	bf00      	nop
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	240014ec 	.word	0x240014ec

08007f90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f9e:	4b42      	ldr	r3, [pc, #264]	; (80080a8 <xTaskResumeAll+0x118>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10a      	bne.n	8007fbc <xTaskResumeAll+0x2c>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	603b      	str	r3, [r7, #0]
}
 8007fb8:	bf00      	nop
 8007fba:	e7fe      	b.n	8007fba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fbc:	f001 fa42 	bl	8009444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fc0:	4b39      	ldr	r3, [pc, #228]	; (80080a8 <xTaskResumeAll+0x118>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4a38      	ldr	r2, [pc, #224]	; (80080a8 <xTaskResumeAll+0x118>)
 8007fc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fca:	4b37      	ldr	r3, [pc, #220]	; (80080a8 <xTaskResumeAll+0x118>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d162      	bne.n	8008098 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fd2:	4b36      	ldr	r3, [pc, #216]	; (80080ac <xTaskResumeAll+0x11c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d05e      	beq.n	8008098 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fda:	e02f      	b.n	800803c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fdc:	4b34      	ldr	r3, [pc, #208]	; (80080b0 <xTaskResumeAll+0x120>)
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3318      	adds	r3, #24
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe fc75 	bl	80068d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fe fc70 	bl	80068d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffc:	4b2d      	ldr	r3, [pc, #180]	; (80080b4 <xTaskResumeAll+0x124>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d903      	bls.n	800800c <xTaskResumeAll+0x7c>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	4a2a      	ldr	r2, [pc, #168]	; (80080b4 <xTaskResumeAll+0x124>)
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4a27      	ldr	r2, [pc, #156]	; (80080b8 <xTaskResumeAll+0x128>)
 800801a:	441a      	add	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3304      	adds	r3, #4
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f7fe fbfb 	bl	800681e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802c:	4b23      	ldr	r3, [pc, #140]	; (80080bc <xTaskResumeAll+0x12c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008032:	429a      	cmp	r2, r3
 8008034:	d302      	bcc.n	800803c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008036:	4b22      	ldr	r3, [pc, #136]	; (80080c0 <xTaskResumeAll+0x130>)
 8008038:	2201      	movs	r2, #1
 800803a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800803c:	4b1c      	ldr	r3, [pc, #112]	; (80080b0 <xTaskResumeAll+0x120>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1cb      	bne.n	8007fdc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800804a:	f000 fb71 	bl	8008730 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800804e:	4b1d      	ldr	r3, [pc, #116]	; (80080c4 <xTaskResumeAll+0x134>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d010      	beq.n	800807c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800805a:	f000 f859 	bl	8008110 <xTaskIncrementTick>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008064:	4b16      	ldr	r3, [pc, #88]	; (80080c0 <xTaskResumeAll+0x130>)
 8008066:	2201      	movs	r2, #1
 8008068:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3b01      	subs	r3, #1
 800806e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1f1      	bne.n	800805a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008076:	4b13      	ldr	r3, [pc, #76]	; (80080c4 <xTaskResumeAll+0x134>)
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800807c:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <xTaskResumeAll+0x130>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d009      	beq.n	8008098 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008084:	2301      	movs	r3, #1
 8008086:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008088:	4b0f      	ldr	r3, [pc, #60]	; (80080c8 <xTaskResumeAll+0x138>)
 800808a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008098:	f001 fa04 	bl	80094a4 <vPortExitCritical>

	return xAlreadyYielded;
 800809c:	68bb      	ldr	r3, [r7, #8]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	240014ec 	.word	0x240014ec
 80080ac:	240014c4 	.word	0x240014c4
 80080b0:	24001484 	.word	0x24001484
 80080b4:	240014cc 	.word	0x240014cc
 80080b8:	24000ff4 	.word	0x24000ff4
 80080bc:	24000ff0 	.word	0x24000ff0
 80080c0:	240014d8 	.word	0x240014d8
 80080c4:	240014d4 	.word	0x240014d4
 80080c8:	e000ed04 	.word	0xe000ed04

080080cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <xTaskGetTickCount+0x1c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080d8:	687b      	ldr	r3, [r7, #4]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	240014c8 	.word	0x240014c8

080080ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080f2:	f001 fa89 	bl	8009608 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80080f6:	2300      	movs	r3, #0
 80080f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80080fa:	4b04      	ldr	r3, [pc, #16]	; (800810c <xTaskGetTickCountFromISR+0x20>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008100:	683b      	ldr	r3, [r7, #0]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	240014c8 	.word	0x240014c8

08008110 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008116:	2300      	movs	r3, #0
 8008118:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800811a:	4b4f      	ldr	r3, [pc, #316]	; (8008258 <xTaskIncrementTick+0x148>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	f040 808f 	bne.w	8008242 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008124:	4b4d      	ldr	r3, [pc, #308]	; (800825c <xTaskIncrementTick+0x14c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3301      	adds	r3, #1
 800812a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800812c:	4a4b      	ldr	r2, [pc, #300]	; (800825c <xTaskIncrementTick+0x14c>)
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d120      	bne.n	800817a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008138:	4b49      	ldr	r3, [pc, #292]	; (8008260 <xTaskIncrementTick+0x150>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00a      	beq.n	8008158 <xTaskIncrementTick+0x48>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	603b      	str	r3, [r7, #0]
}
 8008154:	bf00      	nop
 8008156:	e7fe      	b.n	8008156 <xTaskIncrementTick+0x46>
 8008158:	4b41      	ldr	r3, [pc, #260]	; (8008260 <xTaskIncrementTick+0x150>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	60fb      	str	r3, [r7, #12]
 800815e:	4b41      	ldr	r3, [pc, #260]	; (8008264 <xTaskIncrementTick+0x154>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a3f      	ldr	r2, [pc, #252]	; (8008260 <xTaskIncrementTick+0x150>)
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	4a3f      	ldr	r2, [pc, #252]	; (8008264 <xTaskIncrementTick+0x154>)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	4b3e      	ldr	r3, [pc, #248]	; (8008268 <xTaskIncrementTick+0x158>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3301      	adds	r3, #1
 8008172:	4a3d      	ldr	r2, [pc, #244]	; (8008268 <xTaskIncrementTick+0x158>)
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	f000 fadb 	bl	8008730 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800817a:	4b3c      	ldr	r3, [pc, #240]	; (800826c <xTaskIncrementTick+0x15c>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	429a      	cmp	r2, r3
 8008182:	d349      	bcc.n	8008218 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008184:	4b36      	ldr	r3, [pc, #216]	; (8008260 <xTaskIncrementTick+0x150>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d104      	bne.n	8008198 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800818e:	4b37      	ldr	r3, [pc, #220]	; (800826c <xTaskIncrementTick+0x15c>)
 8008190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008194:	601a      	str	r2, [r3, #0]
					break;
 8008196:	e03f      	b.n	8008218 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008198:	4b31      	ldr	r3, [pc, #196]	; (8008260 <xTaskIncrementTick+0x150>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d203      	bcs.n	80081b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081b0:	4a2e      	ldr	r2, [pc, #184]	; (800826c <xTaskIncrementTick+0x15c>)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081b6:	e02f      	b.n	8008218 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	3304      	adds	r3, #4
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fe fb8b 	bl	80068d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	3318      	adds	r3, #24
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fe fb82 	bl	80068d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d8:	4b25      	ldr	r3, [pc, #148]	; (8008270 <xTaskIncrementTick+0x160>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d903      	bls.n	80081e8 <xTaskIncrementTick+0xd8>
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	4a22      	ldr	r2, [pc, #136]	; (8008270 <xTaskIncrementTick+0x160>)
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ec:	4613      	mov	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4a1f      	ldr	r2, [pc, #124]	; (8008274 <xTaskIncrementTick+0x164>)
 80081f6:	441a      	add	r2, r3
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	3304      	adds	r3, #4
 80081fc:	4619      	mov	r1, r3
 80081fe:	4610      	mov	r0, r2
 8008200:	f7fe fb0d 	bl	800681e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008208:	4b1b      	ldr	r3, [pc, #108]	; (8008278 <xTaskIncrementTick+0x168>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	429a      	cmp	r2, r3
 8008210:	d3b8      	bcc.n	8008184 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008212:	2301      	movs	r3, #1
 8008214:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008216:	e7b5      	b.n	8008184 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008218:	4b17      	ldr	r3, [pc, #92]	; (8008278 <xTaskIncrementTick+0x168>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821e:	4915      	ldr	r1, [pc, #84]	; (8008274 <xTaskIncrementTick+0x164>)
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d901      	bls.n	8008234 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008230:	2301      	movs	r3, #1
 8008232:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008234:	4b11      	ldr	r3, [pc, #68]	; (800827c <xTaskIncrementTick+0x16c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d007      	beq.n	800824c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800823c:	2301      	movs	r3, #1
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	e004      	b.n	800824c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008242:	4b0f      	ldr	r3, [pc, #60]	; (8008280 <xTaskIncrementTick+0x170>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3301      	adds	r3, #1
 8008248:	4a0d      	ldr	r2, [pc, #52]	; (8008280 <xTaskIncrementTick+0x170>)
 800824a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800824c:	697b      	ldr	r3, [r7, #20]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	240014ec 	.word	0x240014ec
 800825c:	240014c8 	.word	0x240014c8
 8008260:	2400147c 	.word	0x2400147c
 8008264:	24001480 	.word	0x24001480
 8008268:	240014dc 	.word	0x240014dc
 800826c:	240014e4 	.word	0x240014e4
 8008270:	240014cc 	.word	0x240014cc
 8008274:	24000ff4 	.word	0x24000ff4
 8008278:	24000ff0 	.word	0x24000ff0
 800827c:	240014d8 	.word	0x240014d8
 8008280:	240014d4 	.word	0x240014d4

08008284 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800828a:	4b2a      	ldr	r3, [pc, #168]	; (8008334 <vTaskSwitchContext+0xb0>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008292:	4b29      	ldr	r3, [pc, #164]	; (8008338 <vTaskSwitchContext+0xb4>)
 8008294:	2201      	movs	r2, #1
 8008296:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008298:	e046      	b.n	8008328 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800829a:	4b27      	ldr	r3, [pc, #156]	; (8008338 <vTaskSwitchContext+0xb4>)
 800829c:	2200      	movs	r2, #0
 800829e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082a0:	4b26      	ldr	r3, [pc, #152]	; (800833c <vTaskSwitchContext+0xb8>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	e010      	b.n	80082ca <vTaskSwitchContext+0x46>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10a      	bne.n	80082c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	607b      	str	r3, [r7, #4]
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <vTaskSwitchContext+0x3e>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	491d      	ldr	r1, [pc, #116]	; (8008340 <vTaskSwitchContext+0xbc>)
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4613      	mov	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	440b      	add	r3, r1
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0e4      	beq.n	80082a8 <vTaskSwitchContext+0x24>
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4a15      	ldr	r2, [pc, #84]	; (8008340 <vTaskSwitchContext+0xbc>)
 80082ea:	4413      	add	r3, r2
 80082ec:	60bb      	str	r3, [r7, #8]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	605a      	str	r2, [r3, #4]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	3308      	adds	r3, #8
 8008300:	429a      	cmp	r2, r3
 8008302:	d104      	bne.n	800830e <vTaskSwitchContext+0x8a>
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	605a      	str	r2, [r3, #4]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	4a0b      	ldr	r2, [pc, #44]	; (8008344 <vTaskSwitchContext+0xc0>)
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	4a08      	ldr	r2, [pc, #32]	; (800833c <vTaskSwitchContext+0xb8>)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800831e:	4b09      	ldr	r3, [pc, #36]	; (8008344 <vTaskSwitchContext+0xc0>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3358      	adds	r3, #88	; 0x58
 8008324:	4a08      	ldr	r2, [pc, #32]	; (8008348 <vTaskSwitchContext+0xc4>)
 8008326:	6013      	str	r3, [r2, #0]
}
 8008328:	bf00      	nop
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	240014ec 	.word	0x240014ec
 8008338:	240014d8 	.word	0x240014d8
 800833c:	240014cc 	.word	0x240014cc
 8008340:	24000ff4 	.word	0x24000ff4
 8008344:	24000ff0 	.word	0x24000ff0
 8008348:	24000060 	.word	0x24000060

0800834c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	60fb      	str	r3, [r7, #12]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008372:	4b07      	ldr	r3, [pc, #28]	; (8008390 <vTaskPlaceOnEventList+0x44>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3318      	adds	r3, #24
 8008378:	4619      	mov	r1, r3
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7fe fa73 	bl	8006866 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008380:	2101      	movs	r1, #1
 8008382:	6838      	ldr	r0, [r7, #0]
 8008384:	f000 fb8e 	bl	8008aa4 <prvAddCurrentTaskToDelayedList>
}
 8008388:	bf00      	nop
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	24000ff0 	.word	0x24000ff0

08008394 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	617b      	str	r3, [r7, #20]
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083bc:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3318      	adds	r3, #24
 80083c2:	4619      	mov	r1, r3
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f7fe fa2a 	bl	800681e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80083d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	68b8      	ldr	r0, [r7, #8]
 80083da:	f000 fb63 	bl	8008aa4 <prvAddCurrentTaskToDelayedList>
	}
 80083de:	bf00      	nop
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	24000ff0 	.word	0x24000ff0

080083ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10a      	bne.n	8008418 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	60fb      	str	r3, [r7, #12]
}
 8008414:	bf00      	nop
 8008416:	e7fe      	b.n	8008416 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	3318      	adds	r3, #24
 800841c:	4618      	mov	r0, r3
 800841e:	f7fe fa5b 	bl	80068d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008422:	4b1e      	ldr	r3, [pc, #120]	; (800849c <xTaskRemoveFromEventList+0xb0>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d11d      	bne.n	8008466 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	3304      	adds	r3, #4
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe fa52 	bl	80068d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008438:	4b19      	ldr	r3, [pc, #100]	; (80084a0 <xTaskRemoveFromEventList+0xb4>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	429a      	cmp	r2, r3
 800843e:	d903      	bls.n	8008448 <xTaskRemoveFromEventList+0x5c>
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	4a16      	ldr	r2, [pc, #88]	; (80084a0 <xTaskRemoveFromEventList+0xb4>)
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844c:	4613      	mov	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4a13      	ldr	r2, [pc, #76]	; (80084a4 <xTaskRemoveFromEventList+0xb8>)
 8008456:	441a      	add	r2, r3
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	3304      	adds	r3, #4
 800845c:	4619      	mov	r1, r3
 800845e:	4610      	mov	r0, r2
 8008460:	f7fe f9dd 	bl	800681e <vListInsertEnd>
 8008464:	e005      	b.n	8008472 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	3318      	adds	r3, #24
 800846a:	4619      	mov	r1, r3
 800846c:	480e      	ldr	r0, [pc, #56]	; (80084a8 <xTaskRemoveFromEventList+0xbc>)
 800846e:	f7fe f9d6 	bl	800681e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008476:	4b0d      	ldr	r3, [pc, #52]	; (80084ac <xTaskRemoveFromEventList+0xc0>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	429a      	cmp	r2, r3
 800847e:	d905      	bls.n	800848c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008480:	2301      	movs	r3, #1
 8008482:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008484:	4b0a      	ldr	r3, [pc, #40]	; (80084b0 <xTaskRemoveFromEventList+0xc4>)
 8008486:	2201      	movs	r2, #1
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	e001      	b.n	8008490 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800848c:	2300      	movs	r3, #0
 800848e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008490:	697b      	ldr	r3, [r7, #20]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	240014ec 	.word	0x240014ec
 80084a0:	240014cc 	.word	0x240014cc
 80084a4:	24000ff4 	.word	0x24000ff4
 80084a8:	24001484 	.word	0x24001484
 80084ac:	24000ff0 	.word	0x24000ff0
 80084b0:	240014d8 	.word	0x240014d8

080084b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80084bc:	4b06      	ldr	r3, [pc, #24]	; (80084d8 <vTaskInternalSetTimeOutState+0x24>)
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084c4:	4b05      	ldr	r3, [pc, #20]	; (80084dc <vTaskInternalSetTimeOutState+0x28>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	605a      	str	r2, [r3, #4]
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	240014dc 	.word	0x240014dc
 80084dc:	240014c8 	.word	0x240014c8

080084e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10a      	bne.n	8008506 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	613b      	str	r3, [r7, #16]
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10a      	bne.n	8008522 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	60fb      	str	r3, [r7, #12]
}
 800851e:	bf00      	nop
 8008520:	e7fe      	b.n	8008520 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008522:	f000 ff8f 	bl	8009444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008526:	4b1d      	ldr	r3, [pc, #116]	; (800859c <xTaskCheckForTimeOut+0xbc>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800853e:	d102      	bne.n	8008546 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008540:	2300      	movs	r3, #0
 8008542:	61fb      	str	r3, [r7, #28]
 8008544:	e023      	b.n	800858e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	4b15      	ldr	r3, [pc, #84]	; (80085a0 <xTaskCheckForTimeOut+0xc0>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	429a      	cmp	r2, r3
 8008550:	d007      	beq.n	8008562 <xTaskCheckForTimeOut+0x82>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	429a      	cmp	r2, r3
 800855a:	d302      	bcc.n	8008562 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800855c:	2301      	movs	r3, #1
 800855e:	61fb      	str	r3, [r7, #28]
 8008560:	e015      	b.n	800858e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	429a      	cmp	r2, r3
 800856a:	d20b      	bcs.n	8008584 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	1ad2      	subs	r2, r2, r3
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff ff9b 	bl	80084b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800857e:	2300      	movs	r3, #0
 8008580:	61fb      	str	r3, [r7, #28]
 8008582:	e004      	b.n	800858e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2200      	movs	r2, #0
 8008588:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800858a:	2301      	movs	r3, #1
 800858c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800858e:	f000 ff89 	bl	80094a4 <vPortExitCritical>

	return xReturn;
 8008592:	69fb      	ldr	r3, [r7, #28]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3720      	adds	r7, #32
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	240014c8 	.word	0x240014c8
 80085a0:	240014dc 	.word	0x240014dc

080085a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085a4:	b480      	push	{r7}
 80085a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085a8:	4b03      	ldr	r3, [pc, #12]	; (80085b8 <vTaskMissedYield+0x14>)
 80085aa:	2201      	movs	r2, #1
 80085ac:	601a      	str	r2, [r3, #0]
}
 80085ae:	bf00      	nop
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	240014d8 	.word	0x240014d8

080085bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085c4:	f000 f852 	bl	800866c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085c8:	4b06      	ldr	r3, [pc, #24]	; (80085e4 <prvIdleTask+0x28>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d9f9      	bls.n	80085c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80085d0:	4b05      	ldr	r3, [pc, #20]	; (80085e8 <prvIdleTask+0x2c>)
 80085d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085e0:	e7f0      	b.n	80085c4 <prvIdleTask+0x8>
 80085e2:	bf00      	nop
 80085e4:	24000ff4 	.word	0x24000ff4
 80085e8:	e000ed04 	.word	0xe000ed04

080085ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085f2:	2300      	movs	r3, #0
 80085f4:	607b      	str	r3, [r7, #4]
 80085f6:	e00c      	b.n	8008612 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	4613      	mov	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4a12      	ldr	r2, [pc, #72]	; (800864c <prvInitialiseTaskLists+0x60>)
 8008604:	4413      	add	r3, r2
 8008606:	4618      	mov	r0, r3
 8008608:	f7fe f8dc 	bl	80067c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	3301      	adds	r3, #1
 8008610:	607b      	str	r3, [r7, #4]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b37      	cmp	r3, #55	; 0x37
 8008616:	d9ef      	bls.n	80085f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008618:	480d      	ldr	r0, [pc, #52]	; (8008650 <prvInitialiseTaskLists+0x64>)
 800861a:	f7fe f8d3 	bl	80067c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800861e:	480d      	ldr	r0, [pc, #52]	; (8008654 <prvInitialiseTaskLists+0x68>)
 8008620:	f7fe f8d0 	bl	80067c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008624:	480c      	ldr	r0, [pc, #48]	; (8008658 <prvInitialiseTaskLists+0x6c>)
 8008626:	f7fe f8cd 	bl	80067c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800862a:	480c      	ldr	r0, [pc, #48]	; (800865c <prvInitialiseTaskLists+0x70>)
 800862c:	f7fe f8ca 	bl	80067c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008630:	480b      	ldr	r0, [pc, #44]	; (8008660 <prvInitialiseTaskLists+0x74>)
 8008632:	f7fe f8c7 	bl	80067c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008636:	4b0b      	ldr	r3, [pc, #44]	; (8008664 <prvInitialiseTaskLists+0x78>)
 8008638:	4a05      	ldr	r2, [pc, #20]	; (8008650 <prvInitialiseTaskLists+0x64>)
 800863a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800863c:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <prvInitialiseTaskLists+0x7c>)
 800863e:	4a05      	ldr	r2, [pc, #20]	; (8008654 <prvInitialiseTaskLists+0x68>)
 8008640:	601a      	str	r2, [r3, #0]
}
 8008642:	bf00      	nop
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	24000ff4 	.word	0x24000ff4
 8008650:	24001454 	.word	0x24001454
 8008654:	24001468 	.word	0x24001468
 8008658:	24001484 	.word	0x24001484
 800865c:	24001498 	.word	0x24001498
 8008660:	240014b0 	.word	0x240014b0
 8008664:	2400147c 	.word	0x2400147c
 8008668:	24001480 	.word	0x24001480

0800866c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008672:	e019      	b.n	80086a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008674:	f000 fee6 	bl	8009444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008678:	4b10      	ldr	r3, [pc, #64]	; (80086bc <prvCheckTasksWaitingTermination+0x50>)
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3304      	adds	r3, #4
 8008684:	4618      	mov	r0, r3
 8008686:	f7fe f927 	bl	80068d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800868a:	4b0d      	ldr	r3, [pc, #52]	; (80086c0 <prvCheckTasksWaitingTermination+0x54>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3b01      	subs	r3, #1
 8008690:	4a0b      	ldr	r2, [pc, #44]	; (80086c0 <prvCheckTasksWaitingTermination+0x54>)
 8008692:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008694:	4b0b      	ldr	r3, [pc, #44]	; (80086c4 <prvCheckTasksWaitingTermination+0x58>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3b01      	subs	r3, #1
 800869a:	4a0a      	ldr	r2, [pc, #40]	; (80086c4 <prvCheckTasksWaitingTermination+0x58>)
 800869c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800869e:	f000 ff01 	bl	80094a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f810 	bl	80086c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086a8:	4b06      	ldr	r3, [pc, #24]	; (80086c4 <prvCheckTasksWaitingTermination+0x58>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1e1      	bne.n	8008674 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086b0:	bf00      	nop
 80086b2:	bf00      	nop
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	24001498 	.word	0x24001498
 80086c0:	240014c4 	.word	0x240014c4
 80086c4:	240014ac 	.word	0x240014ac

080086c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3358      	adds	r3, #88	; 0x58
 80086d4:	4618      	mov	r0, r3
 80086d6:	f00f fb7b 	bl	8017dd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d108      	bne.n	80086f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 f899 	bl	8009820 <vPortFree>
				vPortFree( pxTCB );
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f001 f896 	bl	8009820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086f4:	e018      	b.n	8008728 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d103      	bne.n	8008708 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f001 f88d 	bl	8009820 <vPortFree>
	}
 8008706:	e00f      	b.n	8008728 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800870e:	2b02      	cmp	r3, #2
 8008710:	d00a      	beq.n	8008728 <prvDeleteTCB+0x60>
	__asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	60fb      	str	r3, [r7, #12]
}
 8008724:	bf00      	nop
 8008726:	e7fe      	b.n	8008726 <prvDeleteTCB+0x5e>
	}
 8008728:	bf00      	nop
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008736:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <prvResetNextTaskUnblockTime+0x38>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d104      	bne.n	800874a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008740:	4b0a      	ldr	r3, [pc, #40]	; (800876c <prvResetNextTaskUnblockTime+0x3c>)
 8008742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008746:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008748:	e008      	b.n	800875c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800874a:	4b07      	ldr	r3, [pc, #28]	; (8008768 <prvResetNextTaskUnblockTime+0x38>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4a04      	ldr	r2, [pc, #16]	; (800876c <prvResetNextTaskUnblockTime+0x3c>)
 800875a:	6013      	str	r3, [r2, #0]
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	2400147c 	.word	0x2400147c
 800876c:	240014e4 	.word	0x240014e4

08008770 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008776:	4b05      	ldr	r3, [pc, #20]	; (800878c <xTaskGetCurrentTaskHandle+0x1c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800877c:	687b      	ldr	r3, [r7, #4]
	}
 800877e:	4618      	mov	r0, r3
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	24000ff0 	.word	0x24000ff0

08008790 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008796:	4b0b      	ldr	r3, [pc, #44]	; (80087c4 <xTaskGetSchedulerState+0x34>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d102      	bne.n	80087a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800879e:	2301      	movs	r3, #1
 80087a0:	607b      	str	r3, [r7, #4]
 80087a2:	e008      	b.n	80087b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087a4:	4b08      	ldr	r3, [pc, #32]	; (80087c8 <xTaskGetSchedulerState+0x38>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d102      	bne.n	80087b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087ac:	2302      	movs	r3, #2
 80087ae:	607b      	str	r3, [r7, #4]
 80087b0:	e001      	b.n	80087b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087b2:	2300      	movs	r3, #0
 80087b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087b6:	687b      	ldr	r3, [r7, #4]
	}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	240014d0 	.word	0x240014d0
 80087c8:	240014ec 	.word	0x240014ec

080087cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80087d8:	2300      	movs	r3, #0
 80087da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d051      	beq.n	8008886 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e6:	4b2a      	ldr	r3, [pc, #168]	; (8008890 <xTaskPriorityInherit+0xc4>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d241      	bcs.n	8008874 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	db06      	blt.n	8008806 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087f8:	4b25      	ldr	r3, [pc, #148]	; (8008890 <xTaskPriorityInherit+0xc4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	6959      	ldr	r1, [r3, #20]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4a1f      	ldr	r2, [pc, #124]	; (8008894 <xTaskPriorityInherit+0xc8>)
 8008818:	4413      	add	r3, r2
 800881a:	4299      	cmp	r1, r3
 800881c:	d122      	bne.n	8008864 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	3304      	adds	r3, #4
 8008822:	4618      	mov	r0, r3
 8008824:	f7fe f858 	bl	80068d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008828:	4b19      	ldr	r3, [pc, #100]	; (8008890 <xTaskPriorityInherit+0xc4>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008836:	4b18      	ldr	r3, [pc, #96]	; (8008898 <xTaskPriorityInherit+0xcc>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	429a      	cmp	r2, r3
 800883c:	d903      	bls.n	8008846 <xTaskPriorityInherit+0x7a>
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008842:	4a15      	ldr	r2, [pc, #84]	; (8008898 <xTaskPriorityInherit+0xcc>)
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4a10      	ldr	r2, [pc, #64]	; (8008894 <xTaskPriorityInherit+0xc8>)
 8008854:	441a      	add	r2, r3
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	3304      	adds	r3, #4
 800885a:	4619      	mov	r1, r3
 800885c:	4610      	mov	r0, r2
 800885e:	f7fd ffde 	bl	800681e <vListInsertEnd>
 8008862:	e004      	b.n	800886e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008864:	4b0a      	ldr	r3, [pc, #40]	; (8008890 <xTaskPriorityInherit+0xc4>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800886e:	2301      	movs	r3, #1
 8008870:	60fb      	str	r3, [r7, #12]
 8008872:	e008      	b.n	8008886 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008878:	4b05      	ldr	r3, [pc, #20]	; (8008890 <xTaskPriorityInherit+0xc4>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887e:	429a      	cmp	r2, r3
 8008880:	d201      	bcs.n	8008886 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008882:	2301      	movs	r3, #1
 8008884:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008886:	68fb      	ldr	r3, [r7, #12]
	}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	24000ff0 	.word	0x24000ff0
 8008894:	24000ff4 	.word	0x24000ff4
 8008898:	240014cc 	.word	0x240014cc

0800889c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80088a8:	2300      	movs	r3, #0
 80088aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d056      	beq.n	8008960 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80088b2:	4b2e      	ldr	r3, [pc, #184]	; (800896c <xTaskPriorityDisinherit+0xd0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d00a      	beq.n	80088d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	60fb      	str	r3, [r7, #12]
}
 80088ce:	bf00      	nop
 80088d0:	e7fe      	b.n	80088d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10a      	bne.n	80088f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	60bb      	str	r3, [r7, #8]
}
 80088ec:	bf00      	nop
 80088ee:	e7fe      	b.n	80088ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f4:	1e5a      	subs	r2, r3, #1
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008902:	429a      	cmp	r2, r3
 8008904:	d02c      	beq.n	8008960 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800890a:	2b00      	cmp	r3, #0
 800890c:	d128      	bne.n	8008960 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	3304      	adds	r3, #4
 8008912:	4618      	mov	r0, r3
 8008914:	f7fd ffe0 	bl	80068d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008924:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008930:	4b0f      	ldr	r3, [pc, #60]	; (8008970 <xTaskPriorityDisinherit+0xd4>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	429a      	cmp	r2, r3
 8008936:	d903      	bls.n	8008940 <xTaskPriorityDisinherit+0xa4>
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	4a0c      	ldr	r2, [pc, #48]	; (8008970 <xTaskPriorityDisinherit+0xd4>)
 800893e:	6013      	str	r3, [r2, #0]
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	4613      	mov	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4a09      	ldr	r2, [pc, #36]	; (8008974 <xTaskPriorityDisinherit+0xd8>)
 800894e:	441a      	add	r2, r3
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	3304      	adds	r3, #4
 8008954:	4619      	mov	r1, r3
 8008956:	4610      	mov	r0, r2
 8008958:	f7fd ff61 	bl	800681e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800895c:	2301      	movs	r3, #1
 800895e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008960:	697b      	ldr	r3, [r7, #20]
	}
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	24000ff0 	.word	0x24000ff0
 8008970:	240014cc 	.word	0x240014cc
 8008974:	24000ff4 	.word	0x24000ff4

08008978 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008978:	b580      	push	{r7, lr}
 800897a:	b088      	sub	sp, #32
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008986:	2301      	movs	r3, #1
 8008988:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d06a      	beq.n	8008a66 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10a      	bne.n	80089ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	60fb      	str	r3, [r7, #12]
}
 80089aa:	bf00      	nop
 80089ac:	e7fe      	b.n	80089ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d902      	bls.n	80089be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	61fb      	str	r3, [r7, #28]
 80089bc:	e002      	b.n	80089c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c8:	69fa      	ldr	r2, [r7, #28]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d04b      	beq.n	8008a66 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d146      	bne.n	8008a66 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80089d8:	4b25      	ldr	r3, [pc, #148]	; (8008a70 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d10a      	bne.n	80089f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	60bb      	str	r3, [r7, #8]
}
 80089f4:	bf00      	nop
 80089f6:	e7fe      	b.n	80089f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	69fa      	ldr	r2, [r7, #28]
 8008a02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	db04      	blt.n	8008a16 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	6959      	ldr	r1, [r3, #20]
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4a13      	ldr	r2, [pc, #76]	; (8008a74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008a26:	4413      	add	r3, r2
 8008a28:	4299      	cmp	r1, r3
 8008a2a:	d11c      	bne.n	8008a66 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fd ff51 	bl	80068d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3a:	4b0f      	ldr	r3, [pc, #60]	; (8008a78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d903      	bls.n	8008a4a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a46:	4a0c      	ldr	r2, [pc, #48]	; (8008a78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4a07      	ldr	r2, [pc, #28]	; (8008a74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008a58:	441a      	add	r2, r3
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	4619      	mov	r1, r3
 8008a60:	4610      	mov	r0, r2
 8008a62:	f7fd fedc 	bl	800681e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a66:	bf00      	nop
 8008a68:	3720      	adds	r7, #32
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	24000ff0 	.word	0x24000ff0
 8008a74:	24000ff4 	.word	0x24000ff4
 8008a78:	240014cc 	.word	0x240014cc

08008a7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008a80:	4b07      	ldr	r3, [pc, #28]	; (8008aa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d004      	beq.n	8008a92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008a88:	4b05      	ldr	r3, [pc, #20]	; (8008aa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a8e:	3201      	adds	r2, #1
 8008a90:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008a92:	4b03      	ldr	r3, [pc, #12]	; (8008aa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a94:	681b      	ldr	r3, [r3, #0]
	}
 8008a96:	4618      	mov	r0, r3
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	24000ff0 	.word	0x24000ff0

08008aa4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008aae:	4b21      	ldr	r3, [pc, #132]	; (8008b34 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ab4:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fd ff0c 	bl	80068d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ac6:	d10a      	bne.n	8008ade <prvAddCurrentTaskToDelayedList+0x3a>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d007      	beq.n	8008ade <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ace:	4b1a      	ldr	r3, [pc, #104]	; (8008b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4819      	ldr	r0, [pc, #100]	; (8008b3c <prvAddCurrentTaskToDelayedList+0x98>)
 8008ad8:	f7fd fea1 	bl	800681e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008adc:	e026      	b.n	8008b2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ae6:	4b14      	ldr	r3, [pc, #80]	; (8008b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d209      	bcs.n	8008b0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008af6:	4b12      	ldr	r3, [pc, #72]	; (8008b40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3304      	adds	r3, #4
 8008b00:	4619      	mov	r1, r3
 8008b02:	4610      	mov	r0, r2
 8008b04:	f7fd feaf 	bl	8006866 <vListInsert>
}
 8008b08:	e010      	b.n	8008b2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b0a:	4b0e      	ldr	r3, [pc, #56]	; (8008b44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	4b0a      	ldr	r3, [pc, #40]	; (8008b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4619      	mov	r1, r3
 8008b16:	4610      	mov	r0, r2
 8008b18:	f7fd fea5 	bl	8006866 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d202      	bcs.n	8008b2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b26:	4a08      	ldr	r2, [pc, #32]	; (8008b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	6013      	str	r3, [r2, #0]
}
 8008b2c:	bf00      	nop
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	240014c8 	.word	0x240014c8
 8008b38:	24000ff0 	.word	0x24000ff0
 8008b3c:	240014b0 	.word	0x240014b0
 8008b40:	24001480 	.word	0x24001480
 8008b44:	2400147c 	.word	0x2400147c
 8008b48:	240014e4 	.word	0x240014e4

08008b4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08a      	sub	sp, #40	; 0x28
 8008b50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b52:	2300      	movs	r3, #0
 8008b54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b56:	f000 fb07 	bl	8009168 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b5a:	4b1c      	ldr	r3, [pc, #112]	; (8008bcc <xTimerCreateTimerTask+0x80>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d021      	beq.n	8008ba6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b6a:	1d3a      	adds	r2, r7, #4
 8008b6c:	f107 0108 	add.w	r1, r7, #8
 8008b70:	f107 030c 	add.w	r3, r7, #12
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fd fe0b 	bl	8006790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b7a:	6879      	ldr	r1, [r7, #4]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	9202      	str	r2, [sp, #8]
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	2302      	movs	r3, #2
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	2300      	movs	r3, #0
 8008b8a:	460a      	mov	r2, r1
 8008b8c:	4910      	ldr	r1, [pc, #64]	; (8008bd0 <xTimerCreateTimerTask+0x84>)
 8008b8e:	4811      	ldr	r0, [pc, #68]	; (8008bd4 <xTimerCreateTimerTask+0x88>)
 8008b90:	f7fe ff90 	bl	8007ab4 <xTaskCreateStatic>
 8008b94:	4603      	mov	r3, r0
 8008b96:	4a10      	ldr	r2, [pc, #64]	; (8008bd8 <xTimerCreateTimerTask+0x8c>)
 8008b98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b9a:	4b0f      	ldr	r3, [pc, #60]	; (8008bd8 <xTimerCreateTimerTask+0x8c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10a      	bne.n	8008bc2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	613b      	str	r3, [r7, #16]
}
 8008bbe:	bf00      	nop
 8008bc0:	e7fe      	b.n	8008bc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008bc2:	697b      	ldr	r3, [r7, #20]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	24001520 	.word	0x24001520
 8008bd0:	0801aaa8 	.word	0x0801aaa8
 8008bd4:	08008d11 	.word	0x08008d11
 8008bd8:	24001524 	.word	0x24001524

08008bdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08a      	sub	sp, #40	; 0x28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10a      	bne.n	8008c0a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	623b      	str	r3, [r7, #32]
}
 8008c06:	bf00      	nop
 8008c08:	e7fe      	b.n	8008c08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c0a:	4b1a      	ldr	r3, [pc, #104]	; (8008c74 <xTimerGenericCommand+0x98>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d02a      	beq.n	8008c68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2b05      	cmp	r3, #5
 8008c22:	dc18      	bgt.n	8008c56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c24:	f7ff fdb4 	bl	8008790 <xTaskGetSchedulerState>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d109      	bne.n	8008c42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c2e:	4b11      	ldr	r3, [pc, #68]	; (8008c74 <xTimerGenericCommand+0x98>)
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	f107 0110 	add.w	r1, r7, #16
 8008c36:	2300      	movs	r3, #0
 8008c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c3a:	f7fe f8d5 	bl	8006de8 <xQueueGenericSend>
 8008c3e:	6278      	str	r0, [r7, #36]	; 0x24
 8008c40:	e012      	b.n	8008c68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c42:	4b0c      	ldr	r3, [pc, #48]	; (8008c74 <xTimerGenericCommand+0x98>)
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	f107 0110 	add.w	r1, r7, #16
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f7fe f8cb 	bl	8006de8 <xQueueGenericSend>
 8008c52:	6278      	str	r0, [r7, #36]	; 0x24
 8008c54:	e008      	b.n	8008c68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c56:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <xTimerGenericCommand+0x98>)
 8008c58:	6818      	ldr	r0, [r3, #0]
 8008c5a:	f107 0110 	add.w	r1, r7, #16
 8008c5e:	2300      	movs	r3, #0
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	f7fe f9bf 	bl	8006fe4 <xQueueGenericSendFromISR>
 8008c66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3728      	adds	r7, #40	; 0x28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	24001520 	.word	0x24001520

08008c78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af02      	add	r7, sp, #8
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c82:	4b22      	ldr	r3, [pc, #136]	; (8008d0c <prvProcessExpiredTimer+0x94>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	3304      	adds	r3, #4
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fd fe21 	bl	80068d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c9c:	f003 0304 	and.w	r3, r3, #4
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d022      	beq.n	8008cea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	699a      	ldr	r2, [r3, #24]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	18d1      	adds	r1, r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	6978      	ldr	r0, [r7, #20]
 8008cb2:	f000 f8d1 	bl	8008e58 <prvInsertTimerInActiveList>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d01f      	beq.n	8008cfc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	6978      	ldr	r0, [r7, #20]
 8008cc8:	f7ff ff88 	bl	8008bdc <xTimerGenericCommand>
 8008ccc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d113      	bne.n	8008cfc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	60fb      	str	r3, [r7, #12]
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cf0:	f023 0301 	bic.w	r3, r3, #1
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	6a1b      	ldr	r3, [r3, #32]
 8008d00:	6978      	ldr	r0, [r7, #20]
 8008d02:	4798      	blx	r3
}
 8008d04:	bf00      	nop
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	24001518 	.word	0x24001518

08008d10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d18:	f107 0308 	add.w	r3, r7, #8
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 f857 	bl	8008dd0 <prvGetNextExpireTime>
 8008d22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	4619      	mov	r1, r3
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 f803 	bl	8008d34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d2e:	f000 f8d5 	bl	8008edc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d32:	e7f1      	b.n	8008d18 <prvTimerTask+0x8>

08008d34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d3e:	f7ff f919 	bl	8007f74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d42:	f107 0308 	add.w	r3, r7, #8
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 f866 	bl	8008e18 <prvSampleTimeNow>
 8008d4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d130      	bne.n	8008db6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10a      	bne.n	8008d70 <prvProcessTimerOrBlockTask+0x3c>
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d806      	bhi.n	8008d70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d62:	f7ff f915 	bl	8007f90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d66:	68f9      	ldr	r1, [r7, #12]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7ff ff85 	bl	8008c78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d6e:	e024      	b.n	8008dba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d008      	beq.n	8008d88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d76:	4b13      	ldr	r3, [pc, #76]	; (8008dc4 <prvProcessTimerOrBlockTask+0x90>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <prvProcessTimerOrBlockTask+0x50>
 8008d80:	2301      	movs	r3, #1
 8008d82:	e000      	b.n	8008d86 <prvProcessTimerOrBlockTask+0x52>
 8008d84:	2300      	movs	r3, #0
 8008d86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d88:	4b0f      	ldr	r3, [pc, #60]	; (8008dc8 <prvProcessTimerOrBlockTask+0x94>)
 8008d8a:	6818      	ldr	r0, [r3, #0]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	4619      	mov	r1, r3
 8008d96:	f7fe fe59 	bl	8007a4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d9a:	f7ff f8f9 	bl	8007f90 <xTaskResumeAll>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10a      	bne.n	8008dba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008da4:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <prvProcessTimerOrBlockTask+0x98>)
 8008da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	f3bf 8f6f 	isb	sy
}
 8008db4:	e001      	b.n	8008dba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008db6:	f7ff f8eb 	bl	8007f90 <xTaskResumeAll>
}
 8008dba:	bf00      	nop
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	2400151c 	.word	0x2400151c
 8008dc8:	24001520 	.word	0x24001520
 8008dcc:	e000ed04 	.word	0xe000ed04

08008dd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008dd8:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <prvGetNextExpireTime+0x44>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <prvGetNextExpireTime+0x16>
 8008de2:	2201      	movs	r2, #1
 8008de4:	e000      	b.n	8008de8 <prvGetNextExpireTime+0x18>
 8008de6:	2200      	movs	r2, #0
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d105      	bne.n	8008e00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008df4:	4b07      	ldr	r3, [pc, #28]	; (8008e14 <prvGetNextExpireTime+0x44>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	60fb      	str	r3, [r7, #12]
 8008dfe:	e001      	b.n	8008e04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e04:	68fb      	ldr	r3, [r7, #12]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	24001518 	.word	0x24001518

08008e18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e20:	f7ff f954 	bl	80080cc <xTaskGetTickCount>
 8008e24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e26:	4b0b      	ldr	r3, [pc, #44]	; (8008e54 <prvSampleTimeNow+0x3c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d205      	bcs.n	8008e3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e30:	f000 f936 	bl	80090a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	e002      	b.n	8008e42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e42:	4a04      	ldr	r2, [pc, #16]	; (8008e54 <prvSampleTimeNow+0x3c>)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e48:	68fb      	ldr	r3, [r7, #12]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	24001528 	.word	0x24001528

08008e58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e66:	2300      	movs	r3, #0
 8008e68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d812      	bhi.n	8008ea4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	1ad2      	subs	r2, r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d302      	bcc.n	8008e92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	617b      	str	r3, [r7, #20]
 8008e90:	e01b      	b.n	8008eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e92:	4b10      	ldr	r3, [pc, #64]	; (8008ed4 <prvInsertTimerInActiveList+0x7c>)
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3304      	adds	r3, #4
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	f7fd fce2 	bl	8006866 <vListInsert>
 8008ea2:	e012      	b.n	8008eca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d206      	bcs.n	8008eba <prvInsertTimerInActiveList+0x62>
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d302      	bcc.n	8008eba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	617b      	str	r3, [r7, #20]
 8008eb8:	e007      	b.n	8008eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008eba:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <prvInsertTimerInActiveList+0x80>)
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	f7fd fcce 	bl	8006866 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008eca:	697b      	ldr	r3, [r7, #20]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3718      	adds	r7, #24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	2400151c 	.word	0x2400151c
 8008ed8:	24001518 	.word	0x24001518

08008edc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08e      	sub	sp, #56	; 0x38
 8008ee0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ee2:	e0ca      	b.n	800907a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	da18      	bge.n	8008f1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008eea:	1d3b      	adds	r3, r7, #4
 8008eec:	3304      	adds	r3, #4
 8008eee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10a      	bne.n	8008f0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	61fb      	str	r3, [r7, #28]
}
 8008f08:	bf00      	nop
 8008f0a:	e7fe      	b.n	8008f0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f12:	6850      	ldr	r0, [r2, #4]
 8008f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f16:	6892      	ldr	r2, [r2, #8]
 8008f18:	4611      	mov	r1, r2
 8008f1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f2c0 80aa 	blt.w	8009078 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d004      	beq.n	8008f3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f32:	3304      	adds	r3, #4
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fd fccf 	bl	80068d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7ff ff6b 	bl	8008e18 <prvSampleTimeNow>
 8008f42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b09      	cmp	r3, #9
 8008f48:	f200 8097 	bhi.w	800907a <prvProcessReceivedCommands+0x19e>
 8008f4c:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <prvProcessReceivedCommands+0x78>)
 8008f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f52:	bf00      	nop
 8008f54:	08008f7d 	.word	0x08008f7d
 8008f58:	08008f7d 	.word	0x08008f7d
 8008f5c:	08008f7d 	.word	0x08008f7d
 8008f60:	08008ff1 	.word	0x08008ff1
 8008f64:	08009005 	.word	0x08009005
 8008f68:	0800904f 	.word	0x0800904f
 8008f6c:	08008f7d 	.word	0x08008f7d
 8008f70:	08008f7d 	.word	0x08008f7d
 8008f74:	08008ff1 	.word	0x08008ff1
 8008f78:	08009005 	.word	0x08009005
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f82:	f043 0301 	orr.w	r3, r3, #1
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	18d1      	adds	r1, r2, r3
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f9c:	f7ff ff5c 	bl	8008e58 <prvInsertTimerInActiveList>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d069      	beq.n	800907a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d05e      	beq.n	800907a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	441a      	add	r2, r3
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2100      	movs	r1, #0
 8008fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fce:	f7ff fe05 	bl	8008bdc <xTimerGenericCommand>
 8008fd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d14f      	bne.n	800907a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	61bb      	str	r3, [r7, #24]
}
 8008fec:	bf00      	nop
 8008fee:	e7fe      	b.n	8008fee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ff6:	f023 0301 	bic.w	r3, r3, #1
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009002:	e03a      	b.n	800907a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800900a:	f043 0301 	orr.w	r3, r3, #1
 800900e:	b2da      	uxtb	r2, r3
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10a      	bne.n	800903a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	617b      	str	r3, [r7, #20]
}
 8009036:	bf00      	nop
 8009038:	e7fe      	b.n	8009038 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	699a      	ldr	r2, [r3, #24]
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	18d1      	adds	r1, r2, r3
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009048:	f7ff ff06 	bl	8008e58 <prvInsertTimerInActiveList>
					break;
 800904c:	e015      	b.n	800907a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009054:	f003 0302 	and.w	r3, r3, #2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d103      	bne.n	8009064 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800905c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905e:	f000 fbdf 	bl	8009820 <vPortFree>
 8009062:	e00a      	b.n	800907a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800906a:	f023 0301 	bic.w	r3, r3, #1
 800906e:	b2da      	uxtb	r2, r3
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009076:	e000      	b.n	800907a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009078:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800907a:	4b08      	ldr	r3, [pc, #32]	; (800909c <prvProcessReceivedCommands+0x1c0>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	1d39      	adds	r1, r7, #4
 8009080:	2200      	movs	r2, #0
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe f8d6 	bl	8007234 <xQueueReceive>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	f47f af2a 	bne.w	8008ee4 <prvProcessReceivedCommands+0x8>
	}
}
 8009090:	bf00      	nop
 8009092:	bf00      	nop
 8009094:	3730      	adds	r7, #48	; 0x30
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	24001520 	.word	0x24001520

080090a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b088      	sub	sp, #32
 80090a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090a6:	e048      	b.n	800913a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090a8:	4b2d      	ldr	r3, [pc, #180]	; (8009160 <prvSwitchTimerLists+0xc0>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b2:	4b2b      	ldr	r3, [pc, #172]	; (8009160 <prvSwitchTimerLists+0xc0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	3304      	adds	r3, #4
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fd fc09 	bl	80068d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090d4:	f003 0304 	and.w	r3, r3, #4
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d02e      	beq.n	800913a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	4413      	add	r3, r2
 80090e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d90e      	bls.n	800910c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090fa:	4b19      	ldr	r3, [pc, #100]	; (8009160 <prvSwitchTimerLists+0xc0>)
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3304      	adds	r3, #4
 8009102:	4619      	mov	r1, r3
 8009104:	4610      	mov	r0, r2
 8009106:	f7fd fbae 	bl	8006866 <vListInsert>
 800910a:	e016      	b.n	800913a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800910c:	2300      	movs	r3, #0
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	2300      	movs	r3, #0
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	2100      	movs	r1, #0
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f7ff fd60 	bl	8008bdc <xTimerGenericCommand>
 800911c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10a      	bne.n	800913a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	603b      	str	r3, [r7, #0]
}
 8009136:	bf00      	nop
 8009138:	e7fe      	b.n	8009138 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800913a:	4b09      	ldr	r3, [pc, #36]	; (8009160 <prvSwitchTimerLists+0xc0>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1b1      	bne.n	80090a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009144:	4b06      	ldr	r3, [pc, #24]	; (8009160 <prvSwitchTimerLists+0xc0>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800914a:	4b06      	ldr	r3, [pc, #24]	; (8009164 <prvSwitchTimerLists+0xc4>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a04      	ldr	r2, [pc, #16]	; (8009160 <prvSwitchTimerLists+0xc0>)
 8009150:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009152:	4a04      	ldr	r2, [pc, #16]	; (8009164 <prvSwitchTimerLists+0xc4>)
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	6013      	str	r3, [r2, #0]
}
 8009158:	bf00      	nop
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	24001518 	.word	0x24001518
 8009164:	2400151c 	.word	0x2400151c

08009168 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800916e:	f000 f969 	bl	8009444 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009172:	4b15      	ldr	r3, [pc, #84]	; (80091c8 <prvCheckForValidListAndQueue+0x60>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d120      	bne.n	80091bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800917a:	4814      	ldr	r0, [pc, #80]	; (80091cc <prvCheckForValidListAndQueue+0x64>)
 800917c:	f7fd fb22 	bl	80067c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009180:	4813      	ldr	r0, [pc, #76]	; (80091d0 <prvCheckForValidListAndQueue+0x68>)
 8009182:	f7fd fb1f 	bl	80067c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009186:	4b13      	ldr	r3, [pc, #76]	; (80091d4 <prvCheckForValidListAndQueue+0x6c>)
 8009188:	4a10      	ldr	r2, [pc, #64]	; (80091cc <prvCheckForValidListAndQueue+0x64>)
 800918a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800918c:	4b12      	ldr	r3, [pc, #72]	; (80091d8 <prvCheckForValidListAndQueue+0x70>)
 800918e:	4a10      	ldr	r2, [pc, #64]	; (80091d0 <prvCheckForValidListAndQueue+0x68>)
 8009190:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009192:	2300      	movs	r3, #0
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	4b11      	ldr	r3, [pc, #68]	; (80091dc <prvCheckForValidListAndQueue+0x74>)
 8009198:	4a11      	ldr	r2, [pc, #68]	; (80091e0 <prvCheckForValidListAndQueue+0x78>)
 800919a:	2110      	movs	r1, #16
 800919c:	200a      	movs	r0, #10
 800919e:	f7fd fc2d 	bl	80069fc <xQueueGenericCreateStatic>
 80091a2:	4603      	mov	r3, r0
 80091a4:	4a08      	ldr	r2, [pc, #32]	; (80091c8 <prvCheckForValidListAndQueue+0x60>)
 80091a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80091a8:	4b07      	ldr	r3, [pc, #28]	; (80091c8 <prvCheckForValidListAndQueue+0x60>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d005      	beq.n	80091bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80091b0:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <prvCheckForValidListAndQueue+0x60>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	490b      	ldr	r1, [pc, #44]	; (80091e4 <prvCheckForValidListAndQueue+0x7c>)
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe fbf4 	bl	80079a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091bc:	f000 f972 	bl	80094a4 <vPortExitCritical>
}
 80091c0:	bf00      	nop
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	24001520 	.word	0x24001520
 80091cc:	240014f0 	.word	0x240014f0
 80091d0:	24001504 	.word	0x24001504
 80091d4:	24001518 	.word	0x24001518
 80091d8:	2400151c 	.word	0x2400151c
 80091dc:	240015cc 	.word	0x240015cc
 80091e0:	2400152c 	.word	0x2400152c
 80091e4:	0801aab0 	.word	0x0801aab0

080091e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3b04      	subs	r3, #4
 80091f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3b04      	subs	r3, #4
 8009206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f023 0201 	bic.w	r2, r3, #1
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3b04      	subs	r3, #4
 8009216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009218:	4a0c      	ldr	r2, [pc, #48]	; (800924c <pxPortInitialiseStack+0x64>)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3b14      	subs	r3, #20
 8009222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3b04      	subs	r3, #4
 800922e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f06f 0202 	mvn.w	r2, #2
 8009236:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	3b20      	subs	r3, #32
 800923c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800923e:	68fb      	ldr	r3, [r7, #12]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	08009251 	.word	0x08009251

08009250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009256:	2300      	movs	r3, #0
 8009258:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800925a:	4b12      	ldr	r3, [pc, #72]	; (80092a4 <prvTaskExitError+0x54>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009262:	d00a      	beq.n	800927a <prvTaskExitError+0x2a>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	60fb      	str	r3, [r7, #12]
}
 8009276:	bf00      	nop
 8009278:	e7fe      	b.n	8009278 <prvTaskExitError+0x28>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	60bb      	str	r3, [r7, #8]
}
 800928c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800928e:	bf00      	nop
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0fc      	beq.n	8009290 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009296:	bf00      	nop
 8009298:	bf00      	nop
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	24000024 	.word	0x24000024
	...

080092b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092b0:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <pxCurrentTCBConst2>)
 80092b2:	6819      	ldr	r1, [r3, #0]
 80092b4:	6808      	ldr	r0, [r1, #0]
 80092b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ba:	f380 8809 	msr	PSP, r0
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f04f 0000 	mov.w	r0, #0
 80092c6:	f380 8811 	msr	BASEPRI, r0
 80092ca:	4770      	bx	lr
 80092cc:	f3af 8000 	nop.w

080092d0 <pxCurrentTCBConst2>:
 80092d0:	24000ff0 	.word	0x24000ff0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop

080092d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092d8:	4808      	ldr	r0, [pc, #32]	; (80092fc <prvPortStartFirstTask+0x24>)
 80092da:	6800      	ldr	r0, [r0, #0]
 80092dc:	6800      	ldr	r0, [r0, #0]
 80092de:	f380 8808 	msr	MSP, r0
 80092e2:	f04f 0000 	mov.w	r0, #0
 80092e6:	f380 8814 	msr	CONTROL, r0
 80092ea:	b662      	cpsie	i
 80092ec:	b661      	cpsie	f
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	df00      	svc	0
 80092f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092fa:	bf00      	nop
 80092fc:	e000ed08 	.word	0xe000ed08

08009300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009306:	4b46      	ldr	r3, [pc, #280]	; (8009420 <xPortStartScheduler+0x120>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a46      	ldr	r2, [pc, #280]	; (8009424 <xPortStartScheduler+0x124>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d10a      	bne.n	8009326 <xPortStartScheduler+0x26>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	613b      	str	r3, [r7, #16]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009326:	4b3e      	ldr	r3, [pc, #248]	; (8009420 <xPortStartScheduler+0x120>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a3f      	ldr	r2, [pc, #252]	; (8009428 <xPortStartScheduler+0x128>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d10a      	bne.n	8009346 <xPortStartScheduler+0x46>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	60fb      	str	r3, [r7, #12]
}
 8009342:	bf00      	nop
 8009344:	e7fe      	b.n	8009344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009346:	4b39      	ldr	r3, [pc, #228]	; (800942c <xPortStartScheduler+0x12c>)
 8009348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	b2db      	uxtb	r3, r3
 8009350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	22ff      	movs	r2, #255	; 0xff
 8009356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	b2db      	uxtb	r3, r3
 800935e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009360:	78fb      	ldrb	r3, [r7, #3]
 8009362:	b2db      	uxtb	r3, r3
 8009364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009368:	b2da      	uxtb	r2, r3
 800936a:	4b31      	ldr	r3, [pc, #196]	; (8009430 <xPortStartScheduler+0x130>)
 800936c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800936e:	4b31      	ldr	r3, [pc, #196]	; (8009434 <xPortStartScheduler+0x134>)
 8009370:	2207      	movs	r2, #7
 8009372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009374:	e009      	b.n	800938a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009376:	4b2f      	ldr	r3, [pc, #188]	; (8009434 <xPortStartScheduler+0x134>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3b01      	subs	r3, #1
 800937c:	4a2d      	ldr	r2, [pc, #180]	; (8009434 <xPortStartScheduler+0x134>)
 800937e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	b2db      	uxtb	r3, r3
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	b2db      	uxtb	r3, r3
 8009388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800938a:	78fb      	ldrb	r3, [r7, #3]
 800938c:	b2db      	uxtb	r3, r3
 800938e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009392:	2b80      	cmp	r3, #128	; 0x80
 8009394:	d0ef      	beq.n	8009376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009396:	4b27      	ldr	r3, [pc, #156]	; (8009434 <xPortStartScheduler+0x134>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f1c3 0307 	rsb	r3, r3, #7
 800939e:	2b04      	cmp	r3, #4
 80093a0:	d00a      	beq.n	80093b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	60bb      	str	r3, [r7, #8]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093b8:	4b1e      	ldr	r3, [pc, #120]	; (8009434 <xPortStartScheduler+0x134>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	021b      	lsls	r3, r3, #8
 80093be:	4a1d      	ldr	r2, [pc, #116]	; (8009434 <xPortStartScheduler+0x134>)
 80093c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093c2:	4b1c      	ldr	r3, [pc, #112]	; (8009434 <xPortStartScheduler+0x134>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093ca:	4a1a      	ldr	r2, [pc, #104]	; (8009434 <xPortStartScheduler+0x134>)
 80093cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093d6:	4b18      	ldr	r3, [pc, #96]	; (8009438 <xPortStartScheduler+0x138>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a17      	ldr	r2, [pc, #92]	; (8009438 <xPortStartScheduler+0x138>)
 80093dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80093e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093e2:	4b15      	ldr	r3, [pc, #84]	; (8009438 <xPortStartScheduler+0x138>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a14      	ldr	r2, [pc, #80]	; (8009438 <xPortStartScheduler+0x138>)
 80093e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80093ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093ee:	f000 f8dd 	bl	80095ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093f2:	4b12      	ldr	r3, [pc, #72]	; (800943c <xPortStartScheduler+0x13c>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093f8:	f000 f8fc 	bl	80095f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093fc:	4b10      	ldr	r3, [pc, #64]	; (8009440 <xPortStartScheduler+0x140>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a0f      	ldr	r2, [pc, #60]	; (8009440 <xPortStartScheduler+0x140>)
 8009402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009408:	f7ff ff66 	bl	80092d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800940c:	f7fe ff3a 	bl	8008284 <vTaskSwitchContext>
	prvTaskExitError();
 8009410:	f7ff ff1e 	bl	8009250 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	e000ed00 	.word	0xe000ed00
 8009424:	410fc271 	.word	0x410fc271
 8009428:	410fc270 	.word	0x410fc270
 800942c:	e000e400 	.word	0xe000e400
 8009430:	2400161c 	.word	0x2400161c
 8009434:	24001620 	.word	0x24001620
 8009438:	e000ed20 	.word	0xe000ed20
 800943c:	24000024 	.word	0x24000024
 8009440:	e000ef34 	.word	0xe000ef34

08009444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	607b      	str	r3, [r7, #4]
}
 800945c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800945e:	4b0f      	ldr	r3, [pc, #60]	; (800949c <vPortEnterCritical+0x58>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3301      	adds	r3, #1
 8009464:	4a0d      	ldr	r2, [pc, #52]	; (800949c <vPortEnterCritical+0x58>)
 8009466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009468:	4b0c      	ldr	r3, [pc, #48]	; (800949c <vPortEnterCritical+0x58>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d10f      	bne.n	8009490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <vPortEnterCritical+0x5c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00a      	beq.n	8009490 <vPortEnterCritical+0x4c>
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	603b      	str	r3, [r7, #0]
}
 800948c:	bf00      	nop
 800948e:	e7fe      	b.n	800948e <vPortEnterCritical+0x4a>
	}
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	24000024 	.word	0x24000024
 80094a0:	e000ed04 	.word	0xe000ed04

080094a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094aa:	4b12      	ldr	r3, [pc, #72]	; (80094f4 <vPortExitCritical+0x50>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10a      	bne.n	80094c8 <vPortExitCritical+0x24>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	607b      	str	r3, [r7, #4]
}
 80094c4:	bf00      	nop
 80094c6:	e7fe      	b.n	80094c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094c8:	4b0a      	ldr	r3, [pc, #40]	; (80094f4 <vPortExitCritical+0x50>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3b01      	subs	r3, #1
 80094ce:	4a09      	ldr	r2, [pc, #36]	; (80094f4 <vPortExitCritical+0x50>)
 80094d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094d2:	4b08      	ldr	r3, [pc, #32]	; (80094f4 <vPortExitCritical+0x50>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d105      	bne.n	80094e6 <vPortExitCritical+0x42>
 80094da:	2300      	movs	r3, #0
 80094dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	f383 8811 	msr	BASEPRI, r3
}
 80094e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	24000024 	.word	0x24000024
	...

08009500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009500:	f3ef 8009 	mrs	r0, PSP
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	4b15      	ldr	r3, [pc, #84]	; (8009560 <pxCurrentTCBConst>)
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	f01e 0f10 	tst.w	lr, #16
 8009510:	bf08      	it	eq
 8009512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951a:	6010      	str	r0, [r2, #0]
 800951c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009524:	f380 8811 	msr	BASEPRI, r0
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f7fe fea8 	bl	8008284 <vTaskSwitchContext>
 8009534:	f04f 0000 	mov.w	r0, #0
 8009538:	f380 8811 	msr	BASEPRI, r0
 800953c:	bc09      	pop	{r0, r3}
 800953e:	6819      	ldr	r1, [r3, #0]
 8009540:	6808      	ldr	r0, [r1, #0]
 8009542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009546:	f01e 0f10 	tst.w	lr, #16
 800954a:	bf08      	it	eq
 800954c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009550:	f380 8809 	msr	PSP, r0
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	f3af 8000 	nop.w

08009560 <pxCurrentTCBConst>:
 8009560:	24000ff0 	.word	0x24000ff0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop

08009568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	607b      	str	r3, [r7, #4]
}
 8009580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009582:	f7fe fdc5 	bl	8008110 <xTaskIncrementTick>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d003      	beq.n	8009594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800958c:	4b06      	ldr	r3, [pc, #24]	; (80095a8 <xPortSysTickHandler+0x40>)
 800958e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	2300      	movs	r3, #0
 8009596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	f383 8811 	msr	BASEPRI, r3
}
 800959e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	e000ed04 	.word	0xe000ed04

080095ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095b0:	4b0b      	ldr	r3, [pc, #44]	; (80095e0 <vPortSetupTimerInterrupt+0x34>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095b6:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <vPortSetupTimerInterrupt+0x38>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095bc:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <vPortSetupTimerInterrupt+0x3c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a0a      	ldr	r2, [pc, #40]	; (80095ec <vPortSetupTimerInterrupt+0x40>)
 80095c2:	fba2 2303 	umull	r2, r3, r2, r3
 80095c6:	099b      	lsrs	r3, r3, #6
 80095c8:	4a09      	ldr	r2, [pc, #36]	; (80095f0 <vPortSetupTimerInterrupt+0x44>)
 80095ca:	3b01      	subs	r3, #1
 80095cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095ce:	4b04      	ldr	r3, [pc, #16]	; (80095e0 <vPortSetupTimerInterrupt+0x34>)
 80095d0:	2207      	movs	r2, #7
 80095d2:	601a      	str	r2, [r3, #0]
}
 80095d4:	bf00      	nop
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	e000e010 	.word	0xe000e010
 80095e4:	e000e018 	.word	0xe000e018
 80095e8:	24000000 	.word	0x24000000
 80095ec:	10624dd3 	.word	0x10624dd3
 80095f0:	e000e014 	.word	0xe000e014

080095f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009604 <vPortEnableVFP+0x10>
 80095f8:	6801      	ldr	r1, [r0, #0]
 80095fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80095fe:	6001      	str	r1, [r0, #0]
 8009600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009602:	bf00      	nop
 8009604:	e000ed88 	.word	0xe000ed88

08009608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800960e:	f3ef 8305 	mrs	r3, IPSR
 8009612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b0f      	cmp	r3, #15
 8009618:	d914      	bls.n	8009644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800961a:	4a17      	ldr	r2, [pc, #92]	; (8009678 <vPortValidateInterruptPriority+0x70>)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009624:	4b15      	ldr	r3, [pc, #84]	; (800967c <vPortValidateInterruptPriority+0x74>)
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	7afa      	ldrb	r2, [r7, #11]
 800962a:	429a      	cmp	r2, r3
 800962c:	d20a      	bcs.n	8009644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	607b      	str	r3, [r7, #4]
}
 8009640:	bf00      	nop
 8009642:	e7fe      	b.n	8009642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009644:	4b0e      	ldr	r3, [pc, #56]	; (8009680 <vPortValidateInterruptPriority+0x78>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800964c:	4b0d      	ldr	r3, [pc, #52]	; (8009684 <vPortValidateInterruptPriority+0x7c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	429a      	cmp	r2, r3
 8009652:	d90a      	bls.n	800966a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	603b      	str	r3, [r7, #0]
}
 8009666:	bf00      	nop
 8009668:	e7fe      	b.n	8009668 <vPortValidateInterruptPriority+0x60>
	}
 800966a:	bf00      	nop
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	e000e3f0 	.word	0xe000e3f0
 800967c:	2400161c 	.word	0x2400161c
 8009680:	e000ed0c 	.word	0xe000ed0c
 8009684:	24001620 	.word	0x24001620

08009688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08a      	sub	sp, #40	; 0x28
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009690:	2300      	movs	r3, #0
 8009692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009694:	f7fe fc6e 	bl	8007f74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009698:	4b5b      	ldr	r3, [pc, #364]	; (8009808 <pvPortMalloc+0x180>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80096a0:	f000 f920 	bl	80098e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80096a4:	4b59      	ldr	r3, [pc, #356]	; (800980c <pvPortMalloc+0x184>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4013      	ands	r3, r2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f040 8093 	bne.w	80097d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01d      	beq.n	80096f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80096b8:	2208      	movs	r2, #8
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4413      	add	r3, r2
 80096be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f003 0307 	and.w	r3, r3, #7
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d014      	beq.n	80096f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f023 0307 	bic.w	r3, r3, #7
 80096d0:	3308      	adds	r3, #8
 80096d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f003 0307 	and.w	r3, r3, #7
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <pvPortMalloc+0x6c>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	617b      	str	r3, [r7, #20]
}
 80096f0:	bf00      	nop
 80096f2:	e7fe      	b.n	80096f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d06e      	beq.n	80097d8 <pvPortMalloc+0x150>
 80096fa:	4b45      	ldr	r3, [pc, #276]	; (8009810 <pvPortMalloc+0x188>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	429a      	cmp	r2, r3
 8009702:	d869      	bhi.n	80097d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009704:	4b43      	ldr	r3, [pc, #268]	; (8009814 <pvPortMalloc+0x18c>)
 8009706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009708:	4b42      	ldr	r3, [pc, #264]	; (8009814 <pvPortMalloc+0x18c>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800970e:	e004      	b.n	800971a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	429a      	cmp	r2, r3
 8009722:	d903      	bls.n	800972c <pvPortMalloc+0xa4>
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1f1      	bne.n	8009710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800972c:	4b36      	ldr	r3, [pc, #216]	; (8009808 <pvPortMalloc+0x180>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009732:	429a      	cmp	r2, r3
 8009734:	d050      	beq.n	80097d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2208      	movs	r2, #8
 800973c:	4413      	add	r3, r2
 800973e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	1ad2      	subs	r2, r2, r3
 8009750:	2308      	movs	r3, #8
 8009752:	005b      	lsls	r3, r3, #1
 8009754:	429a      	cmp	r2, r3
 8009756:	d91f      	bls.n	8009798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4413      	add	r3, r2
 800975e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00a      	beq.n	8009780 <pvPortMalloc+0xf8>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	613b      	str	r3, [r7, #16]
}
 800977c:	bf00      	nop
 800977e:	e7fe      	b.n	800977e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	1ad2      	subs	r2, r2, r3
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009792:	69b8      	ldr	r0, [r7, #24]
 8009794:	f000 f908 	bl	80099a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009798:	4b1d      	ldr	r3, [pc, #116]	; (8009810 <pvPortMalloc+0x188>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	4a1b      	ldr	r2, [pc, #108]	; (8009810 <pvPortMalloc+0x188>)
 80097a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80097a6:	4b1a      	ldr	r3, [pc, #104]	; (8009810 <pvPortMalloc+0x188>)
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	4b1b      	ldr	r3, [pc, #108]	; (8009818 <pvPortMalloc+0x190>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d203      	bcs.n	80097ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097b2:	4b17      	ldr	r3, [pc, #92]	; (8009810 <pvPortMalloc+0x188>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a18      	ldr	r2, [pc, #96]	; (8009818 <pvPortMalloc+0x190>)
 80097b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	685a      	ldr	r2, [r3, #4]
 80097be:	4b13      	ldr	r3, [pc, #76]	; (800980c <pvPortMalloc+0x184>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	431a      	orrs	r2, r3
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	2200      	movs	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80097ce:	4b13      	ldr	r3, [pc, #76]	; (800981c <pvPortMalloc+0x194>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3301      	adds	r3, #1
 80097d4:	4a11      	ldr	r2, [pc, #68]	; (800981c <pvPortMalloc+0x194>)
 80097d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097d8:	f7fe fbda 	bl	8007f90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	f003 0307 	and.w	r3, r3, #7
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00a      	beq.n	80097fc <pvPortMalloc+0x174>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	60fb      	str	r3, [r7, #12]
}
 80097f8:	bf00      	nop
 80097fa:	e7fe      	b.n	80097fa <pvPortMalloc+0x172>
	return pvReturn;
 80097fc:	69fb      	ldr	r3, [r7, #28]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3728      	adds	r7, #40	; 0x28
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	2400b62c 	.word	0x2400b62c
 800980c:	2400b640 	.word	0x2400b640
 8009810:	2400b630 	.word	0x2400b630
 8009814:	2400b624 	.word	0x2400b624
 8009818:	2400b634 	.word	0x2400b634
 800981c:	2400b638 	.word	0x2400b638

08009820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d04d      	beq.n	80098ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009832:	2308      	movs	r3, #8
 8009834:	425b      	negs	r3, r3
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	4413      	add	r3, r2
 800983a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	4b24      	ldr	r3, [pc, #144]	; (80098d8 <vPortFree+0xb8>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4013      	ands	r3, r2
 800984a:	2b00      	cmp	r3, #0
 800984c:	d10a      	bne.n	8009864 <vPortFree+0x44>
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	60fb      	str	r3, [r7, #12]
}
 8009860:	bf00      	nop
 8009862:	e7fe      	b.n	8009862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00a      	beq.n	8009882 <vPortFree+0x62>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	60bb      	str	r3, [r7, #8]
}
 800987e:	bf00      	nop
 8009880:	e7fe      	b.n	8009880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	4b14      	ldr	r3, [pc, #80]	; (80098d8 <vPortFree+0xb8>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4013      	ands	r3, r2
 800988c:	2b00      	cmp	r3, #0
 800988e:	d01e      	beq.n	80098ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d11a      	bne.n	80098ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	4b0e      	ldr	r3, [pc, #56]	; (80098d8 <vPortFree+0xb8>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	43db      	mvns	r3, r3
 80098a2:	401a      	ands	r2, r3
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098a8:	f7fe fb64 	bl	8007f74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <vPortFree+0xbc>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4413      	add	r3, r2
 80098b6:	4a09      	ldr	r2, [pc, #36]	; (80098dc <vPortFree+0xbc>)
 80098b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098ba:	6938      	ldr	r0, [r7, #16]
 80098bc:	f000 f874 	bl	80099a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <vPortFree+0xc0>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3301      	adds	r3, #1
 80098c6:	4a06      	ldr	r2, [pc, #24]	; (80098e0 <vPortFree+0xc0>)
 80098c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80098ca:	f7fe fb61 	bl	8007f90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098ce:	bf00      	nop
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	2400b640 	.word	0x2400b640
 80098dc:	2400b630 	.word	0x2400b630
 80098e0:	2400b63c 	.word	0x2400b63c

080098e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098ea:	f649 73fe 	movw	r3, #40958	; 0x9ffe
 80098ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098f0:	4b27      	ldr	r3, [pc, #156]	; (8009990 <prvHeapInit+0xac>)
 80098f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f003 0307 	and.w	r3, r3, #7
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00c      	beq.n	8009918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3307      	adds	r3, #7
 8009902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f023 0307 	bic.w	r3, r3, #7
 800990a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	4a1f      	ldr	r2, [pc, #124]	; (8009990 <prvHeapInit+0xac>)
 8009914:	4413      	add	r3, r2
 8009916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800991c:	4a1d      	ldr	r2, [pc, #116]	; (8009994 <prvHeapInit+0xb0>)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009922:	4b1c      	ldr	r3, [pc, #112]	; (8009994 <prvHeapInit+0xb0>)
 8009924:	2200      	movs	r2, #0
 8009926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	4413      	add	r3, r2
 800992e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009930:	2208      	movs	r2, #8
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	1a9b      	subs	r3, r3, r2
 8009936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f023 0307 	bic.w	r3, r3, #7
 800993e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	4a15      	ldr	r2, [pc, #84]	; (8009998 <prvHeapInit+0xb4>)
 8009944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009946:	4b14      	ldr	r3, [pc, #80]	; (8009998 <prvHeapInit+0xb4>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2200      	movs	r2, #0
 800994c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800994e:	4b12      	ldr	r3, [pc, #72]	; (8009998 <prvHeapInit+0xb4>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	1ad2      	subs	r2, r2, r3
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009964:	4b0c      	ldr	r3, [pc, #48]	; (8009998 <prvHeapInit+0xb4>)
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	4a0a      	ldr	r2, [pc, #40]	; (800999c <prvHeapInit+0xb8>)
 8009972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	4a09      	ldr	r2, [pc, #36]	; (80099a0 <prvHeapInit+0xbc>)
 800997a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800997c:	4b09      	ldr	r3, [pc, #36]	; (80099a4 <prvHeapInit+0xc0>)
 800997e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009982:	601a      	str	r2, [r3, #0]
}
 8009984:	bf00      	nop
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	24001624 	.word	0x24001624
 8009994:	2400b624 	.word	0x2400b624
 8009998:	2400b62c 	.word	0x2400b62c
 800999c:	2400b634 	.word	0x2400b634
 80099a0:	2400b630 	.word	0x2400b630
 80099a4:	2400b640 	.word	0x2400b640

080099a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099b0:	4b28      	ldr	r3, [pc, #160]	; (8009a54 <prvInsertBlockIntoFreeList+0xac>)
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	e002      	b.n	80099bc <prvInsertBlockIntoFreeList+0x14>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	60fb      	str	r3, [r7, #12]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d8f7      	bhi.n	80099b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	4413      	add	r3, r2
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d108      	bne.n	80099ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	441a      	add	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	441a      	add	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d118      	bne.n	8009a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	4b15      	ldr	r3, [pc, #84]	; (8009a58 <prvInsertBlockIntoFreeList+0xb0>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d00d      	beq.n	8009a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	441a      	add	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	e008      	b.n	8009a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a26:	4b0c      	ldr	r3, [pc, #48]	; (8009a58 <prvInsertBlockIntoFreeList+0xb0>)
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	601a      	str	r2, [r3, #0]
 8009a2e:	e003      	b.n	8009a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d002      	beq.n	8009a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a46:	bf00      	nop
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	2400b624 	.word	0x2400b624
 8009a58:	2400b62c 	.word	0x2400b62c

08009a5c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009a66:	f007 fb29 	bl	80110bc <sys_timeouts_sleeptime>
 8009a6a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a72:	d10b      	bne.n	8009a8c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009a74:	4813      	ldr	r0, [pc, #76]	; (8009ac4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009a76:	f00a fbaa 	bl	80141ce <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f00a fb32 	bl	80140e8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009a84:	480f      	ldr	r0, [pc, #60]	; (8009ac4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009a86:	f00a fb93 	bl	80141b0 <sys_mutex_lock>
    return;
 8009a8a:	e018      	b.n	8009abe <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d102      	bne.n	8009a98 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009a92:	f007 fad9 	bl	8011048 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009a96:	e7e6      	b.n	8009a66 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009a98:	480a      	ldr	r0, [pc, #40]	; (8009ac4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009a9a:	f00a fb98 	bl	80141ce <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f00a fb20 	bl	80140e8 <sys_arch_mbox_fetch>
 8009aa8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009aaa:	4806      	ldr	r0, [pc, #24]	; (8009ac4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009aac:	f00a fb80 	bl	80141b0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ab6:	d102      	bne.n	8009abe <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009ab8:	f007 fac6 	bl	8011048 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009abc:	e7d3      	b.n	8009a66 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	2400bda8 	.word	0x2400bda8

08009ac8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009ad0:	4810      	ldr	r0, [pc, #64]	; (8009b14 <tcpip_thread+0x4c>)
 8009ad2:	f00a fb6d 	bl	80141b0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009ad6:	4b10      	ldr	r3, [pc, #64]	; (8009b18 <tcpip_thread+0x50>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d005      	beq.n	8009aea <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009ade:	4b0e      	ldr	r3, [pc, #56]	; (8009b18 <tcpip_thread+0x50>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a0e      	ldr	r2, [pc, #56]	; (8009b1c <tcpip_thread+0x54>)
 8009ae4:	6812      	ldr	r2, [r2, #0]
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009aea:	f107 030c 	add.w	r3, r7, #12
 8009aee:	4619      	mov	r1, r3
 8009af0:	480b      	ldr	r0, [pc, #44]	; (8009b20 <tcpip_thread+0x58>)
 8009af2:	f7ff ffb3 	bl	8009a5c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d106      	bne.n	8009b0a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009afc:	4b09      	ldr	r3, [pc, #36]	; (8009b24 <tcpip_thread+0x5c>)
 8009afe:	2291      	movs	r2, #145	; 0x91
 8009b00:	4909      	ldr	r1, [pc, #36]	; (8009b28 <tcpip_thread+0x60>)
 8009b02:	480a      	ldr	r0, [pc, #40]	; (8009b2c <tcpip_thread+0x64>)
 8009b04:	f00e f8fe 	bl	8017d04 <iprintf>
      continue;
 8009b08:	e003      	b.n	8009b12 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 f80f 	bl	8009b30 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009b12:	e7ea      	b.n	8009aea <tcpip_thread+0x22>
 8009b14:	2400bda8 	.word	0x2400bda8
 8009b18:	2400b644 	.word	0x2400b644
 8009b1c:	2400b648 	.word	0x2400b648
 8009b20:	2400b64c 	.word	0x2400b64c
 8009b24:	0801aab8 	.word	0x0801aab8
 8009b28:	0801aae8 	.word	0x0801aae8
 8009b2c:	0801ab08 	.word	0x0801ab08

08009b30 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d84f      	bhi.n	8009be0 <tcpip_thread_handle_msg+0xb0>
 8009b40:	a201      	add	r2, pc, #4	; (adr r2, 8009b48 <tcpip_thread_handle_msg+0x18>)
 8009b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b46:	bf00      	nop
 8009b48:	08009b5d 	.word	0x08009b5d
 8009b4c:	08009b87 	.word	0x08009b87
 8009b50:	08009ba3 	.word	0x08009ba3
 8009b54:	08009bbd 	.word	0x08009bbd
 8009b58:	08009bd3 	.word	0x08009bd3
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	6850      	ldr	r0, [r2, #4]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	6892      	ldr	r2, [r2, #8]
 8009b68:	4611      	mov	r1, r2
 8009b6a:	4798      	blx	r3
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d004      	beq.n	8009b7c <tcpip_thread_handle_msg+0x4c>
        pbuf_free(msg->msg.inp.p);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f001 fd22 	bl	800b5c0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009b7c:	6879      	ldr	r1, [r7, #4]
 8009b7e:	2009      	movs	r0, #9
 8009b80:	f000 fe7a 	bl	800a878 <memp_free>
      break;
 8009b84:	e033      	b.n	8009bee <tcpip_thread_handle_msg+0xbe>
#endif /* !LWIP_TCPIP_CORE_LOCKING_INPUT */

#if LWIP_TCPIP_TIMEOUT && LWIP_TIMERS
    case TCPIP_MSG_TIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6858      	ldr	r0, [r3, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6899      	ldr	r1, [r3, #8]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	461a      	mov	r2, r3
 8009b94:	f007 f9f8 	bl	8010f88 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009b98:	6879      	ldr	r1, [r7, #4]
 8009b9a:	2008      	movs	r0, #8
 8009b9c:	f000 fe6c 	bl	800a878 <memp_free>
      break;
 8009ba0:	e025      	b.n	8009bee <tcpip_thread_handle_msg+0xbe>
    case TCPIP_MSG_UNTIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	4619      	mov	r1, r3
 8009bac:	4610      	mov	r0, r2
 8009bae:	f007 fa11 	bl	8010fd4 <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	2008      	movs	r0, #8
 8009bb6:	f000 fe5f 	bl	800a878 <memp_free>
      break;
 8009bba:	e018      	b.n	8009bee <tcpip_thread_handle_msg+0xbe>
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6892      	ldr	r2, [r2, #8]
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	2008      	movs	r0, #8
 8009bcc:	f000 fe54 	bl	800a878 <memp_free>
      break;
 8009bd0:	e00d      	b.n	8009bee <tcpip_thread_handle_msg+0xbe>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	6892      	ldr	r2, [r2, #8]
 8009bda:	4610      	mov	r0, r2
 8009bdc:	4798      	blx	r3
      break;
 8009bde:	e006      	b.n	8009bee <tcpip_thread_handle_msg+0xbe>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009be0:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <tcpip_thread_handle_msg+0xc8>)
 8009be2:	22cf      	movs	r2, #207	; 0xcf
 8009be4:	4905      	ldr	r1, [pc, #20]	; (8009bfc <tcpip_thread_handle_msg+0xcc>)
 8009be6:	4806      	ldr	r0, [pc, #24]	; (8009c00 <tcpip_thread_handle_msg+0xd0>)
 8009be8:	f00e f88c 	bl	8017d04 <iprintf>
      break;
 8009bec:	bf00      	nop
  }
}
 8009bee:	bf00      	nop
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	0801aab8 	.word	0x0801aab8
 8009bfc:	0801aae8 	.word	0x0801aae8
 8009c00:	0801ab08 	.word	0x0801ab08

08009c04 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009c10:	481a      	ldr	r0, [pc, #104]	; (8009c7c <tcpip_inpkt+0x78>)
 8009c12:	f00a fa9a 	bl	801414a <sys_mbox_valid>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d105      	bne.n	8009c28 <tcpip_inpkt+0x24>
 8009c1c:	4b18      	ldr	r3, [pc, #96]	; (8009c80 <tcpip_inpkt+0x7c>)
 8009c1e:	22fc      	movs	r2, #252	; 0xfc
 8009c20:	4918      	ldr	r1, [pc, #96]	; (8009c84 <tcpip_inpkt+0x80>)
 8009c22:	4819      	ldr	r0, [pc, #100]	; (8009c88 <tcpip_inpkt+0x84>)
 8009c24:	f00e f86e 	bl	8017d04 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009c28:	2009      	movs	r0, #9
 8009c2a:	f000 fdaf 	bl	800a78c <memp_malloc>
 8009c2e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d102      	bne.n	8009c3c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c3a:	e01a      	b.n	8009c72 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009c54:	6979      	ldr	r1, [r7, #20]
 8009c56:	4809      	ldr	r0, [pc, #36]	; (8009c7c <tcpip_inpkt+0x78>)
 8009c58:	f00a fa2c 	bl	80140b4 <sys_mbox_trypost>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d006      	beq.n	8009c70 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009c62:	6979      	ldr	r1, [r7, #20]
 8009c64:	2009      	movs	r0, #9
 8009c66:	f000 fe07 	bl	800a878 <memp_free>
    return ERR_MEM;
 8009c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c6e:	e000      	b.n	8009c72 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009c70:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	2400b64c 	.word	0x2400b64c
 8009c80:	0801aab8 	.word	0x0801aab8
 8009c84:	0801ab30 	.word	0x0801ab30
 8009c88:	0801ab08 	.word	0x0801ab08

08009c8c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c9c:	f003 0318 	and.w	r3, r3, #24
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d006      	beq.n	8009cb2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009ca4:	4a08      	ldr	r2, [pc, #32]	; (8009cc8 <tcpip_input+0x3c>)
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7ff ffab 	bl	8009c04 <tcpip_inpkt>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	e005      	b.n	8009cbe <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009cb2:	4a06      	ldr	r2, [pc, #24]	; (8009ccc <tcpip_input+0x40>)
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7ff ffa4 	bl	8009c04 <tcpip_inpkt>
 8009cbc:	4603      	mov	r3, r0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	08013ed5 	.word	0x08013ed5
 8009ccc:	08012de9 	.word	0x08012de9

08009cd0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009cda:	4819      	ldr	r0, [pc, #100]	; (8009d40 <tcpip_try_callback+0x70>)
 8009cdc:	f00a fa35 	bl	801414a <sys_mbox_valid>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d106      	bne.n	8009cf4 <tcpip_try_callback+0x24>
 8009ce6:	4b17      	ldr	r3, [pc, #92]	; (8009d44 <tcpip_try_callback+0x74>)
 8009ce8:	f240 125d 	movw	r2, #349	; 0x15d
 8009cec:	4916      	ldr	r1, [pc, #88]	; (8009d48 <tcpip_try_callback+0x78>)
 8009cee:	4817      	ldr	r0, [pc, #92]	; (8009d4c <tcpip_try_callback+0x7c>)
 8009cf0:	f00e f808 	bl	8017d04 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009cf4:	2008      	movs	r0, #8
 8009cf6:	f000 fd49 	bl	800a78c <memp_malloc>
 8009cfa:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d102      	bne.n	8009d08 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d06:	e017      	b.n	8009d38 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2203      	movs	r2, #3
 8009d0c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009d1a:	68f9      	ldr	r1, [r7, #12]
 8009d1c:	4808      	ldr	r0, [pc, #32]	; (8009d40 <tcpip_try_callback+0x70>)
 8009d1e:	f00a f9c9 	bl	80140b4 <sys_mbox_trypost>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d006      	beq.n	8009d36 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009d28:	68f9      	ldr	r1, [r7, #12]
 8009d2a:	2008      	movs	r0, #8
 8009d2c:	f000 fda4 	bl	800a878 <memp_free>
    return ERR_MEM;
 8009d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d34:	e000      	b.n	8009d38 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	2400b64c 	.word	0x2400b64c
 8009d44:	0801aab8 	.word	0x0801aab8
 8009d48:	0801ab30 	.word	0x0801ab30
 8009d4c:	0801ab08 	.word	0x0801ab08

08009d50 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009d5a:	f000 f871 	bl	8009e40 <lwip_init>

  tcpip_init_done = initfunc;
 8009d5e:	4a17      	ldr	r2, [pc, #92]	; (8009dbc <tcpip_init+0x6c>)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009d64:	4a16      	ldr	r2, [pc, #88]	; (8009dc0 <tcpip_init+0x70>)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009d6a:	2106      	movs	r1, #6
 8009d6c:	4815      	ldr	r0, [pc, #84]	; (8009dc4 <tcpip_init+0x74>)
 8009d6e:	f00a f987 	bl	8014080 <sys_mbox_new>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d006      	beq.n	8009d86 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009d78:	4b13      	ldr	r3, [pc, #76]	; (8009dc8 <tcpip_init+0x78>)
 8009d7a:	f240 2261 	movw	r2, #609	; 0x261
 8009d7e:	4913      	ldr	r1, [pc, #76]	; (8009dcc <tcpip_init+0x7c>)
 8009d80:	4813      	ldr	r0, [pc, #76]	; (8009dd0 <tcpip_init+0x80>)
 8009d82:	f00d ffbf 	bl	8017d04 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009d86:	4813      	ldr	r0, [pc, #76]	; (8009dd4 <tcpip_init+0x84>)
 8009d88:	f00a f9fc 	bl	8014184 <sys_mutex_new>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d006      	beq.n	8009da0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009d92:	4b0d      	ldr	r3, [pc, #52]	; (8009dc8 <tcpip_init+0x78>)
 8009d94:	f240 2265 	movw	r2, #613	; 0x265
 8009d98:	490f      	ldr	r1, [pc, #60]	; (8009dd8 <tcpip_init+0x88>)
 8009d9a:	480d      	ldr	r0, [pc, #52]	; (8009dd0 <tcpip_init+0x80>)
 8009d9c:	f00d ffb2 	bl	8017d04 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009da0:	2318      	movs	r3, #24
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009da8:	2200      	movs	r2, #0
 8009daa:	490c      	ldr	r1, [pc, #48]	; (8009ddc <tcpip_init+0x8c>)
 8009dac:	480c      	ldr	r0, [pc, #48]	; (8009de0 <tcpip_init+0x90>)
 8009dae:	f00a fa1b 	bl	80141e8 <sys_thread_new>
}
 8009db2:	bf00      	nop
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	2400b644 	.word	0x2400b644
 8009dc0:	2400b648 	.word	0x2400b648
 8009dc4:	2400b64c 	.word	0x2400b64c
 8009dc8:	0801aab8 	.word	0x0801aab8
 8009dcc:	0801ab40 	.word	0x0801ab40
 8009dd0:	0801ab08 	.word	0x0801ab08
 8009dd4:	2400bda8 	.word	0x2400bda8
 8009dd8:	0801ab64 	.word	0x0801ab64
 8009ddc:	08009ac9 	.word	0x08009ac9
 8009de0:	0801ab88 	.word	0x0801ab88

08009de4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009dee:	88fb      	ldrh	r3, [r7, #6]
 8009df0:	021b      	lsls	r3, r3, #8
 8009df2:	b21a      	sxth	r2, r3
 8009df4:	88fb      	ldrh	r3, [r7, #6]
 8009df6:	0a1b      	lsrs	r3, r3, #8
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	b21b      	sxth	r3, r3
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	b21b      	sxth	r3, r3
 8009e00:	b29b      	uxth	r3, r3
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b083      	sub	sp, #12
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	061a      	lsls	r2, r3, #24
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	021b      	lsls	r3, r3, #8
 8009e1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e22:	431a      	orrs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	0a1b      	lsrs	r3, r3, #8
 8009e28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009e2c:	431a      	orrs	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	0e1b      	lsrs	r3, r3, #24
 8009e32:	4313      	orrs	r3, r2
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009e4a:	f00a f98f 	bl	801416c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009e4e:	f000 f8d5 	bl	8009ffc <mem_init>
  memp_init();
 8009e52:	f000 fc2d 	bl	800a6b0 <memp_init>
  pbuf_init();
  netif_init();
 8009e56:	f000 fd39 	bl	800a8cc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009e5a:	f007 f967 	bl	801112c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009e5e:	f001 fe59 	bl	800bb14 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009e62:	f007 f86f 	bl	8010f44 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
	...

08009e70 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	4603      	mov	r3, r0
 8009e78:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009e7a:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <ptr_to_mem+0x20>)
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	88fb      	ldrh	r3, [r7, #6]
 8009e80:	4413      	add	r3, r2
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	2400b650 	.word	0x2400b650

08009e94 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009e9c:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <mem_to_ptr+0x20>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	b29b      	uxth	r3, r3
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	2400b650 	.word	0x2400b650

08009eb8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009eb8:	b590      	push	{r4, r7, lr}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009ec0:	4b45      	ldr	r3, [pc, #276]	; (8009fd8 <plug_holes+0x120>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d206      	bcs.n	8009ed8 <plug_holes+0x20>
 8009eca:	4b44      	ldr	r3, [pc, #272]	; (8009fdc <plug_holes+0x124>)
 8009ecc:	f240 12df 	movw	r2, #479	; 0x1df
 8009ed0:	4943      	ldr	r1, [pc, #268]	; (8009fe0 <plug_holes+0x128>)
 8009ed2:	4844      	ldr	r0, [pc, #272]	; (8009fe4 <plug_holes+0x12c>)
 8009ed4:	f00d ff16 	bl	8017d04 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009ed8:	4b43      	ldr	r3, [pc, #268]	; (8009fe8 <plug_holes+0x130>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d306      	bcc.n	8009ef0 <plug_holes+0x38>
 8009ee2:	4b3e      	ldr	r3, [pc, #248]	; (8009fdc <plug_holes+0x124>)
 8009ee4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009ee8:	4940      	ldr	r1, [pc, #256]	; (8009fec <plug_holes+0x134>)
 8009eea:	483e      	ldr	r0, [pc, #248]	; (8009fe4 <plug_holes+0x12c>)
 8009eec:	f00d ff0a 	bl	8017d04 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	791b      	ldrb	r3, [r3, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d006      	beq.n	8009f06 <plug_holes+0x4e>
 8009ef8:	4b38      	ldr	r3, [pc, #224]	; (8009fdc <plug_holes+0x124>)
 8009efa:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009efe:	493c      	ldr	r1, [pc, #240]	; (8009ff0 <plug_holes+0x138>)
 8009f00:	4838      	ldr	r0, [pc, #224]	; (8009fe4 <plug_holes+0x12c>)
 8009f02:	f00d feff 	bl	8017d04 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f0e:	d906      	bls.n	8009f1e <plug_holes+0x66>
 8009f10:	4b32      	ldr	r3, [pc, #200]	; (8009fdc <plug_holes+0x124>)
 8009f12:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009f16:	4937      	ldr	r1, [pc, #220]	; (8009ff4 <plug_holes+0x13c>)
 8009f18:	4832      	ldr	r0, [pc, #200]	; (8009fe4 <plug_holes+0x12c>)
 8009f1a:	f00d fef3 	bl	8017d04 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7ff ffa4 	bl	8009e70 <ptr_to_mem>
 8009f28:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d024      	beq.n	8009f7c <plug_holes+0xc4>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	791b      	ldrb	r3, [r3, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d120      	bne.n	8009f7c <plug_holes+0xc4>
 8009f3a:	4b2b      	ldr	r3, [pc, #172]	; (8009fe8 <plug_holes+0x130>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d01b      	beq.n	8009f7c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009f44:	4b2c      	ldr	r3, [pc, #176]	; (8009ff8 <plug_holes+0x140>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d102      	bne.n	8009f54 <plug_holes+0x9c>
      lfree = mem;
 8009f4e:	4a2a      	ldr	r2, [pc, #168]	; (8009ff8 <plug_holes+0x140>)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	881a      	ldrh	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	881b      	ldrh	r3, [r3, #0]
 8009f60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f64:	d00a      	beq.n	8009f7c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	881b      	ldrh	r3, [r3, #0]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7ff ff80 	bl	8009e70 <ptr_to_mem>
 8009f70:	4604      	mov	r4, r0
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7ff ff8e 	bl	8009e94 <mem_to_ptr>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	885b      	ldrh	r3, [r3, #2]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7ff ff75 	bl	8009e70 <ptr_to_mem>
 8009f86:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d01f      	beq.n	8009fd0 <plug_holes+0x118>
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	791b      	ldrb	r3, [r3, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d11b      	bne.n	8009fd0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009f98:	4b17      	ldr	r3, [pc, #92]	; (8009ff8 <plug_holes+0x140>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d102      	bne.n	8009fa8 <plug_holes+0xf0>
      lfree = pmem;
 8009fa2:	4a15      	ldr	r2, [pc, #84]	; (8009ff8 <plug_holes+0x140>)
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	881a      	ldrh	r2, [r3, #0]
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009fb8:	d00a      	beq.n	8009fd0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7ff ff56 	bl	8009e70 <ptr_to_mem>
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	68b8      	ldr	r0, [r7, #8]
 8009fc8:	f7ff ff64 	bl	8009e94 <mem_to_ptr>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009fd0:	bf00      	nop
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd90      	pop	{r4, r7, pc}
 8009fd8:	2400b650 	.word	0x2400b650
 8009fdc:	0801ab98 	.word	0x0801ab98
 8009fe0:	0801abc8 	.word	0x0801abc8
 8009fe4:	0801abe0 	.word	0x0801abe0
 8009fe8:	2400b654 	.word	0x2400b654
 8009fec:	0801ac08 	.word	0x0801ac08
 8009ff0:	0801ac24 	.word	0x0801ac24
 8009ff4:	0801ac40 	.word	0x0801ac40
 8009ff8:	2400b65c 	.word	0x2400b65c

08009ffc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a002:	4b1d      	ldr	r3, [pc, #116]	; (800a078 <mem_init+0x7c>)
 800a004:	4a1d      	ldr	r2, [pc, #116]	; (800a07c <mem_init+0x80>)
 800a006:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a008:	4b1b      	ldr	r3, [pc, #108]	; (800a078 <mem_init+0x7c>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a014:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a022:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a026:	f7ff ff23 	bl	8009e70 <ptr_to_mem>
 800a02a:	4603      	mov	r3, r0
 800a02c:	4a14      	ldr	r2, [pc, #80]	; (800a080 <mem_init+0x84>)
 800a02e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a030:	4b13      	ldr	r3, [pc, #76]	; (800a080 <mem_init+0x84>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2201      	movs	r2, #1
 800a036:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a038:	4b11      	ldr	r3, [pc, #68]	; (800a080 <mem_init+0x84>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a040:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a042:	4b0f      	ldr	r3, [pc, #60]	; (800a080 <mem_init+0x84>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a04a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a04c:	4b0a      	ldr	r3, [pc, #40]	; (800a078 <mem_init+0x7c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a0c      	ldr	r2, [pc, #48]	; (800a084 <mem_init+0x88>)
 800a052:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a054:	480c      	ldr	r0, [pc, #48]	; (800a088 <mem_init+0x8c>)
 800a056:	f00a f895 	bl	8014184 <sys_mutex_new>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d006      	beq.n	800a06e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a060:	4b0a      	ldr	r3, [pc, #40]	; (800a08c <mem_init+0x90>)
 800a062:	f240 221f 	movw	r2, #543	; 0x21f
 800a066:	490a      	ldr	r1, [pc, #40]	; (800a090 <mem_init+0x94>)
 800a068:	480a      	ldr	r0, [pc, #40]	; (800a094 <mem_init+0x98>)
 800a06a:	f00d fe4b 	bl	8017d04 <iprintf>
  }
}
 800a06e:	bf00      	nop
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	2400b650 	.word	0x2400b650
 800a07c:	30044000 	.word	0x30044000
 800a080:	2400b654 	.word	0x2400b654
 800a084:	2400b65c 	.word	0x2400b65c
 800a088:	2400b658 	.word	0x2400b658
 800a08c:	0801ab98 	.word	0x0801ab98
 800a090:	0801ac6c 	.word	0x0801ac6c
 800a094:	0801abe0 	.word	0x0801abe0

0800a098 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7ff fef7 	bl	8009e94 <mem_to_ptr>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff fede 	bl	8009e70 <ptr_to_mem>
 800a0b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	885b      	ldrh	r3, [r3, #2]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7ff fed8 	bl	8009e70 <ptr_to_mem>
 800a0c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0ca:	d818      	bhi.n	800a0fe <mem_link_valid+0x66>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	885b      	ldrh	r3, [r3, #2]
 800a0d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0d4:	d813      	bhi.n	800a0fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a0da:	8afa      	ldrh	r2, [r7, #22]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d004      	beq.n	800a0ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	8afa      	ldrh	r2, [r7, #22]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d109      	bne.n	800a0fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a0ea:	4b08      	ldr	r3, [pc, #32]	; (800a10c <mem_link_valid+0x74>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d006      	beq.n	800a102 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	885b      	ldrh	r3, [r3, #2]
 800a0f8:	8afa      	ldrh	r2, [r7, #22]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d001      	beq.n	800a102 <mem_link_valid+0x6a>
    return 0;
 800a0fe:	2300      	movs	r3, #0
 800a100:	e000      	b.n	800a104 <mem_link_valid+0x6c>
  }
  return 1;
 800a102:	2301      	movs	r3, #1
}
 800a104:	4618      	mov	r0, r3
 800a106:	3718      	adds	r7, #24
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	2400b654 	.word	0x2400b654

0800a110 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b088      	sub	sp, #32
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d070      	beq.n	800a200 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f003 0303 	and.w	r3, r3, #3
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00d      	beq.n	800a144 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a128:	4b37      	ldr	r3, [pc, #220]	; (800a208 <mem_free+0xf8>)
 800a12a:	f240 2273 	movw	r2, #627	; 0x273
 800a12e:	4937      	ldr	r1, [pc, #220]	; (800a20c <mem_free+0xfc>)
 800a130:	4837      	ldr	r0, [pc, #220]	; (800a210 <mem_free+0x100>)
 800a132:	f00d fde7 	bl	8017d04 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a136:	f00a f877 	bl	8014228 <sys_arch_protect>
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f00a f881 	bl	8014244 <sys_arch_unprotect>
    return;
 800a142:	e05e      	b.n	800a202 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	3b08      	subs	r3, #8
 800a148:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a14a:	4b32      	ldr	r3, [pc, #200]	; (800a214 <mem_free+0x104>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	69fa      	ldr	r2, [r7, #28]
 800a150:	429a      	cmp	r2, r3
 800a152:	d306      	bcc.n	800a162 <mem_free+0x52>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f103 020c 	add.w	r2, r3, #12
 800a15a:	4b2f      	ldr	r3, [pc, #188]	; (800a218 <mem_free+0x108>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d90d      	bls.n	800a17e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a162:	4b29      	ldr	r3, [pc, #164]	; (800a208 <mem_free+0xf8>)
 800a164:	f240 227f 	movw	r2, #639	; 0x27f
 800a168:	492c      	ldr	r1, [pc, #176]	; (800a21c <mem_free+0x10c>)
 800a16a:	4829      	ldr	r0, [pc, #164]	; (800a210 <mem_free+0x100>)
 800a16c:	f00d fdca 	bl	8017d04 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a170:	f00a f85a 	bl	8014228 <sys_arch_protect>
 800a174:	6138      	str	r0, [r7, #16]
 800a176:	6938      	ldr	r0, [r7, #16]
 800a178:	f00a f864 	bl	8014244 <sys_arch_unprotect>
    return;
 800a17c:	e041      	b.n	800a202 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a17e:	4828      	ldr	r0, [pc, #160]	; (800a220 <mem_free+0x110>)
 800a180:	f00a f816 	bl	80141b0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	791b      	ldrb	r3, [r3, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d110      	bne.n	800a1ae <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a18c:	4b1e      	ldr	r3, [pc, #120]	; (800a208 <mem_free+0xf8>)
 800a18e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a192:	4924      	ldr	r1, [pc, #144]	; (800a224 <mem_free+0x114>)
 800a194:	481e      	ldr	r0, [pc, #120]	; (800a210 <mem_free+0x100>)
 800a196:	f00d fdb5 	bl	8017d04 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a19a:	4821      	ldr	r0, [pc, #132]	; (800a220 <mem_free+0x110>)
 800a19c:	f00a f817 	bl	80141ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a1a0:	f00a f842 	bl	8014228 <sys_arch_protect>
 800a1a4:	6178      	str	r0, [r7, #20]
 800a1a6:	6978      	ldr	r0, [r7, #20]
 800a1a8:	f00a f84c 	bl	8014244 <sys_arch_unprotect>
    return;
 800a1ac:	e029      	b.n	800a202 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a1ae:	69f8      	ldr	r0, [r7, #28]
 800a1b0:	f7ff ff72 	bl	800a098 <mem_link_valid>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d110      	bne.n	800a1dc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a1ba:	4b13      	ldr	r3, [pc, #76]	; (800a208 <mem_free+0xf8>)
 800a1bc:	f240 2295 	movw	r2, #661	; 0x295
 800a1c0:	4919      	ldr	r1, [pc, #100]	; (800a228 <mem_free+0x118>)
 800a1c2:	4813      	ldr	r0, [pc, #76]	; (800a210 <mem_free+0x100>)
 800a1c4:	f00d fd9e 	bl	8017d04 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a1c8:	4815      	ldr	r0, [pc, #84]	; (800a220 <mem_free+0x110>)
 800a1ca:	f00a f800 	bl	80141ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a1ce:	f00a f82b 	bl	8014228 <sys_arch_protect>
 800a1d2:	61b8      	str	r0, [r7, #24]
 800a1d4:	69b8      	ldr	r0, [r7, #24]
 800a1d6:	f00a f835 	bl	8014244 <sys_arch_unprotect>
    return;
 800a1da:	e012      	b.n	800a202 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a1e2:	4b12      	ldr	r3, [pc, #72]	; (800a22c <mem_free+0x11c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d202      	bcs.n	800a1f2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a1ec:	4a0f      	ldr	r2, [pc, #60]	; (800a22c <mem_free+0x11c>)
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a1f2:	69f8      	ldr	r0, [r7, #28]
 800a1f4:	f7ff fe60 	bl	8009eb8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a1f8:	4809      	ldr	r0, [pc, #36]	; (800a220 <mem_free+0x110>)
 800a1fa:	f009 ffe8 	bl	80141ce <sys_mutex_unlock>
 800a1fe:	e000      	b.n	800a202 <mem_free+0xf2>
    return;
 800a200:	bf00      	nop
}
 800a202:	3720      	adds	r7, #32
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	0801ab98 	.word	0x0801ab98
 800a20c:	0801ac88 	.word	0x0801ac88
 800a210:	0801abe0 	.word	0x0801abe0
 800a214:	2400b650 	.word	0x2400b650
 800a218:	2400b654 	.word	0x2400b654
 800a21c:	0801acac 	.word	0x0801acac
 800a220:	2400b658 	.word	0x2400b658
 800a224:	0801acc8 	.word	0x0801acc8
 800a228:	0801acf0 	.word	0x0801acf0
 800a22c:	2400b65c 	.word	0x2400b65c

0800a230 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b088      	sub	sp, #32
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a23c:	887b      	ldrh	r3, [r7, #2]
 800a23e:	3303      	adds	r3, #3
 800a240:	b29b      	uxth	r3, r3
 800a242:	f023 0303 	bic.w	r3, r3, #3
 800a246:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a248:	8bfb      	ldrh	r3, [r7, #30]
 800a24a:	2b0b      	cmp	r3, #11
 800a24c:	d801      	bhi.n	800a252 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a24e:	230c      	movs	r3, #12
 800a250:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a252:	8bfb      	ldrh	r3, [r7, #30]
 800a254:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a258:	d803      	bhi.n	800a262 <mem_trim+0x32>
 800a25a:	8bfa      	ldrh	r2, [r7, #30]
 800a25c:	887b      	ldrh	r3, [r7, #2]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d201      	bcs.n	800a266 <mem_trim+0x36>
    return NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	e0d8      	b.n	800a418 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a266:	4b6e      	ldr	r3, [pc, #440]	; (800a420 <mem_trim+0x1f0>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d304      	bcc.n	800a27a <mem_trim+0x4a>
 800a270:	4b6c      	ldr	r3, [pc, #432]	; (800a424 <mem_trim+0x1f4>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	429a      	cmp	r2, r3
 800a278:	d306      	bcc.n	800a288 <mem_trim+0x58>
 800a27a:	4b6b      	ldr	r3, [pc, #428]	; (800a428 <mem_trim+0x1f8>)
 800a27c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a280:	496a      	ldr	r1, [pc, #424]	; (800a42c <mem_trim+0x1fc>)
 800a282:	486b      	ldr	r0, [pc, #428]	; (800a430 <mem_trim+0x200>)
 800a284:	f00d fd3e 	bl	8017d04 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a288:	4b65      	ldr	r3, [pc, #404]	; (800a420 <mem_trim+0x1f0>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d304      	bcc.n	800a29c <mem_trim+0x6c>
 800a292:	4b64      	ldr	r3, [pc, #400]	; (800a424 <mem_trim+0x1f4>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d307      	bcc.n	800a2ac <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a29c:	f009 ffc4 	bl	8014228 <sys_arch_protect>
 800a2a0:	60b8      	str	r0, [r7, #8]
 800a2a2:	68b8      	ldr	r0, [r7, #8]
 800a2a4:	f009 ffce 	bl	8014244 <sys_arch_unprotect>
    return rmem;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	e0b5      	b.n	800a418 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	3b08      	subs	r3, #8
 800a2b0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a2b2:	69b8      	ldr	r0, [r7, #24]
 800a2b4:	f7ff fdee 	bl	8009e94 <mem_to_ptr>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	881a      	ldrh	r2, [r3, #0]
 800a2c0:	8afb      	ldrh	r3, [r7, #22]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	3b08      	subs	r3, #8
 800a2c8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a2ca:	8bfa      	ldrh	r2, [r7, #30]
 800a2cc:	8abb      	ldrh	r3, [r7, #20]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d906      	bls.n	800a2e0 <mem_trim+0xb0>
 800a2d2:	4b55      	ldr	r3, [pc, #340]	; (800a428 <mem_trim+0x1f8>)
 800a2d4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a2d8:	4956      	ldr	r1, [pc, #344]	; (800a434 <mem_trim+0x204>)
 800a2da:	4855      	ldr	r0, [pc, #340]	; (800a430 <mem_trim+0x200>)
 800a2dc:	f00d fd12 	bl	8017d04 <iprintf>
  if (newsize > size) {
 800a2e0:	8bfa      	ldrh	r2, [r7, #30]
 800a2e2:	8abb      	ldrh	r3, [r7, #20]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d901      	bls.n	800a2ec <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	e095      	b.n	800a418 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a2ec:	8bfa      	ldrh	r2, [r7, #30]
 800a2ee:	8abb      	ldrh	r3, [r7, #20]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d101      	bne.n	800a2f8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	e08f      	b.n	800a418 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a2f8:	484f      	ldr	r0, [pc, #316]	; (800a438 <mem_trim+0x208>)
 800a2fa:	f009 ff59 	bl	80141b0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	881b      	ldrh	r3, [r3, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f7ff fdb4 	bl	8009e70 <ptr_to_mem>
 800a308:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	791b      	ldrb	r3, [r3, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d13f      	bne.n	800a392 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a31a:	d106      	bne.n	800a32a <mem_trim+0xfa>
 800a31c:	4b42      	ldr	r3, [pc, #264]	; (800a428 <mem_trim+0x1f8>)
 800a31e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a322:	4946      	ldr	r1, [pc, #280]	; (800a43c <mem_trim+0x20c>)
 800a324:	4842      	ldr	r0, [pc, #264]	; (800a430 <mem_trim+0x200>)
 800a326:	f00d fced 	bl	8017d04 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	881b      	ldrh	r3, [r3, #0]
 800a32e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a330:	8afa      	ldrh	r2, [r7, #22]
 800a332:	8bfb      	ldrh	r3, [r7, #30]
 800a334:	4413      	add	r3, r2
 800a336:	b29b      	uxth	r3, r3
 800a338:	3308      	adds	r3, #8
 800a33a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a33c:	4b40      	ldr	r3, [pc, #256]	; (800a440 <mem_trim+0x210>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	429a      	cmp	r2, r3
 800a344:	d106      	bne.n	800a354 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a346:	89fb      	ldrh	r3, [r7, #14]
 800a348:	4618      	mov	r0, r3
 800a34a:	f7ff fd91 	bl	8009e70 <ptr_to_mem>
 800a34e:	4603      	mov	r3, r0
 800a350:	4a3b      	ldr	r2, [pc, #236]	; (800a440 <mem_trim+0x210>)
 800a352:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a354:	89fb      	ldrh	r3, [r7, #14]
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff fd8a 	bl	8009e70 <ptr_to_mem>
 800a35c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	2200      	movs	r2, #0
 800a362:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	89ba      	ldrh	r2, [r7, #12]
 800a368:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	8afa      	ldrh	r2, [r7, #22]
 800a36e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	89fa      	ldrh	r2, [r7, #14]
 800a374:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a37e:	d047      	beq.n	800a410 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff fd73 	bl	8009e70 <ptr_to_mem>
 800a38a:	4602      	mov	r2, r0
 800a38c:	89fb      	ldrh	r3, [r7, #14]
 800a38e:	8053      	strh	r3, [r2, #2]
 800a390:	e03e      	b.n	800a410 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a392:	8bfb      	ldrh	r3, [r7, #30]
 800a394:	f103 0214 	add.w	r2, r3, #20
 800a398:	8abb      	ldrh	r3, [r7, #20]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d838      	bhi.n	800a410 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a39e:	8afa      	ldrh	r2, [r7, #22]
 800a3a0:	8bfb      	ldrh	r3, [r7, #30]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	3308      	adds	r3, #8
 800a3a8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	881b      	ldrh	r3, [r3, #0]
 800a3ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3b2:	d106      	bne.n	800a3c2 <mem_trim+0x192>
 800a3b4:	4b1c      	ldr	r3, [pc, #112]	; (800a428 <mem_trim+0x1f8>)
 800a3b6:	f240 3216 	movw	r2, #790	; 0x316
 800a3ba:	4920      	ldr	r1, [pc, #128]	; (800a43c <mem_trim+0x20c>)
 800a3bc:	481c      	ldr	r0, [pc, #112]	; (800a430 <mem_trim+0x200>)
 800a3be:	f00d fca1 	bl	8017d04 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a3c2:	89fb      	ldrh	r3, [r7, #14]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff fd53 	bl	8009e70 <ptr_to_mem>
 800a3ca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a3cc:	4b1c      	ldr	r3, [pc, #112]	; (800a440 <mem_trim+0x210>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d202      	bcs.n	800a3dc <mem_trim+0x1ac>
      lfree = mem2;
 800a3d6:	4a1a      	ldr	r2, [pc, #104]	; (800a440 <mem_trim+0x210>)
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	881a      	ldrh	r2, [r3, #0]
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	8afa      	ldrh	r2, [r7, #22]
 800a3ee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	89fa      	ldrh	r2, [r7, #14]
 800a3f4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	881b      	ldrh	r3, [r3, #0]
 800a3fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3fe:	d007      	beq.n	800a410 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	881b      	ldrh	r3, [r3, #0]
 800a404:	4618      	mov	r0, r3
 800a406:	f7ff fd33 	bl	8009e70 <ptr_to_mem>
 800a40a:	4602      	mov	r2, r0
 800a40c:	89fb      	ldrh	r3, [r7, #14]
 800a40e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a410:	4809      	ldr	r0, [pc, #36]	; (800a438 <mem_trim+0x208>)
 800a412:	f009 fedc 	bl	80141ce <sys_mutex_unlock>
  return rmem;
 800a416:	687b      	ldr	r3, [r7, #4]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3720      	adds	r7, #32
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	2400b650 	.word	0x2400b650
 800a424:	2400b654 	.word	0x2400b654
 800a428:	0801ab98 	.word	0x0801ab98
 800a42c:	0801ad24 	.word	0x0801ad24
 800a430:	0801abe0 	.word	0x0801abe0
 800a434:	0801ad3c 	.word	0x0801ad3c
 800a438:	2400b658 	.word	0x2400b658
 800a43c:	0801ad5c 	.word	0x0801ad5c
 800a440:	2400b65c 	.word	0x2400b65c

0800a444 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a44e:	88fb      	ldrh	r3, [r7, #6]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <mem_malloc+0x14>
    return NULL;
 800a454:	2300      	movs	r3, #0
 800a456:	e0e2      	b.n	800a61e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a458:	88fb      	ldrh	r3, [r7, #6]
 800a45a:	3303      	adds	r3, #3
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	f023 0303 	bic.w	r3, r3, #3
 800a462:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a464:	8bbb      	ldrh	r3, [r7, #28]
 800a466:	2b0b      	cmp	r3, #11
 800a468:	d801      	bhi.n	800a46e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a46a:	230c      	movs	r3, #12
 800a46c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a46e:	8bbb      	ldrh	r3, [r7, #28]
 800a470:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a474:	d803      	bhi.n	800a47e <mem_malloc+0x3a>
 800a476:	8bba      	ldrh	r2, [r7, #28]
 800a478:	88fb      	ldrh	r3, [r7, #6]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d201      	bcs.n	800a482 <mem_malloc+0x3e>
    return NULL;
 800a47e:	2300      	movs	r3, #0
 800a480:	e0cd      	b.n	800a61e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a482:	4869      	ldr	r0, [pc, #420]	; (800a628 <mem_malloc+0x1e4>)
 800a484:	f009 fe94 	bl	80141b0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a488:	4b68      	ldr	r3, [pc, #416]	; (800a62c <mem_malloc+0x1e8>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7ff fd01 	bl	8009e94 <mem_to_ptr>
 800a492:	4603      	mov	r3, r0
 800a494:	83fb      	strh	r3, [r7, #30]
 800a496:	e0b7      	b.n	800a608 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a498:	8bfb      	ldrh	r3, [r7, #30]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff fce8 	bl	8009e70 <ptr_to_mem>
 800a4a0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	791b      	ldrb	r3, [r3, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f040 80a7 	bne.w	800a5fa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	8bfb      	ldrh	r3, [r7, #30]
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	f1a3 0208 	sub.w	r2, r3, #8
 800a4ba:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	f0c0 809c 	bcc.w	800a5fa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	881b      	ldrh	r3, [r3, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	8bfb      	ldrh	r3, [r7, #30]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	f1a3 0208 	sub.w	r2, r3, #8
 800a4d0:	8bbb      	ldrh	r3, [r7, #28]
 800a4d2:	3314      	adds	r3, #20
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d333      	bcc.n	800a540 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a4d8:	8bfa      	ldrh	r2, [r7, #30]
 800a4da:	8bbb      	ldrh	r3, [r7, #28]
 800a4dc:	4413      	add	r3, r2
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a4e4:	8a7b      	ldrh	r3, [r7, #18]
 800a4e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4ea:	d106      	bne.n	800a4fa <mem_malloc+0xb6>
 800a4ec:	4b50      	ldr	r3, [pc, #320]	; (800a630 <mem_malloc+0x1ec>)
 800a4ee:	f240 3287 	movw	r2, #903	; 0x387
 800a4f2:	4950      	ldr	r1, [pc, #320]	; (800a634 <mem_malloc+0x1f0>)
 800a4f4:	4850      	ldr	r0, [pc, #320]	; (800a638 <mem_malloc+0x1f4>)
 800a4f6:	f00d fc05 	bl	8017d04 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a4fa:	8a7b      	ldrh	r3, [r7, #18]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7ff fcb7 	bl	8009e70 <ptr_to_mem>
 800a502:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	881a      	ldrh	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	8bfa      	ldrh	r2, [r7, #30]
 800a516:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	8a7a      	ldrh	r2, [r7, #18]
 800a51c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2201      	movs	r2, #1
 800a522:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a52c:	d00b      	beq.n	800a546 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff fc9c 	bl	8009e70 <ptr_to_mem>
 800a538:	4602      	mov	r2, r0
 800a53a:	8a7b      	ldrh	r3, [r7, #18]
 800a53c:	8053      	strh	r3, [r2, #2]
 800a53e:	e002      	b.n	800a546 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	2201      	movs	r2, #1
 800a544:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a546:	4b39      	ldr	r3, [pc, #228]	; (800a62c <mem_malloc+0x1e8>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d127      	bne.n	800a5a0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a550:	4b36      	ldr	r3, [pc, #216]	; (800a62c <mem_malloc+0x1e8>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a556:	e005      	b.n	800a564 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	881b      	ldrh	r3, [r3, #0]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7ff fc87 	bl	8009e70 <ptr_to_mem>
 800a562:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	791b      	ldrb	r3, [r3, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d004      	beq.n	800a576 <mem_malloc+0x132>
 800a56c:	4b33      	ldr	r3, [pc, #204]	; (800a63c <mem_malloc+0x1f8>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	69ba      	ldr	r2, [r7, #24]
 800a572:	429a      	cmp	r2, r3
 800a574:	d1f0      	bne.n	800a558 <mem_malloc+0x114>
          }
          lfree = cur;
 800a576:	4a2d      	ldr	r2, [pc, #180]	; (800a62c <mem_malloc+0x1e8>)
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a57c:	4b2b      	ldr	r3, [pc, #172]	; (800a62c <mem_malloc+0x1e8>)
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	4b2e      	ldr	r3, [pc, #184]	; (800a63c <mem_malloc+0x1f8>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	429a      	cmp	r2, r3
 800a586:	d00b      	beq.n	800a5a0 <mem_malloc+0x15c>
 800a588:	4b28      	ldr	r3, [pc, #160]	; (800a62c <mem_malloc+0x1e8>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	791b      	ldrb	r3, [r3, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d006      	beq.n	800a5a0 <mem_malloc+0x15c>
 800a592:	4b27      	ldr	r3, [pc, #156]	; (800a630 <mem_malloc+0x1ec>)
 800a594:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a598:	4929      	ldr	r1, [pc, #164]	; (800a640 <mem_malloc+0x1fc>)
 800a59a:	4827      	ldr	r0, [pc, #156]	; (800a638 <mem_malloc+0x1f4>)
 800a59c:	f00d fbb2 	bl	8017d04 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a5a0:	4821      	ldr	r0, [pc, #132]	; (800a628 <mem_malloc+0x1e4>)
 800a5a2:	f009 fe14 	bl	80141ce <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a5a6:	8bba      	ldrh	r2, [r7, #28]
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	4a23      	ldr	r2, [pc, #140]	; (800a63c <mem_malloc+0x1f8>)
 800a5b0:	6812      	ldr	r2, [r2, #0]
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d906      	bls.n	800a5c4 <mem_malloc+0x180>
 800a5b6:	4b1e      	ldr	r3, [pc, #120]	; (800a630 <mem_malloc+0x1ec>)
 800a5b8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a5bc:	4921      	ldr	r1, [pc, #132]	; (800a644 <mem_malloc+0x200>)
 800a5be:	481e      	ldr	r0, [pc, #120]	; (800a638 <mem_malloc+0x1f4>)
 800a5c0:	f00d fba0 	bl	8017d04 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f003 0303 	and.w	r3, r3, #3
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d006      	beq.n	800a5dc <mem_malloc+0x198>
 800a5ce:	4b18      	ldr	r3, [pc, #96]	; (800a630 <mem_malloc+0x1ec>)
 800a5d0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a5d4:	491c      	ldr	r1, [pc, #112]	; (800a648 <mem_malloc+0x204>)
 800a5d6:	4818      	ldr	r0, [pc, #96]	; (800a638 <mem_malloc+0x1f4>)
 800a5d8:	f00d fb94 	bl	8017d04 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f003 0303 	and.w	r3, r3, #3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d006      	beq.n	800a5f4 <mem_malloc+0x1b0>
 800a5e6:	4b12      	ldr	r3, [pc, #72]	; (800a630 <mem_malloc+0x1ec>)
 800a5e8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a5ec:	4917      	ldr	r1, [pc, #92]	; (800a64c <mem_malloc+0x208>)
 800a5ee:	4812      	ldr	r0, [pc, #72]	; (800a638 <mem_malloc+0x1f4>)
 800a5f0:	f00d fb88 	bl	8017d04 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	e011      	b.n	800a61e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a5fa:	8bfb      	ldrh	r3, [r7, #30]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff fc37 	bl	8009e70 <ptr_to_mem>
 800a602:	4603      	mov	r3, r0
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a608:	8bfa      	ldrh	r2, [r7, #30]
 800a60a:	8bbb      	ldrh	r3, [r7, #28]
 800a60c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a610:	429a      	cmp	r2, r3
 800a612:	f4ff af41 	bcc.w	800a498 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a616:	4804      	ldr	r0, [pc, #16]	; (800a628 <mem_malloc+0x1e4>)
 800a618:	f009 fdd9 	bl	80141ce <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3720      	adds	r7, #32
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	2400b658 	.word	0x2400b658
 800a62c:	2400b65c 	.word	0x2400b65c
 800a630:	0801ab98 	.word	0x0801ab98
 800a634:	0801ad5c 	.word	0x0801ad5c
 800a638:	0801abe0 	.word	0x0801abe0
 800a63c:	2400b654 	.word	0x2400b654
 800a640:	0801ad70 	.word	0x0801ad70
 800a644:	0801ad8c 	.word	0x0801ad8c
 800a648:	0801adbc 	.word	0x0801adbc
 800a64c:	0801adec 	.word	0x0801adec

0800a650 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	2200      	movs	r2, #0
 800a65e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	3303      	adds	r3, #3
 800a666:	f023 0303 	bic.w	r3, r3, #3
 800a66a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a66c:	2300      	movs	r3, #0
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	e011      	b.n	800a696 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	881b      	ldrh	r3, [r3, #0]
 800a688:	461a      	mov	r2, r3
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	4413      	add	r3, r2
 800a68e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	3301      	adds	r3, #1
 800a694:	60fb      	str	r3, [r7, #12]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	885b      	ldrh	r3, [r3, #2]
 800a69a:	461a      	mov	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	dbe7      	blt.n	800a672 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a6a2:	bf00      	nop
 800a6a4:	bf00      	nop
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	80fb      	strh	r3, [r7, #6]
 800a6ba:	e009      	b.n	800a6d0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a6bc:	88fb      	ldrh	r3, [r7, #6]
 800a6be:	4a08      	ldr	r2, [pc, #32]	; (800a6e0 <memp_init+0x30>)
 800a6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7ff ffc3 	bl	800a650 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a6ca:	88fb      	ldrh	r3, [r7, #6]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	80fb      	strh	r3, [r7, #6]
 800a6d0:	88fb      	ldrh	r3, [r7, #6]
 800a6d2:	2b0c      	cmp	r3, #12
 800a6d4:	d9f2      	bls.n	800a6bc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a6d6:	bf00      	nop
 800a6d8:	bf00      	nop
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	0801d8bc 	.word	0x0801d8bc

0800a6e4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a6ec:	f009 fd9c 	bl	8014228 <sys_arch_protect>
 800a6f0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d015      	beq.n	800a72c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	6812      	ldr	r2, [r2, #0]
 800a708:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	f003 0303 	and.w	r3, r3, #3
 800a710:	2b00      	cmp	r3, #0
 800a712:	d006      	beq.n	800a722 <do_memp_malloc_pool+0x3e>
 800a714:	4b09      	ldr	r3, [pc, #36]	; (800a73c <do_memp_malloc_pool+0x58>)
 800a716:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a71a:	4909      	ldr	r1, [pc, #36]	; (800a740 <do_memp_malloc_pool+0x5c>)
 800a71c:	4809      	ldr	r0, [pc, #36]	; (800a744 <do_memp_malloc_pool+0x60>)
 800a71e:	f00d faf1 	bl	8017d04 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f009 fd8e 	bl	8014244 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	e003      	b.n	800a734 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f009 fd89 	bl	8014244 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	0801ae10 	.word	0x0801ae10
 800a740:	0801ae40 	.word	0x0801ae40
 800a744:	0801ae64 	.word	0x0801ae64

0800a748 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d106      	bne.n	800a764 <memp_malloc_pool+0x1c>
 800a756:	4b0a      	ldr	r3, [pc, #40]	; (800a780 <memp_malloc_pool+0x38>)
 800a758:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a75c:	4909      	ldr	r1, [pc, #36]	; (800a784 <memp_malloc_pool+0x3c>)
 800a75e:	480a      	ldr	r0, [pc, #40]	; (800a788 <memp_malloc_pool+0x40>)
 800a760:	f00d fad0 	bl	8017d04 <iprintf>
  if (desc == NULL) {
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d101      	bne.n	800a76e <memp_malloc_pool+0x26>
    return NULL;
 800a76a:	2300      	movs	r3, #0
 800a76c:	e003      	b.n	800a776 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7ff ffb8 	bl	800a6e4 <do_memp_malloc_pool>
 800a774:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a776:	4618      	mov	r0, r3
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	0801ae10 	.word	0x0801ae10
 800a784:	0801ae8c 	.word	0x0801ae8c
 800a788:	0801ae64 	.word	0x0801ae64

0800a78c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a796:	79fb      	ldrb	r3, [r7, #7]
 800a798:	2b0c      	cmp	r3, #12
 800a79a:	d908      	bls.n	800a7ae <memp_malloc+0x22>
 800a79c:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <memp_malloc+0x3c>)
 800a79e:	f240 1257 	movw	r2, #343	; 0x157
 800a7a2:	490a      	ldr	r1, [pc, #40]	; (800a7cc <memp_malloc+0x40>)
 800a7a4:	480a      	ldr	r0, [pc, #40]	; (800a7d0 <memp_malloc+0x44>)
 800a7a6:	f00d faad 	bl	8017d04 <iprintf>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e008      	b.n	800a7c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a7ae:	79fb      	ldrb	r3, [r7, #7]
 800a7b0:	4a08      	ldr	r2, [pc, #32]	; (800a7d4 <memp_malloc+0x48>)
 800a7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff ff94 	bl	800a6e4 <do_memp_malloc_pool>
 800a7bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a7be:	68fb      	ldr	r3, [r7, #12]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	0801ae10 	.word	0x0801ae10
 800a7cc:	0801aea0 	.word	0x0801aea0
 800a7d0:	0801ae64 	.word	0x0801ae64
 800a7d4:	0801d8bc 	.word	0x0801d8bc

0800a7d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	f003 0303 	and.w	r3, r3, #3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d006      	beq.n	800a7fa <do_memp_free_pool+0x22>
 800a7ec:	4b0d      	ldr	r3, [pc, #52]	; (800a824 <do_memp_free_pool+0x4c>)
 800a7ee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a7f2:	490d      	ldr	r1, [pc, #52]	; (800a828 <do_memp_free_pool+0x50>)
 800a7f4:	480d      	ldr	r0, [pc, #52]	; (800a82c <do_memp_free_pool+0x54>)
 800a7f6:	f00d fa85 	bl	8017d04 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a7fe:	f009 fd13 	bl	8014228 <sys_arch_protect>
 800a802:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a816:	68b8      	ldr	r0, [r7, #8]
 800a818:	f009 fd14 	bl	8014244 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a81c:	bf00      	nop
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	0801ae10 	.word	0x0801ae10
 800a828:	0801aec0 	.word	0x0801aec0
 800a82c:	0801ae64 	.word	0x0801ae64

0800a830 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d106      	bne.n	800a84e <memp_free_pool+0x1e>
 800a840:	4b0a      	ldr	r3, [pc, #40]	; (800a86c <memp_free_pool+0x3c>)
 800a842:	f240 1295 	movw	r2, #405	; 0x195
 800a846:	490a      	ldr	r1, [pc, #40]	; (800a870 <memp_free_pool+0x40>)
 800a848:	480a      	ldr	r0, [pc, #40]	; (800a874 <memp_free_pool+0x44>)
 800a84a:	f00d fa5b 	bl	8017d04 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d007      	beq.n	800a864 <memp_free_pool+0x34>
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d004      	beq.n	800a864 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f7ff ffbb 	bl	800a7d8 <do_memp_free_pool>
 800a862:	e000      	b.n	800a866 <memp_free_pool+0x36>
    return;
 800a864:	bf00      	nop
}
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	0801ae10 	.word	0x0801ae10
 800a870:	0801ae8c 	.word	0x0801ae8c
 800a874:	0801ae64 	.word	0x0801ae64

0800a878 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	6039      	str	r1, [r7, #0]
 800a882:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	2b0c      	cmp	r3, #12
 800a888:	d907      	bls.n	800a89a <memp_free+0x22>
 800a88a:	4b0c      	ldr	r3, [pc, #48]	; (800a8bc <memp_free+0x44>)
 800a88c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a890:	490b      	ldr	r1, [pc, #44]	; (800a8c0 <memp_free+0x48>)
 800a892:	480c      	ldr	r0, [pc, #48]	; (800a8c4 <memp_free+0x4c>)
 800a894:	f00d fa36 	bl	8017d04 <iprintf>
 800a898:	e00c      	b.n	800a8b4 <memp_free+0x3c>

  if (mem == NULL) {
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d008      	beq.n	800a8b2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a8a0:	79fb      	ldrb	r3, [r7, #7]
 800a8a2:	4a09      	ldr	r2, [pc, #36]	; (800a8c8 <memp_free+0x50>)
 800a8a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff ff94 	bl	800a7d8 <do_memp_free_pool>
 800a8b0:	e000      	b.n	800a8b4 <memp_free+0x3c>
    return;
 800a8b2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	0801ae10 	.word	0x0801ae10
 800a8c0:	0801aee0 	.word	0x0801aee0
 800a8c4:	0801ae64 	.word	0x0801ae64
 800a8c8:	0801d8bc 	.word	0x0801d8bc

0800a8cc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a8d0:	bf00      	nop
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr
	...

0800a8dc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
 800a8e8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d108      	bne.n	800a902 <netif_add+0x26>
 800a8f0:	4b57      	ldr	r3, [pc, #348]	; (800aa50 <netif_add+0x174>)
 800a8f2:	f240 1227 	movw	r2, #295	; 0x127
 800a8f6:	4957      	ldr	r1, [pc, #348]	; (800aa54 <netif_add+0x178>)
 800a8f8:	4857      	ldr	r0, [pc, #348]	; (800aa58 <netif_add+0x17c>)
 800a8fa:	f00d fa03 	bl	8017d04 <iprintf>
 800a8fe:	2300      	movs	r3, #0
 800a900:	e0a2      	b.n	800aa48 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	2b00      	cmp	r3, #0
 800a906:	d108      	bne.n	800a91a <netif_add+0x3e>
 800a908:	4b51      	ldr	r3, [pc, #324]	; (800aa50 <netif_add+0x174>)
 800a90a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a90e:	4953      	ldr	r1, [pc, #332]	; (800aa5c <netif_add+0x180>)
 800a910:	4851      	ldr	r0, [pc, #324]	; (800aa58 <netif_add+0x17c>)
 800a912:	f00d f9f7 	bl	8017d04 <iprintf>
 800a916:	2300      	movs	r3, #0
 800a918:	e096      	b.n	800aa48 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a920:	4b4f      	ldr	r3, [pc, #316]	; (800aa60 <netif_add+0x184>)
 800a922:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d101      	bne.n	800a92e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a92a:	4b4d      	ldr	r3, [pc, #308]	; (800aa60 <netif_add+0x184>)
 800a92c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a934:	4b4a      	ldr	r3, [pc, #296]	; (800aa60 <netif_add+0x184>)
 800a936:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	4a45      	ldr	r2, [pc, #276]	; (800aa64 <netif_add+0x188>)
 800a94e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6a3a      	ldr	r2, [r7, #32]
 800a968:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a96a:	4b3f      	ldr	r3, [pc, #252]	; (800aa68 <netif_add+0x18c>)
 800a96c:	781a      	ldrb	r2, [r3, #0]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a978:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	68b9      	ldr	r1, [r7, #8]
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f000 f913 	bl	800abac <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	4798      	blx	r3
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <netif_add+0xba>
    return NULL;
 800a992:	2300      	movs	r3, #0
 800a994:	e058      	b.n	800aa48 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a99c:	2bff      	cmp	r3, #255	; 0xff
 800a99e:	d103      	bne.n	800a9a8 <netif_add+0xcc>
        netif->num = 0;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a9ac:	4b2f      	ldr	r3, [pc, #188]	; (800aa6c <netif_add+0x190>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	617b      	str	r3, [r7, #20]
 800a9b2:	e02b      	b.n	800aa0c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d106      	bne.n	800a9ca <netif_add+0xee>
 800a9bc:	4b24      	ldr	r3, [pc, #144]	; (800aa50 <netif_add+0x174>)
 800a9be:	f240 128b 	movw	r2, #395	; 0x18b
 800a9c2:	492b      	ldr	r1, [pc, #172]	; (800aa70 <netif_add+0x194>)
 800a9c4:	4824      	ldr	r0, [pc, #144]	; (800aa58 <netif_add+0x17c>)
 800a9c6:	f00d f99d 	bl	8017d04 <iprintf>
        num_netifs++;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	2bff      	cmp	r3, #255	; 0xff
 800a9d4:	dd06      	ble.n	800a9e4 <netif_add+0x108>
 800a9d6:	4b1e      	ldr	r3, [pc, #120]	; (800aa50 <netif_add+0x174>)
 800a9d8:	f240 128d 	movw	r2, #397	; 0x18d
 800a9dc:	4925      	ldr	r1, [pc, #148]	; (800aa74 <netif_add+0x198>)
 800a9de:	481e      	ldr	r0, [pc, #120]	; (800aa58 <netif_add+0x17c>)
 800a9e0:	f00d f990 	bl	8017d04 <iprintf>
        if (netif2->num == netif->num) {
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d108      	bne.n	800aa06 <netif_add+0x12a>
          netif->num++;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800aa04:	e005      	b.n	800aa12 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	617b      	str	r3, [r7, #20]
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1d0      	bne.n	800a9b4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1be      	bne.n	800a996 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa1e:	2bfe      	cmp	r3, #254	; 0xfe
 800aa20:	d103      	bne.n	800aa2a <netif_add+0x14e>
    netif_num = 0;
 800aa22:	4b11      	ldr	r3, [pc, #68]	; (800aa68 <netif_add+0x18c>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	701a      	strb	r2, [r3, #0]
 800aa28:	e006      	b.n	800aa38 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa30:	3301      	adds	r3, #1
 800aa32:	b2da      	uxtb	r2, r3
 800aa34:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <netif_add+0x18c>)
 800aa36:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800aa38:	4b0c      	ldr	r3, [pc, #48]	; (800aa6c <netif_add+0x190>)
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800aa40:	4a0a      	ldr	r2, [pc, #40]	; (800aa6c <netif_add+0x190>)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800aa46:	68fb      	ldr	r3, [r7, #12]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	0801aefc 	.word	0x0801aefc
 800aa54:	0801af90 	.word	0x0801af90
 800aa58:	0801af4c 	.word	0x0801af4c
 800aa5c:	0801afac 	.word	0x0801afac
 800aa60:	0801d930 	.word	0x0801d930
 800aa64:	0800ae87 	.word	0x0800ae87
 800aa68:	2400b694 	.word	0x2400b694
 800aa6c:	2400edfc 	.word	0x2400edfc
 800aa70:	0801afd0 	.word	0x0801afd0
 800aa74:	0801afe4 	.word	0x0801afe4

0800aa78 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f002 fb8d 	bl	800d1a4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f007 f807 	bl	8011aa0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800aa92:	bf00      	nop
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b086      	sub	sp, #24
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d106      	bne.n	800aabc <netif_do_set_ipaddr+0x20>
 800aaae:	4b1d      	ldr	r3, [pc, #116]	; (800ab24 <netif_do_set_ipaddr+0x88>)
 800aab0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800aab4:	491c      	ldr	r1, [pc, #112]	; (800ab28 <netif_do_set_ipaddr+0x8c>)
 800aab6:	481d      	ldr	r0, [pc, #116]	; (800ab2c <netif_do_set_ipaddr+0x90>)
 800aab8:	f00d f924 	bl	8017d04 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d106      	bne.n	800aad0 <netif_do_set_ipaddr+0x34>
 800aac2:	4b18      	ldr	r3, [pc, #96]	; (800ab24 <netif_do_set_ipaddr+0x88>)
 800aac4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800aac8:	4917      	ldr	r1, [pc, #92]	; (800ab28 <netif_do_set_ipaddr+0x8c>)
 800aaca:	4818      	ldr	r0, [pc, #96]	; (800ab2c <netif_do_set_ipaddr+0x90>)
 800aacc:	f00d f91a 	bl	8017d04 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3304      	adds	r3, #4
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d01c      	beq.n	800ab18 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	3304      	adds	r3, #4
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800aaee:	f107 0314 	add.w	r3, r7, #20
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7ff ffbf 	bl	800aa78 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <netif_do_set_ipaddr+0x6a>
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	e000      	b.n	800ab08 <netif_do_set_ipaddr+0x6c>
 800ab06:	2300      	movs	r3, #0
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f000 f8d2 	bl	800acb8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ab14:	2301      	movs	r3, #1
 800ab16:	e000      	b.n	800ab1a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3718      	adds	r7, #24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	0801aefc 	.word	0x0801aefc
 800ab28:	0801b014 	.word	0x0801b014
 800ab2c:	0801af4c 	.word	0x0801af4c

0800ab30 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	3308      	adds	r3, #8
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d00a      	beq.n	800ab60 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <netif_do_set_netmask+0x26>
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	e000      	b.n	800ab58 <netif_do_set_netmask+0x28>
 800ab56:	2300      	movs	r3, #0
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e000      	b.n	800ab62 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr

0800ab6e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ab6e:	b480      	push	{r7}
 800ab70:	b085      	sub	sp, #20
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	60f8      	str	r0, [r7, #12]
 800ab76:	60b9      	str	r1, [r7, #8]
 800ab78:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	330c      	adds	r3, #12
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d00a      	beq.n	800ab9e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <netif_do_set_gw+0x26>
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	e000      	b.n	800ab96 <netif_do_set_gw+0x28>
 800ab94:	2300      	movs	r3, #0
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e000      	b.n	800aba0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b088      	sub	sp, #32
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
 800abb8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800abba:	2300      	movs	r3, #0
 800abbc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800abbe:	2300      	movs	r3, #0
 800abc0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800abc8:	4b1c      	ldr	r3, [pc, #112]	; (800ac3c <netif_set_addr+0x90>)
 800abca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800abd2:	4b1a      	ldr	r3, [pc, #104]	; (800ac3c <netif_set_addr+0x90>)
 800abd4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800abdc:	4b17      	ldr	r3, [pc, #92]	; (800ac3c <netif_set_addr+0x90>)
 800abde:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d003      	beq.n	800abee <netif_set_addr+0x42>
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d101      	bne.n	800abf2 <netif_set_addr+0x46>
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <netif_set_addr+0x48>
 800abf2:	2300      	movs	r3, #0
 800abf4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d006      	beq.n	800ac0a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800abfc:	f107 0310 	add.w	r3, r7, #16
 800ac00:	461a      	mov	r2, r3
 800ac02:	68b9      	ldr	r1, [r7, #8]
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7ff ff49 	bl	800aa9c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ac0a:	69fa      	ldr	r2, [r7, #28]
 800ac0c:	6879      	ldr	r1, [r7, #4]
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f7ff ff8e 	bl	800ab30 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	6839      	ldr	r1, [r7, #0]
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f7ff ffa8 	bl	800ab6e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d106      	bne.n	800ac32 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ac24:	f107 0310 	add.w	r3, r7, #16
 800ac28:	461a      	mov	r2, r3
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f7ff ff35 	bl	800aa9c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ac32:	bf00      	nop
 800ac34:	3720      	adds	r7, #32
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	0801d930 	.word	0x0801d930

0800ac40 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ac48:	4a04      	ldr	r2, [pc, #16]	; (800ac5c <netif_set_default+0x1c>)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ac4e:	bf00      	nop
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	2400ee00 	.word	0x2400ee00

0800ac60 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d107      	bne.n	800ac7e <netif_set_up+0x1e>
 800ac6e:	4b0f      	ldr	r3, [pc, #60]	; (800acac <netif_set_up+0x4c>)
 800ac70:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ac74:	490e      	ldr	r1, [pc, #56]	; (800acb0 <netif_set_up+0x50>)
 800ac76:	480f      	ldr	r0, [pc, #60]	; (800acb4 <netif_set_up+0x54>)
 800ac78:	f00d f844 	bl	8017d04 <iprintf>
 800ac7c:	e013      	b.n	800aca6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10c      	bne.n	800aca6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac92:	f043 0301 	orr.w	r3, r3, #1
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ac9e:	2103      	movs	r1, #3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f809 	bl	800acb8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	0801aefc 	.word	0x0801aefc
 800acb0:	0801b084 	.word	0x0801b084
 800acb4:	0801af4c 	.word	0x0801af4c

0800acb8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d106      	bne.n	800acd8 <netif_issue_reports+0x20>
 800acca:	4b18      	ldr	r3, [pc, #96]	; (800ad2c <netif_issue_reports+0x74>)
 800accc:	f240 326d 	movw	r2, #877	; 0x36d
 800acd0:	4917      	ldr	r1, [pc, #92]	; (800ad30 <netif_issue_reports+0x78>)
 800acd2:	4818      	ldr	r0, [pc, #96]	; (800ad34 <netif_issue_reports+0x7c>)
 800acd4:	f00d f816 	bl	8017d04 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800acde:	f003 0304 	and.w	r3, r3, #4
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d01e      	beq.n	800ad24 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800acec:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d017      	beq.n	800ad24 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d013      	beq.n	800ad26 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	3304      	adds	r3, #4
 800ad02:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00e      	beq.n	800ad26 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad0e:	f003 0308 	and.w	r3, r3, #8
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d007      	beq.n	800ad26 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	3304      	adds	r3, #4
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f007 fe29 	bl	8012974 <etharp_request>
 800ad22:	e000      	b.n	800ad26 <netif_issue_reports+0x6e>
    return;
 800ad24:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	0801aefc 	.word	0x0801aefc
 800ad30:	0801b0a0 	.word	0x0801b0a0
 800ad34:	0801af4c 	.word	0x0801af4c

0800ad38 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d107      	bne.n	800ad56 <netif_set_down+0x1e>
 800ad46:	4b12      	ldr	r3, [pc, #72]	; (800ad90 <netif_set_down+0x58>)
 800ad48:	f240 329b 	movw	r2, #923	; 0x39b
 800ad4c:	4911      	ldr	r1, [pc, #68]	; (800ad94 <netif_set_down+0x5c>)
 800ad4e:	4812      	ldr	r0, [pc, #72]	; (800ad98 <netif_set_down+0x60>)
 800ad50:	f00c ffd8 	bl	8017d04 <iprintf>
 800ad54:	e019      	b.n	800ad8a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d012      	beq.n	800ad8a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad6a:	f023 0301 	bic.w	r3, r3, #1
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad7c:	f003 0308 	and.w	r3, r3, #8
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d002      	beq.n	800ad8a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f007 f9b3 	bl	80120f0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	0801aefc 	.word	0x0801aefc
 800ad94:	0801b0c4 	.word	0x0801b0c4
 800ad98:	0801af4c 	.word	0x0801af4c

0800ad9c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d107      	bne.n	800adba <netif_set_link_up+0x1e>
 800adaa:	4b13      	ldr	r3, [pc, #76]	; (800adf8 <netif_set_link_up+0x5c>)
 800adac:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800adb0:	4912      	ldr	r1, [pc, #72]	; (800adfc <netif_set_link_up+0x60>)
 800adb2:	4813      	ldr	r0, [pc, #76]	; (800ae00 <netif_set_link_up+0x64>)
 800adb4:	f00c ffa6 	bl	8017d04 <iprintf>
 800adb8:	e01b      	b.n	800adf2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800adc0:	f003 0304 	and.w	r3, r3, #4
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d114      	bne.n	800adf2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800adce:	f043 0304 	orr.w	r3, r3, #4
 800add2:	b2da      	uxtb	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800adda:	2103      	movs	r1, #3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f7ff ff6b 	bl	800acb8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	69db      	ldr	r3, [r3, #28]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <netif_set_link_up+0x56>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	69db      	ldr	r3, [r3, #28]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	0801aefc 	.word	0x0801aefc
 800adfc:	0801b0e4 	.word	0x0801b0e4
 800ae00:	0801af4c 	.word	0x0801af4c

0800ae04 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d107      	bne.n	800ae22 <netif_set_link_down+0x1e>
 800ae12:	4b11      	ldr	r3, [pc, #68]	; (800ae58 <netif_set_link_down+0x54>)
 800ae14:	f240 4206 	movw	r2, #1030	; 0x406
 800ae18:	4910      	ldr	r1, [pc, #64]	; (800ae5c <netif_set_link_down+0x58>)
 800ae1a:	4811      	ldr	r0, [pc, #68]	; (800ae60 <netif_set_link_down+0x5c>)
 800ae1c:	f00c ff72 	bl	8017d04 <iprintf>
 800ae20:	e017      	b.n	800ae52 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae28:	f003 0304 	and.w	r3, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d010      	beq.n	800ae52 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae36:	f023 0304 	bic.w	r3, r3, #4
 800ae3a:	b2da      	uxtb	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	69db      	ldr	r3, [r3, #28]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <netif_set_link_down+0x4e>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	69db      	ldr	r3, [r3, #28]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	0801aefc 	.word	0x0801aefc
 800ae5c:	0801b108 	.word	0x0801b108
 800ae60:	0801af4c 	.word	0x0801af4c

0800ae64 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	61da      	str	r2, [r3, #28]
  }
}
 800ae7a:	bf00      	nop
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ae86:	b480      	push	{r7}
 800ae88:	b085      	sub	sp, #20
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	60f8      	str	r0, [r7, #12]
 800ae8e:	60b9      	str	r1, [r7, #8]
 800ae90:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ae92:	f06f 030b 	mvn.w	r3, #11
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3714      	adds	r7, #20
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
	...

0800aea4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	4603      	mov	r3, r0
 800aeac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800aeae:	79fb      	ldrb	r3, [r7, #7]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d013      	beq.n	800aedc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800aeb4:	4b0d      	ldr	r3, [pc, #52]	; (800aeec <netif_get_by_index+0x48>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	60fb      	str	r3, [r7, #12]
 800aeba:	e00c      	b.n	800aed6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aec2:	3301      	adds	r3, #1
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	79fa      	ldrb	r2, [r7, #7]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d101      	bne.n	800aed0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	e006      	b.n	800aede <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	60fb      	str	r3, [r7, #12]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1ef      	bne.n	800aebc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	2400edfc 	.word	0x2400edfc

0800aef0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800aef6:	f009 f997 	bl	8014228 <sys_arch_protect>
 800aefa:	6038      	str	r0, [r7, #0]
 800aefc:	4b0d      	ldr	r3, [pc, #52]	; (800af34 <pbuf_free_ooseq+0x44>)
 800aefe:	2200      	movs	r2, #0
 800af00:	701a      	strb	r2, [r3, #0]
 800af02:	6838      	ldr	r0, [r7, #0]
 800af04:	f009 f99e 	bl	8014244 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800af08:	4b0b      	ldr	r3, [pc, #44]	; (800af38 <pbuf_free_ooseq+0x48>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	607b      	str	r3, [r7, #4]
 800af0e:	e00a      	b.n	800af26 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af14:	2b00      	cmp	r3, #0
 800af16:	d003      	beq.n	800af20 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f002 f981 	bl	800d220 <tcp_free_ooseq>
      return;
 800af1e:	e005      	b.n	800af2c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	607b      	str	r3, [r7, #4]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1f1      	bne.n	800af10 <pbuf_free_ooseq+0x20>
    }
  }
}
 800af2c:	3708      	adds	r7, #8
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	2400ee04 	.word	0x2400ee04
 800af38:	2400ee0c 	.word	0x2400ee0c

0800af3c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800af44:	f7ff ffd4 	bl	800aef0 <pbuf_free_ooseq>
}
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800af56:	f009 f967 	bl	8014228 <sys_arch_protect>
 800af5a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800af5c:	4b0f      	ldr	r3, [pc, #60]	; (800af9c <pbuf_pool_is_empty+0x4c>)
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800af62:	4b0e      	ldr	r3, [pc, #56]	; (800af9c <pbuf_pool_is_empty+0x4c>)
 800af64:	2201      	movs	r2, #1
 800af66:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f009 f96b 	bl	8014244 <sys_arch_unprotect>

  if (!queued) {
 800af6e:	78fb      	ldrb	r3, [r7, #3]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10f      	bne.n	800af94 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800af74:	2100      	movs	r1, #0
 800af76:	480a      	ldr	r0, [pc, #40]	; (800afa0 <pbuf_pool_is_empty+0x50>)
 800af78:	f7fe feaa 	bl	8009cd0 <tcpip_try_callback>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d008      	beq.n	800af94 <pbuf_pool_is_empty+0x44>
 800af82:	f009 f951 	bl	8014228 <sys_arch_protect>
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	4b04      	ldr	r3, [pc, #16]	; (800af9c <pbuf_pool_is_empty+0x4c>)
 800af8a:	2200      	movs	r2, #0
 800af8c:	701a      	strb	r2, [r3, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f009 f958 	bl	8014244 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800af94:	bf00      	nop
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	2400ee04 	.word	0x2400ee04
 800afa0:	0800af3d 	.word	0x0800af3d

0800afa4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	4611      	mov	r1, r2
 800afb0:	461a      	mov	r2, r3
 800afb2:	460b      	mov	r3, r1
 800afb4:	80fb      	strh	r3, [r7, #6]
 800afb6:	4613      	mov	r3, r2
 800afb8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	88fa      	ldrh	r2, [r7, #6]
 800afca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	88ba      	ldrh	r2, [r7, #4]
 800afd0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800afd2:	8b3b      	ldrh	r3, [r7, #24]
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	7f3a      	ldrb	r2, [r7, #28]
 800afde:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2201      	movs	r2, #1
 800afe4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	73da      	strb	r2, [r3, #15]
}
 800afec:	bf00      	nop
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b08c      	sub	sp, #48	; 0x30
 800affc:	af02      	add	r7, sp, #8
 800affe:	4603      	mov	r3, r0
 800b000:	71fb      	strb	r3, [r7, #7]
 800b002:	460b      	mov	r3, r1
 800b004:	80bb      	strh	r3, [r7, #4]
 800b006:	4613      	mov	r3, r2
 800b008:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b00e:	887b      	ldrh	r3, [r7, #2]
 800b010:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b014:	d07f      	beq.n	800b116 <pbuf_alloc+0x11e>
 800b016:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b01a:	f300 80c8 	bgt.w	800b1ae <pbuf_alloc+0x1b6>
 800b01e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b022:	d010      	beq.n	800b046 <pbuf_alloc+0x4e>
 800b024:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b028:	f300 80c1 	bgt.w	800b1ae <pbuf_alloc+0x1b6>
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d002      	beq.n	800b036 <pbuf_alloc+0x3e>
 800b030:	2b41      	cmp	r3, #65	; 0x41
 800b032:	f040 80bc 	bne.w	800b1ae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b036:	887a      	ldrh	r2, [r7, #2]
 800b038:	88bb      	ldrh	r3, [r7, #4]
 800b03a:	4619      	mov	r1, r3
 800b03c:	2000      	movs	r0, #0
 800b03e:	f000 f8d1 	bl	800b1e4 <pbuf_alloc_reference>
 800b042:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b044:	e0bd      	b.n	800b1c2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b046:	2300      	movs	r3, #0
 800b048:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b04a:	2300      	movs	r3, #0
 800b04c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b04e:	88bb      	ldrh	r3, [r7, #4]
 800b050:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b052:	200c      	movs	r0, #12
 800b054:	f7ff fb9a 	bl	800a78c <memp_malloc>
 800b058:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d109      	bne.n	800b074 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b060:	f7ff ff76 	bl	800af50 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b06a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b06c:	f000 faa8 	bl	800b5c0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b070:	2300      	movs	r3, #0
 800b072:	e0a7      	b.n	800b1c4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b074:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b076:	3303      	adds	r3, #3
 800b078:	b29b      	uxth	r3, r3
 800b07a:	f023 0303 	bic.w	r3, r3, #3
 800b07e:	b29b      	uxth	r3, r3
 800b080:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b084:	b29b      	uxth	r3, r3
 800b086:	8b7a      	ldrh	r2, [r7, #26]
 800b088:	4293      	cmp	r3, r2
 800b08a:	bf28      	it	cs
 800b08c:	4613      	movcs	r3, r2
 800b08e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b090:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b092:	3310      	adds	r3, #16
 800b094:	693a      	ldr	r2, [r7, #16]
 800b096:	4413      	add	r3, r2
 800b098:	3303      	adds	r3, #3
 800b09a:	f023 0303 	bic.w	r3, r3, #3
 800b09e:	4618      	mov	r0, r3
 800b0a0:	89f9      	ldrh	r1, [r7, #14]
 800b0a2:	8b7a      	ldrh	r2, [r7, #26]
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	9301      	str	r3, [sp, #4]
 800b0a8:	887b      	ldrh	r3, [r7, #2]
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	4601      	mov	r1, r0
 800b0b0:	6938      	ldr	r0, [r7, #16]
 800b0b2:	f7ff ff77 	bl	800afa4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	f003 0303 	and.w	r3, r3, #3
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d006      	beq.n	800b0d0 <pbuf_alloc+0xd8>
 800b0c2:	4b42      	ldr	r3, [pc, #264]	; (800b1cc <pbuf_alloc+0x1d4>)
 800b0c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0c8:	4941      	ldr	r1, [pc, #260]	; (800b1d0 <pbuf_alloc+0x1d8>)
 800b0ca:	4842      	ldr	r0, [pc, #264]	; (800b1d4 <pbuf_alloc+0x1dc>)
 800b0cc:	f00c fe1a 	bl	8017d04 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b0d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0d2:	3303      	adds	r3, #3
 800b0d4:	f023 0303 	bic.w	r3, r3, #3
 800b0d8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b0dc:	d106      	bne.n	800b0ec <pbuf_alloc+0xf4>
 800b0de:	4b3b      	ldr	r3, [pc, #236]	; (800b1cc <pbuf_alloc+0x1d4>)
 800b0e0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b0e4:	493c      	ldr	r1, [pc, #240]	; (800b1d8 <pbuf_alloc+0x1e0>)
 800b0e6:	483b      	ldr	r0, [pc, #236]	; (800b1d4 <pbuf_alloc+0x1dc>)
 800b0e8:	f00c fe0c 	bl	8017d04 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d102      	bne.n	800b0f8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0f6:	e002      	b.n	800b0fe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b102:	8b7a      	ldrh	r2, [r7, #26]
 800b104:	89fb      	ldrh	r3, [r7, #14]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b10e:	8b7b      	ldrh	r3, [r7, #26]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d19e      	bne.n	800b052 <pbuf_alloc+0x5a>
      break;
 800b114:	e055      	b.n	800b1c2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b116:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b118:	3303      	adds	r3, #3
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	f023 0303 	bic.w	r3, r3, #3
 800b120:	b29a      	uxth	r2, r3
 800b122:	88bb      	ldrh	r3, [r7, #4]
 800b124:	3303      	adds	r3, #3
 800b126:	b29b      	uxth	r3, r3
 800b128:	f023 0303 	bic.w	r3, r3, #3
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	4413      	add	r3, r2
 800b130:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b132:	8b3b      	ldrh	r3, [r7, #24]
 800b134:	3310      	adds	r3, #16
 800b136:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b138:	8b3a      	ldrh	r2, [r7, #24]
 800b13a:	88bb      	ldrh	r3, [r7, #4]
 800b13c:	3303      	adds	r3, #3
 800b13e:	f023 0303 	bic.w	r3, r3, #3
 800b142:	429a      	cmp	r2, r3
 800b144:	d306      	bcc.n	800b154 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b146:	8afa      	ldrh	r2, [r7, #22]
 800b148:	88bb      	ldrh	r3, [r7, #4]
 800b14a:	3303      	adds	r3, #3
 800b14c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b150:	429a      	cmp	r2, r3
 800b152:	d201      	bcs.n	800b158 <pbuf_alloc+0x160>
        return NULL;
 800b154:	2300      	movs	r3, #0
 800b156:	e035      	b.n	800b1c4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b158:	8afb      	ldrh	r3, [r7, #22]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff f972 	bl	800a444 <mem_malloc>
 800b160:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	2b00      	cmp	r3, #0
 800b166:	d101      	bne.n	800b16c <pbuf_alloc+0x174>
        return NULL;
 800b168:	2300      	movs	r3, #0
 800b16a:	e02b      	b.n	800b1c4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b16c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b16e:	3310      	adds	r3, #16
 800b170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b172:	4413      	add	r3, r2
 800b174:	3303      	adds	r3, #3
 800b176:	f023 0303 	bic.w	r3, r3, #3
 800b17a:	4618      	mov	r0, r3
 800b17c:	88b9      	ldrh	r1, [r7, #4]
 800b17e:	88ba      	ldrh	r2, [r7, #4]
 800b180:	2300      	movs	r3, #0
 800b182:	9301      	str	r3, [sp, #4]
 800b184:	887b      	ldrh	r3, [r7, #2]
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	460b      	mov	r3, r1
 800b18a:	4601      	mov	r1, r0
 800b18c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b18e:	f7ff ff09 	bl	800afa4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	f003 0303 	and.w	r3, r3, #3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d010      	beq.n	800b1c0 <pbuf_alloc+0x1c8>
 800b19e:	4b0b      	ldr	r3, [pc, #44]	; (800b1cc <pbuf_alloc+0x1d4>)
 800b1a0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b1a4:	490d      	ldr	r1, [pc, #52]	; (800b1dc <pbuf_alloc+0x1e4>)
 800b1a6:	480b      	ldr	r0, [pc, #44]	; (800b1d4 <pbuf_alloc+0x1dc>)
 800b1a8:	f00c fdac 	bl	8017d04 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b1ac:	e008      	b.n	800b1c0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b1ae:	4b07      	ldr	r3, [pc, #28]	; (800b1cc <pbuf_alloc+0x1d4>)
 800b1b0:	f240 1227 	movw	r2, #295	; 0x127
 800b1b4:	490a      	ldr	r1, [pc, #40]	; (800b1e0 <pbuf_alloc+0x1e8>)
 800b1b6:	4807      	ldr	r0, [pc, #28]	; (800b1d4 <pbuf_alloc+0x1dc>)
 800b1b8:	f00c fda4 	bl	8017d04 <iprintf>
      return NULL;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	e001      	b.n	800b1c4 <pbuf_alloc+0x1cc>
      break;
 800b1c0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3728      	adds	r7, #40	; 0x28
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	0801b12c 	.word	0x0801b12c
 800b1d0:	0801b15c 	.word	0x0801b15c
 800b1d4:	0801b18c 	.word	0x0801b18c
 800b1d8:	0801b1b4 	.word	0x0801b1b4
 800b1dc:	0801b1e8 	.word	0x0801b1e8
 800b1e0:	0801b214 	.word	0x0801b214

0800b1e4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af02      	add	r7, sp, #8
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	807b      	strh	r3, [r7, #2]
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b1f4:	883b      	ldrh	r3, [r7, #0]
 800b1f6:	2b41      	cmp	r3, #65	; 0x41
 800b1f8:	d009      	beq.n	800b20e <pbuf_alloc_reference+0x2a>
 800b1fa:	883b      	ldrh	r3, [r7, #0]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d006      	beq.n	800b20e <pbuf_alloc_reference+0x2a>
 800b200:	4b0f      	ldr	r3, [pc, #60]	; (800b240 <pbuf_alloc_reference+0x5c>)
 800b202:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b206:	490f      	ldr	r1, [pc, #60]	; (800b244 <pbuf_alloc_reference+0x60>)
 800b208:	480f      	ldr	r0, [pc, #60]	; (800b248 <pbuf_alloc_reference+0x64>)
 800b20a:	f00c fd7b 	bl	8017d04 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b20e:	200b      	movs	r0, #11
 800b210:	f7ff fabc 	bl	800a78c <memp_malloc>
 800b214:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d101      	bne.n	800b220 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b21c:	2300      	movs	r3, #0
 800b21e:	e00b      	b.n	800b238 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b220:	8879      	ldrh	r1, [r7, #2]
 800b222:	887a      	ldrh	r2, [r7, #2]
 800b224:	2300      	movs	r3, #0
 800b226:	9301      	str	r3, [sp, #4]
 800b228:	883b      	ldrh	r3, [r7, #0]
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	460b      	mov	r3, r1
 800b22e:	6879      	ldr	r1, [r7, #4]
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f7ff feb7 	bl	800afa4 <pbuf_init_alloced_pbuf>
  return p;
 800b236:	68fb      	ldr	r3, [r7, #12]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	0801b12c 	.word	0x0801b12c
 800b244:	0801b230 	.word	0x0801b230
 800b248:	0801b18c 	.word	0x0801b18c

0800b24c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b088      	sub	sp, #32
 800b250:	af02      	add	r7, sp, #8
 800b252:	607b      	str	r3, [r7, #4]
 800b254:	4603      	mov	r3, r0
 800b256:	73fb      	strb	r3, [r7, #15]
 800b258:	460b      	mov	r3, r1
 800b25a:	81bb      	strh	r3, [r7, #12]
 800b25c:	4613      	mov	r3, r2
 800b25e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b264:	8a7b      	ldrh	r3, [r7, #18]
 800b266:	3303      	adds	r3, #3
 800b268:	f023 0203 	bic.w	r2, r3, #3
 800b26c:	89bb      	ldrh	r3, [r7, #12]
 800b26e:	441a      	add	r2, r3
 800b270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b272:	429a      	cmp	r2, r3
 800b274:	d901      	bls.n	800b27a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b276:	2300      	movs	r3, #0
 800b278:	e018      	b.n	800b2ac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b27a:	6a3b      	ldr	r3, [r7, #32]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d007      	beq.n	800b290 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b280:	8a7b      	ldrh	r3, [r7, #18]
 800b282:	3303      	adds	r3, #3
 800b284:	f023 0303 	bic.w	r3, r3, #3
 800b288:	6a3a      	ldr	r2, [r7, #32]
 800b28a:	4413      	add	r3, r2
 800b28c:	617b      	str	r3, [r7, #20]
 800b28e:	e001      	b.n	800b294 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b290:	2300      	movs	r3, #0
 800b292:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	89b9      	ldrh	r1, [r7, #12]
 800b298:	89ba      	ldrh	r2, [r7, #12]
 800b29a:	2302      	movs	r3, #2
 800b29c:	9301      	str	r3, [sp, #4]
 800b29e:	897b      	ldrh	r3, [r7, #10]
 800b2a0:	9300      	str	r3, [sp, #0]
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	6979      	ldr	r1, [r7, #20]
 800b2a6:	f7ff fe7d 	bl	800afa4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b2aa:	687b      	ldr	r3, [r7, #4]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d106      	bne.n	800b2d4 <pbuf_realloc+0x20>
 800b2c6:	4b3a      	ldr	r3, [pc, #232]	; (800b3b0 <pbuf_realloc+0xfc>)
 800b2c8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b2cc:	4939      	ldr	r1, [pc, #228]	; (800b3b4 <pbuf_realloc+0x100>)
 800b2ce:	483a      	ldr	r0, [pc, #232]	; (800b3b8 <pbuf_realloc+0x104>)
 800b2d0:	f00c fd18 	bl	8017d04 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	891b      	ldrh	r3, [r3, #8]
 800b2d8:	887a      	ldrh	r2, [r7, #2]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d263      	bcs.n	800b3a6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	891a      	ldrh	r2, [r3, #8]
 800b2e2:	887b      	ldrh	r3, [r7, #2]
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b2e8:	887b      	ldrh	r3, [r7, #2]
 800b2ea:	817b      	strh	r3, [r7, #10]
  q = p;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b2f0:	e018      	b.n	800b324 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	895b      	ldrh	r3, [r3, #10]
 800b2f6:	897a      	ldrh	r2, [r7, #10]
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	891a      	ldrh	r2, [r3, #8]
 800b300:	893b      	ldrh	r3, [r7, #8]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	b29a      	uxth	r2, r3
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d106      	bne.n	800b324 <pbuf_realloc+0x70>
 800b316:	4b26      	ldr	r3, [pc, #152]	; (800b3b0 <pbuf_realloc+0xfc>)
 800b318:	f240 12af 	movw	r2, #431	; 0x1af
 800b31c:	4927      	ldr	r1, [pc, #156]	; (800b3bc <pbuf_realloc+0x108>)
 800b31e:	4826      	ldr	r0, [pc, #152]	; (800b3b8 <pbuf_realloc+0x104>)
 800b320:	f00c fcf0 	bl	8017d04 <iprintf>
  while (rem_len > q->len) {
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	895b      	ldrh	r3, [r3, #10]
 800b328:	897a      	ldrh	r2, [r7, #10]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d8e1      	bhi.n	800b2f2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	7b1b      	ldrb	r3, [r3, #12]
 800b332:	f003 030f 	and.w	r3, r3, #15
 800b336:	2b00      	cmp	r3, #0
 800b338:	d121      	bne.n	800b37e <pbuf_realloc+0xca>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	895b      	ldrh	r3, [r3, #10]
 800b33e:	897a      	ldrh	r2, [r7, #10]
 800b340:	429a      	cmp	r2, r3
 800b342:	d01c      	beq.n	800b37e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	7b5b      	ldrb	r3, [r3, #13]
 800b348:	f003 0302 	and.w	r3, r3, #2
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d116      	bne.n	800b37e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	b29a      	uxth	r2, r3
 800b35a:	897b      	ldrh	r3, [r7, #10]
 800b35c:	4413      	add	r3, r2
 800b35e:	b29b      	uxth	r3, r3
 800b360:	4619      	mov	r1, r3
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f7fe ff64 	bl	800a230 <mem_trim>
 800b368:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d106      	bne.n	800b37e <pbuf_realloc+0xca>
 800b370:	4b0f      	ldr	r3, [pc, #60]	; (800b3b0 <pbuf_realloc+0xfc>)
 800b372:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b376:	4912      	ldr	r1, [pc, #72]	; (800b3c0 <pbuf_realloc+0x10c>)
 800b378:	480f      	ldr	r0, [pc, #60]	; (800b3b8 <pbuf_realloc+0x104>)
 800b37a:	f00c fcc3 	bl	8017d04 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	897a      	ldrh	r2, [r7, #10]
 800b382:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	895a      	ldrh	r2, [r3, #10]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4618      	mov	r0, r3
 800b39a:	f000 f911 	bl	800b5c0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	601a      	str	r2, [r3, #0]
 800b3a4:	e000      	b.n	800b3a8 <pbuf_realloc+0xf4>
    return;
 800b3a6:	bf00      	nop

}
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0801b12c 	.word	0x0801b12c
 800b3b4:	0801b244 	.word	0x0801b244
 800b3b8:	0801b18c 	.word	0x0801b18c
 800b3bc:	0801b25c 	.word	0x0801b25c
 800b3c0:	0801b274 	.word	0x0801b274

0800b3c4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d106      	bne.n	800b3e6 <pbuf_add_header_impl+0x22>
 800b3d8:	4b2b      	ldr	r3, [pc, #172]	; (800b488 <pbuf_add_header_impl+0xc4>)
 800b3da:	f240 12df 	movw	r2, #479	; 0x1df
 800b3de:	492b      	ldr	r1, [pc, #172]	; (800b48c <pbuf_add_header_impl+0xc8>)
 800b3e0:	482b      	ldr	r0, [pc, #172]	; (800b490 <pbuf_add_header_impl+0xcc>)
 800b3e2:	f00c fc8f 	bl	8017d04 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d003      	beq.n	800b3f4 <pbuf_add_header_impl+0x30>
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3f2:	d301      	bcc.n	800b3f8 <pbuf_add_header_impl+0x34>
    return 1;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e043      	b.n	800b480 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d101      	bne.n	800b402 <pbuf_add_header_impl+0x3e>
    return 0;
 800b3fe:	2300      	movs	r3, #0
 800b400:	e03e      	b.n	800b480 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	891a      	ldrh	r2, [r3, #8]
 800b40a:	8a7b      	ldrh	r3, [r7, #18]
 800b40c:	4413      	add	r3, r2
 800b40e:	b29b      	uxth	r3, r3
 800b410:	8a7a      	ldrh	r2, [r7, #18]
 800b412:	429a      	cmp	r2, r3
 800b414:	d901      	bls.n	800b41a <pbuf_add_header_impl+0x56>
    return 1;
 800b416:	2301      	movs	r3, #1
 800b418:	e032      	b.n	800b480 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	7b1b      	ldrb	r3, [r3, #12]
 800b41e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b420:	8a3b      	ldrh	r3, [r7, #16]
 800b422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00c      	beq.n	800b444 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	685a      	ldr	r2, [r3, #4]
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	425b      	negs	r3, r3
 800b432:	4413      	add	r3, r2
 800b434:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3310      	adds	r3, #16
 800b43a:	697a      	ldr	r2, [r7, #20]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d20d      	bcs.n	800b45c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b440:	2301      	movs	r3, #1
 800b442:	e01d      	b.n	800b480 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b444:	79fb      	ldrb	r3, [r7, #7]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d006      	beq.n	800b458 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	425b      	negs	r3, r3
 800b452:	4413      	add	r3, r2
 800b454:	617b      	str	r3, [r7, #20]
 800b456:	e001      	b.n	800b45c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b458:	2301      	movs	r3, #1
 800b45a:	e011      	b.n	800b480 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	895a      	ldrh	r2, [r3, #10]
 800b466:	8a7b      	ldrh	r3, [r7, #18]
 800b468:	4413      	add	r3, r2
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	891a      	ldrh	r2, [r3, #8]
 800b474:	8a7b      	ldrh	r3, [r7, #18]
 800b476:	4413      	add	r3, r2
 800b478:	b29a      	uxth	r2, r3
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	811a      	strh	r2, [r3, #8]


  return 0;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3718      	adds	r7, #24
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	0801b12c 	.word	0x0801b12c
 800b48c:	0801b290 	.word	0x0801b290
 800b490:	0801b18c 	.word	0x0801b18c

0800b494 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b49e:	2200      	movs	r2, #0
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff ff8e 	bl	800b3c4 <pbuf_add_header_impl>
 800b4a8:	4603      	mov	r3, r0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d106      	bne.n	800b4d2 <pbuf_remove_header+0x1e>
 800b4c4:	4b20      	ldr	r3, [pc, #128]	; (800b548 <pbuf_remove_header+0x94>)
 800b4c6:	f240 224b 	movw	r2, #587	; 0x24b
 800b4ca:	4920      	ldr	r1, [pc, #128]	; (800b54c <pbuf_remove_header+0x98>)
 800b4cc:	4820      	ldr	r0, [pc, #128]	; (800b550 <pbuf_remove_header+0x9c>)
 800b4ce:	f00c fc19 	bl	8017d04 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d003      	beq.n	800b4e0 <pbuf_remove_header+0x2c>
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4de:	d301      	bcc.n	800b4e4 <pbuf_remove_header+0x30>
    return 1;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e02c      	b.n	800b53e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d101      	bne.n	800b4ee <pbuf_remove_header+0x3a>
    return 0;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e027      	b.n	800b53e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	895b      	ldrh	r3, [r3, #10]
 800b4f6:	89fa      	ldrh	r2, [r7, #14]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d908      	bls.n	800b50e <pbuf_remove_header+0x5a>
 800b4fc:	4b12      	ldr	r3, [pc, #72]	; (800b548 <pbuf_remove_header+0x94>)
 800b4fe:	f240 2255 	movw	r2, #597	; 0x255
 800b502:	4914      	ldr	r1, [pc, #80]	; (800b554 <pbuf_remove_header+0xa0>)
 800b504:	4812      	ldr	r0, [pc, #72]	; (800b550 <pbuf_remove_header+0x9c>)
 800b506:	f00c fbfd 	bl	8017d04 <iprintf>
 800b50a:	2301      	movs	r3, #1
 800b50c:	e017      	b.n	800b53e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685a      	ldr	r2, [r3, #4]
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	441a      	add	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	895a      	ldrh	r2, [r3, #10]
 800b524:	89fb      	ldrh	r3, [r7, #14]
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	b29a      	uxth	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	891a      	ldrh	r2, [r3, #8]
 800b532:	89fb      	ldrh	r3, [r7, #14]
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	b29a      	uxth	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	0801b12c 	.word	0x0801b12c
 800b54c:	0801b290 	.word	0x0801b290
 800b550:	0801b18c 	.word	0x0801b18c
 800b554:	0801b29c 	.word	0x0801b29c

0800b558 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	460b      	mov	r3, r1
 800b562:	807b      	strh	r3, [r7, #2]
 800b564:	4613      	mov	r3, r2
 800b566:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b568:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	da08      	bge.n	800b582 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b570:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b574:	425b      	negs	r3, r3
 800b576:	4619      	mov	r1, r3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f7ff ff9b 	bl	800b4b4 <pbuf_remove_header>
 800b57e:	4603      	mov	r3, r0
 800b580:	e007      	b.n	800b592 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b582:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b586:	787a      	ldrb	r2, [r7, #1]
 800b588:	4619      	mov	r1, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7ff ff1a 	bl	800b3c4 <pbuf_add_header_impl>
 800b590:	4603      	mov	r3, r0
  }
}
 800b592:	4618      	mov	r0, r3
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b082      	sub	sp, #8
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b5a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7ff ffd2 	bl	800b558 <pbuf_header_impl>
 800b5b4:	4603      	mov	r3, r0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
	...

0800b5c0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b088      	sub	sp, #32
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10b      	bne.n	800b5e6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d106      	bne.n	800b5e2 <pbuf_free+0x22>
 800b5d4:	4b3b      	ldr	r3, [pc, #236]	; (800b6c4 <pbuf_free+0x104>)
 800b5d6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b5da:	493b      	ldr	r1, [pc, #236]	; (800b6c8 <pbuf_free+0x108>)
 800b5dc:	483b      	ldr	r0, [pc, #236]	; (800b6cc <pbuf_free+0x10c>)
 800b5de:	f00c fb91 	bl	8017d04 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e069      	b.n	800b6ba <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b5ea:	e062      	b.n	800b6b2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b5ec:	f008 fe1c 	bl	8014228 <sys_arch_protect>
 800b5f0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	7b9b      	ldrb	r3, [r3, #14]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d106      	bne.n	800b608 <pbuf_free+0x48>
 800b5fa:	4b32      	ldr	r3, [pc, #200]	; (800b6c4 <pbuf_free+0x104>)
 800b5fc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b600:	4933      	ldr	r1, [pc, #204]	; (800b6d0 <pbuf_free+0x110>)
 800b602:	4832      	ldr	r0, [pc, #200]	; (800b6cc <pbuf_free+0x10c>)
 800b604:	f00c fb7e 	bl	8017d04 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	7b9b      	ldrb	r3, [r3, #14]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	b2da      	uxtb	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	739a      	strb	r2, [r3, #14]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	7b9b      	ldrb	r3, [r3, #14]
 800b618:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b61a:	69b8      	ldr	r0, [r7, #24]
 800b61c:	f008 fe12 	bl	8014244 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b620:	7dfb      	ldrb	r3, [r7, #23]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d143      	bne.n	800b6ae <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	7b1b      	ldrb	r3, [r3, #12]
 800b630:	f003 030f 	and.w	r3, r3, #15
 800b634:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	7b5b      	ldrb	r3, [r3, #13]
 800b63a:	f003 0302 	and.w	r3, r3, #2
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d011      	beq.n	800b666 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d106      	bne.n	800b65c <pbuf_free+0x9c>
 800b64e:	4b1d      	ldr	r3, [pc, #116]	; (800b6c4 <pbuf_free+0x104>)
 800b650:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b654:	491f      	ldr	r1, [pc, #124]	; (800b6d4 <pbuf_free+0x114>)
 800b656:	481d      	ldr	r0, [pc, #116]	; (800b6cc <pbuf_free+0x10c>)
 800b658:	f00c fb54 	bl	8017d04 <iprintf>
        pc->custom_free_function(p);
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	4798      	blx	r3
 800b664:	e01d      	b.n	800b6a2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b666:	7bfb      	ldrb	r3, [r7, #15]
 800b668:	2b02      	cmp	r3, #2
 800b66a:	d104      	bne.n	800b676 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b66c:	6879      	ldr	r1, [r7, #4]
 800b66e:	200c      	movs	r0, #12
 800b670:	f7ff f902 	bl	800a878 <memp_free>
 800b674:	e015      	b.n	800b6a2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b676:	7bfb      	ldrb	r3, [r7, #15]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d104      	bne.n	800b686 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b67c:	6879      	ldr	r1, [r7, #4]
 800b67e:	200b      	movs	r0, #11
 800b680:	f7ff f8fa 	bl	800a878 <memp_free>
 800b684:	e00d      	b.n	800b6a2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b686:	7bfb      	ldrb	r3, [r7, #15]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d103      	bne.n	800b694 <pbuf_free+0xd4>
          mem_free(p);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7fe fd3f 	bl	800a110 <mem_free>
 800b692:	e006      	b.n	800b6a2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b694:	4b0b      	ldr	r3, [pc, #44]	; (800b6c4 <pbuf_free+0x104>)
 800b696:	f240 320f 	movw	r2, #783	; 0x30f
 800b69a:	490f      	ldr	r1, [pc, #60]	; (800b6d8 <pbuf_free+0x118>)
 800b69c:	480b      	ldr	r0, [pc, #44]	; (800b6cc <pbuf_free+0x10c>)
 800b69e:	f00c fb31 	bl	8017d04 <iprintf>
        }
      }
      count++;
 800b6a2:	7ffb      	ldrb	r3, [r7, #31]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	607b      	str	r3, [r7, #4]
 800b6ac:	e001      	b.n	800b6b2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d199      	bne.n	800b5ec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b6b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3720      	adds	r7, #32
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	0801b12c 	.word	0x0801b12c
 800b6c8:	0801b290 	.word	0x0801b290
 800b6cc:	0801b18c 	.word	0x0801b18c
 800b6d0:	0801b2bc 	.word	0x0801b2bc
 800b6d4:	0801b2d4 	.word	0x0801b2d4
 800b6d8:	0801b2f8 	.word	0x0801b2f8

0800b6dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b085      	sub	sp, #20
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b6e8:	e005      	b.n	800b6f6 <pbuf_clen+0x1a>
    ++len;
 800b6ea:	89fb      	ldrh	r3, [r7, #14]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d1f6      	bne.n	800b6ea <pbuf_clen+0xe>
  }
  return len;
 800b6fc:	89fb      	ldrh	r3, [r7, #14]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3714      	adds	r7, #20
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
	...

0800b70c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d016      	beq.n	800b748 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b71a:	f008 fd85 	bl	8014228 <sys_arch_protect>
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	7b9b      	ldrb	r3, [r3, #14]
 800b724:	3301      	adds	r3, #1
 800b726:	b2da      	uxtb	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	739a      	strb	r2, [r3, #14]
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f008 fd89 	bl	8014244 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	7b9b      	ldrb	r3, [r3, #14]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d106      	bne.n	800b748 <pbuf_ref+0x3c>
 800b73a:	4b05      	ldr	r3, [pc, #20]	; (800b750 <pbuf_ref+0x44>)
 800b73c:	f240 3242 	movw	r2, #834	; 0x342
 800b740:	4904      	ldr	r1, [pc, #16]	; (800b754 <pbuf_ref+0x48>)
 800b742:	4805      	ldr	r0, [pc, #20]	; (800b758 <pbuf_ref+0x4c>)
 800b744:	f00c fade 	bl	8017d04 <iprintf>
  }
}
 800b748:	bf00      	nop
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	0801b12c 	.word	0x0801b12c
 800b754:	0801b30c 	.word	0x0801b30c
 800b758:	0801b18c 	.word	0x0801b18c

0800b75c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d002      	beq.n	800b772 <pbuf_cat+0x16>
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d107      	bne.n	800b782 <pbuf_cat+0x26>
 800b772:	4b20      	ldr	r3, [pc, #128]	; (800b7f4 <pbuf_cat+0x98>)
 800b774:	f240 3259 	movw	r2, #857	; 0x359
 800b778:	491f      	ldr	r1, [pc, #124]	; (800b7f8 <pbuf_cat+0x9c>)
 800b77a:	4820      	ldr	r0, [pc, #128]	; (800b7fc <pbuf_cat+0xa0>)
 800b77c:	f00c fac2 	bl	8017d04 <iprintf>
 800b780:	e034      	b.n	800b7ec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	60fb      	str	r3, [r7, #12]
 800b786:	e00a      	b.n	800b79e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	891a      	ldrh	r2, [r3, #8]
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	891b      	ldrh	r3, [r3, #8]
 800b790:	4413      	add	r3, r2
 800b792:	b29a      	uxth	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	60fb      	str	r3, [r7, #12]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1f0      	bne.n	800b788 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	891a      	ldrh	r2, [r3, #8]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	895b      	ldrh	r3, [r3, #10]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d006      	beq.n	800b7c0 <pbuf_cat+0x64>
 800b7b2:	4b10      	ldr	r3, [pc, #64]	; (800b7f4 <pbuf_cat+0x98>)
 800b7b4:	f240 3262 	movw	r2, #866	; 0x362
 800b7b8:	4911      	ldr	r1, [pc, #68]	; (800b800 <pbuf_cat+0xa4>)
 800b7ba:	4810      	ldr	r0, [pc, #64]	; (800b7fc <pbuf_cat+0xa0>)
 800b7bc:	f00c faa2 	bl	8017d04 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d006      	beq.n	800b7d6 <pbuf_cat+0x7a>
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <pbuf_cat+0x98>)
 800b7ca:	f240 3263 	movw	r2, #867	; 0x363
 800b7ce:	490d      	ldr	r1, [pc, #52]	; (800b804 <pbuf_cat+0xa8>)
 800b7d0:	480a      	ldr	r0, [pc, #40]	; (800b7fc <pbuf_cat+0xa0>)
 800b7d2:	f00c fa97 	bl	8017d04 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	891a      	ldrh	r2, [r3, #8]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	891b      	ldrh	r3, [r3, #8]
 800b7de:	4413      	add	r3, r2
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	683a      	ldr	r2, [r7, #0]
 800b7ea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	0801b12c 	.word	0x0801b12c
 800b7f8:	0801b320 	.word	0x0801b320
 800b7fc:	0801b18c 	.word	0x0801b18c
 800b800:	0801b358 	.word	0x0801b358
 800b804:	0801b388 	.word	0x0801b388

0800b808 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f7ff ffa1 	bl	800b75c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b81a:	6838      	ldr	r0, [r7, #0]
 800b81c:	f7ff ff76 	bl	800b70c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b820:	bf00      	nop
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b832:	2300      	movs	r3, #0
 800b834:	617b      	str	r3, [r7, #20]
 800b836:	2300      	movs	r3, #0
 800b838:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d008      	beq.n	800b852 <pbuf_copy+0x2a>
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d005      	beq.n	800b852 <pbuf_copy+0x2a>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	891a      	ldrh	r2, [r3, #8]
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	891b      	ldrh	r3, [r3, #8]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d209      	bcs.n	800b866 <pbuf_copy+0x3e>
 800b852:	4b57      	ldr	r3, [pc, #348]	; (800b9b0 <pbuf_copy+0x188>)
 800b854:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b858:	4956      	ldr	r1, [pc, #344]	; (800b9b4 <pbuf_copy+0x18c>)
 800b85a:	4857      	ldr	r0, [pc, #348]	; (800b9b8 <pbuf_copy+0x190>)
 800b85c:	f00c fa52 	bl	8017d04 <iprintf>
 800b860:	f06f 030f 	mvn.w	r3, #15
 800b864:	e09f      	b.n	800b9a6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	895b      	ldrh	r3, [r3, #10]
 800b86a:	461a      	mov	r2, r3
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	1ad2      	subs	r2, r2, r3
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	895b      	ldrh	r3, [r3, #10]
 800b874:	4619      	mov	r1, r3
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	1acb      	subs	r3, r1, r3
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d306      	bcc.n	800b88c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	895b      	ldrh	r3, [r3, #10]
 800b882:	461a      	mov	r2, r3
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	60fb      	str	r3, [r7, #12]
 800b88a:	e005      	b.n	800b898 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	895b      	ldrh	r3, [r3, #10]
 800b890:	461a      	mov	r2, r3
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685a      	ldr	r2, [r3, #4]
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	18d0      	adds	r0, r2, r3
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	f00c f950 	bl	8017b50 <memcpy>
    offset_to += len;
 800b8b0:	697a      	ldr	r2, [r7, #20]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b8b8:	693a      	ldr	r2, [r7, #16]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	4413      	add	r3, r2
 800b8be:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	895b      	ldrh	r3, [r3, #10]
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d906      	bls.n	800b8da <pbuf_copy+0xb2>
 800b8cc:	4b38      	ldr	r3, [pc, #224]	; (800b9b0 <pbuf_copy+0x188>)
 800b8ce:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b8d2:	493a      	ldr	r1, [pc, #232]	; (800b9bc <pbuf_copy+0x194>)
 800b8d4:	4838      	ldr	r0, [pc, #224]	; (800b9b8 <pbuf_copy+0x190>)
 800b8d6:	f00c fa15 	bl	8017d04 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	895b      	ldrh	r3, [r3, #10]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d906      	bls.n	800b8f4 <pbuf_copy+0xcc>
 800b8e6:	4b32      	ldr	r3, [pc, #200]	; (800b9b0 <pbuf_copy+0x188>)
 800b8e8:	f240 32da 	movw	r2, #986	; 0x3da
 800b8ec:	4934      	ldr	r1, [pc, #208]	; (800b9c0 <pbuf_copy+0x198>)
 800b8ee:	4832      	ldr	r0, [pc, #200]	; (800b9b8 <pbuf_copy+0x190>)
 800b8f0:	f00c fa08 	bl	8017d04 <iprintf>
    if (offset_from >= p_from->len) {
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	895b      	ldrh	r3, [r3, #10]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d304      	bcc.n	800b90a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b900:	2300      	movs	r3, #0
 800b902:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	895b      	ldrh	r3, [r3, #10]
 800b90e:	461a      	mov	r2, r3
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	4293      	cmp	r3, r2
 800b914:	d114      	bne.n	800b940 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10c      	bne.n	800b940 <pbuf_copy+0x118>
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d009      	beq.n	800b940 <pbuf_copy+0x118>
 800b92c:	4b20      	ldr	r3, [pc, #128]	; (800b9b0 <pbuf_copy+0x188>)
 800b92e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b932:	4924      	ldr	r1, [pc, #144]	; (800b9c4 <pbuf_copy+0x19c>)
 800b934:	4820      	ldr	r0, [pc, #128]	; (800b9b8 <pbuf_copy+0x190>)
 800b936:	f00c f9e5 	bl	8017d04 <iprintf>
 800b93a:	f06f 030f 	mvn.w	r3, #15
 800b93e:	e032      	b.n	800b9a6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d013      	beq.n	800b96e <pbuf_copy+0x146>
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	895a      	ldrh	r2, [r3, #10]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	891b      	ldrh	r3, [r3, #8]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d10d      	bne.n	800b96e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d009      	beq.n	800b96e <pbuf_copy+0x146>
 800b95a:	4b15      	ldr	r3, [pc, #84]	; (800b9b0 <pbuf_copy+0x188>)
 800b95c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b960:	4919      	ldr	r1, [pc, #100]	; (800b9c8 <pbuf_copy+0x1a0>)
 800b962:	4815      	ldr	r0, [pc, #84]	; (800b9b8 <pbuf_copy+0x190>)
 800b964:	f00c f9ce 	bl	8017d04 <iprintf>
 800b968:	f06f 0305 	mvn.w	r3, #5
 800b96c:	e01b      	b.n	800b9a6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d013      	beq.n	800b99c <pbuf_copy+0x174>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	895a      	ldrh	r2, [r3, #10]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	891b      	ldrh	r3, [r3, #8]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d10d      	bne.n	800b99c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d009      	beq.n	800b99c <pbuf_copy+0x174>
 800b988:	4b09      	ldr	r3, [pc, #36]	; (800b9b0 <pbuf_copy+0x188>)
 800b98a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b98e:	490e      	ldr	r1, [pc, #56]	; (800b9c8 <pbuf_copy+0x1a0>)
 800b990:	4809      	ldr	r0, [pc, #36]	; (800b9b8 <pbuf_copy+0x190>)
 800b992:	f00c f9b7 	bl	8017d04 <iprintf>
 800b996:	f06f 0305 	mvn.w	r3, #5
 800b99a:	e004      	b.n	800b9a6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f47f af61 	bne.w	800b866 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3718      	adds	r7, #24
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	0801b12c 	.word	0x0801b12c
 800b9b4:	0801b3d4 	.word	0x0801b3d4
 800b9b8:	0801b18c 	.word	0x0801b18c
 800b9bc:	0801b404 	.word	0x0801b404
 800b9c0:	0801b41c 	.word	0x0801b41c
 800b9c4:	0801b438 	.word	0x0801b438
 800b9c8:	0801b448 	.word	0x0801b448

0800b9cc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b088      	sub	sp, #32
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	461a      	mov	r2, r3
 800b9da:	460b      	mov	r3, r1
 800b9dc:	80fb      	strh	r3, [r7, #6]
 800b9de:	4613      	mov	r3, r2
 800b9e0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d108      	bne.n	800ba02 <pbuf_copy_partial+0x36>
 800b9f0:	4b2b      	ldr	r3, [pc, #172]	; (800baa0 <pbuf_copy_partial+0xd4>)
 800b9f2:	f240 420a 	movw	r2, #1034	; 0x40a
 800b9f6:	492b      	ldr	r1, [pc, #172]	; (800baa4 <pbuf_copy_partial+0xd8>)
 800b9f8:	482b      	ldr	r0, [pc, #172]	; (800baa8 <pbuf_copy_partial+0xdc>)
 800b9fa:	f00c f983 	bl	8017d04 <iprintf>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	e04a      	b.n	800ba98 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d108      	bne.n	800ba1a <pbuf_copy_partial+0x4e>
 800ba08:	4b25      	ldr	r3, [pc, #148]	; (800baa0 <pbuf_copy_partial+0xd4>)
 800ba0a:	f240 420b 	movw	r2, #1035	; 0x40b
 800ba0e:	4927      	ldr	r1, [pc, #156]	; (800baac <pbuf_copy_partial+0xe0>)
 800ba10:	4825      	ldr	r0, [pc, #148]	; (800baa8 <pbuf_copy_partial+0xdc>)
 800ba12:	f00c f977 	bl	8017d04 <iprintf>
 800ba16:	2300      	movs	r3, #0
 800ba18:	e03e      	b.n	800ba98 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	61fb      	str	r3, [r7, #28]
 800ba1e:	e034      	b.n	800ba8a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ba20:	88bb      	ldrh	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00a      	beq.n	800ba3c <pbuf_copy_partial+0x70>
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	895b      	ldrh	r3, [r3, #10]
 800ba2a:	88ba      	ldrh	r2, [r7, #4]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d305      	bcc.n	800ba3c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	895b      	ldrh	r3, [r3, #10]
 800ba34:	88ba      	ldrh	r2, [r7, #4]
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	80bb      	strh	r3, [r7, #4]
 800ba3a:	e023      	b.n	800ba84 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	895a      	ldrh	r2, [r3, #10]
 800ba40:	88bb      	ldrh	r3, [r7, #4]
 800ba42:	1ad3      	subs	r3, r2, r3
 800ba44:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ba46:	8b3a      	ldrh	r2, [r7, #24]
 800ba48:	88fb      	ldrh	r3, [r7, #6]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d901      	bls.n	800ba52 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ba4e:	88fb      	ldrh	r3, [r7, #6]
 800ba50:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ba52:	8b7b      	ldrh	r3, [r7, #26]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	18d0      	adds	r0, r2, r3
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	685a      	ldr	r2, [r3, #4]
 800ba5c:	88bb      	ldrh	r3, [r7, #4]
 800ba5e:	4413      	add	r3, r2
 800ba60:	8b3a      	ldrh	r2, [r7, #24]
 800ba62:	4619      	mov	r1, r3
 800ba64:	f00c f874 	bl	8017b50 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ba68:	8afa      	ldrh	r2, [r7, #22]
 800ba6a:	8b3b      	ldrh	r3, [r7, #24]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ba70:	8b7a      	ldrh	r2, [r7, #26]
 800ba72:	8b3b      	ldrh	r3, [r7, #24]
 800ba74:	4413      	add	r3, r2
 800ba76:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ba78:	88fa      	ldrh	r2, [r7, #6]
 800ba7a:	8b3b      	ldrh	r3, [r7, #24]
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ba80:	2300      	movs	r3, #0
 800ba82:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ba84:	69fb      	ldr	r3, [r7, #28]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	61fb      	str	r3, [r7, #28]
 800ba8a:	88fb      	ldrh	r3, [r7, #6]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d002      	beq.n	800ba96 <pbuf_copy_partial+0xca>
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1c4      	bne.n	800ba20 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ba96:	8afb      	ldrh	r3, [r7, #22]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3720      	adds	r7, #32
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	0801b12c 	.word	0x0801b12c
 800baa4:	0801b474 	.word	0x0801b474
 800baa8:	0801b18c 	.word	0x0801b18c
 800baac:	0801b494 	.word	0x0801b494

0800bab0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	4603      	mov	r3, r0
 800bab8:	603a      	str	r2, [r7, #0]
 800baba:	71fb      	strb	r3, [r7, #7]
 800babc:	460b      	mov	r3, r1
 800babe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	8919      	ldrh	r1, [r3, #8]
 800bac4:	88ba      	ldrh	r2, [r7, #4]
 800bac6:	79fb      	ldrb	r3, [r7, #7]
 800bac8:	4618      	mov	r0, r3
 800baca:	f7ff fa95 	bl	800aff8 <pbuf_alloc>
 800bace:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d101      	bne.n	800bada <pbuf_clone+0x2a>
    return NULL;
 800bad6:	2300      	movs	r3, #0
 800bad8:	e011      	b.n	800bafe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f7ff fea3 	bl	800b828 <pbuf_copy>
 800bae2:	4603      	mov	r3, r0
 800bae4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bae6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d006      	beq.n	800bafc <pbuf_clone+0x4c>
 800baee:	4b06      	ldr	r3, [pc, #24]	; (800bb08 <pbuf_clone+0x58>)
 800baf0:	f240 5224 	movw	r2, #1316	; 0x524
 800baf4:	4905      	ldr	r1, [pc, #20]	; (800bb0c <pbuf_clone+0x5c>)
 800baf6:	4806      	ldr	r0, [pc, #24]	; (800bb10 <pbuf_clone+0x60>)
 800baf8:	f00c f904 	bl	8017d04 <iprintf>
  return q;
 800bafc:	68fb      	ldr	r3, [r7, #12]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	0801b12c 	.word	0x0801b12c
 800bb0c:	0801b5a0 	.word	0x0801b5a0
 800bb10:	0801b18c 	.word	0x0801b18c

0800bb14 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bb18:	f00c f90c 	bl	8017d34 <rand>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	4b01      	ldr	r3, [pc, #4]	; (800bb34 <tcp_init+0x20>)
 800bb2e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bb30:	bf00      	nop
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	24000028 	.word	0x24000028

0800bb38 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	7d1b      	ldrb	r3, [r3, #20]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d105      	bne.n	800bb54 <tcp_free+0x1c>
 800bb48:	4b06      	ldr	r3, [pc, #24]	; (800bb64 <tcp_free+0x2c>)
 800bb4a:	22d4      	movs	r2, #212	; 0xd4
 800bb4c:	4906      	ldr	r1, [pc, #24]	; (800bb68 <tcp_free+0x30>)
 800bb4e:	4807      	ldr	r0, [pc, #28]	; (800bb6c <tcp_free+0x34>)
 800bb50:	f00c f8d8 	bl	8017d04 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bb54:	6879      	ldr	r1, [r7, #4]
 800bb56:	2001      	movs	r0, #1
 800bb58:	f7fe fe8e 	bl	800a878 <memp_free>
}
 800bb5c:	bf00      	nop
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	0801b62c 	.word	0x0801b62c
 800bb68:	0801b65c 	.word	0x0801b65c
 800bb6c:	0801b670 	.word	0x0801b670

0800bb70 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	7d1b      	ldrb	r3, [r3, #20]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d105      	bne.n	800bb8c <tcp_free_listen+0x1c>
 800bb80:	4b06      	ldr	r3, [pc, #24]	; (800bb9c <tcp_free_listen+0x2c>)
 800bb82:	22df      	movs	r2, #223	; 0xdf
 800bb84:	4906      	ldr	r1, [pc, #24]	; (800bba0 <tcp_free_listen+0x30>)
 800bb86:	4807      	ldr	r0, [pc, #28]	; (800bba4 <tcp_free_listen+0x34>)
 800bb88:	f00c f8bc 	bl	8017d04 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bb8c:	6879      	ldr	r1, [r7, #4]
 800bb8e:	2002      	movs	r0, #2
 800bb90:	f7fe fe72 	bl	800a878 <memp_free>
}
 800bb94:	bf00      	nop
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	0801b62c 	.word	0x0801b62c
 800bba0:	0801b698 	.word	0x0801b698
 800bba4:	0801b670 	.word	0x0801b670

0800bba8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bbac:	f000 fea2 	bl	800c8f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bbb0:	4b07      	ldr	r3, [pc, #28]	; (800bbd0 <tcp_tmr+0x28>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <tcp_tmr+0x28>)
 800bbba:	701a      	strb	r2, [r3, #0]
 800bbbc:	4b04      	ldr	r3, [pc, #16]	; (800bbd0 <tcp_tmr+0x28>)
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	f003 0301 	and.w	r3, r3, #1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bbc8:	f000 fb54 	bl	800c274 <tcp_slowtmr>
  }
}
 800bbcc:	bf00      	nop
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	2400b695 	.word	0x2400b695

0800bbd4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d105      	bne.n	800bbf0 <tcp_remove_listener+0x1c>
 800bbe4:	4b0d      	ldr	r3, [pc, #52]	; (800bc1c <tcp_remove_listener+0x48>)
 800bbe6:	22ff      	movs	r2, #255	; 0xff
 800bbe8:	490d      	ldr	r1, [pc, #52]	; (800bc20 <tcp_remove_listener+0x4c>)
 800bbea:	480e      	ldr	r0, [pc, #56]	; (800bc24 <tcp_remove_listener+0x50>)
 800bbec:	f00c f88a 	bl	8017d04 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	60fb      	str	r3, [r7, #12]
 800bbf4:	e00a      	b.n	800bc0c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d102      	bne.n	800bc06 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	60fb      	str	r3, [r7, #12]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1f1      	bne.n	800bbf6 <tcp_remove_listener+0x22>
    }
  }
}
 800bc12:	bf00      	nop
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	0801b62c 	.word	0x0801b62c
 800bc20:	0801b6b4 	.word	0x0801b6b4
 800bc24:	0801b670 	.word	0x0801b670

0800bc28 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d106      	bne.n	800bc44 <tcp_listen_closed+0x1c>
 800bc36:	4b14      	ldr	r3, [pc, #80]	; (800bc88 <tcp_listen_closed+0x60>)
 800bc38:	f240 1211 	movw	r2, #273	; 0x111
 800bc3c:	4913      	ldr	r1, [pc, #76]	; (800bc8c <tcp_listen_closed+0x64>)
 800bc3e:	4814      	ldr	r0, [pc, #80]	; (800bc90 <tcp_listen_closed+0x68>)
 800bc40:	f00c f860 	bl	8017d04 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	7d1b      	ldrb	r3, [r3, #20]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d006      	beq.n	800bc5a <tcp_listen_closed+0x32>
 800bc4c:	4b0e      	ldr	r3, [pc, #56]	; (800bc88 <tcp_listen_closed+0x60>)
 800bc4e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bc52:	4910      	ldr	r1, [pc, #64]	; (800bc94 <tcp_listen_closed+0x6c>)
 800bc54:	480e      	ldr	r0, [pc, #56]	; (800bc90 <tcp_listen_closed+0x68>)
 800bc56:	f00c f855 	bl	8017d04 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	60fb      	str	r3, [r7, #12]
 800bc5e:	e00b      	b.n	800bc78 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bc60:	4a0d      	ldr	r2, [pc, #52]	; (800bc98 <tcp_listen_closed+0x70>)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	6879      	ldr	r1, [r7, #4]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7ff ffb1 	bl	800bbd4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3301      	adds	r3, #1
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2b03      	cmp	r3, #3
 800bc7c:	d9f0      	bls.n	800bc60 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bc7e:	bf00      	nop
 800bc80:	bf00      	nop
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	0801b62c 	.word	0x0801b62c
 800bc8c:	0801b6dc 	.word	0x0801b6dc
 800bc90:	0801b670 	.word	0x0801b670
 800bc94:	0801b6e8 	.word	0x0801b6e8
 800bc98:	0801d908 	.word	0x0801d908

0800bc9c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bc9c:	b5b0      	push	{r4, r5, r7, lr}
 800bc9e:	b088      	sub	sp, #32
 800bca0:	af04      	add	r7, sp, #16
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	460b      	mov	r3, r1
 800bca6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d106      	bne.n	800bcbc <tcp_close_shutdown+0x20>
 800bcae:	4b63      	ldr	r3, [pc, #396]	; (800be3c <tcp_close_shutdown+0x1a0>)
 800bcb0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bcb4:	4962      	ldr	r1, [pc, #392]	; (800be40 <tcp_close_shutdown+0x1a4>)
 800bcb6:	4863      	ldr	r0, [pc, #396]	; (800be44 <tcp_close_shutdown+0x1a8>)
 800bcb8:	f00c f824 	bl	8017d04 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bcbc:	78fb      	ldrb	r3, [r7, #3]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d066      	beq.n	800bd90 <tcp_close_shutdown+0xf4>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	7d1b      	ldrb	r3, [r3, #20]
 800bcc6:	2b04      	cmp	r3, #4
 800bcc8:	d003      	beq.n	800bcd2 <tcp_close_shutdown+0x36>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	7d1b      	ldrb	r3, [r3, #20]
 800bcce:	2b07      	cmp	r3, #7
 800bcd0:	d15e      	bne.n	800bd90 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d104      	bne.n	800bce4 <tcp_close_shutdown+0x48>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcde:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bce2:	d055      	beq.n	800bd90 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	8b5b      	ldrh	r3, [r3, #26]
 800bce8:	f003 0310 	and.w	r3, r3, #16
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d106      	bne.n	800bcfe <tcp_close_shutdown+0x62>
 800bcf0:	4b52      	ldr	r3, [pc, #328]	; (800be3c <tcp_close_shutdown+0x1a0>)
 800bcf2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bcf6:	4954      	ldr	r1, [pc, #336]	; (800be48 <tcp_close_shutdown+0x1ac>)
 800bcf8:	4852      	ldr	r0, [pc, #328]	; (800be44 <tcp_close_shutdown+0x1a8>)
 800bcfa:	f00c f803 	bl	8017d04 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bd06:	687d      	ldr	r5, [r7, #4]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	8ad2      	ldrh	r2, [r2, #22]
 800bd10:	6879      	ldr	r1, [r7, #4]
 800bd12:	8b09      	ldrh	r1, [r1, #24]
 800bd14:	9102      	str	r1, [sp, #8]
 800bd16:	9201      	str	r2, [sp, #4]
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	462b      	mov	r3, r5
 800bd1c:	4622      	mov	r2, r4
 800bd1e:	4601      	mov	r1, r0
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f004 fe8d 	bl	8010a40 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f001 f8c6 	bl	800ceb8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bd2c:	4b47      	ldr	r3, [pc, #284]	; (800be4c <tcp_close_shutdown+0x1b0>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d105      	bne.n	800bd42 <tcp_close_shutdown+0xa6>
 800bd36:	4b45      	ldr	r3, [pc, #276]	; (800be4c <tcp_close_shutdown+0x1b0>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	4a43      	ldr	r2, [pc, #268]	; (800be4c <tcp_close_shutdown+0x1b0>)
 800bd3e:	6013      	str	r3, [r2, #0]
 800bd40:	e013      	b.n	800bd6a <tcp_close_shutdown+0xce>
 800bd42:	4b42      	ldr	r3, [pc, #264]	; (800be4c <tcp_close_shutdown+0x1b0>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	60fb      	str	r3, [r7, #12]
 800bd48:	e00c      	b.n	800bd64 <tcp_close_shutdown+0xc8>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d104      	bne.n	800bd5e <tcp_close_shutdown+0xc2>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	68da      	ldr	r2, [r3, #12]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	60da      	str	r2, [r3, #12]
 800bd5c:	e005      	b.n	800bd6a <tcp_close_shutdown+0xce>
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	60fb      	str	r3, [r7, #12]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1ef      	bne.n	800bd4a <tcp_close_shutdown+0xae>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	60da      	str	r2, [r3, #12]
 800bd70:	4b37      	ldr	r3, [pc, #220]	; (800be50 <tcp_close_shutdown+0x1b4>)
 800bd72:	2201      	movs	r2, #1
 800bd74:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bd76:	4b37      	ldr	r3, [pc, #220]	; (800be54 <tcp_close_shutdown+0x1b8>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d102      	bne.n	800bd86 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bd80:	f003 fd5a 	bl	800f838 <tcp_trigger_input_pcb_close>
 800bd84:	e002      	b.n	800bd8c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f7ff fed6 	bl	800bb38 <tcp_free>
      }
      return ERR_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	e050      	b.n	800be32 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	7d1b      	ldrb	r3, [r3, #20]
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d03b      	beq.n	800be10 <tcp_close_shutdown+0x174>
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	dc44      	bgt.n	800be26 <tcp_close_shutdown+0x18a>
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d002      	beq.n	800bda6 <tcp_close_shutdown+0x10a>
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d02a      	beq.n	800bdfa <tcp_close_shutdown+0x15e>
 800bda4:	e03f      	b.n	800be26 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	8adb      	ldrh	r3, [r3, #22]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d021      	beq.n	800bdf2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bdae:	4b2a      	ldr	r3, [pc, #168]	; (800be58 <tcp_close_shutdown+0x1bc>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d105      	bne.n	800bdc4 <tcp_close_shutdown+0x128>
 800bdb8:	4b27      	ldr	r3, [pc, #156]	; (800be58 <tcp_close_shutdown+0x1bc>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	4a26      	ldr	r2, [pc, #152]	; (800be58 <tcp_close_shutdown+0x1bc>)
 800bdc0:	6013      	str	r3, [r2, #0]
 800bdc2:	e013      	b.n	800bdec <tcp_close_shutdown+0x150>
 800bdc4:	4b24      	ldr	r3, [pc, #144]	; (800be58 <tcp_close_shutdown+0x1bc>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	60bb      	str	r3, [r7, #8]
 800bdca:	e00c      	b.n	800bde6 <tcp_close_shutdown+0x14a>
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d104      	bne.n	800bde0 <tcp_close_shutdown+0x144>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	68da      	ldr	r2, [r3, #12]
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	60da      	str	r2, [r3, #12]
 800bdde:	e005      	b.n	800bdec <tcp_close_shutdown+0x150>
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	60bb      	str	r3, [r7, #8]
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1ef      	bne.n	800bdcc <tcp_close_shutdown+0x130>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f7ff fea0 	bl	800bb38 <tcp_free>
      break;
 800bdf8:	e01a      	b.n	800be30 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff ff14 	bl	800bc28 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800be00:	6879      	ldr	r1, [r7, #4]
 800be02:	4816      	ldr	r0, [pc, #88]	; (800be5c <tcp_close_shutdown+0x1c0>)
 800be04:	f001 f8a8 	bl	800cf58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7ff feb1 	bl	800bb70 <tcp_free_listen>
      break;
 800be0e:	e00f      	b.n	800be30 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800be10:	6879      	ldr	r1, [r7, #4]
 800be12:	480e      	ldr	r0, [pc, #56]	; (800be4c <tcp_close_shutdown+0x1b0>)
 800be14:	f001 f8a0 	bl	800cf58 <tcp_pcb_remove>
 800be18:	4b0d      	ldr	r3, [pc, #52]	; (800be50 <tcp_close_shutdown+0x1b4>)
 800be1a:	2201      	movs	r2, #1
 800be1c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7ff fe8a 	bl	800bb38 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800be24:	e004      	b.n	800be30 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f81a 	bl	800be60 <tcp_close_shutdown_fin>
 800be2c:	4603      	mov	r3, r0
 800be2e:	e000      	b.n	800be32 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bdb0      	pop	{r4, r5, r7, pc}
 800be3a:	bf00      	nop
 800be3c:	0801b62c 	.word	0x0801b62c
 800be40:	0801b700 	.word	0x0801b700
 800be44:	0801b670 	.word	0x0801b670
 800be48:	0801b720 	.word	0x0801b720
 800be4c:	2400ee0c 	.word	0x2400ee0c
 800be50:	2400ee08 	.word	0x2400ee08
 800be54:	2400ee20 	.word	0x2400ee20
 800be58:	2400ee18 	.word	0x2400ee18
 800be5c:	2400ee14 	.word	0x2400ee14

0800be60 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d106      	bne.n	800be7c <tcp_close_shutdown_fin+0x1c>
 800be6e:	4b2e      	ldr	r3, [pc, #184]	; (800bf28 <tcp_close_shutdown_fin+0xc8>)
 800be70:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800be74:	492d      	ldr	r1, [pc, #180]	; (800bf2c <tcp_close_shutdown_fin+0xcc>)
 800be76:	482e      	ldr	r0, [pc, #184]	; (800bf30 <tcp_close_shutdown_fin+0xd0>)
 800be78:	f00b ff44 	bl	8017d04 <iprintf>

  switch (pcb->state) {
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	7d1b      	ldrb	r3, [r3, #20]
 800be80:	2b07      	cmp	r3, #7
 800be82:	d020      	beq.n	800bec6 <tcp_close_shutdown_fin+0x66>
 800be84:	2b07      	cmp	r3, #7
 800be86:	dc2b      	bgt.n	800bee0 <tcp_close_shutdown_fin+0x80>
 800be88:	2b03      	cmp	r3, #3
 800be8a:	d002      	beq.n	800be92 <tcp_close_shutdown_fin+0x32>
 800be8c:	2b04      	cmp	r3, #4
 800be8e:	d00d      	beq.n	800beac <tcp_close_shutdown_fin+0x4c>
 800be90:	e026      	b.n	800bee0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f003 fee2 	bl	800fc5c <tcp_send_fin>
 800be98:	4603      	mov	r3, r0
 800be9a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800be9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d11f      	bne.n	800bee4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2205      	movs	r2, #5
 800bea8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800beaa:	e01b      	b.n	800bee4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f003 fed5 	bl	800fc5c <tcp_send_fin>
 800beb2:	4603      	mov	r3, r0
 800beb4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800beb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d114      	bne.n	800bee8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2205      	movs	r2, #5
 800bec2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bec4:	e010      	b.n	800bee8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f003 fec8 	bl	800fc5c <tcp_send_fin>
 800becc:	4603      	mov	r3, r0
 800bece:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d109      	bne.n	800beec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2209      	movs	r2, #9
 800bedc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bede:	e005      	b.n	800beec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bee0:	2300      	movs	r3, #0
 800bee2:	e01c      	b.n	800bf1e <tcp_close_shutdown_fin+0xbe>
      break;
 800bee4:	bf00      	nop
 800bee6:	e002      	b.n	800beee <tcp_close_shutdown_fin+0x8e>
      break;
 800bee8:	bf00      	nop
 800beea:	e000      	b.n	800beee <tcp_close_shutdown_fin+0x8e>
      break;
 800beec:	bf00      	nop
  }

  if (err == ERR_OK) {
 800beee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d103      	bne.n	800befe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f003 ffee 	bl	800fed8 <tcp_output>
 800befc:	e00d      	b.n	800bf1a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800befe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf06:	d108      	bne.n	800bf1a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	8b5b      	ldrh	r3, [r3, #26]
 800bf0c:	f043 0308 	orr.w	r3, r3, #8
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bf16:	2300      	movs	r3, #0
 800bf18:	e001      	b.n	800bf1e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bf1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	0801b62c 	.word	0x0801b62c
 800bf2c:	0801b6dc 	.word	0x0801b6dc
 800bf30:	0801b670 	.word	0x0801b670

0800bf34 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d109      	bne.n	800bf56 <tcp_close+0x22>
 800bf42:	4b0f      	ldr	r3, [pc, #60]	; (800bf80 <tcp_close+0x4c>)
 800bf44:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bf48:	490e      	ldr	r1, [pc, #56]	; (800bf84 <tcp_close+0x50>)
 800bf4a:	480f      	ldr	r0, [pc, #60]	; (800bf88 <tcp_close+0x54>)
 800bf4c:	f00b feda 	bl	8017d04 <iprintf>
 800bf50:	f06f 030f 	mvn.w	r3, #15
 800bf54:	e00f      	b.n	800bf76 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	7d1b      	ldrb	r3, [r3, #20]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d006      	beq.n	800bf6c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	8b5b      	ldrh	r3, [r3, #26]
 800bf62:	f043 0310 	orr.w	r3, r3, #16
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bf6c:	2101      	movs	r1, #1
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7ff fe94 	bl	800bc9c <tcp_close_shutdown>
 800bf74:	4603      	mov	r3, r0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	0801b62c 	.word	0x0801b62c
 800bf84:	0801b73c 	.word	0x0801b73c
 800bf88:	0801b670 	.word	0x0801b670

0800bf8c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b08e      	sub	sp, #56	; 0x38
 800bf90:	af04      	add	r7, sp, #16
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d107      	bne.n	800bfac <tcp_abandon+0x20>
 800bf9c:	4b52      	ldr	r3, [pc, #328]	; (800c0e8 <tcp_abandon+0x15c>)
 800bf9e:	f240 223d 	movw	r2, #573	; 0x23d
 800bfa2:	4952      	ldr	r1, [pc, #328]	; (800c0ec <tcp_abandon+0x160>)
 800bfa4:	4852      	ldr	r0, [pc, #328]	; (800c0f0 <tcp_abandon+0x164>)
 800bfa6:	f00b fead 	bl	8017d04 <iprintf>
 800bfaa:	e099      	b.n	800c0e0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	7d1b      	ldrb	r3, [r3, #20]
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d106      	bne.n	800bfc2 <tcp_abandon+0x36>
 800bfb4:	4b4c      	ldr	r3, [pc, #304]	; (800c0e8 <tcp_abandon+0x15c>)
 800bfb6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bfba:	494e      	ldr	r1, [pc, #312]	; (800c0f4 <tcp_abandon+0x168>)
 800bfbc:	484c      	ldr	r0, [pc, #304]	; (800c0f0 <tcp_abandon+0x164>)
 800bfbe:	f00b fea1 	bl	8017d04 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	7d1b      	ldrb	r3, [r3, #20]
 800bfc6:	2b0a      	cmp	r3, #10
 800bfc8:	d107      	bne.n	800bfda <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bfca:	6879      	ldr	r1, [r7, #4]
 800bfcc:	484a      	ldr	r0, [pc, #296]	; (800c0f8 <tcp_abandon+0x16c>)
 800bfce:	f000 ffc3 	bl	800cf58 <tcp_pcb_remove>
    tcp_free(pcb);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7ff fdb0 	bl	800bb38 <tcp_free>
 800bfd8:	e082      	b.n	800c0e0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfe6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bff4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	7d1b      	ldrb	r3, [r3, #20]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d126      	bne.n	800c052 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	8adb      	ldrh	r3, [r3, #22]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d02e      	beq.n	800c06a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c00c:	4b3b      	ldr	r3, [pc, #236]	; (800c0fc <tcp_abandon+0x170>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	429a      	cmp	r2, r3
 800c014:	d105      	bne.n	800c022 <tcp_abandon+0x96>
 800c016:	4b39      	ldr	r3, [pc, #228]	; (800c0fc <tcp_abandon+0x170>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	4a37      	ldr	r2, [pc, #220]	; (800c0fc <tcp_abandon+0x170>)
 800c01e:	6013      	str	r3, [r2, #0]
 800c020:	e013      	b.n	800c04a <tcp_abandon+0xbe>
 800c022:	4b36      	ldr	r3, [pc, #216]	; (800c0fc <tcp_abandon+0x170>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	61fb      	str	r3, [r7, #28]
 800c028:	e00c      	b.n	800c044 <tcp_abandon+0xb8>
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	429a      	cmp	r2, r3
 800c032:	d104      	bne.n	800c03e <tcp_abandon+0xb2>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68da      	ldr	r2, [r3, #12]
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	60da      	str	r2, [r3, #12]
 800c03c:	e005      	b.n	800c04a <tcp_abandon+0xbe>
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	61fb      	str	r3, [r7, #28]
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1ef      	bne.n	800c02a <tcp_abandon+0x9e>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2200      	movs	r2, #0
 800c04e:	60da      	str	r2, [r3, #12]
 800c050:	e00b      	b.n	800c06a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	8adb      	ldrh	r3, [r3, #22]
 800c05a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c05c:	6879      	ldr	r1, [r7, #4]
 800c05e:	4828      	ldr	r0, [pc, #160]	; (800c100 <tcp_abandon+0x174>)
 800c060:	f000 ff7a 	bl	800cf58 <tcp_pcb_remove>
 800c064:	4b27      	ldr	r3, [pc, #156]	; (800c104 <tcp_abandon+0x178>)
 800c066:	2201      	movs	r2, #1
 800c068:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d004      	beq.n	800c07c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c076:	4618      	mov	r0, r3
 800c078:	f000 fd1c 	bl	800cab4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c080:	2b00      	cmp	r3, #0
 800c082:	d004      	beq.n	800c08e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c088:	4618      	mov	r0, r3
 800c08a:	f000 fd13 	bl	800cab4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c092:	2b00      	cmp	r3, #0
 800c094:	d004      	beq.n	800c0a0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 fd0a 	bl	800cab4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00e      	beq.n	800c0c4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c0a6:	6879      	ldr	r1, [r7, #4]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	8b12      	ldrh	r2, [r2, #24]
 800c0b0:	9202      	str	r2, [sp, #8]
 800c0b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c0b4:	9201      	str	r2, [sp, #4]
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	697a      	ldr	r2, [r7, #20]
 800c0bc:	69b9      	ldr	r1, [r7, #24]
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f004 fcbe 	bl	8010a40 <tcp_rst>
    }
    last_state = pcb->state;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	7d1b      	ldrb	r3, [r3, #20]
 800c0c8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff fd34 	bl	800bb38 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d004      	beq.n	800c0e0 <tcp_abandon+0x154>
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	f06f 010c 	mvn.w	r1, #12
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	4798      	blx	r3
  }
}
 800c0e0:	3728      	adds	r7, #40	; 0x28
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	0801b62c 	.word	0x0801b62c
 800c0ec:	0801b770 	.word	0x0801b770
 800c0f0:	0801b670 	.word	0x0801b670
 800c0f4:	0801b78c 	.word	0x0801b78c
 800c0f8:	2400ee1c 	.word	0x2400ee1c
 800c0fc:	2400ee18 	.word	0x2400ee18
 800c100:	2400ee0c 	.word	0x2400ee0c
 800c104:	2400ee08 	.word	0x2400ee08

0800c108 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c110:	2101      	movs	r1, #1
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7ff ff3a 	bl	800bf8c <tcp_abandon>
}
 800c118:	bf00      	nop
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <tcp_update_rcv_ann_wnd+0x1c>
 800c12e:	4b25      	ldr	r3, [pc, #148]	; (800c1c4 <tcp_update_rcv_ann_wnd+0xa4>)
 800c130:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c134:	4924      	ldr	r1, [pc, #144]	; (800c1c8 <tcp_update_rcv_ann_wnd+0xa8>)
 800c136:	4825      	ldr	r0, [pc, #148]	; (800c1cc <tcp_update_rcv_ann_wnd+0xac>)
 800c138:	f00b fde4 	bl	8017d04 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c144:	4413      	add	r3, r2
 800c146:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c150:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c154:	bf28      	it	cs
 800c156:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c15a:	b292      	uxth	r2, r2
 800c15c:	4413      	add	r3, r2
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	1ad3      	subs	r3, r2, r3
 800c162:	2b00      	cmp	r3, #0
 800c164:	db08      	blt.n	800c178 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	e020      	b.n	800c1ba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c180:	1ad3      	subs	r3, r2, r3
 800c182:	2b00      	cmp	r3, #0
 800c184:	dd03      	ble.n	800c18e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c18c:	e014      	b.n	800c1b8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1a0:	d306      	bcc.n	800c1b0 <tcp_update_rcv_ann_wnd+0x90>
 800c1a2:	4b08      	ldr	r3, [pc, #32]	; (800c1c4 <tcp_update_rcv_ann_wnd+0xa4>)
 800c1a4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c1a8:	4909      	ldr	r1, [pc, #36]	; (800c1d0 <tcp_update_rcv_ann_wnd+0xb0>)
 800c1aa:	4808      	ldr	r0, [pc, #32]	; (800c1cc <tcp_update_rcv_ann_wnd+0xac>)
 800c1ac:	f00b fdaa 	bl	8017d04 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c1b8:	2300      	movs	r3, #0
  }
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	0801b62c 	.word	0x0801b62c
 800c1c8:	0801b888 	.word	0x0801b888
 800c1cc:	0801b670 	.word	0x0801b670
 800c1d0:	0801b8ac 	.word	0x0801b8ac

0800c1d4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d107      	bne.n	800c1f6 <tcp_recved+0x22>
 800c1e6:	4b1f      	ldr	r3, [pc, #124]	; (800c264 <tcp_recved+0x90>)
 800c1e8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c1ec:	491e      	ldr	r1, [pc, #120]	; (800c268 <tcp_recved+0x94>)
 800c1ee:	481f      	ldr	r0, [pc, #124]	; (800c26c <tcp_recved+0x98>)
 800c1f0:	f00b fd88 	bl	8017d04 <iprintf>
 800c1f4:	e032      	b.n	800c25c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	7d1b      	ldrb	r3, [r3, #20]
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d106      	bne.n	800c20c <tcp_recved+0x38>
 800c1fe:	4b19      	ldr	r3, [pc, #100]	; (800c264 <tcp_recved+0x90>)
 800c200:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c204:	491a      	ldr	r1, [pc, #104]	; (800c270 <tcp_recved+0x9c>)
 800c206:	4819      	ldr	r0, [pc, #100]	; (800c26c <tcp_recved+0x98>)
 800c208:	f00b fd7c 	bl	8017d04 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c210:	887b      	ldrh	r3, [r7, #2]
 800c212:	4413      	add	r3, r2
 800c214:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c216:	89fb      	ldrh	r3, [r7, #14]
 800c218:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c21c:	d804      	bhi.n	800c228 <tcp_recved+0x54>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c222:	89fa      	ldrh	r2, [r7, #14]
 800c224:	429a      	cmp	r2, r3
 800c226:	d204      	bcs.n	800c232 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c22e:	851a      	strh	r2, [r3, #40]	; 0x28
 800c230:	e002      	b.n	800c238 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	89fa      	ldrh	r2, [r7, #14]
 800c236:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7ff ff71 	bl	800c120 <tcp_update_rcv_ann_wnd>
 800c23e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c246:	d309      	bcc.n	800c25c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	8b5b      	ldrh	r3, [r3, #26]
 800c24c:	f043 0302 	orr.w	r3, r3, #2
 800c250:	b29a      	uxth	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f003 fe3e 	bl	800fed8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	0801b62c 	.word	0x0801b62c
 800c268:	0801b8c8 	.word	0x0801b8c8
 800c26c:	0801b670 	.word	0x0801b670
 800c270:	0801b8e0 	.word	0x0801b8e0

0800c274 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c274:	b5b0      	push	{r4, r5, r7, lr}
 800c276:	b090      	sub	sp, #64	; 0x40
 800c278:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c27a:	2300      	movs	r3, #0
 800c27c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c280:	4b94      	ldr	r3, [pc, #592]	; (800c4d4 <tcp_slowtmr+0x260>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3301      	adds	r3, #1
 800c286:	4a93      	ldr	r2, [pc, #588]	; (800c4d4 <tcp_slowtmr+0x260>)
 800c288:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c28a:	4b93      	ldr	r3, [pc, #588]	; (800c4d8 <tcp_slowtmr+0x264>)
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	3301      	adds	r3, #1
 800c290:	b2da      	uxtb	r2, r3
 800c292:	4b91      	ldr	r3, [pc, #580]	; (800c4d8 <tcp_slowtmr+0x264>)
 800c294:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c296:	2300      	movs	r3, #0
 800c298:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c29a:	4b90      	ldr	r3, [pc, #576]	; (800c4dc <tcp_slowtmr+0x268>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c2a0:	e29d      	b.n	800c7de <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a4:	7d1b      	ldrb	r3, [r3, #20]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d106      	bne.n	800c2b8 <tcp_slowtmr+0x44>
 800c2aa:	4b8d      	ldr	r3, [pc, #564]	; (800c4e0 <tcp_slowtmr+0x26c>)
 800c2ac:	f240 42be 	movw	r2, #1214	; 0x4be
 800c2b0:	498c      	ldr	r1, [pc, #560]	; (800c4e4 <tcp_slowtmr+0x270>)
 800c2b2:	488d      	ldr	r0, [pc, #564]	; (800c4e8 <tcp_slowtmr+0x274>)
 800c2b4:	f00b fd26 	bl	8017d04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ba:	7d1b      	ldrb	r3, [r3, #20]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d106      	bne.n	800c2ce <tcp_slowtmr+0x5a>
 800c2c0:	4b87      	ldr	r3, [pc, #540]	; (800c4e0 <tcp_slowtmr+0x26c>)
 800c2c2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c2c6:	4989      	ldr	r1, [pc, #548]	; (800c4ec <tcp_slowtmr+0x278>)
 800c2c8:	4887      	ldr	r0, [pc, #540]	; (800c4e8 <tcp_slowtmr+0x274>)
 800c2ca:	f00b fd1b 	bl	8017d04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d0:	7d1b      	ldrb	r3, [r3, #20]
 800c2d2:	2b0a      	cmp	r3, #10
 800c2d4:	d106      	bne.n	800c2e4 <tcp_slowtmr+0x70>
 800c2d6:	4b82      	ldr	r3, [pc, #520]	; (800c4e0 <tcp_slowtmr+0x26c>)
 800c2d8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c2dc:	4984      	ldr	r1, [pc, #528]	; (800c4f0 <tcp_slowtmr+0x27c>)
 800c2de:	4882      	ldr	r0, [pc, #520]	; (800c4e8 <tcp_slowtmr+0x274>)
 800c2e0:	f00b fd10 	bl	8017d04 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e6:	7f9a      	ldrb	r2, [r3, #30]
 800c2e8:	4b7b      	ldr	r3, [pc, #492]	; (800c4d8 <tcp_slowtmr+0x264>)
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d105      	bne.n	800c2fc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c2fa:	e270      	b.n	800c7de <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c2fc:	4b76      	ldr	r3, [pc, #472]	; (800c4d8 <tcp_slowtmr+0x264>)
 800c2fe:	781a      	ldrb	r2, [r3, #0]
 800c300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c302:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c304:	2300      	movs	r3, #0
 800c306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c312:	7d1b      	ldrb	r3, [r3, #20]
 800c314:	2b02      	cmp	r3, #2
 800c316:	d10a      	bne.n	800c32e <tcp_slowtmr+0xba>
 800c318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c31e:	2b05      	cmp	r3, #5
 800c320:	d905      	bls.n	800c32e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c326:	3301      	adds	r3, #1
 800c328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c32c:	e11e      	b.n	800c56c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c330:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c334:	2b0b      	cmp	r3, #11
 800c336:	d905      	bls.n	800c344 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c33c:	3301      	adds	r3, #1
 800c33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c342:	e113      	b.n	800c56c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c346:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d075      	beq.n	800c43a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c352:	2b00      	cmp	r3, #0
 800c354:	d006      	beq.n	800c364 <tcp_slowtmr+0xf0>
 800c356:	4b62      	ldr	r3, [pc, #392]	; (800c4e0 <tcp_slowtmr+0x26c>)
 800c358:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c35c:	4965      	ldr	r1, [pc, #404]	; (800c4f4 <tcp_slowtmr+0x280>)
 800c35e:	4862      	ldr	r0, [pc, #392]	; (800c4e8 <tcp_slowtmr+0x274>)
 800c360:	f00b fcd0 	bl	8017d04 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d106      	bne.n	800c37a <tcp_slowtmr+0x106>
 800c36c:	4b5c      	ldr	r3, [pc, #368]	; (800c4e0 <tcp_slowtmr+0x26c>)
 800c36e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c372:	4961      	ldr	r1, [pc, #388]	; (800c4f8 <tcp_slowtmr+0x284>)
 800c374:	485c      	ldr	r0, [pc, #368]	; (800c4e8 <tcp_slowtmr+0x274>)
 800c376:	f00b fcc5 	bl	8017d04 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c380:	2b0b      	cmp	r3, #11
 800c382:	d905      	bls.n	800c390 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c388:	3301      	adds	r3, #1
 800c38a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c38e:	e0ed      	b.n	800c56c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c392:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c396:	3b01      	subs	r3, #1
 800c398:	4a58      	ldr	r2, [pc, #352]	; (800c4fc <tcp_slowtmr+0x288>)
 800c39a:	5cd3      	ldrb	r3, [r2, r3]
 800c39c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c3a4:	7c7a      	ldrb	r2, [r7, #17]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d907      	bls.n	800c3ba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c3c0:	7c7a      	ldrb	r2, [r7, #17]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	f200 80d2 	bhi.w	800c56c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d108      	bne.n	800c3e8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c3d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3d8:	f004 fc26 	bl	8010c28 <tcp_zero_window_probe>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d014      	beq.n	800c40c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	623b      	str	r3, [r7, #32]
 800c3e6:	e011      	b.n	800c40c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3f2:	f003 faeb 	bl	800f9cc <tcp_split_unsent_seg>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d107      	bne.n	800c40c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c3fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3fe:	f003 fd6b 	bl	800fed8 <tcp_output>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d101      	bne.n	800c40c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c408:	2300      	movs	r3, #0
 800c40a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c40c:	6a3b      	ldr	r3, [r7, #32]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f000 80ac 	beq.w	800c56c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c416:	2200      	movs	r2, #0
 800c418:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c422:	2b06      	cmp	r3, #6
 800c424:	f200 80a2 	bhi.w	800c56c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c42e:	3301      	adds	r3, #1
 800c430:	b2da      	uxtb	r2, r3
 800c432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c434:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c438:	e098      	b.n	800c56c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c440:	2b00      	cmp	r3, #0
 800c442:	db0f      	blt.n	800c464 <tcp_slowtmr+0x1f0>
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c44a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c44e:	4293      	cmp	r3, r2
 800c450:	d008      	beq.n	800c464 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c454:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c458:	b29b      	uxth	r3, r3
 800c45a:	3301      	adds	r3, #1
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	b21a      	sxth	r2, r3
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c466:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c470:	429a      	cmp	r2, r3
 800c472:	db7b      	blt.n	800c56c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c476:	f004 f821 	bl	80104bc <tcp_rexmit_rto_prepare>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d007      	beq.n	800c490 <tcp_slowtmr+0x21c>
 800c480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c484:	2b00      	cmp	r3, #0
 800c486:	d171      	bne.n	800c56c <tcp_slowtmr+0x2f8>
 800c488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d06d      	beq.n	800c56c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c492:	7d1b      	ldrb	r3, [r3, #20]
 800c494:	2b02      	cmp	r3, #2
 800c496:	d03a      	beq.n	800c50e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c49e:	2b0c      	cmp	r3, #12
 800c4a0:	bf28      	it	cs
 800c4a2:	230c      	movcs	r3, #12
 800c4a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c4ac:	10db      	asrs	r3, r3, #3
 800c4ae:	b21b      	sxth	r3, r3
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c4b8:	4413      	add	r3, r2
 800c4ba:	7efa      	ldrb	r2, [r7, #27]
 800c4bc:	4910      	ldr	r1, [pc, #64]	; (800c500 <tcp_slowtmr+0x28c>)
 800c4be:	5c8a      	ldrb	r2, [r1, r2]
 800c4c0:	4093      	lsls	r3, r2
 800c4c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	dc1a      	bgt.n	800c504 <tcp_slowtmr+0x290>
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	b21a      	sxth	r2, r3
 800c4d2:	e019      	b.n	800c508 <tcp_slowtmr+0x294>
 800c4d4:	2400ee10 	.word	0x2400ee10
 800c4d8:	2400b696 	.word	0x2400b696
 800c4dc:	2400ee0c 	.word	0x2400ee0c
 800c4e0:	0801b62c 	.word	0x0801b62c
 800c4e4:	0801b970 	.word	0x0801b970
 800c4e8:	0801b670 	.word	0x0801b670
 800c4ec:	0801b99c 	.word	0x0801b99c
 800c4f0:	0801b9c8 	.word	0x0801b9c8
 800c4f4:	0801b9f8 	.word	0x0801b9f8
 800c4f8:	0801ba2c 	.word	0x0801ba2c
 800c4fc:	0801d900 	.word	0x0801d900
 800c500:	0801d8f0 	.word	0x0801d8f0
 800c504:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c510:	2200      	movs	r2, #0
 800c512:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c516:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c520:	4293      	cmp	r3, r2
 800c522:	bf28      	it	cs
 800c524:	4613      	movcs	r3, r2
 800c526:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c528:	8a7b      	ldrh	r3, [r7, #18]
 800c52a:	085b      	lsrs	r3, r3, #1
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c530:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c536:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c53e:	005b      	lsls	r3, r3, #1
 800c540:	b29b      	uxth	r3, r3
 800c542:	429a      	cmp	r2, r3
 800c544:	d206      	bcs.n	800c554 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c54a:	005b      	lsls	r3, r3, #1
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c550:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c556:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c560:	2200      	movs	r2, #0
 800c562:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c566:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c568:	f004 f818 	bl	801059c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56e:	7d1b      	ldrb	r3, [r3, #20]
 800c570:	2b06      	cmp	r3, #6
 800c572:	d111      	bne.n	800c598 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c576:	8b5b      	ldrh	r3, [r3, #26]
 800c578:	f003 0310 	and.w	r3, r3, #16
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00b      	beq.n	800c598 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c580:	4b9c      	ldr	r3, [pc, #624]	; (800c7f4 <tcp_slowtmr+0x580>)
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c586:	6a1b      	ldr	r3, [r3, #32]
 800c588:	1ad3      	subs	r3, r2, r3
 800c58a:	2b28      	cmp	r3, #40	; 0x28
 800c58c:	d904      	bls.n	800c598 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c58e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c592:	3301      	adds	r3, #1
 800c594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59a:	7a5b      	ldrb	r3, [r3, #9]
 800c59c:	f003 0308 	and.w	r3, r3, #8
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d04a      	beq.n	800c63a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c5a8:	2b04      	cmp	r3, #4
 800c5aa:	d003      	beq.n	800c5b4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c5b0:	2b07      	cmp	r3, #7
 800c5b2:	d142      	bne.n	800c63a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5b4:	4b8f      	ldr	r3, [pc, #572]	; (800c7f4 <tcp_slowtmr+0x580>)
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ba:	6a1b      	ldr	r3, [r3, #32]
 800c5bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c5c4:	4b8c      	ldr	r3, [pc, #560]	; (800c7f8 <tcp_slowtmr+0x584>)
 800c5c6:	440b      	add	r3, r1
 800c5c8:	498c      	ldr	r1, [pc, #560]	; (800c7fc <tcp_slowtmr+0x588>)
 800c5ca:	fba1 1303 	umull	r1, r3, r1, r3
 800c5ce:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d90a      	bls.n	800c5ea <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c5d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5d8:	3301      	adds	r3, #1
 800c5da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c5de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c5e8:	e027      	b.n	800c63a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5ea:	4b82      	ldr	r3, [pc, #520]	; (800c7f4 <tcp_slowtmr+0x580>)
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f0:	6a1b      	ldr	r3, [r3, #32]
 800c5f2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c600:	4618      	mov	r0, r3
 800c602:	4b7f      	ldr	r3, [pc, #508]	; (800c800 <tcp_slowtmr+0x58c>)
 800c604:	fb03 f300 	mul.w	r3, r3, r0
 800c608:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c60a:	497c      	ldr	r1, [pc, #496]	; (800c7fc <tcp_slowtmr+0x588>)
 800c60c:	fba1 1303 	umull	r1, r3, r1, r3
 800c610:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c612:	429a      	cmp	r2, r3
 800c614:	d911      	bls.n	800c63a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c618:	f004 fac6 	bl	8010ba8 <tcp_keepalive>
 800c61c:	4603      	mov	r3, r0
 800c61e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c622:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c626:	2b00      	cmp	r3, #0
 800c628:	d107      	bne.n	800c63a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c630:	3301      	adds	r3, #1
 800c632:	b2da      	uxtb	r2, r3
 800c634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c636:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d011      	beq.n	800c666 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c642:	4b6c      	ldr	r3, [pc, #432]	; (800c7f4 <tcp_slowtmr+0x580>)
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c648:	6a1b      	ldr	r3, [r3, #32]
 800c64a:	1ad2      	subs	r2, r2, r3
 800c64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c652:	4619      	mov	r1, r3
 800c654:	460b      	mov	r3, r1
 800c656:	005b      	lsls	r3, r3, #1
 800c658:	440b      	add	r3, r1
 800c65a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d302      	bcc.n	800c666 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c662:	f000 fddd 	bl	800d220 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c668:	7d1b      	ldrb	r3, [r3, #20]
 800c66a:	2b03      	cmp	r3, #3
 800c66c:	d10b      	bne.n	800c686 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c66e:	4b61      	ldr	r3, [pc, #388]	; (800c7f4 <tcp_slowtmr+0x580>)
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	6a1b      	ldr	r3, [r3, #32]
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	2b28      	cmp	r3, #40	; 0x28
 800c67a:	d904      	bls.n	800c686 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c680:	3301      	adds	r3, #1
 800c682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c688:	7d1b      	ldrb	r3, [r3, #20]
 800c68a:	2b09      	cmp	r3, #9
 800c68c:	d10b      	bne.n	800c6a6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c68e:	4b59      	ldr	r3, [pc, #356]	; (800c7f4 <tcp_slowtmr+0x580>)
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c694:	6a1b      	ldr	r3, [r3, #32]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	2bf0      	cmp	r3, #240	; 0xf0
 800c69a:	d904      	bls.n	800c6a6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c6a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d060      	beq.n	800c770 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6b4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c6b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6b8:	f000 fbfe 	bl	800ceb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d010      	beq.n	800c6e4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c6c2:	4b50      	ldr	r3, [pc, #320]	; (800c804 <tcp_slowtmr+0x590>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d106      	bne.n	800c6da <tcp_slowtmr+0x466>
 800c6cc:	4b4e      	ldr	r3, [pc, #312]	; (800c808 <tcp_slowtmr+0x594>)
 800c6ce:	f240 526d 	movw	r2, #1389	; 0x56d
 800c6d2:	494e      	ldr	r1, [pc, #312]	; (800c80c <tcp_slowtmr+0x598>)
 800c6d4:	484e      	ldr	r0, [pc, #312]	; (800c810 <tcp_slowtmr+0x59c>)
 800c6d6:	f00b fb15 	bl	8017d04 <iprintf>
        prev->next = pcb->next;
 800c6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6dc:	68da      	ldr	r2, [r3, #12]
 800c6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e0:	60da      	str	r2, [r3, #12]
 800c6e2:	e00f      	b.n	800c704 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c6e4:	4b47      	ldr	r3, [pc, #284]	; (800c804 <tcp_slowtmr+0x590>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d006      	beq.n	800c6fc <tcp_slowtmr+0x488>
 800c6ee:	4b46      	ldr	r3, [pc, #280]	; (800c808 <tcp_slowtmr+0x594>)
 800c6f0:	f240 5271 	movw	r2, #1393	; 0x571
 800c6f4:	4947      	ldr	r1, [pc, #284]	; (800c814 <tcp_slowtmr+0x5a0>)
 800c6f6:	4846      	ldr	r0, [pc, #280]	; (800c810 <tcp_slowtmr+0x59c>)
 800c6f8:	f00b fb04 	bl	8017d04 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	4a40      	ldr	r2, [pc, #256]	; (800c804 <tcp_slowtmr+0x590>)
 800c702:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c704:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d013      	beq.n	800c734 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c712:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c714:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	3304      	adds	r3, #4
 800c71a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c71c:	8ad2      	ldrh	r2, [r2, #22]
 800c71e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c720:	8b09      	ldrh	r1, [r1, #24]
 800c722:	9102      	str	r1, [sp, #8]
 800c724:	9201      	str	r2, [sp, #4]
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	462b      	mov	r3, r5
 800c72a:	4622      	mov	r2, r4
 800c72c:	4601      	mov	r1, r0
 800c72e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c730:	f004 f986 	bl	8010a40 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73c:	7d1b      	ldrb	r3, [r3, #20]
 800c73e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c742:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c74a:	6838      	ldr	r0, [r7, #0]
 800c74c:	f7ff f9f4 	bl	800bb38 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c750:	4b31      	ldr	r3, [pc, #196]	; (800c818 <tcp_slowtmr+0x5a4>)
 800c752:	2200      	movs	r2, #0
 800c754:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d004      	beq.n	800c766 <tcp_slowtmr+0x4f2>
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f06f 010c 	mvn.w	r1, #12
 800c762:	68b8      	ldr	r0, [r7, #8]
 800c764:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c766:	4b2c      	ldr	r3, [pc, #176]	; (800c818 <tcp_slowtmr+0x5a4>)
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d037      	beq.n	800c7de <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c76e:	e592      	b.n	800c296 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c772:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77c:	7f1b      	ldrb	r3, [r3, #28]
 800c77e:	3301      	adds	r3, #1
 800c780:	b2da      	uxtb	r2, r3
 800c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c784:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c788:	7f1a      	ldrb	r2, [r3, #28]
 800c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78c:	7f5b      	ldrb	r3, [r3, #29]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d325      	bcc.n	800c7de <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c794:	2200      	movs	r2, #0
 800c796:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c798:	4b1f      	ldr	r3, [pc, #124]	; (800c818 <tcp_slowtmr+0x5a4>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00b      	beq.n	800c7c0 <tcp_slowtmr+0x54c>
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7b0:	6912      	ldr	r2, [r2, #16]
 800c7b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7b4:	4610      	mov	r0, r2
 800c7b6:	4798      	blx	r3
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c7be:	e002      	b.n	800c7c6 <tcp_slowtmr+0x552>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c7c6:	4b14      	ldr	r3, [pc, #80]	; (800c818 <tcp_slowtmr+0x5a4>)
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d000      	beq.n	800c7d0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c7ce:	e562      	b.n	800c296 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c7d0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d102      	bne.n	800c7de <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c7d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7da:	f003 fb7d 	bl	800fed8 <tcp_output>
  while (pcb != NULL) {
 800c7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f47f ad5e 	bne.w	800c2a2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c7ea:	4b0c      	ldr	r3, [pc, #48]	; (800c81c <tcp_slowtmr+0x5a8>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c7f0:	e069      	b.n	800c8c6 <tcp_slowtmr+0x652>
 800c7f2:	bf00      	nop
 800c7f4:	2400ee10 	.word	0x2400ee10
 800c7f8:	000a4cb8 	.word	0x000a4cb8
 800c7fc:	10624dd3 	.word	0x10624dd3
 800c800:	000124f8 	.word	0x000124f8
 800c804:	2400ee0c 	.word	0x2400ee0c
 800c808:	0801b62c 	.word	0x0801b62c
 800c80c:	0801ba64 	.word	0x0801ba64
 800c810:	0801b670 	.word	0x0801b670
 800c814:	0801ba90 	.word	0x0801ba90
 800c818:	2400ee08 	.word	0x2400ee08
 800c81c:	2400ee1c 	.word	0x2400ee1c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c822:	7d1b      	ldrb	r3, [r3, #20]
 800c824:	2b0a      	cmp	r3, #10
 800c826:	d006      	beq.n	800c836 <tcp_slowtmr+0x5c2>
 800c828:	4b2b      	ldr	r3, [pc, #172]	; (800c8d8 <tcp_slowtmr+0x664>)
 800c82a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c82e:	492b      	ldr	r1, [pc, #172]	; (800c8dc <tcp_slowtmr+0x668>)
 800c830:	482b      	ldr	r0, [pc, #172]	; (800c8e0 <tcp_slowtmr+0x66c>)
 800c832:	f00b fa67 	bl	8017d04 <iprintf>
    pcb_remove = 0;
 800c836:	2300      	movs	r3, #0
 800c838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c83c:	4b29      	ldr	r3, [pc, #164]	; (800c8e4 <tcp_slowtmr+0x670>)
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c842:	6a1b      	ldr	r3, [r3, #32]
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	2bf0      	cmp	r3, #240	; 0xf0
 800c848:	d904      	bls.n	800c854 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c84a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c84e:	3301      	adds	r3, #1
 800c850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d02f      	beq.n	800c8bc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c85c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c85e:	f000 fb2b 	bl	800ceb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c864:	2b00      	cmp	r3, #0
 800c866:	d010      	beq.n	800c88a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c868:	4b1f      	ldr	r3, [pc, #124]	; (800c8e8 <tcp_slowtmr+0x674>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c86e:	429a      	cmp	r2, r3
 800c870:	d106      	bne.n	800c880 <tcp_slowtmr+0x60c>
 800c872:	4b19      	ldr	r3, [pc, #100]	; (800c8d8 <tcp_slowtmr+0x664>)
 800c874:	f240 52af 	movw	r2, #1455	; 0x5af
 800c878:	491c      	ldr	r1, [pc, #112]	; (800c8ec <tcp_slowtmr+0x678>)
 800c87a:	4819      	ldr	r0, [pc, #100]	; (800c8e0 <tcp_slowtmr+0x66c>)
 800c87c:	f00b fa42 	bl	8017d04 <iprintf>
        prev->next = pcb->next;
 800c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c882:	68da      	ldr	r2, [r3, #12]
 800c884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c886:	60da      	str	r2, [r3, #12]
 800c888:	e00f      	b.n	800c8aa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c88a:	4b17      	ldr	r3, [pc, #92]	; (800c8e8 <tcp_slowtmr+0x674>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c890:	429a      	cmp	r2, r3
 800c892:	d006      	beq.n	800c8a2 <tcp_slowtmr+0x62e>
 800c894:	4b10      	ldr	r3, [pc, #64]	; (800c8d8 <tcp_slowtmr+0x664>)
 800c896:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c89a:	4915      	ldr	r1, [pc, #84]	; (800c8f0 <tcp_slowtmr+0x67c>)
 800c89c:	4810      	ldr	r0, [pc, #64]	; (800c8e0 <tcp_slowtmr+0x66c>)
 800c89e:	f00b fa31 	bl	8017d04 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	4a10      	ldr	r2, [pc, #64]	; (800c8e8 <tcp_slowtmr+0x674>)
 800c8a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c8b4:	69f8      	ldr	r0, [r7, #28]
 800c8b6:	f7ff f93f 	bl	800bb38 <tcp_free>
 800c8ba:	e004      	b.n	800c8c6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1a9      	bne.n	800c820 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c8cc:	bf00      	nop
 800c8ce:	bf00      	nop
 800c8d0:	3730      	adds	r7, #48	; 0x30
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bdb0      	pop	{r4, r5, r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	0801b62c 	.word	0x0801b62c
 800c8dc:	0801babc 	.word	0x0801babc
 800c8e0:	0801b670 	.word	0x0801b670
 800c8e4:	2400ee10 	.word	0x2400ee10
 800c8e8:	2400ee1c 	.word	0x2400ee1c
 800c8ec:	0801baec 	.word	0x0801baec
 800c8f0:	0801bb14 	.word	0x0801bb14

0800c8f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c8fa:	4b2d      	ldr	r3, [pc, #180]	; (800c9b0 <tcp_fasttmr+0xbc>)
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	3301      	adds	r3, #1
 800c900:	b2da      	uxtb	r2, r3
 800c902:	4b2b      	ldr	r3, [pc, #172]	; (800c9b0 <tcp_fasttmr+0xbc>)
 800c904:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c906:	4b2b      	ldr	r3, [pc, #172]	; (800c9b4 <tcp_fasttmr+0xc0>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c90c:	e048      	b.n	800c9a0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	7f9a      	ldrb	r2, [r3, #30]
 800c912:	4b27      	ldr	r3, [pc, #156]	; (800c9b0 <tcp_fasttmr+0xbc>)
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	429a      	cmp	r2, r3
 800c918:	d03f      	beq.n	800c99a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c91a:	4b25      	ldr	r3, [pc, #148]	; (800c9b0 <tcp_fasttmr+0xbc>)
 800c91c:	781a      	ldrb	r2, [r3, #0]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	8b5b      	ldrh	r3, [r3, #26]
 800c926:	f003 0301 	and.w	r3, r3, #1
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d010      	beq.n	800c950 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	8b5b      	ldrh	r3, [r3, #26]
 800c932:	f043 0302 	orr.w	r3, r3, #2
 800c936:	b29a      	uxth	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f003 facb 	bl	800fed8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	8b5b      	ldrh	r3, [r3, #26]
 800c946:	f023 0303 	bic.w	r3, r3, #3
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	8b5b      	ldrh	r3, [r3, #26]
 800c954:	f003 0308 	and.w	r3, r3, #8
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d009      	beq.n	800c970 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	8b5b      	ldrh	r3, [r3, #26]
 800c960:	f023 0308 	bic.w	r3, r3, #8
 800c964:	b29a      	uxth	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7ff fa78 	bl	800be60 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00a      	beq.n	800c994 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c97e:	4b0e      	ldr	r3, [pc, #56]	; (800c9b8 <tcp_fasttmr+0xc4>)
 800c980:	2200      	movs	r2, #0
 800c982:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 f819 	bl	800c9bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c98a:	4b0b      	ldr	r3, [pc, #44]	; (800c9b8 <tcp_fasttmr+0xc4>)
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d000      	beq.n	800c994 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c992:	e7b8      	b.n	800c906 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	607b      	str	r3, [r7, #4]
 800c998:	e002      	b.n	800c9a0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1b3      	bne.n	800c90e <tcp_fasttmr+0x1a>
    }
  }
}
 800c9a6:	bf00      	nop
 800c9a8:	bf00      	nop
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	2400b696 	.word	0x2400b696
 800c9b4:	2400ee0c 	.word	0x2400ee0c
 800c9b8:	2400ee08 	.word	0x2400ee08

0800c9bc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c9bc:	b590      	push	{r4, r7, lr}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d109      	bne.n	800c9de <tcp_process_refused_data+0x22>
 800c9ca:	4b37      	ldr	r3, [pc, #220]	; (800caa8 <tcp_process_refused_data+0xec>)
 800c9cc:	f240 6209 	movw	r2, #1545	; 0x609
 800c9d0:	4936      	ldr	r1, [pc, #216]	; (800caac <tcp_process_refused_data+0xf0>)
 800c9d2:	4837      	ldr	r0, [pc, #220]	; (800cab0 <tcp_process_refused_data+0xf4>)
 800c9d4:	f00b f996 	bl	8017d04 <iprintf>
 800c9d8:	f06f 030f 	mvn.w	r3, #15
 800c9dc:	e060      	b.n	800caa0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9e2:	7b5b      	ldrb	r3, [r3, #13]
 800c9e4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9ea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00b      	beq.n	800ca14 <tcp_process_refused_data+0x58>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6918      	ldr	r0, [r3, #16]
 800ca06:	2300      	movs	r3, #0
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	6879      	ldr	r1, [r7, #4]
 800ca0c:	47a0      	blx	r4
 800ca0e:	4603      	mov	r3, r0
 800ca10:	73fb      	strb	r3, [r7, #15]
 800ca12:	e007      	b.n	800ca24 <tcp_process_refused_data+0x68>
 800ca14:	2300      	movs	r3, #0
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	6879      	ldr	r1, [r7, #4]
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	f000 f8a4 	bl	800cb68 <tcp_recv_null>
 800ca20:	4603      	mov	r3, r0
 800ca22:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ca24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d12a      	bne.n	800ca82 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ca2c:	7bbb      	ldrb	r3, [r7, #14]
 800ca2e:	f003 0320 	and.w	r3, r3, #32
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d033      	beq.n	800ca9e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca3a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca3e:	d005      	beq.n	800ca4c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca44:	3301      	adds	r3, #1
 800ca46:	b29a      	uxth	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00b      	beq.n	800ca6e <tcp_process_refused_data+0xb2>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6918      	ldr	r0, [r3, #16]
 800ca60:	2300      	movs	r3, #0
 800ca62:	2200      	movs	r2, #0
 800ca64:	6879      	ldr	r1, [r7, #4]
 800ca66:	47a0      	blx	r4
 800ca68:	4603      	mov	r3, r0
 800ca6a:	73fb      	strb	r3, [r7, #15]
 800ca6c:	e001      	b.n	800ca72 <tcp_process_refused_data+0xb6>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ca72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca76:	f113 0f0d 	cmn.w	r3, #13
 800ca7a:	d110      	bne.n	800ca9e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ca7c:	f06f 030c 	mvn.w	r3, #12
 800ca80:	e00e      	b.n	800caa0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ca82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca86:	f113 0f0d 	cmn.w	r3, #13
 800ca8a:	d102      	bne.n	800ca92 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ca8c:	f06f 030c 	mvn.w	r3, #12
 800ca90:	e006      	b.n	800caa0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68ba      	ldr	r2, [r7, #8]
 800ca96:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ca98:	f06f 0304 	mvn.w	r3, #4
 800ca9c:	e000      	b.n	800caa0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3714      	adds	r7, #20
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd90      	pop	{r4, r7, pc}
 800caa8:	0801b62c 	.word	0x0801b62c
 800caac:	0801bb3c 	.word	0x0801bb3c
 800cab0:	0801b670 	.word	0x0801b670

0800cab4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cabc:	e007      	b.n	800cace <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 f80a 	bl	800cade <tcp_seg_free>
    seg = next;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d1f4      	bne.n	800cabe <tcp_segs_free+0xa>
  }
}
 800cad4:	bf00      	nop
 800cad6:	bf00      	nop
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b082      	sub	sp, #8
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d00c      	beq.n	800cb06 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d004      	beq.n	800cafe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7fe fd61 	bl	800b5c0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cafe:	6879      	ldr	r1, [r7, #4]
 800cb00:	2003      	movs	r0, #3
 800cb02:	f7fd feb9 	bl	800a878 <memp_free>
  }
}
 800cb06:	bf00      	nop
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d106      	bne.n	800cb2c <tcp_seg_copy+0x1c>
 800cb1e:	4b0f      	ldr	r3, [pc, #60]	; (800cb5c <tcp_seg_copy+0x4c>)
 800cb20:	f240 6282 	movw	r2, #1666	; 0x682
 800cb24:	490e      	ldr	r1, [pc, #56]	; (800cb60 <tcp_seg_copy+0x50>)
 800cb26:	480f      	ldr	r0, [pc, #60]	; (800cb64 <tcp_seg_copy+0x54>)
 800cb28:	f00b f8ec 	bl	8017d04 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cb2c:	2003      	movs	r0, #3
 800cb2e:	f7fd fe2d 	bl	800a78c <memp_malloc>
 800cb32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d101      	bne.n	800cb3e <tcp_seg_copy+0x2e>
    return NULL;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	e00a      	b.n	800cb54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cb3e:	2210      	movs	r2, #16
 800cb40:	6879      	ldr	r1, [r7, #4]
 800cb42:	68f8      	ldr	r0, [r7, #12]
 800cb44:	f00b f804 	bl	8017b50 <memcpy>
  pbuf_ref(cseg->p);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7fe fddd 	bl	800b70c <pbuf_ref>
  return cseg;
 800cb52:	68fb      	ldr	r3, [r7, #12]
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3710      	adds	r7, #16
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	0801b62c 	.word	0x0801b62c
 800cb60:	0801bb80 	.word	0x0801bb80
 800cb64:	0801b670 	.word	0x0801b670

0800cb68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d109      	bne.n	800cb90 <tcp_recv_null+0x28>
 800cb7c:	4b12      	ldr	r3, [pc, #72]	; (800cbc8 <tcp_recv_null+0x60>)
 800cb7e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cb82:	4912      	ldr	r1, [pc, #72]	; (800cbcc <tcp_recv_null+0x64>)
 800cb84:	4812      	ldr	r0, [pc, #72]	; (800cbd0 <tcp_recv_null+0x68>)
 800cb86:	f00b f8bd 	bl	8017d04 <iprintf>
 800cb8a:	f06f 030f 	mvn.w	r3, #15
 800cb8e:	e016      	b.n	800cbbe <tcp_recv_null+0x56>

  if (p != NULL) {
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d009      	beq.n	800cbaa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	891b      	ldrh	r3, [r3, #8]
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	68b8      	ldr	r0, [r7, #8]
 800cb9e:	f7ff fb19 	bl	800c1d4 <tcp_recved>
    pbuf_free(p);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7fe fd0c 	bl	800b5c0 <pbuf_free>
 800cba8:	e008      	b.n	800cbbc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cbaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d104      	bne.n	800cbbc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cbb2:	68b8      	ldr	r0, [r7, #8]
 800cbb4:	f7ff f9be 	bl	800bf34 <tcp_close>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	e000      	b.n	800cbbe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cbbc:	2300      	movs	r3, #0
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	0801b62c 	.word	0x0801b62c
 800cbcc:	0801bb9c 	.word	0x0801bb9c
 800cbd0:	0801b670 	.word	0x0801b670

0800cbd4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b086      	sub	sp, #24
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cbde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	db01      	blt.n	800cbea <tcp_kill_prio+0x16>
 800cbe6:	79fb      	ldrb	r3, [r7, #7]
 800cbe8:	e000      	b.n	800cbec <tcp_kill_prio+0x18>
 800cbea:	237f      	movs	r3, #127	; 0x7f
 800cbec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cbee:	7afb      	ldrb	r3, [r7, #11]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d034      	beq.n	800cc5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cbf4:	7afb      	ldrb	r3, [r7, #11]
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc02:	4b19      	ldr	r3, [pc, #100]	; (800cc68 <tcp_kill_prio+0x94>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	617b      	str	r3, [r7, #20]
 800cc08:	e01f      	b.n	800cc4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	7d5b      	ldrb	r3, [r3, #21]
 800cc0e:	7afa      	ldrb	r2, [r7, #11]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d80c      	bhi.n	800cc2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cc18:	7afa      	ldrb	r2, [r7, #11]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d112      	bne.n	800cc44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cc1e:	4b13      	ldr	r3, [pc, #76]	; (800cc6c <tcp_kill_prio+0x98>)
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	6a1b      	ldr	r3, [r3, #32]
 800cc26:	1ad3      	subs	r3, r2, r3
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d80a      	bhi.n	800cc44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cc2e:	4b0f      	ldr	r3, [pc, #60]	; (800cc6c <tcp_kill_prio+0x98>)
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	6a1b      	ldr	r3, [r3, #32]
 800cc36:	1ad3      	subs	r3, r2, r3
 800cc38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	7d5b      	ldrb	r3, [r3, #21]
 800cc42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	617b      	str	r3, [r7, #20]
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1dc      	bne.n	800cc0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d004      	beq.n	800cc60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cc56:	6938      	ldr	r0, [r7, #16]
 800cc58:	f7ff fa56 	bl	800c108 <tcp_abort>
 800cc5c:	e000      	b.n	800cc60 <tcp_kill_prio+0x8c>
    return;
 800cc5e:	bf00      	nop
  }
}
 800cc60:	3718      	adds	r7, #24
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	2400ee0c 	.word	0x2400ee0c
 800cc6c:	2400ee10 	.word	0x2400ee10

0800cc70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b086      	sub	sp, #24
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	4603      	mov	r3, r0
 800cc78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cc7a:	79fb      	ldrb	r3, [r7, #7]
 800cc7c:	2b08      	cmp	r3, #8
 800cc7e:	d009      	beq.n	800cc94 <tcp_kill_state+0x24>
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	2b09      	cmp	r3, #9
 800cc84:	d006      	beq.n	800cc94 <tcp_kill_state+0x24>
 800cc86:	4b1a      	ldr	r3, [pc, #104]	; (800ccf0 <tcp_kill_state+0x80>)
 800cc88:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800cc8c:	4919      	ldr	r1, [pc, #100]	; (800ccf4 <tcp_kill_state+0x84>)
 800cc8e:	481a      	ldr	r0, [pc, #104]	; (800ccf8 <tcp_kill_state+0x88>)
 800cc90:	f00b f838 	bl	8017d04 <iprintf>

  inactivity = 0;
 800cc94:	2300      	movs	r3, #0
 800cc96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc9c:	4b17      	ldr	r3, [pc, #92]	; (800ccfc <tcp_kill_state+0x8c>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	617b      	str	r3, [r7, #20]
 800cca2:	e017      	b.n	800ccd4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	7d1b      	ldrb	r3, [r3, #20]
 800cca8:	79fa      	ldrb	r2, [r7, #7]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d10f      	bne.n	800ccce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ccae:	4b14      	ldr	r3, [pc, #80]	; (800cd00 <tcp_kill_state+0x90>)
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	6a1b      	ldr	r3, [r3, #32]
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	68fa      	ldr	r2, [r7, #12]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d807      	bhi.n	800ccce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ccbe:	4b10      	ldr	r3, [pc, #64]	; (800cd00 <tcp_kill_state+0x90>)
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	6a1b      	ldr	r3, [r3, #32]
 800ccc6:	1ad3      	subs	r3, r2, r3
 800ccc8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	617b      	str	r3, [r7, #20]
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d1e4      	bne.n	800cca4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d003      	beq.n	800cce8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cce0:	2100      	movs	r1, #0
 800cce2:	6938      	ldr	r0, [r7, #16]
 800cce4:	f7ff f952 	bl	800bf8c <tcp_abandon>
  }
}
 800cce8:	bf00      	nop
 800ccea:	3718      	adds	r7, #24
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	0801b62c 	.word	0x0801b62c
 800ccf4:	0801bbb8 	.word	0x0801bbb8
 800ccf8:	0801b670 	.word	0x0801b670
 800ccfc:	2400ee0c 	.word	0x2400ee0c
 800cd00:	2400ee10 	.word	0x2400ee10

0800cd04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd12:	4b12      	ldr	r3, [pc, #72]	; (800cd5c <tcp_kill_timewait+0x58>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	e012      	b.n	800cd40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cd1a:	4b11      	ldr	r3, [pc, #68]	; (800cd60 <tcp_kill_timewait+0x5c>)
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	6a1b      	ldr	r3, [r3, #32]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d807      	bhi.n	800cd3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cd2a:	4b0d      	ldr	r3, [pc, #52]	; (800cd60 <tcp_kill_timewait+0x5c>)
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	1ad3      	subs	r3, r2, r3
 800cd34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	60fb      	str	r3, [r7, #12]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d1e9      	bne.n	800cd1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d002      	beq.n	800cd52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cd4c:	68b8      	ldr	r0, [r7, #8]
 800cd4e:	f7ff f9db 	bl	800c108 <tcp_abort>
  }
}
 800cd52:	bf00      	nop
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	2400ee1c 	.word	0x2400ee1c
 800cd60:	2400ee10 	.word	0x2400ee10

0800cd64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cd6a:	4b10      	ldr	r3, [pc, #64]	; (800cdac <tcp_handle_closepend+0x48>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cd70:	e014      	b.n	800cd9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	8b5b      	ldrh	r3, [r3, #26]
 800cd7c:	f003 0308 	and.w	r3, r3, #8
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d009      	beq.n	800cd98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	8b5b      	ldrh	r3, [r3, #26]
 800cd88:	f023 0308 	bic.w	r3, r3, #8
 800cd8c:	b29a      	uxth	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7ff f864 	bl	800be60 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1e7      	bne.n	800cd72 <tcp_handle_closepend+0xe>
  }
}
 800cda2:	bf00      	nop
 800cda4:	bf00      	nop
 800cda6:	3708      	adds	r7, #8
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	2400ee0c 	.word	0x2400ee0c

0800cdb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdba:	2001      	movs	r0, #1
 800cdbc:	f7fd fce6 	bl	800a78c <memp_malloc>
 800cdc0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d126      	bne.n	800ce16 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cdc8:	f7ff ffcc 	bl	800cd64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cdcc:	f7ff ff9a 	bl	800cd04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdd0:	2001      	movs	r0, #1
 800cdd2:	f7fd fcdb 	bl	800a78c <memp_malloc>
 800cdd6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d11b      	bne.n	800ce16 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800cdde:	2009      	movs	r0, #9
 800cde0:	f7ff ff46 	bl	800cc70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cde4:	2001      	movs	r0, #1
 800cde6:	f7fd fcd1 	bl	800a78c <memp_malloc>
 800cdea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d111      	bne.n	800ce16 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800cdf2:	2008      	movs	r0, #8
 800cdf4:	f7ff ff3c 	bl	800cc70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdf8:	2001      	movs	r0, #1
 800cdfa:	f7fd fcc7 	bl	800a78c <memp_malloc>
 800cdfe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d107      	bne.n	800ce16 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ce06:	79fb      	ldrb	r3, [r7, #7]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7ff fee3 	bl	800cbd4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce0e:	2001      	movs	r0, #1
 800ce10:	f7fd fcbc 	bl	800a78c <memp_malloc>
 800ce14:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d03f      	beq.n	800ce9c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ce1c:	229c      	movs	r2, #156	; 0x9c
 800ce1e:	2100      	movs	r1, #0
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f00a febd 	bl	8017ba0 <memset>
    pcb->prio = prio;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	79fa      	ldrb	r2, [r7, #7]
 800ce2a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ce32:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ce3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	22ff      	movs	r2, #255	; 0xff
 800ce4a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ce52:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2206      	movs	r2, #6
 800ce58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2206      	movs	r2, #6
 800ce60:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce68:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ce72:	4b0d      	ldr	r3, [pc, #52]	; (800cea8 <tcp_alloc+0xf8>)
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ce7a:	4b0c      	ldr	r3, [pc, #48]	; (800ceac <tcp_alloc+0xfc>)
 800ce7c:	781a      	ldrb	r2, [r3, #0]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ce88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	4a08      	ldr	r2, [pc, #32]	; (800ceb0 <tcp_alloc+0x100>)
 800ce90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	4a07      	ldr	r2, [pc, #28]	; (800ceb4 <tcp_alloc+0x104>)
 800ce98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	2400ee10 	.word	0x2400ee10
 800ceac:	2400b696 	.word	0x2400b696
 800ceb0:	0800cb69 	.word	0x0800cb69
 800ceb4:	006ddd00 	.word	0x006ddd00

0800ceb8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d107      	bne.n	800ced6 <tcp_pcb_purge+0x1e>
 800cec6:	4b21      	ldr	r3, [pc, #132]	; (800cf4c <tcp_pcb_purge+0x94>)
 800cec8:	f640 0251 	movw	r2, #2129	; 0x851
 800cecc:	4920      	ldr	r1, [pc, #128]	; (800cf50 <tcp_pcb_purge+0x98>)
 800cece:	4821      	ldr	r0, [pc, #132]	; (800cf54 <tcp_pcb_purge+0x9c>)
 800ced0:	f00a ff18 	bl	8017d04 <iprintf>
 800ced4:	e037      	b.n	800cf46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	7d1b      	ldrb	r3, [r3, #20]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d033      	beq.n	800cf46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cee2:	2b0a      	cmp	r3, #10
 800cee4:	d02f      	beq.n	800cf46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d02b      	beq.n	800cf46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d007      	beq.n	800cf06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fe fb60 	bl	800b5c0 <pbuf_free>
      pcb->refused_data = NULL;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d002      	beq.n	800cf14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 f986 	bl	800d220 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf1a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7ff fdc7 	bl	800cab4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7ff fdc2 	bl	800cab4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	66da      	str	r2, [r3, #108]	; 0x6c
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cf46:	3708      	adds	r7, #8
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	0801b62c 	.word	0x0801b62c
 800cf50:	0801bc78 	.word	0x0801bc78
 800cf54:	0801b670 	.word	0x0801b670

0800cf58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d106      	bne.n	800cf76 <tcp_pcb_remove+0x1e>
 800cf68:	4b3e      	ldr	r3, [pc, #248]	; (800d064 <tcp_pcb_remove+0x10c>)
 800cf6a:	f640 0283 	movw	r2, #2179	; 0x883
 800cf6e:	493e      	ldr	r1, [pc, #248]	; (800d068 <tcp_pcb_remove+0x110>)
 800cf70:	483e      	ldr	r0, [pc, #248]	; (800d06c <tcp_pcb_remove+0x114>)
 800cf72:	f00a fec7 	bl	8017d04 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d106      	bne.n	800cf8a <tcp_pcb_remove+0x32>
 800cf7c:	4b39      	ldr	r3, [pc, #228]	; (800d064 <tcp_pcb_remove+0x10c>)
 800cf7e:	f640 0284 	movw	r2, #2180	; 0x884
 800cf82:	493b      	ldr	r1, [pc, #236]	; (800d070 <tcp_pcb_remove+0x118>)
 800cf84:	4839      	ldr	r0, [pc, #228]	; (800d06c <tcp_pcb_remove+0x114>)
 800cf86:	f00a febd 	bl	8017d04 <iprintf>

  TCP_RMV(pcblist, pcb);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	683a      	ldr	r2, [r7, #0]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d105      	bne.n	800cfa0 <tcp_pcb_remove+0x48>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	68da      	ldr	r2, [r3, #12]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	601a      	str	r2, [r3, #0]
 800cf9e:	e013      	b.n	800cfc8 <tcp_pcb_remove+0x70>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	60fb      	str	r3, [r7, #12]
 800cfa6:	e00c      	b.n	800cfc2 <tcp_pcb_remove+0x6a>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	683a      	ldr	r2, [r7, #0]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d104      	bne.n	800cfbc <tcp_pcb_remove+0x64>
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	68da      	ldr	r2, [r3, #12]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	60da      	str	r2, [r3, #12]
 800cfba:	e005      	b.n	800cfc8 <tcp_pcb_remove+0x70>
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	60fb      	str	r3, [r7, #12]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1ef      	bne.n	800cfa8 <tcp_pcb_remove+0x50>
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cfce:	6838      	ldr	r0, [r7, #0]
 800cfd0:	f7ff ff72 	bl	800ceb8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	7d1b      	ldrb	r3, [r3, #20]
 800cfd8:	2b0a      	cmp	r3, #10
 800cfda:	d013      	beq.n	800d004 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d00f      	beq.n	800d004 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	8b5b      	ldrh	r3, [r3, #26]
 800cfe8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d009      	beq.n	800d004 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	8b5b      	ldrh	r3, [r3, #26]
 800cff4:	f043 0302 	orr.w	r3, r3, #2
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cffe:	6838      	ldr	r0, [r7, #0]
 800d000:	f002 ff6a 	bl	800fed8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	7d1b      	ldrb	r3, [r3, #20]
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d020      	beq.n	800d04e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d010:	2b00      	cmp	r3, #0
 800d012:	d006      	beq.n	800d022 <tcp_pcb_remove+0xca>
 800d014:	4b13      	ldr	r3, [pc, #76]	; (800d064 <tcp_pcb_remove+0x10c>)
 800d016:	f640 0293 	movw	r2, #2195	; 0x893
 800d01a:	4916      	ldr	r1, [pc, #88]	; (800d074 <tcp_pcb_remove+0x11c>)
 800d01c:	4813      	ldr	r0, [pc, #76]	; (800d06c <tcp_pcb_remove+0x114>)
 800d01e:	f00a fe71 	bl	8017d04 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d026:	2b00      	cmp	r3, #0
 800d028:	d006      	beq.n	800d038 <tcp_pcb_remove+0xe0>
 800d02a:	4b0e      	ldr	r3, [pc, #56]	; (800d064 <tcp_pcb_remove+0x10c>)
 800d02c:	f640 0294 	movw	r2, #2196	; 0x894
 800d030:	4911      	ldr	r1, [pc, #68]	; (800d078 <tcp_pcb_remove+0x120>)
 800d032:	480e      	ldr	r0, [pc, #56]	; (800d06c <tcp_pcb_remove+0x114>)
 800d034:	f00a fe66 	bl	8017d04 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d006      	beq.n	800d04e <tcp_pcb_remove+0xf6>
 800d040:	4b08      	ldr	r3, [pc, #32]	; (800d064 <tcp_pcb_remove+0x10c>)
 800d042:	f640 0296 	movw	r2, #2198	; 0x896
 800d046:	490d      	ldr	r1, [pc, #52]	; (800d07c <tcp_pcb_remove+0x124>)
 800d048:	4808      	ldr	r0, [pc, #32]	; (800d06c <tcp_pcb_remove+0x114>)
 800d04a:	f00a fe5b 	bl	8017d04 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	2200      	movs	r2, #0
 800d052:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	2200      	movs	r2, #0
 800d058:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d05a:	bf00      	nop
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	0801b62c 	.word	0x0801b62c
 800d068:	0801bc94 	.word	0x0801bc94
 800d06c:	0801b670 	.word	0x0801b670
 800d070:	0801bcb0 	.word	0x0801bcb0
 800d074:	0801bcd0 	.word	0x0801bcd0
 800d078:	0801bce8 	.word	0x0801bce8
 800d07c:	0801bd04 	.word	0x0801bd04

0800d080 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d106      	bne.n	800d09c <tcp_next_iss+0x1c>
 800d08e:	4b0a      	ldr	r3, [pc, #40]	; (800d0b8 <tcp_next_iss+0x38>)
 800d090:	f640 02af 	movw	r2, #2223	; 0x8af
 800d094:	4909      	ldr	r1, [pc, #36]	; (800d0bc <tcp_next_iss+0x3c>)
 800d096:	480a      	ldr	r0, [pc, #40]	; (800d0c0 <tcp_next_iss+0x40>)
 800d098:	f00a fe34 	bl	8017d04 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d09c:	4b09      	ldr	r3, [pc, #36]	; (800d0c4 <tcp_next_iss+0x44>)
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	4b09      	ldr	r3, [pc, #36]	; (800d0c8 <tcp_next_iss+0x48>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	4a07      	ldr	r2, [pc, #28]	; (800d0c4 <tcp_next_iss+0x44>)
 800d0a8:	6013      	str	r3, [r2, #0]
  return iss;
 800d0aa:	4b06      	ldr	r3, [pc, #24]	; (800d0c4 <tcp_next_iss+0x44>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3708      	adds	r7, #8
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	0801b62c 	.word	0x0801b62c
 800d0bc:	0801bd1c 	.word	0x0801bd1c
 800d0c0:	0801b670 	.word	0x0801b670
 800d0c4:	2400002c 	.word	0x2400002c
 800d0c8:	2400ee10 	.word	0x2400ee10

0800d0cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b086      	sub	sp, #24
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	607a      	str	r2, [r7, #4]
 800d0d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d106      	bne.n	800d0ee <tcp_eff_send_mss_netif+0x22>
 800d0e0:	4b14      	ldr	r3, [pc, #80]	; (800d134 <tcp_eff_send_mss_netif+0x68>)
 800d0e2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d0e6:	4914      	ldr	r1, [pc, #80]	; (800d138 <tcp_eff_send_mss_netif+0x6c>)
 800d0e8:	4814      	ldr	r0, [pc, #80]	; (800d13c <tcp_eff_send_mss_netif+0x70>)
 800d0ea:	f00a fe0b 	bl	8017d04 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d101      	bne.n	800d0f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d0f4:	89fb      	ldrh	r3, [r7, #14]
 800d0f6:	e019      	b.n	800d12c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d0fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d0fe:	8afb      	ldrh	r3, [r7, #22]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d012      	beq.n	800d12a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d104:	2328      	movs	r3, #40	; 0x28
 800d106:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d108:	8afa      	ldrh	r2, [r7, #22]
 800d10a:	8abb      	ldrh	r3, [r7, #20]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d904      	bls.n	800d11a <tcp_eff_send_mss_netif+0x4e>
 800d110:	8afa      	ldrh	r2, [r7, #22]
 800d112:	8abb      	ldrh	r3, [r7, #20]
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	b29b      	uxth	r3, r3
 800d118:	e000      	b.n	800d11c <tcp_eff_send_mss_netif+0x50>
 800d11a:	2300      	movs	r3, #0
 800d11c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d11e:	8a7a      	ldrh	r2, [r7, #18]
 800d120:	89fb      	ldrh	r3, [r7, #14]
 800d122:	4293      	cmp	r3, r2
 800d124:	bf28      	it	cs
 800d126:	4613      	movcs	r3, r2
 800d128:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d12a:	89fb      	ldrh	r3, [r7, #14]
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3718      	adds	r7, #24
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	0801b62c 	.word	0x0801b62c
 800d138:	0801bd38 	.word	0x0801bd38
 800d13c:	0801b670 	.word	0x0801b670

0800d140 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d119      	bne.n	800d188 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d154:	4b10      	ldr	r3, [pc, #64]	; (800d198 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d156:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d15a:	4910      	ldr	r1, [pc, #64]	; (800d19c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d15c:	4810      	ldr	r0, [pc, #64]	; (800d1a0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d15e:	f00a fdd1 	bl	8017d04 <iprintf>

  while (pcb != NULL) {
 800d162:	e011      	b.n	800d188 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d108      	bne.n	800d182 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f7fe ffc6 	bl	800c108 <tcp_abort>
      pcb = next;
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	60fb      	str	r3, [r7, #12]
 800d180:	e002      	b.n	800d188 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d1ea      	bne.n	800d164 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d18e:	bf00      	nop
 800d190:	bf00      	nop
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	0801b62c 	.word	0x0801b62c
 800d19c:	0801bd60 	.word	0x0801bd60
 800d1a0:	0801b670 	.word	0x0801b670

0800d1a4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d02a      	beq.n	800d20a <tcp_netif_ip_addr_changed+0x66>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d026      	beq.n	800d20a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d1bc:	4b15      	ldr	r3, [pc, #84]	; (800d214 <tcp_netif_ip_addr_changed+0x70>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f7ff ffbc 	bl	800d140 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d1c8:	4b13      	ldr	r3, [pc, #76]	; (800d218 <tcp_netif_ip_addr_changed+0x74>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f7ff ffb6 	bl	800d140 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d017      	beq.n	800d20a <tcp_netif_ip_addr_changed+0x66>
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d013      	beq.n	800d20a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d1e2:	4b0e      	ldr	r3, [pc, #56]	; (800d21c <tcp_netif_ip_addr_changed+0x78>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	60fb      	str	r3, [r7, #12]
 800d1e8:	e00c      	b.n	800d204 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d103      	bne.n	800d1fe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	60fb      	str	r3, [r7, #12]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1ef      	bne.n	800d1ea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d20a:	bf00      	nop
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	2400ee0c 	.word	0x2400ee0c
 800d218:	2400ee18 	.word	0x2400ee18
 800d21c:	2400ee14 	.word	0x2400ee14

0800d220 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d007      	beq.n	800d240 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d234:	4618      	mov	r0, r3
 800d236:	f7ff fc3d 	bl	800cab4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d240:	bf00      	nop
 800d242:	3708      	adds	r7, #8
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d248:	b590      	push	{r4, r7, lr}
 800d24a:	b08d      	sub	sp, #52	; 0x34
 800d24c:	af04      	add	r7, sp, #16
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d105      	bne.n	800d264 <tcp_input+0x1c>
 800d258:	4b9b      	ldr	r3, [pc, #620]	; (800d4c8 <tcp_input+0x280>)
 800d25a:	2283      	movs	r2, #131	; 0x83
 800d25c:	499b      	ldr	r1, [pc, #620]	; (800d4cc <tcp_input+0x284>)
 800d25e:	489c      	ldr	r0, [pc, #624]	; (800d4d0 <tcp_input+0x288>)
 800d260:	f00a fd50 	bl	8017d04 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	4a9a      	ldr	r2, [pc, #616]	; (800d4d4 <tcp_input+0x28c>)
 800d26a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	895b      	ldrh	r3, [r3, #10]
 800d270:	2b13      	cmp	r3, #19
 800d272:	f240 83c4 	bls.w	800d9fe <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d276:	4b98      	ldr	r3, [pc, #608]	; (800d4d8 <tcp_input+0x290>)
 800d278:	695b      	ldr	r3, [r3, #20]
 800d27a:	4a97      	ldr	r2, [pc, #604]	; (800d4d8 <tcp_input+0x290>)
 800d27c:	6812      	ldr	r2, [r2, #0]
 800d27e:	4611      	mov	r1, r2
 800d280:	4618      	mov	r0, r3
 800d282:	f005 ffad 	bl	80131e0 <ip4_addr_isbroadcast_u32>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	f040 83ba 	bne.w	800da02 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d28e:	4b92      	ldr	r3, [pc, #584]	; (800d4d8 <tcp_input+0x290>)
 800d290:	695b      	ldr	r3, [r3, #20]
 800d292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d296:	2be0      	cmp	r3, #224	; 0xe0
 800d298:	f000 83b3 	beq.w	800da02 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d29c:	4b8d      	ldr	r3, [pc, #564]	; (800d4d4 <tcp_input+0x28c>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	899b      	ldrh	r3, [r3, #12]
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fc fd9d 	bl	8009de4 <lwip_htons>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	0b1b      	lsrs	r3, r3, #12
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d2b6:	7cbb      	ldrb	r3, [r7, #18]
 800d2b8:	2b13      	cmp	r3, #19
 800d2ba:	f240 83a4 	bls.w	800da06 <tcp_input+0x7be>
 800d2be:	7cbb      	ldrb	r3, [r7, #18]
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	891b      	ldrh	r3, [r3, #8]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	f200 839d 	bhi.w	800da06 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d2cc:	7cbb      	ldrb	r3, [r7, #18]
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	3b14      	subs	r3, #20
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	4b81      	ldr	r3, [pc, #516]	; (800d4dc <tcp_input+0x294>)
 800d2d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d2d8:	4b81      	ldr	r3, [pc, #516]	; (800d4e0 <tcp_input+0x298>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	895a      	ldrh	r2, [r3, #10]
 800d2e2:	7cbb      	ldrb	r3, [r7, #18]
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d309      	bcc.n	800d2fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d2ea:	4b7c      	ldr	r3, [pc, #496]	; (800d4dc <tcp_input+0x294>)
 800d2ec:	881a      	ldrh	r2, [r3, #0]
 800d2ee:	4b7d      	ldr	r3, [pc, #500]	; (800d4e4 <tcp_input+0x29c>)
 800d2f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d2f2:	7cbb      	ldrb	r3, [r7, #18]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f7fe f8dc 	bl	800b4b4 <pbuf_remove_header>
 800d2fc:	e04e      	b.n	800d39c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d105      	bne.n	800d312 <tcp_input+0xca>
 800d306:	4b70      	ldr	r3, [pc, #448]	; (800d4c8 <tcp_input+0x280>)
 800d308:	22c2      	movs	r2, #194	; 0xc2
 800d30a:	4977      	ldr	r1, [pc, #476]	; (800d4e8 <tcp_input+0x2a0>)
 800d30c:	4870      	ldr	r0, [pc, #448]	; (800d4d0 <tcp_input+0x288>)
 800d30e:	f00a fcf9 	bl	8017d04 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d312:	2114      	movs	r1, #20
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f7fe f8cd 	bl	800b4b4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	895a      	ldrh	r2, [r3, #10]
 800d31e:	4b71      	ldr	r3, [pc, #452]	; (800d4e4 <tcp_input+0x29c>)
 800d320:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d322:	4b6e      	ldr	r3, [pc, #440]	; (800d4dc <tcp_input+0x294>)
 800d324:	881a      	ldrh	r2, [r3, #0]
 800d326:	4b6f      	ldr	r3, [pc, #444]	; (800d4e4 <tcp_input+0x29c>)
 800d328:	881b      	ldrh	r3, [r3, #0]
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d32e:	4b6d      	ldr	r3, [pc, #436]	; (800d4e4 <tcp_input+0x29c>)
 800d330:	881b      	ldrh	r3, [r3, #0]
 800d332:	4619      	mov	r1, r3
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7fe f8bd 	bl	800b4b4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	895b      	ldrh	r3, [r3, #10]
 800d340:	8a3a      	ldrh	r2, [r7, #16]
 800d342:	429a      	cmp	r2, r3
 800d344:	f200 8361 	bhi.w	800da0a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	4a64      	ldr	r2, [pc, #400]	; (800d4e0 <tcp_input+0x298>)
 800d350:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	8a3a      	ldrh	r2, [r7, #16]
 800d358:	4611      	mov	r1, r2
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fe f8aa 	bl	800b4b4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	891a      	ldrh	r2, [r3, #8]
 800d364:	8a3b      	ldrh	r3, [r7, #16]
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	b29a      	uxth	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	895b      	ldrh	r3, [r3, #10]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d005      	beq.n	800d382 <tcp_input+0x13a>
 800d376:	4b54      	ldr	r3, [pc, #336]	; (800d4c8 <tcp_input+0x280>)
 800d378:	22df      	movs	r2, #223	; 0xdf
 800d37a:	495c      	ldr	r1, [pc, #368]	; (800d4ec <tcp_input+0x2a4>)
 800d37c:	4854      	ldr	r0, [pc, #336]	; (800d4d0 <tcp_input+0x288>)
 800d37e:	f00a fcc1 	bl	8017d04 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	891a      	ldrh	r2, [r3, #8]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	891b      	ldrh	r3, [r3, #8]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d005      	beq.n	800d39c <tcp_input+0x154>
 800d390:	4b4d      	ldr	r3, [pc, #308]	; (800d4c8 <tcp_input+0x280>)
 800d392:	22e0      	movs	r2, #224	; 0xe0
 800d394:	4956      	ldr	r1, [pc, #344]	; (800d4f0 <tcp_input+0x2a8>)
 800d396:	484e      	ldr	r0, [pc, #312]	; (800d4d0 <tcp_input+0x288>)
 800d398:	f00a fcb4 	bl	8017d04 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d39c:	4b4d      	ldr	r3, [pc, #308]	; (800d4d4 <tcp_input+0x28c>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	881b      	ldrh	r3, [r3, #0]
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	4a4b      	ldr	r2, [pc, #300]	; (800d4d4 <tcp_input+0x28c>)
 800d3a6:	6814      	ldr	r4, [r2, #0]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7fc fd1b 	bl	8009de4 <lwip_htons>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d3b2:	4b48      	ldr	r3, [pc, #288]	; (800d4d4 <tcp_input+0x28c>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	885b      	ldrh	r3, [r3, #2]
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	4a46      	ldr	r2, [pc, #280]	; (800d4d4 <tcp_input+0x28c>)
 800d3bc:	6814      	ldr	r4, [r2, #0]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7fc fd10 	bl	8009de4 <lwip_htons>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d3c8:	4b42      	ldr	r3, [pc, #264]	; (800d4d4 <tcp_input+0x28c>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	4a41      	ldr	r2, [pc, #260]	; (800d4d4 <tcp_input+0x28c>)
 800d3d0:	6814      	ldr	r4, [r2, #0]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fc fd1b 	bl	8009e0e <lwip_htonl>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	6063      	str	r3, [r4, #4]
 800d3dc:	6863      	ldr	r3, [r4, #4]
 800d3de:	4a45      	ldr	r2, [pc, #276]	; (800d4f4 <tcp_input+0x2ac>)
 800d3e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d3e2:	4b3c      	ldr	r3, [pc, #240]	; (800d4d4 <tcp_input+0x28c>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	4a3a      	ldr	r2, [pc, #232]	; (800d4d4 <tcp_input+0x28c>)
 800d3ea:	6814      	ldr	r4, [r2, #0]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fc fd0e 	bl	8009e0e <lwip_htonl>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	60a3      	str	r3, [r4, #8]
 800d3f6:	68a3      	ldr	r3, [r4, #8]
 800d3f8:	4a3f      	ldr	r2, [pc, #252]	; (800d4f8 <tcp_input+0x2b0>)
 800d3fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d3fc:	4b35      	ldr	r3, [pc, #212]	; (800d4d4 <tcp_input+0x28c>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	89db      	ldrh	r3, [r3, #14]
 800d402:	b29b      	uxth	r3, r3
 800d404:	4a33      	ldr	r2, [pc, #204]	; (800d4d4 <tcp_input+0x28c>)
 800d406:	6814      	ldr	r4, [r2, #0]
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fc fceb 	bl	8009de4 <lwip_htons>
 800d40e:	4603      	mov	r3, r0
 800d410:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d412:	4b30      	ldr	r3, [pc, #192]	; (800d4d4 <tcp_input+0x28c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	899b      	ldrh	r3, [r3, #12]
 800d418:	b29b      	uxth	r3, r3
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7fc fce2 	bl	8009de4 <lwip_htons>
 800d420:	4603      	mov	r3, r0
 800d422:	b2db      	uxtb	r3, r3
 800d424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d428:	b2da      	uxtb	r2, r3
 800d42a:	4b34      	ldr	r3, [pc, #208]	; (800d4fc <tcp_input+0x2b4>)
 800d42c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	891a      	ldrh	r2, [r3, #8]
 800d432:	4b33      	ldr	r3, [pc, #204]	; (800d500 <tcp_input+0x2b8>)
 800d434:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d436:	4b31      	ldr	r3, [pc, #196]	; (800d4fc <tcp_input+0x2b4>)
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	f003 0303 	and.w	r3, r3, #3
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d00c      	beq.n	800d45c <tcp_input+0x214>
    tcplen++;
 800d442:	4b2f      	ldr	r3, [pc, #188]	; (800d500 <tcp_input+0x2b8>)
 800d444:	881b      	ldrh	r3, [r3, #0]
 800d446:	3301      	adds	r3, #1
 800d448:	b29a      	uxth	r2, r3
 800d44a:	4b2d      	ldr	r3, [pc, #180]	; (800d500 <tcp_input+0x2b8>)
 800d44c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	891a      	ldrh	r2, [r3, #8]
 800d452:	4b2b      	ldr	r3, [pc, #172]	; (800d500 <tcp_input+0x2b8>)
 800d454:	881b      	ldrh	r3, [r3, #0]
 800d456:	429a      	cmp	r2, r3
 800d458:	f200 82d9 	bhi.w	800da0e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d45c:	2300      	movs	r3, #0
 800d45e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d460:	4b28      	ldr	r3, [pc, #160]	; (800d504 <tcp_input+0x2bc>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	61fb      	str	r3, [r7, #28]
 800d466:	e09d      	b.n	800d5a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	7d1b      	ldrb	r3, [r3, #20]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d105      	bne.n	800d47c <tcp_input+0x234>
 800d470:	4b15      	ldr	r3, [pc, #84]	; (800d4c8 <tcp_input+0x280>)
 800d472:	22fb      	movs	r2, #251	; 0xfb
 800d474:	4924      	ldr	r1, [pc, #144]	; (800d508 <tcp_input+0x2c0>)
 800d476:	4816      	ldr	r0, [pc, #88]	; (800d4d0 <tcp_input+0x288>)
 800d478:	f00a fc44 	bl	8017d04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	7d1b      	ldrb	r3, [r3, #20]
 800d480:	2b0a      	cmp	r3, #10
 800d482:	d105      	bne.n	800d490 <tcp_input+0x248>
 800d484:	4b10      	ldr	r3, [pc, #64]	; (800d4c8 <tcp_input+0x280>)
 800d486:	22fc      	movs	r2, #252	; 0xfc
 800d488:	4920      	ldr	r1, [pc, #128]	; (800d50c <tcp_input+0x2c4>)
 800d48a:	4811      	ldr	r0, [pc, #68]	; (800d4d0 <tcp_input+0x288>)
 800d48c:	f00a fc3a 	bl	8017d04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	7d1b      	ldrb	r3, [r3, #20]
 800d494:	2b01      	cmp	r3, #1
 800d496:	d105      	bne.n	800d4a4 <tcp_input+0x25c>
 800d498:	4b0b      	ldr	r3, [pc, #44]	; (800d4c8 <tcp_input+0x280>)
 800d49a:	22fd      	movs	r2, #253	; 0xfd
 800d49c:	491c      	ldr	r1, [pc, #112]	; (800d510 <tcp_input+0x2c8>)
 800d49e:	480c      	ldr	r0, [pc, #48]	; (800d4d0 <tcp_input+0x288>)
 800d4a0:	f00a fc30 	bl	8017d04 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	7a1b      	ldrb	r3, [r3, #8]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d033      	beq.n	800d514 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	7a1a      	ldrb	r2, [r3, #8]
 800d4b0:	4b09      	ldr	r3, [pc, #36]	; (800d4d8 <tcp_input+0x290>)
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d029      	beq.n	800d514 <tcp_input+0x2cc>
      prev = pcb;
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	61bb      	str	r3, [r7, #24]
      continue;
 800d4c4:	e06b      	b.n	800d59e <tcp_input+0x356>
 800d4c6:	bf00      	nop
 800d4c8:	0801bd94 	.word	0x0801bd94
 800d4cc:	0801bdc8 	.word	0x0801bdc8
 800d4d0:	0801bde0 	.word	0x0801bde0
 800d4d4:	2400b6a8 	.word	0x2400b6a8
 800d4d8:	2400bdac 	.word	0x2400bdac
 800d4dc:	2400b6ac 	.word	0x2400b6ac
 800d4e0:	2400b6b0 	.word	0x2400b6b0
 800d4e4:	2400b6ae 	.word	0x2400b6ae
 800d4e8:	0801be08 	.word	0x0801be08
 800d4ec:	0801be18 	.word	0x0801be18
 800d4f0:	0801be24 	.word	0x0801be24
 800d4f4:	2400b6b8 	.word	0x2400b6b8
 800d4f8:	2400b6bc 	.word	0x2400b6bc
 800d4fc:	2400b6c4 	.word	0x2400b6c4
 800d500:	2400b6c2 	.word	0x2400b6c2
 800d504:	2400ee0c 	.word	0x2400ee0c
 800d508:	0801be44 	.word	0x0801be44
 800d50c:	0801be6c 	.word	0x0801be6c
 800d510:	0801be98 	.word	0x0801be98
    }

    if (pcb->remote_port == tcphdr->src &&
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	8b1a      	ldrh	r2, [r3, #24]
 800d518:	4b94      	ldr	r3, [pc, #592]	; (800d76c <tcp_input+0x524>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	881b      	ldrh	r3, [r3, #0]
 800d51e:	b29b      	uxth	r3, r3
 800d520:	429a      	cmp	r2, r3
 800d522:	d13a      	bne.n	800d59a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d524:	69fb      	ldr	r3, [r7, #28]
 800d526:	8ada      	ldrh	r2, [r3, #22]
 800d528:	4b90      	ldr	r3, [pc, #576]	; (800d76c <tcp_input+0x524>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	885b      	ldrh	r3, [r3, #2]
 800d52e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d530:	429a      	cmp	r2, r3
 800d532:	d132      	bne.n	800d59a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	685a      	ldr	r2, [r3, #4]
 800d538:	4b8d      	ldr	r3, [pc, #564]	; (800d770 <tcp_input+0x528>)
 800d53a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d12c      	bne.n	800d59a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	4b8a      	ldr	r3, [pc, #552]	; (800d770 <tcp_input+0x528>)
 800d546:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d548:	429a      	cmp	r2, r3
 800d54a:	d126      	bne.n	800d59a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	69fa      	ldr	r2, [r7, #28]
 800d552:	429a      	cmp	r2, r3
 800d554:	d106      	bne.n	800d564 <tcp_input+0x31c>
 800d556:	4b87      	ldr	r3, [pc, #540]	; (800d774 <tcp_input+0x52c>)
 800d558:	f240 120d 	movw	r2, #269	; 0x10d
 800d55c:	4986      	ldr	r1, [pc, #536]	; (800d778 <tcp_input+0x530>)
 800d55e:	4887      	ldr	r0, [pc, #540]	; (800d77c <tcp_input+0x534>)
 800d560:	f00a fbd0 	bl	8017d04 <iprintf>
      if (prev != NULL) {
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00a      	beq.n	800d580 <tcp_input+0x338>
        prev->next = pcb->next;
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	68da      	ldr	r2, [r3, #12]
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d572:	4b83      	ldr	r3, [pc, #524]	; (800d780 <tcp_input+0x538>)
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d57a:	4a81      	ldr	r2, [pc, #516]	; (800d780 <tcp_input+0x538>)
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	69fa      	ldr	r2, [r7, #28]
 800d586:	429a      	cmp	r2, r3
 800d588:	d111      	bne.n	800d5ae <tcp_input+0x366>
 800d58a:	4b7a      	ldr	r3, [pc, #488]	; (800d774 <tcp_input+0x52c>)
 800d58c:	f240 1215 	movw	r2, #277	; 0x115
 800d590:	497c      	ldr	r1, [pc, #496]	; (800d784 <tcp_input+0x53c>)
 800d592:	487a      	ldr	r0, [pc, #488]	; (800d77c <tcp_input+0x534>)
 800d594:	f00a fbb6 	bl	8017d04 <iprintf>
      break;
 800d598:	e009      	b.n	800d5ae <tcp_input+0x366>
    }
    prev = pcb;
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	61fb      	str	r3, [r7, #28]
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	f47f af5e 	bne.w	800d468 <tcp_input+0x220>
 800d5ac:	e000      	b.n	800d5b0 <tcp_input+0x368>
      break;
 800d5ae:	bf00      	nop
  }

  if (pcb == NULL) {
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	f040 8095 	bne.w	800d6e2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5b8:	4b73      	ldr	r3, [pc, #460]	; (800d788 <tcp_input+0x540>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	61fb      	str	r3, [r7, #28]
 800d5be:	e03f      	b.n	800d640 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	7d1b      	ldrb	r3, [r3, #20]
 800d5c4:	2b0a      	cmp	r3, #10
 800d5c6:	d006      	beq.n	800d5d6 <tcp_input+0x38e>
 800d5c8:	4b6a      	ldr	r3, [pc, #424]	; (800d774 <tcp_input+0x52c>)
 800d5ca:	f240 121f 	movw	r2, #287	; 0x11f
 800d5ce:	496f      	ldr	r1, [pc, #444]	; (800d78c <tcp_input+0x544>)
 800d5d0:	486a      	ldr	r0, [pc, #424]	; (800d77c <tcp_input+0x534>)
 800d5d2:	f00a fb97 	bl	8017d04 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	7a1b      	ldrb	r3, [r3, #8]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d009      	beq.n	800d5f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	7a1a      	ldrb	r2, [r3, #8]
 800d5e2:	4b63      	ldr	r3, [pc, #396]	; (800d770 <tcp_input+0x528>)
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d122      	bne.n	800d638 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	8b1a      	ldrh	r2, [r3, #24]
 800d5f6:	4b5d      	ldr	r3, [pc, #372]	; (800d76c <tcp_input+0x524>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d11b      	bne.n	800d63a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	8ada      	ldrh	r2, [r3, #22]
 800d606:	4b59      	ldr	r3, [pc, #356]	; (800d76c <tcp_input+0x524>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	885b      	ldrh	r3, [r3, #2]
 800d60c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d60e:	429a      	cmp	r2, r3
 800d610:	d113      	bne.n	800d63a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	4b56      	ldr	r3, [pc, #344]	; (800d770 <tcp_input+0x528>)
 800d618:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d10d      	bne.n	800d63a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d61e:	69fb      	ldr	r3, [r7, #28]
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	4b53      	ldr	r3, [pc, #332]	; (800d770 <tcp_input+0x528>)
 800d624:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d626:	429a      	cmp	r2, r3
 800d628:	d107      	bne.n	800d63a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d62a:	69f8      	ldr	r0, [r7, #28]
 800d62c:	f000 fb54 	bl	800dcd8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f7fd ffc5 	bl	800b5c0 <pbuf_free>
        return;
 800d636:	e1f0      	b.n	800da1a <tcp_input+0x7d2>
        continue;
 800d638:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	61fb      	str	r3, [r7, #28]
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1bc      	bne.n	800d5c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d646:	2300      	movs	r3, #0
 800d648:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d64a:	4b51      	ldr	r3, [pc, #324]	; (800d790 <tcp_input+0x548>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	617b      	str	r3, [r7, #20]
 800d650:	e02a      	b.n	800d6a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	7a1b      	ldrb	r3, [r3, #8]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00c      	beq.n	800d674 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	7a1a      	ldrb	r2, [r3, #8]
 800d65e:	4b44      	ldr	r3, [pc, #272]	; (800d770 <tcp_input+0x528>)
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d666:	3301      	adds	r3, #1
 800d668:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d002      	beq.n	800d674 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	61bb      	str	r3, [r7, #24]
        continue;
 800d672:	e016      	b.n	800d6a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	8ada      	ldrh	r2, [r3, #22]
 800d678:	4b3c      	ldr	r3, [pc, #240]	; (800d76c <tcp_input+0x524>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	885b      	ldrh	r3, [r3, #2]
 800d67e:	b29b      	uxth	r3, r3
 800d680:	429a      	cmp	r2, r3
 800d682:	d10c      	bne.n	800d69e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	4b39      	ldr	r3, [pc, #228]	; (800d770 <tcp_input+0x528>)
 800d68a:	695b      	ldr	r3, [r3, #20]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d00f      	beq.n	800d6b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00d      	beq.n	800d6b2 <tcp_input+0x46a>
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d009      	beq.n	800d6b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	617b      	str	r3, [r7, #20]
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1d1      	bne.n	800d652 <tcp_input+0x40a>
 800d6ae:	e000      	b.n	800d6b2 <tcp_input+0x46a>
            break;
 800d6b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d014      	beq.n	800d6e2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00a      	beq.n	800d6d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	68da      	ldr	r2, [r3, #12]
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d6c6:	4b32      	ldr	r3, [pc, #200]	; (800d790 <tcp_input+0x548>)
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d6ce:	4a30      	ldr	r2, [pc, #192]	; (800d790 <tcp_input+0x548>)
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d6d4:	6978      	ldr	r0, [r7, #20]
 800d6d6:	f000 fa01 	bl	800dadc <tcp_listen_input>
      }
      pbuf_free(p);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7fd ff70 	bl	800b5c0 <pbuf_free>
      return;
 800d6e0:	e19b      	b.n	800da1a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f000 8160 	beq.w	800d9aa <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d6ea:	4b2a      	ldr	r3, [pc, #168]	; (800d794 <tcp_input+0x54c>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	891a      	ldrh	r2, [r3, #8]
 800d6f4:	4b27      	ldr	r3, [pc, #156]	; (800d794 <tcp_input+0x54c>)
 800d6f6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d6f8:	4a26      	ldr	r2, [pc, #152]	; (800d794 <tcp_input+0x54c>)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d6fe:	4b1b      	ldr	r3, [pc, #108]	; (800d76c <tcp_input+0x524>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a24      	ldr	r2, [pc, #144]	; (800d794 <tcp_input+0x54c>)
 800d704:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d706:	4b24      	ldr	r3, [pc, #144]	; (800d798 <tcp_input+0x550>)
 800d708:	2200      	movs	r2, #0
 800d70a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d70c:	4b23      	ldr	r3, [pc, #140]	; (800d79c <tcp_input+0x554>)
 800d70e:	2200      	movs	r2, #0
 800d710:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d712:	4b23      	ldr	r3, [pc, #140]	; (800d7a0 <tcp_input+0x558>)
 800d714:	2200      	movs	r2, #0
 800d716:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d718:	4b22      	ldr	r3, [pc, #136]	; (800d7a4 <tcp_input+0x55c>)
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	f003 0308 	and.w	r3, r3, #8
 800d720:	2b00      	cmp	r3, #0
 800d722:	d006      	beq.n	800d732 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	7b5b      	ldrb	r3, [r3, #13]
 800d728:	f043 0301 	orr.w	r3, r3, #1
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d736:	2b00      	cmp	r3, #0
 800d738:	d038      	beq.n	800d7ac <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d73a:	69f8      	ldr	r0, [r7, #28]
 800d73c:	f7ff f93e 	bl	800c9bc <tcp_process_refused_data>
 800d740:	4603      	mov	r3, r0
 800d742:	f113 0f0d 	cmn.w	r3, #13
 800d746:	d007      	beq.n	800d758 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d02d      	beq.n	800d7ac <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d750:	4b15      	ldr	r3, [pc, #84]	; (800d7a8 <tcp_input+0x560>)
 800d752:	881b      	ldrh	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d029      	beq.n	800d7ac <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f040 8104 	bne.w	800d96a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d762:	69f8      	ldr	r0, [r7, #28]
 800d764:	f003 f9be 	bl	8010ae4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d768:	e0ff      	b.n	800d96a <tcp_input+0x722>
 800d76a:	bf00      	nop
 800d76c:	2400b6a8 	.word	0x2400b6a8
 800d770:	2400bdac 	.word	0x2400bdac
 800d774:	0801bd94 	.word	0x0801bd94
 800d778:	0801bec0 	.word	0x0801bec0
 800d77c:	0801bde0 	.word	0x0801bde0
 800d780:	2400ee0c 	.word	0x2400ee0c
 800d784:	0801beec 	.word	0x0801beec
 800d788:	2400ee1c 	.word	0x2400ee1c
 800d78c:	0801bf18 	.word	0x0801bf18
 800d790:	2400ee14 	.word	0x2400ee14
 800d794:	2400b698 	.word	0x2400b698
 800d798:	2400b6c8 	.word	0x2400b6c8
 800d79c:	2400b6c5 	.word	0x2400b6c5
 800d7a0:	2400b6c0 	.word	0x2400b6c0
 800d7a4:	2400b6c4 	.word	0x2400b6c4
 800d7a8:	2400b6c2 	.word	0x2400b6c2
      }
    }
    tcp_input_pcb = pcb;
 800d7ac:	4a9c      	ldr	r2, [pc, #624]	; (800da20 <tcp_input+0x7d8>)
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d7b2:	69f8      	ldr	r0, [r7, #28]
 800d7b4:	f000 fb0a 	bl	800ddcc <tcp_process>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d7bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7c0:	f113 0f0d 	cmn.w	r3, #13
 800d7c4:	f000 80d3 	beq.w	800d96e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d7c8:	4b96      	ldr	r3, [pc, #600]	; (800da24 <tcp_input+0x7dc>)
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	f003 0308 	and.w	r3, r3, #8
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d015      	beq.n	800d800 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d008      	beq.n	800d7f0 <tcp_input+0x5a8>
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7e4:	69fa      	ldr	r2, [r7, #28]
 800d7e6:	6912      	ldr	r2, [r2, #16]
 800d7e8:	f06f 010d 	mvn.w	r1, #13
 800d7ec:	4610      	mov	r0, r2
 800d7ee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d7f0:	69f9      	ldr	r1, [r7, #28]
 800d7f2:	488d      	ldr	r0, [pc, #564]	; (800da28 <tcp_input+0x7e0>)
 800d7f4:	f7ff fbb0 	bl	800cf58 <tcp_pcb_remove>
        tcp_free(pcb);
 800d7f8:	69f8      	ldr	r0, [r7, #28]
 800d7fa:	f7fe f99d 	bl	800bb38 <tcp_free>
 800d7fe:	e0c1      	b.n	800d984 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800d800:	2300      	movs	r3, #0
 800d802:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d804:	4b89      	ldr	r3, [pc, #548]	; (800da2c <tcp_input+0x7e4>)
 800d806:	881b      	ldrh	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d01d      	beq.n	800d848 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d80c:	4b87      	ldr	r3, [pc, #540]	; (800da2c <tcp_input+0x7e4>)
 800d80e:	881b      	ldrh	r3, [r3, #0]
 800d810:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00a      	beq.n	800d832 <tcp_input+0x5ea>
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d822:	69fa      	ldr	r2, [r7, #28]
 800d824:	6910      	ldr	r0, [r2, #16]
 800d826:	89fa      	ldrh	r2, [r7, #14]
 800d828:	69f9      	ldr	r1, [r7, #28]
 800d82a:	4798      	blx	r3
 800d82c:	4603      	mov	r3, r0
 800d82e:	74fb      	strb	r3, [r7, #19]
 800d830:	e001      	b.n	800d836 <tcp_input+0x5ee>
 800d832:	2300      	movs	r3, #0
 800d834:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d836:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d83a:	f113 0f0d 	cmn.w	r3, #13
 800d83e:	f000 8098 	beq.w	800d972 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d842:	4b7a      	ldr	r3, [pc, #488]	; (800da2c <tcp_input+0x7e4>)
 800d844:	2200      	movs	r2, #0
 800d846:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d848:	69f8      	ldr	r0, [r7, #28]
 800d84a:	f000 f907 	bl	800da5c <tcp_input_delayed_close>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	f040 8090 	bne.w	800d976 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d856:	4b76      	ldr	r3, [pc, #472]	; (800da30 <tcp_input+0x7e8>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d041      	beq.n	800d8e2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d862:	2b00      	cmp	r3, #0
 800d864:	d006      	beq.n	800d874 <tcp_input+0x62c>
 800d866:	4b73      	ldr	r3, [pc, #460]	; (800da34 <tcp_input+0x7ec>)
 800d868:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d86c:	4972      	ldr	r1, [pc, #456]	; (800da38 <tcp_input+0x7f0>)
 800d86e:	4873      	ldr	r0, [pc, #460]	; (800da3c <tcp_input+0x7f4>)
 800d870:	f00a fa48 	bl	8017d04 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	8b5b      	ldrh	r3, [r3, #26]
 800d878:	f003 0310 	and.w	r3, r3, #16
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d008      	beq.n	800d892 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d880:	4b6b      	ldr	r3, [pc, #428]	; (800da30 <tcp_input+0x7e8>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4618      	mov	r0, r3
 800d886:	f7fd fe9b 	bl	800b5c0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d88a:	69f8      	ldr	r0, [r7, #28]
 800d88c:	f7fe fc3c 	bl	800c108 <tcp_abort>
            goto aborted;
 800d890:	e078      	b.n	800d984 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00c      	beq.n	800d8b6 <tcp_input+0x66e>
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	6918      	ldr	r0, [r3, #16]
 800d8a6:	4b62      	ldr	r3, [pc, #392]	; (800da30 <tcp_input+0x7e8>)
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	69f9      	ldr	r1, [r7, #28]
 800d8ae:	47a0      	blx	r4
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	74fb      	strb	r3, [r7, #19]
 800d8b4:	e008      	b.n	800d8c8 <tcp_input+0x680>
 800d8b6:	4b5e      	ldr	r3, [pc, #376]	; (800da30 <tcp_input+0x7e8>)
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	69f9      	ldr	r1, [r7, #28]
 800d8be:	2000      	movs	r0, #0
 800d8c0:	f7ff f952 	bl	800cb68 <tcp_recv_null>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d8c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8cc:	f113 0f0d 	cmn.w	r3, #13
 800d8d0:	d053      	beq.n	800d97a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d8d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d003      	beq.n	800d8e2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d8da:	4b55      	ldr	r3, [pc, #340]	; (800da30 <tcp_input+0x7e8>)
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d8e2:	4b50      	ldr	r3, [pc, #320]	; (800da24 <tcp_input+0x7dc>)
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	f003 0320 	and.w	r3, r3, #32
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d030      	beq.n	800d950 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d009      	beq.n	800d90a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8fa:	7b5a      	ldrb	r2, [r3, #13]
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d900:	f042 0220 	orr.w	r2, r2, #32
 800d904:	b2d2      	uxtb	r2, r2
 800d906:	735a      	strb	r2, [r3, #13]
 800d908:	e022      	b.n	800d950 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d90e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d912:	d005      	beq.n	800d920 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d918:	3301      	adds	r3, #1
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00b      	beq.n	800d942 <tcp_input+0x6fa>
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	6918      	ldr	r0, [r3, #16]
 800d934:	2300      	movs	r3, #0
 800d936:	2200      	movs	r2, #0
 800d938:	69f9      	ldr	r1, [r7, #28]
 800d93a:	47a0      	blx	r4
 800d93c:	4603      	mov	r3, r0
 800d93e:	74fb      	strb	r3, [r7, #19]
 800d940:	e001      	b.n	800d946 <tcp_input+0x6fe>
 800d942:	2300      	movs	r3, #0
 800d944:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d946:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d94a:	f113 0f0d 	cmn.w	r3, #13
 800d94e:	d016      	beq.n	800d97e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d950:	4b33      	ldr	r3, [pc, #204]	; (800da20 <tcp_input+0x7d8>)
 800d952:	2200      	movs	r2, #0
 800d954:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d956:	69f8      	ldr	r0, [r7, #28]
 800d958:	f000 f880 	bl	800da5c <tcp_input_delayed_close>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d10f      	bne.n	800d982 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d962:	69f8      	ldr	r0, [r7, #28]
 800d964:	f002 fab8 	bl	800fed8 <tcp_output>
 800d968:	e00c      	b.n	800d984 <tcp_input+0x73c>
        goto aborted;
 800d96a:	bf00      	nop
 800d96c:	e00a      	b.n	800d984 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d96e:	bf00      	nop
 800d970:	e008      	b.n	800d984 <tcp_input+0x73c>
              goto aborted;
 800d972:	bf00      	nop
 800d974:	e006      	b.n	800d984 <tcp_input+0x73c>
          goto aborted;
 800d976:	bf00      	nop
 800d978:	e004      	b.n	800d984 <tcp_input+0x73c>
            goto aborted;
 800d97a:	bf00      	nop
 800d97c:	e002      	b.n	800d984 <tcp_input+0x73c>
              goto aborted;
 800d97e:	bf00      	nop
 800d980:	e000      	b.n	800d984 <tcp_input+0x73c>
          goto aborted;
 800d982:	bf00      	nop
    tcp_input_pcb = NULL;
 800d984:	4b26      	ldr	r3, [pc, #152]	; (800da20 <tcp_input+0x7d8>)
 800d986:	2200      	movs	r2, #0
 800d988:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d98a:	4b29      	ldr	r3, [pc, #164]	; (800da30 <tcp_input+0x7e8>)
 800d98c:	2200      	movs	r2, #0
 800d98e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d990:	4b2b      	ldr	r3, [pc, #172]	; (800da40 <tcp_input+0x7f8>)
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d03f      	beq.n	800da18 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800d998:	4b29      	ldr	r3, [pc, #164]	; (800da40 <tcp_input+0x7f8>)
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7fd fe0f 	bl	800b5c0 <pbuf_free>
      inseg.p = NULL;
 800d9a2:	4b27      	ldr	r3, [pc, #156]	; (800da40 <tcp_input+0x7f8>)
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d9a8:	e036      	b.n	800da18 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d9aa:	4b26      	ldr	r3, [pc, #152]	; (800da44 <tcp_input+0x7fc>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	899b      	ldrh	r3, [r3, #12]
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fc fa16 	bl	8009de4 <lwip_htons>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	f003 0304 	and.w	r3, r3, #4
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d118      	bne.n	800d9f6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9c4:	4b20      	ldr	r3, [pc, #128]	; (800da48 <tcp_input+0x800>)
 800d9c6:	6819      	ldr	r1, [r3, #0]
 800d9c8:	4b20      	ldr	r3, [pc, #128]	; (800da4c <tcp_input+0x804>)
 800d9ca:	881b      	ldrh	r3, [r3, #0]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	4b20      	ldr	r3, [pc, #128]	; (800da50 <tcp_input+0x808>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9d4:	4b1b      	ldr	r3, [pc, #108]	; (800da44 <tcp_input+0x7fc>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9d8:	885b      	ldrh	r3, [r3, #2]
 800d9da:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9dc:	4a19      	ldr	r2, [pc, #100]	; (800da44 <tcp_input+0x7fc>)
 800d9de:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9e0:	8812      	ldrh	r2, [r2, #0]
 800d9e2:	b292      	uxth	r2, r2
 800d9e4:	9202      	str	r2, [sp, #8]
 800d9e6:	9301      	str	r3, [sp, #4]
 800d9e8:	4b1a      	ldr	r3, [pc, #104]	; (800da54 <tcp_input+0x80c>)
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	4b1a      	ldr	r3, [pc, #104]	; (800da58 <tcp_input+0x810>)
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	f003 f825 	bl	8010a40 <tcp_rst>
    pbuf_free(p);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7fd fde2 	bl	800b5c0 <pbuf_free>
  return;
 800d9fc:	e00c      	b.n	800da18 <tcp_input+0x7d0>
    goto dropped;
 800d9fe:	bf00      	nop
 800da00:	e006      	b.n	800da10 <tcp_input+0x7c8>
    goto dropped;
 800da02:	bf00      	nop
 800da04:	e004      	b.n	800da10 <tcp_input+0x7c8>
    goto dropped;
 800da06:	bf00      	nop
 800da08:	e002      	b.n	800da10 <tcp_input+0x7c8>
      goto dropped;
 800da0a:	bf00      	nop
 800da0c:	e000      	b.n	800da10 <tcp_input+0x7c8>
      goto dropped;
 800da0e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7fd fdd5 	bl	800b5c0 <pbuf_free>
 800da16:	e000      	b.n	800da1a <tcp_input+0x7d2>
  return;
 800da18:	bf00      	nop
}
 800da1a:	3724      	adds	r7, #36	; 0x24
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd90      	pop	{r4, r7, pc}
 800da20:	2400ee20 	.word	0x2400ee20
 800da24:	2400b6c5 	.word	0x2400b6c5
 800da28:	2400ee0c 	.word	0x2400ee0c
 800da2c:	2400b6c0 	.word	0x2400b6c0
 800da30:	2400b6c8 	.word	0x2400b6c8
 800da34:	0801bd94 	.word	0x0801bd94
 800da38:	0801bf48 	.word	0x0801bf48
 800da3c:	0801bde0 	.word	0x0801bde0
 800da40:	2400b698 	.word	0x2400b698
 800da44:	2400b6a8 	.word	0x2400b6a8
 800da48:	2400b6bc 	.word	0x2400b6bc
 800da4c:	2400b6c2 	.word	0x2400b6c2
 800da50:	2400b6b8 	.word	0x2400b6b8
 800da54:	2400bdbc 	.word	0x2400bdbc
 800da58:	2400bdc0 	.word	0x2400bdc0

0800da5c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d106      	bne.n	800da78 <tcp_input_delayed_close+0x1c>
 800da6a:	4b17      	ldr	r3, [pc, #92]	; (800dac8 <tcp_input_delayed_close+0x6c>)
 800da6c:	f240 225a 	movw	r2, #602	; 0x25a
 800da70:	4916      	ldr	r1, [pc, #88]	; (800dacc <tcp_input_delayed_close+0x70>)
 800da72:	4817      	ldr	r0, [pc, #92]	; (800dad0 <tcp_input_delayed_close+0x74>)
 800da74:	f00a f946 	bl	8017d04 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800da78:	4b16      	ldr	r3, [pc, #88]	; (800dad4 <tcp_input_delayed_close+0x78>)
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	f003 0310 	and.w	r3, r3, #16
 800da80:	2b00      	cmp	r3, #0
 800da82:	d01c      	beq.n	800dabe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	8b5b      	ldrh	r3, [r3, #26]
 800da88:	f003 0310 	and.w	r3, r3, #16
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d10d      	bne.n	800daac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da96:	2b00      	cmp	r3, #0
 800da98:	d008      	beq.n	800daac <tcp_input_delayed_close+0x50>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	6912      	ldr	r2, [r2, #16]
 800daa4:	f06f 010e 	mvn.w	r1, #14
 800daa8:	4610      	mov	r0, r2
 800daaa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800daac:	6879      	ldr	r1, [r7, #4]
 800daae:	480a      	ldr	r0, [pc, #40]	; (800dad8 <tcp_input_delayed_close+0x7c>)
 800dab0:	f7ff fa52 	bl	800cf58 <tcp_pcb_remove>
    tcp_free(pcb);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f7fe f83f 	bl	800bb38 <tcp_free>
    return 1;
 800daba:	2301      	movs	r3, #1
 800dabc:	e000      	b.n	800dac0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	0801bd94 	.word	0x0801bd94
 800dacc:	0801bf64 	.word	0x0801bf64
 800dad0:	0801bde0 	.word	0x0801bde0
 800dad4:	2400b6c5 	.word	0x2400b6c5
 800dad8:	2400ee0c 	.word	0x2400ee0c

0800dadc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800dadc:	b590      	push	{r4, r7, lr}
 800dade:	b08b      	sub	sp, #44	; 0x2c
 800dae0:	af04      	add	r7, sp, #16
 800dae2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800dae4:	4b6f      	ldr	r3, [pc, #444]	; (800dca4 <tcp_listen_input+0x1c8>)
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	f003 0304 	and.w	r3, r3, #4
 800daec:	2b00      	cmp	r3, #0
 800daee:	f040 80d2 	bne.w	800dc96 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d106      	bne.n	800db06 <tcp_listen_input+0x2a>
 800daf8:	4b6b      	ldr	r3, [pc, #428]	; (800dca8 <tcp_listen_input+0x1cc>)
 800dafa:	f240 2281 	movw	r2, #641	; 0x281
 800dafe:	496b      	ldr	r1, [pc, #428]	; (800dcac <tcp_listen_input+0x1d0>)
 800db00:	486b      	ldr	r0, [pc, #428]	; (800dcb0 <tcp_listen_input+0x1d4>)
 800db02:	f00a f8ff 	bl	8017d04 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800db06:	4b67      	ldr	r3, [pc, #412]	; (800dca4 <tcp_listen_input+0x1c8>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	f003 0310 	and.w	r3, r3, #16
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d019      	beq.n	800db46 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db12:	4b68      	ldr	r3, [pc, #416]	; (800dcb4 <tcp_listen_input+0x1d8>)
 800db14:	6819      	ldr	r1, [r3, #0]
 800db16:	4b68      	ldr	r3, [pc, #416]	; (800dcb8 <tcp_listen_input+0x1dc>)
 800db18:	881b      	ldrh	r3, [r3, #0]
 800db1a:	461a      	mov	r2, r3
 800db1c:	4b67      	ldr	r3, [pc, #412]	; (800dcbc <tcp_listen_input+0x1e0>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db22:	4b67      	ldr	r3, [pc, #412]	; (800dcc0 <tcp_listen_input+0x1e4>)
 800db24:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db26:	885b      	ldrh	r3, [r3, #2]
 800db28:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db2a:	4a65      	ldr	r2, [pc, #404]	; (800dcc0 <tcp_listen_input+0x1e4>)
 800db2c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db2e:	8812      	ldrh	r2, [r2, #0]
 800db30:	b292      	uxth	r2, r2
 800db32:	9202      	str	r2, [sp, #8]
 800db34:	9301      	str	r3, [sp, #4]
 800db36:	4b63      	ldr	r3, [pc, #396]	; (800dcc4 <tcp_listen_input+0x1e8>)
 800db38:	9300      	str	r3, [sp, #0]
 800db3a:	4b63      	ldr	r3, [pc, #396]	; (800dcc8 <tcp_listen_input+0x1ec>)
 800db3c:	4602      	mov	r2, r0
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f002 ff7e 	bl	8010a40 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800db44:	e0a9      	b.n	800dc9a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800db46:	4b57      	ldr	r3, [pc, #348]	; (800dca4 <tcp_listen_input+0x1c8>)
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	f003 0302 	and.w	r3, r3, #2
 800db4e:	2b00      	cmp	r3, #0
 800db50:	f000 80a3 	beq.w	800dc9a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	7d5b      	ldrb	r3, [r3, #21]
 800db58:	4618      	mov	r0, r3
 800db5a:	f7ff f929 	bl	800cdb0 <tcp_alloc>
 800db5e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d111      	bne.n	800db8a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	699b      	ldr	r3, [r3, #24]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00a      	beq.n	800db84 <tcp_listen_input+0xa8>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	699b      	ldr	r3, [r3, #24]
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	6910      	ldr	r0, [r2, #16]
 800db76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db7a:	2100      	movs	r1, #0
 800db7c:	4798      	blx	r3
 800db7e:	4603      	mov	r3, r0
 800db80:	73bb      	strb	r3, [r7, #14]
      return;
 800db82:	e08b      	b.n	800dc9c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800db84:	23f0      	movs	r3, #240	; 0xf0
 800db86:	73bb      	strb	r3, [r7, #14]
      return;
 800db88:	e088      	b.n	800dc9c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800db8a:	4b50      	ldr	r3, [pc, #320]	; (800dccc <tcp_listen_input+0x1f0>)
 800db8c:	695a      	ldr	r2, [r3, #20]
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800db92:	4b4e      	ldr	r3, [pc, #312]	; (800dccc <tcp_listen_input+0x1f0>)
 800db94:	691a      	ldr	r2, [r3, #16]
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	8ada      	ldrh	r2, [r3, #22]
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800dba2:	4b47      	ldr	r3, [pc, #284]	; (800dcc0 <tcp_listen_input+0x1e4>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	881b      	ldrh	r3, [r3, #0]
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	2203      	movs	r2, #3
 800dbb2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800dbb4:	4b41      	ldr	r3, [pc, #260]	; (800dcbc <tcp_listen_input+0x1e0>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	1c5a      	adds	r2, r3, #1
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800dbc6:	6978      	ldr	r0, [r7, #20]
 800dbc8:	f7ff fa5a 	bl	800d080 <tcp_next_iss>
 800dbcc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	693a      	ldr	r2, [r7, #16]
 800dbd2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	693a      	ldr	r2, [r7, #16]
 800dbd8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	693a      	ldr	r2, [r7, #16]
 800dbde:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	693a      	ldr	r2, [r7, #16]
 800dbe4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800dbe6:	4b35      	ldr	r3, [pc, #212]	; (800dcbc <tcp_listen_input+0x1e0>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	1e5a      	subs	r2, r3, #1
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	691a      	ldr	r2, [r3, #16]
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	7a5b      	ldrb	r3, [r3, #9]
 800dc02:	f003 030c 	and.w	r3, r3, #12
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	7a1a      	ldrb	r2, [r3, #8]
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800dc14:	4b2e      	ldr	r3, [pc, #184]	; (800dcd0 <tcp_listen_input+0x1f4>)
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	60da      	str	r2, [r3, #12]
 800dc1c:	4a2c      	ldr	r2, [pc, #176]	; (800dcd0 <tcp_listen_input+0x1f4>)
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	6013      	str	r3, [r2, #0]
 800dc22:	f003 f8cf 	bl	8010dc4 <tcp_timer_needed>
 800dc26:	4b2b      	ldr	r3, [pc, #172]	; (800dcd4 <tcp_listen_input+0x1f8>)
 800dc28:	2201      	movs	r2, #1
 800dc2a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800dc2c:	6978      	ldr	r0, [r7, #20]
 800dc2e:	f001 fd8d 	bl	800f74c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800dc32:	4b23      	ldr	r3, [pc, #140]	; (800dcc0 <tcp_listen_input+0x1e4>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	89db      	ldrh	r3, [r3, #14]
 800dc38:	b29a      	uxth	r2, r3
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	3304      	adds	r3, #4
 800dc54:	4618      	mov	r0, r3
 800dc56:	f005 f82d 	bl	8012cb4 <ip4_route>
 800dc5a:	4601      	mov	r1, r0
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	3304      	adds	r3, #4
 800dc60:	461a      	mov	r2, r3
 800dc62:	4620      	mov	r0, r4
 800dc64:	f7ff fa32 	bl	800d0cc <tcp_eff_send_mss_netif>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800dc70:	2112      	movs	r1, #18
 800dc72:	6978      	ldr	r0, [r7, #20]
 800dc74:	f002 f842 	bl	800fcfc <tcp_enqueue_flags>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800dc7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d004      	beq.n	800dc8e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800dc84:	2100      	movs	r1, #0
 800dc86:	6978      	ldr	r0, [r7, #20]
 800dc88:	f7fe f980 	bl	800bf8c <tcp_abandon>
      return;
 800dc8c:	e006      	b.n	800dc9c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800dc8e:	6978      	ldr	r0, [r7, #20]
 800dc90:	f002 f922 	bl	800fed8 <tcp_output>
  return;
 800dc94:	e001      	b.n	800dc9a <tcp_listen_input+0x1be>
    return;
 800dc96:	bf00      	nop
 800dc98:	e000      	b.n	800dc9c <tcp_listen_input+0x1c0>
  return;
 800dc9a:	bf00      	nop
}
 800dc9c:	371c      	adds	r7, #28
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd90      	pop	{r4, r7, pc}
 800dca2:	bf00      	nop
 800dca4:	2400b6c4 	.word	0x2400b6c4
 800dca8:	0801bd94 	.word	0x0801bd94
 800dcac:	0801bf8c 	.word	0x0801bf8c
 800dcb0:	0801bde0 	.word	0x0801bde0
 800dcb4:	2400b6bc 	.word	0x2400b6bc
 800dcb8:	2400b6c2 	.word	0x2400b6c2
 800dcbc:	2400b6b8 	.word	0x2400b6b8
 800dcc0:	2400b6a8 	.word	0x2400b6a8
 800dcc4:	2400bdbc 	.word	0x2400bdbc
 800dcc8:	2400bdc0 	.word	0x2400bdc0
 800dccc:	2400bdac 	.word	0x2400bdac
 800dcd0:	2400ee0c 	.word	0x2400ee0c
 800dcd4:	2400ee08 	.word	0x2400ee08

0800dcd8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b086      	sub	sp, #24
 800dcdc:	af04      	add	r7, sp, #16
 800dcde:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800dce0:	4b2f      	ldr	r3, [pc, #188]	; (800dda0 <tcp_timewait_input+0xc8>)
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	f003 0304 	and.w	r3, r3, #4
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d153      	bne.n	800dd94 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d106      	bne.n	800dd00 <tcp_timewait_input+0x28>
 800dcf2:	4b2c      	ldr	r3, [pc, #176]	; (800dda4 <tcp_timewait_input+0xcc>)
 800dcf4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dcf8:	492b      	ldr	r1, [pc, #172]	; (800dda8 <tcp_timewait_input+0xd0>)
 800dcfa:	482c      	ldr	r0, [pc, #176]	; (800ddac <tcp_timewait_input+0xd4>)
 800dcfc:	f00a f802 	bl	8017d04 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800dd00:	4b27      	ldr	r3, [pc, #156]	; (800dda0 <tcp_timewait_input+0xc8>)
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	f003 0302 	and.w	r3, r3, #2
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d02a      	beq.n	800dd62 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dd0c:	4b28      	ldr	r3, [pc, #160]	; (800ddb0 <tcp_timewait_input+0xd8>)
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	db2d      	blt.n	800dd76 <tcp_timewait_input+0x9e>
 800dd1a:	4b25      	ldr	r3, [pc, #148]	; (800ddb0 <tcp_timewait_input+0xd8>)
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd22:	6879      	ldr	r1, [r7, #4]
 800dd24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd26:	440b      	add	r3, r1
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	dc23      	bgt.n	800dd76 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd2e:	4b21      	ldr	r3, [pc, #132]	; (800ddb4 <tcp_timewait_input+0xdc>)
 800dd30:	6819      	ldr	r1, [r3, #0]
 800dd32:	4b21      	ldr	r3, [pc, #132]	; (800ddb8 <tcp_timewait_input+0xe0>)
 800dd34:	881b      	ldrh	r3, [r3, #0]
 800dd36:	461a      	mov	r2, r3
 800dd38:	4b1d      	ldr	r3, [pc, #116]	; (800ddb0 <tcp_timewait_input+0xd8>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd3e:	4b1f      	ldr	r3, [pc, #124]	; (800ddbc <tcp_timewait_input+0xe4>)
 800dd40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd42:	885b      	ldrh	r3, [r3, #2]
 800dd44:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd46:	4a1d      	ldr	r2, [pc, #116]	; (800ddbc <tcp_timewait_input+0xe4>)
 800dd48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd4a:	8812      	ldrh	r2, [r2, #0]
 800dd4c:	b292      	uxth	r2, r2
 800dd4e:	9202      	str	r2, [sp, #8]
 800dd50:	9301      	str	r3, [sp, #4]
 800dd52:	4b1b      	ldr	r3, [pc, #108]	; (800ddc0 <tcp_timewait_input+0xe8>)
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	4b1b      	ldr	r3, [pc, #108]	; (800ddc4 <tcp_timewait_input+0xec>)
 800dd58:	4602      	mov	r2, r0
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f002 fe70 	bl	8010a40 <tcp_rst>
      return;
 800dd60:	e01b      	b.n	800dd9a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800dd62:	4b0f      	ldr	r3, [pc, #60]	; (800dda0 <tcp_timewait_input+0xc8>)
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	f003 0301 	and.w	r3, r3, #1
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d003      	beq.n	800dd76 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800dd6e:	4b16      	ldr	r3, [pc, #88]	; (800ddc8 <tcp_timewait_input+0xf0>)
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800dd76:	4b10      	ldr	r3, [pc, #64]	; (800ddb8 <tcp_timewait_input+0xe0>)
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00c      	beq.n	800dd98 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	8b5b      	ldrh	r3, [r3, #26]
 800dd82:	f043 0302 	orr.w	r3, r3, #2
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f002 f8a3 	bl	800fed8 <tcp_output>
  }
  return;
 800dd92:	e001      	b.n	800dd98 <tcp_timewait_input+0xc0>
    return;
 800dd94:	bf00      	nop
 800dd96:	e000      	b.n	800dd9a <tcp_timewait_input+0xc2>
  return;
 800dd98:	bf00      	nop
}
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	2400b6c4 	.word	0x2400b6c4
 800dda4:	0801bd94 	.word	0x0801bd94
 800dda8:	0801bfac 	.word	0x0801bfac
 800ddac:	0801bde0 	.word	0x0801bde0
 800ddb0:	2400b6b8 	.word	0x2400b6b8
 800ddb4:	2400b6bc 	.word	0x2400b6bc
 800ddb8:	2400b6c2 	.word	0x2400b6c2
 800ddbc:	2400b6a8 	.word	0x2400b6a8
 800ddc0:	2400bdbc 	.word	0x2400bdbc
 800ddc4:	2400bdc0 	.word	0x2400bdc0
 800ddc8:	2400ee10 	.word	0x2400ee10

0800ddcc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ddcc:	b590      	push	{r4, r7, lr}
 800ddce:	b08d      	sub	sp, #52	; 0x34
 800ddd0:	af04      	add	r7, sp, #16
 800ddd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d106      	bne.n	800ddf0 <tcp_process+0x24>
 800dde2:	4ba5      	ldr	r3, [pc, #660]	; (800e078 <tcp_process+0x2ac>)
 800dde4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800dde8:	49a4      	ldr	r1, [pc, #656]	; (800e07c <tcp_process+0x2b0>)
 800ddea:	48a5      	ldr	r0, [pc, #660]	; (800e080 <tcp_process+0x2b4>)
 800ddec:	f009 ff8a 	bl	8017d04 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ddf0:	4ba4      	ldr	r3, [pc, #656]	; (800e084 <tcp_process+0x2b8>)
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	f003 0304 	and.w	r3, r3, #4
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d04e      	beq.n	800de9a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	7d1b      	ldrb	r3, [r3, #20]
 800de00:	2b02      	cmp	r3, #2
 800de02:	d108      	bne.n	800de16 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de08:	4b9f      	ldr	r3, [pc, #636]	; (800e088 <tcp_process+0x2bc>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d123      	bne.n	800de58 <tcp_process+0x8c>
        acceptable = 1;
 800de10:	2301      	movs	r3, #1
 800de12:	76fb      	strb	r3, [r7, #27]
 800de14:	e020      	b.n	800de58 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de1a:	4b9c      	ldr	r3, [pc, #624]	; (800e08c <tcp_process+0x2c0>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d102      	bne.n	800de28 <tcp_process+0x5c>
        acceptable = 1;
 800de22:	2301      	movs	r3, #1
 800de24:	76fb      	strb	r3, [r7, #27]
 800de26:	e017      	b.n	800de58 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800de28:	4b98      	ldr	r3, [pc, #608]	; (800e08c <tcp_process+0x2c0>)
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de30:	1ad3      	subs	r3, r2, r3
 800de32:	2b00      	cmp	r3, #0
 800de34:	db10      	blt.n	800de58 <tcp_process+0x8c>
 800de36:	4b95      	ldr	r3, [pc, #596]	; (800e08c <tcp_process+0x2c0>)
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de3e:	6879      	ldr	r1, [r7, #4]
 800de40:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800de42:	440b      	add	r3, r1
 800de44:	1ad3      	subs	r3, r2, r3
 800de46:	2b00      	cmp	r3, #0
 800de48:	dc06      	bgt.n	800de58 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	8b5b      	ldrh	r3, [r3, #26]
 800de4e:	f043 0302 	orr.w	r3, r3, #2
 800de52:	b29a      	uxth	r2, r3
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800de58:	7efb      	ldrb	r3, [r7, #27]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d01b      	beq.n	800de96 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	7d1b      	ldrb	r3, [r3, #20]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d106      	bne.n	800de74 <tcp_process+0xa8>
 800de66:	4b84      	ldr	r3, [pc, #528]	; (800e078 <tcp_process+0x2ac>)
 800de68:	f44f 724e 	mov.w	r2, #824	; 0x338
 800de6c:	4988      	ldr	r1, [pc, #544]	; (800e090 <tcp_process+0x2c4>)
 800de6e:	4884      	ldr	r0, [pc, #528]	; (800e080 <tcp_process+0x2b4>)
 800de70:	f009 ff48 	bl	8017d04 <iprintf>
      recv_flags |= TF_RESET;
 800de74:	4b87      	ldr	r3, [pc, #540]	; (800e094 <tcp_process+0x2c8>)
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	f043 0308 	orr.w	r3, r3, #8
 800de7c:	b2da      	uxtb	r2, r3
 800de7e:	4b85      	ldr	r3, [pc, #532]	; (800e094 <tcp_process+0x2c8>)
 800de80:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	8b5b      	ldrh	r3, [r3, #26]
 800de86:	f023 0301 	bic.w	r3, r3, #1
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800de90:	f06f 030d 	mvn.w	r3, #13
 800de94:	e37a      	b.n	800e58c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800de96:	2300      	movs	r3, #0
 800de98:	e378      	b.n	800e58c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800de9a:	4b7a      	ldr	r3, [pc, #488]	; (800e084 <tcp_process+0x2b8>)
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	f003 0302 	and.w	r3, r3, #2
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d010      	beq.n	800dec8 <tcp_process+0xfc>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	7d1b      	ldrb	r3, [r3, #20]
 800deaa:	2b02      	cmp	r3, #2
 800deac:	d00c      	beq.n	800dec8 <tcp_process+0xfc>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	7d1b      	ldrb	r3, [r3, #20]
 800deb2:	2b03      	cmp	r3, #3
 800deb4:	d008      	beq.n	800dec8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	8b5b      	ldrh	r3, [r3, #26]
 800deba:	f043 0302 	orr.w	r3, r3, #2
 800debe:	b29a      	uxth	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	e361      	b.n	800e58c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	8b5b      	ldrh	r3, [r3, #26]
 800decc:	f003 0310 	and.w	r3, r3, #16
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d103      	bne.n	800dedc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ded4:	4b70      	ldr	r3, [pc, #448]	; (800e098 <tcp_process+0x2cc>)
 800ded6:	681a      	ldr	r2, [r3, #0]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2200      	movs	r2, #0
 800dee8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f001 fc2d 	bl	800f74c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	7d1b      	ldrb	r3, [r3, #20]
 800def6:	3b02      	subs	r3, #2
 800def8:	2b07      	cmp	r3, #7
 800defa:	f200 8337 	bhi.w	800e56c <tcp_process+0x7a0>
 800defe:	a201      	add	r2, pc, #4	; (adr r2, 800df04 <tcp_process+0x138>)
 800df00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df04:	0800df25 	.word	0x0800df25
 800df08:	0800e155 	.word	0x0800e155
 800df0c:	0800e2cd 	.word	0x0800e2cd
 800df10:	0800e2f7 	.word	0x0800e2f7
 800df14:	0800e41b 	.word	0x0800e41b
 800df18:	0800e2cd 	.word	0x0800e2cd
 800df1c:	0800e4a7 	.word	0x0800e4a7
 800df20:	0800e537 	.word	0x0800e537
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800df24:	4b57      	ldr	r3, [pc, #348]	; (800e084 <tcp_process+0x2b8>)
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	f003 0310 	and.w	r3, r3, #16
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	f000 80e4 	beq.w	800e0fa <tcp_process+0x32e>
 800df32:	4b54      	ldr	r3, [pc, #336]	; (800e084 <tcp_process+0x2b8>)
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	f003 0302 	and.w	r3, r3, #2
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	f000 80dd 	beq.w	800e0fa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df44:	1c5a      	adds	r2, r3, #1
 800df46:	4b50      	ldr	r3, [pc, #320]	; (800e088 <tcp_process+0x2bc>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	f040 80d5 	bne.w	800e0fa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800df50:	4b4e      	ldr	r3, [pc, #312]	; (800e08c <tcp_process+0x2c0>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	1c5a      	adds	r2, r3, #1
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800df62:	4b49      	ldr	r3, [pc, #292]	; (800e088 <tcp_process+0x2bc>)
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800df6a:	4b4c      	ldr	r3, [pc, #304]	; (800e09c <tcp_process+0x2d0>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	89db      	ldrh	r3, [r3, #14]
 800df70:	b29a      	uxth	r2, r3
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800df84:	4b41      	ldr	r3, [pc, #260]	; (800e08c <tcp_process+0x2c0>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	1e5a      	subs	r2, r3, #1
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2204      	movs	r2, #4
 800df92:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	3304      	adds	r3, #4
 800df9c:	4618      	mov	r0, r3
 800df9e:	f004 fe89 	bl	8012cb4 <ip4_route>
 800dfa2:	4601      	mov	r1, r0
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	3304      	adds	r3, #4
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f7ff f88e 	bl	800d0cc <tcp_eff_send_mss_netif>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfbc:	009a      	lsls	r2, r3, #2
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfc2:	005b      	lsls	r3, r3, #1
 800dfc4:	f241 111c 	movw	r1, #4380	; 0x111c
 800dfc8:	428b      	cmp	r3, r1
 800dfca:	bf38      	it	cc
 800dfcc:	460b      	movcc	r3, r1
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d204      	bcs.n	800dfdc <tcp_process+0x210>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	e00d      	b.n	800dff8 <tcp_process+0x22c>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfe0:	005b      	lsls	r3, r3, #1
 800dfe2:	f241 121c 	movw	r2, #4380	; 0x111c
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d904      	bls.n	800dff4 <tcp_process+0x228>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfee:	005b      	lsls	r3, r3, #1
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	e001      	b.n	800dff8 <tcp_process+0x22c>
 800dff4:	f241 131c 	movw	r3, #4380	; 0x111c
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e004:	2b00      	cmp	r3, #0
 800e006:	d106      	bne.n	800e016 <tcp_process+0x24a>
 800e008:	4b1b      	ldr	r3, [pc, #108]	; (800e078 <tcp_process+0x2ac>)
 800e00a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e00e:	4924      	ldr	r1, [pc, #144]	; (800e0a0 <tcp_process+0x2d4>)
 800e010:	481b      	ldr	r0, [pc, #108]	; (800e080 <tcp_process+0x2b4>)
 800e012:	f009 fe77 	bl	8017d04 <iprintf>
        --pcb->snd_queuelen;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e01c:	3b01      	subs	r3, #1
 800e01e:	b29a      	uxth	r2, r3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e02a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d111      	bne.n	800e056 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e036:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d106      	bne.n	800e04c <tcp_process+0x280>
 800e03e:	4b0e      	ldr	r3, [pc, #56]	; (800e078 <tcp_process+0x2ac>)
 800e040:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e044:	4917      	ldr	r1, [pc, #92]	; (800e0a4 <tcp_process+0x2d8>)
 800e046:	480e      	ldr	r0, [pc, #56]	; (800e080 <tcp_process+0x2b4>)
 800e048:	f009 fe5c 	bl	8017d04 <iprintf>
          pcb->unsent = rseg->next;
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	66da      	str	r2, [r3, #108]	; 0x6c
 800e054:	e003      	b.n	800e05e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e05e:	69f8      	ldr	r0, [r7, #28]
 800e060:	f7fe fd3d 	bl	800cade <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d11d      	bne.n	800e0a8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e072:	861a      	strh	r2, [r3, #48]	; 0x30
 800e074:	e01f      	b.n	800e0b6 <tcp_process+0x2ea>
 800e076:	bf00      	nop
 800e078:	0801bd94 	.word	0x0801bd94
 800e07c:	0801bfcc 	.word	0x0801bfcc
 800e080:	0801bde0 	.word	0x0801bde0
 800e084:	2400b6c4 	.word	0x2400b6c4
 800e088:	2400b6bc 	.word	0x2400b6bc
 800e08c:	2400b6b8 	.word	0x2400b6b8
 800e090:	0801bfe8 	.word	0x0801bfe8
 800e094:	2400b6c5 	.word	0x2400b6c5
 800e098:	2400ee10 	.word	0x2400ee10
 800e09c:	2400b6a8 	.word	0x2400b6a8
 800e0a0:	0801c008 	.word	0x0801c008
 800e0a4:	0801c020 	.word	0x0801c020
        } else {
          pcb->rtime = 0;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d00a      	beq.n	800e0d6 <tcp_process+0x30a>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	6910      	ldr	r0, [r2, #16]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	6879      	ldr	r1, [r7, #4]
 800e0ce:	4798      	blx	r3
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	76bb      	strb	r3, [r7, #26]
 800e0d4:	e001      	b.n	800e0da <tcp_process+0x30e>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e0da:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e0de:	f113 0f0d 	cmn.w	r3, #13
 800e0e2:	d102      	bne.n	800e0ea <tcp_process+0x31e>
          return ERR_ABRT;
 800e0e4:	f06f 030c 	mvn.w	r3, #12
 800e0e8:	e250      	b.n	800e58c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	8b5b      	ldrh	r3, [r3, #26]
 800e0ee:	f043 0302 	orr.w	r3, r3, #2
 800e0f2:	b29a      	uxth	r2, r3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e0f8:	e23a      	b.n	800e570 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e0fa:	4b9d      	ldr	r3, [pc, #628]	; (800e370 <tcp_process+0x5a4>)
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	f003 0310 	and.w	r3, r3, #16
 800e102:	2b00      	cmp	r3, #0
 800e104:	f000 8234 	beq.w	800e570 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e108:	4b9a      	ldr	r3, [pc, #616]	; (800e374 <tcp_process+0x5a8>)
 800e10a:	6819      	ldr	r1, [r3, #0]
 800e10c:	4b9a      	ldr	r3, [pc, #616]	; (800e378 <tcp_process+0x5ac>)
 800e10e:	881b      	ldrh	r3, [r3, #0]
 800e110:	461a      	mov	r2, r3
 800e112:	4b9a      	ldr	r3, [pc, #616]	; (800e37c <tcp_process+0x5b0>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e118:	4b99      	ldr	r3, [pc, #612]	; (800e380 <tcp_process+0x5b4>)
 800e11a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e11c:	885b      	ldrh	r3, [r3, #2]
 800e11e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e120:	4a97      	ldr	r2, [pc, #604]	; (800e380 <tcp_process+0x5b4>)
 800e122:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e124:	8812      	ldrh	r2, [r2, #0]
 800e126:	b292      	uxth	r2, r2
 800e128:	9202      	str	r2, [sp, #8]
 800e12a:	9301      	str	r3, [sp, #4]
 800e12c:	4b95      	ldr	r3, [pc, #596]	; (800e384 <tcp_process+0x5b8>)
 800e12e:	9300      	str	r3, [sp, #0]
 800e130:	4b95      	ldr	r3, [pc, #596]	; (800e388 <tcp_process+0x5bc>)
 800e132:	4602      	mov	r2, r0
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f002 fc83 	bl	8010a40 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e140:	2b05      	cmp	r3, #5
 800e142:	f200 8215 	bhi.w	800e570 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2200      	movs	r2, #0
 800e14a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f002 fa4d 	bl	80105ec <tcp_rexmit_rto>
      break;
 800e152:	e20d      	b.n	800e570 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e154:	4b86      	ldr	r3, [pc, #536]	; (800e370 <tcp_process+0x5a4>)
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	f003 0310 	and.w	r3, r3, #16
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f000 80a1 	beq.w	800e2a4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e162:	4b84      	ldr	r3, [pc, #528]	; (800e374 <tcp_process+0x5a8>)
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e16a:	1ad3      	subs	r3, r2, r3
 800e16c:	3b01      	subs	r3, #1
 800e16e:	2b00      	cmp	r3, #0
 800e170:	db7e      	blt.n	800e270 <tcp_process+0x4a4>
 800e172:	4b80      	ldr	r3, [pc, #512]	; (800e374 <tcp_process+0x5a8>)
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e17a:	1ad3      	subs	r3, r2, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	dc77      	bgt.n	800e270 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2204      	movs	r2, #4
 800e184:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d102      	bne.n	800e194 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e18e:	23fa      	movs	r3, #250	; 0xfa
 800e190:	76bb      	strb	r3, [r7, #26]
 800e192:	e01d      	b.n	800e1d0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e198:	699b      	ldr	r3, [r3, #24]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d106      	bne.n	800e1ac <tcp_process+0x3e0>
 800e19e:	4b7b      	ldr	r3, [pc, #492]	; (800e38c <tcp_process+0x5c0>)
 800e1a0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e1a4:	497a      	ldr	r1, [pc, #488]	; (800e390 <tcp_process+0x5c4>)
 800e1a6:	487b      	ldr	r0, [pc, #492]	; (800e394 <tcp_process+0x5c8>)
 800e1a8:	f009 fdac 	bl	8017d04 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1b0:	699b      	ldr	r3, [r3, #24]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d00a      	beq.n	800e1cc <tcp_process+0x400>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1ba:	699b      	ldr	r3, [r3, #24]
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	6910      	ldr	r0, [r2, #16]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	6879      	ldr	r1, [r7, #4]
 800e1c4:	4798      	blx	r3
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	76bb      	strb	r3, [r7, #26]
 800e1ca:	e001      	b.n	800e1d0 <tcp_process+0x404>
 800e1cc:	23f0      	movs	r3, #240	; 0xf0
 800e1ce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e1d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d00a      	beq.n	800e1ee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e1d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e1dc:	f113 0f0d 	cmn.w	r3, #13
 800e1e0:	d002      	beq.n	800e1e8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f7fd ff90 	bl	800c108 <tcp_abort>
            }
            return ERR_ABRT;
 800e1e8:	f06f 030c 	mvn.w	r3, #12
 800e1ec:	e1ce      	b.n	800e58c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 fae0 	bl	800e7b4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e1f4:	4b68      	ldr	r3, [pc, #416]	; (800e398 <tcp_process+0x5cc>)
 800e1f6:	881b      	ldrh	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d005      	beq.n	800e208 <tcp_process+0x43c>
            recv_acked--;
 800e1fc:	4b66      	ldr	r3, [pc, #408]	; (800e398 <tcp_process+0x5cc>)
 800e1fe:	881b      	ldrh	r3, [r3, #0]
 800e200:	3b01      	subs	r3, #1
 800e202:	b29a      	uxth	r2, r3
 800e204:	4b64      	ldr	r3, [pc, #400]	; (800e398 <tcp_process+0x5cc>)
 800e206:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e20c:	009a      	lsls	r2, r3, #2
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e212:	005b      	lsls	r3, r3, #1
 800e214:	f241 111c 	movw	r1, #4380	; 0x111c
 800e218:	428b      	cmp	r3, r1
 800e21a:	bf38      	it	cc
 800e21c:	460b      	movcc	r3, r1
 800e21e:	429a      	cmp	r2, r3
 800e220:	d204      	bcs.n	800e22c <tcp_process+0x460>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	b29b      	uxth	r3, r3
 800e22a:	e00d      	b.n	800e248 <tcp_process+0x47c>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e230:	005b      	lsls	r3, r3, #1
 800e232:	f241 121c 	movw	r2, #4380	; 0x111c
 800e236:	4293      	cmp	r3, r2
 800e238:	d904      	bls.n	800e244 <tcp_process+0x478>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e23e:	005b      	lsls	r3, r3, #1
 800e240:	b29b      	uxth	r3, r3
 800e242:	e001      	b.n	800e248 <tcp_process+0x47c>
 800e244:	f241 131c 	movw	r3, #4380	; 0x111c
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e24e:	4b53      	ldr	r3, [pc, #332]	; (800e39c <tcp_process+0x5d0>)
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	f003 0320 	and.w	r3, r3, #32
 800e256:	2b00      	cmp	r3, #0
 800e258:	d037      	beq.n	800e2ca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	8b5b      	ldrh	r3, [r3, #26]
 800e25e:	f043 0302 	orr.w	r3, r3, #2
 800e262:	b29a      	uxth	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2207      	movs	r2, #7
 800e26c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e26e:	e02c      	b.n	800e2ca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e270:	4b40      	ldr	r3, [pc, #256]	; (800e374 <tcp_process+0x5a8>)
 800e272:	6819      	ldr	r1, [r3, #0]
 800e274:	4b40      	ldr	r3, [pc, #256]	; (800e378 <tcp_process+0x5ac>)
 800e276:	881b      	ldrh	r3, [r3, #0]
 800e278:	461a      	mov	r2, r3
 800e27a:	4b40      	ldr	r3, [pc, #256]	; (800e37c <tcp_process+0x5b0>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e280:	4b3f      	ldr	r3, [pc, #252]	; (800e380 <tcp_process+0x5b4>)
 800e282:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e284:	885b      	ldrh	r3, [r3, #2]
 800e286:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e288:	4a3d      	ldr	r2, [pc, #244]	; (800e380 <tcp_process+0x5b4>)
 800e28a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e28c:	8812      	ldrh	r2, [r2, #0]
 800e28e:	b292      	uxth	r2, r2
 800e290:	9202      	str	r2, [sp, #8]
 800e292:	9301      	str	r3, [sp, #4]
 800e294:	4b3b      	ldr	r3, [pc, #236]	; (800e384 <tcp_process+0x5b8>)
 800e296:	9300      	str	r3, [sp, #0]
 800e298:	4b3b      	ldr	r3, [pc, #236]	; (800e388 <tcp_process+0x5bc>)
 800e29a:	4602      	mov	r2, r0
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f002 fbcf 	bl	8010a40 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e2a2:	e167      	b.n	800e574 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e2a4:	4b32      	ldr	r3, [pc, #200]	; (800e370 <tcp_process+0x5a4>)
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	f003 0302 	and.w	r3, r3, #2
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f000 8161 	beq.w	800e574 <tcp_process+0x7a8>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b6:	1e5a      	subs	r2, r3, #1
 800e2b8:	4b30      	ldr	r3, [pc, #192]	; (800e37c <tcp_process+0x5b0>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	f040 8159 	bne.w	800e574 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f002 f9b4 	bl	8010630 <tcp_rexmit>
      break;
 800e2c8:	e154      	b.n	800e574 <tcp_process+0x7a8>
 800e2ca:	e153      	b.n	800e574 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 fa71 	bl	800e7b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e2d2:	4b32      	ldr	r3, [pc, #200]	; (800e39c <tcp_process+0x5d0>)
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	f003 0320 	and.w	r3, r3, #32
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	f000 814c 	beq.w	800e578 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	8b5b      	ldrh	r3, [r3, #26]
 800e2e4:	f043 0302 	orr.w	r3, r3, #2
 800e2e8:	b29a      	uxth	r2, r3
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2207      	movs	r2, #7
 800e2f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e2f4:	e140      	b.n	800e578 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 fa5c 	bl	800e7b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e2fc:	4b27      	ldr	r3, [pc, #156]	; (800e39c <tcp_process+0x5d0>)
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	f003 0320 	and.w	r3, r3, #32
 800e304:	2b00      	cmp	r3, #0
 800e306:	d071      	beq.n	800e3ec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e308:	4b19      	ldr	r3, [pc, #100]	; (800e370 <tcp_process+0x5a4>)
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	f003 0310 	and.w	r3, r3, #16
 800e310:	2b00      	cmp	r3, #0
 800e312:	d060      	beq.n	800e3d6 <tcp_process+0x60a>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e318:	4b16      	ldr	r3, [pc, #88]	; (800e374 <tcp_process+0x5a8>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d15a      	bne.n	800e3d6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e324:	2b00      	cmp	r3, #0
 800e326:	d156      	bne.n	800e3d6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	8b5b      	ldrh	r3, [r3, #26]
 800e32c:	f043 0302 	orr.w	r3, r3, #2
 800e330:	b29a      	uxth	r2, r3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7fe fdbe 	bl	800ceb8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e33c:	4b18      	ldr	r3, [pc, #96]	; (800e3a0 <tcp_process+0x5d4>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	429a      	cmp	r2, r3
 800e344:	d105      	bne.n	800e352 <tcp_process+0x586>
 800e346:	4b16      	ldr	r3, [pc, #88]	; (800e3a0 <tcp_process+0x5d4>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	4a14      	ldr	r2, [pc, #80]	; (800e3a0 <tcp_process+0x5d4>)
 800e34e:	6013      	str	r3, [r2, #0]
 800e350:	e02e      	b.n	800e3b0 <tcp_process+0x5e4>
 800e352:	4b13      	ldr	r3, [pc, #76]	; (800e3a0 <tcp_process+0x5d4>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	617b      	str	r3, [r7, #20]
 800e358:	e027      	b.n	800e3aa <tcp_process+0x5de>
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	429a      	cmp	r2, r3
 800e362:	d11f      	bne.n	800e3a4 <tcp_process+0x5d8>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	68da      	ldr	r2, [r3, #12]
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	60da      	str	r2, [r3, #12]
 800e36c:	e020      	b.n	800e3b0 <tcp_process+0x5e4>
 800e36e:	bf00      	nop
 800e370:	2400b6c4 	.word	0x2400b6c4
 800e374:	2400b6bc 	.word	0x2400b6bc
 800e378:	2400b6c2 	.word	0x2400b6c2
 800e37c:	2400b6b8 	.word	0x2400b6b8
 800e380:	2400b6a8 	.word	0x2400b6a8
 800e384:	2400bdbc 	.word	0x2400bdbc
 800e388:	2400bdc0 	.word	0x2400bdc0
 800e38c:	0801bd94 	.word	0x0801bd94
 800e390:	0801c034 	.word	0x0801c034
 800e394:	0801bde0 	.word	0x0801bde0
 800e398:	2400b6c0 	.word	0x2400b6c0
 800e39c:	2400b6c5 	.word	0x2400b6c5
 800e3a0:	2400ee0c 	.word	0x2400ee0c
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	617b      	str	r3, [r7, #20]
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d1d4      	bne.n	800e35a <tcp_process+0x58e>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	60da      	str	r2, [r3, #12]
 800e3b6:	4b77      	ldr	r3, [pc, #476]	; (800e594 <tcp_process+0x7c8>)
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	220a      	movs	r2, #10
 800e3c0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e3c2:	4b75      	ldr	r3, [pc, #468]	; (800e598 <tcp_process+0x7cc>)
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	60da      	str	r2, [r3, #12]
 800e3ca:	4a73      	ldr	r2, [pc, #460]	; (800e598 <tcp_process+0x7cc>)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6013      	str	r3, [r2, #0]
 800e3d0:	f002 fcf8 	bl	8010dc4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e3d4:	e0d2      	b.n	800e57c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	8b5b      	ldrh	r3, [r3, #26]
 800e3da:	f043 0302 	orr.w	r3, r3, #2
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2208      	movs	r2, #8
 800e3e8:	751a      	strb	r2, [r3, #20]
      break;
 800e3ea:	e0c7      	b.n	800e57c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e3ec:	4b6b      	ldr	r3, [pc, #428]	; (800e59c <tcp_process+0x7d0>)
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	f003 0310 	and.w	r3, r3, #16
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f000 80c1 	beq.w	800e57c <tcp_process+0x7b0>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3fe:	4b68      	ldr	r3, [pc, #416]	; (800e5a0 <tcp_process+0x7d4>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	429a      	cmp	r2, r3
 800e404:	f040 80ba 	bne.w	800e57c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f040 80b5 	bne.w	800e57c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2206      	movs	r2, #6
 800e416:	751a      	strb	r2, [r3, #20]
      break;
 800e418:	e0b0      	b.n	800e57c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 f9ca 	bl	800e7b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e420:	4b60      	ldr	r3, [pc, #384]	; (800e5a4 <tcp_process+0x7d8>)
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	f003 0320 	and.w	r3, r3, #32
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f000 80a9 	beq.w	800e580 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	8b5b      	ldrh	r3, [r3, #26]
 800e432:	f043 0302 	orr.w	r3, r3, #2
 800e436:	b29a      	uxth	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7fe fd3b 	bl	800ceb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e442:	4b59      	ldr	r3, [pc, #356]	; (800e5a8 <tcp_process+0x7dc>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d105      	bne.n	800e458 <tcp_process+0x68c>
 800e44c:	4b56      	ldr	r3, [pc, #344]	; (800e5a8 <tcp_process+0x7dc>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	4a55      	ldr	r2, [pc, #340]	; (800e5a8 <tcp_process+0x7dc>)
 800e454:	6013      	str	r3, [r2, #0]
 800e456:	e013      	b.n	800e480 <tcp_process+0x6b4>
 800e458:	4b53      	ldr	r3, [pc, #332]	; (800e5a8 <tcp_process+0x7dc>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	613b      	str	r3, [r7, #16]
 800e45e:	e00c      	b.n	800e47a <tcp_process+0x6ae>
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	429a      	cmp	r2, r3
 800e468:	d104      	bne.n	800e474 <tcp_process+0x6a8>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	68da      	ldr	r2, [r3, #12]
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	60da      	str	r2, [r3, #12]
 800e472:	e005      	b.n	800e480 <tcp_process+0x6b4>
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	613b      	str	r3, [r7, #16]
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1ef      	bne.n	800e460 <tcp_process+0x694>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	60da      	str	r2, [r3, #12]
 800e486:	4b43      	ldr	r3, [pc, #268]	; (800e594 <tcp_process+0x7c8>)
 800e488:	2201      	movs	r2, #1
 800e48a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	220a      	movs	r2, #10
 800e490:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e492:	4b41      	ldr	r3, [pc, #260]	; (800e598 <tcp_process+0x7cc>)
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	60da      	str	r2, [r3, #12]
 800e49a:	4a3f      	ldr	r2, [pc, #252]	; (800e598 <tcp_process+0x7cc>)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6013      	str	r3, [r2, #0]
 800e4a0:	f002 fc90 	bl	8010dc4 <tcp_timer_needed>
      }
      break;
 800e4a4:	e06c      	b.n	800e580 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 f984 	bl	800e7b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e4ac:	4b3b      	ldr	r3, [pc, #236]	; (800e59c <tcp_process+0x7d0>)
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	f003 0310 	and.w	r3, r3, #16
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d065      	beq.n	800e584 <tcp_process+0x7b8>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4bc:	4b38      	ldr	r3, [pc, #224]	; (800e5a0 <tcp_process+0x7d4>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d15f      	bne.n	800e584 <tcp_process+0x7b8>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d15b      	bne.n	800e584 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7fe fcf3 	bl	800ceb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e4d2:	4b35      	ldr	r3, [pc, #212]	; (800e5a8 <tcp_process+0x7dc>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d105      	bne.n	800e4e8 <tcp_process+0x71c>
 800e4dc:	4b32      	ldr	r3, [pc, #200]	; (800e5a8 <tcp_process+0x7dc>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	4a31      	ldr	r2, [pc, #196]	; (800e5a8 <tcp_process+0x7dc>)
 800e4e4:	6013      	str	r3, [r2, #0]
 800e4e6:	e013      	b.n	800e510 <tcp_process+0x744>
 800e4e8:	4b2f      	ldr	r3, [pc, #188]	; (800e5a8 <tcp_process+0x7dc>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	60fb      	str	r3, [r7, #12]
 800e4ee:	e00c      	b.n	800e50a <tcp_process+0x73e>
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d104      	bne.n	800e504 <tcp_process+0x738>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	68da      	ldr	r2, [r3, #12]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	60da      	str	r2, [r3, #12]
 800e502:	e005      	b.n	800e510 <tcp_process+0x744>
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	60fb      	str	r3, [r7, #12]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d1ef      	bne.n	800e4f0 <tcp_process+0x724>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	60da      	str	r2, [r3, #12]
 800e516:	4b1f      	ldr	r3, [pc, #124]	; (800e594 <tcp_process+0x7c8>)
 800e518:	2201      	movs	r2, #1
 800e51a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	220a      	movs	r2, #10
 800e520:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e522:	4b1d      	ldr	r3, [pc, #116]	; (800e598 <tcp_process+0x7cc>)
 800e524:	681a      	ldr	r2, [r3, #0]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	60da      	str	r2, [r3, #12]
 800e52a:	4a1b      	ldr	r2, [pc, #108]	; (800e598 <tcp_process+0x7cc>)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6013      	str	r3, [r2, #0]
 800e530:	f002 fc48 	bl	8010dc4 <tcp_timer_needed>
      }
      break;
 800e534:	e026      	b.n	800e584 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 f93c 	bl	800e7b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e53c:	4b17      	ldr	r3, [pc, #92]	; (800e59c <tcp_process+0x7d0>)
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	f003 0310 	and.w	r3, r3, #16
 800e544:	2b00      	cmp	r3, #0
 800e546:	d01f      	beq.n	800e588 <tcp_process+0x7bc>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e54c:	4b14      	ldr	r3, [pc, #80]	; (800e5a0 <tcp_process+0x7d4>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	429a      	cmp	r2, r3
 800e552:	d119      	bne.n	800e588 <tcp_process+0x7bc>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d115      	bne.n	800e588 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e55c:	4b11      	ldr	r3, [pc, #68]	; (800e5a4 <tcp_process+0x7d8>)
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	f043 0310 	orr.w	r3, r3, #16
 800e564:	b2da      	uxtb	r2, r3
 800e566:	4b0f      	ldr	r3, [pc, #60]	; (800e5a4 <tcp_process+0x7d8>)
 800e568:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e56a:	e00d      	b.n	800e588 <tcp_process+0x7bc>
    default:
      break;
 800e56c:	bf00      	nop
 800e56e:	e00c      	b.n	800e58a <tcp_process+0x7be>
      break;
 800e570:	bf00      	nop
 800e572:	e00a      	b.n	800e58a <tcp_process+0x7be>
      break;
 800e574:	bf00      	nop
 800e576:	e008      	b.n	800e58a <tcp_process+0x7be>
      break;
 800e578:	bf00      	nop
 800e57a:	e006      	b.n	800e58a <tcp_process+0x7be>
      break;
 800e57c:	bf00      	nop
 800e57e:	e004      	b.n	800e58a <tcp_process+0x7be>
      break;
 800e580:	bf00      	nop
 800e582:	e002      	b.n	800e58a <tcp_process+0x7be>
      break;
 800e584:	bf00      	nop
 800e586:	e000      	b.n	800e58a <tcp_process+0x7be>
      break;
 800e588:	bf00      	nop
  }
  return ERR_OK;
 800e58a:	2300      	movs	r3, #0
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3724      	adds	r7, #36	; 0x24
 800e590:	46bd      	mov	sp, r7
 800e592:	bd90      	pop	{r4, r7, pc}
 800e594:	2400ee08 	.word	0x2400ee08
 800e598:	2400ee1c 	.word	0x2400ee1c
 800e59c:	2400b6c4 	.word	0x2400b6c4
 800e5a0:	2400b6bc 	.word	0x2400b6bc
 800e5a4:	2400b6c5 	.word	0x2400b6c5
 800e5a8:	2400ee0c 	.word	0x2400ee0c

0800e5ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e5ac:	b590      	push	{r4, r7, lr}
 800e5ae:	b085      	sub	sp, #20
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d106      	bne.n	800e5ca <tcp_oos_insert_segment+0x1e>
 800e5bc:	4b3b      	ldr	r3, [pc, #236]	; (800e6ac <tcp_oos_insert_segment+0x100>)
 800e5be:	f240 421f 	movw	r2, #1055	; 0x41f
 800e5c2:	493b      	ldr	r1, [pc, #236]	; (800e6b0 <tcp_oos_insert_segment+0x104>)
 800e5c4:	483b      	ldr	r0, [pc, #236]	; (800e6b4 <tcp_oos_insert_segment+0x108>)
 800e5c6:	f009 fb9d 	bl	8017d04 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	899b      	ldrh	r3, [r3, #12]
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fb fc06 	bl	8009de4 <lwip_htons>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	f003 0301 	and.w	r3, r3, #1
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d028      	beq.n	800e636 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e5e4:	6838      	ldr	r0, [r7, #0]
 800e5e6:	f7fe fa65 	bl	800cab4 <tcp_segs_free>
    next = NULL;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	603b      	str	r3, [r7, #0]
 800e5ee:	e056      	b.n	800e69e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	899b      	ldrh	r3, [r3, #12]
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7fb fbf3 	bl	8009de4 <lwip_htons>
 800e5fe:	4603      	mov	r3, r0
 800e600:	b2db      	uxtb	r3, r3
 800e602:	f003 0301 	and.w	r3, r3, #1
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00d      	beq.n	800e626 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	68db      	ldr	r3, [r3, #12]
 800e60e:	899b      	ldrh	r3, [r3, #12]
 800e610:	b29c      	uxth	r4, r3
 800e612:	2001      	movs	r0, #1
 800e614:	f7fb fbe6 	bl	8009de4 <lwip_htons>
 800e618:	4603      	mov	r3, r0
 800e61a:	461a      	mov	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	4322      	orrs	r2, r4
 800e622:	b292      	uxth	r2, r2
 800e624:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f7fe fa54 	bl	800cade <tcp_seg_free>
    while (next &&
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00e      	beq.n	800e65a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	891b      	ldrh	r3, [r3, #8]
 800e640:	461a      	mov	r2, r3
 800e642:	4b1d      	ldr	r3, [pc, #116]	; (800e6b8 <tcp_oos_insert_segment+0x10c>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	441a      	add	r2, r3
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	68db      	ldr	r3, [r3, #12]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	6839      	ldr	r1, [r7, #0]
 800e650:	8909      	ldrh	r1, [r1, #8]
 800e652:	440b      	add	r3, r1
 800e654:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e656:	2b00      	cmp	r3, #0
 800e658:	daca      	bge.n	800e5f0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d01e      	beq.n	800e69e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	891b      	ldrh	r3, [r3, #8]
 800e664:	461a      	mov	r2, r3
 800e666:	4b14      	ldr	r3, [pc, #80]	; (800e6b8 <tcp_oos_insert_segment+0x10c>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	441a      	add	r2, r3
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e674:	2b00      	cmp	r3, #0
 800e676:	dd12      	ble.n	800e69e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	68db      	ldr	r3, [r3, #12]
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	b29a      	uxth	r2, r3
 800e680:	4b0d      	ldr	r3, [pc, #52]	; (800e6b8 <tcp_oos_insert_segment+0x10c>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	b29b      	uxth	r3, r3
 800e686:	1ad3      	subs	r3, r2, r3
 800e688:	b29a      	uxth	r2, r3
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	685a      	ldr	r2, [r3, #4]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	891b      	ldrh	r3, [r3, #8]
 800e696:	4619      	mov	r1, r3
 800e698:	4610      	mov	r0, r2
 800e69a:	f7fc fe0b 	bl	800b2b4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	683a      	ldr	r2, [r7, #0]
 800e6a2:	601a      	str	r2, [r3, #0]
}
 800e6a4:	bf00      	nop
 800e6a6:	3714      	adds	r7, #20
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd90      	pop	{r4, r7, pc}
 800e6ac:	0801bd94 	.word	0x0801bd94
 800e6b0:	0801c054 	.word	0x0801c054
 800e6b4:	0801bde0 	.word	0x0801bde0
 800e6b8:	2400b6b8 	.word	0x2400b6b8

0800e6bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e6bc:	b5b0      	push	{r4, r5, r7, lr}
 800e6be:	b086      	sub	sp, #24
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	607a      	str	r2, [r7, #4]
 800e6c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e6ca:	e03e      	b.n	800e74a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fc fffe 	bl	800b6dc <pbuf_clen>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6ea:	8a7a      	ldrh	r2, [r7, #18]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d906      	bls.n	800e6fe <tcp_free_acked_segments+0x42>
 800e6f0:	4b2a      	ldr	r3, [pc, #168]	; (800e79c <tcp_free_acked_segments+0xe0>)
 800e6f2:	f240 4257 	movw	r2, #1111	; 0x457
 800e6f6:	492a      	ldr	r1, [pc, #168]	; (800e7a0 <tcp_free_acked_segments+0xe4>)
 800e6f8:	482a      	ldr	r0, [pc, #168]	; (800e7a4 <tcp_free_acked_segments+0xe8>)
 800e6fa:	f009 fb03 	bl	8017d04 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e704:	8a7b      	ldrh	r3, [r7, #18]
 800e706:	1ad3      	subs	r3, r2, r3
 800e708:	b29a      	uxth	r2, r3
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	891a      	ldrh	r2, [r3, #8]
 800e714:	4b24      	ldr	r3, [pc, #144]	; (800e7a8 <tcp_free_acked_segments+0xec>)
 800e716:	881b      	ldrh	r3, [r3, #0]
 800e718:	4413      	add	r3, r2
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	4b22      	ldr	r3, [pc, #136]	; (800e7a8 <tcp_free_acked_segments+0xec>)
 800e71e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e720:	6978      	ldr	r0, [r7, #20]
 800e722:	f7fe f9dc 	bl	800cade <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d00c      	beq.n	800e74a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d109      	bne.n	800e74a <tcp_free_acked_segments+0x8e>
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d106      	bne.n	800e74a <tcp_free_acked_segments+0x8e>
 800e73c:	4b17      	ldr	r3, [pc, #92]	; (800e79c <tcp_free_acked_segments+0xe0>)
 800e73e:	f240 4261 	movw	r2, #1121	; 0x461
 800e742:	491a      	ldr	r1, [pc, #104]	; (800e7ac <tcp_free_acked_segments+0xf0>)
 800e744:	4817      	ldr	r0, [pc, #92]	; (800e7a4 <tcp_free_acked_segments+0xe8>)
 800e746:	f009 fadd 	bl	8017d04 <iprintf>
  while (seg_list != NULL &&
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d020      	beq.n	800e792 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	4618      	mov	r0, r3
 800e758:	f7fb fb59 	bl	8009e0e <lwip_htonl>
 800e75c:	4604      	mov	r4, r0
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	891b      	ldrh	r3, [r3, #8]
 800e762:	461d      	mov	r5, r3
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	899b      	ldrh	r3, [r3, #12]
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7fb fb39 	bl	8009de4 <lwip_htons>
 800e772:	4603      	mov	r3, r0
 800e774:	b2db      	uxtb	r3, r3
 800e776:	f003 0303 	and.w	r3, r3, #3
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d001      	beq.n	800e782 <tcp_free_acked_segments+0xc6>
 800e77e:	2301      	movs	r3, #1
 800e780:	e000      	b.n	800e784 <tcp_free_acked_segments+0xc8>
 800e782:	2300      	movs	r3, #0
 800e784:	442b      	add	r3, r5
 800e786:	18e2      	adds	r2, r4, r3
 800e788:	4b09      	ldr	r3, [pc, #36]	; (800e7b0 <tcp_free_acked_segments+0xf4>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e78e:	2b00      	cmp	r3, #0
 800e790:	dd9c      	ble.n	800e6cc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e792:	68bb      	ldr	r3, [r7, #8]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3718      	adds	r7, #24
 800e798:	46bd      	mov	sp, r7
 800e79a:	bdb0      	pop	{r4, r5, r7, pc}
 800e79c:	0801bd94 	.word	0x0801bd94
 800e7a0:	0801c07c 	.word	0x0801c07c
 800e7a4:	0801bde0 	.word	0x0801bde0
 800e7a8:	2400b6c0 	.word	0x2400b6c0
 800e7ac:	0801c0a4 	.word	0x0801c0a4
 800e7b0:	2400b6bc 	.word	0x2400b6bc

0800e7b4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e7b4:	b5b0      	push	{r4, r5, r7, lr}
 800e7b6:	b094      	sub	sp, #80	; 0x50
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d106      	bne.n	800e7d4 <tcp_receive+0x20>
 800e7c6:	4ba6      	ldr	r3, [pc, #664]	; (800ea60 <tcp_receive+0x2ac>)
 800e7c8:	f240 427b 	movw	r2, #1147	; 0x47b
 800e7cc:	49a5      	ldr	r1, [pc, #660]	; (800ea64 <tcp_receive+0x2b0>)
 800e7ce:	48a6      	ldr	r0, [pc, #664]	; (800ea68 <tcp_receive+0x2b4>)
 800e7d0:	f009 fa98 	bl	8017d04 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	7d1b      	ldrb	r3, [r3, #20]
 800e7d8:	2b03      	cmp	r3, #3
 800e7da:	d806      	bhi.n	800e7ea <tcp_receive+0x36>
 800e7dc:	4ba0      	ldr	r3, [pc, #640]	; (800ea60 <tcp_receive+0x2ac>)
 800e7de:	f240 427c 	movw	r2, #1148	; 0x47c
 800e7e2:	49a2      	ldr	r1, [pc, #648]	; (800ea6c <tcp_receive+0x2b8>)
 800e7e4:	48a0      	ldr	r0, [pc, #640]	; (800ea68 <tcp_receive+0x2b4>)
 800e7e6:	f009 fa8d 	bl	8017d04 <iprintf>

  if (flags & TCP_ACK) {
 800e7ea:	4ba1      	ldr	r3, [pc, #644]	; (800ea70 <tcp_receive+0x2bc>)
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	f003 0310 	and.w	r3, r3, #16
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	f000 8263 	beq.w	800ecbe <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e7fe:	461a      	mov	r2, r3
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e804:	4413      	add	r3, r2
 800e806:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e80c:	4b99      	ldr	r3, [pc, #612]	; (800ea74 <tcp_receive+0x2c0>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	1ad3      	subs	r3, r2, r3
 800e812:	2b00      	cmp	r3, #0
 800e814:	db1b      	blt.n	800e84e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e81a:	4b96      	ldr	r3, [pc, #600]	; (800ea74 <tcp_receive+0x2c0>)
 800e81c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e81e:	429a      	cmp	r2, r3
 800e820:	d106      	bne.n	800e830 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e826:	4b94      	ldr	r3, [pc, #592]	; (800ea78 <tcp_receive+0x2c4>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	1ad3      	subs	r3, r2, r3
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	db0e      	blt.n	800e84e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e834:	4b90      	ldr	r3, [pc, #576]	; (800ea78 <tcp_receive+0x2c4>)
 800e836:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e838:	429a      	cmp	r2, r3
 800e83a:	d125      	bne.n	800e888 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e83c:	4b8f      	ldr	r3, [pc, #572]	; (800ea7c <tcp_receive+0x2c8>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	89db      	ldrh	r3, [r3, #14]
 800e842:	b29a      	uxth	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d91c      	bls.n	800e888 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e84e:	4b8b      	ldr	r3, [pc, #556]	; (800ea7c <tcp_receive+0x2c8>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	89db      	ldrh	r3, [r3, #14]
 800e854:	b29a      	uxth	r2, r3
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e868:	429a      	cmp	r2, r3
 800e86a:	d205      	bcs.n	800e878 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e878:	4b7e      	ldr	r3, [pc, #504]	; (800ea74 <tcp_receive+0x2c0>)
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e880:	4b7d      	ldr	r3, [pc, #500]	; (800ea78 <tcp_receive+0x2c4>)
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e888:	4b7b      	ldr	r3, [pc, #492]	; (800ea78 <tcp_receive+0x2c4>)
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e890:	1ad3      	subs	r3, r2, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	dc58      	bgt.n	800e948 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e896:	4b7a      	ldr	r3, [pc, #488]	; (800ea80 <tcp_receive+0x2cc>)
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d14b      	bne.n	800e936 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e8a8:	4413      	add	r3, r2
 800e8aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d142      	bne.n	800e936 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	db3d      	blt.n	800e936 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8be:	4b6e      	ldr	r3, [pc, #440]	; (800ea78 <tcp_receive+0x2c4>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d137      	bne.n	800e936 <tcp_receive+0x182>
              found_dupack = 1;
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8d0:	2bff      	cmp	r3, #255	; 0xff
 800e8d2:	d007      	beq.n	800e8e4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8da:	3301      	adds	r3, #1
 800e8dc:	b2da      	uxtb	r2, r3
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8ea:	2b03      	cmp	r3, #3
 800e8ec:	d91b      	bls.n	800e926 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8f8:	4413      	add	r3, r2
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e902:	429a      	cmp	r2, r3
 800e904:	d30a      	bcc.n	800e91c <tcp_receive+0x168>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e910:	4413      	add	r3, r2
 800e912:	b29a      	uxth	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e91a:	e004      	b.n	800e926 <tcp_receive+0x172>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e922:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e92c:	2b02      	cmp	r3, #2
 800e92e:	d902      	bls.n	800e936 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f001 fee9 	bl	8010708 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e938:	2b00      	cmp	r3, #0
 800e93a:	f040 8160 	bne.w	800ebfe <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e946:	e15a      	b.n	800ebfe <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e948:	4b4b      	ldr	r3, [pc, #300]	; (800ea78 <tcp_receive+0x2c4>)
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e950:	1ad3      	subs	r3, r2, r3
 800e952:	3b01      	subs	r3, #1
 800e954:	2b00      	cmp	r3, #0
 800e956:	f2c0 814d 	blt.w	800ebf4 <tcp_receive+0x440>
 800e95a:	4b47      	ldr	r3, [pc, #284]	; (800ea78 <tcp_receive+0x2c4>)
 800e95c:	681a      	ldr	r2, [r3, #0]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e962:	1ad3      	subs	r3, r2, r3
 800e964:	2b00      	cmp	r3, #0
 800e966:	f300 8145 	bgt.w	800ebf4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	8b5b      	ldrh	r3, [r3, #26]
 800e96e:	f003 0304 	and.w	r3, r3, #4
 800e972:	2b00      	cmp	r3, #0
 800e974:	d010      	beq.n	800e998 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	8b5b      	ldrh	r3, [r3, #26]
 800e97a:	f023 0304 	bic.w	r3, r3, #4
 800e97e:	b29a      	uxth	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2200      	movs	r2, #0
 800e994:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e9a6:	10db      	asrs	r3, r3, #3
 800e9a8:	b21b      	sxth	r3, r3
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	4413      	add	r3, r2
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	b21a      	sxth	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e9c0:	4b2d      	ldr	r3, [pc, #180]	; (800ea78 <tcp_receive+0x2c4>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	b29a      	uxth	r2, r3
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e9d8:	4b27      	ldr	r3, [pc, #156]	; (800ea78 <tcp_receive+0x2c4>)
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	7d1b      	ldrb	r3, [r3, #20]
 800e9e4:	2b03      	cmp	r3, #3
 800e9e6:	f240 8096 	bls.w	800eb16 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d244      	bcs.n	800ea84 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	8b5b      	ldrh	r3, [r3, #26]
 800e9fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d001      	beq.n	800ea0a <tcp_receive+0x256>
 800ea06:	2301      	movs	r3, #1
 800ea08:	e000      	b.n	800ea0c <tcp_receive+0x258>
 800ea0a:	2302      	movs	r3, #2
 800ea0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ea10:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ea14:	b29a      	uxth	r2, r3
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea1a:	fb12 f303 	smulbb	r3, r2, r3
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea22:	4293      	cmp	r3, r2
 800ea24:	bf28      	it	cs
 800ea26:	4613      	movcs	r3, r2
 800ea28:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea32:	4413      	add	r3, r2
 800ea34:	b29a      	uxth	r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d309      	bcc.n	800ea54 <tcp_receive+0x2a0>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea48:	4413      	add	r3, r2
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ea52:	e060      	b.n	800eb16 <tcp_receive+0x362>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ea5e:	e05a      	b.n	800eb16 <tcp_receive+0x362>
 800ea60:	0801bd94 	.word	0x0801bd94
 800ea64:	0801c0c4 	.word	0x0801c0c4
 800ea68:	0801bde0 	.word	0x0801bde0
 800ea6c:	0801c0e0 	.word	0x0801c0e0
 800ea70:	2400b6c4 	.word	0x2400b6c4
 800ea74:	2400b6b8 	.word	0x2400b6b8
 800ea78:	2400b6bc 	.word	0x2400b6bc
 800ea7c:	2400b6a8 	.word	0x2400b6a8
 800ea80:	2400b6c2 	.word	0x2400b6c2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ea8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea8c:	4413      	add	r3, r2
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d309      	bcc.n	800eaae <tcp_receive+0x2fa>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eaa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eaa2:	4413      	add	r3, r2
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eaac:	e004      	b.n	800eab8 <tcp_receive+0x304>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d326      	bcc.n	800eb16 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ead4:	1ad3      	subs	r3, r2, r3
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eae8:	4413      	add	r3, r2
 800eaea:	b29a      	uxth	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d30a      	bcc.n	800eb0c <tcp_receive+0x358>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb00:	4413      	add	r3, r2
 800eb02:	b29a      	uxth	r2, r3
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eb0a:	e004      	b.n	800eb16 <tcp_receive+0x362>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb1e:	4a98      	ldr	r2, [pc, #608]	; (800ed80 <tcp_receive+0x5cc>)
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f7ff fdcb 	bl	800e6bc <tcp_free_acked_segments>
 800eb26:	4602      	mov	r2, r0
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb34:	4a93      	ldr	r2, [pc, #588]	; (800ed84 <tcp_receive+0x5d0>)
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f7ff fdc0 	bl	800e6bc <tcp_free_acked_segments>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d104      	bne.n	800eb54 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb50:	861a      	strh	r2, [r3, #48]	; 0x30
 800eb52:	e002      	b.n	800eb5a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2200      	movs	r2, #0
 800eb58:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d103      	bne.n	800eb70 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800eb76:	4b84      	ldr	r3, [pc, #528]	; (800ed88 <tcp_receive+0x5d4>)
 800eb78:	881b      	ldrh	r3, [r3, #0]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	8b5b      	ldrh	r3, [r3, #26]
 800eb88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d035      	beq.n	800ebfc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d118      	bne.n	800ebca <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d00c      	beq.n	800ebba <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fb f92e 	bl	8009e0e <lwip_htonl>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	dc20      	bgt.n	800ebfc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	8b5b      	ldrh	r3, [r3, #26]
 800ebbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebc2:	b29a      	uxth	r2, r3
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ebc8:	e018      	b.n	800ebfc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fb f919 	bl	8009e0e <lwip_htonl>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	1ae3      	subs	r3, r4, r3
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	dc0b      	bgt.n	800ebfc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	8b5b      	ldrh	r3, [r3, #26]
 800ebe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebec:	b29a      	uxth	r2, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ebf2:	e003      	b.n	800ebfc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f001 ff75 	bl	8010ae4 <tcp_send_empty_ack>
 800ebfa:	e000      	b.n	800ebfe <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ebfc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d05b      	beq.n	800ecbe <tcp_receive+0x50a>
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec0a:	4b60      	ldr	r3, [pc, #384]	; (800ed8c <tcp_receive+0x5d8>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	da54      	bge.n	800ecbe <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ec14:	4b5e      	ldr	r3, [pc, #376]	; (800ed90 <tcp_receive+0x5dc>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	b29a      	uxth	r2, r3
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	1ad3      	subs	r3, r2, r3
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ec28:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec32:	10db      	asrs	r3, r3, #3
 800ec34:	b21b      	sxth	r3, r3
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	1ad3      	subs	r3, r2, r3
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ec4c:	4413      	add	r3, r2
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	b21a      	sxth	r2, r3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ec56:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	da05      	bge.n	800ec6a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800ec5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ec62:	425b      	negs	r3, r3
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ec6a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec74:	109b      	asrs	r3, r3, #2
 800ec76:	b21b      	sxth	r3, r3
 800ec78:	b29b      	uxth	r3, r3
 800ec7a:	1ad3      	subs	r3, r2, r3
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec88:	b29a      	uxth	r2, r3
 800ec8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ec8e:	4413      	add	r3, r2
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	b21a      	sxth	r2, r3
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec9e:	10db      	asrs	r3, r3, #3
 800eca0:	b21b      	sxth	r3, r3
 800eca2:	b29a      	uxth	r2, r3
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ecaa:	b29b      	uxth	r3, r3
 800ecac:	4413      	add	r3, r2
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	b21a      	sxth	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ecbe:	4b35      	ldr	r3, [pc, #212]	; (800ed94 <tcp_receive+0x5e0>)
 800ecc0:	881b      	ldrh	r3, [r3, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	f000 84e1 	beq.w	800f68a <tcp_receive+0xed6>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	7d1b      	ldrb	r3, [r3, #20]
 800eccc:	2b06      	cmp	r3, #6
 800ecce:	f200 84dc 	bhi.w	800f68a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecd6:	4b30      	ldr	r3, [pc, #192]	; (800ed98 <tcp_receive+0x5e4>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	1ad3      	subs	r3, r2, r3
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	f2c0 808e 	blt.w	800ee00 <tcp_receive+0x64c>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ece8:	4b2a      	ldr	r3, [pc, #168]	; (800ed94 <tcp_receive+0x5e0>)
 800ecea:	881b      	ldrh	r3, [r3, #0]
 800ecec:	4619      	mov	r1, r3
 800ecee:	4b2a      	ldr	r3, [pc, #168]	; (800ed98 <tcp_receive+0x5e4>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	440b      	add	r3, r1
 800ecf4:	1ad3      	subs	r3, r2, r3
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	f300 8081 	bgt.w	800ee00 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ecfe:	4b27      	ldr	r3, [pc, #156]	; (800ed9c <tcp_receive+0x5e8>)
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed08:	4b23      	ldr	r3, [pc, #140]	; (800ed98 <tcp_receive+0x5e4>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	1ad3      	subs	r3, r2, r3
 800ed0e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ed10:	4b22      	ldr	r3, [pc, #136]	; (800ed9c <tcp_receive+0x5e8>)
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d106      	bne.n	800ed26 <tcp_receive+0x572>
 800ed18:	4b21      	ldr	r3, [pc, #132]	; (800eda0 <tcp_receive+0x5ec>)
 800ed1a:	f240 5294 	movw	r2, #1428	; 0x594
 800ed1e:	4921      	ldr	r1, [pc, #132]	; (800eda4 <tcp_receive+0x5f0>)
 800ed20:	4821      	ldr	r0, [pc, #132]	; (800eda8 <tcp_receive+0x5f4>)
 800ed22:	f008 ffef 	bl	8017d04 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ed26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d906      	bls.n	800ed3e <tcp_receive+0x58a>
 800ed30:	4b1b      	ldr	r3, [pc, #108]	; (800eda0 <tcp_receive+0x5ec>)
 800ed32:	f240 5295 	movw	r2, #1429	; 0x595
 800ed36:	491d      	ldr	r1, [pc, #116]	; (800edac <tcp_receive+0x5f8>)
 800ed38:	481b      	ldr	r0, [pc, #108]	; (800eda8 <tcp_receive+0x5f4>)
 800ed3a:	f008 ffe3 	bl	8017d04 <iprintf>
      off = (u16_t)off32;
 800ed3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ed44:	4b15      	ldr	r3, [pc, #84]	; (800ed9c <tcp_receive+0x5e8>)
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	891b      	ldrh	r3, [r3, #8]
 800ed4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d906      	bls.n	800ed60 <tcp_receive+0x5ac>
 800ed52:	4b13      	ldr	r3, [pc, #76]	; (800eda0 <tcp_receive+0x5ec>)
 800ed54:	f240 5297 	movw	r2, #1431	; 0x597
 800ed58:	4915      	ldr	r1, [pc, #84]	; (800edb0 <tcp_receive+0x5fc>)
 800ed5a:	4813      	ldr	r0, [pc, #76]	; (800eda8 <tcp_receive+0x5f4>)
 800ed5c:	f008 ffd2 	bl	8017d04 <iprintf>
      inseg.len -= off;
 800ed60:	4b0e      	ldr	r3, [pc, #56]	; (800ed9c <tcp_receive+0x5e8>)
 800ed62:	891a      	ldrh	r2, [r3, #8]
 800ed64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed68:	1ad3      	subs	r3, r2, r3
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	4b0b      	ldr	r3, [pc, #44]	; (800ed9c <tcp_receive+0x5e8>)
 800ed6e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ed70:	4b0a      	ldr	r3, [pc, #40]	; (800ed9c <tcp_receive+0x5e8>)
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	891a      	ldrh	r2, [r3, #8]
 800ed76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed7a:	1ad3      	subs	r3, r2, r3
 800ed7c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ed7e:	e029      	b.n	800edd4 <tcp_receive+0x620>
 800ed80:	0801c0fc 	.word	0x0801c0fc
 800ed84:	0801c104 	.word	0x0801c104
 800ed88:	2400b6c0 	.word	0x2400b6c0
 800ed8c:	2400b6bc 	.word	0x2400b6bc
 800ed90:	2400ee10 	.word	0x2400ee10
 800ed94:	2400b6c2 	.word	0x2400b6c2
 800ed98:	2400b6b8 	.word	0x2400b6b8
 800ed9c:	2400b698 	.word	0x2400b698
 800eda0:	0801bd94 	.word	0x0801bd94
 800eda4:	0801c10c 	.word	0x0801c10c
 800eda8:	0801bde0 	.word	0x0801bde0
 800edac:	0801c11c 	.word	0x0801c11c
 800edb0:	0801c12c 	.word	0x0801c12c
        off -= p->len;
 800edb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edb6:	895b      	ldrh	r3, [r3, #10]
 800edb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800edc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800edc6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800edc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edca:	2200      	movs	r2, #0
 800edcc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800edce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800edd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edd6:	895b      	ldrh	r3, [r3, #10]
 800edd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eddc:	429a      	cmp	r2, r3
 800edde:	d8e9      	bhi.n	800edb4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ede0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ede4:	4619      	mov	r1, r3
 800ede6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ede8:	f7fc fb64 	bl	800b4b4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf0:	4a91      	ldr	r2, [pc, #580]	; (800f038 <tcp_receive+0x884>)
 800edf2:	6013      	str	r3, [r2, #0]
 800edf4:	4b91      	ldr	r3, [pc, #580]	; (800f03c <tcp_receive+0x888>)
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	4a8f      	ldr	r2, [pc, #572]	; (800f038 <tcp_receive+0x884>)
 800edfa:	6812      	ldr	r2, [r2, #0]
 800edfc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800edfe:	e00d      	b.n	800ee1c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ee00:	4b8d      	ldr	r3, [pc, #564]	; (800f038 <tcp_receive+0x884>)
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee08:	1ad3      	subs	r3, r2, r3
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	da06      	bge.n	800ee1c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	8b5b      	ldrh	r3, [r3, #26]
 800ee12:	f043 0302 	orr.w	r3, r3, #2
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ee1c:	4b86      	ldr	r3, [pc, #536]	; (800f038 <tcp_receive+0x884>)
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee24:	1ad3      	subs	r3, r2, r3
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	f2c0 842a 	blt.w	800f680 <tcp_receive+0xecc>
 800ee2c:	4b82      	ldr	r3, [pc, #520]	; (800f038 <tcp_receive+0x884>)
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee34:	6879      	ldr	r1, [r7, #4]
 800ee36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee38:	440b      	add	r3, r1
 800ee3a:	1ad3      	subs	r3, r2, r3
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	f300 841e 	bgt.w	800f680 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee48:	4b7b      	ldr	r3, [pc, #492]	; (800f038 <tcp_receive+0x884>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	f040 829a 	bne.w	800f386 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ee52:	4b7a      	ldr	r3, [pc, #488]	; (800f03c <tcp_receive+0x888>)
 800ee54:	891c      	ldrh	r4, [r3, #8]
 800ee56:	4b79      	ldr	r3, [pc, #484]	; (800f03c <tcp_receive+0x888>)
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	899b      	ldrh	r3, [r3, #12]
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fa ffc0 	bl	8009de4 <lwip_htons>
 800ee64:	4603      	mov	r3, r0
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	f003 0303 	and.w	r3, r3, #3
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d001      	beq.n	800ee74 <tcp_receive+0x6c0>
 800ee70:	2301      	movs	r3, #1
 800ee72:	e000      	b.n	800ee76 <tcp_receive+0x6c2>
 800ee74:	2300      	movs	r3, #0
 800ee76:	4423      	add	r3, r4
 800ee78:	b29a      	uxth	r2, r3
 800ee7a:	4b71      	ldr	r3, [pc, #452]	; (800f040 <tcp_receive+0x88c>)
 800ee7c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ee82:	4b6f      	ldr	r3, [pc, #444]	; (800f040 <tcp_receive+0x88c>)
 800ee84:	881b      	ldrh	r3, [r3, #0]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d275      	bcs.n	800ef76 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ee8a:	4b6c      	ldr	r3, [pc, #432]	; (800f03c <tcp_receive+0x888>)
 800ee8c:	68db      	ldr	r3, [r3, #12]
 800ee8e:	899b      	ldrh	r3, [r3, #12]
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fa ffa6 	bl	8009de4 <lwip_htons>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	f003 0301 	and.w	r3, r3, #1
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d01f      	beq.n	800eee4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800eea4:	4b65      	ldr	r3, [pc, #404]	; (800f03c <tcp_receive+0x888>)
 800eea6:	68db      	ldr	r3, [r3, #12]
 800eea8:	899b      	ldrh	r3, [r3, #12]
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	b21b      	sxth	r3, r3
 800eeae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eeb2:	b21c      	sxth	r4, r3
 800eeb4:	4b61      	ldr	r3, [pc, #388]	; (800f03c <tcp_receive+0x888>)
 800eeb6:	68db      	ldr	r3, [r3, #12]
 800eeb8:	899b      	ldrh	r3, [r3, #12]
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fa ff91 	bl	8009de4 <lwip_htons>
 800eec2:	4603      	mov	r3, r0
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800eecc:	b29b      	uxth	r3, r3
 800eece:	4618      	mov	r0, r3
 800eed0:	f7fa ff88 	bl	8009de4 <lwip_htons>
 800eed4:	4603      	mov	r3, r0
 800eed6:	b21b      	sxth	r3, r3
 800eed8:	4323      	orrs	r3, r4
 800eeda:	b21a      	sxth	r2, r3
 800eedc:	4b57      	ldr	r3, [pc, #348]	; (800f03c <tcp_receive+0x888>)
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	b292      	uxth	r2, r2
 800eee2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eee8:	4b54      	ldr	r3, [pc, #336]	; (800f03c <tcp_receive+0x888>)
 800eeea:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800eeec:	4b53      	ldr	r3, [pc, #332]	; (800f03c <tcp_receive+0x888>)
 800eeee:	68db      	ldr	r3, [r3, #12]
 800eef0:	899b      	ldrh	r3, [r3, #12]
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fa ff75 	bl	8009de4 <lwip_htons>
 800eefa:	4603      	mov	r3, r0
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	f003 0302 	and.w	r3, r3, #2
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d005      	beq.n	800ef12 <tcp_receive+0x75e>
            inseg.len -= 1;
 800ef06:	4b4d      	ldr	r3, [pc, #308]	; (800f03c <tcp_receive+0x888>)
 800ef08:	891b      	ldrh	r3, [r3, #8]
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	4b4b      	ldr	r3, [pc, #300]	; (800f03c <tcp_receive+0x888>)
 800ef10:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ef12:	4b4a      	ldr	r3, [pc, #296]	; (800f03c <tcp_receive+0x888>)
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	4a49      	ldr	r2, [pc, #292]	; (800f03c <tcp_receive+0x888>)
 800ef18:	8912      	ldrh	r2, [r2, #8]
 800ef1a:	4611      	mov	r1, r2
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7fc f9c9 	bl	800b2b4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ef22:	4b46      	ldr	r3, [pc, #280]	; (800f03c <tcp_receive+0x888>)
 800ef24:	891c      	ldrh	r4, [r3, #8]
 800ef26:	4b45      	ldr	r3, [pc, #276]	; (800f03c <tcp_receive+0x888>)
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	899b      	ldrh	r3, [r3, #12]
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fa ff58 	bl	8009de4 <lwip_htons>
 800ef34:	4603      	mov	r3, r0
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	f003 0303 	and.w	r3, r3, #3
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d001      	beq.n	800ef44 <tcp_receive+0x790>
 800ef40:	2301      	movs	r3, #1
 800ef42:	e000      	b.n	800ef46 <tcp_receive+0x792>
 800ef44:	2300      	movs	r3, #0
 800ef46:	4423      	add	r3, r4
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	4b3d      	ldr	r3, [pc, #244]	; (800f040 <tcp_receive+0x88c>)
 800ef4c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ef4e:	4b3c      	ldr	r3, [pc, #240]	; (800f040 <tcp_receive+0x88c>)
 800ef50:	881b      	ldrh	r3, [r3, #0]
 800ef52:	461a      	mov	r2, r3
 800ef54:	4b38      	ldr	r3, [pc, #224]	; (800f038 <tcp_receive+0x884>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	441a      	add	r2, r3
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef5e:	6879      	ldr	r1, [r7, #4]
 800ef60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ef62:	440b      	add	r3, r1
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d006      	beq.n	800ef76 <tcp_receive+0x7c2>
 800ef68:	4b36      	ldr	r3, [pc, #216]	; (800f044 <tcp_receive+0x890>)
 800ef6a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ef6e:	4936      	ldr	r1, [pc, #216]	; (800f048 <tcp_receive+0x894>)
 800ef70:	4836      	ldr	r0, [pc, #216]	; (800f04c <tcp_receive+0x898>)
 800ef72:	f008 fec7 	bl	8017d04 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f000 80e7 	beq.w	800f14e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ef80:	4b2e      	ldr	r3, [pc, #184]	; (800f03c <tcp_receive+0x888>)
 800ef82:	68db      	ldr	r3, [r3, #12]
 800ef84:	899b      	ldrh	r3, [r3, #12]
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7fa ff2b 	bl	8009de4 <lwip_htons>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	b2db      	uxtb	r3, r3
 800ef92:	f003 0301 	and.w	r3, r3, #1
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d010      	beq.n	800efbc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ef9a:	e00a      	b.n	800efb2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efa0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800efac:	68f8      	ldr	r0, [r7, #12]
 800efae:	f7fd fd96 	bl	800cade <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1f0      	bne.n	800ef9c <tcp_receive+0x7e8>
 800efba:	e0c8      	b.n	800f14e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efc0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800efc2:	e052      	b.n	800f06a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800efc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	899b      	ldrh	r3, [r3, #12]
 800efca:	b29b      	uxth	r3, r3
 800efcc:	4618      	mov	r0, r3
 800efce:	f7fa ff09 	bl	8009de4 <lwip_htons>
 800efd2:	4603      	mov	r3, r0
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	f003 0301 	and.w	r3, r3, #1
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d03d      	beq.n	800f05a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800efde:	4b17      	ldr	r3, [pc, #92]	; (800f03c <tcp_receive+0x888>)
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	899b      	ldrh	r3, [r3, #12]
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fa fefc 	bl	8009de4 <lwip_htons>
 800efec:	4603      	mov	r3, r0
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d130      	bne.n	800f05a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800eff8:	4b10      	ldr	r3, [pc, #64]	; (800f03c <tcp_receive+0x888>)
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	899b      	ldrh	r3, [r3, #12]
 800effe:	b29c      	uxth	r4, r3
 800f000:	2001      	movs	r0, #1
 800f002:	f7fa feef 	bl	8009de4 <lwip_htons>
 800f006:	4603      	mov	r3, r0
 800f008:	461a      	mov	r2, r3
 800f00a:	4b0c      	ldr	r3, [pc, #48]	; (800f03c <tcp_receive+0x888>)
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	4322      	orrs	r2, r4
 800f010:	b292      	uxth	r2, r2
 800f012:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f014:	4b09      	ldr	r3, [pc, #36]	; (800f03c <tcp_receive+0x888>)
 800f016:	891c      	ldrh	r4, [r3, #8]
 800f018:	4b08      	ldr	r3, [pc, #32]	; (800f03c <tcp_receive+0x888>)
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	899b      	ldrh	r3, [r3, #12]
 800f01e:	b29b      	uxth	r3, r3
 800f020:	4618      	mov	r0, r3
 800f022:	f7fa fedf 	bl	8009de4 <lwip_htons>
 800f026:	4603      	mov	r3, r0
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	f003 0303 	and.w	r3, r3, #3
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00e      	beq.n	800f050 <tcp_receive+0x89c>
 800f032:	2301      	movs	r3, #1
 800f034:	e00d      	b.n	800f052 <tcp_receive+0x89e>
 800f036:	bf00      	nop
 800f038:	2400b6b8 	.word	0x2400b6b8
 800f03c:	2400b698 	.word	0x2400b698
 800f040:	2400b6c2 	.word	0x2400b6c2
 800f044:	0801bd94 	.word	0x0801bd94
 800f048:	0801c13c 	.word	0x0801c13c
 800f04c:	0801bde0 	.word	0x0801bde0
 800f050:	2300      	movs	r3, #0
 800f052:	4423      	add	r3, r4
 800f054:	b29a      	uxth	r2, r3
 800f056:	4b98      	ldr	r3, [pc, #608]	; (800f2b8 <tcp_receive+0xb04>)
 800f058:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f05c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f064:	6938      	ldr	r0, [r7, #16]
 800f066:	f7fd fd3a 	bl	800cade <tcp_seg_free>
            while (next &&
 800f06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d00e      	beq.n	800f08e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f070:	4b91      	ldr	r3, [pc, #580]	; (800f2b8 <tcp_receive+0xb04>)
 800f072:	881b      	ldrh	r3, [r3, #0]
 800f074:	461a      	mov	r2, r3
 800f076:	4b91      	ldr	r3, [pc, #580]	; (800f2bc <tcp_receive+0xb08>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	441a      	add	r2, r3
 800f07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f07e:	68db      	ldr	r3, [r3, #12]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f084:	8909      	ldrh	r1, [r1, #8]
 800f086:	440b      	add	r3, r1
 800f088:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	da9a      	bge.n	800efc4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f090:	2b00      	cmp	r3, #0
 800f092:	d059      	beq.n	800f148 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f094:	4b88      	ldr	r3, [pc, #544]	; (800f2b8 <tcp_receive+0xb04>)
 800f096:	881b      	ldrh	r3, [r3, #0]
 800f098:	461a      	mov	r2, r3
 800f09a:	4b88      	ldr	r3, [pc, #544]	; (800f2bc <tcp_receive+0xb08>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	441a      	add	r2, r3
 800f0a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	dd4d      	ble.n	800f148 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	4b81      	ldr	r3, [pc, #516]	; (800f2bc <tcp_receive+0xb08>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	1ad3      	subs	r3, r2, r3
 800f0bc:	b29a      	uxth	r2, r3
 800f0be:	4b80      	ldr	r3, [pc, #512]	; (800f2c0 <tcp_receive+0xb0c>)
 800f0c0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f0c2:	4b7f      	ldr	r3, [pc, #508]	; (800f2c0 <tcp_receive+0xb0c>)
 800f0c4:	68db      	ldr	r3, [r3, #12]
 800f0c6:	899b      	ldrh	r3, [r3, #12]
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fa fe8a 	bl	8009de4 <lwip_htons>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	f003 0302 	and.w	r3, r3, #2
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d005      	beq.n	800f0e8 <tcp_receive+0x934>
                inseg.len -= 1;
 800f0dc:	4b78      	ldr	r3, [pc, #480]	; (800f2c0 <tcp_receive+0xb0c>)
 800f0de:	891b      	ldrh	r3, [r3, #8]
 800f0e0:	3b01      	subs	r3, #1
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	4b76      	ldr	r3, [pc, #472]	; (800f2c0 <tcp_receive+0xb0c>)
 800f0e6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f0e8:	4b75      	ldr	r3, [pc, #468]	; (800f2c0 <tcp_receive+0xb0c>)
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	4a74      	ldr	r2, [pc, #464]	; (800f2c0 <tcp_receive+0xb0c>)
 800f0ee:	8912      	ldrh	r2, [r2, #8]
 800f0f0:	4611      	mov	r1, r2
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fc f8de 	bl	800b2b4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f0f8:	4b71      	ldr	r3, [pc, #452]	; (800f2c0 <tcp_receive+0xb0c>)
 800f0fa:	891c      	ldrh	r4, [r3, #8]
 800f0fc:	4b70      	ldr	r3, [pc, #448]	; (800f2c0 <tcp_receive+0xb0c>)
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	899b      	ldrh	r3, [r3, #12]
 800f102:	b29b      	uxth	r3, r3
 800f104:	4618      	mov	r0, r3
 800f106:	f7fa fe6d 	bl	8009de4 <lwip_htons>
 800f10a:	4603      	mov	r3, r0
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	f003 0303 	and.w	r3, r3, #3
 800f112:	2b00      	cmp	r3, #0
 800f114:	d001      	beq.n	800f11a <tcp_receive+0x966>
 800f116:	2301      	movs	r3, #1
 800f118:	e000      	b.n	800f11c <tcp_receive+0x968>
 800f11a:	2300      	movs	r3, #0
 800f11c:	4423      	add	r3, r4
 800f11e:	b29a      	uxth	r2, r3
 800f120:	4b65      	ldr	r3, [pc, #404]	; (800f2b8 <tcp_receive+0xb04>)
 800f122:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f124:	4b64      	ldr	r3, [pc, #400]	; (800f2b8 <tcp_receive+0xb04>)
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	461a      	mov	r2, r3
 800f12a:	4b64      	ldr	r3, [pc, #400]	; (800f2bc <tcp_receive+0xb08>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	441a      	add	r2, r3
 800f130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	429a      	cmp	r2, r3
 800f138:	d006      	beq.n	800f148 <tcp_receive+0x994>
 800f13a:	4b62      	ldr	r3, [pc, #392]	; (800f2c4 <tcp_receive+0xb10>)
 800f13c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f140:	4961      	ldr	r1, [pc, #388]	; (800f2c8 <tcp_receive+0xb14>)
 800f142:	4862      	ldr	r0, [pc, #392]	; (800f2cc <tcp_receive+0xb18>)
 800f144:	f008 fdde 	bl	8017d04 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f14c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f14e:	4b5a      	ldr	r3, [pc, #360]	; (800f2b8 <tcp_receive+0xb04>)
 800f150:	881b      	ldrh	r3, [r3, #0]
 800f152:	461a      	mov	r2, r3
 800f154:	4b59      	ldr	r3, [pc, #356]	; (800f2bc <tcp_receive+0xb08>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	441a      	add	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f162:	4b55      	ldr	r3, [pc, #340]	; (800f2b8 <tcp_receive+0xb04>)
 800f164:	881b      	ldrh	r3, [r3, #0]
 800f166:	429a      	cmp	r2, r3
 800f168:	d206      	bcs.n	800f178 <tcp_receive+0x9c4>
 800f16a:	4b56      	ldr	r3, [pc, #344]	; (800f2c4 <tcp_receive+0xb10>)
 800f16c:	f240 6207 	movw	r2, #1543	; 0x607
 800f170:	4957      	ldr	r1, [pc, #348]	; (800f2d0 <tcp_receive+0xb1c>)
 800f172:	4856      	ldr	r0, [pc, #344]	; (800f2cc <tcp_receive+0xb18>)
 800f174:	f008 fdc6 	bl	8017d04 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f17c:	4b4e      	ldr	r3, [pc, #312]	; (800f2b8 <tcp_receive+0xb04>)
 800f17e:	881b      	ldrh	r3, [r3, #0]
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	b29a      	uxth	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f7fc ffc9 	bl	800c120 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f18e:	4b4c      	ldr	r3, [pc, #304]	; (800f2c0 <tcp_receive+0xb0c>)
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	891b      	ldrh	r3, [r3, #8]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d006      	beq.n	800f1a6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f198:	4b49      	ldr	r3, [pc, #292]	; (800f2c0 <tcp_receive+0xb0c>)
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	4a4d      	ldr	r2, [pc, #308]	; (800f2d4 <tcp_receive+0xb20>)
 800f19e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f1a0:	4b47      	ldr	r3, [pc, #284]	; (800f2c0 <tcp_receive+0xb0c>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f1a6:	4b46      	ldr	r3, [pc, #280]	; (800f2c0 <tcp_receive+0xb0c>)
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	899b      	ldrh	r3, [r3, #12]
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7fa fe18 	bl	8009de4 <lwip_htons>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	f003 0301 	and.w	r3, r3, #1
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f000 80b8 	beq.w	800f332 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f1c2:	4b45      	ldr	r3, [pc, #276]	; (800f2d8 <tcp_receive+0xb24>)
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	f043 0320 	orr.w	r3, r3, #32
 800f1ca:	b2da      	uxtb	r2, r3
 800f1cc:	4b42      	ldr	r3, [pc, #264]	; (800f2d8 <tcp_receive+0xb24>)
 800f1ce:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f1d0:	e0af      	b.n	800f332 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1d6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	4a36      	ldr	r2, [pc, #216]	; (800f2bc <tcp_receive+0xb08>)
 800f1e2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	891b      	ldrh	r3, [r3, #8]
 800f1e8:	461c      	mov	r4, r3
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	899b      	ldrh	r3, [r3, #12]
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fa fdf6 	bl	8009de4 <lwip_htons>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	f003 0303 	and.w	r3, r3, #3
 800f200:	2b00      	cmp	r3, #0
 800f202:	d001      	beq.n	800f208 <tcp_receive+0xa54>
 800f204:	2301      	movs	r3, #1
 800f206:	e000      	b.n	800f20a <tcp_receive+0xa56>
 800f208:	2300      	movs	r3, #0
 800f20a:	191a      	adds	r2, r3, r4
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f210:	441a      	add	r2, r3
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f21a:	461c      	mov	r4, r3
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	891b      	ldrh	r3, [r3, #8]
 800f220:	461d      	mov	r5, r3
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	68db      	ldr	r3, [r3, #12]
 800f226:	899b      	ldrh	r3, [r3, #12]
 800f228:	b29b      	uxth	r3, r3
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7fa fdda 	bl	8009de4 <lwip_htons>
 800f230:	4603      	mov	r3, r0
 800f232:	b2db      	uxtb	r3, r3
 800f234:	f003 0303 	and.w	r3, r3, #3
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d001      	beq.n	800f240 <tcp_receive+0xa8c>
 800f23c:	2301      	movs	r3, #1
 800f23e:	e000      	b.n	800f242 <tcp_receive+0xa8e>
 800f240:	2300      	movs	r3, #0
 800f242:	442b      	add	r3, r5
 800f244:	429c      	cmp	r4, r3
 800f246:	d206      	bcs.n	800f256 <tcp_receive+0xaa2>
 800f248:	4b1e      	ldr	r3, [pc, #120]	; (800f2c4 <tcp_receive+0xb10>)
 800f24a:	f240 622b 	movw	r2, #1579	; 0x62b
 800f24e:	4923      	ldr	r1, [pc, #140]	; (800f2dc <tcp_receive+0xb28>)
 800f250:	481e      	ldr	r0, [pc, #120]	; (800f2cc <tcp_receive+0xb18>)
 800f252:	f008 fd57 	bl	8017d04 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	891b      	ldrh	r3, [r3, #8]
 800f25a:	461c      	mov	r4, r3
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	68db      	ldr	r3, [r3, #12]
 800f260:	899b      	ldrh	r3, [r3, #12]
 800f262:	b29b      	uxth	r3, r3
 800f264:	4618      	mov	r0, r3
 800f266:	f7fa fdbd 	bl	8009de4 <lwip_htons>
 800f26a:	4603      	mov	r3, r0
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	f003 0303 	and.w	r3, r3, #3
 800f272:	2b00      	cmp	r3, #0
 800f274:	d001      	beq.n	800f27a <tcp_receive+0xac6>
 800f276:	2301      	movs	r3, #1
 800f278:	e000      	b.n	800f27c <tcp_receive+0xac8>
 800f27a:	2300      	movs	r3, #0
 800f27c:	1919      	adds	r1, r3, r4
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f282:	b28b      	uxth	r3, r1
 800f284:	1ad3      	subs	r3, r2, r3
 800f286:	b29a      	uxth	r2, r3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7fc ff47 	bl	800c120 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	891b      	ldrh	r3, [r3, #8]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d028      	beq.n	800f2ee <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f29c:	4b0d      	ldr	r3, [pc, #52]	; (800f2d4 <tcp_receive+0xb20>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d01d      	beq.n	800f2e0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f2a4:	4b0b      	ldr	r3, [pc, #44]	; (800f2d4 <tcp_receive+0xb20>)
 800f2a6:	681a      	ldr	r2, [r3, #0]
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	4610      	mov	r0, r2
 800f2b0:	f7fc fa54 	bl	800b75c <pbuf_cat>
 800f2b4:	e018      	b.n	800f2e8 <tcp_receive+0xb34>
 800f2b6:	bf00      	nop
 800f2b8:	2400b6c2 	.word	0x2400b6c2
 800f2bc:	2400b6b8 	.word	0x2400b6b8
 800f2c0:	2400b698 	.word	0x2400b698
 800f2c4:	0801bd94 	.word	0x0801bd94
 800f2c8:	0801c174 	.word	0x0801c174
 800f2cc:	0801bde0 	.word	0x0801bde0
 800f2d0:	0801c1b0 	.word	0x0801c1b0
 800f2d4:	2400b6c8 	.word	0x2400b6c8
 800f2d8:	2400b6c5 	.word	0x2400b6c5
 800f2dc:	0801c1d0 	.word	0x0801c1d0
            } else {
              recv_data = cseg->p;
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	4a70      	ldr	r2, [pc, #448]	; (800f4a8 <tcp_receive+0xcf4>)
 800f2e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	68db      	ldr	r3, [r3, #12]
 800f2f2:	899b      	ldrh	r3, [r3, #12]
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7fa fd74 	bl	8009de4 <lwip_htons>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	f003 0301 	and.w	r3, r3, #1
 800f304:	2b00      	cmp	r3, #0
 800f306:	d00d      	beq.n	800f324 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f308:	4b68      	ldr	r3, [pc, #416]	; (800f4ac <tcp_receive+0xcf8>)
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	f043 0320 	orr.w	r3, r3, #32
 800f310:	b2da      	uxtb	r2, r3
 800f312:	4b66      	ldr	r3, [pc, #408]	; (800f4ac <tcp_receive+0xcf8>)
 800f314:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	7d1b      	ldrb	r3, [r3, #20]
 800f31a:	2b04      	cmp	r3, #4
 800f31c:	d102      	bne.n	800f324 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2207      	movs	r2, #7
 800f322:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f32c:	68b8      	ldr	r0, [r7, #8]
 800f32e:	f7fd fbd6 	bl	800cade <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f336:	2b00      	cmp	r3, #0
 800f338:	d008      	beq.n	800f34c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	685a      	ldr	r2, [r3, #4]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f346:	429a      	cmp	r2, r3
 800f348:	f43f af43 	beq.w	800f1d2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	8b5b      	ldrh	r3, [r3, #26]
 800f350:	f003 0301 	and.w	r3, r3, #1
 800f354:	2b00      	cmp	r3, #0
 800f356:	d00e      	beq.n	800f376 <tcp_receive+0xbc2>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	8b5b      	ldrh	r3, [r3, #26]
 800f35c:	f023 0301 	bic.w	r3, r3, #1
 800f360:	b29a      	uxth	r2, r3
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	835a      	strh	r2, [r3, #26]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	8b5b      	ldrh	r3, [r3, #26]
 800f36a:	f043 0302 	orr.w	r3, r3, #2
 800f36e:	b29a      	uxth	r2, r3
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f374:	e188      	b.n	800f688 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	8b5b      	ldrh	r3, [r3, #26]
 800f37a:	f043 0301 	orr.w	r3, r3, #1
 800f37e:	b29a      	uxth	r2, r3
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f384:	e180      	b.n	800f688 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d106      	bne.n	800f39c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f38e:	4848      	ldr	r0, [pc, #288]	; (800f4b0 <tcp_receive+0xcfc>)
 800f390:	f7fd fbbe 	bl	800cb10 <tcp_seg_copy>
 800f394:	4602      	mov	r2, r0
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	675a      	str	r2, [r3, #116]	; 0x74
 800f39a:	e16d      	b.n	800f678 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f39c:	2300      	movs	r3, #0
 800f39e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f3a6:	e157      	b.n	800f658 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3aa:	68db      	ldr	r3, [r3, #12]
 800f3ac:	685a      	ldr	r2, [r3, #4]
 800f3ae:	4b41      	ldr	r3, [pc, #260]	; (800f4b4 <tcp_receive+0xd00>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d11d      	bne.n	800f3f2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f3b6:	4b3e      	ldr	r3, [pc, #248]	; (800f4b0 <tcp_receive+0xcfc>)
 800f3b8:	891a      	ldrh	r2, [r3, #8]
 800f3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3bc:	891b      	ldrh	r3, [r3, #8]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	f240 814f 	bls.w	800f662 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f3c4:	483a      	ldr	r0, [pc, #232]	; (800f4b0 <tcp_receive+0xcfc>)
 800f3c6:	f7fd fba3 	bl	800cb10 <tcp_seg_copy>
 800f3ca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	f000 8149 	beq.w	800f666 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d003      	beq.n	800f3e2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3dc:	697a      	ldr	r2, [r7, #20]
 800f3de:	601a      	str	r2, [r3, #0]
 800f3e0:	e002      	b.n	800f3e8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	697a      	ldr	r2, [r7, #20]
 800f3e6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f3e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3ea:	6978      	ldr	r0, [r7, #20]
 800f3ec:	f7ff f8de 	bl	800e5ac <tcp_oos_insert_segment>
                }
                break;
 800f3f0:	e139      	b.n	800f666 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d117      	bne.n	800f428 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f3f8:	4b2e      	ldr	r3, [pc, #184]	; (800f4b4 <tcp_receive+0xd00>)
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	1ad3      	subs	r3, r2, r3
 800f404:	2b00      	cmp	r3, #0
 800f406:	da57      	bge.n	800f4b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f408:	4829      	ldr	r0, [pc, #164]	; (800f4b0 <tcp_receive+0xcfc>)
 800f40a:	f7fd fb81 	bl	800cb10 <tcp_seg_copy>
 800f40e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f410:	69bb      	ldr	r3, [r7, #24]
 800f412:	2b00      	cmp	r3, #0
 800f414:	f000 8129 	beq.w	800f66a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	69ba      	ldr	r2, [r7, #24]
 800f41c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f41e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f420:	69b8      	ldr	r0, [r7, #24]
 800f422:	f7ff f8c3 	bl	800e5ac <tcp_oos_insert_segment>
                  }
                  break;
 800f426:	e120      	b.n	800f66a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f428:	4b22      	ldr	r3, [pc, #136]	; (800f4b4 <tcp_receive+0xd00>)
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	1ad3      	subs	r3, r2, r3
 800f434:	3b01      	subs	r3, #1
 800f436:	2b00      	cmp	r3, #0
 800f438:	db3e      	blt.n	800f4b8 <tcp_receive+0xd04>
 800f43a:	4b1e      	ldr	r3, [pc, #120]	; (800f4b4 <tcp_receive+0xd00>)
 800f43c:	681a      	ldr	r2, [r3, #0]
 800f43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	1ad3      	subs	r3, r2, r3
 800f446:	3301      	adds	r3, #1
 800f448:	2b00      	cmp	r3, #0
 800f44a:	dc35      	bgt.n	800f4b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f44c:	4818      	ldr	r0, [pc, #96]	; (800f4b0 <tcp_receive+0xcfc>)
 800f44e:	f7fd fb5f 	bl	800cb10 <tcp_seg_copy>
 800f452:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	2b00      	cmp	r3, #0
 800f458:	f000 8109 	beq.w	800f66e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f45e:	68db      	ldr	r3, [r3, #12]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f464:	8912      	ldrh	r2, [r2, #8]
 800f466:	441a      	add	r2, r3
 800f468:	4b12      	ldr	r3, [pc, #72]	; (800f4b4 <tcp_receive+0xd00>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	1ad3      	subs	r3, r2, r3
 800f46e:	2b00      	cmp	r3, #0
 800f470:	dd12      	ble.n	800f498 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f472:	4b10      	ldr	r3, [pc, #64]	; (800f4b4 <tcp_receive+0xd00>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	b29a      	uxth	r2, r3
 800f478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f47a:	68db      	ldr	r3, [r3, #12]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	b29b      	uxth	r3, r3
 800f480:	1ad3      	subs	r3, r2, r3
 800f482:	b29a      	uxth	r2, r3
 800f484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f486:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f48a:	685a      	ldr	r2, [r3, #4]
 800f48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f48e:	891b      	ldrh	r3, [r3, #8]
 800f490:	4619      	mov	r1, r3
 800f492:	4610      	mov	r0, r2
 800f494:	f7fb ff0e 	bl	800b2b4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f49a:	69fa      	ldr	r2, [r7, #28]
 800f49c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f49e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f4a0:	69f8      	ldr	r0, [r7, #28]
 800f4a2:	f7ff f883 	bl	800e5ac <tcp_oos_insert_segment>
                  }
                  break;
 800f4a6:	e0e2      	b.n	800f66e <tcp_receive+0xeba>
 800f4a8:	2400b6c8 	.word	0x2400b6c8
 800f4ac:	2400b6c5 	.word	0x2400b6c5
 800f4b0:	2400b698 	.word	0x2400b698
 800f4b4:	2400b6b8 	.word	0x2400b6b8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ba:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f040 80c6 	bne.w	800f652 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f4c6:	4b80      	ldr	r3, [pc, #512]	; (800f6c8 <tcp_receive+0xf14>)
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4cc:	68db      	ldr	r3, [r3, #12]
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	f340 80bd 	ble.w	800f652 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4da:	68db      	ldr	r3, [r3, #12]
 800f4dc:	899b      	ldrh	r3, [r3, #12]
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7fa fc7f 	bl	8009de4 <lwip_htons>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	f003 0301 	and.w	r3, r3, #1
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	f040 80bf 	bne.w	800f672 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f4f4:	4875      	ldr	r0, [pc, #468]	; (800f6cc <tcp_receive+0xf18>)
 800f4f6:	f7fd fb0b 	bl	800cb10 <tcp_seg_copy>
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	f000 80b6 	beq.w	800f676 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f512:	8912      	ldrh	r2, [r2, #8]
 800f514:	441a      	add	r2, r3
 800f516:	4b6c      	ldr	r3, [pc, #432]	; (800f6c8 <tcp_receive+0xf14>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	1ad3      	subs	r3, r2, r3
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	dd12      	ble.n	800f546 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f520:	4b69      	ldr	r3, [pc, #420]	; (800f6c8 <tcp_receive+0xf14>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	b29a      	uxth	r2, r3
 800f526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f528:	68db      	ldr	r3, [r3, #12]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	b29a      	uxth	r2, r3
 800f532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f534:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f538:	685a      	ldr	r2, [r3, #4]
 800f53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53c:	891b      	ldrh	r3, [r3, #8]
 800f53e:	4619      	mov	r1, r3
 800f540:	4610      	mov	r0, r2
 800f542:	f7fb feb7 	bl	800b2b4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f546:	4b62      	ldr	r3, [pc, #392]	; (800f6d0 <tcp_receive+0xf1c>)
 800f548:	881b      	ldrh	r3, [r3, #0]
 800f54a:	461a      	mov	r2, r3
 800f54c:	4b5e      	ldr	r3, [pc, #376]	; (800f6c8 <tcp_receive+0xf14>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	441a      	add	r2, r3
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f556:	6879      	ldr	r1, [r7, #4]
 800f558:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f55a:	440b      	add	r3, r1
 800f55c:	1ad3      	subs	r3, r2, r3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	f340 8089 	ble.w	800f676 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	68db      	ldr	r3, [r3, #12]
 800f56a:	899b      	ldrh	r3, [r3, #12]
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	4618      	mov	r0, r3
 800f570:	f7fa fc38 	bl	8009de4 <lwip_htons>
 800f574:	4603      	mov	r3, r0
 800f576:	b2db      	uxtb	r3, r3
 800f578:	f003 0301 	and.w	r3, r3, #1
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d022      	beq.n	800f5c6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	68db      	ldr	r3, [r3, #12]
 800f586:	899b      	ldrh	r3, [r3, #12]
 800f588:	b29b      	uxth	r3, r3
 800f58a:	b21b      	sxth	r3, r3
 800f58c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f590:	b21c      	sxth	r4, r3
 800f592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	899b      	ldrh	r3, [r3, #12]
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fa fc21 	bl	8009de4 <lwip_htons>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fa fc18 	bl	8009de4 <lwip_htons>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	b21b      	sxth	r3, r3
 800f5b8:	4323      	orrs	r3, r4
 800f5ba:	b21a      	sxth	r2, r3
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	68db      	ldr	r3, [r3, #12]
 800f5c2:	b292      	uxth	r2, r2
 800f5c4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ca:	b29a      	uxth	r2, r3
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5d0:	4413      	add	r3, r2
 800f5d2:	b299      	uxth	r1, r3
 800f5d4:	4b3c      	ldr	r3, [pc, #240]	; (800f6c8 <tcp_receive+0xf14>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	1a8a      	subs	r2, r1, r2
 800f5e0:	b292      	uxth	r2, r2
 800f5e2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	685a      	ldr	r2, [r3, #4]
 800f5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	891b      	ldrh	r3, [r3, #8]
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	4610      	mov	r0, r2
 800f5f4:	f7fb fe5e 	bl	800b2b4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	891c      	ldrh	r4, [r3, #8]
 800f5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	68db      	ldr	r3, [r3, #12]
 800f604:	899b      	ldrh	r3, [r3, #12]
 800f606:	b29b      	uxth	r3, r3
 800f608:	4618      	mov	r0, r3
 800f60a:	f7fa fbeb 	bl	8009de4 <lwip_htons>
 800f60e:	4603      	mov	r3, r0
 800f610:	b2db      	uxtb	r3, r3
 800f612:	f003 0303 	and.w	r3, r3, #3
 800f616:	2b00      	cmp	r3, #0
 800f618:	d001      	beq.n	800f61e <tcp_receive+0xe6a>
 800f61a:	2301      	movs	r3, #1
 800f61c:	e000      	b.n	800f620 <tcp_receive+0xe6c>
 800f61e:	2300      	movs	r3, #0
 800f620:	4423      	add	r3, r4
 800f622:	b29a      	uxth	r2, r3
 800f624:	4b2a      	ldr	r3, [pc, #168]	; (800f6d0 <tcp_receive+0xf1c>)
 800f626:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f628:	4b29      	ldr	r3, [pc, #164]	; (800f6d0 <tcp_receive+0xf1c>)
 800f62a:	881b      	ldrh	r3, [r3, #0]
 800f62c:	461a      	mov	r2, r3
 800f62e:	4b26      	ldr	r3, [pc, #152]	; (800f6c8 <tcp_receive+0xf14>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	441a      	add	r2, r3
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f638:	6879      	ldr	r1, [r7, #4]
 800f63a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f63c:	440b      	add	r3, r1
 800f63e:	429a      	cmp	r2, r3
 800f640:	d019      	beq.n	800f676 <tcp_receive+0xec2>
 800f642:	4b24      	ldr	r3, [pc, #144]	; (800f6d4 <tcp_receive+0xf20>)
 800f644:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f648:	4923      	ldr	r1, [pc, #140]	; (800f6d8 <tcp_receive+0xf24>)
 800f64a:	4824      	ldr	r0, [pc, #144]	; (800f6dc <tcp_receive+0xf28>)
 800f64c:	f008 fb5a 	bl	8017d04 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f650:	e011      	b.n	800f676 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	63bb      	str	r3, [r7, #56]	; 0x38
 800f658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f47f aea4 	bne.w	800f3a8 <tcp_receive+0xbf4>
 800f660:	e00a      	b.n	800f678 <tcp_receive+0xec4>
                break;
 800f662:	bf00      	nop
 800f664:	e008      	b.n	800f678 <tcp_receive+0xec4>
                break;
 800f666:	bf00      	nop
 800f668:	e006      	b.n	800f678 <tcp_receive+0xec4>
                  break;
 800f66a:	bf00      	nop
 800f66c:	e004      	b.n	800f678 <tcp_receive+0xec4>
                  break;
 800f66e:	bf00      	nop
 800f670:	e002      	b.n	800f678 <tcp_receive+0xec4>
                  break;
 800f672:	bf00      	nop
 800f674:	e000      	b.n	800f678 <tcp_receive+0xec4>
                break;
 800f676:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f001 fa33 	bl	8010ae4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f67e:	e003      	b.n	800f688 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f001 fa2f 	bl	8010ae4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f686:	e01a      	b.n	800f6be <tcp_receive+0xf0a>
 800f688:	e019      	b.n	800f6be <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f68a:	4b0f      	ldr	r3, [pc, #60]	; (800f6c8 <tcp_receive+0xf14>)
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f692:	1ad3      	subs	r3, r2, r3
 800f694:	2b00      	cmp	r3, #0
 800f696:	db0a      	blt.n	800f6ae <tcp_receive+0xefa>
 800f698:	4b0b      	ldr	r3, [pc, #44]	; (800f6c8 <tcp_receive+0xf14>)
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a0:	6879      	ldr	r1, [r7, #4]
 800f6a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6a4:	440b      	add	r3, r1
 800f6a6:	1ad3      	subs	r3, r2, r3
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	dd07      	ble.n	800f6be <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	8b5b      	ldrh	r3, [r3, #26]
 800f6b2:	f043 0302 	orr.w	r3, r3, #2
 800f6b6:	b29a      	uxth	r2, r3
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f6bc:	e7ff      	b.n	800f6be <tcp_receive+0xf0a>
 800f6be:	bf00      	nop
 800f6c0:	3750      	adds	r7, #80	; 0x50
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bdb0      	pop	{r4, r5, r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	2400b6b8 	.word	0x2400b6b8
 800f6cc:	2400b698 	.word	0x2400b698
 800f6d0:	2400b6c2 	.word	0x2400b6c2
 800f6d4:	0801bd94 	.word	0x0801bd94
 800f6d8:	0801c13c 	.word	0x0801c13c
 800f6dc:	0801bde0 	.word	0x0801bde0

0800f6e0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b083      	sub	sp, #12
 800f6e4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f6e6:	4b15      	ldr	r3, [pc, #84]	; (800f73c <tcp_get_next_optbyte+0x5c>)
 800f6e8:	881b      	ldrh	r3, [r3, #0]
 800f6ea:	1c5a      	adds	r2, r3, #1
 800f6ec:	b291      	uxth	r1, r2
 800f6ee:	4a13      	ldr	r2, [pc, #76]	; (800f73c <tcp_get_next_optbyte+0x5c>)
 800f6f0:	8011      	strh	r1, [r2, #0]
 800f6f2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f6f4:	4b12      	ldr	r3, [pc, #72]	; (800f740 <tcp_get_next_optbyte+0x60>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d004      	beq.n	800f706 <tcp_get_next_optbyte+0x26>
 800f6fc:	4b11      	ldr	r3, [pc, #68]	; (800f744 <tcp_get_next_optbyte+0x64>)
 800f6fe:	881b      	ldrh	r3, [r3, #0]
 800f700:	88fa      	ldrh	r2, [r7, #6]
 800f702:	429a      	cmp	r2, r3
 800f704:	d208      	bcs.n	800f718 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f706:	4b10      	ldr	r3, [pc, #64]	; (800f748 <tcp_get_next_optbyte+0x68>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	3314      	adds	r3, #20
 800f70c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f70e:	88fb      	ldrh	r3, [r7, #6]
 800f710:	683a      	ldr	r2, [r7, #0]
 800f712:	4413      	add	r3, r2
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	e00b      	b.n	800f730 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f718:	88fb      	ldrh	r3, [r7, #6]
 800f71a:	b2da      	uxtb	r2, r3
 800f71c:	4b09      	ldr	r3, [pc, #36]	; (800f744 <tcp_get_next_optbyte+0x64>)
 800f71e:	881b      	ldrh	r3, [r3, #0]
 800f720:	b2db      	uxtb	r3, r3
 800f722:	1ad3      	subs	r3, r2, r3
 800f724:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f726:	4b06      	ldr	r3, [pc, #24]	; (800f740 <tcp_get_next_optbyte+0x60>)
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	797b      	ldrb	r3, [r7, #5]
 800f72c:	4413      	add	r3, r2
 800f72e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f730:	4618      	mov	r0, r3
 800f732:	370c      	adds	r7, #12
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr
 800f73c:	2400b6b4 	.word	0x2400b6b4
 800f740:	2400b6b0 	.word	0x2400b6b0
 800f744:	2400b6ae 	.word	0x2400b6ae
 800f748:	2400b6a8 	.word	0x2400b6a8

0800f74c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d106      	bne.n	800f768 <tcp_parseopt+0x1c>
 800f75a:	4b32      	ldr	r3, [pc, #200]	; (800f824 <tcp_parseopt+0xd8>)
 800f75c:	f240 727d 	movw	r2, #1917	; 0x77d
 800f760:	4931      	ldr	r1, [pc, #196]	; (800f828 <tcp_parseopt+0xdc>)
 800f762:	4832      	ldr	r0, [pc, #200]	; (800f82c <tcp_parseopt+0xe0>)
 800f764:	f008 face 	bl	8017d04 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f768:	4b31      	ldr	r3, [pc, #196]	; (800f830 <tcp_parseopt+0xe4>)
 800f76a:	881b      	ldrh	r3, [r3, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d055      	beq.n	800f81c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f770:	4b30      	ldr	r3, [pc, #192]	; (800f834 <tcp_parseopt+0xe8>)
 800f772:	2200      	movs	r2, #0
 800f774:	801a      	strh	r2, [r3, #0]
 800f776:	e045      	b.n	800f804 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f778:	f7ff ffb2 	bl	800f6e0 <tcp_get_next_optbyte>
 800f77c:	4603      	mov	r3, r0
 800f77e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f780:	7bfb      	ldrb	r3, [r7, #15]
 800f782:	2b02      	cmp	r3, #2
 800f784:	d006      	beq.n	800f794 <tcp_parseopt+0x48>
 800f786:	2b02      	cmp	r3, #2
 800f788:	dc2b      	bgt.n	800f7e2 <tcp_parseopt+0x96>
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d041      	beq.n	800f812 <tcp_parseopt+0xc6>
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d127      	bne.n	800f7e2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f792:	e037      	b.n	800f804 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f794:	f7ff ffa4 	bl	800f6e0 <tcp_get_next_optbyte>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b04      	cmp	r3, #4
 800f79c:	d13b      	bne.n	800f816 <tcp_parseopt+0xca>
 800f79e:	4b25      	ldr	r3, [pc, #148]	; (800f834 <tcp_parseopt+0xe8>)
 800f7a0:	881b      	ldrh	r3, [r3, #0]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	4a22      	ldr	r2, [pc, #136]	; (800f830 <tcp_parseopt+0xe4>)
 800f7a6:	8812      	ldrh	r2, [r2, #0]
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	da34      	bge.n	800f816 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f7ac:	f7ff ff98 	bl	800f6e0 <tcp_get_next_optbyte>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	021b      	lsls	r3, r3, #8
 800f7b6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f7b8:	f7ff ff92 	bl	800f6e0 <tcp_get_next_optbyte>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	b29a      	uxth	r2, r3
 800f7c0:	89bb      	ldrh	r3, [r7, #12]
 800f7c2:	4313      	orrs	r3, r2
 800f7c4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f7c6:	89bb      	ldrh	r3, [r7, #12]
 800f7c8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f7cc:	d804      	bhi.n	800f7d8 <tcp_parseopt+0x8c>
 800f7ce:	89bb      	ldrh	r3, [r7, #12]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d001      	beq.n	800f7d8 <tcp_parseopt+0x8c>
 800f7d4:	89ba      	ldrh	r2, [r7, #12]
 800f7d6:	e001      	b.n	800f7dc <tcp_parseopt+0x90>
 800f7d8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f7e0:	e010      	b.n	800f804 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f7e2:	f7ff ff7d 	bl	800f6e0 <tcp_get_next_optbyte>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f7ea:	7afb      	ldrb	r3, [r7, #11]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d914      	bls.n	800f81a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f7f0:	7afb      	ldrb	r3, [r7, #11]
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	4b0f      	ldr	r3, [pc, #60]	; (800f834 <tcp_parseopt+0xe8>)
 800f7f6:	881b      	ldrh	r3, [r3, #0]
 800f7f8:	4413      	add	r3, r2
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	3b02      	subs	r3, #2
 800f7fe:	b29a      	uxth	r2, r3
 800f800:	4b0c      	ldr	r3, [pc, #48]	; (800f834 <tcp_parseopt+0xe8>)
 800f802:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f804:	4b0b      	ldr	r3, [pc, #44]	; (800f834 <tcp_parseopt+0xe8>)
 800f806:	881a      	ldrh	r2, [r3, #0]
 800f808:	4b09      	ldr	r3, [pc, #36]	; (800f830 <tcp_parseopt+0xe4>)
 800f80a:	881b      	ldrh	r3, [r3, #0]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d3b3      	bcc.n	800f778 <tcp_parseopt+0x2c>
 800f810:	e004      	b.n	800f81c <tcp_parseopt+0xd0>
          return;
 800f812:	bf00      	nop
 800f814:	e002      	b.n	800f81c <tcp_parseopt+0xd0>
            return;
 800f816:	bf00      	nop
 800f818:	e000      	b.n	800f81c <tcp_parseopt+0xd0>
            return;
 800f81a:	bf00      	nop
      }
    }
  }
}
 800f81c:	3710      	adds	r7, #16
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	0801bd94 	.word	0x0801bd94
 800f828:	0801c1f8 	.word	0x0801c1f8
 800f82c:	0801bde0 	.word	0x0801bde0
 800f830:	2400b6ac 	.word	0x2400b6ac
 800f834:	2400b6b4 	.word	0x2400b6b4

0800f838 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f838:	b480      	push	{r7}
 800f83a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f83c:	4b05      	ldr	r3, [pc, #20]	; (800f854 <tcp_trigger_input_pcb_close+0x1c>)
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	f043 0310 	orr.w	r3, r3, #16
 800f844:	b2da      	uxtb	r2, r3
 800f846:	4b03      	ldr	r3, [pc, #12]	; (800f854 <tcp_trigger_input_pcb_close+0x1c>)
 800f848:	701a      	strb	r2, [r3, #0]
}
 800f84a:	bf00      	nop
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr
 800f854:	2400b6c5 	.word	0x2400b6c5

0800f858 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d00a      	beq.n	800f880 <tcp_route+0x28>
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	7a1b      	ldrb	r3, [r3, #8]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d006      	beq.n	800f880 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	7a1b      	ldrb	r3, [r3, #8]
 800f876:	4618      	mov	r0, r3
 800f878:	f7fb fb14 	bl	800aea4 <netif_get_by_index>
 800f87c:	4603      	mov	r3, r0
 800f87e:	e003      	b.n	800f888 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f003 fa17 	bl	8012cb4 <ip4_route>
 800f886:	4603      	mov	r3, r0
  }
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3710      	adds	r7, #16
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f890:	b590      	push	{r4, r7, lr}
 800f892:	b087      	sub	sp, #28
 800f894:	af00      	add	r7, sp, #0
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	60b9      	str	r1, [r7, #8]
 800f89a:	603b      	str	r3, [r7, #0]
 800f89c:	4613      	mov	r3, r2
 800f89e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d105      	bne.n	800f8b2 <tcp_create_segment+0x22>
 800f8a6:	4b44      	ldr	r3, [pc, #272]	; (800f9b8 <tcp_create_segment+0x128>)
 800f8a8:	22a3      	movs	r2, #163	; 0xa3
 800f8aa:	4944      	ldr	r1, [pc, #272]	; (800f9bc <tcp_create_segment+0x12c>)
 800f8ac:	4844      	ldr	r0, [pc, #272]	; (800f9c0 <tcp_create_segment+0x130>)
 800f8ae:	f008 fa29 	bl	8017d04 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d105      	bne.n	800f8c4 <tcp_create_segment+0x34>
 800f8b8:	4b3f      	ldr	r3, [pc, #252]	; (800f9b8 <tcp_create_segment+0x128>)
 800f8ba:	22a4      	movs	r2, #164	; 0xa4
 800f8bc:	4941      	ldr	r1, [pc, #260]	; (800f9c4 <tcp_create_segment+0x134>)
 800f8be:	4840      	ldr	r0, [pc, #256]	; (800f9c0 <tcp_create_segment+0x130>)
 800f8c0:	f008 fa20 	bl	8017d04 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f8c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f8c8:	009b      	lsls	r3, r3, #2
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	f003 0304 	and.w	r3, r3, #4
 800f8d0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f8d2:	2003      	movs	r0, #3
 800f8d4:	f7fa ff5a 	bl	800a78c <memp_malloc>
 800f8d8:	6138      	str	r0, [r7, #16]
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d104      	bne.n	800f8ea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f8e0:	68b8      	ldr	r0, [r7, #8]
 800f8e2:	f7fb fe6d 	bl	800b5c0 <pbuf_free>
    return NULL;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	e061      	b.n	800f9ae <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f8f0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	68ba      	ldr	r2, [r7, #8]
 800f8fc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	891a      	ldrh	r2, [r3, #8]
 800f902:	7dfb      	ldrb	r3, [r7, #23]
 800f904:	b29b      	uxth	r3, r3
 800f906:	429a      	cmp	r2, r3
 800f908:	d205      	bcs.n	800f916 <tcp_create_segment+0x86>
 800f90a:	4b2b      	ldr	r3, [pc, #172]	; (800f9b8 <tcp_create_segment+0x128>)
 800f90c:	22b0      	movs	r2, #176	; 0xb0
 800f90e:	492e      	ldr	r1, [pc, #184]	; (800f9c8 <tcp_create_segment+0x138>)
 800f910:	482b      	ldr	r0, [pc, #172]	; (800f9c0 <tcp_create_segment+0x130>)
 800f912:	f008 f9f7 	bl	8017d04 <iprintf>
  seg->len = p->tot_len - optlen;
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	891a      	ldrh	r2, [r3, #8]
 800f91a:	7dfb      	ldrb	r3, [r7, #23]
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	1ad3      	subs	r3, r2, r3
 800f920:	b29a      	uxth	r2, r3
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f926:	2114      	movs	r1, #20
 800f928:	68b8      	ldr	r0, [r7, #8]
 800f92a:	f7fb fdb3 	bl	800b494 <pbuf_add_header>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d004      	beq.n	800f93e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f934:	6938      	ldr	r0, [r7, #16]
 800f936:	f7fd f8d2 	bl	800cade <tcp_seg_free>
    return NULL;
 800f93a:	2300      	movs	r3, #0
 800f93c:	e037      	b.n	800f9ae <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	685a      	ldr	r2, [r3, #4]
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	8ada      	ldrh	r2, [r3, #22]
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	68dc      	ldr	r4, [r3, #12]
 800f950:	4610      	mov	r0, r2
 800f952:	f7fa fa47 	bl	8009de4 <lwip_htons>
 800f956:	4603      	mov	r3, r0
 800f958:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	8b1a      	ldrh	r2, [r3, #24]
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	68dc      	ldr	r4, [r3, #12]
 800f962:	4610      	mov	r0, r2
 800f964:	f7fa fa3e 	bl	8009de4 <lwip_htons>
 800f968:	4603      	mov	r3, r0
 800f96a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	68dc      	ldr	r4, [r3, #12]
 800f970:	6838      	ldr	r0, [r7, #0]
 800f972:	f7fa fa4c 	bl	8009e0e <lwip_htonl>
 800f976:	4603      	mov	r3, r0
 800f978:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f97a:	7dfb      	ldrb	r3, [r7, #23]
 800f97c:	089b      	lsrs	r3, r3, #2
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	b29b      	uxth	r3, r3
 800f982:	3305      	adds	r3, #5
 800f984:	b29b      	uxth	r3, r3
 800f986:	031b      	lsls	r3, r3, #12
 800f988:	b29a      	uxth	r2, r3
 800f98a:	79fb      	ldrb	r3, [r7, #7]
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	4313      	orrs	r3, r2
 800f990:	b29a      	uxth	r2, r3
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	68dc      	ldr	r4, [r3, #12]
 800f996:	4610      	mov	r0, r2
 800f998:	f7fa fa24 	bl	8009de4 <lwip_htons>
 800f99c:	4603      	mov	r3, r0
 800f99e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	749a      	strb	r2, [r3, #18]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	74da      	strb	r2, [r3, #19]
  return seg;
 800f9ac:	693b      	ldr	r3, [r7, #16]
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	371c      	adds	r7, #28
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd90      	pop	{r4, r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	0801c214 	.word	0x0801c214
 800f9bc:	0801c248 	.word	0x0801c248
 800f9c0:	0801c268 	.word	0x0801c268
 800f9c4:	0801c290 	.word	0x0801c290
 800f9c8:	0801c2b4 	.word	0x0801c2b4

0800f9cc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f9cc:	b590      	push	{r4, r7, lr}
 800f9ce:	b08b      	sub	sp, #44	; 0x2c
 800f9d0:	af02      	add	r7, sp, #8
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	460b      	mov	r3, r1
 800f9d6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	61fb      	str	r3, [r7, #28]
 800f9dc:	2300      	movs	r3, #0
 800f9de:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d106      	bne.n	800f9f8 <tcp_split_unsent_seg+0x2c>
 800f9ea:	4b95      	ldr	r3, [pc, #596]	; (800fc40 <tcp_split_unsent_seg+0x274>)
 800f9ec:	f240 324b 	movw	r2, #843	; 0x34b
 800f9f0:	4994      	ldr	r1, [pc, #592]	; (800fc44 <tcp_split_unsent_seg+0x278>)
 800f9f2:	4895      	ldr	r0, [pc, #596]	; (800fc48 <tcp_split_unsent_seg+0x27c>)
 800f9f4:	f008 f986 	bl	8017d04 <iprintf>

  useg = pcb->unsent;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9fc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d102      	bne.n	800fa0a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fa04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa08:	e116      	b.n	800fc38 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fa0a:	887b      	ldrh	r3, [r7, #2]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d109      	bne.n	800fa24 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fa10:	4b8b      	ldr	r3, [pc, #556]	; (800fc40 <tcp_split_unsent_seg+0x274>)
 800fa12:	f240 3253 	movw	r2, #851	; 0x353
 800fa16:	498d      	ldr	r1, [pc, #564]	; (800fc4c <tcp_split_unsent_seg+0x280>)
 800fa18:	488b      	ldr	r0, [pc, #556]	; (800fc48 <tcp_split_unsent_seg+0x27c>)
 800fa1a:	f008 f973 	bl	8017d04 <iprintf>
    return ERR_VAL;
 800fa1e:	f06f 0305 	mvn.w	r3, #5
 800fa22:	e109      	b.n	800fc38 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	891b      	ldrh	r3, [r3, #8]
 800fa28:	887a      	ldrh	r2, [r7, #2]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d301      	bcc.n	800fa32 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	e102      	b.n	800fc38 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa36:	887a      	ldrh	r2, [r7, #2]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d906      	bls.n	800fa4a <tcp_split_unsent_seg+0x7e>
 800fa3c:	4b80      	ldr	r3, [pc, #512]	; (800fc40 <tcp_split_unsent_seg+0x274>)
 800fa3e:	f240 325b 	movw	r2, #859	; 0x35b
 800fa42:	4983      	ldr	r1, [pc, #524]	; (800fc50 <tcp_split_unsent_seg+0x284>)
 800fa44:	4880      	ldr	r0, [pc, #512]	; (800fc48 <tcp_split_unsent_seg+0x27c>)
 800fa46:	f008 f95d 	bl	8017d04 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	891b      	ldrh	r3, [r3, #8]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d106      	bne.n	800fa60 <tcp_split_unsent_seg+0x94>
 800fa52:	4b7b      	ldr	r3, [pc, #492]	; (800fc40 <tcp_split_unsent_seg+0x274>)
 800fa54:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fa58:	497e      	ldr	r1, [pc, #504]	; (800fc54 <tcp_split_unsent_seg+0x288>)
 800fa5a:	487b      	ldr	r0, [pc, #492]	; (800fc48 <tcp_split_unsent_seg+0x27c>)
 800fa5c:	f008 f952 	bl	8017d04 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	7a9b      	ldrb	r3, [r3, #10]
 800fa64:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fa66:	7bfb      	ldrb	r3, [r7, #15]
 800fa68:	009b      	lsls	r3, r3, #2
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	f003 0304 	and.w	r3, r3, #4
 800fa70:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	891a      	ldrh	r2, [r3, #8]
 800fa76:	887b      	ldrh	r3, [r7, #2]
 800fa78:	1ad3      	subs	r3, r2, r3
 800fa7a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fa7c:	7bbb      	ldrb	r3, [r7, #14]
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	89bb      	ldrh	r3, [r7, #12]
 800fa82:	4413      	add	r3, r2
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	2036      	movs	r0, #54	; 0x36
 800fa8e:	f7fb fab3 	bl	800aff8 <pbuf_alloc>
 800fa92:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	f000 80b7 	beq.w	800fc0a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	891a      	ldrh	r2, [r3, #8]
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	891b      	ldrh	r3, [r3, #8]
 800faa6:	1ad3      	subs	r3, r2, r3
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	887b      	ldrh	r3, [r7, #2]
 800faac:	4413      	add	r3, r2
 800faae:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	6858      	ldr	r0, [r3, #4]
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	685a      	ldr	r2, [r3, #4]
 800fab8:	7bbb      	ldrb	r3, [r7, #14]
 800faba:	18d1      	adds	r1, r2, r3
 800fabc:	897b      	ldrh	r3, [r7, #10]
 800fabe:	89ba      	ldrh	r2, [r7, #12]
 800fac0:	f7fb ff84 	bl	800b9cc <pbuf_copy_partial>
 800fac4:	4603      	mov	r3, r0
 800fac6:	461a      	mov	r2, r3
 800fac8:	89bb      	ldrh	r3, [r7, #12]
 800faca:	4293      	cmp	r3, r2
 800facc:	f040 809f 	bne.w	800fc0e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	68db      	ldr	r3, [r3, #12]
 800fad4:	899b      	ldrh	r3, [r3, #12]
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fa f983 	bl	8009de4 <lwip_htons>
 800fade:	4603      	mov	r3, r0
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fae6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fae8:	2300      	movs	r3, #0
 800faea:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800faec:	7efb      	ldrb	r3, [r7, #27]
 800faee:	f003 0308 	and.w	r3, r3, #8
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d007      	beq.n	800fb06 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800faf6:	7efb      	ldrb	r3, [r7, #27]
 800faf8:	f023 0308 	bic.w	r3, r3, #8
 800fafc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800fafe:	7ebb      	ldrb	r3, [r7, #26]
 800fb00:	f043 0308 	orr.w	r3, r3, #8
 800fb04:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800fb06:	7efb      	ldrb	r3, [r7, #27]
 800fb08:	f003 0301 	and.w	r3, r3, #1
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d007      	beq.n	800fb20 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fb10:	7efb      	ldrb	r3, [r7, #27]
 800fb12:	f023 0301 	bic.w	r3, r3, #1
 800fb16:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fb18:	7ebb      	ldrb	r3, [r7, #26]
 800fb1a:	f043 0301 	orr.w	r3, r3, #1
 800fb1e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fa f971 	bl	8009e0e <lwip_htonl>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	887b      	ldrh	r3, [r7, #2]
 800fb30:	18d1      	adds	r1, r2, r3
 800fb32:	7eba      	ldrb	r2, [r7, #26]
 800fb34:	7bfb      	ldrb	r3, [r7, #15]
 800fb36:	9300      	str	r3, [sp, #0]
 800fb38:	460b      	mov	r3, r1
 800fb3a:	6939      	ldr	r1, [r7, #16]
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7ff fea7 	bl	800f890 <tcp_create_segment>
 800fb42:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d063      	beq.n	800fc12 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7fb fdc4 	bl	800b6dc <pbuf_clen>
 800fb54:	4603      	mov	r3, r0
 800fb56:	461a      	mov	r2, r3
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb5e:	1a9b      	subs	r3, r3, r2
 800fb60:	b29a      	uxth	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	6858      	ldr	r0, [r3, #4]
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	891a      	ldrh	r2, [r3, #8]
 800fb72:	89bb      	ldrh	r3, [r7, #12]
 800fb74:	1ad3      	subs	r3, r2, r3
 800fb76:	b29b      	uxth	r3, r3
 800fb78:	4619      	mov	r1, r3
 800fb7a:	f7fb fb9b 	bl	800b2b4 <pbuf_realloc>
  useg->len -= remainder;
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	891a      	ldrh	r2, [r3, #8]
 800fb82:	89bb      	ldrh	r3, [r7, #12]
 800fb84:	1ad3      	subs	r3, r2, r3
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	899b      	ldrh	r3, [r3, #12]
 800fb92:	b29c      	uxth	r4, r3
 800fb94:	7efb      	ldrb	r3, [r7, #27]
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7fa f923 	bl	8009de4 <lwip_htons>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	461a      	mov	r2, r3
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	4322      	orrs	r2, r4
 800fba8:	b292      	uxth	r2, r2
 800fbaa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7fb fd93 	bl	800b6dc <pbuf_clen>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	461a      	mov	r2, r3
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbc0:	4413      	add	r3, r2
 800fbc2:	b29a      	uxth	r2, r3
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fb fd84 	bl	800b6dc <pbuf_clen>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbde:	4413      	add	r3, r2
 800fbe0:	b29a      	uxth	r2, r3
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	69fb      	ldr	r3, [r7, #28]
 800fbee:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	69fa      	ldr	r2, [r7, #28]
 800fbf4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800fbf6:	69fb      	ldr	r3, [r7, #28]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d103      	bne.n	800fc06 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fc06:	2300      	movs	r3, #0
 800fc08:	e016      	b.n	800fc38 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800fc0a:	bf00      	nop
 800fc0c:	e002      	b.n	800fc14 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fc0e:	bf00      	nop
 800fc10:	e000      	b.n	800fc14 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fc12:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d006      	beq.n	800fc28 <tcp_split_unsent_seg+0x25c>
 800fc1a:	4b09      	ldr	r3, [pc, #36]	; (800fc40 <tcp_split_unsent_seg+0x274>)
 800fc1c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800fc20:	490d      	ldr	r1, [pc, #52]	; (800fc58 <tcp_split_unsent_seg+0x28c>)
 800fc22:	4809      	ldr	r0, [pc, #36]	; (800fc48 <tcp_split_unsent_seg+0x27c>)
 800fc24:	f008 f86e 	bl	8017d04 <iprintf>
  if (p != NULL) {
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d002      	beq.n	800fc34 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800fc2e:	6938      	ldr	r0, [r7, #16]
 800fc30:	f7fb fcc6 	bl	800b5c0 <pbuf_free>
  }

  return ERR_MEM;
 800fc34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3724      	adds	r7, #36	; 0x24
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd90      	pop	{r4, r7, pc}
 800fc40:	0801c214 	.word	0x0801c214
 800fc44:	0801c5a8 	.word	0x0801c5a8
 800fc48:	0801c268 	.word	0x0801c268
 800fc4c:	0801c5cc 	.word	0x0801c5cc
 800fc50:	0801c5f0 	.word	0x0801c5f0
 800fc54:	0801c600 	.word	0x0801c600
 800fc58:	0801c610 	.word	0x0801c610

0800fc5c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fc5c:	b590      	push	{r4, r7, lr}
 800fc5e:	b085      	sub	sp, #20
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d106      	bne.n	800fc78 <tcp_send_fin+0x1c>
 800fc6a:	4b21      	ldr	r3, [pc, #132]	; (800fcf0 <tcp_send_fin+0x94>)
 800fc6c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800fc70:	4920      	ldr	r1, [pc, #128]	; (800fcf4 <tcp_send_fin+0x98>)
 800fc72:	4821      	ldr	r0, [pc, #132]	; (800fcf8 <tcp_send_fin+0x9c>)
 800fc74:	f008 f846 	bl	8017d04 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d02e      	beq.n	800fcde <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc84:	60fb      	str	r3, [r7, #12]
 800fc86:	e002      	b.n	800fc8e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d1f8      	bne.n	800fc88 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	68db      	ldr	r3, [r3, #12]
 800fc9a:	899b      	ldrh	r3, [r3, #12]
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fa f8a0 	bl	8009de4 <lwip_htons>
 800fca4:	4603      	mov	r3, r0
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	f003 0307 	and.w	r3, r3, #7
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d116      	bne.n	800fcde <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	68db      	ldr	r3, [r3, #12]
 800fcb4:	899b      	ldrh	r3, [r3, #12]
 800fcb6:	b29c      	uxth	r4, r3
 800fcb8:	2001      	movs	r0, #1
 800fcba:	f7fa f893 	bl	8009de4 <lwip_htons>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	4322      	orrs	r2, r4
 800fcc8:	b292      	uxth	r2, r2
 800fcca:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	8b5b      	ldrh	r3, [r3, #26]
 800fcd0:	f043 0320 	orr.w	r3, r3, #32
 800fcd4:	b29a      	uxth	r2, r3
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	e004      	b.n	800fce8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fcde:	2101      	movs	r1, #1
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 f80b 	bl	800fcfc <tcp_enqueue_flags>
 800fce6:	4603      	mov	r3, r0
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3714      	adds	r7, #20
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd90      	pop	{r4, r7, pc}
 800fcf0:	0801c214 	.word	0x0801c214
 800fcf4:	0801c61c 	.word	0x0801c61c
 800fcf8:	0801c268 	.word	0x0801c268

0800fcfc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b08a      	sub	sp, #40	; 0x28
 800fd00:	af02      	add	r7, sp, #8
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	460b      	mov	r3, r1
 800fd06:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fd10:	78fb      	ldrb	r3, [r7, #3]
 800fd12:	f003 0303 	and.w	r3, r3, #3
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d106      	bne.n	800fd28 <tcp_enqueue_flags+0x2c>
 800fd1a:	4b67      	ldr	r3, [pc, #412]	; (800feb8 <tcp_enqueue_flags+0x1bc>)
 800fd1c:	f240 4211 	movw	r2, #1041	; 0x411
 800fd20:	4966      	ldr	r1, [pc, #408]	; (800febc <tcp_enqueue_flags+0x1c0>)
 800fd22:	4867      	ldr	r0, [pc, #412]	; (800fec0 <tcp_enqueue_flags+0x1c4>)
 800fd24:	f007 ffee 	bl	8017d04 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d106      	bne.n	800fd3c <tcp_enqueue_flags+0x40>
 800fd2e:	4b62      	ldr	r3, [pc, #392]	; (800feb8 <tcp_enqueue_flags+0x1bc>)
 800fd30:	f240 4213 	movw	r2, #1043	; 0x413
 800fd34:	4963      	ldr	r1, [pc, #396]	; (800fec4 <tcp_enqueue_flags+0x1c8>)
 800fd36:	4862      	ldr	r0, [pc, #392]	; (800fec0 <tcp_enqueue_flags+0x1c4>)
 800fd38:	f007 ffe4 	bl	8017d04 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800fd3c:	78fb      	ldrb	r3, [r7, #3]
 800fd3e:	f003 0302 	and.w	r3, r3, #2
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d001      	beq.n	800fd4a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800fd46:	2301      	movs	r3, #1
 800fd48:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd4a:	7ffb      	ldrb	r3, [r7, #31]
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	f003 0304 	and.w	r3, r3, #4
 800fd54:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fd56:	7dfb      	ldrb	r3, [r7, #23]
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd5e:	4619      	mov	r1, r3
 800fd60:	2036      	movs	r0, #54	; 0x36
 800fd62:	f7fb f949 	bl	800aff8 <pbuf_alloc>
 800fd66:	6138      	str	r0, [r7, #16]
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d109      	bne.n	800fd82 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	8b5b      	ldrh	r3, [r3, #26]
 800fd72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd76:	b29a      	uxth	r2, r3
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fd7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd80:	e095      	b.n	800feae <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	895a      	ldrh	r2, [r3, #10]
 800fd86:	7dfb      	ldrb	r3, [r7, #23]
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d206      	bcs.n	800fd9c <tcp_enqueue_flags+0xa0>
 800fd8e:	4b4a      	ldr	r3, [pc, #296]	; (800feb8 <tcp_enqueue_flags+0x1bc>)
 800fd90:	f240 4239 	movw	r2, #1081	; 0x439
 800fd94:	494c      	ldr	r1, [pc, #304]	; (800fec8 <tcp_enqueue_flags+0x1cc>)
 800fd96:	484a      	ldr	r0, [pc, #296]	; (800fec0 <tcp_enqueue_flags+0x1c4>)
 800fd98:	f007 ffb4 	bl	8017d04 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800fda0:	78fa      	ldrb	r2, [r7, #3]
 800fda2:	7ffb      	ldrb	r3, [r7, #31]
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	460b      	mov	r3, r1
 800fda8:	6939      	ldr	r1, [r7, #16]
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f7ff fd70 	bl	800f890 <tcp_create_segment>
 800fdb0:	60f8      	str	r0, [r7, #12]
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d109      	bne.n	800fdcc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	8b5b      	ldrh	r3, [r3, #26]
 800fdbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdc0:	b29a      	uxth	r2, r3
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fdc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdca:	e070      	b.n	800feae <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	68db      	ldr	r3, [r3, #12]
 800fdd0:	f003 0303 	and.w	r3, r3, #3
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d006      	beq.n	800fde6 <tcp_enqueue_flags+0xea>
 800fdd8:	4b37      	ldr	r3, [pc, #220]	; (800feb8 <tcp_enqueue_flags+0x1bc>)
 800fdda:	f240 4242 	movw	r2, #1090	; 0x442
 800fdde:	493b      	ldr	r1, [pc, #236]	; (800fecc <tcp_enqueue_flags+0x1d0>)
 800fde0:	4837      	ldr	r0, [pc, #220]	; (800fec0 <tcp_enqueue_flags+0x1c4>)
 800fde2:	f007 ff8f 	bl	8017d04 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	891b      	ldrh	r3, [r3, #8]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d006      	beq.n	800fdfc <tcp_enqueue_flags+0x100>
 800fdee:	4b32      	ldr	r3, [pc, #200]	; (800feb8 <tcp_enqueue_flags+0x1bc>)
 800fdf0:	f240 4243 	movw	r2, #1091	; 0x443
 800fdf4:	4936      	ldr	r1, [pc, #216]	; (800fed0 <tcp_enqueue_flags+0x1d4>)
 800fdf6:	4832      	ldr	r0, [pc, #200]	; (800fec0 <tcp_enqueue_flags+0x1c4>)
 800fdf8:	f007 ff84 	bl	8017d04 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d103      	bne.n	800fe0c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	68fa      	ldr	r2, [r7, #12]
 800fe08:	66da      	str	r2, [r3, #108]	; 0x6c
 800fe0a:	e00d      	b.n	800fe28 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe10:	61bb      	str	r3, [r7, #24]
 800fe12:	e002      	b.n	800fe1a <tcp_enqueue_flags+0x11e>
 800fe14:	69bb      	ldr	r3, [r7, #24]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	61bb      	str	r3, [r7, #24]
 800fe1a:	69bb      	ldr	r3, [r7, #24]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d1f8      	bne.n	800fe14 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	68fa      	ldr	r2, [r7, #12]
 800fe26:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fe30:	78fb      	ldrb	r3, [r7, #3]
 800fe32:	f003 0302 	and.w	r3, r3, #2
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d104      	bne.n	800fe44 <tcp_enqueue_flags+0x148>
 800fe3a:	78fb      	ldrb	r3, [r7, #3]
 800fe3c:	f003 0301 	and.w	r3, r3, #1
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d004      	beq.n	800fe4e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe48:	1c5a      	adds	r2, r3, #1
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fe4e:	78fb      	ldrb	r3, [r7, #3]
 800fe50:	f003 0301 	and.w	r3, r3, #1
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d006      	beq.n	800fe66 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	8b5b      	ldrh	r3, [r3, #26]
 800fe5c:	f043 0320 	orr.w	r3, r3, #32
 800fe60:	b29a      	uxth	r2, r3
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fb fc36 	bl	800b6dc <pbuf_clen>
 800fe70:	4603      	mov	r3, r0
 800fe72:	461a      	mov	r2, r3
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe7a:	4413      	add	r3, r2
 800fe7c:	b29a      	uxth	r2, r3
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d00e      	beq.n	800feac <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d10a      	bne.n	800feac <tcp_enqueue_flags+0x1b0>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d106      	bne.n	800feac <tcp_enqueue_flags+0x1b0>
 800fe9e:	4b06      	ldr	r3, [pc, #24]	; (800feb8 <tcp_enqueue_flags+0x1bc>)
 800fea0:	f240 4265 	movw	r2, #1125	; 0x465
 800fea4:	490b      	ldr	r1, [pc, #44]	; (800fed4 <tcp_enqueue_flags+0x1d8>)
 800fea6:	4806      	ldr	r0, [pc, #24]	; (800fec0 <tcp_enqueue_flags+0x1c4>)
 800fea8:	f007 ff2c 	bl	8017d04 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800feac:	2300      	movs	r3, #0
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3720      	adds	r7, #32
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
 800feb6:	bf00      	nop
 800feb8:	0801c214 	.word	0x0801c214
 800febc:	0801c638 	.word	0x0801c638
 800fec0:	0801c268 	.word	0x0801c268
 800fec4:	0801c690 	.word	0x0801c690
 800fec8:	0801c6b0 	.word	0x0801c6b0
 800fecc:	0801c6ec 	.word	0x0801c6ec
 800fed0:	0801c704 	.word	0x0801c704
 800fed4:	0801c730 	.word	0x0801c730

0800fed8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fed8:	b5b0      	push	{r4, r5, r7, lr}
 800feda:	b08a      	sub	sp, #40	; 0x28
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d106      	bne.n	800fef4 <tcp_output+0x1c>
 800fee6:	4b9e      	ldr	r3, [pc, #632]	; (8010160 <tcp_output+0x288>)
 800fee8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800feec:	499d      	ldr	r1, [pc, #628]	; (8010164 <tcp_output+0x28c>)
 800feee:	489e      	ldr	r0, [pc, #632]	; (8010168 <tcp_output+0x290>)
 800fef0:	f007 ff08 	bl	8017d04 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	7d1b      	ldrb	r3, [r3, #20]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d106      	bne.n	800ff0a <tcp_output+0x32>
 800fefc:	4b98      	ldr	r3, [pc, #608]	; (8010160 <tcp_output+0x288>)
 800fefe:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ff02:	499a      	ldr	r1, [pc, #616]	; (801016c <tcp_output+0x294>)
 800ff04:	4898      	ldr	r0, [pc, #608]	; (8010168 <tcp_output+0x290>)
 800ff06:	f007 fefd 	bl	8017d04 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ff0a:	4b99      	ldr	r3, [pc, #612]	; (8010170 <tcp_output+0x298>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d101      	bne.n	800ff18 <tcp_output+0x40>
    return ERR_OK;
 800ff14:	2300      	movs	r3, #0
 800ff16:	e1ce      	b.n	80102b6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff24:	4293      	cmp	r3, r2
 800ff26:	bf28      	it	cs
 800ff28:	4613      	movcs	r3, r2
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff32:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ff34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d10b      	bne.n	800ff52 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	8b5b      	ldrh	r3, [r3, #26]
 800ff3e:	f003 0302 	and.w	r3, r3, #2
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	f000 81aa 	beq.w	801029c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 fdcb 	bl	8010ae4 <tcp_send_empty_ack>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	e1b1      	b.n	80102b6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ff52:	6879      	ldr	r1, [r7, #4]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	3304      	adds	r3, #4
 800ff58:	461a      	mov	r2, r3
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f7ff fc7c 	bl	800f858 <tcp_route>
 800ff60:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d102      	bne.n	800ff6e <tcp_output+0x96>
    return ERR_RTE;
 800ff68:	f06f 0303 	mvn.w	r3, #3
 800ff6c:	e1a3      	b.n	80102b6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d003      	beq.n	800ff7c <tcp_output+0xa4>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d111      	bne.n	800ffa0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d002      	beq.n	800ff88 <tcp_output+0xb0>
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	3304      	adds	r3, #4
 800ff86:	e000      	b.n	800ff8a <tcp_output+0xb2>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d102      	bne.n	800ff98 <tcp_output+0xc0>
      return ERR_RTE;
 800ff92:	f06f 0303 	mvn.w	r3, #3
 800ff96:	e18e      	b.n	80102b6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ffa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7f9 ff31 	bl	8009e0e <lwip_htonl>
 800ffac:	4602      	mov	r2, r0
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffb2:	1ad3      	subs	r3, r2, r3
 800ffb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffb6:	8912      	ldrh	r2, [r2, #8]
 800ffb8:	4413      	add	r3, r2
 800ffba:	69ba      	ldr	r2, [r7, #24]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d227      	bcs.n	8010010 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	69bb      	ldr	r3, [r7, #24]
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d114      	bne.n	800fff8 <tcp_output+0x120>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d110      	bne.n	800fff8 <tcp_output+0x120>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d10b      	bne.n	800fff8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2201      	movs	r2, #1
 800ffec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2200      	movs	r2, #0
 800fff4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	8b5b      	ldrh	r3, [r3, #26]
 800fffc:	f003 0302 	and.w	r3, r3, #2
 8010000:	2b00      	cmp	r3, #0
 8010002:	f000 814d 	beq.w	80102a0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f000 fd6c 	bl	8010ae4 <tcp_send_empty_ack>
 801000c:	4603      	mov	r3, r0
 801000e:	e152      	b.n	80102b6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2200      	movs	r2, #0
 8010014:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801001c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801001e:	6a3b      	ldr	r3, [r7, #32]
 8010020:	2b00      	cmp	r3, #0
 8010022:	f000 811c 	beq.w	801025e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010026:	e002      	b.n	801002e <tcp_output+0x156>
 8010028:	6a3b      	ldr	r3, [r7, #32]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	623b      	str	r3, [r7, #32]
 801002e:	6a3b      	ldr	r3, [r7, #32]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d1f8      	bne.n	8010028 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010036:	e112      	b.n	801025e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	899b      	ldrh	r3, [r3, #12]
 801003e:	b29b      	uxth	r3, r3
 8010040:	4618      	mov	r0, r3
 8010042:	f7f9 fecf 	bl	8009de4 <lwip_htons>
 8010046:	4603      	mov	r3, r0
 8010048:	b2db      	uxtb	r3, r3
 801004a:	f003 0304 	and.w	r3, r3, #4
 801004e:	2b00      	cmp	r3, #0
 8010050:	d006      	beq.n	8010060 <tcp_output+0x188>
 8010052:	4b43      	ldr	r3, [pc, #268]	; (8010160 <tcp_output+0x288>)
 8010054:	f240 5236 	movw	r2, #1334	; 0x536
 8010058:	4946      	ldr	r1, [pc, #280]	; (8010174 <tcp_output+0x29c>)
 801005a:	4843      	ldr	r0, [pc, #268]	; (8010168 <tcp_output+0x290>)
 801005c:	f007 fe52 	bl	8017d04 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010064:	2b00      	cmp	r3, #0
 8010066:	d01f      	beq.n	80100a8 <tcp_output+0x1d0>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	8b5b      	ldrh	r3, [r3, #26]
 801006c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010070:	2b00      	cmp	r3, #0
 8010072:	d119      	bne.n	80100a8 <tcp_output+0x1d0>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00b      	beq.n	8010094 <tcp_output+0x1bc>
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d110      	bne.n	80100a8 <tcp_output+0x1d0>
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801008a:	891a      	ldrh	r2, [r3, #8]
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010090:	429a      	cmp	r2, r3
 8010092:	d209      	bcs.n	80100a8 <tcp_output+0x1d0>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801009a:	2b00      	cmp	r3, #0
 801009c:	d004      	beq.n	80100a8 <tcp_output+0x1d0>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100a4:	2b08      	cmp	r3, #8
 80100a6:	d901      	bls.n	80100ac <tcp_output+0x1d4>
 80100a8:	2301      	movs	r3, #1
 80100aa:	e000      	b.n	80100ae <tcp_output+0x1d6>
 80100ac:	2300      	movs	r3, #0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d106      	bne.n	80100c0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	8b5b      	ldrh	r3, [r3, #26]
 80100b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	f000 80e4 	beq.w	8010288 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	7d1b      	ldrb	r3, [r3, #20]
 80100c4:	2b02      	cmp	r3, #2
 80100c6:	d00d      	beq.n	80100e4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80100c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	899b      	ldrh	r3, [r3, #12]
 80100ce:	b29c      	uxth	r4, r3
 80100d0:	2010      	movs	r0, #16
 80100d2:	f7f9 fe87 	bl	8009de4 <lwip_htons>
 80100d6:	4603      	mov	r3, r0
 80100d8:	461a      	mov	r2, r3
 80100da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100dc:	68db      	ldr	r3, [r3, #12]
 80100de:	4322      	orrs	r2, r4
 80100e0:	b292      	uxth	r2, r2
 80100e2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80100e4:	697a      	ldr	r2, [r7, #20]
 80100e6:	6879      	ldr	r1, [r7, #4]
 80100e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100ea:	f000 f909 	bl	8010300 <tcp_output_segment>
 80100ee:	4603      	mov	r3, r0
 80100f0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80100f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d009      	beq.n	801010e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	8b5b      	ldrh	r3, [r3, #26]
 80100fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010102:	b29a      	uxth	r2, r3
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	835a      	strh	r2, [r3, #26]
      return err;
 8010108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801010c:	e0d3      	b.n	80102b6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801010e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	7d1b      	ldrb	r3, [r3, #20]
 801011a:	2b02      	cmp	r3, #2
 801011c:	d006      	beq.n	801012c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	8b5b      	ldrh	r3, [r3, #26]
 8010122:	f023 0303 	bic.w	r3, r3, #3
 8010126:	b29a      	uxth	r2, r3
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801012c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012e:	68db      	ldr	r3, [r3, #12]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	4618      	mov	r0, r3
 8010134:	f7f9 fe6b 	bl	8009e0e <lwip_htonl>
 8010138:	4604      	mov	r4, r0
 801013a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013c:	891b      	ldrh	r3, [r3, #8]
 801013e:	461d      	mov	r5, r3
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	68db      	ldr	r3, [r3, #12]
 8010144:	899b      	ldrh	r3, [r3, #12]
 8010146:	b29b      	uxth	r3, r3
 8010148:	4618      	mov	r0, r3
 801014a:	f7f9 fe4b 	bl	8009de4 <lwip_htons>
 801014e:	4603      	mov	r3, r0
 8010150:	b2db      	uxtb	r3, r3
 8010152:	f003 0303 	and.w	r3, r3, #3
 8010156:	2b00      	cmp	r3, #0
 8010158:	d00e      	beq.n	8010178 <tcp_output+0x2a0>
 801015a:	2301      	movs	r3, #1
 801015c:	e00d      	b.n	801017a <tcp_output+0x2a2>
 801015e:	bf00      	nop
 8010160:	0801c214 	.word	0x0801c214
 8010164:	0801c758 	.word	0x0801c758
 8010168:	0801c268 	.word	0x0801c268
 801016c:	0801c770 	.word	0x0801c770
 8010170:	2400ee20 	.word	0x2400ee20
 8010174:	0801c798 	.word	0x0801c798
 8010178:	2300      	movs	r3, #0
 801017a:	442b      	add	r3, r5
 801017c:	4423      	add	r3, r4
 801017e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	1ad3      	subs	r3, r2, r3
 8010188:	2b00      	cmp	r3, #0
 801018a:	da02      	bge.n	8010192 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	68ba      	ldr	r2, [r7, #8]
 8010190:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010194:	891b      	ldrh	r3, [r3, #8]
 8010196:	461c      	mov	r4, r3
 8010198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	899b      	ldrh	r3, [r3, #12]
 801019e:	b29b      	uxth	r3, r3
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7f9 fe1f 	bl	8009de4 <lwip_htons>
 80101a6:	4603      	mov	r3, r0
 80101a8:	b2db      	uxtb	r3, r3
 80101aa:	f003 0303 	and.w	r3, r3, #3
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d001      	beq.n	80101b6 <tcp_output+0x2de>
 80101b2:	2301      	movs	r3, #1
 80101b4:	e000      	b.n	80101b8 <tcp_output+0x2e0>
 80101b6:	2300      	movs	r3, #0
 80101b8:	4423      	add	r3, r4
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d049      	beq.n	8010252 <tcp_output+0x37a>
      seg->next = NULL;
 80101be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c0:	2200      	movs	r2, #0
 80101c2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d105      	bne.n	80101d8 <tcp_output+0x300>
        pcb->unacked = seg;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101d0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80101d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d4:	623b      	str	r3, [r7, #32]
 80101d6:	e03f      	b.n	8010258 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80101d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101da:	68db      	ldr	r3, [r3, #12]
 80101dc:	685b      	ldr	r3, [r3, #4]
 80101de:	4618      	mov	r0, r3
 80101e0:	f7f9 fe15 	bl	8009e0e <lwip_htonl>
 80101e4:	4604      	mov	r4, r0
 80101e6:	6a3b      	ldr	r3, [r7, #32]
 80101e8:	68db      	ldr	r3, [r3, #12]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7f9 fe0e 	bl	8009e0e <lwip_htonl>
 80101f2:	4603      	mov	r3, r0
 80101f4:	1ae3      	subs	r3, r4, r3
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	da24      	bge.n	8010244 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	3370      	adds	r3, #112	; 0x70
 80101fe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010200:	e002      	b.n	8010208 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010202:	69fb      	ldr	r3, [r7, #28]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d011      	beq.n	8010234 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	4618      	mov	r0, r3
 801021a:	f7f9 fdf8 	bl	8009e0e <lwip_htonl>
 801021e:	4604      	mov	r4, r0
 8010220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	4618      	mov	r0, r3
 8010228:	f7f9 fdf1 	bl	8009e0e <lwip_htonl>
 801022c:	4603      	mov	r3, r0
 801022e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010230:	2b00      	cmp	r3, #0
 8010232:	dbe6      	blt.n	8010202 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010240:	601a      	str	r2, [r3, #0]
 8010242:	e009      	b.n	8010258 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010244:	6a3b      	ldr	r3, [r7, #32]
 8010246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010248:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801024a:	6a3b      	ldr	r3, [r7, #32]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	623b      	str	r3, [r7, #32]
 8010250:	e002      	b.n	8010258 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010254:	f7fc fc43 	bl	800cade <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801025c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801025e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010260:	2b00      	cmp	r3, #0
 8010262:	d012      	beq.n	801028a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	4618      	mov	r0, r3
 801026c:	f7f9 fdcf 	bl	8009e0e <lwip_htonl>
 8010270:	4602      	mov	r2, r0
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010276:	1ad3      	subs	r3, r2, r3
 8010278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801027a:	8912      	ldrh	r2, [r2, #8]
 801027c:	4413      	add	r3, r2
  while (seg != NULL &&
 801027e:	69ba      	ldr	r2, [r7, #24]
 8010280:	429a      	cmp	r2, r3
 8010282:	f4bf aed9 	bcs.w	8010038 <tcp_output+0x160>
 8010286:	e000      	b.n	801028a <tcp_output+0x3b2>
      break;
 8010288:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801028e:	2b00      	cmp	r3, #0
 8010290:	d108      	bne.n	80102a4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2200      	movs	r2, #0
 8010296:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801029a:	e004      	b.n	80102a6 <tcp_output+0x3ce>
    goto output_done;
 801029c:	bf00      	nop
 801029e:	e002      	b.n	80102a6 <tcp_output+0x3ce>
    goto output_done;
 80102a0:	bf00      	nop
 80102a2:	e000      	b.n	80102a6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80102a4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	8b5b      	ldrh	r3, [r3, #26]
 80102aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102ae:	b29a      	uxth	r2, r3
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80102b4:	2300      	movs	r3, #0
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3728      	adds	r7, #40	; 0x28
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bdb0      	pop	{r4, r5, r7, pc}
 80102be:	bf00      	nop

080102c0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d106      	bne.n	80102dc <tcp_output_segment_busy+0x1c>
 80102ce:	4b09      	ldr	r3, [pc, #36]	; (80102f4 <tcp_output_segment_busy+0x34>)
 80102d0:	f240 529a 	movw	r2, #1434	; 0x59a
 80102d4:	4908      	ldr	r1, [pc, #32]	; (80102f8 <tcp_output_segment_busy+0x38>)
 80102d6:	4809      	ldr	r0, [pc, #36]	; (80102fc <tcp_output_segment_busy+0x3c>)
 80102d8:	f007 fd14 	bl	8017d04 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	7b9b      	ldrb	r3, [r3, #14]
 80102e2:	2b01      	cmp	r3, #1
 80102e4:	d001      	beq.n	80102ea <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80102e6:	2301      	movs	r3, #1
 80102e8:	e000      	b.n	80102ec <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80102ea:	2300      	movs	r3, #0
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	0801c214 	.word	0x0801c214
 80102f8:	0801c7b0 	.word	0x0801c7b0
 80102fc:	0801c268 	.word	0x0801c268

08010300 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010300:	b5b0      	push	{r4, r5, r7, lr}
 8010302:	b08c      	sub	sp, #48	; 0x30
 8010304:	af04      	add	r7, sp, #16
 8010306:	60f8      	str	r0, [r7, #12]
 8010308:	60b9      	str	r1, [r7, #8]
 801030a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d106      	bne.n	8010320 <tcp_output_segment+0x20>
 8010312:	4b63      	ldr	r3, [pc, #396]	; (80104a0 <tcp_output_segment+0x1a0>)
 8010314:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010318:	4962      	ldr	r1, [pc, #392]	; (80104a4 <tcp_output_segment+0x1a4>)
 801031a:	4863      	ldr	r0, [pc, #396]	; (80104a8 <tcp_output_segment+0x1a8>)
 801031c:	f007 fcf2 	bl	8017d04 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d106      	bne.n	8010334 <tcp_output_segment+0x34>
 8010326:	4b5e      	ldr	r3, [pc, #376]	; (80104a0 <tcp_output_segment+0x1a0>)
 8010328:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801032c:	495f      	ldr	r1, [pc, #380]	; (80104ac <tcp_output_segment+0x1ac>)
 801032e:	485e      	ldr	r0, [pc, #376]	; (80104a8 <tcp_output_segment+0x1a8>)
 8010330:	f007 fce8 	bl	8017d04 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d106      	bne.n	8010348 <tcp_output_segment+0x48>
 801033a:	4b59      	ldr	r3, [pc, #356]	; (80104a0 <tcp_output_segment+0x1a0>)
 801033c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010340:	495b      	ldr	r1, [pc, #364]	; (80104b0 <tcp_output_segment+0x1b0>)
 8010342:	4859      	ldr	r0, [pc, #356]	; (80104a8 <tcp_output_segment+0x1a8>)
 8010344:	f007 fcde 	bl	8017d04 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010348:	68f8      	ldr	r0, [r7, #12]
 801034a:	f7ff ffb9 	bl	80102c0 <tcp_output_segment_busy>
 801034e:	4603      	mov	r3, r0
 8010350:	2b00      	cmp	r3, #0
 8010352:	d001      	beq.n	8010358 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010354:	2300      	movs	r3, #0
 8010356:	e09f      	b.n	8010498 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	68dc      	ldr	r4, [r3, #12]
 8010360:	4610      	mov	r0, r2
 8010362:	f7f9 fd54 	bl	8009e0e <lwip_htonl>
 8010366:	4603      	mov	r3, r0
 8010368:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	68dc      	ldr	r4, [r3, #12]
 8010372:	4610      	mov	r0, r2
 8010374:	f7f9 fd36 	bl	8009de4 <lwip_htons>
 8010378:	4603      	mov	r3, r0
 801037a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010380:	68ba      	ldr	r2, [r7, #8]
 8010382:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010384:	441a      	add	r2, r3
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	68db      	ldr	r3, [r3, #12]
 801038e:	3314      	adds	r3, #20
 8010390:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	7a9b      	ldrb	r3, [r3, #10]
 8010396:	f003 0301 	and.w	r3, r3, #1
 801039a:	2b00      	cmp	r3, #0
 801039c:	d015      	beq.n	80103ca <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	3304      	adds	r3, #4
 80103a2:	461a      	mov	r2, r3
 80103a4:	6879      	ldr	r1, [r7, #4]
 80103a6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80103aa:	f7fc fe8f 	bl	800d0cc <tcp_eff_send_mss_netif>
 80103ae:	4603      	mov	r3, r0
 80103b0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80103b2:	8b7b      	ldrh	r3, [r7, #26]
 80103b4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7f9 fd28 	bl	8009e0e <lwip_htonl>
 80103be:	4602      	mov	r2, r0
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80103c4:	69fb      	ldr	r3, [r7, #28]
 80103c6:	3304      	adds	r3, #4
 80103c8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	da02      	bge.n	80103da <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	2200      	movs	r2, #0
 80103d8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d10c      	bne.n	80103fc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80103e2:	4b34      	ldr	r3, [pc, #208]	; (80104b4 <tcp_output_segment+0x1b4>)
 80103e4:	681a      	ldr	r2, [r3, #0]
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	68db      	ldr	r3, [r3, #12]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7f9 fd0c 	bl	8009e0e <lwip_htonl>
 80103f6:	4602      	mov	r2, r0
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	68da      	ldr	r2, [r3, #12]
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	1ad3      	subs	r3, r2, r3
 8010408:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	8959      	ldrh	r1, [r3, #10]
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	8b3a      	ldrh	r2, [r7, #24]
 8010416:	1a8a      	subs	r2, r1, r2
 8010418:	b292      	uxth	r2, r2
 801041a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	8919      	ldrh	r1, [r3, #8]
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	8b3a      	ldrh	r2, [r7, #24]
 8010428:	1a8a      	subs	r2, r1, r2
 801042a:	b292      	uxth	r2, r2
 801042c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	68fa      	ldr	r2, [r7, #12]
 8010434:	68d2      	ldr	r2, [r2, #12]
 8010436:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	2200      	movs	r2, #0
 801043e:	741a      	strb	r2, [r3, #16]
 8010440:	2200      	movs	r2, #0
 8010442:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	f103 0214 	add.w	r2, r3, #20
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	7a9b      	ldrb	r3, [r3, #10]
 8010450:	009b      	lsls	r3, r3, #2
 8010452:	f003 0304 	and.w	r3, r3, #4
 8010456:	4413      	add	r3, r2
 8010458:	69fa      	ldr	r2, [r7, #28]
 801045a:	429a      	cmp	r2, r3
 801045c:	d006      	beq.n	801046c <tcp_output_segment+0x16c>
 801045e:	4b10      	ldr	r3, [pc, #64]	; (80104a0 <tcp_output_segment+0x1a0>)
 8010460:	f240 621c 	movw	r2, #1564	; 0x61c
 8010464:	4914      	ldr	r1, [pc, #80]	; (80104b8 <tcp_output_segment+0x1b8>)
 8010466:	4810      	ldr	r0, [pc, #64]	; (80104a8 <tcp_output_segment+0x1a8>)
 8010468:	f007 fc4c 	bl	8017d04 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	6858      	ldr	r0, [r3, #4]
 8010470:	68b9      	ldr	r1, [r7, #8]
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	1d1c      	adds	r4, r3, #4
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	7add      	ldrb	r5, [r3, #11]
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	7a9b      	ldrb	r3, [r3, #10]
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	9202      	str	r2, [sp, #8]
 8010482:	2206      	movs	r2, #6
 8010484:	9201      	str	r2, [sp, #4]
 8010486:	9300      	str	r3, [sp, #0]
 8010488:	462b      	mov	r3, r5
 801048a:	4622      	mov	r2, r4
 801048c:	f002 fdd0 	bl	8013030 <ip4_output_if>
 8010490:	4603      	mov	r3, r0
 8010492:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010494:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010498:	4618      	mov	r0, r3
 801049a:	3720      	adds	r7, #32
 801049c:	46bd      	mov	sp, r7
 801049e:	bdb0      	pop	{r4, r5, r7, pc}
 80104a0:	0801c214 	.word	0x0801c214
 80104a4:	0801c7d8 	.word	0x0801c7d8
 80104a8:	0801c268 	.word	0x0801c268
 80104ac:	0801c7f8 	.word	0x0801c7f8
 80104b0:	0801c818 	.word	0x0801c818
 80104b4:	2400ee10 	.word	0x2400ee10
 80104b8:	0801c83c 	.word	0x0801c83c

080104bc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80104bc:	b5b0      	push	{r4, r5, r7, lr}
 80104be:	b084      	sub	sp, #16
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d106      	bne.n	80104d8 <tcp_rexmit_rto_prepare+0x1c>
 80104ca:	4b31      	ldr	r3, [pc, #196]	; (8010590 <tcp_rexmit_rto_prepare+0xd4>)
 80104cc:	f240 6263 	movw	r2, #1635	; 0x663
 80104d0:	4930      	ldr	r1, [pc, #192]	; (8010594 <tcp_rexmit_rto_prepare+0xd8>)
 80104d2:	4831      	ldr	r0, [pc, #196]	; (8010598 <tcp_rexmit_rto_prepare+0xdc>)
 80104d4:	f007 fc16 	bl	8017d04 <iprintf>

  if (pcb->unacked == NULL) {
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d102      	bne.n	80104e6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80104e0:	f06f 0305 	mvn.w	r3, #5
 80104e4:	e050      	b.n	8010588 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104ea:	60fb      	str	r3, [r7, #12]
 80104ec:	e00b      	b.n	8010506 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80104ee:	68f8      	ldr	r0, [r7, #12]
 80104f0:	f7ff fee6 	bl	80102c0 <tcp_output_segment_busy>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d002      	beq.n	8010500 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80104fa:	f06f 0305 	mvn.w	r3, #5
 80104fe:	e043      	b.n	8010588 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	60fb      	str	r3, [r7, #12]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d1ef      	bne.n	80104ee <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801050e:	68f8      	ldr	r0, [r7, #12]
 8010510:	f7ff fed6 	bl	80102c0 <tcp_output_segment_busy>
 8010514:	4603      	mov	r3, r0
 8010516:	2b00      	cmp	r3, #0
 8010518:	d002      	beq.n	8010520 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801051a:	f06f 0305 	mvn.w	r3, #5
 801051e:	e033      	b.n	8010588 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2200      	movs	r2, #0
 8010534:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	8b5b      	ldrh	r3, [r3, #26]
 801053a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801053e:	b29a      	uxth	r2, r3
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	4618      	mov	r0, r3
 801054c:	f7f9 fc5f 	bl	8009e0e <lwip_htonl>
 8010550:	4604      	mov	r4, r0
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	891b      	ldrh	r3, [r3, #8]
 8010556:	461d      	mov	r5, r3
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	68db      	ldr	r3, [r3, #12]
 801055c:	899b      	ldrh	r3, [r3, #12]
 801055e:	b29b      	uxth	r3, r3
 8010560:	4618      	mov	r0, r3
 8010562:	f7f9 fc3f 	bl	8009de4 <lwip_htons>
 8010566:	4603      	mov	r3, r0
 8010568:	b2db      	uxtb	r3, r3
 801056a:	f003 0303 	and.w	r3, r3, #3
 801056e:	2b00      	cmp	r3, #0
 8010570:	d001      	beq.n	8010576 <tcp_rexmit_rto_prepare+0xba>
 8010572:	2301      	movs	r3, #1
 8010574:	e000      	b.n	8010578 <tcp_rexmit_rto_prepare+0xbc>
 8010576:	2300      	movs	r3, #0
 8010578:	442b      	add	r3, r5
 801057a:	18e2      	adds	r2, r4, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010586:	2300      	movs	r3, #0
}
 8010588:	4618      	mov	r0, r3
 801058a:	3710      	adds	r7, #16
 801058c:	46bd      	mov	sp, r7
 801058e:	bdb0      	pop	{r4, r5, r7, pc}
 8010590:	0801c214 	.word	0x0801c214
 8010594:	0801c850 	.word	0x0801c850
 8010598:	0801c268 	.word	0x0801c268

0801059c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d106      	bne.n	80105b8 <tcp_rexmit_rto_commit+0x1c>
 80105aa:	4b0d      	ldr	r3, [pc, #52]	; (80105e0 <tcp_rexmit_rto_commit+0x44>)
 80105ac:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80105b0:	490c      	ldr	r1, [pc, #48]	; (80105e4 <tcp_rexmit_rto_commit+0x48>)
 80105b2:	480d      	ldr	r0, [pc, #52]	; (80105e8 <tcp_rexmit_rto_commit+0x4c>)
 80105b4:	f007 fba6 	bl	8017d04 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105be:	2bff      	cmp	r3, #255	; 0xff
 80105c0:	d007      	beq.n	80105d2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105c8:	3301      	adds	r3, #1
 80105ca:	b2da      	uxtb	r2, r3
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f7ff fc80 	bl	800fed8 <tcp_output>
}
 80105d8:	bf00      	nop
 80105da:	3708      	adds	r7, #8
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}
 80105e0:	0801c214 	.word	0x0801c214
 80105e4:	0801c874 	.word	0x0801c874
 80105e8:	0801c268 	.word	0x0801c268

080105ec <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d106      	bne.n	8010608 <tcp_rexmit_rto+0x1c>
 80105fa:	4b0a      	ldr	r3, [pc, #40]	; (8010624 <tcp_rexmit_rto+0x38>)
 80105fc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010600:	4909      	ldr	r1, [pc, #36]	; (8010628 <tcp_rexmit_rto+0x3c>)
 8010602:	480a      	ldr	r0, [pc, #40]	; (801062c <tcp_rexmit_rto+0x40>)
 8010604:	f007 fb7e 	bl	8017d04 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f7ff ff57 	bl	80104bc <tcp_rexmit_rto_prepare>
 801060e:	4603      	mov	r3, r0
 8010610:	2b00      	cmp	r3, #0
 8010612:	d102      	bne.n	801061a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f7ff ffc1 	bl	801059c <tcp_rexmit_rto_commit>
  }
}
 801061a:	bf00      	nop
 801061c:	3708      	adds	r7, #8
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	0801c214 	.word	0x0801c214
 8010628:	0801c898 	.word	0x0801c898
 801062c:	0801c268 	.word	0x0801c268

08010630 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010630:	b590      	push	{r4, r7, lr}
 8010632:	b085      	sub	sp, #20
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d106      	bne.n	801064c <tcp_rexmit+0x1c>
 801063e:	4b2f      	ldr	r3, [pc, #188]	; (80106fc <tcp_rexmit+0xcc>)
 8010640:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010644:	492e      	ldr	r1, [pc, #184]	; (8010700 <tcp_rexmit+0xd0>)
 8010646:	482f      	ldr	r0, [pc, #188]	; (8010704 <tcp_rexmit+0xd4>)
 8010648:	f007 fb5c 	bl	8017d04 <iprintf>

  if (pcb->unacked == NULL) {
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010650:	2b00      	cmp	r3, #0
 8010652:	d102      	bne.n	801065a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010654:	f06f 0305 	mvn.w	r3, #5
 8010658:	e04c      	b.n	80106f4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801065e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010660:	68b8      	ldr	r0, [r7, #8]
 8010662:	f7ff fe2d 	bl	80102c0 <tcp_output_segment_busy>
 8010666:	4603      	mov	r3, r0
 8010668:	2b00      	cmp	r3, #0
 801066a:	d002      	beq.n	8010672 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801066c:	f06f 0305 	mvn.w	r3, #5
 8010670:	e040      	b.n	80106f4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	336c      	adds	r3, #108	; 0x6c
 801067e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010680:	e002      	b.n	8010688 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d011      	beq.n	80106b4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	68db      	ldr	r3, [r3, #12]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	4618      	mov	r0, r3
 801069a:	f7f9 fbb8 	bl	8009e0e <lwip_htonl>
 801069e:	4604      	mov	r4, r0
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	685b      	ldr	r3, [r3, #4]
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7f9 fbb1 	bl	8009e0e <lwip_htonl>
 80106ac:	4603      	mov	r3, r0
 80106ae:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	dbe6      	blt.n	8010682 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681a      	ldr	r2, [r3, #0]
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	68ba      	ldr	r2, [r7, #8]
 80106c0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d103      	bne.n	80106d2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2200      	movs	r2, #0
 80106ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80106d8:	2bff      	cmp	r3, #255	; 0xff
 80106da:	d007      	beq.n	80106ec <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80106e2:	3301      	adds	r3, #1
 80106e4:	b2da      	uxtb	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2200      	movs	r2, #0
 80106f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80106f2:	2300      	movs	r3, #0
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3714      	adds	r7, #20
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd90      	pop	{r4, r7, pc}
 80106fc:	0801c214 	.word	0x0801c214
 8010700:	0801c8b4 	.word	0x0801c8b4
 8010704:	0801c268 	.word	0x0801c268

08010708 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d106      	bne.n	8010724 <tcp_rexmit_fast+0x1c>
 8010716:	4b2a      	ldr	r3, [pc, #168]	; (80107c0 <tcp_rexmit_fast+0xb8>)
 8010718:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801071c:	4929      	ldr	r1, [pc, #164]	; (80107c4 <tcp_rexmit_fast+0xbc>)
 801071e:	482a      	ldr	r0, [pc, #168]	; (80107c8 <tcp_rexmit_fast+0xc0>)
 8010720:	f007 faf0 	bl	8017d04 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010728:	2b00      	cmp	r3, #0
 801072a:	d045      	beq.n	80107b8 <tcp_rexmit_fast+0xb0>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	8b5b      	ldrh	r3, [r3, #26]
 8010730:	f003 0304 	and.w	r3, r3, #4
 8010734:	2b00      	cmp	r3, #0
 8010736:	d13f      	bne.n	80107b8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f7ff ff79 	bl	8010630 <tcp_rexmit>
 801073e:	4603      	mov	r3, r0
 8010740:	2b00      	cmp	r3, #0
 8010742:	d139      	bne.n	80107b8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010750:	4293      	cmp	r3, r2
 8010752:	bf28      	it	cs
 8010754:	4613      	movcs	r3, r2
 8010756:	b29b      	uxth	r3, r3
 8010758:	2b00      	cmp	r3, #0
 801075a:	da00      	bge.n	801075e <tcp_rexmit_fast+0x56>
 801075c:	3301      	adds	r3, #1
 801075e:	105b      	asrs	r3, r3, #1
 8010760:	b29a      	uxth	r2, r3
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801076e:	461a      	mov	r2, r3
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010774:	005b      	lsls	r3, r3, #1
 8010776:	429a      	cmp	r2, r3
 8010778:	d206      	bcs.n	8010788 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801077e:	005b      	lsls	r3, r3, #1
 8010780:	b29a      	uxth	r2, r3
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010792:	4619      	mov	r1, r3
 8010794:	0049      	lsls	r1, r1, #1
 8010796:	440b      	add	r3, r1
 8010798:	b29b      	uxth	r3, r3
 801079a:	4413      	add	r3, r2
 801079c:	b29a      	uxth	r2, r3
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	8b5b      	ldrh	r3, [r3, #26]
 80107a8:	f043 0304 	orr.w	r3, r3, #4
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2200      	movs	r2, #0
 80107b6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80107b8:	bf00      	nop
 80107ba:	3708      	adds	r7, #8
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	0801c214 	.word	0x0801c214
 80107c4:	0801c8cc 	.word	0x0801c8cc
 80107c8:	0801c268 	.word	0x0801c268

080107cc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b086      	sub	sp, #24
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	607b      	str	r3, [r7, #4]
 80107d6:	460b      	mov	r3, r1
 80107d8:	817b      	strh	r3, [r7, #10]
 80107da:	4613      	mov	r3, r2
 80107dc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80107de:	897a      	ldrh	r2, [r7, #10]
 80107e0:	893b      	ldrh	r3, [r7, #8]
 80107e2:	4413      	add	r3, r2
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	3314      	adds	r3, #20
 80107e8:	b29b      	uxth	r3, r3
 80107ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80107ee:	4619      	mov	r1, r3
 80107f0:	2022      	movs	r0, #34	; 0x22
 80107f2:	f7fa fc01 	bl	800aff8 <pbuf_alloc>
 80107f6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d04d      	beq.n	801089a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80107fe:	897b      	ldrh	r3, [r7, #10]
 8010800:	3313      	adds	r3, #19
 8010802:	697a      	ldr	r2, [r7, #20]
 8010804:	8952      	ldrh	r2, [r2, #10]
 8010806:	4293      	cmp	r3, r2
 8010808:	db06      	blt.n	8010818 <tcp_output_alloc_header_common+0x4c>
 801080a:	4b26      	ldr	r3, [pc, #152]	; (80108a4 <tcp_output_alloc_header_common+0xd8>)
 801080c:	f240 7223 	movw	r2, #1827	; 0x723
 8010810:	4925      	ldr	r1, [pc, #148]	; (80108a8 <tcp_output_alloc_header_common+0xdc>)
 8010812:	4826      	ldr	r0, [pc, #152]	; (80108ac <tcp_output_alloc_header_common+0xe0>)
 8010814:	f007 fa76 	bl	8017d04 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801081e:	8c3b      	ldrh	r3, [r7, #32]
 8010820:	4618      	mov	r0, r3
 8010822:	f7f9 fadf 	bl	8009de4 <lwip_htons>
 8010826:	4603      	mov	r3, r0
 8010828:	461a      	mov	r2, r3
 801082a:	693b      	ldr	r3, [r7, #16]
 801082c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801082e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010830:	4618      	mov	r0, r3
 8010832:	f7f9 fad7 	bl	8009de4 <lwip_htons>
 8010836:	4603      	mov	r3, r0
 8010838:	461a      	mov	r2, r3
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	687a      	ldr	r2, [r7, #4]
 8010842:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010844:	68f8      	ldr	r0, [r7, #12]
 8010846:	f7f9 fae2 	bl	8009e0e <lwip_htonl>
 801084a:	4602      	mov	r2, r0
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010850:	897b      	ldrh	r3, [r7, #10]
 8010852:	089b      	lsrs	r3, r3, #2
 8010854:	b29b      	uxth	r3, r3
 8010856:	3305      	adds	r3, #5
 8010858:	b29b      	uxth	r3, r3
 801085a:	031b      	lsls	r3, r3, #12
 801085c:	b29a      	uxth	r2, r3
 801085e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010862:	b29b      	uxth	r3, r3
 8010864:	4313      	orrs	r3, r2
 8010866:	b29b      	uxth	r3, r3
 8010868:	4618      	mov	r0, r3
 801086a:	f7f9 fabb 	bl	8009de4 <lwip_htons>
 801086e:	4603      	mov	r3, r0
 8010870:	461a      	mov	r2, r3
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010876:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010878:	4618      	mov	r0, r3
 801087a:	f7f9 fab3 	bl	8009de4 <lwip_htons>
 801087e:	4603      	mov	r3, r0
 8010880:	461a      	mov	r2, r3
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	2200      	movs	r2, #0
 801088a:	741a      	strb	r2, [r3, #16]
 801088c:	2200      	movs	r2, #0
 801088e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	2200      	movs	r2, #0
 8010894:	749a      	strb	r2, [r3, #18]
 8010896:	2200      	movs	r2, #0
 8010898:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801089a:	697b      	ldr	r3, [r7, #20]
}
 801089c:	4618      	mov	r0, r3
 801089e:	3718      	adds	r7, #24
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}
 80108a4:	0801c214 	.word	0x0801c214
 80108a8:	0801c8ec 	.word	0x0801c8ec
 80108ac:	0801c268 	.word	0x0801c268

080108b0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80108b0:	b5b0      	push	{r4, r5, r7, lr}
 80108b2:	b08a      	sub	sp, #40	; 0x28
 80108b4:	af04      	add	r7, sp, #16
 80108b6:	60f8      	str	r0, [r7, #12]
 80108b8:	607b      	str	r3, [r7, #4]
 80108ba:	460b      	mov	r3, r1
 80108bc:	817b      	strh	r3, [r7, #10]
 80108be:	4613      	mov	r3, r2
 80108c0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d106      	bne.n	80108d6 <tcp_output_alloc_header+0x26>
 80108c8:	4b15      	ldr	r3, [pc, #84]	; (8010920 <tcp_output_alloc_header+0x70>)
 80108ca:	f240 7242 	movw	r2, #1858	; 0x742
 80108ce:	4915      	ldr	r1, [pc, #84]	; (8010924 <tcp_output_alloc_header+0x74>)
 80108d0:	4815      	ldr	r0, [pc, #84]	; (8010928 <tcp_output_alloc_header+0x78>)
 80108d2:	f007 fa17 	bl	8017d04 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	8adb      	ldrh	r3, [r3, #22]
 80108de:	68fa      	ldr	r2, [r7, #12]
 80108e0:	8b12      	ldrh	r2, [r2, #24]
 80108e2:	68f9      	ldr	r1, [r7, #12]
 80108e4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80108e6:	893d      	ldrh	r5, [r7, #8]
 80108e8:	897c      	ldrh	r4, [r7, #10]
 80108ea:	9103      	str	r1, [sp, #12]
 80108ec:	2110      	movs	r1, #16
 80108ee:	9102      	str	r1, [sp, #8]
 80108f0:	9201      	str	r2, [sp, #4]
 80108f2:	9300      	str	r3, [sp, #0]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	462a      	mov	r2, r5
 80108f8:	4621      	mov	r1, r4
 80108fa:	f7ff ff67 	bl	80107cc <tcp_output_alloc_header_common>
 80108fe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d006      	beq.n	8010914 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801090a:	68fa      	ldr	r2, [r7, #12]
 801090c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801090e:	441a      	add	r2, r3
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010914:	697b      	ldr	r3, [r7, #20]
}
 8010916:	4618      	mov	r0, r3
 8010918:	3718      	adds	r7, #24
 801091a:	46bd      	mov	sp, r7
 801091c:	bdb0      	pop	{r4, r5, r7, pc}
 801091e:	bf00      	nop
 8010920:	0801c214 	.word	0x0801c214
 8010924:	0801c91c 	.word	0x0801c91c
 8010928:	0801c268 	.word	0x0801c268

0801092c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b088      	sub	sp, #32
 8010930:	af00      	add	r7, sp, #0
 8010932:	60f8      	str	r0, [r7, #12]
 8010934:	60b9      	str	r1, [r7, #8]
 8010936:	4611      	mov	r1, r2
 8010938:	461a      	mov	r2, r3
 801093a:	460b      	mov	r3, r1
 801093c:	71fb      	strb	r3, [r7, #7]
 801093e:	4613      	mov	r3, r2
 8010940:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010942:	2300      	movs	r3, #0
 8010944:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d106      	bne.n	801095a <tcp_output_fill_options+0x2e>
 801094c:	4b13      	ldr	r3, [pc, #76]	; (801099c <tcp_output_fill_options+0x70>)
 801094e:	f240 7256 	movw	r2, #1878	; 0x756
 8010952:	4913      	ldr	r1, [pc, #76]	; (80109a0 <tcp_output_fill_options+0x74>)
 8010954:	4813      	ldr	r0, [pc, #76]	; (80109a4 <tcp_output_fill_options+0x78>)
 8010956:	f007 f9d5 	bl	8017d04 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	3314      	adds	r3, #20
 8010964:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010966:	69bb      	ldr	r3, [r7, #24]
 8010968:	f103 0214 	add.w	r2, r3, #20
 801096c:	8bfb      	ldrh	r3, [r7, #30]
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	4619      	mov	r1, r3
 8010972:	79fb      	ldrb	r3, [r7, #7]
 8010974:	009b      	lsls	r3, r3, #2
 8010976:	f003 0304 	and.w	r3, r3, #4
 801097a:	440b      	add	r3, r1
 801097c:	4413      	add	r3, r2
 801097e:	697a      	ldr	r2, [r7, #20]
 8010980:	429a      	cmp	r2, r3
 8010982:	d006      	beq.n	8010992 <tcp_output_fill_options+0x66>
 8010984:	4b05      	ldr	r3, [pc, #20]	; (801099c <tcp_output_fill_options+0x70>)
 8010986:	f240 7275 	movw	r2, #1909	; 0x775
 801098a:	4907      	ldr	r1, [pc, #28]	; (80109a8 <tcp_output_fill_options+0x7c>)
 801098c:	4805      	ldr	r0, [pc, #20]	; (80109a4 <tcp_output_fill_options+0x78>)
 801098e:	f007 f9b9 	bl	8017d04 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010992:	bf00      	nop
 8010994:	3720      	adds	r7, #32
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	0801c214 	.word	0x0801c214
 80109a0:	0801c944 	.word	0x0801c944
 80109a4:	0801c268 	.word	0x0801c268
 80109a8:	0801c83c 	.word	0x0801c83c

080109ac <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b08a      	sub	sp, #40	; 0x28
 80109b0:	af04      	add	r7, sp, #16
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	60b9      	str	r1, [r7, #8]
 80109b6:	607a      	str	r2, [r7, #4]
 80109b8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d106      	bne.n	80109ce <tcp_output_control_segment+0x22>
 80109c0:	4b1c      	ldr	r3, [pc, #112]	; (8010a34 <tcp_output_control_segment+0x88>)
 80109c2:	f240 7287 	movw	r2, #1927	; 0x787
 80109c6:	491c      	ldr	r1, [pc, #112]	; (8010a38 <tcp_output_control_segment+0x8c>)
 80109c8:	481c      	ldr	r0, [pc, #112]	; (8010a3c <tcp_output_control_segment+0x90>)
 80109ca:	f007 f99b 	bl	8017d04 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80109ce:	683a      	ldr	r2, [r7, #0]
 80109d0:	6879      	ldr	r1, [r7, #4]
 80109d2:	68f8      	ldr	r0, [r7, #12]
 80109d4:	f7fe ff40 	bl	800f858 <tcp_route>
 80109d8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d102      	bne.n	80109e6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80109e0:	23fc      	movs	r3, #252	; 0xfc
 80109e2:	75fb      	strb	r3, [r7, #23]
 80109e4:	e01c      	b.n	8010a20 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d006      	beq.n	80109fa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	7adb      	ldrb	r3, [r3, #11]
 80109f0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	7a9b      	ldrb	r3, [r3, #10]
 80109f6:	757b      	strb	r3, [r7, #21]
 80109f8:	e003      	b.n	8010a02 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80109fa:	23ff      	movs	r3, #255	; 0xff
 80109fc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010a02:	7dba      	ldrb	r2, [r7, #22]
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	9302      	str	r3, [sp, #8]
 8010a08:	2306      	movs	r3, #6
 8010a0a:	9301      	str	r3, [sp, #4]
 8010a0c:	7d7b      	ldrb	r3, [r7, #21]
 8010a0e:	9300      	str	r3, [sp, #0]
 8010a10:	4613      	mov	r3, r2
 8010a12:	683a      	ldr	r2, [r7, #0]
 8010a14:	6879      	ldr	r1, [r7, #4]
 8010a16:	68b8      	ldr	r0, [r7, #8]
 8010a18:	f002 fb0a 	bl	8013030 <ip4_output_if>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010a20:	68b8      	ldr	r0, [r7, #8]
 8010a22:	f7fa fdcd 	bl	800b5c0 <pbuf_free>
  return err;
 8010a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3718      	adds	r7, #24
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
 8010a32:	bf00      	nop
 8010a34:	0801c214 	.word	0x0801c214
 8010a38:	0801c96c 	.word	0x0801c96c
 8010a3c:	0801c268 	.word	0x0801c268

08010a40 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010a40:	b590      	push	{r4, r7, lr}
 8010a42:	b08b      	sub	sp, #44	; 0x2c
 8010a44:	af04      	add	r7, sp, #16
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	607a      	str	r2, [r7, #4]
 8010a4c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d106      	bne.n	8010a62 <tcp_rst+0x22>
 8010a54:	4b1f      	ldr	r3, [pc, #124]	; (8010ad4 <tcp_rst+0x94>)
 8010a56:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010a5a:	491f      	ldr	r1, [pc, #124]	; (8010ad8 <tcp_rst+0x98>)
 8010a5c:	481f      	ldr	r0, [pc, #124]	; (8010adc <tcp_rst+0x9c>)
 8010a5e:	f007 f951 	bl	8017d04 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d106      	bne.n	8010a76 <tcp_rst+0x36>
 8010a68:	4b1a      	ldr	r3, [pc, #104]	; (8010ad4 <tcp_rst+0x94>)
 8010a6a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010a6e:	491c      	ldr	r1, [pc, #112]	; (8010ae0 <tcp_rst+0xa0>)
 8010a70:	481a      	ldr	r0, [pc, #104]	; (8010adc <tcp_rst+0x9c>)
 8010a72:	f007 f947 	bl	8017d04 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010a76:	2300      	movs	r3, #0
 8010a78:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010a7a:	f246 0308 	movw	r3, #24584	; 0x6008
 8010a7e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010a80:	7dfb      	ldrb	r3, [r7, #23]
 8010a82:	b29c      	uxth	r4, r3
 8010a84:	68b8      	ldr	r0, [r7, #8]
 8010a86:	f7f9 f9c2 	bl	8009e0e <lwip_htonl>
 8010a8a:	4602      	mov	r2, r0
 8010a8c:	8abb      	ldrh	r3, [r7, #20]
 8010a8e:	9303      	str	r3, [sp, #12]
 8010a90:	2314      	movs	r3, #20
 8010a92:	9302      	str	r3, [sp, #8]
 8010a94:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010a96:	9301      	str	r3, [sp, #4]
 8010a98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010a9a:	9300      	str	r3, [sp, #0]
 8010a9c:	4613      	mov	r3, r2
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	4621      	mov	r1, r4
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f7ff fe92 	bl	80107cc <tcp_output_alloc_header_common>
 8010aa8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d00c      	beq.n	8010aca <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010ab0:	7dfb      	ldrb	r3, [r7, #23]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	6939      	ldr	r1, [r7, #16]
 8010ab6:	68f8      	ldr	r0, [r7, #12]
 8010ab8:	f7ff ff38 	bl	801092c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010abe:	683a      	ldr	r2, [r7, #0]
 8010ac0:	6939      	ldr	r1, [r7, #16]
 8010ac2:	68f8      	ldr	r0, [r7, #12]
 8010ac4:	f7ff ff72 	bl	80109ac <tcp_output_control_segment>
 8010ac8:	e000      	b.n	8010acc <tcp_rst+0x8c>
    return;
 8010aca:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010acc:	371c      	adds	r7, #28
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd90      	pop	{r4, r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	0801c214 	.word	0x0801c214
 8010ad8:	0801c998 	.word	0x0801c998
 8010adc:	0801c268 	.word	0x0801c268
 8010ae0:	0801c9b4 	.word	0x0801c9b4

08010ae4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010ae4:	b590      	push	{r4, r7, lr}
 8010ae6:	b087      	sub	sp, #28
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010aec:	2300      	movs	r3, #0
 8010aee:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010af0:	2300      	movs	r3, #0
 8010af2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d106      	bne.n	8010b08 <tcp_send_empty_ack+0x24>
 8010afa:	4b28      	ldr	r3, [pc, #160]	; (8010b9c <tcp_send_empty_ack+0xb8>)
 8010afc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010b00:	4927      	ldr	r1, [pc, #156]	; (8010ba0 <tcp_send_empty_ack+0xbc>)
 8010b02:	4828      	ldr	r0, [pc, #160]	; (8010ba4 <tcp_send_empty_ack+0xc0>)
 8010b04:	f007 f8fe 	bl	8017d04 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010b08:	7dfb      	ldrb	r3, [r7, #23]
 8010b0a:	009b      	lsls	r3, r3, #2
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	f003 0304 	and.w	r3, r3, #4
 8010b12:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010b14:	7d7b      	ldrb	r3, [r7, #21]
 8010b16:	b29c      	uxth	r4, r3
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7f9 f976 	bl	8009e0e <lwip_htonl>
 8010b22:	4603      	mov	r3, r0
 8010b24:	2200      	movs	r2, #0
 8010b26:	4621      	mov	r1, r4
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f7ff fec1 	bl	80108b0 <tcp_output_alloc_header>
 8010b2e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d109      	bne.n	8010b4a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	8b5b      	ldrh	r3, [r3, #26]
 8010b3a:	f043 0303 	orr.w	r3, r3, #3
 8010b3e:	b29a      	uxth	r2, r3
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010b44:	f06f 0301 	mvn.w	r3, #1
 8010b48:	e023      	b.n	8010b92 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010b4a:	7dbb      	ldrb	r3, [r7, #22]
 8010b4c:	7dfa      	ldrb	r2, [r7, #23]
 8010b4e:	6939      	ldr	r1, [r7, #16]
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f7ff feeb 	bl	801092c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010b56:	687a      	ldr	r2, [r7, #4]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	3304      	adds	r3, #4
 8010b5c:	6939      	ldr	r1, [r7, #16]
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f7ff ff24 	bl	80109ac <tcp_output_control_segment>
 8010b64:	4603      	mov	r3, r0
 8010b66:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d007      	beq.n	8010b80 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	8b5b      	ldrh	r3, [r3, #26]
 8010b74:	f043 0303 	orr.w	r3, r3, #3
 8010b78:	b29a      	uxth	r2, r3
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	835a      	strh	r2, [r3, #26]
 8010b7e:	e006      	b.n	8010b8e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	8b5b      	ldrh	r3, [r3, #26]
 8010b84:	f023 0303 	bic.w	r3, r3, #3
 8010b88:	b29a      	uxth	r2, r3
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	371c      	adds	r7, #28
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd90      	pop	{r4, r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	0801c214 	.word	0x0801c214
 8010ba0:	0801c9d0 	.word	0x0801c9d0
 8010ba4:	0801c268 	.word	0x0801c268

08010ba8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010ba8:	b590      	push	{r4, r7, lr}
 8010baa:	b087      	sub	sp, #28
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d106      	bne.n	8010bc8 <tcp_keepalive+0x20>
 8010bba:	4b18      	ldr	r3, [pc, #96]	; (8010c1c <tcp_keepalive+0x74>)
 8010bbc:	f640 0224 	movw	r2, #2084	; 0x824
 8010bc0:	4917      	ldr	r1, [pc, #92]	; (8010c20 <tcp_keepalive+0x78>)
 8010bc2:	4818      	ldr	r0, [pc, #96]	; (8010c24 <tcp_keepalive+0x7c>)
 8010bc4:	f007 f89e 	bl	8017d04 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010bc8:	7dfb      	ldrb	r3, [r7, #23]
 8010bca:	b29c      	uxth	r4, r3
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bd0:	3b01      	subs	r3, #1
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7f9 f91b 	bl	8009e0e <lwip_htonl>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2200      	movs	r2, #0
 8010bdc:	4621      	mov	r1, r4
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f7ff fe66 	bl	80108b0 <tcp_output_alloc_header>
 8010be4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d102      	bne.n	8010bf2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010bf0:	e010      	b.n	8010c14 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010bf2:	7dfb      	ldrb	r3, [r7, #23]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	6939      	ldr	r1, [r7, #16]
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f7ff fe97 	bl	801092c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	3304      	adds	r3, #4
 8010c04:	6939      	ldr	r1, [r7, #16]
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f7ff fed0 	bl	80109ac <tcp_output_control_segment>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	371c      	adds	r7, #28
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd90      	pop	{r4, r7, pc}
 8010c1c:	0801c214 	.word	0x0801c214
 8010c20:	0801c9f0 	.word	0x0801c9f0
 8010c24:	0801c268 	.word	0x0801c268

08010c28 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010c28:	b590      	push	{r4, r7, lr}
 8010c2a:	b08b      	sub	sp, #44	; 0x2c
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010c30:	2300      	movs	r3, #0
 8010c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d106      	bne.n	8010c4a <tcp_zero_window_probe+0x22>
 8010c3c:	4b4c      	ldr	r3, [pc, #304]	; (8010d70 <tcp_zero_window_probe+0x148>)
 8010c3e:	f640 024f 	movw	r2, #2127	; 0x84f
 8010c42:	494c      	ldr	r1, [pc, #304]	; (8010d74 <tcp_zero_window_probe+0x14c>)
 8010c44:	484c      	ldr	r0, [pc, #304]	; (8010d78 <tcp_zero_window_probe+0x150>)
 8010c46:	f007 f85d 	bl	8017d04 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c4e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010c50:	6a3b      	ldr	r3, [r7, #32]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d101      	bne.n	8010c5a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010c56:	2300      	movs	r3, #0
 8010c58:	e086      	b.n	8010d68 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010c60:	2bff      	cmp	r3, #255	; 0xff
 8010c62:	d007      	beq.n	8010c74 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	b2da      	uxtb	r2, r3
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010c74:	6a3b      	ldr	r3, [r7, #32]
 8010c76:	68db      	ldr	r3, [r3, #12]
 8010c78:	899b      	ldrh	r3, [r3, #12]
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7f9 f8b1 	bl	8009de4 <lwip_htons>
 8010c82:	4603      	mov	r3, r0
 8010c84:	b2db      	uxtb	r3, r3
 8010c86:	f003 0301 	and.w	r3, r3, #1
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d005      	beq.n	8010c9a <tcp_zero_window_probe+0x72>
 8010c8e:	6a3b      	ldr	r3, [r7, #32]
 8010c90:	891b      	ldrh	r3, [r3, #8]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d101      	bne.n	8010c9a <tcp_zero_window_probe+0x72>
 8010c96:	2301      	movs	r3, #1
 8010c98:	e000      	b.n	8010c9c <tcp_zero_window_probe+0x74>
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010c9e:	7ffb      	ldrb	r3, [r7, #31]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	bf0c      	ite	eq
 8010ca4:	2301      	moveq	r3, #1
 8010ca6:	2300      	movne	r3, #0
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cb0:	b299      	uxth	r1, r3
 8010cb2:	6a3b      	ldr	r3, [r7, #32]
 8010cb4:	68db      	ldr	r3, [r3, #12]
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	8bba      	ldrh	r2, [r7, #28]
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f7ff fdf8 	bl	80108b0 <tcp_output_alloc_header>
 8010cc0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010cc2:	69bb      	ldr	r3, [r7, #24]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d102      	bne.n	8010cce <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ccc:	e04c      	b.n	8010d68 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010cce:	69bb      	ldr	r3, [r7, #24]
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010cd4:	7ffb      	ldrb	r3, [r7, #31]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d011      	beq.n	8010cfe <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	899b      	ldrh	r3, [r3, #12]
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	b21b      	sxth	r3, r3
 8010ce2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010ce6:	b21c      	sxth	r4, r3
 8010ce8:	2011      	movs	r0, #17
 8010cea:	f7f9 f87b 	bl	8009de4 <lwip_htons>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	b21b      	sxth	r3, r3
 8010cf2:	4323      	orrs	r3, r4
 8010cf4:	b21b      	sxth	r3, r3
 8010cf6:	b29a      	uxth	r2, r3
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	819a      	strh	r2, [r3, #12]
 8010cfc:	e010      	b.n	8010d20 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010cfe:	69bb      	ldr	r3, [r7, #24]
 8010d00:	685b      	ldr	r3, [r3, #4]
 8010d02:	3314      	adds	r3, #20
 8010d04:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010d06:	6a3b      	ldr	r3, [r7, #32]
 8010d08:	6858      	ldr	r0, [r3, #4]
 8010d0a:	6a3b      	ldr	r3, [r7, #32]
 8010d0c:	685b      	ldr	r3, [r3, #4]
 8010d0e:	891a      	ldrh	r2, [r3, #8]
 8010d10:	6a3b      	ldr	r3, [r7, #32]
 8010d12:	891b      	ldrh	r3, [r3, #8]
 8010d14:	1ad3      	subs	r3, r2, r3
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	2201      	movs	r2, #1
 8010d1a:	6939      	ldr	r1, [r7, #16]
 8010d1c:	f7fa fe56 	bl	800b9cc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010d20:	6a3b      	ldr	r3, [r7, #32]
 8010d22:	68db      	ldr	r3, [r3, #12]
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7f9 f871 	bl	8009e0e <lwip_htonl>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	3301      	adds	r3, #1
 8010d30:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	1ad3      	subs	r3, r2, r3
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	da02      	bge.n	8010d44 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	68fa      	ldr	r2, [r7, #12]
 8010d42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d48:	2200      	movs	r2, #0
 8010d4a:	69b9      	ldr	r1, [r7, #24]
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f7ff fded 	bl	801092c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	3304      	adds	r3, #4
 8010d58:	69b9      	ldr	r1, [r7, #24]
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f7ff fe26 	bl	80109ac <tcp_output_control_segment>
 8010d60:	4603      	mov	r3, r0
 8010d62:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010d64:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	372c      	adds	r7, #44	; 0x2c
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd90      	pop	{r4, r7, pc}
 8010d70:	0801c214 	.word	0x0801c214
 8010d74:	0801ca0c 	.word	0x0801ca0c
 8010d78:	0801c268 	.word	0x0801c268

08010d7c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010d84:	f7fa ff10 	bl	800bba8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010d88:	4b0a      	ldr	r3, [pc, #40]	; (8010db4 <tcpip_tcp_timer+0x38>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d103      	bne.n	8010d98 <tcpip_tcp_timer+0x1c>
 8010d90:	4b09      	ldr	r3, [pc, #36]	; (8010db8 <tcpip_tcp_timer+0x3c>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d005      	beq.n	8010da4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010d98:	2200      	movs	r2, #0
 8010d9a:	4908      	ldr	r1, [pc, #32]	; (8010dbc <tcpip_tcp_timer+0x40>)
 8010d9c:	20fa      	movs	r0, #250	; 0xfa
 8010d9e:	f000 f8f3 	bl	8010f88 <sys_timeout>
 8010da2:	e003      	b.n	8010dac <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010da4:	4b06      	ldr	r3, [pc, #24]	; (8010dc0 <tcpip_tcp_timer+0x44>)
 8010da6:	2200      	movs	r2, #0
 8010da8:	601a      	str	r2, [r3, #0]
  }
}
 8010daa:	bf00      	nop
 8010dac:	bf00      	nop
 8010dae:	3708      	adds	r7, #8
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	2400ee0c 	.word	0x2400ee0c
 8010db8:	2400ee1c 	.word	0x2400ee1c
 8010dbc:	08010d7d 	.word	0x08010d7d
 8010dc0:	2400b6d4 	.word	0x2400b6d4

08010dc4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010dc8:	4b0a      	ldr	r3, [pc, #40]	; (8010df4 <tcp_timer_needed+0x30>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d10f      	bne.n	8010df0 <tcp_timer_needed+0x2c>
 8010dd0:	4b09      	ldr	r3, [pc, #36]	; (8010df8 <tcp_timer_needed+0x34>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d103      	bne.n	8010de0 <tcp_timer_needed+0x1c>
 8010dd8:	4b08      	ldr	r3, [pc, #32]	; (8010dfc <tcp_timer_needed+0x38>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d007      	beq.n	8010df0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010de0:	4b04      	ldr	r3, [pc, #16]	; (8010df4 <tcp_timer_needed+0x30>)
 8010de2:	2201      	movs	r2, #1
 8010de4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010de6:	2200      	movs	r2, #0
 8010de8:	4905      	ldr	r1, [pc, #20]	; (8010e00 <tcp_timer_needed+0x3c>)
 8010dea:	20fa      	movs	r0, #250	; 0xfa
 8010dec:	f000 f8cc 	bl	8010f88 <sys_timeout>
  }
}
 8010df0:	bf00      	nop
 8010df2:	bd80      	pop	{r7, pc}
 8010df4:	2400b6d4 	.word	0x2400b6d4
 8010df8:	2400ee0c 	.word	0x2400ee0c
 8010dfc:	2400ee1c 	.word	0x2400ee1c
 8010e00:	08010d7d 	.word	0x08010d7d

08010e04 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b086      	sub	sp, #24
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	60f8      	str	r0, [r7, #12]
 8010e0c:	60b9      	str	r1, [r7, #8]
 8010e0e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010e10:	200a      	movs	r0, #10
 8010e12:	f7f9 fcbb 	bl	800a78c <memp_malloc>
 8010e16:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d109      	bne.n	8010e32 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d151      	bne.n	8010ec8 <sys_timeout_abs+0xc4>
 8010e24:	4b2a      	ldr	r3, [pc, #168]	; (8010ed0 <sys_timeout_abs+0xcc>)
 8010e26:	22be      	movs	r2, #190	; 0xbe
 8010e28:	492a      	ldr	r1, [pc, #168]	; (8010ed4 <sys_timeout_abs+0xd0>)
 8010e2a:	482b      	ldr	r0, [pc, #172]	; (8010ed8 <sys_timeout_abs+0xd4>)
 8010e2c:	f006 ff6a 	bl	8017d04 <iprintf>
    return;
 8010e30:	e04a      	b.n	8010ec8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	2200      	movs	r2, #0
 8010e36:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	68ba      	ldr	r2, [r7, #8]
 8010e3c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	687a      	ldr	r2, [r7, #4]
 8010e42:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010e44:	693b      	ldr	r3, [r7, #16]
 8010e46:	68fa      	ldr	r2, [r7, #12]
 8010e48:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010e4a:	4b24      	ldr	r3, [pc, #144]	; (8010edc <sys_timeout_abs+0xd8>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d103      	bne.n	8010e5a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010e52:	4a22      	ldr	r2, [pc, #136]	; (8010edc <sys_timeout_abs+0xd8>)
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	6013      	str	r3, [r2, #0]
    return;
 8010e58:	e037      	b.n	8010eca <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	685a      	ldr	r2, [r3, #4]
 8010e5e:	4b1f      	ldr	r3, [pc, #124]	; (8010edc <sys_timeout_abs+0xd8>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	1ad3      	subs	r3, r2, r3
 8010e66:	0fdb      	lsrs	r3, r3, #31
 8010e68:	f003 0301 	and.w	r3, r3, #1
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d007      	beq.n	8010e82 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010e72:	4b1a      	ldr	r3, [pc, #104]	; (8010edc <sys_timeout_abs+0xd8>)
 8010e74:	681a      	ldr	r2, [r3, #0]
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010e7a:	4a18      	ldr	r2, [pc, #96]	; (8010edc <sys_timeout_abs+0xd8>)
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	6013      	str	r3, [r2, #0]
 8010e80:	e023      	b.n	8010eca <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010e82:	4b16      	ldr	r3, [pc, #88]	; (8010edc <sys_timeout_abs+0xd8>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	617b      	str	r3, [r7, #20]
 8010e88:	e01a      	b.n	8010ec0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d00b      	beq.n	8010eaa <sys_timeout_abs+0xa6>
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	685a      	ldr	r2, [r3, #4]
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	1ad3      	subs	r3, r2, r3
 8010e9e:	0fdb      	lsrs	r3, r3, #31
 8010ea0:	f003 0301 	and.w	r3, r3, #1
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d007      	beq.n	8010eba <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	693a      	ldr	r2, [r7, #16]
 8010eb6:	601a      	str	r2, [r3, #0]
        break;
 8010eb8:	e007      	b.n	8010eca <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	617b      	str	r3, [r7, #20]
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d1e1      	bne.n	8010e8a <sys_timeout_abs+0x86>
 8010ec6:	e000      	b.n	8010eca <sys_timeout_abs+0xc6>
    return;
 8010ec8:	bf00      	nop
      }
    }
  }
}
 8010eca:	3718      	adds	r7, #24
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	0801ca30 	.word	0x0801ca30
 8010ed4:	0801ca64 	.word	0x0801ca64
 8010ed8:	0801caa4 	.word	0x0801caa4
 8010edc:	2400b6cc 	.word	0x2400b6cc

08010ee0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b086      	sub	sp, #24
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	4798      	blx	r3

  now = sys_now();
 8010ef2:	f7f4 fea7 	bl	8005c44 <sys_now>
 8010ef6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	681a      	ldr	r2, [r3, #0]
 8010efc:	4b0f      	ldr	r3, [pc, #60]	; (8010f3c <lwip_cyclic_timer+0x5c>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4413      	add	r3, r2
 8010f02:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010f04:	68fa      	ldr	r2, [r7, #12]
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	1ad3      	subs	r3, r2, r3
 8010f0a:	0fdb      	lsrs	r3, r3, #31
 8010f0c:	f003 0301 	and.w	r3, r3, #1
 8010f10:	b2db      	uxtb	r3, r3
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d009      	beq.n	8010f2a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	681a      	ldr	r2, [r3, #0]
 8010f1a:	693b      	ldr	r3, [r7, #16]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	687a      	ldr	r2, [r7, #4]
 8010f20:	4907      	ldr	r1, [pc, #28]	; (8010f40 <lwip_cyclic_timer+0x60>)
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7ff ff6e 	bl	8010e04 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010f28:	e004      	b.n	8010f34 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	4904      	ldr	r1, [pc, #16]	; (8010f40 <lwip_cyclic_timer+0x60>)
 8010f2e:	68f8      	ldr	r0, [r7, #12]
 8010f30:	f7ff ff68 	bl	8010e04 <sys_timeout_abs>
}
 8010f34:	bf00      	nop
 8010f36:	3718      	adds	r7, #24
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}
 8010f3c:	2400b6d0 	.word	0x2400b6d0
 8010f40:	08010ee1 	.word	0x08010ee1

08010f44 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b082      	sub	sp, #8
 8010f48:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	607b      	str	r3, [r7, #4]
 8010f4e:	e00e      	b.n	8010f6e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010f50:	4a0b      	ldr	r2, [pc, #44]	; (8010f80 <sys_timeouts_init+0x3c>)
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	00db      	lsls	r3, r3, #3
 8010f5c:	4a08      	ldr	r2, [pc, #32]	; (8010f80 <sys_timeouts_init+0x3c>)
 8010f5e:	4413      	add	r3, r2
 8010f60:	461a      	mov	r2, r3
 8010f62:	4908      	ldr	r1, [pc, #32]	; (8010f84 <sys_timeouts_init+0x40>)
 8010f64:	f000 f810 	bl	8010f88 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	607b      	str	r3, [r7, #4]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2b02      	cmp	r3, #2
 8010f72:	d9ed      	bls.n	8010f50 <sys_timeouts_init+0xc>
  }
}
 8010f74:	bf00      	nop
 8010f76:	bf00      	nop
 8010f78:	3708      	adds	r7, #8
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
 8010f7e:	bf00      	nop
 8010f80:	0801d918 	.word	0x0801d918
 8010f84:	08010ee1 	.word	0x08010ee1

08010f88 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b086      	sub	sp, #24
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f9a:	d306      	bcc.n	8010faa <sys_timeout+0x22>
 8010f9c:	4b0a      	ldr	r3, [pc, #40]	; (8010fc8 <sys_timeout+0x40>)
 8010f9e:	f240 1229 	movw	r2, #297	; 0x129
 8010fa2:	490a      	ldr	r1, [pc, #40]	; (8010fcc <sys_timeout+0x44>)
 8010fa4:	480a      	ldr	r0, [pc, #40]	; (8010fd0 <sys_timeout+0x48>)
 8010fa6:	f006 fead 	bl	8017d04 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010faa:	f7f4 fe4b 	bl	8005c44 <sys_now>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	4413      	add	r3, r2
 8010fb4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	68b9      	ldr	r1, [r7, #8]
 8010fba:	6978      	ldr	r0, [r7, #20]
 8010fbc:	f7ff ff22 	bl	8010e04 <sys_timeout_abs>
#endif
}
 8010fc0:	bf00      	nop
 8010fc2:	3718      	adds	r7, #24
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	0801ca30 	.word	0x0801ca30
 8010fcc:	0801cacc 	.word	0x0801cacc
 8010fd0:	0801caa4 	.word	0x0801caa4

08010fd4 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b084      	sub	sp, #16
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8010fde:	4b19      	ldr	r3, [pc, #100]	; (8011044 <sys_untimeout+0x70>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d029      	beq.n	801103a <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8010fe6:	4b17      	ldr	r3, [pc, #92]	; (8011044 <sys_untimeout+0x70>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	60bb      	str	r3, [r7, #8]
 8010fec:	2300      	movs	r3, #0
 8010fee:	60fb      	str	r3, [r7, #12]
 8010ff0:	e01f      	b.n	8011032 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	689b      	ldr	r3, [r3, #8]
 8010ff6:	687a      	ldr	r2, [r7, #4]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d115      	bne.n	8011028 <sys_untimeout+0x54>
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	683a      	ldr	r2, [r7, #0]
 8011002:	429a      	cmp	r2, r3
 8011004:	d110      	bne.n	8011028 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d104      	bne.n	8011016 <sys_untimeout+0x42>
        next_timeout = t->next;
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	4a0c      	ldr	r2, [pc, #48]	; (8011044 <sys_untimeout+0x70>)
 8011012:	6013      	str	r3, [r2, #0]
 8011014:	e003      	b.n	801101e <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	681a      	ldr	r2, [r3, #0]
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801101e:	68b9      	ldr	r1, [r7, #8]
 8011020:	200a      	movs	r0, #10
 8011022:	f7f9 fc29 	bl	800a878 <memp_free>
      return;
 8011026:	e009      	b.n	801103c <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	60fb      	str	r3, [r7, #12]
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	60bb      	str	r3, [r7, #8]
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d1dc      	bne.n	8010ff2 <sys_untimeout+0x1e>
    }
  }
  return;
 8011038:	e000      	b.n	801103c <sys_untimeout+0x68>
    return;
 801103a:	bf00      	nop
}
 801103c:	3710      	adds	r7, #16
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}
 8011042:	bf00      	nop
 8011044:	2400b6cc 	.word	0x2400b6cc

08011048 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b084      	sub	sp, #16
 801104c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801104e:	f7f4 fdf9 	bl	8005c44 <sys_now>
 8011052:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011054:	4b17      	ldr	r3, [pc, #92]	; (80110b4 <sys_check_timeouts+0x6c>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d022      	beq.n	80110a6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	685b      	ldr	r3, [r3, #4]
 8011064:	68fa      	ldr	r2, [r7, #12]
 8011066:	1ad3      	subs	r3, r2, r3
 8011068:	0fdb      	lsrs	r3, r3, #31
 801106a:	f003 0301 	and.w	r3, r3, #1
 801106e:	b2db      	uxtb	r3, r3
 8011070:	2b00      	cmp	r3, #0
 8011072:	d11a      	bne.n	80110aa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4a0e      	ldr	r2, [pc, #56]	; (80110b4 <sys_check_timeouts+0x6c>)
 801107a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	689b      	ldr	r3, [r3, #8]
 8011080:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	68db      	ldr	r3, [r3, #12]
 8011086:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	4a0a      	ldr	r2, [pc, #40]	; (80110b8 <sys_check_timeouts+0x70>)
 801108e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011090:	68b9      	ldr	r1, [r7, #8]
 8011092:	200a      	movs	r0, #10
 8011094:	f7f9 fbf0 	bl	800a878 <memp_free>
    if (handler != NULL) {
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d0da      	beq.n	8011054 <sys_check_timeouts+0xc>
      handler(arg);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6838      	ldr	r0, [r7, #0]
 80110a2:	4798      	blx	r3
  do {
 80110a4:	e7d6      	b.n	8011054 <sys_check_timeouts+0xc>
      return;
 80110a6:	bf00      	nop
 80110a8:	e000      	b.n	80110ac <sys_check_timeouts+0x64>
      return;
 80110aa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80110ac:	3710      	adds	r7, #16
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop
 80110b4:	2400b6cc 	.word	0x2400b6cc
 80110b8:	2400b6d0 	.word	0x2400b6d0

080110bc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80110c2:	4b16      	ldr	r3, [pc, #88]	; (801111c <sys_timeouts_sleeptime+0x60>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d102      	bne.n	80110d0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80110ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110ce:	e020      	b.n	8011112 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80110d0:	f7f4 fdb8 	bl	8005c44 <sys_now>
 80110d4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80110d6:	4b11      	ldr	r3, [pc, #68]	; (801111c <sys_timeouts_sleeptime+0x60>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	685a      	ldr	r2, [r3, #4]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	1ad3      	subs	r3, r2, r3
 80110e0:	0fdb      	lsrs	r3, r3, #31
 80110e2:	f003 0301 	and.w	r3, r3, #1
 80110e6:	b2db      	uxtb	r3, r3
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d001      	beq.n	80110f0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80110ec:	2300      	movs	r3, #0
 80110ee:	e010      	b.n	8011112 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80110f0:	4b0a      	ldr	r3, [pc, #40]	; (801111c <sys_timeouts_sleeptime+0x60>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	685a      	ldr	r2, [r3, #4]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	1ad3      	subs	r3, r2, r3
 80110fa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	da06      	bge.n	8011110 <sys_timeouts_sleeptime+0x54>
 8011102:	4b07      	ldr	r3, [pc, #28]	; (8011120 <sys_timeouts_sleeptime+0x64>)
 8011104:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011108:	4906      	ldr	r1, [pc, #24]	; (8011124 <sys_timeouts_sleeptime+0x68>)
 801110a:	4807      	ldr	r0, [pc, #28]	; (8011128 <sys_timeouts_sleeptime+0x6c>)
 801110c:	f006 fdfa 	bl	8017d04 <iprintf>
    return ret;
 8011110:	683b      	ldr	r3, [r7, #0]
  }
}
 8011112:	4618      	mov	r0, r3
 8011114:	3708      	adds	r7, #8
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	2400b6cc 	.word	0x2400b6cc
 8011120:	0801ca30 	.word	0x0801ca30
 8011124:	0801cb04 	.word	0x0801cb04
 8011128:	0801caa4 	.word	0x0801caa4

0801112c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011130:	f006 fe00 	bl	8017d34 <rand>
 8011134:	4603      	mov	r3, r0
 8011136:	b29b      	uxth	r3, r3
 8011138:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801113c:	b29b      	uxth	r3, r3
 801113e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011142:	b29a      	uxth	r2, r3
 8011144:	4b01      	ldr	r3, [pc, #4]	; (801114c <udp_init+0x20>)
 8011146:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011148:	bf00      	nop
 801114a:	bd80      	pop	{r7, pc}
 801114c:	24000030 	.word	0x24000030

08011150 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011150:	b480      	push	{r7}
 8011152:	b083      	sub	sp, #12
 8011154:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011156:	2300      	movs	r3, #0
 8011158:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801115a:	4b17      	ldr	r3, [pc, #92]	; (80111b8 <udp_new_port+0x68>)
 801115c:	881b      	ldrh	r3, [r3, #0]
 801115e:	1c5a      	adds	r2, r3, #1
 8011160:	b291      	uxth	r1, r2
 8011162:	4a15      	ldr	r2, [pc, #84]	; (80111b8 <udp_new_port+0x68>)
 8011164:	8011      	strh	r1, [r2, #0]
 8011166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801116a:	4293      	cmp	r3, r2
 801116c:	d103      	bne.n	8011176 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801116e:	4b12      	ldr	r3, [pc, #72]	; (80111b8 <udp_new_port+0x68>)
 8011170:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011174:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011176:	4b11      	ldr	r3, [pc, #68]	; (80111bc <udp_new_port+0x6c>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	603b      	str	r3, [r7, #0]
 801117c:	e011      	b.n	80111a2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	8a5a      	ldrh	r2, [r3, #18]
 8011182:	4b0d      	ldr	r3, [pc, #52]	; (80111b8 <udp_new_port+0x68>)
 8011184:	881b      	ldrh	r3, [r3, #0]
 8011186:	429a      	cmp	r2, r3
 8011188:	d108      	bne.n	801119c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801118a:	88fb      	ldrh	r3, [r7, #6]
 801118c:	3301      	adds	r3, #1
 801118e:	80fb      	strh	r3, [r7, #6]
 8011190:	88fb      	ldrh	r3, [r7, #6]
 8011192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011196:	d3e0      	bcc.n	801115a <udp_new_port+0xa>
        return 0;
 8011198:	2300      	movs	r3, #0
 801119a:	e007      	b.n	80111ac <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	603b      	str	r3, [r7, #0]
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d1ea      	bne.n	801117e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80111a8:	4b03      	ldr	r3, [pc, #12]	; (80111b8 <udp_new_port+0x68>)
 80111aa:	881b      	ldrh	r3, [r3, #0]
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	370c      	adds	r7, #12
 80111b0:	46bd      	mov	sp, r7
 80111b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b6:	4770      	bx	lr
 80111b8:	24000030 	.word	0x24000030
 80111bc:	2400ee24 	.word	0x2400ee24

080111c0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b084      	sub	sp, #16
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	60f8      	str	r0, [r7, #12]
 80111c8:	60b9      	str	r1, [r7, #8]
 80111ca:	4613      	mov	r3, r2
 80111cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d105      	bne.n	80111e0 <udp_input_local_match+0x20>
 80111d4:	4b27      	ldr	r3, [pc, #156]	; (8011274 <udp_input_local_match+0xb4>)
 80111d6:	2287      	movs	r2, #135	; 0x87
 80111d8:	4927      	ldr	r1, [pc, #156]	; (8011278 <udp_input_local_match+0xb8>)
 80111da:	4828      	ldr	r0, [pc, #160]	; (801127c <udp_input_local_match+0xbc>)
 80111dc:	f006 fd92 	bl	8017d04 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d105      	bne.n	80111f2 <udp_input_local_match+0x32>
 80111e6:	4b23      	ldr	r3, [pc, #140]	; (8011274 <udp_input_local_match+0xb4>)
 80111e8:	2288      	movs	r2, #136	; 0x88
 80111ea:	4925      	ldr	r1, [pc, #148]	; (8011280 <udp_input_local_match+0xc0>)
 80111ec:	4823      	ldr	r0, [pc, #140]	; (801127c <udp_input_local_match+0xbc>)
 80111ee:	f006 fd89 	bl	8017d04 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	7a1b      	ldrb	r3, [r3, #8]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d00b      	beq.n	8011212 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	7a1a      	ldrb	r2, [r3, #8]
 80111fe:	4b21      	ldr	r3, [pc, #132]	; (8011284 <udp_input_local_match+0xc4>)
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011206:	3301      	adds	r3, #1
 8011208:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801120a:	429a      	cmp	r2, r3
 801120c:	d001      	beq.n	8011212 <udp_input_local_match+0x52>
    return 0;
 801120e:	2300      	movs	r3, #0
 8011210:	e02b      	b.n	801126a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011212:	79fb      	ldrb	r3, [r7, #7]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d018      	beq.n	801124a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d013      	beq.n	8011246 <udp_input_local_match+0x86>
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d00f      	beq.n	8011246 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011226:	4b17      	ldr	r3, [pc, #92]	; (8011284 <udp_input_local_match+0xc4>)
 8011228:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801122a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801122e:	d00a      	beq.n	8011246 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	681a      	ldr	r2, [r3, #0]
 8011234:	4b13      	ldr	r3, [pc, #76]	; (8011284 <udp_input_local_match+0xc4>)
 8011236:	695b      	ldr	r3, [r3, #20]
 8011238:	405a      	eors	r2, r3
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	3308      	adds	r3, #8
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011242:	2b00      	cmp	r3, #0
 8011244:	d110      	bne.n	8011268 <udp_input_local_match+0xa8>
          return 1;
 8011246:	2301      	movs	r3, #1
 8011248:	e00f      	b.n	801126a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d009      	beq.n	8011264 <udp_input_local_match+0xa4>
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d005      	beq.n	8011264 <udp_input_local_match+0xa4>
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681a      	ldr	r2, [r3, #0]
 801125c:	4b09      	ldr	r3, [pc, #36]	; (8011284 <udp_input_local_match+0xc4>)
 801125e:	695b      	ldr	r3, [r3, #20]
 8011260:	429a      	cmp	r2, r3
 8011262:	d101      	bne.n	8011268 <udp_input_local_match+0xa8>
        return 1;
 8011264:	2301      	movs	r3, #1
 8011266:	e000      	b.n	801126a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	3710      	adds	r7, #16
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
 8011272:	bf00      	nop
 8011274:	0801cb18 	.word	0x0801cb18
 8011278:	0801cb48 	.word	0x0801cb48
 801127c:	0801cb6c 	.word	0x0801cb6c
 8011280:	0801cb94 	.word	0x0801cb94
 8011284:	2400bdac 	.word	0x2400bdac

08011288 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011288:	b590      	push	{r4, r7, lr}
 801128a:	b08d      	sub	sp, #52	; 0x34
 801128c:	af02      	add	r7, sp, #8
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011292:	2300      	movs	r3, #0
 8011294:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d105      	bne.n	80112a8 <udp_input+0x20>
 801129c:	4b7c      	ldr	r3, [pc, #496]	; (8011490 <udp_input+0x208>)
 801129e:	22cf      	movs	r2, #207	; 0xcf
 80112a0:	497c      	ldr	r1, [pc, #496]	; (8011494 <udp_input+0x20c>)
 80112a2:	487d      	ldr	r0, [pc, #500]	; (8011498 <udp_input+0x210>)
 80112a4:	f006 fd2e 	bl	8017d04 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d105      	bne.n	80112ba <udp_input+0x32>
 80112ae:	4b78      	ldr	r3, [pc, #480]	; (8011490 <udp_input+0x208>)
 80112b0:	22d0      	movs	r2, #208	; 0xd0
 80112b2:	497a      	ldr	r1, [pc, #488]	; (801149c <udp_input+0x214>)
 80112b4:	4878      	ldr	r0, [pc, #480]	; (8011498 <udp_input+0x210>)
 80112b6:	f006 fd25 	bl	8017d04 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	895b      	ldrh	r3, [r3, #10]
 80112be:	2b07      	cmp	r3, #7
 80112c0:	d803      	bhi.n	80112ca <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f7fa f97c 	bl	800b5c0 <pbuf_free>
    goto end;
 80112c8:	e0de      	b.n	8011488 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	685b      	ldr	r3, [r3, #4]
 80112ce:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80112d0:	4b73      	ldr	r3, [pc, #460]	; (80114a0 <udp_input+0x218>)
 80112d2:	695b      	ldr	r3, [r3, #20]
 80112d4:	4a72      	ldr	r2, [pc, #456]	; (80114a0 <udp_input+0x218>)
 80112d6:	6812      	ldr	r2, [r2, #0]
 80112d8:	4611      	mov	r1, r2
 80112da:	4618      	mov	r0, r3
 80112dc:	f001 ff80 	bl	80131e0 <ip4_addr_isbroadcast_u32>
 80112e0:	4603      	mov	r3, r0
 80112e2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	881b      	ldrh	r3, [r3, #0]
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7f8 fd7a 	bl	8009de4 <lwip_htons>
 80112f0:	4603      	mov	r3, r0
 80112f2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	885b      	ldrh	r3, [r3, #2]
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7f8 fd72 	bl	8009de4 <lwip_htons>
 8011300:	4603      	mov	r3, r0
 8011302:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011304:	2300      	movs	r3, #0
 8011306:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011308:	2300      	movs	r3, #0
 801130a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801130c:	2300      	movs	r3, #0
 801130e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011310:	4b64      	ldr	r3, [pc, #400]	; (80114a4 <udp_input+0x21c>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	627b      	str	r3, [r7, #36]	; 0x24
 8011316:	e054      	b.n	80113c2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131a:	8a5b      	ldrh	r3, [r3, #18]
 801131c:	89fa      	ldrh	r2, [r7, #14]
 801131e:	429a      	cmp	r2, r3
 8011320:	d14a      	bne.n	80113b8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011322:	7cfb      	ldrb	r3, [r7, #19]
 8011324:	461a      	mov	r2, r3
 8011326:	6839      	ldr	r1, [r7, #0]
 8011328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801132a:	f7ff ff49 	bl	80111c0 <udp_input_local_match>
 801132e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011330:	2b00      	cmp	r3, #0
 8011332:	d041      	beq.n	80113b8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011336:	7c1b      	ldrb	r3, [r3, #16]
 8011338:	f003 0304 	and.w	r3, r3, #4
 801133c:	2b00      	cmp	r3, #0
 801133e:	d11d      	bne.n	801137c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011340:	69fb      	ldr	r3, [r7, #28]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d102      	bne.n	801134c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011348:	61fb      	str	r3, [r7, #28]
 801134a:	e017      	b.n	801137c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801134c:	7cfb      	ldrb	r3, [r7, #19]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d014      	beq.n	801137c <udp_input+0xf4>
 8011352:	4b53      	ldr	r3, [pc, #332]	; (80114a0 <udp_input+0x218>)
 8011354:	695b      	ldr	r3, [r3, #20]
 8011356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801135a:	d10f      	bne.n	801137c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801135c:	69fb      	ldr	r3, [r7, #28]
 801135e:	681a      	ldr	r2, [r3, #0]
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	3304      	adds	r3, #4
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	429a      	cmp	r2, r3
 8011368:	d008      	beq.n	801137c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136c:	681a      	ldr	r2, [r3, #0]
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	3304      	adds	r3, #4
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	429a      	cmp	r2, r3
 8011376:	d101      	bne.n	801137c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137e:	8a9b      	ldrh	r3, [r3, #20]
 8011380:	8a3a      	ldrh	r2, [r7, #16]
 8011382:	429a      	cmp	r2, r3
 8011384:	d118      	bne.n	80113b8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011388:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801138a:	2b00      	cmp	r3, #0
 801138c:	d005      	beq.n	801139a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011390:	685a      	ldr	r2, [r3, #4]
 8011392:	4b43      	ldr	r3, [pc, #268]	; (80114a0 <udp_input+0x218>)
 8011394:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011396:	429a      	cmp	r2, r3
 8011398:	d10e      	bne.n	80113b8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801139a:	6a3b      	ldr	r3, [r7, #32]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d014      	beq.n	80113ca <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80113a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a2:	68da      	ldr	r2, [r3, #12]
 80113a4:	6a3b      	ldr	r3, [r7, #32]
 80113a6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80113a8:	4b3e      	ldr	r3, [pc, #248]	; (80114a4 <udp_input+0x21c>)
 80113aa:	681a      	ldr	r2, [r3, #0]
 80113ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ae:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80113b0:	4a3c      	ldr	r2, [pc, #240]	; (80114a4 <udp_input+0x21c>)
 80113b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80113b6:	e008      	b.n	80113ca <udp_input+0x142>
      }
    }

    prev = pcb;
 80113b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ba:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80113bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	627b      	str	r3, [r7, #36]	; 0x24
 80113c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d1a7      	bne.n	8011318 <udp_input+0x90>
 80113c8:	e000      	b.n	80113cc <udp_input+0x144>
        break;
 80113ca:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80113cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d101      	bne.n	80113d6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80113d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d002      	beq.n	80113e2 <udp_input+0x15a>
    for_us = 1;
 80113dc:	2301      	movs	r3, #1
 80113de:	76fb      	strb	r3, [r7, #27]
 80113e0:	e00a      	b.n	80113f8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	3304      	adds	r3, #4
 80113e6:	681a      	ldr	r2, [r3, #0]
 80113e8:	4b2d      	ldr	r3, [pc, #180]	; (80114a0 <udp_input+0x218>)
 80113ea:	695b      	ldr	r3, [r3, #20]
 80113ec:	429a      	cmp	r2, r3
 80113ee:	bf0c      	ite	eq
 80113f0:	2301      	moveq	r3, #1
 80113f2:	2300      	movne	r3, #0
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80113f8:	7efb      	ldrb	r3, [r7, #27]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d041      	beq.n	8011482 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80113fe:	2108      	movs	r1, #8
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f7fa f857 	bl	800b4b4 <pbuf_remove_header>
 8011406:	4603      	mov	r3, r0
 8011408:	2b00      	cmp	r3, #0
 801140a:	d00a      	beq.n	8011422 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801140c:	4b20      	ldr	r3, [pc, #128]	; (8011490 <udp_input+0x208>)
 801140e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011412:	4925      	ldr	r1, [pc, #148]	; (80114a8 <udp_input+0x220>)
 8011414:	4820      	ldr	r0, [pc, #128]	; (8011498 <udp_input+0x210>)
 8011416:	f006 fc75 	bl	8017d04 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f7fa f8d0 	bl	800b5c0 <pbuf_free>
      goto end;
 8011420:	e032      	b.n	8011488 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011424:	2b00      	cmp	r3, #0
 8011426:	d012      	beq.n	801144e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801142a:	699b      	ldr	r3, [r3, #24]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d00a      	beq.n	8011446 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011432:	699c      	ldr	r4, [r3, #24]
 8011434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011436:	69d8      	ldr	r0, [r3, #28]
 8011438:	8a3b      	ldrh	r3, [r7, #16]
 801143a:	9300      	str	r3, [sp, #0]
 801143c:	4b1b      	ldr	r3, [pc, #108]	; (80114ac <udp_input+0x224>)
 801143e:	687a      	ldr	r2, [r7, #4]
 8011440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011442:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011444:	e021      	b.n	801148a <udp_input+0x202>
        pbuf_free(p);
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f7fa f8ba 	bl	800b5c0 <pbuf_free>
        goto end;
 801144c:	e01c      	b.n	8011488 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801144e:	7cfb      	ldrb	r3, [r7, #19]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d112      	bne.n	801147a <udp_input+0x1f2>
 8011454:	4b12      	ldr	r3, [pc, #72]	; (80114a0 <udp_input+0x218>)
 8011456:	695b      	ldr	r3, [r3, #20]
 8011458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801145c:	2be0      	cmp	r3, #224	; 0xe0
 801145e:	d00c      	beq.n	801147a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011460:	4b0f      	ldr	r3, [pc, #60]	; (80114a0 <udp_input+0x218>)
 8011462:	899b      	ldrh	r3, [r3, #12]
 8011464:	3308      	adds	r3, #8
 8011466:	b29b      	uxth	r3, r3
 8011468:	b21b      	sxth	r3, r3
 801146a:	4619      	mov	r1, r3
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f7fa f894 	bl	800b59a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011472:	2103      	movs	r1, #3
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f001 fb93 	bl	8012ba0 <icmp_dest_unreach>
      pbuf_free(p);
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f7fa f8a0 	bl	800b5c0 <pbuf_free>
  return;
 8011480:	e003      	b.n	801148a <udp_input+0x202>
    pbuf_free(p);
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f7fa f89c 	bl	800b5c0 <pbuf_free>
  return;
 8011488:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801148a:	372c      	adds	r7, #44	; 0x2c
 801148c:	46bd      	mov	sp, r7
 801148e:	bd90      	pop	{r4, r7, pc}
 8011490:	0801cb18 	.word	0x0801cb18
 8011494:	0801cbbc 	.word	0x0801cbbc
 8011498:	0801cb6c 	.word	0x0801cb6c
 801149c:	0801cbd4 	.word	0x0801cbd4
 80114a0:	2400bdac 	.word	0x2400bdac
 80114a4:	2400ee24 	.word	0x2400ee24
 80114a8:	0801cbf0 	.word	0x0801cbf0
 80114ac:	2400bdbc 	.word	0x2400bdbc

080114b0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d109      	bne.n	80114d4 <udp_send+0x24>
 80114c0:	4b11      	ldr	r3, [pc, #68]	; (8011508 <udp_send+0x58>)
 80114c2:	f240 12d5 	movw	r2, #469	; 0x1d5
 80114c6:	4911      	ldr	r1, [pc, #68]	; (801150c <udp_send+0x5c>)
 80114c8:	4811      	ldr	r0, [pc, #68]	; (8011510 <udp_send+0x60>)
 80114ca:	f006 fc1b 	bl	8017d04 <iprintf>
 80114ce:	f06f 030f 	mvn.w	r3, #15
 80114d2:	e015      	b.n	8011500 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d109      	bne.n	80114ee <udp_send+0x3e>
 80114da:	4b0b      	ldr	r3, [pc, #44]	; (8011508 <udp_send+0x58>)
 80114dc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80114e0:	490c      	ldr	r1, [pc, #48]	; (8011514 <udp_send+0x64>)
 80114e2:	480b      	ldr	r0, [pc, #44]	; (8011510 <udp_send+0x60>)
 80114e4:	f006 fc0e 	bl	8017d04 <iprintf>
 80114e8:	f06f 030f 	mvn.w	r3, #15
 80114ec:	e008      	b.n	8011500 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	1d1a      	adds	r2, r3, #4
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	8a9b      	ldrh	r3, [r3, #20]
 80114f6:	6839      	ldr	r1, [r7, #0]
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f000 f80d 	bl	8011518 <udp_sendto>
 80114fe:	4603      	mov	r3, r0
}
 8011500:	4618      	mov	r0, r3
 8011502:	3708      	adds	r7, #8
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}
 8011508:	0801cb18 	.word	0x0801cb18
 801150c:	0801cc0c 	.word	0x0801cc0c
 8011510:	0801cb6c 	.word	0x0801cb6c
 8011514:	0801cc24 	.word	0x0801cc24

08011518 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b088      	sub	sp, #32
 801151c:	af02      	add	r7, sp, #8
 801151e:	60f8      	str	r0, [r7, #12]
 8011520:	60b9      	str	r1, [r7, #8]
 8011522:	607a      	str	r2, [r7, #4]
 8011524:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d109      	bne.n	8011540 <udp_sendto+0x28>
 801152c:	4b23      	ldr	r3, [pc, #140]	; (80115bc <udp_sendto+0xa4>)
 801152e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011532:	4923      	ldr	r1, [pc, #140]	; (80115c0 <udp_sendto+0xa8>)
 8011534:	4823      	ldr	r0, [pc, #140]	; (80115c4 <udp_sendto+0xac>)
 8011536:	f006 fbe5 	bl	8017d04 <iprintf>
 801153a:	f06f 030f 	mvn.w	r3, #15
 801153e:	e038      	b.n	80115b2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d109      	bne.n	801155a <udp_sendto+0x42>
 8011546:	4b1d      	ldr	r3, [pc, #116]	; (80115bc <udp_sendto+0xa4>)
 8011548:	f240 2219 	movw	r2, #537	; 0x219
 801154c:	491e      	ldr	r1, [pc, #120]	; (80115c8 <udp_sendto+0xb0>)
 801154e:	481d      	ldr	r0, [pc, #116]	; (80115c4 <udp_sendto+0xac>)
 8011550:	f006 fbd8 	bl	8017d04 <iprintf>
 8011554:	f06f 030f 	mvn.w	r3, #15
 8011558:	e02b      	b.n	80115b2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d109      	bne.n	8011574 <udp_sendto+0x5c>
 8011560:	4b16      	ldr	r3, [pc, #88]	; (80115bc <udp_sendto+0xa4>)
 8011562:	f240 221a 	movw	r2, #538	; 0x21a
 8011566:	4919      	ldr	r1, [pc, #100]	; (80115cc <udp_sendto+0xb4>)
 8011568:	4816      	ldr	r0, [pc, #88]	; (80115c4 <udp_sendto+0xac>)
 801156a:	f006 fbcb 	bl	8017d04 <iprintf>
 801156e:	f06f 030f 	mvn.w	r3, #15
 8011572:	e01e      	b.n	80115b2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	7a1b      	ldrb	r3, [r3, #8]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d006      	beq.n	801158a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	7a1b      	ldrb	r3, [r3, #8]
 8011580:	4618      	mov	r0, r3
 8011582:	f7f9 fc8f 	bl	800aea4 <netif_get_by_index>
 8011586:	6178      	str	r0, [r7, #20]
 8011588:	e003      	b.n	8011592 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f001 fb92 	bl	8012cb4 <ip4_route>
 8011590:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d102      	bne.n	801159e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8011598:	f06f 0303 	mvn.w	r3, #3
 801159c:	e009      	b.n	80115b2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801159e:	887a      	ldrh	r2, [r7, #2]
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	9300      	str	r3, [sp, #0]
 80115a4:	4613      	mov	r3, r2
 80115a6:	687a      	ldr	r2, [r7, #4]
 80115a8:	68b9      	ldr	r1, [r7, #8]
 80115aa:	68f8      	ldr	r0, [r7, #12]
 80115ac:	f000 f810 	bl	80115d0 <udp_sendto_if>
 80115b0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3718      	adds	r7, #24
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}
 80115ba:	bf00      	nop
 80115bc:	0801cb18 	.word	0x0801cb18
 80115c0:	0801cc3c 	.word	0x0801cc3c
 80115c4:	0801cb6c 	.word	0x0801cb6c
 80115c8:	0801cc54 	.word	0x0801cc54
 80115cc:	0801cc70 	.word	0x0801cc70

080115d0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b088      	sub	sp, #32
 80115d4:	af02      	add	r7, sp, #8
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	607a      	str	r2, [r7, #4]
 80115dc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d109      	bne.n	80115f8 <udp_sendto_if+0x28>
 80115e4:	4b2e      	ldr	r3, [pc, #184]	; (80116a0 <udp_sendto_if+0xd0>)
 80115e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80115ea:	492e      	ldr	r1, [pc, #184]	; (80116a4 <udp_sendto_if+0xd4>)
 80115ec:	482e      	ldr	r0, [pc, #184]	; (80116a8 <udp_sendto_if+0xd8>)
 80115ee:	f006 fb89 	bl	8017d04 <iprintf>
 80115f2:	f06f 030f 	mvn.w	r3, #15
 80115f6:	e04f      	b.n	8011698 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d109      	bne.n	8011612 <udp_sendto_if+0x42>
 80115fe:	4b28      	ldr	r3, [pc, #160]	; (80116a0 <udp_sendto_if+0xd0>)
 8011600:	f240 2281 	movw	r2, #641	; 0x281
 8011604:	4929      	ldr	r1, [pc, #164]	; (80116ac <udp_sendto_if+0xdc>)
 8011606:	4828      	ldr	r0, [pc, #160]	; (80116a8 <udp_sendto_if+0xd8>)
 8011608:	f006 fb7c 	bl	8017d04 <iprintf>
 801160c:	f06f 030f 	mvn.w	r3, #15
 8011610:	e042      	b.n	8011698 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d109      	bne.n	801162c <udp_sendto_if+0x5c>
 8011618:	4b21      	ldr	r3, [pc, #132]	; (80116a0 <udp_sendto_if+0xd0>)
 801161a:	f240 2282 	movw	r2, #642	; 0x282
 801161e:	4924      	ldr	r1, [pc, #144]	; (80116b0 <udp_sendto_if+0xe0>)
 8011620:	4821      	ldr	r0, [pc, #132]	; (80116a8 <udp_sendto_if+0xd8>)
 8011622:	f006 fb6f 	bl	8017d04 <iprintf>
 8011626:	f06f 030f 	mvn.w	r3, #15
 801162a:	e035      	b.n	8011698 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801162c:	6a3b      	ldr	r3, [r7, #32]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d109      	bne.n	8011646 <udp_sendto_if+0x76>
 8011632:	4b1b      	ldr	r3, [pc, #108]	; (80116a0 <udp_sendto_if+0xd0>)
 8011634:	f240 2283 	movw	r2, #643	; 0x283
 8011638:	491e      	ldr	r1, [pc, #120]	; (80116b4 <udp_sendto_if+0xe4>)
 801163a:	481b      	ldr	r0, [pc, #108]	; (80116a8 <udp_sendto_if+0xd8>)
 801163c:	f006 fb62 	bl	8017d04 <iprintf>
 8011640:	f06f 030f 	mvn.w	r3, #15
 8011644:	e028      	b.n	8011698 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d009      	beq.n	8011660 <udp_sendto_if+0x90>
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d005      	beq.n	8011660 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801165c:	2be0      	cmp	r3, #224	; 0xe0
 801165e:	d103      	bne.n	8011668 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011660:	6a3b      	ldr	r3, [r7, #32]
 8011662:	3304      	adds	r3, #4
 8011664:	617b      	str	r3, [r7, #20]
 8011666:	e00b      	b.n	8011680 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	6a3b      	ldr	r3, [r7, #32]
 801166e:	3304      	adds	r3, #4
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	429a      	cmp	r2, r3
 8011674:	d002      	beq.n	801167c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011676:	f06f 0303 	mvn.w	r3, #3
 801167a:	e00d      	b.n	8011698 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011680:	887a      	ldrh	r2, [r7, #2]
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	9301      	str	r3, [sp, #4]
 8011686:	6a3b      	ldr	r3, [r7, #32]
 8011688:	9300      	str	r3, [sp, #0]
 801168a:	4613      	mov	r3, r2
 801168c:	687a      	ldr	r2, [r7, #4]
 801168e:	68b9      	ldr	r1, [r7, #8]
 8011690:	68f8      	ldr	r0, [r7, #12]
 8011692:	f000 f811 	bl	80116b8 <udp_sendto_if_src>
 8011696:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011698:	4618      	mov	r0, r3
 801169a:	3718      	adds	r7, #24
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	0801cb18 	.word	0x0801cb18
 80116a4:	0801cc8c 	.word	0x0801cc8c
 80116a8:	0801cb6c 	.word	0x0801cb6c
 80116ac:	0801cca8 	.word	0x0801cca8
 80116b0:	0801ccc4 	.word	0x0801ccc4
 80116b4:	0801cce4 	.word	0x0801cce4

080116b8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b08c      	sub	sp, #48	; 0x30
 80116bc:	af04      	add	r7, sp, #16
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	60b9      	str	r1, [r7, #8]
 80116c2:	607a      	str	r2, [r7, #4]
 80116c4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d109      	bne.n	80116e0 <udp_sendto_if_src+0x28>
 80116cc:	4b65      	ldr	r3, [pc, #404]	; (8011864 <udp_sendto_if_src+0x1ac>)
 80116ce:	f240 22d1 	movw	r2, #721	; 0x2d1
 80116d2:	4965      	ldr	r1, [pc, #404]	; (8011868 <udp_sendto_if_src+0x1b0>)
 80116d4:	4865      	ldr	r0, [pc, #404]	; (801186c <udp_sendto_if_src+0x1b4>)
 80116d6:	f006 fb15 	bl	8017d04 <iprintf>
 80116da:	f06f 030f 	mvn.w	r3, #15
 80116de:	e0bc      	b.n	801185a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d109      	bne.n	80116fa <udp_sendto_if_src+0x42>
 80116e6:	4b5f      	ldr	r3, [pc, #380]	; (8011864 <udp_sendto_if_src+0x1ac>)
 80116e8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80116ec:	4960      	ldr	r1, [pc, #384]	; (8011870 <udp_sendto_if_src+0x1b8>)
 80116ee:	485f      	ldr	r0, [pc, #380]	; (801186c <udp_sendto_if_src+0x1b4>)
 80116f0:	f006 fb08 	bl	8017d04 <iprintf>
 80116f4:	f06f 030f 	mvn.w	r3, #15
 80116f8:	e0af      	b.n	801185a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d109      	bne.n	8011714 <udp_sendto_if_src+0x5c>
 8011700:	4b58      	ldr	r3, [pc, #352]	; (8011864 <udp_sendto_if_src+0x1ac>)
 8011702:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011706:	495b      	ldr	r1, [pc, #364]	; (8011874 <udp_sendto_if_src+0x1bc>)
 8011708:	4858      	ldr	r0, [pc, #352]	; (801186c <udp_sendto_if_src+0x1b4>)
 801170a:	f006 fafb 	bl	8017d04 <iprintf>
 801170e:	f06f 030f 	mvn.w	r3, #15
 8011712:	e0a2      	b.n	801185a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011716:	2b00      	cmp	r3, #0
 8011718:	d109      	bne.n	801172e <udp_sendto_if_src+0x76>
 801171a:	4b52      	ldr	r3, [pc, #328]	; (8011864 <udp_sendto_if_src+0x1ac>)
 801171c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011720:	4955      	ldr	r1, [pc, #340]	; (8011878 <udp_sendto_if_src+0x1c0>)
 8011722:	4852      	ldr	r0, [pc, #328]	; (801186c <udp_sendto_if_src+0x1b4>)
 8011724:	f006 faee 	bl	8017d04 <iprintf>
 8011728:	f06f 030f 	mvn.w	r3, #15
 801172c:	e095      	b.n	801185a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011730:	2b00      	cmp	r3, #0
 8011732:	d109      	bne.n	8011748 <udp_sendto_if_src+0x90>
 8011734:	4b4b      	ldr	r3, [pc, #300]	; (8011864 <udp_sendto_if_src+0x1ac>)
 8011736:	f240 22d5 	movw	r2, #725	; 0x2d5
 801173a:	4950      	ldr	r1, [pc, #320]	; (801187c <udp_sendto_if_src+0x1c4>)
 801173c:	484b      	ldr	r0, [pc, #300]	; (801186c <udp_sendto_if_src+0x1b4>)
 801173e:	f006 fae1 	bl	8017d04 <iprintf>
 8011742:	f06f 030f 	mvn.w	r3, #15
 8011746:	e088      	b.n	801185a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	8a5b      	ldrh	r3, [r3, #18]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d10f      	bne.n	8011770 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011750:	68f9      	ldr	r1, [r7, #12]
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	8a5b      	ldrh	r3, [r3, #18]
 8011756:	461a      	mov	r2, r3
 8011758:	68f8      	ldr	r0, [r7, #12]
 801175a:	f000 f893 	bl	8011884 <udp_bind>
 801175e:	4603      	mov	r3, r0
 8011760:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011762:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d002      	beq.n	8011770 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801176a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801176e:	e074      	b.n	801185a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	891b      	ldrh	r3, [r3, #8]
 8011774:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011778:	4293      	cmp	r3, r2
 801177a:	d902      	bls.n	8011782 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801177c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011780:	e06b      	b.n	801185a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011782:	2108      	movs	r1, #8
 8011784:	68b8      	ldr	r0, [r7, #8]
 8011786:	f7f9 fe85 	bl	800b494 <pbuf_add_header>
 801178a:	4603      	mov	r3, r0
 801178c:	2b00      	cmp	r3, #0
 801178e:	d015      	beq.n	80117bc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011790:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011794:	2108      	movs	r1, #8
 8011796:	2022      	movs	r0, #34	; 0x22
 8011798:	f7f9 fc2e 	bl	800aff8 <pbuf_alloc>
 801179c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801179e:	69fb      	ldr	r3, [r7, #28]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d102      	bne.n	80117aa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80117a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117a8:	e057      	b.n	801185a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	891b      	ldrh	r3, [r3, #8]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d006      	beq.n	80117c0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80117b2:	68b9      	ldr	r1, [r7, #8]
 80117b4:	69f8      	ldr	r0, [r7, #28]
 80117b6:	f7fa f827 	bl	800b808 <pbuf_chain>
 80117ba:	e001      	b.n	80117c0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80117c0:	69fb      	ldr	r3, [r7, #28]
 80117c2:	895b      	ldrh	r3, [r3, #10]
 80117c4:	2b07      	cmp	r3, #7
 80117c6:	d806      	bhi.n	80117d6 <udp_sendto_if_src+0x11e>
 80117c8:	4b26      	ldr	r3, [pc, #152]	; (8011864 <udp_sendto_if_src+0x1ac>)
 80117ca:	f240 320d 	movw	r2, #781	; 0x30d
 80117ce:	492c      	ldr	r1, [pc, #176]	; (8011880 <udp_sendto_if_src+0x1c8>)
 80117d0:	4826      	ldr	r0, [pc, #152]	; (801186c <udp_sendto_if_src+0x1b4>)
 80117d2:	f006 fa97 	bl	8017d04 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80117d6:	69fb      	ldr	r3, [r7, #28]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	8a5b      	ldrh	r3, [r3, #18]
 80117e0:	4618      	mov	r0, r3
 80117e2:	f7f8 faff 	bl	8009de4 <lwip_htons>
 80117e6:	4603      	mov	r3, r0
 80117e8:	461a      	mov	r2, r3
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80117ee:	887b      	ldrh	r3, [r7, #2]
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7f8 faf7 	bl	8009de4 <lwip_htons>
 80117f6:	4603      	mov	r3, r0
 80117f8:	461a      	mov	r2, r3
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	2200      	movs	r2, #0
 8011802:	719a      	strb	r2, [r3, #6]
 8011804:	2200      	movs	r2, #0
 8011806:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011808:	69fb      	ldr	r3, [r7, #28]
 801180a:	891b      	ldrh	r3, [r3, #8]
 801180c:	4618      	mov	r0, r3
 801180e:	f7f8 fae9 	bl	8009de4 <lwip_htons>
 8011812:	4603      	mov	r3, r0
 8011814:	461a      	mov	r2, r3
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801181a:	2311      	movs	r3, #17
 801181c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	7adb      	ldrb	r3, [r3, #11]
 8011822:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	7a9b      	ldrb	r3, [r3, #10]
 8011828:	7cb9      	ldrb	r1, [r7, #18]
 801182a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801182c:	9202      	str	r2, [sp, #8]
 801182e:	7cfa      	ldrb	r2, [r7, #19]
 8011830:	9201      	str	r2, [sp, #4]
 8011832:	9300      	str	r3, [sp, #0]
 8011834:	460b      	mov	r3, r1
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801183a:	69f8      	ldr	r0, [r7, #28]
 801183c:	f001 fc22 	bl	8013084 <ip4_output_if_src>
 8011840:	4603      	mov	r3, r0
 8011842:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011844:	69fa      	ldr	r2, [r7, #28]
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	429a      	cmp	r2, r3
 801184a:	d004      	beq.n	8011856 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801184c:	69f8      	ldr	r0, [r7, #28]
 801184e:	f7f9 feb7 	bl	800b5c0 <pbuf_free>
    q = NULL;
 8011852:	2300      	movs	r3, #0
 8011854:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011856:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801185a:	4618      	mov	r0, r3
 801185c:	3720      	adds	r7, #32
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	0801cb18 	.word	0x0801cb18
 8011868:	0801cd04 	.word	0x0801cd04
 801186c:	0801cb6c 	.word	0x0801cb6c
 8011870:	0801cd24 	.word	0x0801cd24
 8011874:	0801cd44 	.word	0x0801cd44
 8011878:	0801cd68 	.word	0x0801cd68
 801187c:	0801cd8c 	.word	0x0801cd8c
 8011880:	0801cdb0 	.word	0x0801cdb0

08011884 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b086      	sub	sp, #24
 8011888:	af00      	add	r7, sp, #0
 801188a:	60f8      	str	r0, [r7, #12]
 801188c:	60b9      	str	r1, [r7, #8]
 801188e:	4613      	mov	r3, r2
 8011890:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d101      	bne.n	801189c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011898:	4b39      	ldr	r3, [pc, #228]	; (8011980 <udp_bind+0xfc>)
 801189a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d109      	bne.n	80118b6 <udp_bind+0x32>
 80118a2:	4b38      	ldr	r3, [pc, #224]	; (8011984 <udp_bind+0x100>)
 80118a4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80118a8:	4937      	ldr	r1, [pc, #220]	; (8011988 <udp_bind+0x104>)
 80118aa:	4838      	ldr	r0, [pc, #224]	; (801198c <udp_bind+0x108>)
 80118ac:	f006 fa2a 	bl	8017d04 <iprintf>
 80118b0:	f06f 030f 	mvn.w	r3, #15
 80118b4:	e060      	b.n	8011978 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80118b6:	2300      	movs	r3, #0
 80118b8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80118ba:	4b35      	ldr	r3, [pc, #212]	; (8011990 <udp_bind+0x10c>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	617b      	str	r3, [r7, #20]
 80118c0:	e009      	b.n	80118d6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80118c2:	68fa      	ldr	r2, [r7, #12]
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d102      	bne.n	80118d0 <udp_bind+0x4c>
      rebind = 1;
 80118ca:	2301      	movs	r3, #1
 80118cc:	74fb      	strb	r3, [r7, #19]
      break;
 80118ce:	e005      	b.n	80118dc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	617b      	str	r3, [r7, #20]
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d1f2      	bne.n	80118c2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80118dc:	88fb      	ldrh	r3, [r7, #6]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d109      	bne.n	80118f6 <udp_bind+0x72>
    port = udp_new_port();
 80118e2:	f7ff fc35 	bl	8011150 <udp_new_port>
 80118e6:	4603      	mov	r3, r0
 80118e8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80118ea:	88fb      	ldrh	r3, [r7, #6]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d12c      	bne.n	801194a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80118f0:	f06f 0307 	mvn.w	r3, #7
 80118f4:	e040      	b.n	8011978 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80118f6:	4b26      	ldr	r3, [pc, #152]	; (8011990 <udp_bind+0x10c>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	617b      	str	r3, [r7, #20]
 80118fc:	e022      	b.n	8011944 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80118fe:	68fa      	ldr	r2, [r7, #12]
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	429a      	cmp	r2, r3
 8011904:	d01b      	beq.n	801193e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	8a5b      	ldrh	r3, [r3, #18]
 801190a:	88fa      	ldrh	r2, [r7, #6]
 801190c:	429a      	cmp	r2, r3
 801190e:	d116      	bne.n	801193e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	681a      	ldr	r2, [r3, #0]
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011918:	429a      	cmp	r2, r3
 801191a:	d00d      	beq.n	8011938 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d00a      	beq.n	8011938 <udp_bind+0xb4>
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d006      	beq.n	8011938 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801192a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801192c:	2b00      	cmp	r3, #0
 801192e:	d003      	beq.n	8011938 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d102      	bne.n	801193e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011938:	f06f 0307 	mvn.w	r3, #7
 801193c:	e01c      	b.n	8011978 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	68db      	ldr	r3, [r3, #12]
 8011942:	617b      	str	r3, [r7, #20]
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d1d9      	bne.n	80118fe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d002      	beq.n	8011956 <udp_bind+0xd2>
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	e000      	b.n	8011958 <udp_bind+0xd4>
 8011956:	2300      	movs	r3, #0
 8011958:	68fa      	ldr	r2, [r7, #12]
 801195a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	88fa      	ldrh	r2, [r7, #6]
 8011960:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011962:	7cfb      	ldrb	r3, [r7, #19]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d106      	bne.n	8011976 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011968:	4b09      	ldr	r3, [pc, #36]	; (8011990 <udp_bind+0x10c>)
 801196a:	681a      	ldr	r2, [r3, #0]
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011970:	4a07      	ldr	r2, [pc, #28]	; (8011990 <udp_bind+0x10c>)
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011976:	2300      	movs	r3, #0
}
 8011978:	4618      	mov	r0, r3
 801197a:	3718      	adds	r7, #24
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	0801d930 	.word	0x0801d930
 8011984:	0801cb18 	.word	0x0801cb18
 8011988:	0801cde0 	.word	0x0801cde0
 801198c:	0801cb6c 	.word	0x0801cb6c
 8011990:	2400ee24 	.word	0x2400ee24

08011994 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b086      	sub	sp, #24
 8011998:	af00      	add	r7, sp, #0
 801199a:	60f8      	str	r0, [r7, #12]
 801199c:	60b9      	str	r1, [r7, #8]
 801199e:	4613      	mov	r3, r2
 80119a0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d109      	bne.n	80119bc <udp_connect+0x28>
 80119a8:	4b2c      	ldr	r3, [pc, #176]	; (8011a5c <udp_connect+0xc8>)
 80119aa:	f240 4235 	movw	r2, #1077	; 0x435
 80119ae:	492c      	ldr	r1, [pc, #176]	; (8011a60 <udp_connect+0xcc>)
 80119b0:	482c      	ldr	r0, [pc, #176]	; (8011a64 <udp_connect+0xd0>)
 80119b2:	f006 f9a7 	bl	8017d04 <iprintf>
 80119b6:	f06f 030f 	mvn.w	r3, #15
 80119ba:	e04b      	b.n	8011a54 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d109      	bne.n	80119d6 <udp_connect+0x42>
 80119c2:	4b26      	ldr	r3, [pc, #152]	; (8011a5c <udp_connect+0xc8>)
 80119c4:	f240 4236 	movw	r2, #1078	; 0x436
 80119c8:	4927      	ldr	r1, [pc, #156]	; (8011a68 <udp_connect+0xd4>)
 80119ca:	4826      	ldr	r0, [pc, #152]	; (8011a64 <udp_connect+0xd0>)
 80119cc:	f006 f99a 	bl	8017d04 <iprintf>
 80119d0:	f06f 030f 	mvn.w	r3, #15
 80119d4:	e03e      	b.n	8011a54 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	8a5b      	ldrh	r3, [r3, #18]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d10f      	bne.n	80119fe <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80119de:	68f9      	ldr	r1, [r7, #12]
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	8a5b      	ldrh	r3, [r3, #18]
 80119e4:	461a      	mov	r2, r3
 80119e6:	68f8      	ldr	r0, [r7, #12]
 80119e8:	f7ff ff4c 	bl	8011884 <udp_bind>
 80119ec:	4603      	mov	r3, r0
 80119ee:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80119f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d002      	beq.n	80119fe <udp_connect+0x6a>
      return err;
 80119f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119fc:	e02a      	b.n	8011a54 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d002      	beq.n	8011a0a <udp_connect+0x76>
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	e000      	b.n	8011a0c <udp_connect+0x78>
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	68fa      	ldr	r2, [r7, #12]
 8011a0e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	88fa      	ldrh	r2, [r7, #6]
 8011a14:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	7c1b      	ldrb	r3, [r3, #16]
 8011a1a:	f043 0304 	orr.w	r3, r3, #4
 8011a1e:	b2da      	uxtb	r2, r3
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011a24:	4b11      	ldr	r3, [pc, #68]	; (8011a6c <udp_connect+0xd8>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	617b      	str	r3, [r7, #20]
 8011a2a:	e008      	b.n	8011a3e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011a2c:	68fa      	ldr	r2, [r7, #12]
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d101      	bne.n	8011a38 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011a34:	2300      	movs	r3, #0
 8011a36:	e00d      	b.n	8011a54 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	68db      	ldr	r3, [r3, #12]
 8011a3c:	617b      	str	r3, [r7, #20]
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d1f3      	bne.n	8011a2c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011a44:	4b09      	ldr	r3, [pc, #36]	; (8011a6c <udp_connect+0xd8>)
 8011a46:	681a      	ldr	r2, [r3, #0]
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011a4c:	4a07      	ldr	r2, [pc, #28]	; (8011a6c <udp_connect+0xd8>)
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011a52:	2300      	movs	r3, #0
}
 8011a54:	4618      	mov	r0, r3
 8011a56:	3718      	adds	r7, #24
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}
 8011a5c:	0801cb18 	.word	0x0801cb18
 8011a60:	0801cdf8 	.word	0x0801cdf8
 8011a64:	0801cb6c 	.word	0x0801cb6c
 8011a68:	0801ce14 	.word	0x0801ce14
 8011a6c:	2400ee24 	.word	0x2400ee24

08011a70 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011a76:	2000      	movs	r0, #0
 8011a78:	f7f8 fe88 	bl	800a78c <memp_malloc>
 8011a7c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d007      	beq.n	8011a94 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011a84:	2220      	movs	r2, #32
 8011a86:	2100      	movs	r1, #0
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f006 f889 	bl	8017ba0 <memset>
    pcb->ttl = UDP_TTL;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	22ff      	movs	r2, #255	; 0xff
 8011a92:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011a94:	687b      	ldr	r3, [r7, #4]
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3708      	adds	r7, #8
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
	...

08011aa0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b085      	sub	sp, #20
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d01e      	beq.n	8011aee <udp_netif_ip_addr_changed+0x4e>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d01a      	beq.n	8011aee <udp_netif_ip_addr_changed+0x4e>
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d017      	beq.n	8011aee <udp_netif_ip_addr_changed+0x4e>
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d013      	beq.n	8011aee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011ac6:	4b0d      	ldr	r3, [pc, #52]	; (8011afc <udp_netif_ip_addr_changed+0x5c>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	60fb      	str	r3, [r7, #12]
 8011acc:	e00c      	b.n	8011ae8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681a      	ldr	r2, [r3, #0]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d103      	bne.n	8011ae2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	681a      	ldr	r2, [r3, #0]
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	68db      	ldr	r3, [r3, #12]
 8011ae6:	60fb      	str	r3, [r7, #12]
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d1ef      	bne.n	8011ace <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011aee:	bf00      	nop
 8011af0:	3714      	adds	r7, #20
 8011af2:	46bd      	mov	sp, r7
 8011af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop
 8011afc:	2400ee24 	.word	0x2400ee24

08011b00 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b082      	sub	sp, #8
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011b08:	4915      	ldr	r1, [pc, #84]	; (8011b60 <etharp_free_entry+0x60>)
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	4613      	mov	r3, r2
 8011b0e:	005b      	lsls	r3, r3, #1
 8011b10:	4413      	add	r3, r2
 8011b12:	00db      	lsls	r3, r3, #3
 8011b14:	440b      	add	r3, r1
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d013      	beq.n	8011b44 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011b1c:	4910      	ldr	r1, [pc, #64]	; (8011b60 <etharp_free_entry+0x60>)
 8011b1e:	687a      	ldr	r2, [r7, #4]
 8011b20:	4613      	mov	r3, r2
 8011b22:	005b      	lsls	r3, r3, #1
 8011b24:	4413      	add	r3, r2
 8011b26:	00db      	lsls	r3, r3, #3
 8011b28:	440b      	add	r3, r1
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f7f9 fd47 	bl	800b5c0 <pbuf_free>
    arp_table[i].q = NULL;
 8011b32:	490b      	ldr	r1, [pc, #44]	; (8011b60 <etharp_free_entry+0x60>)
 8011b34:	687a      	ldr	r2, [r7, #4]
 8011b36:	4613      	mov	r3, r2
 8011b38:	005b      	lsls	r3, r3, #1
 8011b3a:	4413      	add	r3, r2
 8011b3c:	00db      	lsls	r3, r3, #3
 8011b3e:	440b      	add	r3, r1
 8011b40:	2200      	movs	r2, #0
 8011b42:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011b44:	4906      	ldr	r1, [pc, #24]	; (8011b60 <etharp_free_entry+0x60>)
 8011b46:	687a      	ldr	r2, [r7, #4]
 8011b48:	4613      	mov	r3, r2
 8011b4a:	005b      	lsls	r3, r3, #1
 8011b4c:	4413      	add	r3, r2
 8011b4e:	00db      	lsls	r3, r3, #3
 8011b50:	440b      	add	r3, r1
 8011b52:	3314      	adds	r3, #20
 8011b54:	2200      	movs	r2, #0
 8011b56:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011b58:	bf00      	nop
 8011b5a:	3708      	adds	r7, #8
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}
 8011b60:	2400b6d8 	.word	0x2400b6d8

08011b64 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b082      	sub	sp, #8
 8011b68:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	607b      	str	r3, [r7, #4]
 8011b6e:	e096      	b.n	8011c9e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011b70:	494f      	ldr	r1, [pc, #316]	; (8011cb0 <etharp_tmr+0x14c>)
 8011b72:	687a      	ldr	r2, [r7, #4]
 8011b74:	4613      	mov	r3, r2
 8011b76:	005b      	lsls	r3, r3, #1
 8011b78:	4413      	add	r3, r2
 8011b7a:	00db      	lsls	r3, r3, #3
 8011b7c:	440b      	add	r3, r1
 8011b7e:	3314      	adds	r3, #20
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011b84:	78fb      	ldrb	r3, [r7, #3]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f000 8086 	beq.w	8011c98 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011b8c:	4948      	ldr	r1, [pc, #288]	; (8011cb0 <etharp_tmr+0x14c>)
 8011b8e:	687a      	ldr	r2, [r7, #4]
 8011b90:	4613      	mov	r3, r2
 8011b92:	005b      	lsls	r3, r3, #1
 8011b94:	4413      	add	r3, r2
 8011b96:	00db      	lsls	r3, r3, #3
 8011b98:	440b      	add	r3, r1
 8011b9a:	3312      	adds	r3, #18
 8011b9c:	881b      	ldrh	r3, [r3, #0]
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	b298      	uxth	r0, r3
 8011ba2:	4943      	ldr	r1, [pc, #268]	; (8011cb0 <etharp_tmr+0x14c>)
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	4613      	mov	r3, r2
 8011ba8:	005b      	lsls	r3, r3, #1
 8011baa:	4413      	add	r3, r2
 8011bac:	00db      	lsls	r3, r3, #3
 8011bae:	440b      	add	r3, r1
 8011bb0:	3312      	adds	r3, #18
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011bb6:	493e      	ldr	r1, [pc, #248]	; (8011cb0 <etharp_tmr+0x14c>)
 8011bb8:	687a      	ldr	r2, [r7, #4]
 8011bba:	4613      	mov	r3, r2
 8011bbc:	005b      	lsls	r3, r3, #1
 8011bbe:	4413      	add	r3, r2
 8011bc0:	00db      	lsls	r3, r3, #3
 8011bc2:	440b      	add	r3, r1
 8011bc4:	3312      	adds	r3, #18
 8011bc6:	881b      	ldrh	r3, [r3, #0]
 8011bc8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011bcc:	d215      	bcs.n	8011bfa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011bce:	4938      	ldr	r1, [pc, #224]	; (8011cb0 <etharp_tmr+0x14c>)
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	4613      	mov	r3, r2
 8011bd4:	005b      	lsls	r3, r3, #1
 8011bd6:	4413      	add	r3, r2
 8011bd8:	00db      	lsls	r3, r3, #3
 8011bda:	440b      	add	r3, r1
 8011bdc:	3314      	adds	r3, #20
 8011bde:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011be0:	2b01      	cmp	r3, #1
 8011be2:	d10e      	bne.n	8011c02 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011be4:	4932      	ldr	r1, [pc, #200]	; (8011cb0 <etharp_tmr+0x14c>)
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	4613      	mov	r3, r2
 8011bea:	005b      	lsls	r3, r3, #1
 8011bec:	4413      	add	r3, r2
 8011bee:	00db      	lsls	r3, r3, #3
 8011bf0:	440b      	add	r3, r1
 8011bf2:	3312      	adds	r3, #18
 8011bf4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011bf6:	2b04      	cmp	r3, #4
 8011bf8:	d903      	bls.n	8011c02 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f7ff ff80 	bl	8011b00 <etharp_free_entry>
 8011c00:	e04a      	b.n	8011c98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011c02:	492b      	ldr	r1, [pc, #172]	; (8011cb0 <etharp_tmr+0x14c>)
 8011c04:	687a      	ldr	r2, [r7, #4]
 8011c06:	4613      	mov	r3, r2
 8011c08:	005b      	lsls	r3, r3, #1
 8011c0a:	4413      	add	r3, r2
 8011c0c:	00db      	lsls	r3, r3, #3
 8011c0e:	440b      	add	r3, r1
 8011c10:	3314      	adds	r3, #20
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	2b03      	cmp	r3, #3
 8011c16:	d10a      	bne.n	8011c2e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011c18:	4925      	ldr	r1, [pc, #148]	; (8011cb0 <etharp_tmr+0x14c>)
 8011c1a:	687a      	ldr	r2, [r7, #4]
 8011c1c:	4613      	mov	r3, r2
 8011c1e:	005b      	lsls	r3, r3, #1
 8011c20:	4413      	add	r3, r2
 8011c22:	00db      	lsls	r3, r3, #3
 8011c24:	440b      	add	r3, r1
 8011c26:	3314      	adds	r3, #20
 8011c28:	2204      	movs	r2, #4
 8011c2a:	701a      	strb	r2, [r3, #0]
 8011c2c:	e034      	b.n	8011c98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011c2e:	4920      	ldr	r1, [pc, #128]	; (8011cb0 <etharp_tmr+0x14c>)
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	4613      	mov	r3, r2
 8011c34:	005b      	lsls	r3, r3, #1
 8011c36:	4413      	add	r3, r2
 8011c38:	00db      	lsls	r3, r3, #3
 8011c3a:	440b      	add	r3, r1
 8011c3c:	3314      	adds	r3, #20
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	2b04      	cmp	r3, #4
 8011c42:	d10a      	bne.n	8011c5a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011c44:	491a      	ldr	r1, [pc, #104]	; (8011cb0 <etharp_tmr+0x14c>)
 8011c46:	687a      	ldr	r2, [r7, #4]
 8011c48:	4613      	mov	r3, r2
 8011c4a:	005b      	lsls	r3, r3, #1
 8011c4c:	4413      	add	r3, r2
 8011c4e:	00db      	lsls	r3, r3, #3
 8011c50:	440b      	add	r3, r1
 8011c52:	3314      	adds	r3, #20
 8011c54:	2202      	movs	r2, #2
 8011c56:	701a      	strb	r2, [r3, #0]
 8011c58:	e01e      	b.n	8011c98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011c5a:	4915      	ldr	r1, [pc, #84]	; (8011cb0 <etharp_tmr+0x14c>)
 8011c5c:	687a      	ldr	r2, [r7, #4]
 8011c5e:	4613      	mov	r3, r2
 8011c60:	005b      	lsls	r3, r3, #1
 8011c62:	4413      	add	r3, r2
 8011c64:	00db      	lsls	r3, r3, #3
 8011c66:	440b      	add	r3, r1
 8011c68:	3314      	adds	r3, #20
 8011c6a:	781b      	ldrb	r3, [r3, #0]
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d113      	bne.n	8011c98 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011c70:	490f      	ldr	r1, [pc, #60]	; (8011cb0 <etharp_tmr+0x14c>)
 8011c72:	687a      	ldr	r2, [r7, #4]
 8011c74:	4613      	mov	r3, r2
 8011c76:	005b      	lsls	r3, r3, #1
 8011c78:	4413      	add	r3, r2
 8011c7a:	00db      	lsls	r3, r3, #3
 8011c7c:	440b      	add	r3, r1
 8011c7e:	3308      	adds	r3, #8
 8011c80:	6818      	ldr	r0, [r3, #0]
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	4613      	mov	r3, r2
 8011c86:	005b      	lsls	r3, r3, #1
 8011c88:	4413      	add	r3, r2
 8011c8a:	00db      	lsls	r3, r3, #3
 8011c8c:	4a08      	ldr	r2, [pc, #32]	; (8011cb0 <etharp_tmr+0x14c>)
 8011c8e:	4413      	add	r3, r2
 8011c90:	3304      	adds	r3, #4
 8011c92:	4619      	mov	r1, r3
 8011c94:	f000 fe6e 	bl	8012974 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	607b      	str	r3, [r7, #4]
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2b09      	cmp	r3, #9
 8011ca2:	f77f af65 	ble.w	8011b70 <etharp_tmr+0xc>
      }
    }
  }
}
 8011ca6:	bf00      	nop
 8011ca8:	bf00      	nop
 8011caa:	3708      	adds	r7, #8
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	2400b6d8 	.word	0x2400b6d8

08011cb4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b08a      	sub	sp, #40	; 0x28
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	607a      	str	r2, [r7, #4]
 8011cc0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011cc2:	230a      	movs	r3, #10
 8011cc4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011cc6:	230a      	movs	r3, #10
 8011cc8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011cca:	230a      	movs	r3, #10
 8011ccc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011cd2:	230a      	movs	r3, #10
 8011cd4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	83bb      	strh	r3, [r7, #28]
 8011cda:	2300      	movs	r3, #0
 8011cdc:	837b      	strh	r3, [r7, #26]
 8011cde:	2300      	movs	r3, #0
 8011ce0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	843b      	strh	r3, [r7, #32]
 8011ce6:	e0ae      	b.n	8011e46 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011ce8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011cec:	49a6      	ldr	r1, [pc, #664]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011cee:	4613      	mov	r3, r2
 8011cf0:	005b      	lsls	r3, r3, #1
 8011cf2:	4413      	add	r3, r2
 8011cf4:	00db      	lsls	r3, r3, #3
 8011cf6:	440b      	add	r3, r1
 8011cf8:	3314      	adds	r3, #20
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011cfe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011d02:	2b0a      	cmp	r3, #10
 8011d04:	d105      	bne.n	8011d12 <etharp_find_entry+0x5e>
 8011d06:	7dfb      	ldrb	r3, [r7, #23]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d102      	bne.n	8011d12 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011d0c:	8c3b      	ldrh	r3, [r7, #32]
 8011d0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8011d10:	e095      	b.n	8011e3e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011d12:	7dfb      	ldrb	r3, [r7, #23]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	f000 8092 	beq.w	8011e3e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011d1a:	7dfb      	ldrb	r3, [r7, #23]
 8011d1c:	2b01      	cmp	r3, #1
 8011d1e:	d009      	beq.n	8011d34 <etharp_find_entry+0x80>
 8011d20:	7dfb      	ldrb	r3, [r7, #23]
 8011d22:	2b01      	cmp	r3, #1
 8011d24:	d806      	bhi.n	8011d34 <etharp_find_entry+0x80>
 8011d26:	4b99      	ldr	r3, [pc, #612]	; (8011f8c <etharp_find_entry+0x2d8>)
 8011d28:	f240 1223 	movw	r2, #291	; 0x123
 8011d2c:	4998      	ldr	r1, [pc, #608]	; (8011f90 <etharp_find_entry+0x2dc>)
 8011d2e:	4899      	ldr	r0, [pc, #612]	; (8011f94 <etharp_find_entry+0x2e0>)
 8011d30:	f005 ffe8 	bl	8017d04 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d020      	beq.n	8011d7c <etharp_find_entry+0xc8>
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	6819      	ldr	r1, [r3, #0]
 8011d3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d42:	4891      	ldr	r0, [pc, #580]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011d44:	4613      	mov	r3, r2
 8011d46:	005b      	lsls	r3, r3, #1
 8011d48:	4413      	add	r3, r2
 8011d4a:	00db      	lsls	r3, r3, #3
 8011d4c:	4403      	add	r3, r0
 8011d4e:	3304      	adds	r3, #4
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	4299      	cmp	r1, r3
 8011d54:	d112      	bne.n	8011d7c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d00c      	beq.n	8011d76 <etharp_find_entry+0xc2>
 8011d5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d60:	4989      	ldr	r1, [pc, #548]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011d62:	4613      	mov	r3, r2
 8011d64:	005b      	lsls	r3, r3, #1
 8011d66:	4413      	add	r3, r2
 8011d68:	00db      	lsls	r3, r3, #3
 8011d6a:	440b      	add	r3, r1
 8011d6c:	3308      	adds	r3, #8
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	687a      	ldr	r2, [r7, #4]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d102      	bne.n	8011d7c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011d76:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011d7a:	e100      	b.n	8011f7e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011d7c:	7dfb      	ldrb	r3, [r7, #23]
 8011d7e:	2b01      	cmp	r3, #1
 8011d80:	d140      	bne.n	8011e04 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011d82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d86:	4980      	ldr	r1, [pc, #512]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011d88:	4613      	mov	r3, r2
 8011d8a:	005b      	lsls	r3, r3, #1
 8011d8c:	4413      	add	r3, r2
 8011d8e:	00db      	lsls	r3, r3, #3
 8011d90:	440b      	add	r3, r1
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d01a      	beq.n	8011dce <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011d98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d9c:	497a      	ldr	r1, [pc, #488]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011d9e:	4613      	mov	r3, r2
 8011da0:	005b      	lsls	r3, r3, #1
 8011da2:	4413      	add	r3, r2
 8011da4:	00db      	lsls	r3, r3, #3
 8011da6:	440b      	add	r3, r1
 8011da8:	3312      	adds	r3, #18
 8011daa:	881b      	ldrh	r3, [r3, #0]
 8011dac:	8bba      	ldrh	r2, [r7, #28]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d845      	bhi.n	8011e3e <etharp_find_entry+0x18a>
            old_queue = i;
 8011db2:	8c3b      	ldrh	r3, [r7, #32]
 8011db4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011db6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011dba:	4973      	ldr	r1, [pc, #460]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011dbc:	4613      	mov	r3, r2
 8011dbe:	005b      	lsls	r3, r3, #1
 8011dc0:	4413      	add	r3, r2
 8011dc2:	00db      	lsls	r3, r3, #3
 8011dc4:	440b      	add	r3, r1
 8011dc6:	3312      	adds	r3, #18
 8011dc8:	881b      	ldrh	r3, [r3, #0]
 8011dca:	83bb      	strh	r3, [r7, #28]
 8011dcc:	e037      	b.n	8011e3e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011dce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011dd2:	496d      	ldr	r1, [pc, #436]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	005b      	lsls	r3, r3, #1
 8011dd8:	4413      	add	r3, r2
 8011dda:	00db      	lsls	r3, r3, #3
 8011ddc:	440b      	add	r3, r1
 8011dde:	3312      	adds	r3, #18
 8011de0:	881b      	ldrh	r3, [r3, #0]
 8011de2:	8b7a      	ldrh	r2, [r7, #26]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d82a      	bhi.n	8011e3e <etharp_find_entry+0x18a>
            old_pending = i;
 8011de8:	8c3b      	ldrh	r3, [r7, #32]
 8011dea:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011dec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011df0:	4965      	ldr	r1, [pc, #404]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011df2:	4613      	mov	r3, r2
 8011df4:	005b      	lsls	r3, r3, #1
 8011df6:	4413      	add	r3, r2
 8011df8:	00db      	lsls	r3, r3, #3
 8011dfa:	440b      	add	r3, r1
 8011dfc:	3312      	adds	r3, #18
 8011dfe:	881b      	ldrh	r3, [r3, #0]
 8011e00:	837b      	strh	r3, [r7, #26]
 8011e02:	e01c      	b.n	8011e3e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011e04:	7dfb      	ldrb	r3, [r7, #23]
 8011e06:	2b01      	cmp	r3, #1
 8011e08:	d919      	bls.n	8011e3e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011e0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e0e:	495e      	ldr	r1, [pc, #376]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011e10:	4613      	mov	r3, r2
 8011e12:	005b      	lsls	r3, r3, #1
 8011e14:	4413      	add	r3, r2
 8011e16:	00db      	lsls	r3, r3, #3
 8011e18:	440b      	add	r3, r1
 8011e1a:	3312      	adds	r3, #18
 8011e1c:	881b      	ldrh	r3, [r3, #0]
 8011e1e:	8b3a      	ldrh	r2, [r7, #24]
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d80c      	bhi.n	8011e3e <etharp_find_entry+0x18a>
            old_stable = i;
 8011e24:	8c3b      	ldrh	r3, [r7, #32]
 8011e26:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011e28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e2c:	4956      	ldr	r1, [pc, #344]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011e2e:	4613      	mov	r3, r2
 8011e30:	005b      	lsls	r3, r3, #1
 8011e32:	4413      	add	r3, r2
 8011e34:	00db      	lsls	r3, r3, #3
 8011e36:	440b      	add	r3, r1
 8011e38:	3312      	adds	r3, #18
 8011e3a:	881b      	ldrh	r3, [r3, #0]
 8011e3c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e3e:	8c3b      	ldrh	r3, [r7, #32]
 8011e40:	3301      	adds	r3, #1
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	843b      	strh	r3, [r7, #32]
 8011e46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011e4a:	2b09      	cmp	r3, #9
 8011e4c:	f77f af4c 	ble.w	8011ce8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011e50:	7afb      	ldrb	r3, [r7, #11]
 8011e52:	f003 0302 	and.w	r3, r3, #2
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d108      	bne.n	8011e6c <etharp_find_entry+0x1b8>
 8011e5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011e5e:	2b0a      	cmp	r3, #10
 8011e60:	d107      	bne.n	8011e72 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011e62:	7afb      	ldrb	r3, [r7, #11]
 8011e64:	f003 0301 	and.w	r3, r3, #1
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d102      	bne.n	8011e72 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e70:	e085      	b.n	8011f7e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011e72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011e76:	2b09      	cmp	r3, #9
 8011e78:	dc02      	bgt.n	8011e80 <etharp_find_entry+0x1cc>
    i = empty;
 8011e7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e7c:	843b      	strh	r3, [r7, #32]
 8011e7e:	e039      	b.n	8011ef4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011e80:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011e84:	2b09      	cmp	r3, #9
 8011e86:	dc14      	bgt.n	8011eb2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011e88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e8a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011e8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e90:	493d      	ldr	r1, [pc, #244]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011e92:	4613      	mov	r3, r2
 8011e94:	005b      	lsls	r3, r3, #1
 8011e96:	4413      	add	r3, r2
 8011e98:	00db      	lsls	r3, r3, #3
 8011e9a:	440b      	add	r3, r1
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d018      	beq.n	8011ed4 <etharp_find_entry+0x220>
 8011ea2:	4b3a      	ldr	r3, [pc, #232]	; (8011f8c <etharp_find_entry+0x2d8>)
 8011ea4:	f240 126d 	movw	r2, #365	; 0x16d
 8011ea8:	493b      	ldr	r1, [pc, #236]	; (8011f98 <etharp_find_entry+0x2e4>)
 8011eaa:	483a      	ldr	r0, [pc, #232]	; (8011f94 <etharp_find_entry+0x2e0>)
 8011eac:	f005 ff2a 	bl	8017d04 <iprintf>
 8011eb0:	e010      	b.n	8011ed4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011eb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011eb6:	2b09      	cmp	r3, #9
 8011eb8:	dc02      	bgt.n	8011ec0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011eba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011ebc:	843b      	strh	r3, [r7, #32]
 8011ebe:	e009      	b.n	8011ed4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011ec0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011ec4:	2b09      	cmp	r3, #9
 8011ec6:	dc02      	bgt.n	8011ece <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011ec8:	8bfb      	ldrh	r3, [r7, #30]
 8011eca:	843b      	strh	r3, [r7, #32]
 8011ecc:	e002      	b.n	8011ed4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ed2:	e054      	b.n	8011f7e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011ed4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ed8:	2b09      	cmp	r3, #9
 8011eda:	dd06      	ble.n	8011eea <etharp_find_entry+0x236>
 8011edc:	4b2b      	ldr	r3, [pc, #172]	; (8011f8c <etharp_find_entry+0x2d8>)
 8011ede:	f240 127f 	movw	r2, #383	; 0x17f
 8011ee2:	492e      	ldr	r1, [pc, #184]	; (8011f9c <etharp_find_entry+0x2e8>)
 8011ee4:	482b      	ldr	r0, [pc, #172]	; (8011f94 <etharp_find_entry+0x2e0>)
 8011ee6:	f005 ff0d 	bl	8017d04 <iprintf>
    etharp_free_entry(i);
 8011eea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7ff fe06 	bl	8011b00 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011ef4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ef8:	2b09      	cmp	r3, #9
 8011efa:	dd06      	ble.n	8011f0a <etharp_find_entry+0x256>
 8011efc:	4b23      	ldr	r3, [pc, #140]	; (8011f8c <etharp_find_entry+0x2d8>)
 8011efe:	f240 1283 	movw	r2, #387	; 0x183
 8011f02:	4926      	ldr	r1, [pc, #152]	; (8011f9c <etharp_find_entry+0x2e8>)
 8011f04:	4823      	ldr	r0, [pc, #140]	; (8011f94 <etharp_find_entry+0x2e0>)
 8011f06:	f005 fefd 	bl	8017d04 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011f0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f0e:	491e      	ldr	r1, [pc, #120]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011f10:	4613      	mov	r3, r2
 8011f12:	005b      	lsls	r3, r3, #1
 8011f14:	4413      	add	r3, r2
 8011f16:	00db      	lsls	r3, r3, #3
 8011f18:	440b      	add	r3, r1
 8011f1a:	3314      	adds	r3, #20
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d006      	beq.n	8011f30 <etharp_find_entry+0x27c>
 8011f22:	4b1a      	ldr	r3, [pc, #104]	; (8011f8c <etharp_find_entry+0x2d8>)
 8011f24:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011f28:	491d      	ldr	r1, [pc, #116]	; (8011fa0 <etharp_find_entry+0x2ec>)
 8011f2a:	481a      	ldr	r0, [pc, #104]	; (8011f94 <etharp_find_entry+0x2e0>)
 8011f2c:	f005 feea 	bl	8017d04 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d00b      	beq.n	8011f4e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011f36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	6819      	ldr	r1, [r3, #0]
 8011f3e:	4812      	ldr	r0, [pc, #72]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011f40:	4613      	mov	r3, r2
 8011f42:	005b      	lsls	r3, r3, #1
 8011f44:	4413      	add	r3, r2
 8011f46:	00db      	lsls	r3, r3, #3
 8011f48:	4403      	add	r3, r0
 8011f4a:	3304      	adds	r3, #4
 8011f4c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011f4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f52:	490d      	ldr	r1, [pc, #52]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011f54:	4613      	mov	r3, r2
 8011f56:	005b      	lsls	r3, r3, #1
 8011f58:	4413      	add	r3, r2
 8011f5a:	00db      	lsls	r3, r3, #3
 8011f5c:	440b      	add	r3, r1
 8011f5e:	3312      	adds	r3, #18
 8011f60:	2200      	movs	r2, #0
 8011f62:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011f64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f68:	4907      	ldr	r1, [pc, #28]	; (8011f88 <etharp_find_entry+0x2d4>)
 8011f6a:	4613      	mov	r3, r2
 8011f6c:	005b      	lsls	r3, r3, #1
 8011f6e:	4413      	add	r3, r2
 8011f70:	00db      	lsls	r3, r3, #3
 8011f72:	440b      	add	r3, r1
 8011f74:	3308      	adds	r3, #8
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011f7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3728      	adds	r7, #40	; 0x28
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
 8011f86:	bf00      	nop
 8011f88:	2400b6d8 	.word	0x2400b6d8
 8011f8c:	0801ce7c 	.word	0x0801ce7c
 8011f90:	0801ceb4 	.word	0x0801ceb4
 8011f94:	0801cef4 	.word	0x0801cef4
 8011f98:	0801cf1c 	.word	0x0801cf1c
 8011f9c:	0801cf34 	.word	0x0801cf34
 8011fa0:	0801cf48 	.word	0x0801cf48

08011fa4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b088      	sub	sp, #32
 8011fa8:	af02      	add	r7, sp, #8
 8011faa:	60f8      	str	r0, [r7, #12]
 8011fac:	60b9      	str	r1, [r7, #8]
 8011fae:	607a      	str	r2, [r7, #4]
 8011fb0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011fb8:	2b06      	cmp	r3, #6
 8011fba:	d006      	beq.n	8011fca <etharp_update_arp_entry+0x26>
 8011fbc:	4b48      	ldr	r3, [pc, #288]	; (80120e0 <etharp_update_arp_entry+0x13c>)
 8011fbe:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011fc2:	4948      	ldr	r1, [pc, #288]	; (80120e4 <etharp_update_arp_entry+0x140>)
 8011fc4:	4848      	ldr	r0, [pc, #288]	; (80120e8 <etharp_update_arp_entry+0x144>)
 8011fc6:	f005 fe9d 	bl	8017d04 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d012      	beq.n	8011ff6 <etharp_update_arp_entry+0x52>
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d00e      	beq.n	8011ff6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011fd8:	68bb      	ldr	r3, [r7, #8]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	68f9      	ldr	r1, [r7, #12]
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f001 f8fe 	bl	80131e0 <ip4_addr_isbroadcast_u32>
 8011fe4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d105      	bne.n	8011ff6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011ff2:	2be0      	cmp	r3, #224	; 0xe0
 8011ff4:	d102      	bne.n	8011ffc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011ff6:	f06f 030f 	mvn.w	r3, #15
 8011ffa:	e06c      	b.n	80120d6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011ffc:	78fb      	ldrb	r3, [r7, #3]
 8011ffe:	68fa      	ldr	r2, [r7, #12]
 8012000:	4619      	mov	r1, r3
 8012002:	68b8      	ldr	r0, [r7, #8]
 8012004:	f7ff fe56 	bl	8011cb4 <etharp_find_entry>
 8012008:	4603      	mov	r3, r0
 801200a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801200c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012010:	2b00      	cmp	r3, #0
 8012012:	da02      	bge.n	801201a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012014:	8afb      	ldrh	r3, [r7, #22]
 8012016:	b25b      	sxtb	r3, r3
 8012018:	e05d      	b.n	80120d6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801201a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801201e:	4933      	ldr	r1, [pc, #204]	; (80120ec <etharp_update_arp_entry+0x148>)
 8012020:	4613      	mov	r3, r2
 8012022:	005b      	lsls	r3, r3, #1
 8012024:	4413      	add	r3, r2
 8012026:	00db      	lsls	r3, r3, #3
 8012028:	440b      	add	r3, r1
 801202a:	3314      	adds	r3, #20
 801202c:	2202      	movs	r2, #2
 801202e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012030:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012034:	492d      	ldr	r1, [pc, #180]	; (80120ec <etharp_update_arp_entry+0x148>)
 8012036:	4613      	mov	r3, r2
 8012038:	005b      	lsls	r3, r3, #1
 801203a:	4413      	add	r3, r2
 801203c:	00db      	lsls	r3, r3, #3
 801203e:	440b      	add	r3, r1
 8012040:	3308      	adds	r3, #8
 8012042:	68fa      	ldr	r2, [r7, #12]
 8012044:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012046:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801204a:	4613      	mov	r3, r2
 801204c:	005b      	lsls	r3, r3, #1
 801204e:	4413      	add	r3, r2
 8012050:	00db      	lsls	r3, r3, #3
 8012052:	3308      	adds	r3, #8
 8012054:	4a25      	ldr	r2, [pc, #148]	; (80120ec <etharp_update_arp_entry+0x148>)
 8012056:	4413      	add	r3, r2
 8012058:	3304      	adds	r3, #4
 801205a:	2206      	movs	r2, #6
 801205c:	6879      	ldr	r1, [r7, #4]
 801205e:	4618      	mov	r0, r3
 8012060:	f005 fd76 	bl	8017b50 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012064:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012068:	4920      	ldr	r1, [pc, #128]	; (80120ec <etharp_update_arp_entry+0x148>)
 801206a:	4613      	mov	r3, r2
 801206c:	005b      	lsls	r3, r3, #1
 801206e:	4413      	add	r3, r2
 8012070:	00db      	lsls	r3, r3, #3
 8012072:	440b      	add	r3, r1
 8012074:	3312      	adds	r3, #18
 8012076:	2200      	movs	r2, #0
 8012078:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801207a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801207e:	491b      	ldr	r1, [pc, #108]	; (80120ec <etharp_update_arp_entry+0x148>)
 8012080:	4613      	mov	r3, r2
 8012082:	005b      	lsls	r3, r3, #1
 8012084:	4413      	add	r3, r2
 8012086:	00db      	lsls	r3, r3, #3
 8012088:	440b      	add	r3, r1
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d021      	beq.n	80120d4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012090:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012094:	4915      	ldr	r1, [pc, #84]	; (80120ec <etharp_update_arp_entry+0x148>)
 8012096:	4613      	mov	r3, r2
 8012098:	005b      	lsls	r3, r3, #1
 801209a:	4413      	add	r3, r2
 801209c:	00db      	lsls	r3, r3, #3
 801209e:	440b      	add	r3, r1
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80120a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80120a8:	4910      	ldr	r1, [pc, #64]	; (80120ec <etharp_update_arp_entry+0x148>)
 80120aa:	4613      	mov	r3, r2
 80120ac:	005b      	lsls	r3, r3, #1
 80120ae:	4413      	add	r3, r2
 80120b0:	00db      	lsls	r3, r3, #3
 80120b2:	440b      	add	r3, r1
 80120b4:	2200      	movs	r2, #0
 80120b6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80120be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80120c2:	9300      	str	r3, [sp, #0]
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6939      	ldr	r1, [r7, #16]
 80120c8:	68f8      	ldr	r0, [r7, #12]
 80120ca:	f001 ff91 	bl	8013ff0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80120ce:	6938      	ldr	r0, [r7, #16]
 80120d0:	f7f9 fa76 	bl	800b5c0 <pbuf_free>
  }
  return ERR_OK;
 80120d4:	2300      	movs	r3, #0
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3718      	adds	r7, #24
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
 80120de:	bf00      	nop
 80120e0:	0801ce7c 	.word	0x0801ce7c
 80120e4:	0801cf74 	.word	0x0801cf74
 80120e8:	0801cef4 	.word	0x0801cef4
 80120ec:	2400b6d8 	.word	0x2400b6d8

080120f0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b084      	sub	sp, #16
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80120f8:	2300      	movs	r3, #0
 80120fa:	60fb      	str	r3, [r7, #12]
 80120fc:	e01e      	b.n	801213c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80120fe:	4913      	ldr	r1, [pc, #76]	; (801214c <etharp_cleanup_netif+0x5c>)
 8012100:	68fa      	ldr	r2, [r7, #12]
 8012102:	4613      	mov	r3, r2
 8012104:	005b      	lsls	r3, r3, #1
 8012106:	4413      	add	r3, r2
 8012108:	00db      	lsls	r3, r3, #3
 801210a:	440b      	add	r3, r1
 801210c:	3314      	adds	r3, #20
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012112:	7afb      	ldrb	r3, [r7, #11]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d00e      	beq.n	8012136 <etharp_cleanup_netif+0x46>
 8012118:	490c      	ldr	r1, [pc, #48]	; (801214c <etharp_cleanup_netif+0x5c>)
 801211a:	68fa      	ldr	r2, [r7, #12]
 801211c:	4613      	mov	r3, r2
 801211e:	005b      	lsls	r3, r3, #1
 8012120:	4413      	add	r3, r2
 8012122:	00db      	lsls	r3, r3, #3
 8012124:	440b      	add	r3, r1
 8012126:	3308      	adds	r3, #8
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	687a      	ldr	r2, [r7, #4]
 801212c:	429a      	cmp	r2, r3
 801212e:	d102      	bne.n	8012136 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012130:	68f8      	ldr	r0, [r7, #12]
 8012132:	f7ff fce5 	bl	8011b00 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	3301      	adds	r3, #1
 801213a:	60fb      	str	r3, [r7, #12]
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	2b09      	cmp	r3, #9
 8012140:	dddd      	ble.n	80120fe <etharp_cleanup_netif+0xe>
    }
  }
}
 8012142:	bf00      	nop
 8012144:	bf00      	nop
 8012146:	3710      	adds	r7, #16
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}
 801214c:	2400b6d8 	.word	0x2400b6d8

08012150 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012150:	b5b0      	push	{r4, r5, r7, lr}
 8012152:	b08a      	sub	sp, #40	; 0x28
 8012154:	af04      	add	r7, sp, #16
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d107      	bne.n	8012170 <etharp_input+0x20>
 8012160:	4b3d      	ldr	r3, [pc, #244]	; (8012258 <etharp_input+0x108>)
 8012162:	f240 228a 	movw	r2, #650	; 0x28a
 8012166:	493d      	ldr	r1, [pc, #244]	; (801225c <etharp_input+0x10c>)
 8012168:	483d      	ldr	r0, [pc, #244]	; (8012260 <etharp_input+0x110>)
 801216a:	f005 fdcb 	bl	8017d04 <iprintf>
 801216e:	e06f      	b.n	8012250 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	881b      	ldrh	r3, [r3, #0]
 801217a:	b29b      	uxth	r3, r3
 801217c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012180:	d10c      	bne.n	801219c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012182:	693b      	ldr	r3, [r7, #16]
 8012184:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012186:	2b06      	cmp	r3, #6
 8012188:	d108      	bne.n	801219c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801218a:	693b      	ldr	r3, [r7, #16]
 801218c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801218e:	2b04      	cmp	r3, #4
 8012190:	d104      	bne.n	801219c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	885b      	ldrh	r3, [r3, #2]
 8012196:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012198:	2b08      	cmp	r3, #8
 801219a:	d003      	beq.n	80121a4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f7f9 fa0f 	bl	800b5c0 <pbuf_free>
    return;
 80121a2:	e055      	b.n	8012250 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	330e      	adds	r3, #14
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80121ac:	693b      	ldr	r3, [r7, #16]
 80121ae:	3318      	adds	r3, #24
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	3304      	adds	r3, #4
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d102      	bne.n	80121c4 <etharp_input+0x74>
    for_us = 0;
 80121be:	2300      	movs	r3, #0
 80121c0:	75fb      	strb	r3, [r7, #23]
 80121c2:	e009      	b.n	80121d8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80121c4:	68ba      	ldr	r2, [r7, #8]
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	3304      	adds	r3, #4
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	429a      	cmp	r2, r3
 80121ce:	bf0c      	ite	eq
 80121d0:	2301      	moveq	r3, #1
 80121d2:	2300      	movne	r3, #0
 80121d4:	b2db      	uxtb	r3, r3
 80121d6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	f103 0208 	add.w	r2, r3, #8
 80121de:	7dfb      	ldrb	r3, [r7, #23]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d001      	beq.n	80121e8 <etharp_input+0x98>
 80121e4:	2301      	movs	r3, #1
 80121e6:	e000      	b.n	80121ea <etharp_input+0x9a>
 80121e8:	2302      	movs	r3, #2
 80121ea:	f107 010c 	add.w	r1, r7, #12
 80121ee:	6838      	ldr	r0, [r7, #0]
 80121f0:	f7ff fed8 	bl	8011fa4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	88db      	ldrh	r3, [r3, #6]
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80121fe:	d003      	beq.n	8012208 <etharp_input+0xb8>
 8012200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012204:	d01e      	beq.n	8012244 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012206:	e020      	b.n	801224a <etharp_input+0xfa>
      if (for_us) {
 8012208:	7dfb      	ldrb	r3, [r7, #23]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d01c      	beq.n	8012248 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012224:	693a      	ldr	r2, [r7, #16]
 8012226:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012228:	2102      	movs	r1, #2
 801222a:	9103      	str	r1, [sp, #12]
 801222c:	f107 010c 	add.w	r1, r7, #12
 8012230:	9102      	str	r1, [sp, #8]
 8012232:	9201      	str	r2, [sp, #4]
 8012234:	9300      	str	r3, [sp, #0]
 8012236:	462b      	mov	r3, r5
 8012238:	4622      	mov	r2, r4
 801223a:	4601      	mov	r1, r0
 801223c:	6838      	ldr	r0, [r7, #0]
 801223e:	f000 faeb 	bl	8012818 <etharp_raw>
      break;
 8012242:	e001      	b.n	8012248 <etharp_input+0xf8>
      break;
 8012244:	bf00      	nop
 8012246:	e000      	b.n	801224a <etharp_input+0xfa>
      break;
 8012248:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f7f9 f9b8 	bl	800b5c0 <pbuf_free>
}
 8012250:	3718      	adds	r7, #24
 8012252:	46bd      	mov	sp, r7
 8012254:	bdb0      	pop	{r4, r5, r7, pc}
 8012256:	bf00      	nop
 8012258:	0801ce7c 	.word	0x0801ce7c
 801225c:	0801cfcc 	.word	0x0801cfcc
 8012260:	0801cef4 	.word	0x0801cef4

08012264 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b086      	sub	sp, #24
 8012268:	af02      	add	r7, sp, #8
 801226a:	60f8      	str	r0, [r7, #12]
 801226c:	60b9      	str	r1, [r7, #8]
 801226e:	4613      	mov	r3, r2
 8012270:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012272:	79fa      	ldrb	r2, [r7, #7]
 8012274:	4944      	ldr	r1, [pc, #272]	; (8012388 <etharp_output_to_arp_index+0x124>)
 8012276:	4613      	mov	r3, r2
 8012278:	005b      	lsls	r3, r3, #1
 801227a:	4413      	add	r3, r2
 801227c:	00db      	lsls	r3, r3, #3
 801227e:	440b      	add	r3, r1
 8012280:	3314      	adds	r3, #20
 8012282:	781b      	ldrb	r3, [r3, #0]
 8012284:	2b01      	cmp	r3, #1
 8012286:	d806      	bhi.n	8012296 <etharp_output_to_arp_index+0x32>
 8012288:	4b40      	ldr	r3, [pc, #256]	; (801238c <etharp_output_to_arp_index+0x128>)
 801228a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801228e:	4940      	ldr	r1, [pc, #256]	; (8012390 <etharp_output_to_arp_index+0x12c>)
 8012290:	4840      	ldr	r0, [pc, #256]	; (8012394 <etharp_output_to_arp_index+0x130>)
 8012292:	f005 fd37 	bl	8017d04 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012296:	79fa      	ldrb	r2, [r7, #7]
 8012298:	493b      	ldr	r1, [pc, #236]	; (8012388 <etharp_output_to_arp_index+0x124>)
 801229a:	4613      	mov	r3, r2
 801229c:	005b      	lsls	r3, r3, #1
 801229e:	4413      	add	r3, r2
 80122a0:	00db      	lsls	r3, r3, #3
 80122a2:	440b      	add	r3, r1
 80122a4:	3314      	adds	r3, #20
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	2b02      	cmp	r3, #2
 80122aa:	d153      	bne.n	8012354 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80122ac:	79fa      	ldrb	r2, [r7, #7]
 80122ae:	4936      	ldr	r1, [pc, #216]	; (8012388 <etharp_output_to_arp_index+0x124>)
 80122b0:	4613      	mov	r3, r2
 80122b2:	005b      	lsls	r3, r3, #1
 80122b4:	4413      	add	r3, r2
 80122b6:	00db      	lsls	r3, r3, #3
 80122b8:	440b      	add	r3, r1
 80122ba:	3312      	adds	r3, #18
 80122bc:	881b      	ldrh	r3, [r3, #0]
 80122be:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80122c2:	d919      	bls.n	80122f8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80122c4:	79fa      	ldrb	r2, [r7, #7]
 80122c6:	4613      	mov	r3, r2
 80122c8:	005b      	lsls	r3, r3, #1
 80122ca:	4413      	add	r3, r2
 80122cc:	00db      	lsls	r3, r3, #3
 80122ce:	4a2e      	ldr	r2, [pc, #184]	; (8012388 <etharp_output_to_arp_index+0x124>)
 80122d0:	4413      	add	r3, r2
 80122d2:	3304      	adds	r3, #4
 80122d4:	4619      	mov	r1, r3
 80122d6:	68f8      	ldr	r0, [r7, #12]
 80122d8:	f000 fb4c 	bl	8012974 <etharp_request>
 80122dc:	4603      	mov	r3, r0
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d138      	bne.n	8012354 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80122e2:	79fa      	ldrb	r2, [r7, #7]
 80122e4:	4928      	ldr	r1, [pc, #160]	; (8012388 <etharp_output_to_arp_index+0x124>)
 80122e6:	4613      	mov	r3, r2
 80122e8:	005b      	lsls	r3, r3, #1
 80122ea:	4413      	add	r3, r2
 80122ec:	00db      	lsls	r3, r3, #3
 80122ee:	440b      	add	r3, r1
 80122f0:	3314      	adds	r3, #20
 80122f2:	2203      	movs	r2, #3
 80122f4:	701a      	strb	r2, [r3, #0]
 80122f6:	e02d      	b.n	8012354 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80122f8:	79fa      	ldrb	r2, [r7, #7]
 80122fa:	4923      	ldr	r1, [pc, #140]	; (8012388 <etharp_output_to_arp_index+0x124>)
 80122fc:	4613      	mov	r3, r2
 80122fe:	005b      	lsls	r3, r3, #1
 8012300:	4413      	add	r3, r2
 8012302:	00db      	lsls	r3, r3, #3
 8012304:	440b      	add	r3, r1
 8012306:	3312      	adds	r3, #18
 8012308:	881b      	ldrh	r3, [r3, #0]
 801230a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801230e:	d321      	bcc.n	8012354 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012310:	79fa      	ldrb	r2, [r7, #7]
 8012312:	4613      	mov	r3, r2
 8012314:	005b      	lsls	r3, r3, #1
 8012316:	4413      	add	r3, r2
 8012318:	00db      	lsls	r3, r3, #3
 801231a:	4a1b      	ldr	r2, [pc, #108]	; (8012388 <etharp_output_to_arp_index+0x124>)
 801231c:	4413      	add	r3, r2
 801231e:	1d19      	adds	r1, r3, #4
 8012320:	79fa      	ldrb	r2, [r7, #7]
 8012322:	4613      	mov	r3, r2
 8012324:	005b      	lsls	r3, r3, #1
 8012326:	4413      	add	r3, r2
 8012328:	00db      	lsls	r3, r3, #3
 801232a:	3308      	adds	r3, #8
 801232c:	4a16      	ldr	r2, [pc, #88]	; (8012388 <etharp_output_to_arp_index+0x124>)
 801232e:	4413      	add	r3, r2
 8012330:	3304      	adds	r3, #4
 8012332:	461a      	mov	r2, r3
 8012334:	68f8      	ldr	r0, [r7, #12]
 8012336:	f000 fafb 	bl	8012930 <etharp_request_dst>
 801233a:	4603      	mov	r3, r0
 801233c:	2b00      	cmp	r3, #0
 801233e:	d109      	bne.n	8012354 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012340:	79fa      	ldrb	r2, [r7, #7]
 8012342:	4911      	ldr	r1, [pc, #68]	; (8012388 <etharp_output_to_arp_index+0x124>)
 8012344:	4613      	mov	r3, r2
 8012346:	005b      	lsls	r3, r3, #1
 8012348:	4413      	add	r3, r2
 801234a:	00db      	lsls	r3, r3, #3
 801234c:	440b      	add	r3, r1
 801234e:	3314      	adds	r3, #20
 8012350:	2203      	movs	r2, #3
 8012352:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801235a:	79fa      	ldrb	r2, [r7, #7]
 801235c:	4613      	mov	r3, r2
 801235e:	005b      	lsls	r3, r3, #1
 8012360:	4413      	add	r3, r2
 8012362:	00db      	lsls	r3, r3, #3
 8012364:	3308      	adds	r3, #8
 8012366:	4a08      	ldr	r2, [pc, #32]	; (8012388 <etharp_output_to_arp_index+0x124>)
 8012368:	4413      	add	r3, r2
 801236a:	3304      	adds	r3, #4
 801236c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012370:	9200      	str	r2, [sp, #0]
 8012372:	460a      	mov	r2, r1
 8012374:	68b9      	ldr	r1, [r7, #8]
 8012376:	68f8      	ldr	r0, [r7, #12]
 8012378:	f001 fe3a 	bl	8013ff0 <ethernet_output>
 801237c:	4603      	mov	r3, r0
}
 801237e:	4618      	mov	r0, r3
 8012380:	3710      	adds	r7, #16
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}
 8012386:	bf00      	nop
 8012388:	2400b6d8 	.word	0x2400b6d8
 801238c:	0801ce7c 	.word	0x0801ce7c
 8012390:	0801cfec 	.word	0x0801cfec
 8012394:	0801cef4 	.word	0x0801cef4

08012398 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b08a      	sub	sp, #40	; 0x28
 801239c:	af02      	add	r7, sp, #8
 801239e:	60f8      	str	r0, [r7, #12]
 80123a0:	60b9      	str	r1, [r7, #8]
 80123a2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d106      	bne.n	80123bc <etharp_output+0x24>
 80123ae:	4b73      	ldr	r3, [pc, #460]	; (801257c <etharp_output+0x1e4>)
 80123b0:	f240 321e 	movw	r2, #798	; 0x31e
 80123b4:	4972      	ldr	r1, [pc, #456]	; (8012580 <etharp_output+0x1e8>)
 80123b6:	4873      	ldr	r0, [pc, #460]	; (8012584 <etharp_output+0x1ec>)
 80123b8:	f005 fca4 	bl	8017d04 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d106      	bne.n	80123d0 <etharp_output+0x38>
 80123c2:	4b6e      	ldr	r3, [pc, #440]	; (801257c <etharp_output+0x1e4>)
 80123c4:	f240 321f 	movw	r2, #799	; 0x31f
 80123c8:	496f      	ldr	r1, [pc, #444]	; (8012588 <etharp_output+0x1f0>)
 80123ca:	486e      	ldr	r0, [pc, #440]	; (8012584 <etharp_output+0x1ec>)
 80123cc:	f005 fc9a 	bl	8017d04 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d106      	bne.n	80123e4 <etharp_output+0x4c>
 80123d6:	4b69      	ldr	r3, [pc, #420]	; (801257c <etharp_output+0x1e4>)
 80123d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80123dc:	496b      	ldr	r1, [pc, #428]	; (801258c <etharp_output+0x1f4>)
 80123de:	4869      	ldr	r0, [pc, #420]	; (8012584 <etharp_output+0x1ec>)
 80123e0:	f005 fc90 	bl	8017d04 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	68f9      	ldr	r1, [r7, #12]
 80123ea:	4618      	mov	r0, r3
 80123ec:	f000 fef8 	bl	80131e0 <ip4_addr_isbroadcast_u32>
 80123f0:	4603      	mov	r3, r0
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d002      	beq.n	80123fc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80123f6:	4b66      	ldr	r3, [pc, #408]	; (8012590 <etharp_output+0x1f8>)
 80123f8:	61fb      	str	r3, [r7, #28]
 80123fa:	e0af      	b.n	801255c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012404:	2be0      	cmp	r3, #224	; 0xe0
 8012406:	d118      	bne.n	801243a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012408:	2301      	movs	r3, #1
 801240a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801240c:	2300      	movs	r3, #0
 801240e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012410:	235e      	movs	r3, #94	; 0x5e
 8012412:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	3301      	adds	r3, #1
 8012418:	781b      	ldrb	r3, [r3, #0]
 801241a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801241e:	b2db      	uxtb	r3, r3
 8012420:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	3302      	adds	r3, #2
 8012426:	781b      	ldrb	r3, [r3, #0]
 8012428:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	3303      	adds	r3, #3
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012432:	f107 0310 	add.w	r3, r7, #16
 8012436:	61fb      	str	r3, [r7, #28]
 8012438:	e090      	b.n	801255c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681a      	ldr	r2, [r3, #0]
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	3304      	adds	r3, #4
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	405a      	eors	r2, r3
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	3308      	adds	r3, #8
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	4013      	ands	r3, r2
 801244e:	2b00      	cmp	r3, #0
 8012450:	d012      	beq.n	8012478 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012458:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801245c:	4293      	cmp	r3, r2
 801245e:	d00b      	beq.n	8012478 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	330c      	adds	r3, #12
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d003      	beq.n	8012472 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	330c      	adds	r3, #12
 801246e:	61bb      	str	r3, [r7, #24]
 8012470:	e002      	b.n	8012478 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012472:	f06f 0303 	mvn.w	r3, #3
 8012476:	e07d      	b.n	8012574 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012478:	4b46      	ldr	r3, [pc, #280]	; (8012594 <etharp_output+0x1fc>)
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	4619      	mov	r1, r3
 801247e:	4a46      	ldr	r2, [pc, #280]	; (8012598 <etharp_output+0x200>)
 8012480:	460b      	mov	r3, r1
 8012482:	005b      	lsls	r3, r3, #1
 8012484:	440b      	add	r3, r1
 8012486:	00db      	lsls	r3, r3, #3
 8012488:	4413      	add	r3, r2
 801248a:	3314      	adds	r3, #20
 801248c:	781b      	ldrb	r3, [r3, #0]
 801248e:	2b01      	cmp	r3, #1
 8012490:	d925      	bls.n	80124de <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012492:	4b40      	ldr	r3, [pc, #256]	; (8012594 <etharp_output+0x1fc>)
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	4619      	mov	r1, r3
 8012498:	4a3f      	ldr	r2, [pc, #252]	; (8012598 <etharp_output+0x200>)
 801249a:	460b      	mov	r3, r1
 801249c:	005b      	lsls	r3, r3, #1
 801249e:	440b      	add	r3, r1
 80124a0:	00db      	lsls	r3, r3, #3
 80124a2:	4413      	add	r3, r2
 80124a4:	3308      	adds	r3, #8
 80124a6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80124a8:	68fa      	ldr	r2, [r7, #12]
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d117      	bne.n	80124de <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80124ae:	69bb      	ldr	r3, [r7, #24]
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	4b38      	ldr	r3, [pc, #224]	; (8012594 <etharp_output+0x1fc>)
 80124b4:	781b      	ldrb	r3, [r3, #0]
 80124b6:	4618      	mov	r0, r3
 80124b8:	4937      	ldr	r1, [pc, #220]	; (8012598 <etharp_output+0x200>)
 80124ba:	4603      	mov	r3, r0
 80124bc:	005b      	lsls	r3, r3, #1
 80124be:	4403      	add	r3, r0
 80124c0:	00db      	lsls	r3, r3, #3
 80124c2:	440b      	add	r3, r1
 80124c4:	3304      	adds	r3, #4
 80124c6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d108      	bne.n	80124de <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80124cc:	4b31      	ldr	r3, [pc, #196]	; (8012594 <etharp_output+0x1fc>)
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	461a      	mov	r2, r3
 80124d2:	68b9      	ldr	r1, [r7, #8]
 80124d4:	68f8      	ldr	r0, [r7, #12]
 80124d6:	f7ff fec5 	bl	8012264 <etharp_output_to_arp_index>
 80124da:	4603      	mov	r3, r0
 80124dc:	e04a      	b.n	8012574 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80124de:	2300      	movs	r3, #0
 80124e0:	75fb      	strb	r3, [r7, #23]
 80124e2:	e031      	b.n	8012548 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80124e4:	7dfa      	ldrb	r2, [r7, #23]
 80124e6:	492c      	ldr	r1, [pc, #176]	; (8012598 <etharp_output+0x200>)
 80124e8:	4613      	mov	r3, r2
 80124ea:	005b      	lsls	r3, r3, #1
 80124ec:	4413      	add	r3, r2
 80124ee:	00db      	lsls	r3, r3, #3
 80124f0:	440b      	add	r3, r1
 80124f2:	3314      	adds	r3, #20
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d923      	bls.n	8012542 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80124fa:	7dfa      	ldrb	r2, [r7, #23]
 80124fc:	4926      	ldr	r1, [pc, #152]	; (8012598 <etharp_output+0x200>)
 80124fe:	4613      	mov	r3, r2
 8012500:	005b      	lsls	r3, r3, #1
 8012502:	4413      	add	r3, r2
 8012504:	00db      	lsls	r3, r3, #3
 8012506:	440b      	add	r3, r1
 8012508:	3308      	adds	r3, #8
 801250a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801250c:	68fa      	ldr	r2, [r7, #12]
 801250e:	429a      	cmp	r2, r3
 8012510:	d117      	bne.n	8012542 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	6819      	ldr	r1, [r3, #0]
 8012516:	7dfa      	ldrb	r2, [r7, #23]
 8012518:	481f      	ldr	r0, [pc, #124]	; (8012598 <etharp_output+0x200>)
 801251a:	4613      	mov	r3, r2
 801251c:	005b      	lsls	r3, r3, #1
 801251e:	4413      	add	r3, r2
 8012520:	00db      	lsls	r3, r3, #3
 8012522:	4403      	add	r3, r0
 8012524:	3304      	adds	r3, #4
 8012526:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012528:	4299      	cmp	r1, r3
 801252a:	d10a      	bne.n	8012542 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801252c:	4a19      	ldr	r2, [pc, #100]	; (8012594 <etharp_output+0x1fc>)
 801252e:	7dfb      	ldrb	r3, [r7, #23]
 8012530:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012532:	7dfb      	ldrb	r3, [r7, #23]
 8012534:	461a      	mov	r2, r3
 8012536:	68b9      	ldr	r1, [r7, #8]
 8012538:	68f8      	ldr	r0, [r7, #12]
 801253a:	f7ff fe93 	bl	8012264 <etharp_output_to_arp_index>
 801253e:	4603      	mov	r3, r0
 8012540:	e018      	b.n	8012574 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012542:	7dfb      	ldrb	r3, [r7, #23]
 8012544:	3301      	adds	r3, #1
 8012546:	75fb      	strb	r3, [r7, #23]
 8012548:	7dfb      	ldrb	r3, [r7, #23]
 801254a:	2b09      	cmp	r3, #9
 801254c:	d9ca      	bls.n	80124e4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801254e:	68ba      	ldr	r2, [r7, #8]
 8012550:	69b9      	ldr	r1, [r7, #24]
 8012552:	68f8      	ldr	r0, [r7, #12]
 8012554:	f000 f822 	bl	801259c <etharp_query>
 8012558:	4603      	mov	r3, r0
 801255a:	e00b      	b.n	8012574 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012562:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012566:	9300      	str	r3, [sp, #0]
 8012568:	69fb      	ldr	r3, [r7, #28]
 801256a:	68b9      	ldr	r1, [r7, #8]
 801256c:	68f8      	ldr	r0, [r7, #12]
 801256e:	f001 fd3f 	bl	8013ff0 <ethernet_output>
 8012572:	4603      	mov	r3, r0
}
 8012574:	4618      	mov	r0, r3
 8012576:	3720      	adds	r7, #32
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}
 801257c:	0801ce7c 	.word	0x0801ce7c
 8012580:	0801cfcc 	.word	0x0801cfcc
 8012584:	0801cef4 	.word	0x0801cef4
 8012588:	0801d01c 	.word	0x0801d01c
 801258c:	0801cfbc 	.word	0x0801cfbc
 8012590:	0801d934 	.word	0x0801d934
 8012594:	2400b7c8 	.word	0x2400b7c8
 8012598:	2400b6d8 	.word	0x2400b6d8

0801259c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b08c      	sub	sp, #48	; 0x30
 80125a0:	af02      	add	r7, sp, #8
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	60b9      	str	r1, [r7, #8]
 80125a6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	3326      	adds	r3, #38	; 0x26
 80125ac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80125ae:	23ff      	movs	r3, #255	; 0xff
 80125b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80125b4:	2300      	movs	r3, #0
 80125b6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	68f9      	ldr	r1, [r7, #12]
 80125be:	4618      	mov	r0, r3
 80125c0:	f000 fe0e 	bl	80131e0 <ip4_addr_isbroadcast_u32>
 80125c4:	4603      	mov	r3, r0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d10c      	bne.n	80125e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80125d2:	2be0      	cmp	r3, #224	; 0xe0
 80125d4:	d006      	beq.n	80125e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d003      	beq.n	80125e4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d102      	bne.n	80125ea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80125e4:	f06f 030f 	mvn.w	r3, #15
 80125e8:	e101      	b.n	80127ee <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80125ea:	68fa      	ldr	r2, [r7, #12]
 80125ec:	2101      	movs	r1, #1
 80125ee:	68b8      	ldr	r0, [r7, #8]
 80125f0:	f7ff fb60 	bl	8011cb4 <etharp_find_entry>
 80125f4:	4603      	mov	r3, r0
 80125f6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80125f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	da02      	bge.n	8012606 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012600:	8a7b      	ldrh	r3, [r7, #18]
 8012602:	b25b      	sxtb	r3, r3
 8012604:	e0f3      	b.n	80127ee <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012606:	8a7b      	ldrh	r3, [r7, #18]
 8012608:	2b7e      	cmp	r3, #126	; 0x7e
 801260a:	d906      	bls.n	801261a <etharp_query+0x7e>
 801260c:	4b7a      	ldr	r3, [pc, #488]	; (80127f8 <etharp_query+0x25c>)
 801260e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012612:	497a      	ldr	r1, [pc, #488]	; (80127fc <etharp_query+0x260>)
 8012614:	487a      	ldr	r0, [pc, #488]	; (8012800 <etharp_query+0x264>)
 8012616:	f005 fb75 	bl	8017d04 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801261a:	8a7b      	ldrh	r3, [r7, #18]
 801261c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801261e:	7c7a      	ldrb	r2, [r7, #17]
 8012620:	4978      	ldr	r1, [pc, #480]	; (8012804 <etharp_query+0x268>)
 8012622:	4613      	mov	r3, r2
 8012624:	005b      	lsls	r3, r3, #1
 8012626:	4413      	add	r3, r2
 8012628:	00db      	lsls	r3, r3, #3
 801262a:	440b      	add	r3, r1
 801262c:	3314      	adds	r3, #20
 801262e:	781b      	ldrb	r3, [r3, #0]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d115      	bne.n	8012660 <etharp_query+0xc4>
    is_new_entry = 1;
 8012634:	2301      	movs	r3, #1
 8012636:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012638:	7c7a      	ldrb	r2, [r7, #17]
 801263a:	4972      	ldr	r1, [pc, #456]	; (8012804 <etharp_query+0x268>)
 801263c:	4613      	mov	r3, r2
 801263e:	005b      	lsls	r3, r3, #1
 8012640:	4413      	add	r3, r2
 8012642:	00db      	lsls	r3, r3, #3
 8012644:	440b      	add	r3, r1
 8012646:	3314      	adds	r3, #20
 8012648:	2201      	movs	r2, #1
 801264a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801264c:	7c7a      	ldrb	r2, [r7, #17]
 801264e:	496d      	ldr	r1, [pc, #436]	; (8012804 <etharp_query+0x268>)
 8012650:	4613      	mov	r3, r2
 8012652:	005b      	lsls	r3, r3, #1
 8012654:	4413      	add	r3, r2
 8012656:	00db      	lsls	r3, r3, #3
 8012658:	440b      	add	r3, r1
 801265a:	3308      	adds	r3, #8
 801265c:	68fa      	ldr	r2, [r7, #12]
 801265e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012660:	7c7a      	ldrb	r2, [r7, #17]
 8012662:	4968      	ldr	r1, [pc, #416]	; (8012804 <etharp_query+0x268>)
 8012664:	4613      	mov	r3, r2
 8012666:	005b      	lsls	r3, r3, #1
 8012668:	4413      	add	r3, r2
 801266a:	00db      	lsls	r3, r3, #3
 801266c:	440b      	add	r3, r1
 801266e:	3314      	adds	r3, #20
 8012670:	781b      	ldrb	r3, [r3, #0]
 8012672:	2b01      	cmp	r3, #1
 8012674:	d011      	beq.n	801269a <etharp_query+0xfe>
 8012676:	7c7a      	ldrb	r2, [r7, #17]
 8012678:	4962      	ldr	r1, [pc, #392]	; (8012804 <etharp_query+0x268>)
 801267a:	4613      	mov	r3, r2
 801267c:	005b      	lsls	r3, r3, #1
 801267e:	4413      	add	r3, r2
 8012680:	00db      	lsls	r3, r3, #3
 8012682:	440b      	add	r3, r1
 8012684:	3314      	adds	r3, #20
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	2b01      	cmp	r3, #1
 801268a:	d806      	bhi.n	801269a <etharp_query+0xfe>
 801268c:	4b5a      	ldr	r3, [pc, #360]	; (80127f8 <etharp_query+0x25c>)
 801268e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012692:	495d      	ldr	r1, [pc, #372]	; (8012808 <etharp_query+0x26c>)
 8012694:	485a      	ldr	r0, [pc, #360]	; (8012800 <etharp_query+0x264>)
 8012696:	f005 fb35 	bl	8017d04 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801269a:	6a3b      	ldr	r3, [r7, #32]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d102      	bne.n	80126a6 <etharp_query+0x10a>
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d10c      	bne.n	80126c0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80126a6:	68b9      	ldr	r1, [r7, #8]
 80126a8:	68f8      	ldr	r0, [r7, #12]
 80126aa:	f000 f963 	bl	8012974 <etharp_request>
 80126ae:	4603      	mov	r3, r0
 80126b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d102      	bne.n	80126c0 <etharp_query+0x124>
      return result;
 80126ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80126be:	e096      	b.n	80127ee <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d106      	bne.n	80126d4 <etharp_query+0x138>
 80126c6:	4b4c      	ldr	r3, [pc, #304]	; (80127f8 <etharp_query+0x25c>)
 80126c8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80126cc:	494f      	ldr	r1, [pc, #316]	; (801280c <etharp_query+0x270>)
 80126ce:	484c      	ldr	r0, [pc, #304]	; (8012800 <etharp_query+0x264>)
 80126d0:	f005 fb18 	bl	8017d04 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80126d4:	7c7a      	ldrb	r2, [r7, #17]
 80126d6:	494b      	ldr	r1, [pc, #300]	; (8012804 <etharp_query+0x268>)
 80126d8:	4613      	mov	r3, r2
 80126da:	005b      	lsls	r3, r3, #1
 80126dc:	4413      	add	r3, r2
 80126de:	00db      	lsls	r3, r3, #3
 80126e0:	440b      	add	r3, r1
 80126e2:	3314      	adds	r3, #20
 80126e4:	781b      	ldrb	r3, [r3, #0]
 80126e6:	2b01      	cmp	r3, #1
 80126e8:	d917      	bls.n	801271a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80126ea:	4a49      	ldr	r2, [pc, #292]	; (8012810 <etharp_query+0x274>)
 80126ec:	7c7b      	ldrb	r3, [r7, #17]
 80126ee:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80126f0:	7c7a      	ldrb	r2, [r7, #17]
 80126f2:	4613      	mov	r3, r2
 80126f4:	005b      	lsls	r3, r3, #1
 80126f6:	4413      	add	r3, r2
 80126f8:	00db      	lsls	r3, r3, #3
 80126fa:	3308      	adds	r3, #8
 80126fc:	4a41      	ldr	r2, [pc, #260]	; (8012804 <etharp_query+0x268>)
 80126fe:	4413      	add	r3, r2
 8012700:	3304      	adds	r3, #4
 8012702:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012706:	9200      	str	r2, [sp, #0]
 8012708:	697a      	ldr	r2, [r7, #20]
 801270a:	6879      	ldr	r1, [r7, #4]
 801270c:	68f8      	ldr	r0, [r7, #12]
 801270e:	f001 fc6f 	bl	8013ff0 <ethernet_output>
 8012712:	4603      	mov	r3, r0
 8012714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012718:	e067      	b.n	80127ea <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801271a:	7c7a      	ldrb	r2, [r7, #17]
 801271c:	4939      	ldr	r1, [pc, #228]	; (8012804 <etharp_query+0x268>)
 801271e:	4613      	mov	r3, r2
 8012720:	005b      	lsls	r3, r3, #1
 8012722:	4413      	add	r3, r2
 8012724:	00db      	lsls	r3, r3, #3
 8012726:	440b      	add	r3, r1
 8012728:	3314      	adds	r3, #20
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	2b01      	cmp	r3, #1
 801272e:	d15c      	bne.n	80127ea <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012730:	2300      	movs	r3, #0
 8012732:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012738:	e01c      	b.n	8012774 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	895a      	ldrh	r2, [r3, #10]
 801273e:	69fb      	ldr	r3, [r7, #28]
 8012740:	891b      	ldrh	r3, [r3, #8]
 8012742:	429a      	cmp	r2, r3
 8012744:	d10a      	bne.n	801275c <etharp_query+0x1c0>
 8012746:	69fb      	ldr	r3, [r7, #28]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d006      	beq.n	801275c <etharp_query+0x1c0>
 801274e:	4b2a      	ldr	r3, [pc, #168]	; (80127f8 <etharp_query+0x25c>)
 8012750:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012754:	492f      	ldr	r1, [pc, #188]	; (8012814 <etharp_query+0x278>)
 8012756:	482a      	ldr	r0, [pc, #168]	; (8012800 <etharp_query+0x264>)
 8012758:	f005 fad4 	bl	8017d04 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	7b1b      	ldrb	r3, [r3, #12]
 8012760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <etharp_query+0x1d2>
        copy_needed = 1;
 8012768:	2301      	movs	r3, #1
 801276a:	61bb      	str	r3, [r7, #24]
        break;
 801276c:	e005      	b.n	801277a <etharp_query+0x1de>
      }
      p = p->next;
 801276e:	69fb      	ldr	r3, [r7, #28]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012774:	69fb      	ldr	r3, [r7, #28]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d1df      	bne.n	801273a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801277a:	69bb      	ldr	r3, [r7, #24]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d007      	beq.n	8012790 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012786:	200e      	movs	r0, #14
 8012788:	f7f9 f992 	bl	800bab0 <pbuf_clone>
 801278c:	61f8      	str	r0, [r7, #28]
 801278e:	e004      	b.n	801279a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012794:	69f8      	ldr	r0, [r7, #28]
 8012796:	f7f8 ffb9 	bl	800b70c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801279a:	69fb      	ldr	r3, [r7, #28]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d021      	beq.n	80127e4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80127a0:	7c7a      	ldrb	r2, [r7, #17]
 80127a2:	4918      	ldr	r1, [pc, #96]	; (8012804 <etharp_query+0x268>)
 80127a4:	4613      	mov	r3, r2
 80127a6:	005b      	lsls	r3, r3, #1
 80127a8:	4413      	add	r3, r2
 80127aa:	00db      	lsls	r3, r3, #3
 80127ac:	440b      	add	r3, r1
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d00a      	beq.n	80127ca <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80127b4:	7c7a      	ldrb	r2, [r7, #17]
 80127b6:	4913      	ldr	r1, [pc, #76]	; (8012804 <etharp_query+0x268>)
 80127b8:	4613      	mov	r3, r2
 80127ba:	005b      	lsls	r3, r3, #1
 80127bc:	4413      	add	r3, r2
 80127be:	00db      	lsls	r3, r3, #3
 80127c0:	440b      	add	r3, r1
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7f8 fefb 	bl	800b5c0 <pbuf_free>
      }
      arp_table[i].q = p;
 80127ca:	7c7a      	ldrb	r2, [r7, #17]
 80127cc:	490d      	ldr	r1, [pc, #52]	; (8012804 <etharp_query+0x268>)
 80127ce:	4613      	mov	r3, r2
 80127d0:	005b      	lsls	r3, r3, #1
 80127d2:	4413      	add	r3, r2
 80127d4:	00db      	lsls	r3, r3, #3
 80127d6:	440b      	add	r3, r1
 80127d8:	69fa      	ldr	r2, [r7, #28]
 80127da:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80127dc:	2300      	movs	r3, #0
 80127de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80127e2:	e002      	b.n	80127ea <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80127e4:	23ff      	movs	r3, #255	; 0xff
 80127e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80127ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3728      	adds	r7, #40	; 0x28
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
 80127f6:	bf00      	nop
 80127f8:	0801ce7c 	.word	0x0801ce7c
 80127fc:	0801d028 	.word	0x0801d028
 8012800:	0801cef4 	.word	0x0801cef4
 8012804:	2400b6d8 	.word	0x2400b6d8
 8012808:	0801d038 	.word	0x0801d038
 801280c:	0801d01c 	.word	0x0801d01c
 8012810:	2400b7c8 	.word	0x2400b7c8
 8012814:	0801d060 	.word	0x0801d060

08012818 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b08a      	sub	sp, #40	; 0x28
 801281c:	af02      	add	r7, sp, #8
 801281e:	60f8      	str	r0, [r7, #12]
 8012820:	60b9      	str	r1, [r7, #8]
 8012822:	607a      	str	r2, [r7, #4]
 8012824:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012826:	2300      	movs	r3, #0
 8012828:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d106      	bne.n	801283e <etharp_raw+0x26>
 8012830:	4b3a      	ldr	r3, [pc, #232]	; (801291c <etharp_raw+0x104>)
 8012832:	f240 4257 	movw	r2, #1111	; 0x457
 8012836:	493a      	ldr	r1, [pc, #232]	; (8012920 <etharp_raw+0x108>)
 8012838:	483a      	ldr	r0, [pc, #232]	; (8012924 <etharp_raw+0x10c>)
 801283a:	f005 fa63 	bl	8017d04 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801283e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012842:	211c      	movs	r1, #28
 8012844:	200e      	movs	r0, #14
 8012846:	f7f8 fbd7 	bl	800aff8 <pbuf_alloc>
 801284a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d102      	bne.n	8012858 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012856:	e05d      	b.n	8012914 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012858:	69bb      	ldr	r3, [r7, #24]
 801285a:	895b      	ldrh	r3, [r3, #10]
 801285c:	2b1b      	cmp	r3, #27
 801285e:	d806      	bhi.n	801286e <etharp_raw+0x56>
 8012860:	4b2e      	ldr	r3, [pc, #184]	; (801291c <etharp_raw+0x104>)
 8012862:	f240 4262 	movw	r2, #1122	; 0x462
 8012866:	4930      	ldr	r1, [pc, #192]	; (8012928 <etharp_raw+0x110>)
 8012868:	482e      	ldr	r0, [pc, #184]	; (8012924 <etharp_raw+0x10c>)
 801286a:	f005 fa4b 	bl	8017d04 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801286e:	69bb      	ldr	r3, [r7, #24]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012874:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012876:	4618      	mov	r0, r3
 8012878:	f7f7 fab4 	bl	8009de4 <lwip_htons>
 801287c:	4603      	mov	r3, r0
 801287e:	461a      	mov	r2, r3
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801288a:	2b06      	cmp	r3, #6
 801288c:	d006      	beq.n	801289c <etharp_raw+0x84>
 801288e:	4b23      	ldr	r3, [pc, #140]	; (801291c <etharp_raw+0x104>)
 8012890:	f240 4269 	movw	r2, #1129	; 0x469
 8012894:	4925      	ldr	r1, [pc, #148]	; (801292c <etharp_raw+0x114>)
 8012896:	4823      	ldr	r0, [pc, #140]	; (8012924 <etharp_raw+0x10c>)
 8012898:	f005 fa34 	bl	8017d04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	3308      	adds	r3, #8
 80128a0:	2206      	movs	r2, #6
 80128a2:	6839      	ldr	r1, [r7, #0]
 80128a4:	4618      	mov	r0, r3
 80128a6:	f005 f953 	bl	8017b50 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80128aa:	697b      	ldr	r3, [r7, #20]
 80128ac:	3312      	adds	r3, #18
 80128ae:	2206      	movs	r2, #6
 80128b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80128b2:	4618      	mov	r0, r3
 80128b4:	f005 f94c 	bl	8017b50 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80128b8:	697b      	ldr	r3, [r7, #20]
 80128ba:	330e      	adds	r3, #14
 80128bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128be:	6812      	ldr	r2, [r2, #0]
 80128c0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	3318      	adds	r3, #24
 80128c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128c8:	6812      	ldr	r2, [r2, #0]
 80128ca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	2200      	movs	r2, #0
 80128d0:	701a      	strb	r2, [r3, #0]
 80128d2:	2200      	movs	r2, #0
 80128d4:	f042 0201 	orr.w	r2, r2, #1
 80128d8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	2200      	movs	r2, #0
 80128de:	f042 0208 	orr.w	r2, r2, #8
 80128e2:	709a      	strb	r2, [r3, #2]
 80128e4:	2200      	movs	r2, #0
 80128e6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	2206      	movs	r2, #6
 80128ec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	2204      	movs	r2, #4
 80128f2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80128f4:	f640 0306 	movw	r3, #2054	; 0x806
 80128f8:	9300      	str	r3, [sp, #0]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	68ba      	ldr	r2, [r7, #8]
 80128fe:	69b9      	ldr	r1, [r7, #24]
 8012900:	68f8      	ldr	r0, [r7, #12]
 8012902:	f001 fb75 	bl	8013ff0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012906:	69b8      	ldr	r0, [r7, #24]
 8012908:	f7f8 fe5a 	bl	800b5c0 <pbuf_free>
  p = NULL;
 801290c:	2300      	movs	r3, #0
 801290e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012910:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012914:	4618      	mov	r0, r3
 8012916:	3720      	adds	r7, #32
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	0801ce7c 	.word	0x0801ce7c
 8012920:	0801cfcc 	.word	0x0801cfcc
 8012924:	0801cef4 	.word	0x0801cef4
 8012928:	0801d07c 	.word	0x0801d07c
 801292c:	0801d0b0 	.word	0x0801d0b0

08012930 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b088      	sub	sp, #32
 8012934:	af04      	add	r7, sp, #16
 8012936:	60f8      	str	r0, [r7, #12]
 8012938:	60b9      	str	r1, [r7, #8]
 801293a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801294c:	2201      	movs	r2, #1
 801294e:	9203      	str	r2, [sp, #12]
 8012950:	68ba      	ldr	r2, [r7, #8]
 8012952:	9202      	str	r2, [sp, #8]
 8012954:	4a06      	ldr	r2, [pc, #24]	; (8012970 <etharp_request_dst+0x40>)
 8012956:	9201      	str	r2, [sp, #4]
 8012958:	9300      	str	r3, [sp, #0]
 801295a:	4603      	mov	r3, r0
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	68f8      	ldr	r0, [r7, #12]
 8012960:	f7ff ff5a 	bl	8012818 <etharp_raw>
 8012964:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012966:	4618      	mov	r0, r3
 8012968:	3710      	adds	r7, #16
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}
 801296e:	bf00      	nop
 8012970:	0801d93c 	.word	0x0801d93c

08012974 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b082      	sub	sp, #8
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
 801297c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801297e:	4a05      	ldr	r2, [pc, #20]	; (8012994 <etharp_request+0x20>)
 8012980:	6839      	ldr	r1, [r7, #0]
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f7ff ffd4 	bl	8012930 <etharp_request_dst>
 8012988:	4603      	mov	r3, r0
}
 801298a:	4618      	mov	r0, r3
 801298c:	3708      	adds	r7, #8
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}
 8012992:	bf00      	nop
 8012994:	0801d934 	.word	0x0801d934

08012998 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b08e      	sub	sp, #56	; 0x38
 801299c:	af04      	add	r7, sp, #16
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80129a2:	4b79      	ldr	r3, [pc, #484]	; (8012b88 <icmp_input+0x1f0>)
 80129a4:	689b      	ldr	r3, [r3, #8]
 80129a6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80129a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	f003 030f 	and.w	r3, r3, #15
 80129b0:	b2db      	uxtb	r3, r3
 80129b2:	009b      	lsls	r3, r3, #2
 80129b4:	b2db      	uxtb	r3, r3
 80129b6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80129b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80129ba:	2b13      	cmp	r3, #19
 80129bc:	f240 80cd 	bls.w	8012b5a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	895b      	ldrh	r3, [r3, #10]
 80129c4:	2b03      	cmp	r3, #3
 80129c6:	f240 80ca 	bls.w	8012b5e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	781b      	ldrb	r3, [r3, #0]
 80129d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80129d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80129d8:	2b00      	cmp	r3, #0
 80129da:	f000 80b7 	beq.w	8012b4c <icmp_input+0x1b4>
 80129de:	2b08      	cmp	r3, #8
 80129e0:	f040 80b7 	bne.w	8012b52 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80129e4:	4b69      	ldr	r3, [pc, #420]	; (8012b8c <icmp_input+0x1f4>)
 80129e6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80129e8:	4b67      	ldr	r3, [pc, #412]	; (8012b88 <icmp_input+0x1f0>)
 80129ea:	695b      	ldr	r3, [r3, #20]
 80129ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80129f0:	2be0      	cmp	r3, #224	; 0xe0
 80129f2:	f000 80bb 	beq.w	8012b6c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80129f6:	4b64      	ldr	r3, [pc, #400]	; (8012b88 <icmp_input+0x1f0>)
 80129f8:	695b      	ldr	r3, [r3, #20]
 80129fa:	4a63      	ldr	r2, [pc, #396]	; (8012b88 <icmp_input+0x1f0>)
 80129fc:	6812      	ldr	r2, [r2, #0]
 80129fe:	4611      	mov	r1, r2
 8012a00:	4618      	mov	r0, r3
 8012a02:	f000 fbed 	bl	80131e0 <ip4_addr_isbroadcast_u32>
 8012a06:	4603      	mov	r3, r0
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	f040 80b1 	bne.w	8012b70 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	891b      	ldrh	r3, [r3, #8]
 8012a12:	2b07      	cmp	r3, #7
 8012a14:	f240 80a5 	bls.w	8012b62 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012a18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a1a:	330e      	adds	r3, #14
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f7f8 fd38 	bl	800b494 <pbuf_add_header>
 8012a24:	4603      	mov	r3, r0
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d04b      	beq.n	8012ac2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	891a      	ldrh	r2, [r3, #8]
 8012a2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a30:	4413      	add	r3, r2
 8012a32:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	891b      	ldrh	r3, [r3, #8]
 8012a38:	8b7a      	ldrh	r2, [r7, #26]
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	f0c0 809a 	bcc.w	8012b74 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012a40:	8b7b      	ldrh	r3, [r7, #26]
 8012a42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a46:	4619      	mov	r1, r3
 8012a48:	200e      	movs	r0, #14
 8012a4a:	f7f8 fad5 	bl	800aff8 <pbuf_alloc>
 8012a4e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	f000 8090 	beq.w	8012b78 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	895b      	ldrh	r3, [r3, #10]
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a60:	3308      	adds	r3, #8
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d203      	bcs.n	8012a6e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012a66:	6978      	ldr	r0, [r7, #20]
 8012a68:	f7f8 fdaa 	bl	800b5c0 <pbuf_free>
          goto icmperr;
 8012a6c:	e085      	b.n	8012b7a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	685b      	ldr	r3, [r3, #4]
 8012a72:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012a76:	4618      	mov	r0, r3
 8012a78:	f005 f86a 	bl	8017b50 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012a7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a7e:	4619      	mov	r1, r3
 8012a80:	6978      	ldr	r0, [r7, #20]
 8012a82:	f7f8 fd17 	bl	800b4b4 <pbuf_remove_header>
 8012a86:	4603      	mov	r3, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d009      	beq.n	8012aa0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012a8c:	4b40      	ldr	r3, [pc, #256]	; (8012b90 <icmp_input+0x1f8>)
 8012a8e:	22b6      	movs	r2, #182	; 0xb6
 8012a90:	4940      	ldr	r1, [pc, #256]	; (8012b94 <icmp_input+0x1fc>)
 8012a92:	4841      	ldr	r0, [pc, #260]	; (8012b98 <icmp_input+0x200>)
 8012a94:	f005 f936 	bl	8017d04 <iprintf>
          pbuf_free(r);
 8012a98:	6978      	ldr	r0, [r7, #20]
 8012a9a:	f7f8 fd91 	bl	800b5c0 <pbuf_free>
          goto icmperr;
 8012a9e:	e06c      	b.n	8012b7a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012aa0:	6879      	ldr	r1, [r7, #4]
 8012aa2:	6978      	ldr	r0, [r7, #20]
 8012aa4:	f7f8 fec0 	bl	800b828 <pbuf_copy>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d003      	beq.n	8012ab6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012aae:	6978      	ldr	r0, [r7, #20]
 8012ab0:	f7f8 fd86 	bl	800b5c0 <pbuf_free>
          goto icmperr;
 8012ab4:	e061      	b.n	8012b7a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012ab6:	6878      	ldr	r0, [r7, #4]
 8012ab8:	f7f8 fd82 	bl	800b5c0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	607b      	str	r3, [r7, #4]
 8012ac0:	e00f      	b.n	8012ae2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012ac2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ac4:	330e      	adds	r3, #14
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f7f8 fcf3 	bl	800b4b4 <pbuf_remove_header>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d006      	beq.n	8012ae2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012ad4:	4b2e      	ldr	r3, [pc, #184]	; (8012b90 <icmp_input+0x1f8>)
 8012ad6:	22c7      	movs	r2, #199	; 0xc7
 8012ad8:	4930      	ldr	r1, [pc, #192]	; (8012b9c <icmp_input+0x204>)
 8012ada:	482f      	ldr	r0, [pc, #188]	; (8012b98 <icmp_input+0x200>)
 8012adc:	f005 f912 	bl	8017d04 <iprintf>
          goto icmperr;
 8012ae0:	e04b      	b.n	8012b7a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012ae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012aea:	4619      	mov	r1, r3
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f7f8 fcd1 	bl	800b494 <pbuf_add_header>
 8012af2:	4603      	mov	r3, r0
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d12b      	bne.n	8012b50 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012afe:	69fb      	ldr	r3, [r7, #28]
 8012b00:	681a      	ldr	r2, [r3, #0]
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012b06:	4b20      	ldr	r3, [pc, #128]	; (8012b88 <icmp_input+0x1f0>)
 8012b08:	691a      	ldr	r2, [r3, #16]
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012b0e:	693b      	ldr	r3, [r7, #16]
 8012b10:	2200      	movs	r2, #0
 8012b12:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012b14:	693b      	ldr	r3, [r7, #16]
 8012b16:	2200      	movs	r2, #0
 8012b18:	709a      	strb	r2, [r3, #2]
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	22ff      	movs	r2, #255	; 0xff
 8012b22:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	2200      	movs	r2, #0
 8012b28:	729a      	strb	r2, [r3, #10]
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	9302      	str	r3, [sp, #8]
 8012b32:	2301      	movs	r3, #1
 8012b34:	9301      	str	r3, [sp, #4]
 8012b36:	2300      	movs	r3, #0
 8012b38:	9300      	str	r3, [sp, #0]
 8012b3a:	23ff      	movs	r3, #255	; 0xff
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	69f9      	ldr	r1, [r7, #28]
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f000 fa75 	bl	8013030 <ip4_output_if>
 8012b46:	4603      	mov	r3, r0
 8012b48:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012b4a:	e001      	b.n	8012b50 <icmp_input+0x1b8>
      break;
 8012b4c:	bf00      	nop
 8012b4e:	e000      	b.n	8012b52 <icmp_input+0x1ba>
      break;
 8012b50:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f7f8 fd34 	bl	800b5c0 <pbuf_free>
  return;
 8012b58:	e013      	b.n	8012b82 <icmp_input+0x1ea>
    goto lenerr;
 8012b5a:	bf00      	nop
 8012b5c:	e002      	b.n	8012b64 <icmp_input+0x1cc>
    goto lenerr;
 8012b5e:	bf00      	nop
 8012b60:	e000      	b.n	8012b64 <icmp_input+0x1cc>
        goto lenerr;
 8012b62:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012b64:	6878      	ldr	r0, [r7, #4]
 8012b66:	f7f8 fd2b 	bl	800b5c0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012b6a:	e00a      	b.n	8012b82 <icmp_input+0x1ea>
        goto icmperr;
 8012b6c:	bf00      	nop
 8012b6e:	e004      	b.n	8012b7a <icmp_input+0x1e2>
        goto icmperr;
 8012b70:	bf00      	nop
 8012b72:	e002      	b.n	8012b7a <icmp_input+0x1e2>
          goto icmperr;
 8012b74:	bf00      	nop
 8012b76:	e000      	b.n	8012b7a <icmp_input+0x1e2>
          goto icmperr;
 8012b78:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012b7a:	6878      	ldr	r0, [r7, #4]
 8012b7c:	f7f8 fd20 	bl	800b5c0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012b80:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012b82:	3728      	adds	r7, #40	; 0x28
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}
 8012b88:	2400bdac 	.word	0x2400bdac
 8012b8c:	2400bdc0 	.word	0x2400bdc0
 8012b90:	0801d0f4 	.word	0x0801d0f4
 8012b94:	0801d12c 	.word	0x0801d12c
 8012b98:	0801d164 	.word	0x0801d164
 8012b9c:	0801d18c 	.word	0x0801d18c

08012ba0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b082      	sub	sp, #8
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
 8012ba8:	460b      	mov	r3, r1
 8012baa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012bac:	78fb      	ldrb	r3, [r7, #3]
 8012bae:	461a      	mov	r2, r3
 8012bb0:	2103      	movs	r1, #3
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	f000 f814 	bl	8012be0 <icmp_send_response>
}
 8012bb8:	bf00      	nop
 8012bba:	3708      	adds	r7, #8
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}

08012bc0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	460b      	mov	r3, r1
 8012bca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012bcc:	78fb      	ldrb	r3, [r7, #3]
 8012bce:	461a      	mov	r2, r3
 8012bd0:	210b      	movs	r1, #11
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	f000 f804 	bl	8012be0 <icmp_send_response>
}
 8012bd8:	bf00      	nop
 8012bda:	3708      	adds	r7, #8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b08c      	sub	sp, #48	; 0x30
 8012be4:	af04      	add	r7, sp, #16
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	460b      	mov	r3, r1
 8012bea:	70fb      	strb	r3, [r7, #3]
 8012bec:	4613      	mov	r3, r2
 8012bee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012bf0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012bf4:	2124      	movs	r1, #36	; 0x24
 8012bf6:	2022      	movs	r0, #34	; 0x22
 8012bf8:	f7f8 f9fe 	bl	800aff8 <pbuf_alloc>
 8012bfc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012bfe:	69fb      	ldr	r3, [r7, #28]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d04c      	beq.n	8012c9e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012c04:	69fb      	ldr	r3, [r7, #28]
 8012c06:	895b      	ldrh	r3, [r3, #10]
 8012c08:	2b23      	cmp	r3, #35	; 0x23
 8012c0a:	d806      	bhi.n	8012c1a <icmp_send_response+0x3a>
 8012c0c:	4b26      	ldr	r3, [pc, #152]	; (8012ca8 <icmp_send_response+0xc8>)
 8012c0e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012c12:	4926      	ldr	r1, [pc, #152]	; (8012cac <icmp_send_response+0xcc>)
 8012c14:	4826      	ldr	r0, [pc, #152]	; (8012cb0 <icmp_send_response+0xd0>)
 8012c16:	f005 f875 	bl	8017d04 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	685b      	ldr	r3, [r3, #4]
 8012c1e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012c20:	69fb      	ldr	r3, [r7, #28]
 8012c22:	685b      	ldr	r3, [r3, #4]
 8012c24:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012c26:	697b      	ldr	r3, [r7, #20]
 8012c28:	78fa      	ldrb	r2, [r7, #3]
 8012c2a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012c2c:	697b      	ldr	r3, [r7, #20]
 8012c2e:	78ba      	ldrb	r2, [r7, #2]
 8012c30:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	2200      	movs	r2, #0
 8012c36:	711a      	strb	r2, [r3, #4]
 8012c38:	2200      	movs	r2, #0
 8012c3a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	719a      	strb	r2, [r3, #6]
 8012c42:	2200      	movs	r2, #0
 8012c44:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012c46:	69fb      	ldr	r3, [r7, #28]
 8012c48:	685b      	ldr	r3, [r3, #4]
 8012c4a:	f103 0008 	add.w	r0, r3, #8
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	685b      	ldr	r3, [r3, #4]
 8012c52:	221c      	movs	r2, #28
 8012c54:	4619      	mov	r1, r3
 8012c56:	f004 ff7b 	bl	8017b50 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	68db      	ldr	r3, [r3, #12]
 8012c5e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012c60:	f107 030c 	add.w	r3, r7, #12
 8012c64:	4618      	mov	r0, r3
 8012c66:	f000 f825 	bl	8012cb4 <ip4_route>
 8012c6a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012c6c:	693b      	ldr	r3, [r7, #16]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d011      	beq.n	8012c96 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	2200      	movs	r2, #0
 8012c76:	709a      	strb	r2, [r3, #2]
 8012c78:	2200      	movs	r2, #0
 8012c7a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012c7c:	f107 020c 	add.w	r2, r7, #12
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	9302      	str	r3, [sp, #8]
 8012c84:	2301      	movs	r3, #1
 8012c86:	9301      	str	r3, [sp, #4]
 8012c88:	2300      	movs	r3, #0
 8012c8a:	9300      	str	r3, [sp, #0]
 8012c8c:	23ff      	movs	r3, #255	; 0xff
 8012c8e:	2100      	movs	r1, #0
 8012c90:	69f8      	ldr	r0, [r7, #28]
 8012c92:	f000 f9cd 	bl	8013030 <ip4_output_if>
  }
  pbuf_free(q);
 8012c96:	69f8      	ldr	r0, [r7, #28]
 8012c98:	f7f8 fc92 	bl	800b5c0 <pbuf_free>
 8012c9c:	e000      	b.n	8012ca0 <icmp_send_response+0xc0>
    return;
 8012c9e:	bf00      	nop
}
 8012ca0:	3720      	adds	r7, #32
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd80      	pop	{r7, pc}
 8012ca6:	bf00      	nop
 8012ca8:	0801d0f4 	.word	0x0801d0f4
 8012cac:	0801d1c0 	.word	0x0801d1c0
 8012cb0:	0801d164 	.word	0x0801d164

08012cb4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012cb4:	b480      	push	{r7}
 8012cb6:	b085      	sub	sp, #20
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012cbc:	4b33      	ldr	r3, [pc, #204]	; (8012d8c <ip4_route+0xd8>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	60fb      	str	r3, [r7, #12]
 8012cc2:	e036      	b.n	8012d32 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cca:	f003 0301 	and.w	r3, r3, #1
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d02b      	beq.n	8012d2c <ip4_route+0x78>
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cda:	089b      	lsrs	r3, r3, #2
 8012cdc:	f003 0301 	and.w	r3, r3, #1
 8012ce0:	b2db      	uxtb	r3, r3
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d022      	beq.n	8012d2c <ip4_route+0x78>
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	3304      	adds	r3, #4
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d01d      	beq.n	8012d2c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681a      	ldr	r2, [r3, #0]
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	3304      	adds	r3, #4
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	405a      	eors	r2, r3
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	3308      	adds	r3, #8
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	4013      	ands	r3, r2
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d101      	bne.n	8012d0c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	e038      	b.n	8012d7e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d12:	f003 0302 	and.w	r3, r3, #2
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d108      	bne.n	8012d2c <ip4_route+0x78>
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681a      	ldr	r2, [r3, #0]
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	330c      	adds	r3, #12
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	429a      	cmp	r2, r3
 8012d26:	d101      	bne.n	8012d2c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	e028      	b.n	8012d7e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	60fb      	str	r3, [r7, #12]
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d1c5      	bne.n	8012cc4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012d38:	4b15      	ldr	r3, [pc, #84]	; (8012d90 <ip4_route+0xdc>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d01a      	beq.n	8012d76 <ip4_route+0xc2>
 8012d40:	4b13      	ldr	r3, [pc, #76]	; (8012d90 <ip4_route+0xdc>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d48:	f003 0301 	and.w	r3, r3, #1
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d012      	beq.n	8012d76 <ip4_route+0xc2>
 8012d50:	4b0f      	ldr	r3, [pc, #60]	; (8012d90 <ip4_route+0xdc>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d58:	f003 0304 	and.w	r3, r3, #4
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d00a      	beq.n	8012d76 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012d60:	4b0b      	ldr	r3, [pc, #44]	; (8012d90 <ip4_route+0xdc>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	3304      	adds	r3, #4
 8012d66:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d004      	beq.n	8012d76 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	b2db      	uxtb	r3, r3
 8012d72:	2b7f      	cmp	r3, #127	; 0x7f
 8012d74:	d101      	bne.n	8012d7a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012d76:	2300      	movs	r3, #0
 8012d78:	e001      	b.n	8012d7e <ip4_route+0xca>
  }

  return netif_default;
 8012d7a:	4b05      	ldr	r3, [pc, #20]	; (8012d90 <ip4_route+0xdc>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3714      	adds	r7, #20
 8012d82:	46bd      	mov	sp, r7
 8012d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d88:	4770      	bx	lr
 8012d8a:	bf00      	nop
 8012d8c:	2400edfc 	.word	0x2400edfc
 8012d90:	2400ee00 	.word	0x2400ee00

08012d94 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b082      	sub	sp, #8
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012da2:	f003 0301 	and.w	r3, r3, #1
 8012da6:	b2db      	uxtb	r3, r3
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d016      	beq.n	8012dda <ip4_input_accept+0x46>
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	3304      	adds	r3, #4
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d011      	beq.n	8012dda <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012db6:	4b0b      	ldr	r3, [pc, #44]	; (8012de4 <ip4_input_accept+0x50>)
 8012db8:	695a      	ldr	r2, [r3, #20]
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	3304      	adds	r3, #4
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	429a      	cmp	r2, r3
 8012dc2:	d008      	beq.n	8012dd6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012dc4:	4b07      	ldr	r3, [pc, #28]	; (8012de4 <ip4_input_accept+0x50>)
 8012dc6:	695b      	ldr	r3, [r3, #20]
 8012dc8:	6879      	ldr	r1, [r7, #4]
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f000 fa08 	bl	80131e0 <ip4_addr_isbroadcast_u32>
 8012dd0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d001      	beq.n	8012dda <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	e000      	b.n	8012ddc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012dda:	2300      	movs	r3, #0
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3708      	adds	r7, #8
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	2400bdac 	.word	0x2400bdac

08012de8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b086      	sub	sp, #24
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	685b      	ldr	r3, [r3, #4]
 8012df6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	091b      	lsrs	r3, r3, #4
 8012dfe:	b2db      	uxtb	r3, r3
 8012e00:	2b04      	cmp	r3, #4
 8012e02:	d004      	beq.n	8012e0e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f7f8 fbdb 	bl	800b5c0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	e107      	b.n	801301e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	f003 030f 	and.w	r3, r3, #15
 8012e16:	b2db      	uxtb	r3, r3
 8012e18:	009b      	lsls	r3, r3, #2
 8012e1a:	b2db      	uxtb	r3, r3
 8012e1c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	885b      	ldrh	r3, [r3, #2]
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7f6 ffdd 	bl	8009de4 <lwip_htons>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	891b      	ldrh	r3, [r3, #8]
 8012e32:	89ba      	ldrh	r2, [r7, #12]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d204      	bcs.n	8012e42 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012e38:	89bb      	ldrh	r3, [r7, #12]
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f7f8 fa39 	bl	800b2b4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	895b      	ldrh	r3, [r3, #10]
 8012e46:	89fa      	ldrh	r2, [r7, #14]
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d807      	bhi.n	8012e5c <ip4_input+0x74>
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	891b      	ldrh	r3, [r3, #8]
 8012e50:	89ba      	ldrh	r2, [r7, #12]
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d802      	bhi.n	8012e5c <ip4_input+0x74>
 8012e56:	89fb      	ldrh	r3, [r7, #14]
 8012e58:	2b13      	cmp	r3, #19
 8012e5a:	d804      	bhi.n	8012e66 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f7f8 fbaf 	bl	800b5c0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012e62:	2300      	movs	r3, #0
 8012e64:	e0db      	b.n	801301e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	691b      	ldr	r3, [r3, #16]
 8012e6a:	4a6f      	ldr	r2, [pc, #444]	; (8013028 <ip4_input+0x240>)
 8012e6c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	68db      	ldr	r3, [r3, #12]
 8012e72:	4a6d      	ldr	r2, [pc, #436]	; (8013028 <ip4_input+0x240>)
 8012e74:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012e76:	4b6c      	ldr	r3, [pc, #432]	; (8013028 <ip4_input+0x240>)
 8012e78:	695b      	ldr	r3, [r3, #20]
 8012e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012e7e:	2be0      	cmp	r3, #224	; 0xe0
 8012e80:	d112      	bne.n	8012ea8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e88:	f003 0301 	and.w	r3, r3, #1
 8012e8c:	b2db      	uxtb	r3, r3
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d007      	beq.n	8012ea2 <ip4_input+0xba>
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	3304      	adds	r3, #4
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d002      	beq.n	8012ea2 <ip4_input+0xba>
      netif = inp;
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	613b      	str	r3, [r7, #16]
 8012ea0:	e02a      	b.n	8012ef8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	613b      	str	r3, [r7, #16]
 8012ea6:	e027      	b.n	8012ef8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012ea8:	6838      	ldr	r0, [r7, #0]
 8012eaa:	f7ff ff73 	bl	8012d94 <ip4_input_accept>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d002      	beq.n	8012eba <ip4_input+0xd2>
      netif = inp;
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	613b      	str	r3, [r7, #16]
 8012eb8:	e01e      	b.n	8012ef8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012ebe:	4b5a      	ldr	r3, [pc, #360]	; (8013028 <ip4_input+0x240>)
 8012ec0:	695b      	ldr	r3, [r3, #20]
 8012ec2:	b2db      	uxtb	r3, r3
 8012ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8012ec6:	d017      	beq.n	8012ef8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012ec8:	4b58      	ldr	r3, [pc, #352]	; (801302c <ip4_input+0x244>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	613b      	str	r3, [r7, #16]
 8012ece:	e00e      	b.n	8012eee <ip4_input+0x106>
          if (netif == inp) {
 8012ed0:	693a      	ldr	r2, [r7, #16]
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d006      	beq.n	8012ee6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012ed8:	6938      	ldr	r0, [r7, #16]
 8012eda:	f7ff ff5b 	bl	8012d94 <ip4_input_accept>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d108      	bne.n	8012ef6 <ip4_input+0x10e>
 8012ee4:	e000      	b.n	8012ee8 <ip4_input+0x100>
            continue;
 8012ee6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	613b      	str	r3, [r7, #16]
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d1ed      	bne.n	8012ed0 <ip4_input+0xe8>
 8012ef4:	e000      	b.n	8012ef8 <ip4_input+0x110>
            break;
 8012ef6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012ef8:	4b4b      	ldr	r3, [pc, #300]	; (8013028 <ip4_input+0x240>)
 8012efa:	691b      	ldr	r3, [r3, #16]
 8012efc:	6839      	ldr	r1, [r7, #0]
 8012efe:	4618      	mov	r0, r3
 8012f00:	f000 f96e 	bl	80131e0 <ip4_addr_isbroadcast_u32>
 8012f04:	4603      	mov	r3, r0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d105      	bne.n	8012f16 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012f0a:	4b47      	ldr	r3, [pc, #284]	; (8013028 <ip4_input+0x240>)
 8012f0c:	691b      	ldr	r3, [r3, #16]
 8012f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012f12:	2be0      	cmp	r3, #224	; 0xe0
 8012f14:	d104      	bne.n	8012f20 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f7f8 fb52 	bl	800b5c0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	e07e      	b.n	801301e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d104      	bne.n	8012f30 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f7f8 fb4a 	bl	800b5c0 <pbuf_free>
    return ERR_OK;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	e076      	b.n	801301e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012f30:	697b      	ldr	r3, [r7, #20]
 8012f32:	88db      	ldrh	r3, [r3, #6]
 8012f34:	b29b      	uxth	r3, r3
 8012f36:	461a      	mov	r2, r3
 8012f38:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012f3c:	4013      	ands	r3, r2
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d00b      	beq.n	8012f5a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f000 fc92 	bl	801386c <ip4_reass>
 8012f48:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d101      	bne.n	8012f54 <ip4_input+0x16c>
      return ERR_OK;
 8012f50:	2300      	movs	r3, #0
 8012f52:	e064      	b.n	801301e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	685b      	ldr	r3, [r3, #4]
 8012f58:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012f5a:	4a33      	ldr	r2, [pc, #204]	; (8013028 <ip4_input+0x240>)
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012f60:	4a31      	ldr	r2, [pc, #196]	; (8013028 <ip4_input+0x240>)
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012f66:	4a30      	ldr	r2, [pc, #192]	; (8013028 <ip4_input+0x240>)
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012f6c:	697b      	ldr	r3, [r7, #20]
 8012f6e:	781b      	ldrb	r3, [r3, #0]
 8012f70:	f003 030f 	and.w	r3, r3, #15
 8012f74:	b2db      	uxtb	r3, r3
 8012f76:	009b      	lsls	r3, r3, #2
 8012f78:	b2db      	uxtb	r3, r3
 8012f7a:	b29a      	uxth	r2, r3
 8012f7c:	4b2a      	ldr	r3, [pc, #168]	; (8013028 <ip4_input+0x240>)
 8012f7e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012f80:	89fb      	ldrh	r3, [r7, #14]
 8012f82:	4619      	mov	r1, r3
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	f7f8 fa95 	bl	800b4b4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	7a5b      	ldrb	r3, [r3, #9]
 8012f8e:	2b11      	cmp	r3, #17
 8012f90:	d006      	beq.n	8012fa0 <ip4_input+0x1b8>
 8012f92:	2b11      	cmp	r3, #17
 8012f94:	dc13      	bgt.n	8012fbe <ip4_input+0x1d6>
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d00c      	beq.n	8012fb4 <ip4_input+0x1cc>
 8012f9a:	2b06      	cmp	r3, #6
 8012f9c:	d005      	beq.n	8012faa <ip4_input+0x1c2>
 8012f9e:	e00e      	b.n	8012fbe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012fa0:	6839      	ldr	r1, [r7, #0]
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f7fe f970 	bl	8011288 <udp_input>
        break;
 8012fa8:	e026      	b.n	8012ff8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012faa:	6839      	ldr	r1, [r7, #0]
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f7fa f94b 	bl	800d248 <tcp_input>
        break;
 8012fb2:	e021      	b.n	8012ff8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012fb4:	6839      	ldr	r1, [r7, #0]
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f7ff fcee 	bl	8012998 <icmp_input>
        break;
 8012fbc:	e01c      	b.n	8012ff8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012fbe:	4b1a      	ldr	r3, [pc, #104]	; (8013028 <ip4_input+0x240>)
 8012fc0:	695b      	ldr	r3, [r3, #20]
 8012fc2:	6939      	ldr	r1, [r7, #16]
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f000 f90b 	bl	80131e0 <ip4_addr_isbroadcast_u32>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d10f      	bne.n	8012ff0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012fd0:	4b15      	ldr	r3, [pc, #84]	; (8013028 <ip4_input+0x240>)
 8012fd2:	695b      	ldr	r3, [r3, #20]
 8012fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012fd8:	2be0      	cmp	r3, #224	; 0xe0
 8012fda:	d009      	beq.n	8012ff0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012fdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	6878      	ldr	r0, [r7, #4]
 8012fe4:	f7f8 fad9 	bl	800b59a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012fe8:	2102      	movs	r1, #2
 8012fea:	6878      	ldr	r0, [r7, #4]
 8012fec:	f7ff fdd8 	bl	8012ba0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f7f8 fae5 	bl	800b5c0 <pbuf_free>
        break;
 8012ff6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012ff8:	4b0b      	ldr	r3, [pc, #44]	; (8013028 <ip4_input+0x240>)
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012ffe:	4b0a      	ldr	r3, [pc, #40]	; (8013028 <ip4_input+0x240>)
 8013000:	2200      	movs	r2, #0
 8013002:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013004:	4b08      	ldr	r3, [pc, #32]	; (8013028 <ip4_input+0x240>)
 8013006:	2200      	movs	r2, #0
 8013008:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801300a:	4b07      	ldr	r3, [pc, #28]	; (8013028 <ip4_input+0x240>)
 801300c:	2200      	movs	r2, #0
 801300e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013010:	4b05      	ldr	r3, [pc, #20]	; (8013028 <ip4_input+0x240>)
 8013012:	2200      	movs	r2, #0
 8013014:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013016:	4b04      	ldr	r3, [pc, #16]	; (8013028 <ip4_input+0x240>)
 8013018:	2200      	movs	r2, #0
 801301a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801301c:	2300      	movs	r3, #0
}
 801301e:	4618      	mov	r0, r3
 8013020:	3718      	adds	r7, #24
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}
 8013026:	bf00      	nop
 8013028:	2400bdac 	.word	0x2400bdac
 801302c:	2400edfc 	.word	0x2400edfc

08013030 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b08a      	sub	sp, #40	; 0x28
 8013034:	af04      	add	r7, sp, #16
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]
 801303c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d009      	beq.n	801305c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013048:	68bb      	ldr	r3, [r7, #8]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d003      	beq.n	8013056 <ip4_output_if+0x26>
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d102      	bne.n	801305c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013058:	3304      	adds	r3, #4
 801305a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801305c:	78fa      	ldrb	r2, [r7, #3]
 801305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013060:	9302      	str	r3, [sp, #8]
 8013062:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013066:	9301      	str	r3, [sp, #4]
 8013068:	f897 3020 	ldrb.w	r3, [r7, #32]
 801306c:	9300      	str	r3, [sp, #0]
 801306e:	4613      	mov	r3, r2
 8013070:	687a      	ldr	r2, [r7, #4]
 8013072:	6979      	ldr	r1, [r7, #20]
 8013074:	68f8      	ldr	r0, [r7, #12]
 8013076:	f000 f805 	bl	8013084 <ip4_output_if_src>
 801307a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801307c:	4618      	mov	r0, r3
 801307e:	3718      	adds	r7, #24
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b088      	sub	sp, #32
 8013088:	af00      	add	r7, sp, #0
 801308a:	60f8      	str	r0, [r7, #12]
 801308c:	60b9      	str	r1, [r7, #8]
 801308e:	607a      	str	r2, [r7, #4]
 8013090:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	7b9b      	ldrb	r3, [r3, #14]
 8013096:	2b01      	cmp	r3, #1
 8013098:	d006      	beq.n	80130a8 <ip4_output_if_src+0x24>
 801309a:	4b4b      	ldr	r3, [pc, #300]	; (80131c8 <ip4_output_if_src+0x144>)
 801309c:	f44f 7255 	mov.w	r2, #852	; 0x354
 80130a0:	494a      	ldr	r1, [pc, #296]	; (80131cc <ip4_output_if_src+0x148>)
 80130a2:	484b      	ldr	r0, [pc, #300]	; (80131d0 <ip4_output_if_src+0x14c>)
 80130a4:	f004 fe2e 	bl	8017d04 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d060      	beq.n	8013170 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80130ae:	2314      	movs	r3, #20
 80130b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80130b2:	2114      	movs	r1, #20
 80130b4:	68f8      	ldr	r0, [r7, #12]
 80130b6:	f7f8 f9ed 	bl	800b494 <pbuf_add_header>
 80130ba:	4603      	mov	r3, r0
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d002      	beq.n	80130c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80130c0:	f06f 0301 	mvn.w	r3, #1
 80130c4:	e07c      	b.n	80131c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	685b      	ldr	r3, [r3, #4]
 80130ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	895b      	ldrh	r3, [r3, #10]
 80130d0:	2b13      	cmp	r3, #19
 80130d2:	d806      	bhi.n	80130e2 <ip4_output_if_src+0x5e>
 80130d4:	4b3c      	ldr	r3, [pc, #240]	; (80131c8 <ip4_output_if_src+0x144>)
 80130d6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80130da:	493e      	ldr	r1, [pc, #248]	; (80131d4 <ip4_output_if_src+0x150>)
 80130dc:	483c      	ldr	r0, [pc, #240]	; (80131d0 <ip4_output_if_src+0x14c>)
 80130de:	f004 fe11 	bl	8017d04 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80130e2:	69fb      	ldr	r3, [r7, #28]
 80130e4:	78fa      	ldrb	r2, [r7, #3]
 80130e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80130ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	681a      	ldr	r2, [r3, #0]
 80130f4:	69fb      	ldr	r3, [r7, #28]
 80130f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80130f8:	8b7b      	ldrh	r3, [r7, #26]
 80130fa:	089b      	lsrs	r3, r3, #2
 80130fc:	b29b      	uxth	r3, r3
 80130fe:	b2db      	uxtb	r3, r3
 8013100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013104:	b2da      	uxtb	r2, r3
 8013106:	69fb      	ldr	r3, [r7, #28]
 8013108:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801310a:	69fb      	ldr	r3, [r7, #28]
 801310c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013110:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	891b      	ldrh	r3, [r3, #8]
 8013116:	4618      	mov	r0, r3
 8013118:	f7f6 fe64 	bl	8009de4 <lwip_htons>
 801311c:	4603      	mov	r3, r0
 801311e:	461a      	mov	r2, r3
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013124:	69fb      	ldr	r3, [r7, #28]
 8013126:	2200      	movs	r2, #0
 8013128:	719a      	strb	r2, [r3, #6]
 801312a:	2200      	movs	r2, #0
 801312c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801312e:	4b2a      	ldr	r3, [pc, #168]	; (80131d8 <ip4_output_if_src+0x154>)
 8013130:	881b      	ldrh	r3, [r3, #0]
 8013132:	4618      	mov	r0, r3
 8013134:	f7f6 fe56 	bl	8009de4 <lwip_htons>
 8013138:	4603      	mov	r3, r0
 801313a:	461a      	mov	r2, r3
 801313c:	69fb      	ldr	r3, [r7, #28]
 801313e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013140:	4b25      	ldr	r3, [pc, #148]	; (80131d8 <ip4_output_if_src+0x154>)
 8013142:	881b      	ldrh	r3, [r3, #0]
 8013144:	3301      	adds	r3, #1
 8013146:	b29a      	uxth	r2, r3
 8013148:	4b23      	ldr	r3, [pc, #140]	; (80131d8 <ip4_output_if_src+0x154>)
 801314a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d104      	bne.n	801315c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013152:	4b22      	ldr	r3, [pc, #136]	; (80131dc <ip4_output_if_src+0x158>)
 8013154:	681a      	ldr	r2, [r3, #0]
 8013156:	69fb      	ldr	r3, [r7, #28]
 8013158:	60da      	str	r2, [r3, #12]
 801315a:	e003      	b.n	8013164 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	681a      	ldr	r2, [r3, #0]
 8013160:	69fb      	ldr	r3, [r7, #28]
 8013162:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013164:	69fb      	ldr	r3, [r7, #28]
 8013166:	2200      	movs	r2, #0
 8013168:	729a      	strb	r2, [r3, #10]
 801316a:	2200      	movs	r2, #0
 801316c:	72da      	strb	r2, [r3, #11]
 801316e:	e00f      	b.n	8013190 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	895b      	ldrh	r3, [r3, #10]
 8013174:	2b13      	cmp	r3, #19
 8013176:	d802      	bhi.n	801317e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013178:	f06f 0301 	mvn.w	r3, #1
 801317c:	e020      	b.n	80131c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013184:	69fb      	ldr	r3, [r7, #28]
 8013186:	691b      	ldr	r3, [r3, #16]
 8013188:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801318a:	f107 0314 	add.w	r3, r7, #20
 801318e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013192:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013194:	2b00      	cmp	r3, #0
 8013196:	d00c      	beq.n	80131b2 <ip4_output_if_src+0x12e>
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	891a      	ldrh	r2, [r3, #8]
 801319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801319e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80131a0:	429a      	cmp	r2, r3
 80131a2:	d906      	bls.n	80131b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80131a4:	687a      	ldr	r2, [r7, #4]
 80131a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80131a8:	68f8      	ldr	r0, [r7, #12]
 80131aa:	f000 fd4d 	bl	8013c48 <ip4_frag>
 80131ae:	4603      	mov	r3, r0
 80131b0:	e006      	b.n	80131c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80131b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131b4:	695b      	ldr	r3, [r3, #20]
 80131b6:	687a      	ldr	r2, [r7, #4]
 80131b8:	68f9      	ldr	r1, [r7, #12]
 80131ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131bc:	4798      	blx	r3
 80131be:	4603      	mov	r3, r0
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3720      	adds	r7, #32
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	0801d1ec 	.word	0x0801d1ec
 80131cc:	0801d220 	.word	0x0801d220
 80131d0:	0801d22c 	.word	0x0801d22c
 80131d4:	0801d254 	.word	0x0801d254
 80131d8:	2400b7ca 	.word	0x2400b7ca
 80131dc:	0801d930 	.word	0x0801d930

080131e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80131e0:	b480      	push	{r7}
 80131e2:	b085      	sub	sp, #20
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80131f4:	d002      	beq.n	80131fc <ip4_addr_isbroadcast_u32+0x1c>
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d101      	bne.n	8013200 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80131fc:	2301      	movs	r3, #1
 80131fe:	e02a      	b.n	8013256 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013206:	f003 0302 	and.w	r3, r3, #2
 801320a:	2b00      	cmp	r3, #0
 801320c:	d101      	bne.n	8013212 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801320e:	2300      	movs	r3, #0
 8013210:	e021      	b.n	8013256 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	3304      	adds	r3, #4
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	687a      	ldr	r2, [r7, #4]
 801321a:	429a      	cmp	r2, r3
 801321c:	d101      	bne.n	8013222 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801321e:	2300      	movs	r3, #0
 8013220:	e019      	b.n	8013256 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013222:	68fa      	ldr	r2, [r7, #12]
 8013224:	683b      	ldr	r3, [r7, #0]
 8013226:	3304      	adds	r3, #4
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	405a      	eors	r2, r3
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	3308      	adds	r3, #8
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	4013      	ands	r3, r2
 8013234:	2b00      	cmp	r3, #0
 8013236:	d10d      	bne.n	8013254 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	3308      	adds	r3, #8
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	43da      	mvns	r2, r3
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	3308      	adds	r3, #8
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801324c:	429a      	cmp	r2, r3
 801324e:	d101      	bne.n	8013254 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013250:	2301      	movs	r3, #1
 8013252:	e000      	b.n	8013256 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013254:	2300      	movs	r3, #0
  }
}
 8013256:	4618      	mov	r0, r3
 8013258:	3714      	adds	r7, #20
 801325a:	46bd      	mov	sp, r7
 801325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013260:	4770      	bx	lr
	...

08013264 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b084      	sub	sp, #16
 8013268:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801326a:	2300      	movs	r3, #0
 801326c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801326e:	4b12      	ldr	r3, [pc, #72]	; (80132b8 <ip_reass_tmr+0x54>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013274:	e018      	b.n	80132a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	7fdb      	ldrb	r3, [r3, #31]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d00b      	beq.n	8013296 <ip_reass_tmr+0x32>
      r->timer--;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	7fdb      	ldrb	r3, [r3, #31]
 8013282:	3b01      	subs	r3, #1
 8013284:	b2da      	uxtb	r2, r3
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	60fb      	str	r3, [r7, #12]
 8013294:	e008      	b.n	80132a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80132a0:	68b9      	ldr	r1, [r7, #8]
 80132a2:	6878      	ldr	r0, [r7, #4]
 80132a4:	f000 f80a 	bl	80132bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d1e3      	bne.n	8013276 <ip_reass_tmr+0x12>
    }
  }
}
 80132ae:	bf00      	nop
 80132b0:	bf00      	nop
 80132b2:	3710      	adds	r7, #16
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd80      	pop	{r7, pc}
 80132b8:	2400b7cc 	.word	0x2400b7cc

080132bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b088      	sub	sp, #32
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
 80132c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80132c6:	2300      	movs	r3, #0
 80132c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80132ca:	683a      	ldr	r2, [r7, #0]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d105      	bne.n	80132de <ip_reass_free_complete_datagram+0x22>
 80132d2:	4b45      	ldr	r3, [pc, #276]	; (80133e8 <ip_reass_free_complete_datagram+0x12c>)
 80132d4:	22ab      	movs	r2, #171	; 0xab
 80132d6:	4945      	ldr	r1, [pc, #276]	; (80133ec <ip_reass_free_complete_datagram+0x130>)
 80132d8:	4845      	ldr	r0, [pc, #276]	; (80133f0 <ip_reass_free_complete_datagram+0x134>)
 80132da:	f004 fd13 	bl	8017d04 <iprintf>
  if (prev != NULL) {
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d00a      	beq.n	80132fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	429a      	cmp	r2, r3
 80132ec:	d005      	beq.n	80132fa <ip_reass_free_complete_datagram+0x3e>
 80132ee:	4b3e      	ldr	r3, [pc, #248]	; (80133e8 <ip_reass_free_complete_datagram+0x12c>)
 80132f0:	22ad      	movs	r2, #173	; 0xad
 80132f2:	4940      	ldr	r1, [pc, #256]	; (80133f4 <ip_reass_free_complete_datagram+0x138>)
 80132f4:	483e      	ldr	r0, [pc, #248]	; (80133f0 <ip_reass_free_complete_datagram+0x134>)
 80132f6:	f004 fd05 	bl	8017d04 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	685b      	ldr	r3, [r3, #4]
 8013300:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	889b      	ldrh	r3, [r3, #4]
 8013306:	b29b      	uxth	r3, r3
 8013308:	2b00      	cmp	r3, #0
 801330a:	d12a      	bne.n	8013362 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	685b      	ldr	r3, [r3, #4]
 8013310:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	681a      	ldr	r2, [r3, #0]
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801331a:	69bb      	ldr	r3, [r7, #24]
 801331c:	6858      	ldr	r0, [r3, #4]
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	3308      	adds	r3, #8
 8013322:	2214      	movs	r2, #20
 8013324:	4619      	mov	r1, r3
 8013326:	f004 fc13 	bl	8017b50 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801332a:	2101      	movs	r1, #1
 801332c:	69b8      	ldr	r0, [r7, #24]
 801332e:	f7ff fc47 	bl	8012bc0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013332:	69b8      	ldr	r0, [r7, #24]
 8013334:	f7f8 f9d2 	bl	800b6dc <pbuf_clen>
 8013338:	4603      	mov	r3, r0
 801333a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801333c:	8bfa      	ldrh	r2, [r7, #30]
 801333e:	8a7b      	ldrh	r3, [r7, #18]
 8013340:	4413      	add	r3, r2
 8013342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013346:	db05      	blt.n	8013354 <ip_reass_free_complete_datagram+0x98>
 8013348:	4b27      	ldr	r3, [pc, #156]	; (80133e8 <ip_reass_free_complete_datagram+0x12c>)
 801334a:	22bc      	movs	r2, #188	; 0xbc
 801334c:	492a      	ldr	r1, [pc, #168]	; (80133f8 <ip_reass_free_complete_datagram+0x13c>)
 801334e:	4828      	ldr	r0, [pc, #160]	; (80133f0 <ip_reass_free_complete_datagram+0x134>)
 8013350:	f004 fcd8 	bl	8017d04 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013354:	8bfa      	ldrh	r2, [r7, #30]
 8013356:	8a7b      	ldrh	r3, [r7, #18]
 8013358:	4413      	add	r3, r2
 801335a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801335c:	69b8      	ldr	r0, [r7, #24]
 801335e:	f7f8 f92f 	bl	800b5c0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	685b      	ldr	r3, [r3, #4]
 8013366:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013368:	e01f      	b.n	80133aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801336a:	69bb      	ldr	r3, [r7, #24]
 801336c:	685b      	ldr	r3, [r3, #4]
 801336e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801337a:	68f8      	ldr	r0, [r7, #12]
 801337c:	f7f8 f9ae 	bl	800b6dc <pbuf_clen>
 8013380:	4603      	mov	r3, r0
 8013382:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013384:	8bfa      	ldrh	r2, [r7, #30]
 8013386:	8a7b      	ldrh	r3, [r7, #18]
 8013388:	4413      	add	r3, r2
 801338a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801338e:	db05      	blt.n	801339c <ip_reass_free_complete_datagram+0xe0>
 8013390:	4b15      	ldr	r3, [pc, #84]	; (80133e8 <ip_reass_free_complete_datagram+0x12c>)
 8013392:	22cc      	movs	r2, #204	; 0xcc
 8013394:	4918      	ldr	r1, [pc, #96]	; (80133f8 <ip_reass_free_complete_datagram+0x13c>)
 8013396:	4816      	ldr	r0, [pc, #88]	; (80133f0 <ip_reass_free_complete_datagram+0x134>)
 8013398:	f004 fcb4 	bl	8017d04 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801339c:	8bfa      	ldrh	r2, [r7, #30]
 801339e:	8a7b      	ldrh	r3, [r7, #18]
 80133a0:	4413      	add	r3, r2
 80133a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80133a4:	68f8      	ldr	r0, [r7, #12]
 80133a6:	f7f8 f90b 	bl	800b5c0 <pbuf_free>
  while (p != NULL) {
 80133aa:	69bb      	ldr	r3, [r7, #24]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d1dc      	bne.n	801336a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80133b0:	6839      	ldr	r1, [r7, #0]
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f000 f8c2 	bl	801353c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80133b8:	4b10      	ldr	r3, [pc, #64]	; (80133fc <ip_reass_free_complete_datagram+0x140>)
 80133ba:	881b      	ldrh	r3, [r3, #0]
 80133bc:	8bfa      	ldrh	r2, [r7, #30]
 80133be:	429a      	cmp	r2, r3
 80133c0:	d905      	bls.n	80133ce <ip_reass_free_complete_datagram+0x112>
 80133c2:	4b09      	ldr	r3, [pc, #36]	; (80133e8 <ip_reass_free_complete_datagram+0x12c>)
 80133c4:	22d2      	movs	r2, #210	; 0xd2
 80133c6:	490e      	ldr	r1, [pc, #56]	; (8013400 <ip_reass_free_complete_datagram+0x144>)
 80133c8:	4809      	ldr	r0, [pc, #36]	; (80133f0 <ip_reass_free_complete_datagram+0x134>)
 80133ca:	f004 fc9b 	bl	8017d04 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80133ce:	4b0b      	ldr	r3, [pc, #44]	; (80133fc <ip_reass_free_complete_datagram+0x140>)
 80133d0:	881a      	ldrh	r2, [r3, #0]
 80133d2:	8bfb      	ldrh	r3, [r7, #30]
 80133d4:	1ad3      	subs	r3, r2, r3
 80133d6:	b29a      	uxth	r2, r3
 80133d8:	4b08      	ldr	r3, [pc, #32]	; (80133fc <ip_reass_free_complete_datagram+0x140>)
 80133da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80133dc:	8bfb      	ldrh	r3, [r7, #30]
}
 80133de:	4618      	mov	r0, r3
 80133e0:	3720      	adds	r7, #32
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}
 80133e6:	bf00      	nop
 80133e8:	0801d284 	.word	0x0801d284
 80133ec:	0801d2c0 	.word	0x0801d2c0
 80133f0:	0801d2cc 	.word	0x0801d2cc
 80133f4:	0801d2f4 	.word	0x0801d2f4
 80133f8:	0801d308 	.word	0x0801d308
 80133fc:	2400b7d0 	.word	0x2400b7d0
 8013400:	0801d328 	.word	0x0801d328

08013404 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b08a      	sub	sp, #40	; 0x28
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801340e:	2300      	movs	r3, #0
 8013410:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013412:	2300      	movs	r3, #0
 8013414:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013416:	2300      	movs	r3, #0
 8013418:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801341a:	2300      	movs	r3, #0
 801341c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801341e:	2300      	movs	r3, #0
 8013420:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013422:	4b28      	ldr	r3, [pc, #160]	; (80134c4 <ip_reass_remove_oldest_datagram+0xc0>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013428:	e030      	b.n	801348c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342c:	695a      	ldr	r2, [r3, #20]
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	68db      	ldr	r3, [r3, #12]
 8013432:	429a      	cmp	r2, r3
 8013434:	d10c      	bne.n	8013450 <ip_reass_remove_oldest_datagram+0x4c>
 8013436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013438:	699a      	ldr	r2, [r3, #24]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	691b      	ldr	r3, [r3, #16]
 801343e:	429a      	cmp	r2, r3
 8013440:	d106      	bne.n	8013450 <ip_reass_remove_oldest_datagram+0x4c>
 8013442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013444:	899a      	ldrh	r2, [r3, #12]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	889b      	ldrh	r3, [r3, #4]
 801344a:	b29b      	uxth	r3, r3
 801344c:	429a      	cmp	r2, r3
 801344e:	d014      	beq.n	801347a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	3301      	adds	r3, #1
 8013454:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013456:	6a3b      	ldr	r3, [r7, #32]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d104      	bne.n	8013466 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801345e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013460:	69fb      	ldr	r3, [r7, #28]
 8013462:	61bb      	str	r3, [r7, #24]
 8013464:	e009      	b.n	801347a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013468:	7fda      	ldrb	r2, [r3, #31]
 801346a:	6a3b      	ldr	r3, [r7, #32]
 801346c:	7fdb      	ldrb	r3, [r3, #31]
 801346e:	429a      	cmp	r2, r3
 8013470:	d803      	bhi.n	801347a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013474:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013476:	69fb      	ldr	r3, [r7, #28]
 8013478:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d001      	beq.n	8013486 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013484:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348e:	2b00      	cmp	r3, #0
 8013490:	d1cb      	bne.n	801342a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013492:	6a3b      	ldr	r3, [r7, #32]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d008      	beq.n	80134aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013498:	69b9      	ldr	r1, [r7, #24]
 801349a:	6a38      	ldr	r0, [r7, #32]
 801349c:	f7ff ff0e 	bl	80132bc <ip_reass_free_complete_datagram>
 80134a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80134a2:	697a      	ldr	r2, [r7, #20]
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	4413      	add	r3, r2
 80134a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80134aa:	697a      	ldr	r2, [r7, #20]
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	429a      	cmp	r2, r3
 80134b0:	da02      	bge.n	80134b8 <ip_reass_remove_oldest_datagram+0xb4>
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	2b01      	cmp	r3, #1
 80134b6:	dcac      	bgt.n	8013412 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80134b8:	697b      	ldr	r3, [r7, #20]
}
 80134ba:	4618      	mov	r0, r3
 80134bc:	3728      	adds	r7, #40	; 0x28
 80134be:	46bd      	mov	sp, r7
 80134c0:	bd80      	pop	{r7, pc}
 80134c2:	bf00      	nop
 80134c4:	2400b7cc 	.word	0x2400b7cc

080134c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b084      	sub	sp, #16
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
 80134d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80134d2:	2004      	movs	r0, #4
 80134d4:	f7f7 f95a 	bl	800a78c <memp_malloc>
 80134d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d110      	bne.n	8013502 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80134e0:	6839      	ldr	r1, [r7, #0]
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f7ff ff8e 	bl	8013404 <ip_reass_remove_oldest_datagram>
 80134e8:	4602      	mov	r2, r0
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	4293      	cmp	r3, r2
 80134ee:	dc03      	bgt.n	80134f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80134f0:	2004      	movs	r0, #4
 80134f2:	f7f7 f94b 	bl	800a78c <memp_malloc>
 80134f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d101      	bne.n	8013502 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80134fe:	2300      	movs	r3, #0
 8013500:	e016      	b.n	8013530 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013502:	2220      	movs	r2, #32
 8013504:	2100      	movs	r1, #0
 8013506:	68f8      	ldr	r0, [r7, #12]
 8013508:	f004 fb4a 	bl	8017ba0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	220f      	movs	r2, #15
 8013510:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013512:	4b09      	ldr	r3, [pc, #36]	; (8013538 <ip_reass_enqueue_new_datagram+0x70>)
 8013514:	681a      	ldr	r2, [r3, #0]
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801351a:	4a07      	ldr	r2, [pc, #28]	; (8013538 <ip_reass_enqueue_new_datagram+0x70>)
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	3308      	adds	r3, #8
 8013524:	2214      	movs	r2, #20
 8013526:	6879      	ldr	r1, [r7, #4]
 8013528:	4618      	mov	r0, r3
 801352a:	f004 fb11 	bl	8017b50 <memcpy>
  return ipr;
 801352e:	68fb      	ldr	r3, [r7, #12]
}
 8013530:	4618      	mov	r0, r3
 8013532:	3710      	adds	r7, #16
 8013534:	46bd      	mov	sp, r7
 8013536:	bd80      	pop	{r7, pc}
 8013538:	2400b7cc 	.word	0x2400b7cc

0801353c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013546:	4b10      	ldr	r3, [pc, #64]	; (8013588 <ip_reass_dequeue_datagram+0x4c>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	687a      	ldr	r2, [r7, #4]
 801354c:	429a      	cmp	r2, r3
 801354e:	d104      	bne.n	801355a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	4a0c      	ldr	r2, [pc, #48]	; (8013588 <ip_reass_dequeue_datagram+0x4c>)
 8013556:	6013      	str	r3, [r2, #0]
 8013558:	e00d      	b.n	8013576 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d106      	bne.n	801356e <ip_reass_dequeue_datagram+0x32>
 8013560:	4b0a      	ldr	r3, [pc, #40]	; (801358c <ip_reass_dequeue_datagram+0x50>)
 8013562:	f240 1245 	movw	r2, #325	; 0x145
 8013566:	490a      	ldr	r1, [pc, #40]	; (8013590 <ip_reass_dequeue_datagram+0x54>)
 8013568:	480a      	ldr	r0, [pc, #40]	; (8013594 <ip_reass_dequeue_datagram+0x58>)
 801356a:	f004 fbcb 	bl	8017d04 <iprintf>
    prev->next = ipr->next;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	681a      	ldr	r2, [r3, #0]
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013576:	6879      	ldr	r1, [r7, #4]
 8013578:	2004      	movs	r0, #4
 801357a:	f7f7 f97d 	bl	800a878 <memp_free>
}
 801357e:	bf00      	nop
 8013580:	3708      	adds	r7, #8
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	2400b7cc 	.word	0x2400b7cc
 801358c:	0801d284 	.word	0x0801d284
 8013590:	0801d34c 	.word	0x0801d34c
 8013594:	0801d2cc 	.word	0x0801d2cc

08013598 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b08c      	sub	sp, #48	; 0x30
 801359c:	af00      	add	r7, sp, #0
 801359e:	60f8      	str	r0, [r7, #12]
 80135a0:	60b9      	str	r1, [r7, #8]
 80135a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80135a4:	2300      	movs	r3, #0
 80135a6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80135a8:	2301      	movs	r3, #1
 80135aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	685b      	ldr	r3, [r3, #4]
 80135b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80135b2:	69fb      	ldr	r3, [r7, #28]
 80135b4:	885b      	ldrh	r3, [r3, #2]
 80135b6:	b29b      	uxth	r3, r3
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7f6 fc13 	bl	8009de4 <lwip_htons>
 80135be:	4603      	mov	r3, r0
 80135c0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80135c2:	69fb      	ldr	r3, [r7, #28]
 80135c4:	781b      	ldrb	r3, [r3, #0]
 80135c6:	f003 030f 	and.w	r3, r3, #15
 80135ca:	b2db      	uxtb	r3, r3
 80135cc:	009b      	lsls	r3, r3, #2
 80135ce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80135d0:	7e7b      	ldrb	r3, [r7, #25]
 80135d2:	b29b      	uxth	r3, r3
 80135d4:	8b7a      	ldrh	r2, [r7, #26]
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d202      	bcs.n	80135e0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80135da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135de:	e135      	b.n	801384c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80135e0:	7e7b      	ldrb	r3, [r7, #25]
 80135e2:	b29b      	uxth	r3, r3
 80135e4:	8b7a      	ldrh	r2, [r7, #26]
 80135e6:	1ad3      	subs	r3, r2, r3
 80135e8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	88db      	ldrh	r3, [r3, #6]
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7f6 fbf7 	bl	8009de4 <lwip_htons>
 80135f6:	4603      	mov	r3, r0
 80135f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80135fc:	b29b      	uxth	r3, r3
 80135fe:	00db      	lsls	r3, r3, #3
 8013600:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013602:	68bb      	ldr	r3, [r7, #8]
 8013604:	685b      	ldr	r3, [r3, #4]
 8013606:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360a:	2200      	movs	r2, #0
 801360c:	701a      	strb	r2, [r3, #0]
 801360e:	2200      	movs	r2, #0
 8013610:	705a      	strb	r2, [r3, #1]
 8013612:	2200      	movs	r2, #0
 8013614:	709a      	strb	r2, [r3, #2]
 8013616:	2200      	movs	r2, #0
 8013618:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801361c:	8afa      	ldrh	r2, [r7, #22]
 801361e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013620:	8afa      	ldrh	r2, [r7, #22]
 8013622:	8b7b      	ldrh	r3, [r7, #26]
 8013624:	4413      	add	r3, r2
 8013626:	b29a      	uxth	r2, r3
 8013628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801362a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801362e:	88db      	ldrh	r3, [r3, #6]
 8013630:	b29b      	uxth	r3, r3
 8013632:	8afa      	ldrh	r2, [r7, #22]
 8013634:	429a      	cmp	r2, r3
 8013636:	d902      	bls.n	801363e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801363c:	e106      	b.n	801384c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	685b      	ldr	r3, [r3, #4]
 8013642:	627b      	str	r3, [r7, #36]	; 0x24
 8013644:	e068      	b.n	8013718 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013648:	685b      	ldr	r3, [r3, #4]
 801364a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801364e:	889b      	ldrh	r3, [r3, #4]
 8013650:	b29a      	uxth	r2, r3
 8013652:	693b      	ldr	r3, [r7, #16]
 8013654:	889b      	ldrh	r3, [r3, #4]
 8013656:	b29b      	uxth	r3, r3
 8013658:	429a      	cmp	r2, r3
 801365a:	d235      	bcs.n	80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013660:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013664:	2b00      	cmp	r3, #0
 8013666:	d020      	beq.n	80136aa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801366a:	889b      	ldrh	r3, [r3, #4]
 801366c:	b29a      	uxth	r2, r3
 801366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013670:	88db      	ldrh	r3, [r3, #6]
 8013672:	b29b      	uxth	r3, r3
 8013674:	429a      	cmp	r2, r3
 8013676:	d307      	bcc.n	8013688 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801367a:	88db      	ldrh	r3, [r3, #6]
 801367c:	b29a      	uxth	r2, r3
 801367e:	693b      	ldr	r3, [r7, #16]
 8013680:	889b      	ldrh	r3, [r3, #4]
 8013682:	b29b      	uxth	r3, r3
 8013684:	429a      	cmp	r2, r3
 8013686:	d902      	bls.n	801368e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801368c:	e0de      	b.n	801384c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013690:	68ba      	ldr	r2, [r7, #8]
 8013692:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013696:	88db      	ldrh	r3, [r3, #6]
 8013698:	b29a      	uxth	r2, r3
 801369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369c:	889b      	ldrh	r3, [r3, #4]
 801369e:	b29b      	uxth	r3, r3
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d03d      	beq.n	8013720 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80136a4:	2300      	movs	r3, #0
 80136a6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80136a8:	e03a      	b.n	8013720 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80136aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ac:	88db      	ldrh	r3, [r3, #6]
 80136ae:	b29a      	uxth	r2, r3
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	889b      	ldrh	r3, [r3, #4]
 80136b4:	b29b      	uxth	r3, r3
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d902      	bls.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80136ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136be:	e0c5      	b.n	801384c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	68ba      	ldr	r2, [r7, #8]
 80136c4:	605a      	str	r2, [r3, #4]
      break;
 80136c6:	e02b      	b.n	8013720 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80136c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ca:	889b      	ldrh	r3, [r3, #4]
 80136cc:	b29a      	uxth	r2, r3
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	889b      	ldrh	r3, [r3, #4]
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d102      	bne.n	80136de <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80136d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136dc:	e0b6      	b.n	801384c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80136de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e0:	889b      	ldrh	r3, [r3, #4]
 80136e2:	b29a      	uxth	r2, r3
 80136e4:	693b      	ldr	r3, [r7, #16]
 80136e6:	88db      	ldrh	r3, [r3, #6]
 80136e8:	b29b      	uxth	r3, r3
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d202      	bcs.n	80136f4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80136ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136f2:	e0ab      	b.n	801384c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80136f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d009      	beq.n	801370e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80136fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fc:	88db      	ldrh	r3, [r3, #6]
 80136fe:	b29a      	uxth	r2, r3
 8013700:	693b      	ldr	r3, [r7, #16]
 8013702:	889b      	ldrh	r3, [r3, #4]
 8013704:	b29b      	uxth	r3, r3
 8013706:	429a      	cmp	r2, r3
 8013708:	d001      	beq.n	801370e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801370a:	2300      	movs	r3, #0
 801370c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801371a:	2b00      	cmp	r3, #0
 801371c:	d193      	bne.n	8013646 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801371e:	e000      	b.n	8013722 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013720:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013724:	2b00      	cmp	r3, #0
 8013726:	d12d      	bne.n	8013784 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801372a:	2b00      	cmp	r3, #0
 801372c:	d01c      	beq.n	8013768 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013730:	88db      	ldrh	r3, [r3, #6]
 8013732:	b29a      	uxth	r2, r3
 8013734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013736:	889b      	ldrh	r3, [r3, #4]
 8013738:	b29b      	uxth	r3, r3
 801373a:	429a      	cmp	r2, r3
 801373c:	d906      	bls.n	801374c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801373e:	4b45      	ldr	r3, [pc, #276]	; (8013854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013740:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013744:	4944      	ldr	r1, [pc, #272]	; (8013858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013746:	4845      	ldr	r0, [pc, #276]	; (801385c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013748:	f004 fadc 	bl	8017d04 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801374e:	68ba      	ldr	r2, [r7, #8]
 8013750:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013754:	88db      	ldrh	r3, [r3, #6]
 8013756:	b29a      	uxth	r2, r3
 8013758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801375a:	889b      	ldrh	r3, [r3, #4]
 801375c:	b29b      	uxth	r3, r3
 801375e:	429a      	cmp	r2, r3
 8013760:	d010      	beq.n	8013784 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013762:	2300      	movs	r3, #0
 8013764:	623b      	str	r3, [r7, #32]
 8013766:	e00d      	b.n	8013784 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	685b      	ldr	r3, [r3, #4]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d006      	beq.n	801377e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013770:	4b38      	ldr	r3, [pc, #224]	; (8013854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013772:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013776:	493a      	ldr	r1, [pc, #232]	; (8013860 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013778:	4838      	ldr	r0, [pc, #224]	; (801385c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801377a:	f004 fac3 	bl	8017d04 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	68ba      	ldr	r2, [r7, #8]
 8013782:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d105      	bne.n	8013796 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	7f9b      	ldrb	r3, [r3, #30]
 801378e:	f003 0301 	and.w	r3, r3, #1
 8013792:	2b00      	cmp	r3, #0
 8013794:	d059      	beq.n	801384a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013796:	6a3b      	ldr	r3, [r7, #32]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d04f      	beq.n	801383c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	685b      	ldr	r3, [r3, #4]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d006      	beq.n	80137b2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	685b      	ldr	r3, [r3, #4]
 80137a8:	685b      	ldr	r3, [r3, #4]
 80137aa:	889b      	ldrh	r3, [r3, #4]
 80137ac:	b29b      	uxth	r3, r3
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d002      	beq.n	80137b8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80137b2:	2300      	movs	r3, #0
 80137b4:	623b      	str	r3, [r7, #32]
 80137b6:	e041      	b.n	801383c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80137b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80137bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80137c2:	e012      	b.n	80137ea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80137c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c6:	685b      	ldr	r3, [r3, #4]
 80137c8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80137ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137cc:	88db      	ldrh	r3, [r3, #6]
 80137ce:	b29a      	uxth	r2, r3
 80137d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d2:	889b      	ldrh	r3, [r3, #4]
 80137d4:	b29b      	uxth	r3, r3
 80137d6:	429a      	cmp	r2, r3
 80137d8:	d002      	beq.n	80137e0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80137da:	2300      	movs	r3, #0
 80137dc:	623b      	str	r3, [r7, #32]
            break;
 80137de:	e007      	b.n	80137f0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80137e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80137e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80137ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d1e9      	bne.n	80137c4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80137f0:	6a3b      	ldr	r3, [r7, #32]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d022      	beq.n	801383c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	685b      	ldr	r3, [r3, #4]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d106      	bne.n	801380c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80137fe:	4b15      	ldr	r3, [pc, #84]	; (8013854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013800:	f240 12df 	movw	r2, #479	; 0x1df
 8013804:	4917      	ldr	r1, [pc, #92]	; (8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013806:	4815      	ldr	r0, [pc, #84]	; (801385c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013808:	f004 fa7c 	bl	8017d04 <iprintf>
          LWIP_ASSERT("sanity check",
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	685b      	ldr	r3, [r3, #4]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013814:	429a      	cmp	r2, r3
 8013816:	d106      	bne.n	8013826 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013818:	4b0e      	ldr	r3, [pc, #56]	; (8013854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801381a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801381e:	4911      	ldr	r1, [pc, #68]	; (8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013820:	480e      	ldr	r0, [pc, #56]	; (801385c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013822:	f004 fa6f 	bl	8017d04 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d006      	beq.n	801383c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801382e:	4b09      	ldr	r3, [pc, #36]	; (8013854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013830:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013834:	490c      	ldr	r1, [pc, #48]	; (8013868 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013836:	4809      	ldr	r0, [pc, #36]	; (801385c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013838:	f004 fa64 	bl	8017d04 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801383c:	6a3b      	ldr	r3, [r7, #32]
 801383e:	2b00      	cmp	r3, #0
 8013840:	bf14      	ite	ne
 8013842:	2301      	movne	r3, #1
 8013844:	2300      	moveq	r3, #0
 8013846:	b2db      	uxtb	r3, r3
 8013848:	e000      	b.n	801384c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801384a:	2300      	movs	r3, #0
}
 801384c:	4618      	mov	r0, r3
 801384e:	3730      	adds	r7, #48	; 0x30
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}
 8013854:	0801d284 	.word	0x0801d284
 8013858:	0801d368 	.word	0x0801d368
 801385c:	0801d2cc 	.word	0x0801d2cc
 8013860:	0801d388 	.word	0x0801d388
 8013864:	0801d3c0 	.word	0x0801d3c0
 8013868:	0801d3d0 	.word	0x0801d3d0

0801386c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b08e      	sub	sp, #56	; 0x38
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801387c:	781b      	ldrb	r3, [r3, #0]
 801387e:	f003 030f 	and.w	r3, r3, #15
 8013882:	b2db      	uxtb	r3, r3
 8013884:	009b      	lsls	r3, r3, #2
 8013886:	b2db      	uxtb	r3, r3
 8013888:	2b14      	cmp	r3, #20
 801388a:	f040 8167 	bne.w	8013b5c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013890:	88db      	ldrh	r3, [r3, #6]
 8013892:	b29b      	uxth	r3, r3
 8013894:	4618      	mov	r0, r3
 8013896:	f7f6 faa5 	bl	8009de4 <lwip_htons>
 801389a:	4603      	mov	r3, r0
 801389c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138a0:	b29b      	uxth	r3, r3
 80138a2:	00db      	lsls	r3, r3, #3
 80138a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80138a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138a8:	885b      	ldrh	r3, [r3, #2]
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7f6 fa99 	bl	8009de4 <lwip_htons>
 80138b2:	4603      	mov	r3, r0
 80138b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80138b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138b8:	781b      	ldrb	r3, [r3, #0]
 80138ba:	f003 030f 	and.w	r3, r3, #15
 80138be:	b2db      	uxtb	r3, r3
 80138c0:	009b      	lsls	r3, r3, #2
 80138c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80138c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80138ca:	b29b      	uxth	r3, r3
 80138cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80138ce:	429a      	cmp	r2, r3
 80138d0:	f0c0 8146 	bcc.w	8013b60 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80138d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80138d8:	b29b      	uxth	r3, r3
 80138da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80138dc:	1ad3      	subs	r3, r2, r3
 80138de:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f7f7 fefb 	bl	800b6dc <pbuf_clen>
 80138e6:	4603      	mov	r3, r0
 80138e8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80138ea:	4b9f      	ldr	r3, [pc, #636]	; (8013b68 <ip4_reass+0x2fc>)
 80138ec:	881b      	ldrh	r3, [r3, #0]
 80138ee:	461a      	mov	r2, r3
 80138f0:	8c3b      	ldrh	r3, [r7, #32]
 80138f2:	4413      	add	r3, r2
 80138f4:	2b0a      	cmp	r3, #10
 80138f6:	dd10      	ble.n	801391a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80138f8:	8c3b      	ldrh	r3, [r7, #32]
 80138fa:	4619      	mov	r1, r3
 80138fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138fe:	f7ff fd81 	bl	8013404 <ip_reass_remove_oldest_datagram>
 8013902:	4603      	mov	r3, r0
 8013904:	2b00      	cmp	r3, #0
 8013906:	f000 812d 	beq.w	8013b64 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801390a:	4b97      	ldr	r3, [pc, #604]	; (8013b68 <ip4_reass+0x2fc>)
 801390c:	881b      	ldrh	r3, [r3, #0]
 801390e:	461a      	mov	r2, r3
 8013910:	8c3b      	ldrh	r3, [r7, #32]
 8013912:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013914:	2b0a      	cmp	r3, #10
 8013916:	f300 8125 	bgt.w	8013b64 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801391a:	4b94      	ldr	r3, [pc, #592]	; (8013b6c <ip4_reass+0x300>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	633b      	str	r3, [r7, #48]	; 0x30
 8013920:	e015      	b.n	801394e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013924:	695a      	ldr	r2, [r3, #20]
 8013926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013928:	68db      	ldr	r3, [r3, #12]
 801392a:	429a      	cmp	r2, r3
 801392c:	d10c      	bne.n	8013948 <ip4_reass+0xdc>
 801392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013930:	699a      	ldr	r2, [r3, #24]
 8013932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013934:	691b      	ldr	r3, [r3, #16]
 8013936:	429a      	cmp	r2, r3
 8013938:	d106      	bne.n	8013948 <ip4_reass+0xdc>
 801393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393c:	899a      	ldrh	r2, [r3, #12]
 801393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013940:	889b      	ldrh	r3, [r3, #4]
 8013942:	b29b      	uxth	r3, r3
 8013944:	429a      	cmp	r2, r3
 8013946:	d006      	beq.n	8013956 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	633b      	str	r3, [r7, #48]	; 0x30
 801394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013950:	2b00      	cmp	r3, #0
 8013952:	d1e6      	bne.n	8013922 <ip4_reass+0xb6>
 8013954:	e000      	b.n	8013958 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013956:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801395a:	2b00      	cmp	r3, #0
 801395c:	d109      	bne.n	8013972 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801395e:	8c3b      	ldrh	r3, [r7, #32]
 8013960:	4619      	mov	r1, r3
 8013962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013964:	f7ff fdb0 	bl	80134c8 <ip_reass_enqueue_new_datagram>
 8013968:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396c:	2b00      	cmp	r3, #0
 801396e:	d11c      	bne.n	80139aa <ip4_reass+0x13e>
      goto nullreturn;
 8013970:	e109      	b.n	8013b86 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013974:	88db      	ldrh	r3, [r3, #6]
 8013976:	b29b      	uxth	r3, r3
 8013978:	4618      	mov	r0, r3
 801397a:	f7f6 fa33 	bl	8009de4 <lwip_htons>
 801397e:	4603      	mov	r3, r0
 8013980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013984:	2b00      	cmp	r3, #0
 8013986:	d110      	bne.n	80139aa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801398a:	89db      	ldrh	r3, [r3, #14]
 801398c:	4618      	mov	r0, r3
 801398e:	f7f6 fa29 	bl	8009de4 <lwip_htons>
 8013992:	4603      	mov	r3, r0
 8013994:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013998:	2b00      	cmp	r3, #0
 801399a:	d006      	beq.n	80139aa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399e:	3308      	adds	r3, #8
 80139a0:	2214      	movs	r2, #20
 80139a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80139a4:	4618      	mov	r0, r3
 80139a6:	f004 f8d3 	bl	8017b50 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80139aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ac:	88db      	ldrh	r3, [r3, #6]
 80139ae:	b29b      	uxth	r3, r3
 80139b0:	f003 0320 	and.w	r3, r3, #32
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	bf0c      	ite	eq
 80139b8:	2301      	moveq	r3, #1
 80139ba:	2300      	movne	r3, #0
 80139bc:	b2db      	uxtb	r3, r3
 80139be:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80139c0:	69fb      	ldr	r3, [r7, #28]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d00e      	beq.n	80139e4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80139c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80139c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139ca:	4413      	add	r3, r2
 80139cc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80139ce:	8b7a      	ldrh	r2, [r7, #26]
 80139d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80139d2:	429a      	cmp	r2, r3
 80139d4:	f0c0 80a0 	bcc.w	8013b18 <ip4_reass+0x2ac>
 80139d8:	8b7b      	ldrh	r3, [r7, #26]
 80139da:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80139de:	4293      	cmp	r3, r2
 80139e0:	f200 809a 	bhi.w	8013b18 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80139e4:	69fa      	ldr	r2, [r7, #28]
 80139e6:	6879      	ldr	r1, [r7, #4]
 80139e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139ea:	f7ff fdd5 	bl	8013598 <ip_reass_chain_frag_into_datagram_and_validate>
 80139ee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80139f6:	f000 8091 	beq.w	8013b1c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80139fa:	4b5b      	ldr	r3, [pc, #364]	; (8013b68 <ip4_reass+0x2fc>)
 80139fc:	881a      	ldrh	r2, [r3, #0]
 80139fe:	8c3b      	ldrh	r3, [r7, #32]
 8013a00:	4413      	add	r3, r2
 8013a02:	b29a      	uxth	r2, r3
 8013a04:	4b58      	ldr	r3, [pc, #352]	; (8013b68 <ip4_reass+0x2fc>)
 8013a06:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d00d      	beq.n	8013a2a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013a0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a12:	4413      	add	r3, r2
 8013a14:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a18:	8a7a      	ldrh	r2, [r7, #18]
 8013a1a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a1e:	7f9b      	ldrb	r3, [r3, #30]
 8013a20:	f043 0301 	orr.w	r3, r3, #1
 8013a24:	b2da      	uxtb	r2, r3
 8013a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a28:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	2b01      	cmp	r3, #1
 8013a2e:	d171      	bne.n	8013b14 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a32:	8b9b      	ldrh	r3, [r3, #28]
 8013a34:	3314      	adds	r3, #20
 8013a36:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a3a:	685b      	ldr	r3, [r3, #4]
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a44:	685b      	ldr	r3, [r3, #4]
 8013a46:	685b      	ldr	r3, [r3, #4]
 8013a48:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a4c:	3308      	adds	r3, #8
 8013a4e:	2214      	movs	r2, #20
 8013a50:	4619      	mov	r1, r3
 8013a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a54:	f004 f87c 	bl	8017b50 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013a58:	8a3b      	ldrh	r3, [r7, #16]
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7f6 f9c2 	bl	8009de4 <lwip_htons>
 8013a60:	4603      	mov	r3, r0
 8013a62:	461a      	mov	r2, r3
 8013a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a66:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	719a      	strb	r2, [r3, #6]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a74:	2200      	movs	r2, #0
 8013a76:	729a      	strb	r2, [r3, #10]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a7e:	685b      	ldr	r3, [r3, #4]
 8013a80:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013a82:	e00d      	b.n	8013aa0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a86:	685b      	ldr	r3, [r3, #4]
 8013a88:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013a8a:	2114      	movs	r1, #20
 8013a8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013a8e:	f7f7 fd11 	bl	800b4b4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013a92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f7f7 fe61 	bl	800b75c <pbuf_cat>
      r = iprh->next_pbuf;
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d1ee      	bne.n	8013a84 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013aa6:	4b31      	ldr	r3, [pc, #196]	; (8013b6c <ip4_reass+0x300>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d102      	bne.n	8013ab6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ab4:	e010      	b.n	8013ad8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013ab6:	4b2d      	ldr	r3, [pc, #180]	; (8013b6c <ip4_reass+0x300>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013abc:	e007      	b.n	8013ace <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d006      	beq.n	8013ad6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d1f4      	bne.n	8013abe <ip4_reass+0x252>
 8013ad4:	e000      	b.n	8013ad8 <ip4_reass+0x26c>
          break;
 8013ad6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013adc:	f7ff fd2e 	bl	801353c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7f7 fdfb 	bl	800b6dc <pbuf_clen>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013aea:	4b1f      	ldr	r3, [pc, #124]	; (8013b68 <ip4_reass+0x2fc>)
 8013aec:	881b      	ldrh	r3, [r3, #0]
 8013aee:	8c3a      	ldrh	r2, [r7, #32]
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d906      	bls.n	8013b02 <ip4_reass+0x296>
 8013af4:	4b1e      	ldr	r3, [pc, #120]	; (8013b70 <ip4_reass+0x304>)
 8013af6:	f240 229b 	movw	r2, #667	; 0x29b
 8013afa:	491e      	ldr	r1, [pc, #120]	; (8013b74 <ip4_reass+0x308>)
 8013afc:	481e      	ldr	r0, [pc, #120]	; (8013b78 <ip4_reass+0x30c>)
 8013afe:	f004 f901 	bl	8017d04 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013b02:	4b19      	ldr	r3, [pc, #100]	; (8013b68 <ip4_reass+0x2fc>)
 8013b04:	881a      	ldrh	r2, [r3, #0]
 8013b06:	8c3b      	ldrh	r3, [r7, #32]
 8013b08:	1ad3      	subs	r3, r2, r3
 8013b0a:	b29a      	uxth	r2, r3
 8013b0c:	4b16      	ldr	r3, [pc, #88]	; (8013b68 <ip4_reass+0x2fc>)
 8013b0e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	e03c      	b.n	8013b8e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013b14:	2300      	movs	r3, #0
 8013b16:	e03a      	b.n	8013b8e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8013b18:	bf00      	nop
 8013b1a:	e000      	b.n	8013b1e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013b1c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d106      	bne.n	8013b32 <ip4_reass+0x2c6>
 8013b24:	4b12      	ldr	r3, [pc, #72]	; (8013b70 <ip4_reass+0x304>)
 8013b26:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013b2a:	4914      	ldr	r1, [pc, #80]	; (8013b7c <ip4_reass+0x310>)
 8013b2c:	4812      	ldr	r0, [pc, #72]	; (8013b78 <ip4_reass+0x30c>)
 8013b2e:	f004 f8e9 	bl	8017d04 <iprintf>
  if (ipr->p == NULL) {
 8013b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d124      	bne.n	8013b84 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013b3a:	4b0c      	ldr	r3, [pc, #48]	; (8013b6c <ip4_reass+0x300>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b40:	429a      	cmp	r2, r3
 8013b42:	d006      	beq.n	8013b52 <ip4_reass+0x2e6>
 8013b44:	4b0a      	ldr	r3, [pc, #40]	; (8013b70 <ip4_reass+0x304>)
 8013b46:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013b4a:	490d      	ldr	r1, [pc, #52]	; (8013b80 <ip4_reass+0x314>)
 8013b4c:	480a      	ldr	r0, [pc, #40]	; (8013b78 <ip4_reass+0x30c>)
 8013b4e:	f004 f8d9 	bl	8017d04 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013b52:	2100      	movs	r1, #0
 8013b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b56:	f7ff fcf1 	bl	801353c <ip_reass_dequeue_datagram>
 8013b5a:	e014      	b.n	8013b86 <ip4_reass+0x31a>
    goto nullreturn;
 8013b5c:	bf00      	nop
 8013b5e:	e012      	b.n	8013b86 <ip4_reass+0x31a>
    goto nullreturn;
 8013b60:	bf00      	nop
 8013b62:	e010      	b.n	8013b86 <ip4_reass+0x31a>
      goto nullreturn;
 8013b64:	bf00      	nop
 8013b66:	e00e      	b.n	8013b86 <ip4_reass+0x31a>
 8013b68:	2400b7d0 	.word	0x2400b7d0
 8013b6c:	2400b7cc 	.word	0x2400b7cc
 8013b70:	0801d284 	.word	0x0801d284
 8013b74:	0801d3f4 	.word	0x0801d3f4
 8013b78:	0801d2cc 	.word	0x0801d2cc
 8013b7c:	0801d410 	.word	0x0801d410
 8013b80:	0801d41c 	.word	0x0801d41c
  }

nullreturn:
 8013b84:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013b86:	6878      	ldr	r0, [r7, #4]
 8013b88:	f7f7 fd1a 	bl	800b5c0 <pbuf_free>
  return NULL;
 8013b8c:	2300      	movs	r3, #0
}
 8013b8e:	4618      	mov	r0, r3
 8013b90:	3738      	adds	r7, #56	; 0x38
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
 8013b96:	bf00      	nop

08013b98 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013b9c:	2005      	movs	r0, #5
 8013b9e:	f7f6 fdf5 	bl	800a78c <memp_malloc>
 8013ba2:	4603      	mov	r3, r0
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	bd80      	pop	{r7, pc}

08013ba8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b082      	sub	sp, #8
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d106      	bne.n	8013bc4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013bb6:	4b07      	ldr	r3, [pc, #28]	; (8013bd4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013bb8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013bbc:	4906      	ldr	r1, [pc, #24]	; (8013bd8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013bbe:	4807      	ldr	r0, [pc, #28]	; (8013bdc <ip_frag_free_pbuf_custom_ref+0x34>)
 8013bc0:	f004 f8a0 	bl	8017d04 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013bc4:	6879      	ldr	r1, [r7, #4]
 8013bc6:	2005      	movs	r0, #5
 8013bc8:	f7f6 fe56 	bl	800a878 <memp_free>
}
 8013bcc:	bf00      	nop
 8013bce:	3708      	adds	r7, #8
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}
 8013bd4:	0801d284 	.word	0x0801d284
 8013bd8:	0801d43c 	.word	0x0801d43c
 8013bdc:	0801d2cc 	.word	0x0801d2cc

08013be0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b084      	sub	sp, #16
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d106      	bne.n	8013c00 <ipfrag_free_pbuf_custom+0x20>
 8013bf2:	4b11      	ldr	r3, [pc, #68]	; (8013c38 <ipfrag_free_pbuf_custom+0x58>)
 8013bf4:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013bf8:	4910      	ldr	r1, [pc, #64]	; (8013c3c <ipfrag_free_pbuf_custom+0x5c>)
 8013bfa:	4811      	ldr	r0, [pc, #68]	; (8013c40 <ipfrag_free_pbuf_custom+0x60>)
 8013bfc:	f004 f882 	bl	8017d04 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013c00:	68fa      	ldr	r2, [r7, #12]
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d006      	beq.n	8013c16 <ipfrag_free_pbuf_custom+0x36>
 8013c08:	4b0b      	ldr	r3, [pc, #44]	; (8013c38 <ipfrag_free_pbuf_custom+0x58>)
 8013c0a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013c0e:	490d      	ldr	r1, [pc, #52]	; (8013c44 <ipfrag_free_pbuf_custom+0x64>)
 8013c10:	480b      	ldr	r0, [pc, #44]	; (8013c40 <ipfrag_free_pbuf_custom+0x60>)
 8013c12:	f004 f877 	bl	8017d04 <iprintf>
  if (pcr->original != NULL) {
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	695b      	ldr	r3, [r3, #20]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d004      	beq.n	8013c28 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	695b      	ldr	r3, [r3, #20]
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7f7 fccc 	bl	800b5c0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013c28:	68f8      	ldr	r0, [r7, #12]
 8013c2a:	f7ff ffbd 	bl	8013ba8 <ip_frag_free_pbuf_custom_ref>
}
 8013c2e:	bf00      	nop
 8013c30:	3710      	adds	r7, #16
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}
 8013c36:	bf00      	nop
 8013c38:	0801d284 	.word	0x0801d284
 8013c3c:	0801d448 	.word	0x0801d448
 8013c40:	0801d2cc 	.word	0x0801d2cc
 8013c44:	0801d454 	.word	0x0801d454

08013c48 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b094      	sub	sp, #80	; 0x50
 8013c4c:	af02      	add	r7, sp, #8
 8013c4e:	60f8      	str	r0, [r7, #12]
 8013c50:	60b9      	str	r1, [r7, #8]
 8013c52:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013c54:	2300      	movs	r3, #0
 8013c56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013c5a:	68bb      	ldr	r3, [r7, #8]
 8013c5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013c5e:	3b14      	subs	r3, #20
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	da00      	bge.n	8013c66 <ip4_frag+0x1e>
 8013c64:	3307      	adds	r3, #7
 8013c66:	10db      	asrs	r3, r3, #3
 8013c68:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013c6a:	2314      	movs	r3, #20
 8013c6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c76:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	f003 030f 	and.w	r3, r3, #15
 8013c80:	b2db      	uxtb	r3, r3
 8013c82:	009b      	lsls	r3, r3, #2
 8013c84:	b2db      	uxtb	r3, r3
 8013c86:	2b14      	cmp	r3, #20
 8013c88:	d002      	beq.n	8013c90 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013c8a:	f06f 0305 	mvn.w	r3, #5
 8013c8e:	e110      	b.n	8013eb2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	895b      	ldrh	r3, [r3, #10]
 8013c94:	2b13      	cmp	r3, #19
 8013c96:	d809      	bhi.n	8013cac <ip4_frag+0x64>
 8013c98:	4b88      	ldr	r3, [pc, #544]	; (8013ebc <ip4_frag+0x274>)
 8013c9a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013c9e:	4988      	ldr	r1, [pc, #544]	; (8013ec0 <ip4_frag+0x278>)
 8013ca0:	4888      	ldr	r0, [pc, #544]	; (8013ec4 <ip4_frag+0x27c>)
 8013ca2:	f004 f82f 	bl	8017d04 <iprintf>
 8013ca6:	f06f 0305 	mvn.w	r3, #5
 8013caa:	e102      	b.n	8013eb2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cae:	88db      	ldrh	r3, [r3, #6]
 8013cb0:	b29b      	uxth	r3, r3
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7f6 f896 	bl	8009de4 <lwip_htons>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013cbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013cbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013cc2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013cc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013ccc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	891b      	ldrh	r3, [r3, #8]
 8013cd2:	3b14      	subs	r3, #20
 8013cd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013cd8:	e0e1      	b.n	8013e9e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013cda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013cdc:	00db      	lsls	r3, r3, #3
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ce4:	4293      	cmp	r3, r2
 8013ce6:	bf28      	it	cs
 8013ce8:	4613      	movcs	r3, r2
 8013cea:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013cec:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013cf0:	2114      	movs	r1, #20
 8013cf2:	200e      	movs	r0, #14
 8013cf4:	f7f7 f980 	bl	800aff8 <pbuf_alloc>
 8013cf8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	f000 80d5 	beq.w	8013eac <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d04:	895b      	ldrh	r3, [r3, #10]
 8013d06:	2b13      	cmp	r3, #19
 8013d08:	d806      	bhi.n	8013d18 <ip4_frag+0xd0>
 8013d0a:	4b6c      	ldr	r3, [pc, #432]	; (8013ebc <ip4_frag+0x274>)
 8013d0c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013d10:	496d      	ldr	r1, [pc, #436]	; (8013ec8 <ip4_frag+0x280>)
 8013d12:	486c      	ldr	r0, [pc, #432]	; (8013ec4 <ip4_frag+0x27c>)
 8013d14:	f003 fff6 	bl	8017d04 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d1a:	685b      	ldr	r3, [r3, #4]
 8013d1c:	2214      	movs	r2, #20
 8013d1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013d20:	4618      	mov	r0, r3
 8013d22:	f003 ff15 	bl	8017b50 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d28:	685b      	ldr	r3, [r3, #4]
 8013d2a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013d2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013d2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013d32:	e064      	b.n	8013dfe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	895a      	ldrh	r2, [r3, #10]
 8013d38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d3a:	1ad3      	subs	r3, r2, r3
 8013d3c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	895b      	ldrh	r3, [r3, #10]
 8013d42:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d906      	bls.n	8013d56 <ip4_frag+0x10e>
 8013d48:	4b5c      	ldr	r3, [pc, #368]	; (8013ebc <ip4_frag+0x274>)
 8013d4a:	f240 322d 	movw	r2, #813	; 0x32d
 8013d4e:	495f      	ldr	r1, [pc, #380]	; (8013ecc <ip4_frag+0x284>)
 8013d50:	485c      	ldr	r0, [pc, #368]	; (8013ec4 <ip4_frag+0x27c>)
 8013d52:	f003 ffd7 	bl	8017d04 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013d56:	8bfa      	ldrh	r2, [r7, #30]
 8013d58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013d5c:	4293      	cmp	r3, r2
 8013d5e:	bf28      	it	cs
 8013d60:	4613      	movcs	r3, r2
 8013d62:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013d66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d105      	bne.n	8013d7a <ip4_frag+0x132>
        poff = 0;
 8013d6e:	2300      	movs	r3, #0
 8013d70:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	60fb      	str	r3, [r7, #12]
        continue;
 8013d78:	e041      	b.n	8013dfe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013d7a:	f7ff ff0d 	bl	8013b98 <ip_frag_alloc_pbuf_custom_ref>
 8013d7e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013d80:	69bb      	ldr	r3, [r7, #24]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d103      	bne.n	8013d8e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013d86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d88:	f7f7 fc1a 	bl	800b5c0 <pbuf_free>
        goto memerr;
 8013d8c:	e08f      	b.n	8013eae <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013d8e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013d94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d96:	4413      	add	r3, r2
 8013d98:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013d9c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013da0:	9201      	str	r2, [sp, #4]
 8013da2:	9300      	str	r3, [sp, #0]
 8013da4:	4603      	mov	r3, r0
 8013da6:	2241      	movs	r2, #65	; 0x41
 8013da8:	2000      	movs	r0, #0
 8013daa:	f7f7 fa4f 	bl	800b24c <pbuf_alloced_custom>
 8013dae:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013db0:	697b      	ldr	r3, [r7, #20]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d106      	bne.n	8013dc4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013db6:	69b8      	ldr	r0, [r7, #24]
 8013db8:	f7ff fef6 	bl	8013ba8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013dbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013dbe:	f7f7 fbff 	bl	800b5c0 <pbuf_free>
        goto memerr;
 8013dc2:	e074      	b.n	8013eae <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013dc4:	68f8      	ldr	r0, [r7, #12]
 8013dc6:	f7f7 fca1 	bl	800b70c <pbuf_ref>
      pcr->original = p;
 8013dca:	69bb      	ldr	r3, [r7, #24]
 8013dcc:	68fa      	ldr	r2, [r7, #12]
 8013dce:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013dd0:	69bb      	ldr	r3, [r7, #24]
 8013dd2:	4a3f      	ldr	r2, [pc, #252]	; (8013ed0 <ip4_frag+0x288>)
 8013dd4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013dd6:	6979      	ldr	r1, [r7, #20]
 8013dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013dda:	f7f7 fcbf 	bl	800b75c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013dde:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013de2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013de6:	1ad3      	subs	r3, r2, r3
 8013de8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013dec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d004      	beq.n	8013dfe <ip4_frag+0x1b6>
        poff = 0;
 8013df4:	2300      	movs	r3, #0
 8013df6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013dfe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d196      	bne.n	8013d34 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013e06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013e08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013e0c:	4413      	add	r3, r2
 8013e0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013e14:	f1a3 0213 	sub.w	r2, r3, #19
 8013e18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	bfcc      	ite	gt
 8013e20:	2301      	movgt	r3, #1
 8013e22:	2300      	movle	r3, #0
 8013e24:	b2db      	uxtb	r3, r3
 8013e26:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013e28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e30:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013e32:	6a3b      	ldr	r3, [r7, #32]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d002      	beq.n	8013e3e <ip4_frag+0x1f6>
 8013e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d003      	beq.n	8013e46 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013e3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013e40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013e44:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013e46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f7f5 ffcb 	bl	8009de4 <lwip_htons>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	461a      	mov	r2, r3
 8013e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e54:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013e56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013e58:	3314      	adds	r3, #20
 8013e5a:	b29b      	uxth	r3, r3
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f7f5 ffc1 	bl	8009de4 <lwip_htons>
 8013e62:	4603      	mov	r3, r0
 8013e64:	461a      	mov	r2, r3
 8013e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e68:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	729a      	strb	r2, [r3, #10]
 8013e70:	2200      	movs	r2, #0
 8013e72:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	695b      	ldr	r3, [r3, #20]
 8013e78:	687a      	ldr	r2, [r7, #4]
 8013e7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013e7c:	68b8      	ldr	r0, [r7, #8]
 8013e7e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e82:	f7f7 fb9d 	bl	800b5c0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013e86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013e8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013e8c:	1ad3      	subs	r3, r2, r3
 8013e8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013e92:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013e96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e98:	4413      	add	r3, r2
 8013e9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013e9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	f47f af19 	bne.w	8013cda <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	e002      	b.n	8013eb2 <ip4_frag+0x26a>
      goto memerr;
 8013eac:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3748      	adds	r7, #72	; 0x48
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}
 8013eba:	bf00      	nop
 8013ebc:	0801d284 	.word	0x0801d284
 8013ec0:	0801d460 	.word	0x0801d460
 8013ec4:	0801d2cc 	.word	0x0801d2cc
 8013ec8:	0801d47c 	.word	0x0801d47c
 8013ecc:	0801d49c 	.word	0x0801d49c
 8013ed0:	08013be1 	.word	0x08013be1

08013ed4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b086      	sub	sp, #24
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013ede:	230e      	movs	r3, #14
 8013ee0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	895b      	ldrh	r3, [r3, #10]
 8013ee6:	2b0e      	cmp	r3, #14
 8013ee8:	d96e      	bls.n	8013fc8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	7bdb      	ldrb	r3, [r3, #15]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d106      	bne.n	8013f00 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ef8:	3301      	adds	r3, #1
 8013efa:	b2da      	uxtb	r2, r3
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	685b      	ldr	r3, [r3, #4]
 8013f04:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	7b1a      	ldrb	r2, [r3, #12]
 8013f0a:	7b5b      	ldrb	r3, [r3, #13]
 8013f0c:	021b      	lsls	r3, r3, #8
 8013f0e:	4313      	orrs	r3, r2
 8013f10:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013f12:	693b      	ldr	r3, [r7, #16]
 8013f14:	781b      	ldrb	r3, [r3, #0]
 8013f16:	f003 0301 	and.w	r3, r3, #1
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d023      	beq.n	8013f66 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	781b      	ldrb	r3, [r3, #0]
 8013f22:	2b01      	cmp	r3, #1
 8013f24:	d10f      	bne.n	8013f46 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013f26:	693b      	ldr	r3, [r7, #16]
 8013f28:	785b      	ldrb	r3, [r3, #1]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d11b      	bne.n	8013f66 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013f2e:	693b      	ldr	r3, [r7, #16]
 8013f30:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013f32:	2b5e      	cmp	r3, #94	; 0x5e
 8013f34:	d117      	bne.n	8013f66 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	7b5b      	ldrb	r3, [r3, #13]
 8013f3a:	f043 0310 	orr.w	r3, r3, #16
 8013f3e:	b2da      	uxtb	r2, r3
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	735a      	strb	r2, [r3, #13]
 8013f44:	e00f      	b.n	8013f66 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	2206      	movs	r2, #6
 8013f4a:	4928      	ldr	r1, [pc, #160]	; (8013fec <ethernet_input+0x118>)
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f003 fdf1 	bl	8017b34 <memcmp>
 8013f52:	4603      	mov	r3, r0
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d106      	bne.n	8013f66 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	7b5b      	ldrb	r3, [r3, #13]
 8013f5c:	f043 0308 	orr.w	r3, r3, #8
 8013f60:	b2da      	uxtb	r2, r3
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013f66:	89fb      	ldrh	r3, [r7, #14]
 8013f68:	2b08      	cmp	r3, #8
 8013f6a:	d003      	beq.n	8013f74 <ethernet_input+0xa0>
 8013f6c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013f70:	d014      	beq.n	8013f9c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013f72:	e032      	b.n	8013fda <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013f7a:	f003 0308 	and.w	r3, r3, #8
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d024      	beq.n	8013fcc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013f82:	8afb      	ldrh	r3, [r7, #22]
 8013f84:	4619      	mov	r1, r3
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f7f7 fa94 	bl	800b4b4 <pbuf_remove_header>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d11e      	bne.n	8013fd0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013f92:	6839      	ldr	r1, [r7, #0]
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f7fe ff27 	bl	8012de8 <ip4_input>
      break;
 8013f9a:	e013      	b.n	8013fc4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013fa2:	f003 0308 	and.w	r3, r3, #8
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d014      	beq.n	8013fd4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013faa:	8afb      	ldrh	r3, [r7, #22]
 8013fac:	4619      	mov	r1, r3
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f7f7 fa80 	bl	800b4b4 <pbuf_remove_header>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d10e      	bne.n	8013fd8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013fba:	6839      	ldr	r1, [r7, #0]
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f7fe f8c7 	bl	8012150 <etharp_input>
      break;
 8013fc2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	e00c      	b.n	8013fe2 <ethernet_input+0x10e>
    goto free_and_return;
 8013fc8:	bf00      	nop
 8013fca:	e006      	b.n	8013fda <ethernet_input+0x106>
        goto free_and_return;
 8013fcc:	bf00      	nop
 8013fce:	e004      	b.n	8013fda <ethernet_input+0x106>
        goto free_and_return;
 8013fd0:	bf00      	nop
 8013fd2:	e002      	b.n	8013fda <ethernet_input+0x106>
        goto free_and_return;
 8013fd4:	bf00      	nop
 8013fd6:	e000      	b.n	8013fda <ethernet_input+0x106>
        goto free_and_return;
 8013fd8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	f7f7 faf0 	bl	800b5c0 <pbuf_free>
  return ERR_OK;
 8013fe0:	2300      	movs	r3, #0
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3718      	adds	r7, #24
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}
 8013fea:	bf00      	nop
 8013fec:	0801d934 	.word	0x0801d934

08013ff0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b086      	sub	sp, #24
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	60f8      	str	r0, [r7, #12]
 8013ff8:	60b9      	str	r1, [r7, #8]
 8013ffa:	607a      	str	r2, [r7, #4]
 8013ffc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013ffe:	8c3b      	ldrh	r3, [r7, #32]
 8014000:	4618      	mov	r0, r3
 8014002:	f7f5 feef 	bl	8009de4 <lwip_htons>
 8014006:	4603      	mov	r3, r0
 8014008:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801400a:	210e      	movs	r1, #14
 801400c:	68b8      	ldr	r0, [r7, #8]
 801400e:	f7f7 fa41 	bl	800b494 <pbuf_add_header>
 8014012:	4603      	mov	r3, r0
 8014014:	2b00      	cmp	r3, #0
 8014016:	d125      	bne.n	8014064 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	685b      	ldr	r3, [r3, #4]
 801401c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	8afa      	ldrh	r2, [r7, #22]
 8014022:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014024:	693b      	ldr	r3, [r7, #16]
 8014026:	2206      	movs	r2, #6
 8014028:	6839      	ldr	r1, [r7, #0]
 801402a:	4618      	mov	r0, r3
 801402c:	f003 fd90 	bl	8017b50 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	3306      	adds	r3, #6
 8014034:	2206      	movs	r2, #6
 8014036:	6879      	ldr	r1, [r7, #4]
 8014038:	4618      	mov	r0, r3
 801403a:	f003 fd89 	bl	8017b50 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014044:	2b06      	cmp	r3, #6
 8014046:	d006      	beq.n	8014056 <ethernet_output+0x66>
 8014048:	4b0a      	ldr	r3, [pc, #40]	; (8014074 <ethernet_output+0x84>)
 801404a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801404e:	490a      	ldr	r1, [pc, #40]	; (8014078 <ethernet_output+0x88>)
 8014050:	480a      	ldr	r0, [pc, #40]	; (801407c <ethernet_output+0x8c>)
 8014052:	f003 fe57 	bl	8017d04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	699b      	ldr	r3, [r3, #24]
 801405a:	68b9      	ldr	r1, [r7, #8]
 801405c:	68f8      	ldr	r0, [r7, #12]
 801405e:	4798      	blx	r3
 8014060:	4603      	mov	r3, r0
 8014062:	e002      	b.n	801406a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014064:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014066:	f06f 0301 	mvn.w	r3, #1
}
 801406a:	4618      	mov	r0, r3
 801406c:	3718      	adds	r7, #24
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	0801d4ac 	.word	0x0801d4ac
 8014078:	0801d4e4 	.word	0x0801d4e4
 801407c:	0801d518 	.word	0x0801d518

08014080 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b082      	sub	sp, #8
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
 8014088:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801408a:	683b      	ldr	r3, [r7, #0]
 801408c:	2200      	movs	r2, #0
 801408e:	2104      	movs	r1, #4
 8014090:	4618      	mov	r0, r3
 8014092:	f7f2 fa31 	bl	80064f8 <osMessageQueueNew>
 8014096:	4602      	mov	r2, r0
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d102      	bne.n	80140aa <sys_mbox_new+0x2a>
    return ERR_MEM;
 80140a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140a8:	e000      	b.n	80140ac <sys_mbox_new+0x2c>

  return ERR_OK;
 80140aa:	2300      	movs	r3, #0
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3708      	adds	r7, #8
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}

080140b4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b084      	sub	sp, #16
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	6818      	ldr	r0, [r3, #0]
 80140c2:	4639      	mov	r1, r7
 80140c4:	2300      	movs	r3, #0
 80140c6:	2200      	movs	r2, #0
 80140c8:	f7f2 fa8a 	bl	80065e0 <osMessageQueuePut>
 80140cc:	4603      	mov	r3, r0
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d102      	bne.n	80140d8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80140d2:	2300      	movs	r3, #0
 80140d4:	73fb      	strb	r3, [r7, #15]
 80140d6:	e001      	b.n	80140dc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80140d8:	23ff      	movs	r3, #255	; 0xff
 80140da:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80140dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	3710      	adds	r7, #16
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b086      	sub	sp, #24
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	60f8      	str	r0, [r7, #12]
 80140f0:	60b9      	str	r1, [r7, #8]
 80140f2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80140f4:	f7f1 ff10 	bl	8005f18 <osKernelGetTickCount>
 80140f8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d013      	beq.n	8014128 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	6818      	ldr	r0, [r3, #0]
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	2200      	movs	r2, #0
 8014108:	68b9      	ldr	r1, [r7, #8]
 801410a:	f7f2 fac9 	bl	80066a0 <osMessageQueueGet>
 801410e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8014110:	693b      	ldr	r3, [r7, #16]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d105      	bne.n	8014122 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8014116:	f7f1 feff 	bl	8005f18 <osKernelGetTickCount>
 801411a:	4602      	mov	r2, r0
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	1ad3      	subs	r3, r2, r3
 8014120:	e00f      	b.n	8014142 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014126:	e00c      	b.n	8014142 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	6818      	ldr	r0, [r3, #0]
 801412c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014130:	2200      	movs	r2, #0
 8014132:	68b9      	ldr	r1, [r7, #8]
 8014134:	f7f2 fab4 	bl	80066a0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8014138:	f7f1 feee 	bl	8005f18 <osKernelGetTickCount>
 801413c:	4602      	mov	r2, r0
 801413e:	697b      	ldr	r3, [r7, #20]
 8014140:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8014142:	4618      	mov	r0, r3
 8014144:	3718      	adds	r7, #24
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}

0801414a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801414a:	b480      	push	{r7}
 801414c:	b083      	sub	sp, #12
 801414e:	af00      	add	r7, sp, #0
 8014150:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d101      	bne.n	801415e <sys_mbox_valid+0x14>
    return 0;
 801415a:	2300      	movs	r3, #0
 801415c:	e000      	b.n	8014160 <sys_mbox_valid+0x16>
  else
    return 1;
 801415e:	2301      	movs	r3, #1
}
 8014160:	4618      	mov	r0, r3
 8014162:	370c      	adds	r7, #12
 8014164:	46bd      	mov	sp, r7
 8014166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416a:	4770      	bx	lr

0801416c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8014170:	2000      	movs	r0, #0
 8014172:	f7f1 ff94 	bl	800609e <osMutexNew>
 8014176:	4603      	mov	r3, r0
 8014178:	4a01      	ldr	r2, [pc, #4]	; (8014180 <sys_init+0x14>)
 801417a:	6013      	str	r3, [r2, #0]
#endif
}
 801417c:	bf00      	nop
 801417e:	bd80      	pop	{r7, pc}
 8014180:	2400ee2c 	.word	0x2400ee2c

08014184 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014184:	b580      	push	{r7, lr}
 8014186:	b082      	sub	sp, #8
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801418c:	2000      	movs	r0, #0
 801418e:	f7f1 ff86 	bl	800609e <osMutexNew>
 8014192:	4602      	mov	r2, r0
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d102      	bne.n	80141a6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80141a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141a4:	e000      	b.n	80141a8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80141a6:	2300      	movs	r3, #0
}
 80141a8:	4618      	mov	r0, r3
 80141aa:	3708      	adds	r7, #8
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}

080141b0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b082      	sub	sp, #8
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7f1 fff2 	bl	80061aa <osMutexAcquire>
#endif
}
 80141c6:	bf00      	nop
 80141c8:	3708      	adds	r7, #8
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}

080141ce <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80141ce:	b580      	push	{r7, lr}
 80141d0:	b082      	sub	sp, #8
 80141d2:	af00      	add	r7, sp, #0
 80141d4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	4618      	mov	r0, r3
 80141dc:	f7f2 f830 	bl	8006240 <osMutexRelease>
}
 80141e0:	bf00      	nop
 80141e2:	3708      	adds	r7, #8
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd80      	pop	{r7, pc}

080141e8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b08e      	sub	sp, #56	; 0x38
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	60f8      	str	r0, [r7, #12]
 80141f0:	60b9      	str	r1, [r7, #8]
 80141f2:	607a      	str	r2, [r7, #4]
 80141f4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80141f6:	f107 0314 	add.w	r3, r7, #20
 80141fa:	2224      	movs	r2, #36	; 0x24
 80141fc:	2100      	movs	r1, #0
 80141fe:	4618      	mov	r0, r3
 8014200:	f003 fcce 	bl	8017ba0 <memset>
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	617b      	str	r3, [r7, #20]
 8014208:	683b      	ldr	r3, [r7, #0]
 801420a:	62bb      	str	r3, [r7, #40]	; 0x28
 801420c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801420e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8014210:	f107 0314 	add.w	r3, r7, #20
 8014214:	461a      	mov	r2, r3
 8014216:	6879      	ldr	r1, [r7, #4]
 8014218:	68b8      	ldr	r0, [r7, #8]
 801421a:	f7f1 fe92 	bl	8005f42 <osThreadNew>
 801421e:	4603      	mov	r3, r0
#endif
}
 8014220:	4618      	mov	r0, r3
 8014222:	3738      	adds	r7, #56	; 0x38
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}

08014228 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801422c:	4b04      	ldr	r3, [pc, #16]	; (8014240 <sys_arch_protect+0x18>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014234:	4618      	mov	r0, r3
 8014236:	f7f1 ffb8 	bl	80061aa <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801423a:	2301      	movs	r3, #1
}
 801423c:	4618      	mov	r0, r3
 801423e:	bd80      	pop	{r7, pc}
 8014240:	2400ee2c 	.word	0x2400ee2c

08014244 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b082      	sub	sp, #8
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801424c:	4b04      	ldr	r3, [pc, #16]	; (8014260 <sys_arch_unprotect+0x1c>)
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	4618      	mov	r0, r3
 8014252:	f7f1 fff5 	bl	8006240 <osMutexRelease>
}
 8014256:	bf00      	nop
 8014258:	3708      	adds	r7, #8
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}
 801425e:	bf00      	nop
 8014260:	2400ee2c 	.word	0x2400ee2c

08014264 <parson_strndup>:
        escaped = PARSON_FALSE;
        string++;
    }
}

static char * parson_strndup(const char *string, size_t n) {
 8014264:	b580      	push	{r7, lr}
 8014266:	b084      	sub	sp, #16
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
 801426c:	6039      	str	r1, [r7, #0]
    /* We expect the caller has validated that 'n' fits within the input buffer. */
    char *output_string = (char*)parson_malloc(n + 1);
 801426e:	4b0d      	ldr	r3, [pc, #52]	; (80142a4 <parson_strndup+0x40>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	683a      	ldr	r2, [r7, #0]
 8014274:	3201      	adds	r2, #1
 8014276:	4610      	mov	r0, r2
 8014278:	4798      	blx	r3
 801427a:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d101      	bne.n	8014286 <parson_strndup+0x22>
        return NULL;
 8014282:	2300      	movs	r3, #0
 8014284:	e00a      	b.n	801429c <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 8014286:	68fa      	ldr	r2, [r7, #12]
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	4413      	add	r3, r2
 801428c:	2200      	movs	r2, #0
 801428e:	701a      	strb	r2, [r3, #0]
    memcpy(output_string, string, n);
 8014290:	683a      	ldr	r2, [r7, #0]
 8014292:	6879      	ldr	r1, [r7, #4]
 8014294:	68f8      	ldr	r0, [r7, #12]
 8014296:	f003 fc5b 	bl	8017b50 <memcpy>
    return output_string;
 801429a:	68fb      	ldr	r3, [r7, #12]
}
 801429c:	4618      	mov	r0, r3
 801429e:	3710      	adds	r7, #16
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	24000034 	.word	0x24000034

080142a8 <parson_strdup>:

static char * parson_strdup(const char *string) {
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
    return parson_strndup(string, strlen(string));
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f7ec f81f 	bl	80002f4 <strlen>
 80142b6:	4603      	mov	r3, r0
 80142b8:	4619      	mov	r1, r3
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	f7ff ffd2 	bl	8014264 <parson_strndup>
 80142c0:	4603      	mov	r3, r0
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	3708      	adds	r7, #8
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}

080142ca <hex_char_to_int>:

static int hex_char_to_int(char c) {
 80142ca:	b480      	push	{r7}
 80142cc:	b083      	sub	sp, #12
 80142ce:	af00      	add	r7, sp, #0
 80142d0:	4603      	mov	r3, r0
 80142d2:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 80142d4:	79fb      	ldrb	r3, [r7, #7]
 80142d6:	2b2f      	cmp	r3, #47	; 0x2f
 80142d8:	d905      	bls.n	80142e6 <hex_char_to_int+0x1c>
 80142da:	79fb      	ldrb	r3, [r7, #7]
 80142dc:	2b39      	cmp	r3, #57	; 0x39
 80142de:	d802      	bhi.n	80142e6 <hex_char_to_int+0x1c>
        return c - '0';
 80142e0:	79fb      	ldrb	r3, [r7, #7]
 80142e2:	3b30      	subs	r3, #48	; 0x30
 80142e4:	e013      	b.n	801430e <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 80142e6:	79fb      	ldrb	r3, [r7, #7]
 80142e8:	2b60      	cmp	r3, #96	; 0x60
 80142ea:	d905      	bls.n	80142f8 <hex_char_to_int+0x2e>
 80142ec:	79fb      	ldrb	r3, [r7, #7]
 80142ee:	2b66      	cmp	r3, #102	; 0x66
 80142f0:	d802      	bhi.n	80142f8 <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 80142f2:	79fb      	ldrb	r3, [r7, #7]
 80142f4:	3b57      	subs	r3, #87	; 0x57
 80142f6:	e00a      	b.n	801430e <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 80142f8:	79fb      	ldrb	r3, [r7, #7]
 80142fa:	2b40      	cmp	r3, #64	; 0x40
 80142fc:	d905      	bls.n	801430a <hex_char_to_int+0x40>
 80142fe:	79fb      	ldrb	r3, [r7, #7]
 8014300:	2b46      	cmp	r3, #70	; 0x46
 8014302:	d802      	bhi.n	801430a <hex_char_to_int+0x40>
        return c - 'A' + 10;
 8014304:	79fb      	ldrb	r3, [r7, #7]
 8014306:	3b37      	subs	r3, #55	; 0x37
 8014308:	e001      	b.n	801430e <hex_char_to_int+0x44>
    }
    return -1;
 801430a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801430e:	4618      	mov	r0, r3
 8014310:	370c      	adds	r7, #12
 8014312:	46bd      	mov	sp, r7
 8014314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014318:	4770      	bx	lr

0801431a <parse_utf16_hex>:

static JSON_Status parse_utf16_hex(const char *s, unsigned int *result) {
 801431a:	b580      	push	{r7, lr}
 801431c:	b086      	sub	sp, #24
 801431e:	af00      	add	r7, sp, #0
 8014320:	6078      	str	r0, [r7, #4]
 8014322:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	781b      	ldrb	r3, [r3, #0]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d00e      	beq.n	801434a <parse_utf16_hex+0x30>
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	3301      	adds	r3, #1
 8014330:	781b      	ldrb	r3, [r3, #0]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d009      	beq.n	801434a <parse_utf16_hex+0x30>
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	3302      	adds	r3, #2
 801433a:	781b      	ldrb	r3, [r3, #0]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d004      	beq.n	801434a <parse_utf16_hex+0x30>
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	3303      	adds	r3, #3
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d102      	bne.n	8014350 <parse_utf16_hex+0x36>
        return JSONFailure;
 801434a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801434e:	e03b      	b.n	80143c8 <parse_utf16_hex+0xae>
    }
    x1 = hex_char_to_int(s[0]);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	781b      	ldrb	r3, [r3, #0]
 8014354:	4618      	mov	r0, r3
 8014356:	f7ff ffb8 	bl	80142ca <hex_char_to_int>
 801435a:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	3301      	adds	r3, #1
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	4618      	mov	r0, r3
 8014364:	f7ff ffb1 	bl	80142ca <hex_char_to_int>
 8014368:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	3302      	adds	r3, #2
 801436e:	781b      	ldrb	r3, [r3, #0]
 8014370:	4618      	mov	r0, r3
 8014372:	f7ff ffaa 	bl	80142ca <hex_char_to_int>
 8014376:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	3303      	adds	r3, #3
 801437c:	781b      	ldrb	r3, [r3, #0]
 801437e:	4618      	mov	r0, r3
 8014380:	f7ff ffa3 	bl	80142ca <hex_char_to_int>
 8014384:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 8014386:	697b      	ldr	r3, [r7, #20]
 8014388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801438c:	d00b      	beq.n	80143a6 <parse_utf16_hex+0x8c>
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014394:	d007      	beq.n	80143a6 <parse_utf16_hex+0x8c>
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801439c:	d003      	beq.n	80143a6 <parse_utf16_hex+0x8c>
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143a4:	d102      	bne.n	80143ac <parse_utf16_hex+0x92>
        return JSONFailure;
 80143a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80143aa:	e00d      	b.n	80143c8 <parse_utf16_hex+0xae>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 80143ac:	697b      	ldr	r3, [r7, #20]
 80143ae:	031a      	lsls	r2, r3, #12
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	021b      	lsls	r3, r3, #8
 80143b4:	431a      	orrs	r2, r3
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	011b      	lsls	r3, r3, #4
 80143ba:	431a      	orrs	r2, r3
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	4313      	orrs	r3, r2
 80143c0:	461a      	mov	r2, r3
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 80143c6:	2300      	movs	r3, #0
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	3718      	adds	r7, #24
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bd80      	pop	{r7, pc}

080143d0 <num_bytes_in_utf8_sequence>:

static int num_bytes_in_utf8_sequence(unsigned char c) {
 80143d0:	b480      	push	{r7}
 80143d2:	b083      	sub	sp, #12
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	4603      	mov	r3, r0
 80143d8:	71fb      	strb	r3, [r7, #7]
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 80143da:	79fb      	ldrb	r3, [r7, #7]
 80143dc:	2bc0      	cmp	r3, #192	; 0xc0
 80143de:	d00a      	beq.n	80143f6 <num_bytes_in_utf8_sequence+0x26>
 80143e0:	79fb      	ldrb	r3, [r7, #7]
 80143e2:	2bc1      	cmp	r3, #193	; 0xc1
 80143e4:	d007      	beq.n	80143f6 <num_bytes_in_utf8_sequence+0x26>
 80143e6:	79fb      	ldrb	r3, [r7, #7]
 80143e8:	2bf4      	cmp	r3, #244	; 0xf4
 80143ea:	d804      	bhi.n	80143f6 <num_bytes_in_utf8_sequence+0x26>
 80143ec:	79fb      	ldrb	r3, [r7, #7]
 80143ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80143f2:	2b80      	cmp	r3, #128	; 0x80
 80143f4:	d101      	bne.n	80143fa <num_bytes_in_utf8_sequence+0x2a>
        return 0;
 80143f6:	2300      	movs	r3, #0
 80143f8:	e01b      	b.n	8014432 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0x80) == 0) {    /* 0xxxxxxx */
 80143fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	db01      	blt.n	8014406 <num_bytes_in_utf8_sequence+0x36>
        return 1;
 8014402:	2301      	movs	r3, #1
 8014404:	e015      	b.n	8014432 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 8014406:	79fb      	ldrb	r3, [r7, #7]
 8014408:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801440c:	2bc0      	cmp	r3, #192	; 0xc0
 801440e:	d101      	bne.n	8014414 <num_bytes_in_utf8_sequence+0x44>
        return 2;
 8014410:	2302      	movs	r3, #2
 8014412:	e00e      	b.n	8014432 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 8014414:	79fb      	ldrb	r3, [r7, #7]
 8014416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801441a:	2be0      	cmp	r3, #224	; 0xe0
 801441c:	d101      	bne.n	8014422 <num_bytes_in_utf8_sequence+0x52>
        return 3;
 801441e:	2303      	movs	r3, #3
 8014420:	e007      	b.n	8014432 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF8) == 0xF0) { /* 11110xxx */
 8014422:	79fb      	ldrb	r3, [r7, #7]
 8014424:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8014428:	2bf0      	cmp	r3, #240	; 0xf0
 801442a:	d101      	bne.n	8014430 <num_bytes_in_utf8_sequence+0x60>
        return 4;
 801442c:	2304      	movs	r3, #4
 801442e:	e000      	b.n	8014432 <num_bytes_in_utf8_sequence+0x62>
    }
    return 0; /* won't happen */
 8014430:	2300      	movs	r3, #0
}
 8014432:	4618      	mov	r0, r3
 8014434:	370c      	adds	r7, #12
 8014436:	46bd      	mov	sp, r7
 8014438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443c:	4770      	bx	lr

0801443e <verify_utf8_sequence>:

static JSON_Status verify_utf8_sequence(const unsigned char *string, int *len) {
 801443e:	b580      	push	{r7, lr}
 8014440:	b084      	sub	sp, #16
 8014442:	af00      	add	r7, sp, #0
 8014444:	6078      	str	r0, [r7, #4]
 8014446:	6039      	str	r1, [r7, #0]
    unsigned int cp = 0;
 8014448:	2300      	movs	r3, #0
 801444a:	60fb      	str	r3, [r7, #12]
    *len = num_bytes_in_utf8_sequence(string[0]);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	781b      	ldrb	r3, [r3, #0]
 8014450:	4618      	mov	r0, r3
 8014452:	f7ff ffbd 	bl	80143d0 <num_bytes_in_utf8_sequence>
 8014456:	4602      	mov	r2, r0
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	601a      	str	r2, [r3, #0]

    if (*len == 1) {
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	2b01      	cmp	r3, #1
 8014462:	d103      	bne.n	801446c <verify_utf8_sequence+0x2e>
        cp = string[0];
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	60fb      	str	r3, [r7, #12]
 801446a:	e080      	b.n	801456e <verify_utf8_sequence+0x130>
    } else if (*len == 2 && IS_CONT(string[1])) {
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	2b02      	cmp	r3, #2
 8014472:	d115      	bne.n	80144a0 <verify_utf8_sequence+0x62>
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	3301      	adds	r3, #1
 8014478:	781b      	ldrb	r3, [r3, #0]
 801447a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801447e:	2b80      	cmp	r3, #128	; 0x80
 8014480:	d10e      	bne.n	80144a0 <verify_utf8_sequence+0x62>
        cp = string[0] & 0x1F;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	781b      	ldrb	r3, [r3, #0]
 8014486:	f003 031f 	and.w	r3, r3, #31
 801448a:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	019a      	lsls	r2, r3, #6
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	3301      	adds	r3, #1
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801449a:	4313      	orrs	r3, r2
 801449c:	60fb      	str	r3, [r7, #12]
 801449e:	e066      	b.n	801456e <verify_utf8_sequence+0x130>
    } else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 80144a0:	683b      	ldr	r3, [r7, #0]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	2b03      	cmp	r3, #3
 80144a6:	d125      	bne.n	80144f4 <verify_utf8_sequence+0xb6>
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	3301      	adds	r3, #1
 80144ac:	781b      	ldrb	r3, [r3, #0]
 80144ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80144b2:	2b80      	cmp	r3, #128	; 0x80
 80144b4:	d11e      	bne.n	80144f4 <verify_utf8_sequence+0xb6>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	3302      	adds	r3, #2
 80144ba:	781b      	ldrb	r3, [r3, #0]
 80144bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80144c0:	2b80      	cmp	r3, #128	; 0x80
 80144c2:	d117      	bne.n	80144f4 <verify_utf8_sequence+0xb6>
        cp = ((unsigned char)string[0]) & 0xF;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	781b      	ldrb	r3, [r3, #0]
 80144c8:	f003 030f 	and.w	r3, r3, #15
 80144cc:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	019a      	lsls	r2, r3, #6
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	3301      	adds	r3, #1
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80144dc:	4313      	orrs	r3, r2
 80144de:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	019a      	lsls	r2, r3, #6
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	3302      	adds	r3, #2
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80144ee:	4313      	orrs	r3, r2
 80144f0:	60fb      	str	r3, [r7, #12]
 80144f2:	e03c      	b.n	801456e <verify_utf8_sequence+0x130>
    } else if (*len == 4 && IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 80144f4:	683b      	ldr	r3, [r7, #0]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	2b04      	cmp	r3, #4
 80144fa:	d135      	bne.n	8014568 <verify_utf8_sequence+0x12a>
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	3301      	adds	r3, #1
 8014500:	781b      	ldrb	r3, [r3, #0]
 8014502:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014506:	2b80      	cmp	r3, #128	; 0x80
 8014508:	d12e      	bne.n	8014568 <verify_utf8_sequence+0x12a>
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	3302      	adds	r3, #2
 801450e:	781b      	ldrb	r3, [r3, #0]
 8014510:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014514:	2b80      	cmp	r3, #128	; 0x80
 8014516:	d127      	bne.n	8014568 <verify_utf8_sequence+0x12a>
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	3303      	adds	r3, #3
 801451c:	781b      	ldrb	r3, [r3, #0]
 801451e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014522:	2b80      	cmp	r3, #128	; 0x80
 8014524:	d120      	bne.n	8014568 <verify_utf8_sequence+0x12a>
        cp = string[0] & 0x7;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	781b      	ldrb	r3, [r3, #0]
 801452a:	f003 0307 	and.w	r3, r3, #7
 801452e:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	019a      	lsls	r2, r3, #6
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	3301      	adds	r3, #1
 8014538:	781b      	ldrb	r3, [r3, #0]
 801453a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801453e:	4313      	orrs	r3, r2
 8014540:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	019a      	lsls	r2, r3, #6
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	3302      	adds	r3, #2
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014550:	4313      	orrs	r3, r2
 8014552:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[3] & 0x3F);
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	019a      	lsls	r2, r3, #6
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	3303      	adds	r3, #3
 801455c:	781b      	ldrb	r3, [r3, #0]
 801455e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014562:	4313      	orrs	r3, r2
 8014564:	60fb      	str	r3, [r7, #12]
 8014566:	e002      	b.n	801456e <verify_utf8_sequence+0x130>
    } else {
        return JSONFailure;
 8014568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801456c:	e02c      	b.n	80145c8 <verify_utf8_sequence+0x18a>
    }

    /* overlong encodings */
    if ((cp < 0x80    && *len > 1) ||
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2b7f      	cmp	r3, #127	; 0x7f
 8014572:	d803      	bhi.n	801457c <verify_utf8_sequence+0x13e>
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	2b01      	cmp	r3, #1
 801457a:	dc0f      	bgt.n	801459c <verify_utf8_sequence+0x15e>
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014582:	d203      	bcs.n	801458c <verify_utf8_sequence+0x14e>
        (cp < 0x800   && *len > 2) ||
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	2b02      	cmp	r3, #2
 801458a:	dc07      	bgt.n	801459c <verify_utf8_sequence+0x15e>
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014592:	d206      	bcs.n	80145a2 <verify_utf8_sequence+0x164>
        (cp < 0x10000 && *len > 3)) {
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	2b03      	cmp	r3, #3
 801459a:	dd02      	ble.n	80145a2 <verify_utf8_sequence+0x164>
        return JSONFailure;
 801459c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145a0:	e012      	b.n	80145c8 <verify_utf8_sequence+0x18a>
    }

    /* invalid unicode */
    if (cp > 0x10FFFF) {
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80145a8:	d302      	bcc.n	80145b0 <verify_utf8_sequence+0x172>
        return JSONFailure;
 80145aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145ae:	e00b      	b.n	80145c8 <verify_utf8_sequence+0x18a>
    }

    /* surrogate halves */
    if (cp >= 0xD800 && cp <= 0xDFFF) {
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80145b6:	d306      	bcc.n	80145c6 <verify_utf8_sequence+0x188>
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80145be:	d202      	bcs.n	80145c6 <verify_utf8_sequence+0x188>
        return JSONFailure;
 80145c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145c4:	e000      	b.n	80145c8 <verify_utf8_sequence+0x18a>
    }

    return JSONSuccess;
 80145c6:	2300      	movs	r3, #0
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3710      	adds	r7, #16
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}

080145d0 <is_valid_utf8>:

static int is_valid_utf8(const char *string, size_t string_len) {
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
 80145d8:	6039      	str	r1, [r7, #0]
    int len = 0;
 80145da:	2300      	movs	r3, #0
 80145dc:	60bb      	str	r3, [r7, #8]
    const char *string_end =  string + string_len;
 80145de:	687a      	ldr	r2, [r7, #4]
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	4413      	add	r3, r2
 80145e4:	60fb      	str	r3, [r7, #12]
    while (string < string_end) {
 80145e6:	e00f      	b.n	8014608 <is_valid_utf8+0x38>
        if (verify_utf8_sequence((const unsigned char*)string, &len) != JSONSuccess) {
 80145e8:	f107 0308 	add.w	r3, r7, #8
 80145ec:	4619      	mov	r1, r3
 80145ee:	6878      	ldr	r0, [r7, #4]
 80145f0:	f7ff ff25 	bl	801443e <verify_utf8_sequence>
 80145f4:	4603      	mov	r3, r0
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d001      	beq.n	80145fe <is_valid_utf8+0x2e>
            return PARSON_FALSE;
 80145fa:	2300      	movs	r3, #0
 80145fc:	e009      	b.n	8014612 <is_valid_utf8+0x42>
        }
        string += len;
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	461a      	mov	r2, r3
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	4413      	add	r3, r2
 8014606:	607b      	str	r3, [r7, #4]
    while (string < string_end) {
 8014608:	687a      	ldr	r2, [r7, #4]
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	429a      	cmp	r2, r3
 801460e:	d3eb      	bcc.n	80145e8 <is_valid_utf8+0x18>
    }
    return PARSON_TRUE;
 8014610:	2301      	movs	r3, #1
}
 8014612:	4618      	mov	r0, r3
 8014614:	3710      	adds	r7, #16
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}
	...

0801461c <is_decimal>:

static parson_bool_t is_decimal(const char *string, size_t length) {
 801461c:	b580      	push	{r7, lr}
 801461e:	b082      	sub	sp, #8
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
 8014624:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	2b01      	cmp	r3, #1
 801462a:	d90a      	bls.n	8014642 <is_decimal+0x26>
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	2b30      	cmp	r3, #48	; 0x30
 8014632:	d106      	bne.n	8014642 <is_decimal+0x26>
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	3301      	adds	r3, #1
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	2b2e      	cmp	r3, #46	; 0x2e
 801463c:	d001      	beq.n	8014642 <is_decimal+0x26>
        return PARSON_FALSE;
 801463e:	2300      	movs	r3, #0
 8014640:	e024      	b.n	801468c <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	2b02      	cmp	r3, #2
 8014646:	d91b      	bls.n	8014680 <is_decimal+0x64>
 8014648:	2202      	movs	r2, #2
 801464a:	4912      	ldr	r1, [pc, #72]	; (8014694 <is_decimal+0x78>)
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f003 fc9b 	bl	8017f88 <strncmp>
 8014652:	4603      	mov	r3, r0
 8014654:	2b00      	cmp	r3, #0
 8014656:	d113      	bne.n	8014680 <is_decimal+0x64>
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	3302      	adds	r3, #2
 801465c:	781b      	ldrb	r3, [r3, #0]
 801465e:	2b2e      	cmp	r3, #46	; 0x2e
 8014660:	d00e      	beq.n	8014680 <is_decimal+0x64>
        return PARSON_FALSE;
 8014662:	2300      	movs	r3, #0
 8014664:	e012      	b.n	801468c <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 8014666:	687a      	ldr	r2, [r7, #4]
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	4413      	add	r3, r2
 801466c:	781b      	ldrb	r3, [r3, #0]
 801466e:	4619      	mov	r1, r3
 8014670:	4809      	ldr	r0, [pc, #36]	; (8014698 <is_decimal+0x7c>)
 8014672:	f003 fc7c 	bl	8017f6e <strchr>
 8014676:	4603      	mov	r3, r0
 8014678:	2b00      	cmp	r3, #0
 801467a:	d001      	beq.n	8014680 <is_decimal+0x64>
            return PARSON_FALSE;
 801467c:	2300      	movs	r3, #0
 801467e:	e005      	b.n	801468c <is_decimal+0x70>
    while (length--) {
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	1e5a      	subs	r2, r3, #1
 8014684:	603a      	str	r2, [r7, #0]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d1ed      	bne.n	8014666 <is_decimal+0x4a>
        }
    }
    return PARSON_TRUE;
 801468a:	2301      	movs	r3, #1
}
 801468c:	4618      	mov	r0, r3
 801468e:	3708      	adds	r7, #8
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}
 8014694:	0801d544 	.word	0x0801d544
 8014698:	0801d548 	.word	0x0801d548

0801469c <hash_string>:

static unsigned long hash_string(const char *string, size_t n) {
 801469c:	b480      	push	{r7}
 801469e:	b087      	sub	sp, #28
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
 80146a4:	6039      	str	r1, [r7, #0]
#ifdef PARSON_FORCE_HASH_COLLISIONS
    (void)string;
    (void)n;
    return 0;
#else
    unsigned long hash = 5381;
 80146a6:	f241 5305 	movw	r3, #5381	; 0x1505
 80146aa:	617b      	str	r3, [r7, #20]
    unsigned char c;
    size_t i = 0;
 80146ac:	2300      	movs	r3, #0
 80146ae:	613b      	str	r3, [r7, #16]
    for (i = 0; i < n; i++) {
 80146b0:	2300      	movs	r3, #0
 80146b2:	613b      	str	r3, [r7, #16]
 80146b4:	e011      	b.n	80146da <hash_string+0x3e>
        c = string[i];
 80146b6:	687a      	ldr	r2, [r7, #4]
 80146b8:	693b      	ldr	r3, [r7, #16]
 80146ba:	4413      	add	r3, r2
 80146bc:	781b      	ldrb	r3, [r3, #0]
 80146be:	73fb      	strb	r3, [r7, #15]
        if (c == '\0') {
 80146c0:	7bfb      	ldrb	r3, [r7, #15]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d00e      	beq.n	80146e4 <hash_string+0x48>
            break;
        }
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	015a      	lsls	r2, r3, #5
 80146ca:	697b      	ldr	r3, [r7, #20]
 80146cc:	441a      	add	r2, r3
 80146ce:	7bfb      	ldrb	r3, [r7, #15]
 80146d0:	4413      	add	r3, r2
 80146d2:	617b      	str	r3, [r7, #20]
    for (i = 0; i < n; i++) {
 80146d4:	693b      	ldr	r3, [r7, #16]
 80146d6:	3301      	adds	r3, #1
 80146d8:	613b      	str	r3, [r7, #16]
 80146da:	693a      	ldr	r2, [r7, #16]
 80146dc:	683b      	ldr	r3, [r7, #0]
 80146de:	429a      	cmp	r2, r3
 80146e0:	d3e9      	bcc.n	80146b6 <hash_string+0x1a>
 80146e2:	e000      	b.n	80146e6 <hash_string+0x4a>
            break;
 80146e4:	bf00      	nop
    }
    return hash;
 80146e6:	697b      	ldr	r3, [r7, #20]
#endif
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	371c      	adds	r7, #28
 80146ec:	46bd      	mov	sp, r7
 80146ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f2:	4770      	bx	lr

080146f4 <json_object_make>:

/* JSON Object */
static JSON_Object * json_object_make(JSON_Value *wrapping_value) {
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b084      	sub	sp, #16
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
    JSON_Status res = JSONFailure;
 80146fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014700:	60fb      	str	r3, [r7, #12]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 8014702:	4b10      	ldr	r3, [pc, #64]	; (8014744 <json_object_make+0x50>)
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	2024      	movs	r0, #36	; 0x24
 8014708:	4798      	blx	r3
 801470a:	60b8      	str	r0, [r7, #8]
    if (new_obj == NULL) {
 801470c:	68bb      	ldr	r3, [r7, #8]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d101      	bne.n	8014716 <json_object_make+0x22>
        return NULL;
 8014712:	2300      	movs	r3, #0
 8014714:	e011      	b.n	801473a <json_object_make+0x46>
    }
    new_obj->wrapping_value = wrapping_value;
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	687a      	ldr	r2, [r7, #4]
 801471a:	601a      	str	r2, [r3, #0]
    res = json_object_init(new_obj, 0);
 801471c:	2100      	movs	r1, #0
 801471e:	68b8      	ldr	r0, [r7, #8]
 8014720:	f000 f814 	bl	801474c <json_object_init>
 8014724:	60f8      	str	r0, [r7, #12]
    if (res != JSONSuccess) {
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d005      	beq.n	8014738 <json_object_make+0x44>
        parson_free(new_obj);
 801472c:	4b06      	ldr	r3, [pc, #24]	; (8014748 <json_object_make+0x54>)
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	68b8      	ldr	r0, [r7, #8]
 8014732:	4798      	blx	r3
        return NULL;
 8014734:	2300      	movs	r3, #0
 8014736:	e000      	b.n	801473a <json_object_make+0x46>
    }
    return new_obj;
 8014738:	68bb      	ldr	r3, [r7, #8]
}
 801473a:	4618      	mov	r0, r3
 801473c:	3710      	adds	r7, #16
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}
 8014742:	bf00      	nop
 8014744:	24000034 	.word	0x24000034
 8014748:	24000038 	.word	0x24000038

0801474c <json_object_init>:

static JSON_Status json_object_init(JSON_Object *object, size_t capacity) {
 801474c:	b580      	push	{r7, lr}
 801474e:	b084      	sub	sp, #16
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	6039      	str	r1, [r7, #0]
    unsigned int i = 0;
 8014756:	2300      	movs	r3, #0
 8014758:	60fb      	str	r3, [r7, #12]

    object->cells = NULL;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	2200      	movs	r2, #0
 801475e:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2200      	movs	r2, #0
 8014764:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2200      	movs	r2, #0
 801476a:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	2200      	movs	r2, #0
 8014770:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	2200      	movs	r2, #0
 8014776:	609a      	str	r2, [r3, #8]

    object->count = 0;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2200      	movs	r2, #0
 801477c:	619a      	str	r2, [r3, #24]
    object->cell_capacity = capacity;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	683a      	ldr	r2, [r7, #0]
 8014782:	621a      	str	r2, [r3, #32]
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	ee07 3a90 	vmov	s15, r3
 801478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801478e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80148ac <json_object_init+0x160>
 8014792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801479a:	ee17 2a90 	vmov	r2, s15
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	61da      	str	r2, [r3, #28]

    if (capacity == 0) {
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d101      	bne.n	80147ac <json_object_init+0x60>
        return JSONSuccess;
 80147a8:	2300      	movs	r3, #0
 80147aa:	e07b      	b.n	80148a4 <json_object_init+0x158>
    }

    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 80147ac:	4b40      	ldr	r3, [pc, #256]	; (80148b0 <json_object_init+0x164>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	687a      	ldr	r2, [r7, #4]
 80147b2:	6a12      	ldr	r2, [r2, #32]
 80147b4:	0092      	lsls	r2, r2, #2
 80147b6:	4610      	mov	r0, r2
 80147b8:	4798      	blx	r3
 80147ba:	4602      	mov	r2, r0
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	605a      	str	r2, [r3, #4]
    object->names = (char**)parson_malloc(object->item_capacity * sizeof(*object->names));
 80147c0:	4b3b      	ldr	r3, [pc, #236]	; (80148b0 <json_object_init+0x164>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	687a      	ldr	r2, [r7, #4]
 80147c6:	69d2      	ldr	r2, [r2, #28]
 80147c8:	0092      	lsls	r2, r2, #2
 80147ca:	4610      	mov	r0, r2
 80147cc:	4798      	blx	r3
 80147ce:	4602      	mov	r2, r0
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	60da      	str	r2, [r3, #12]
    object->values = (JSON_Value**)parson_malloc(object->item_capacity * sizeof(*object->values));
 80147d4:	4b36      	ldr	r3, [pc, #216]	; (80148b0 <json_object_init+0x164>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	687a      	ldr	r2, [r7, #4]
 80147da:	69d2      	ldr	r2, [r2, #28]
 80147dc:	0092      	lsls	r2, r2, #2
 80147de:	4610      	mov	r0, r2
 80147e0:	4798      	blx	r3
 80147e2:	4602      	mov	r2, r0
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	611a      	str	r2, [r3, #16]
    object->cell_ixs = (size_t*)parson_malloc(object->item_capacity * sizeof(*object->cell_ixs));
 80147e8:	4b31      	ldr	r3, [pc, #196]	; (80148b0 <json_object_init+0x164>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	687a      	ldr	r2, [r7, #4]
 80147ee:	69d2      	ldr	r2, [r2, #28]
 80147f0:	0092      	lsls	r2, r2, #2
 80147f2:	4610      	mov	r0, r2
 80147f4:	4798      	blx	r3
 80147f6:	4602      	mov	r2, r0
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	615a      	str	r2, [r3, #20]
    object->hashes = (unsigned long*)parson_malloc(object->item_capacity * sizeof(*object->hashes));
 80147fc:	4b2c      	ldr	r3, [pc, #176]	; (80148b0 <json_object_init+0x164>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	687a      	ldr	r2, [r7, #4]
 8014802:	69d2      	ldr	r2, [r2, #28]
 8014804:	0092      	lsls	r2, r2, #2
 8014806:	4610      	mov	r0, r2
 8014808:	4798      	blx	r3
 801480a:	4602      	mov	r2, r0
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	609a      	str	r2, [r3, #8]
    if (object->cells == NULL
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	685b      	ldr	r3, [r3, #4]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d024      	beq.n	8014862 <json_object_init+0x116>
        || object->names == NULL
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	68db      	ldr	r3, [r3, #12]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d020      	beq.n	8014862 <json_object_init+0x116>
        || object->values == NULL
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	691b      	ldr	r3, [r3, #16]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d01c      	beq.n	8014862 <json_object_init+0x116>
        || object->cell_ixs == NULL
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	695b      	ldr	r3, [r3, #20]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d018      	beq.n	8014862 <json_object_init+0x116>
        || object->hashes == NULL) {
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	689b      	ldr	r3, [r3, #8]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d014      	beq.n	8014862 <json_object_init+0x116>
        goto error;
    }
    for (i = 0; i < object->cell_capacity; i++) {
 8014838:	2300      	movs	r3, #0
 801483a:	60fb      	str	r3, [r7, #12]
 801483c:	e00a      	b.n	8014854 <json_object_init+0x108>
        object->cells[i] = OBJECT_INVALID_IX;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	685a      	ldr	r2, [r3, #4]
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	009b      	lsls	r3, r3, #2
 8014846:	4413      	add	r3, r2
 8014848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801484c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->cell_capacity; i++) {
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	3301      	adds	r3, #1
 8014852:	60fb      	str	r3, [r7, #12]
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	6a1b      	ldr	r3, [r3, #32]
 8014858:	68fa      	ldr	r2, [r7, #12]
 801485a:	429a      	cmp	r2, r3
 801485c:	d3ef      	bcc.n	801483e <json_object_init+0xf2>
    }
    return JSONSuccess;
 801485e:	2300      	movs	r3, #0
 8014860:	e020      	b.n	80148a4 <json_object_init+0x158>
        goto error;
 8014862:	bf00      	nop
error:
    parson_free(object->cells);
 8014864:	4b13      	ldr	r3, [pc, #76]	; (80148b4 <json_object_init+0x168>)
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	687a      	ldr	r2, [r7, #4]
 801486a:	6852      	ldr	r2, [r2, #4]
 801486c:	4610      	mov	r0, r2
 801486e:	4798      	blx	r3
    parson_free(object->names);
 8014870:	4b10      	ldr	r3, [pc, #64]	; (80148b4 <json_object_init+0x168>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	687a      	ldr	r2, [r7, #4]
 8014876:	68d2      	ldr	r2, [r2, #12]
 8014878:	4610      	mov	r0, r2
 801487a:	4798      	blx	r3
    parson_free(object->values);
 801487c:	4b0d      	ldr	r3, [pc, #52]	; (80148b4 <json_object_init+0x168>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	687a      	ldr	r2, [r7, #4]
 8014882:	6912      	ldr	r2, [r2, #16]
 8014884:	4610      	mov	r0, r2
 8014886:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8014888:	4b0a      	ldr	r3, [pc, #40]	; (80148b4 <json_object_init+0x168>)
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	687a      	ldr	r2, [r7, #4]
 801488e:	6952      	ldr	r2, [r2, #20]
 8014890:	4610      	mov	r0, r2
 8014892:	4798      	blx	r3
    parson_free(object->hashes);
 8014894:	4b07      	ldr	r3, [pc, #28]	; (80148b4 <json_object_init+0x168>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	687a      	ldr	r2, [r7, #4]
 801489a:	6892      	ldr	r2, [r2, #8]
 801489c:	4610      	mov	r0, r2
 801489e:	4798      	blx	r3
    return JSONFailure;
 80148a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3710      	adds	r7, #16
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	3f333333 	.word	0x3f333333
 80148b0:	24000034 	.word	0x24000034
 80148b4:	24000038 	.word	0x24000038

080148b8 <json_object_deinit>:

static void json_object_deinit(JSON_Object *object, parson_bool_t free_keys, parson_bool_t free_values) {
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b086      	sub	sp, #24
 80148bc:	af00      	add	r7, sp, #0
 80148be:	60f8      	str	r0, [r7, #12]
 80148c0:	60b9      	str	r1, [r7, #8]
 80148c2:	607a      	str	r2, [r7, #4]
    unsigned int i = 0;
 80148c4:	2300      	movs	r3, #0
 80148c6:	617b      	str	r3, [r7, #20]
    for (i = 0; i < object->count; i++) {
 80148c8:	2300      	movs	r3, #0
 80148ca:	617b      	str	r3, [r7, #20]
 80148cc:	e01b      	b.n	8014906 <json_object_deinit+0x4e>
        if (free_keys) {
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d009      	beq.n	80148e8 <json_object_deinit+0x30>
            parson_free(object->names[i]);
 80148d4:	4b2b      	ldr	r3, [pc, #172]	; (8014984 <json_object_deinit+0xcc>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	68fa      	ldr	r2, [r7, #12]
 80148da:	68d1      	ldr	r1, [r2, #12]
 80148dc:	697a      	ldr	r2, [r7, #20]
 80148de:	0092      	lsls	r2, r2, #2
 80148e0:	440a      	add	r2, r1
 80148e2:	6812      	ldr	r2, [r2, #0]
 80148e4:	4610      	mov	r0, r2
 80148e6:	4798      	blx	r3
        }
        if (free_values) {
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d008      	beq.n	8014900 <json_object_deinit+0x48>
            json_value_free(object->values[i]);
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	691a      	ldr	r2, [r3, #16]
 80148f2:	697b      	ldr	r3, [r7, #20]
 80148f4:	009b      	lsls	r3, r3, #2
 80148f6:	4413      	add	r3, r2
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	4618      	mov	r0, r3
 80148fc:	f002 f9b2 	bl	8016c64 <json_value_free>
    for (i = 0; i < object->count; i++) {
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	3301      	adds	r3, #1
 8014904:	617b      	str	r3, [r7, #20]
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	699b      	ldr	r3, [r3, #24]
 801490a:	697a      	ldr	r2, [r7, #20]
 801490c:	429a      	cmp	r2, r3
 801490e:	d3de      	bcc.n	80148ce <json_object_deinit+0x16>
        }
    }

    object->count = 0;
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	2200      	movs	r2, #0
 8014914:	619a      	str	r2, [r3, #24]
    object->item_capacity = 0;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	2200      	movs	r2, #0
 801491a:	61da      	str	r2, [r3, #28]
    object->cell_capacity = 0;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	2200      	movs	r2, #0
 8014920:	621a      	str	r2, [r3, #32]

    parson_free(object->cells);
 8014922:	4b18      	ldr	r3, [pc, #96]	; (8014984 <json_object_deinit+0xcc>)
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	68fa      	ldr	r2, [r7, #12]
 8014928:	6852      	ldr	r2, [r2, #4]
 801492a:	4610      	mov	r0, r2
 801492c:	4798      	blx	r3
    parson_free(object->names);
 801492e:	4b15      	ldr	r3, [pc, #84]	; (8014984 <json_object_deinit+0xcc>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	68fa      	ldr	r2, [r7, #12]
 8014934:	68d2      	ldr	r2, [r2, #12]
 8014936:	4610      	mov	r0, r2
 8014938:	4798      	blx	r3
    parson_free(object->values);
 801493a:	4b12      	ldr	r3, [pc, #72]	; (8014984 <json_object_deinit+0xcc>)
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	68fa      	ldr	r2, [r7, #12]
 8014940:	6912      	ldr	r2, [r2, #16]
 8014942:	4610      	mov	r0, r2
 8014944:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8014946:	4b0f      	ldr	r3, [pc, #60]	; (8014984 <json_object_deinit+0xcc>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	68fa      	ldr	r2, [r7, #12]
 801494c:	6952      	ldr	r2, [r2, #20]
 801494e:	4610      	mov	r0, r2
 8014950:	4798      	blx	r3
    parson_free(object->hashes);
 8014952:	4b0c      	ldr	r3, [pc, #48]	; (8014984 <json_object_deinit+0xcc>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	68fa      	ldr	r2, [r7, #12]
 8014958:	6892      	ldr	r2, [r2, #8]
 801495a:	4610      	mov	r0, r2
 801495c:	4798      	blx	r3

    object->cells = NULL;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	2200      	movs	r2, #0
 8014962:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2200      	movs	r2, #0
 8014968:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	2200      	movs	r2, #0
 801496e:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	2200      	movs	r2, #0
 8014974:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	2200      	movs	r2, #0
 801497a:	609a      	str	r2, [r3, #8]
}
 801497c:	bf00      	nop
 801497e:	3718      	adds	r7, #24
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	24000038 	.word	0x24000038

08014988 <json_object_grow_and_rehash>:

static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {
 8014988:	b5b0      	push	{r4, r5, r7, lr}
 801498a:	b092      	sub	sp, #72	; 0x48
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
    JSON_Value *wrapping_value = NULL;
 8014990:	2300      	movs	r3, #0
 8014992:	643b      	str	r3, [r7, #64]	; 0x40
    JSON_Object new_object;
    char *key = NULL;
 8014994:	2300      	movs	r3, #0
 8014996:	63fb      	str	r3, [r7, #60]	; 0x3c
    JSON_Value *value = NULL;
 8014998:	2300      	movs	r3, #0
 801499a:	63bb      	str	r3, [r7, #56]	; 0x38
    unsigned int i = 0;
 801499c:	2300      	movs	r3, #0
 801499e:	647b      	str	r3, [r7, #68]	; 0x44
    size_t new_capacity = MAX(object->cell_capacity * 2, STARTING_CAPACITY);
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	6a1b      	ldr	r3, [r3, #32]
 80149a4:	005b      	lsls	r3, r3, #1
 80149a6:	2b10      	cmp	r3, #16
 80149a8:	bf38      	it	cc
 80149aa:	2310      	movcc	r3, #16
 80149ac:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Status res = json_object_init(&new_object, new_capacity);
 80149ae:	f107 030c 	add.w	r3, r7, #12
 80149b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7ff fec9 	bl	801474c <json_object_init>
 80149ba:	6338      	str	r0, [r7, #48]	; 0x30
    if (res != JSONSuccess) {
 80149bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d002      	beq.n	80149c8 <json_object_grow_and_rehash+0x40>
        return JSONFailure;
 80149c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149c6:	e046      	b.n	8014a56 <json_object_grow_and_rehash+0xce>
    }

    wrapping_value = json_object_get_wrapping_value(object);
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f002 f862 	bl	8016a92 <json_object_get_wrapping_value>
 80149ce:	6438      	str	r0, [r7, #64]	; 0x40
    new_object.wrapping_value = wrapping_value;
 80149d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149d2:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < object->count; i++) {
 80149d4:	2300      	movs	r3, #0
 80149d6:	647b      	str	r3, [r7, #68]	; 0x44
 80149d8:	e028      	b.n	8014a2c <json_object_grow_and_rehash+0xa4>
        key = object->names[i];
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	68da      	ldr	r2, [r3, #12]
 80149de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149e0:	009b      	lsls	r3, r3, #2
 80149e2:	4413      	add	r3, r2
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        value = object->values[i];
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	691a      	ldr	r2, [r3, #16]
 80149ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149ee:	009b      	lsls	r3, r3, #2
 80149f0:	4413      	add	r3, r2
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	63bb      	str	r3, [r7, #56]	; 0x38
        res = json_object_add(&new_object, key, value);
 80149f6:	f107 030c 	add.w	r3, r7, #12
 80149fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80149fe:	4618      	mov	r0, r3
 8014a00:	f000 f897 	bl	8014b32 <json_object_add>
 8014a04:	6338      	str	r0, [r7, #48]	; 0x30
        if (res != JSONSuccess) {
 8014a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d009      	beq.n	8014a20 <json_object_grow_and_rehash+0x98>
            json_object_deinit(&new_object, PARSON_FALSE, PARSON_FALSE);
 8014a0c:	f107 030c 	add.w	r3, r7, #12
 8014a10:	2200      	movs	r2, #0
 8014a12:	2100      	movs	r1, #0
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7ff ff4f 	bl	80148b8 <json_object_deinit>
            return JSONFailure;
 8014a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a1e:	e01a      	b.n	8014a56 <json_object_grow_and_rehash+0xce>
        }
        value->parent = wrapping_value;
 8014a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014a24:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->count; i++) {
 8014a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a28:	3301      	adds	r3, #1
 8014a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	699b      	ldr	r3, [r3, #24]
 8014a30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014a32:	429a      	cmp	r2, r3
 8014a34:	d3d1      	bcc.n	80149da <json_object_grow_and_rehash+0x52>
    }
    json_object_deinit(object, PARSON_FALSE, PARSON_FALSE);
 8014a36:	2200      	movs	r2, #0
 8014a38:	2100      	movs	r1, #0
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f7ff ff3c 	bl	80148b8 <json_object_deinit>
    *object = new_object;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	461d      	mov	r5, r3
 8014a44:	f107 040c 	add.w	r4, r7, #12
 8014a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a50:	6823      	ldr	r3, [r4, #0]
 8014a52:	602b      	str	r3, [r5, #0]
    return JSONSuccess;
 8014a54:	2300      	movs	r3, #0
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	3748      	adds	r7, #72	; 0x48
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bdb0      	pop	{r4, r5, r7, pc}

08014a5e <json_object_get_cell_ix>:


static size_t json_object_get_cell_ix(const JSON_Object *object, const char *key, size_t key_len, unsigned long hash, parson_bool_t *out_found) {
 8014a5e:	b580      	push	{r7, lr}
 8014a60:	b08c      	sub	sp, #48	; 0x30
 8014a62:	af00      	add	r7, sp, #0
 8014a64:	60f8      	str	r0, [r7, #12]
 8014a66:	60b9      	str	r1, [r7, #8]
 8014a68:	607a      	str	r2, [r7, #4]
 8014a6a:	603b      	str	r3, [r7, #0]
    size_t cell_ix = hash & (object->cell_capacity - 1);
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	6a1b      	ldr	r3, [r3, #32]
 8014a70:	3b01      	subs	r3, #1
 8014a72:	683a      	ldr	r2, [r7, #0]
 8014a74:	4013      	ands	r3, r2
 8014a76:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t cell = 0;
 8014a78:	2300      	movs	r3, #0
 8014a7a:	627b      	str	r3, [r7, #36]	; 0x24
    size_t ix = 0;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	623b      	str	r3, [r7, #32]
    unsigned int i = 0;
 8014a80:	2300      	movs	r3, #0
 8014a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned long hash_to_check = 0;
 8014a84:	2300      	movs	r3, #0
 8014a86:	61fb      	str	r3, [r7, #28]
    const char *key_to_check = NULL;
 8014a88:	2300      	movs	r3, #0
 8014a8a:	61bb      	str	r3, [r7, #24]
    size_t key_to_check_len = 0;
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	617b      	str	r3, [r7, #20]

    *out_found = PARSON_FALSE;
 8014a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a92:	2200      	movs	r2, #0
 8014a94:	601a      	str	r2, [r3, #0]

    for (i = 0; i < object->cell_capacity; i++) {
 8014a96:	2300      	movs	r3, #0
 8014a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a9a:	e03f      	b.n	8014b1c <json_object_get_cell_ix+0xbe>
        ix = (cell_ix + i) & (object->cell_capacity - 1);
 8014a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aa0:	441a      	add	r2, r3
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	6a1b      	ldr	r3, [r3, #32]
 8014aa6:	3b01      	subs	r3, #1
 8014aa8:	4013      	ands	r3, r2
 8014aaa:	623b      	str	r3, [r7, #32]
        cell = object->cells[ix];
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	685a      	ldr	r2, [r3, #4]
 8014ab0:	6a3b      	ldr	r3, [r7, #32]
 8014ab2:	009b      	lsls	r3, r3, #2
 8014ab4:	4413      	add	r3, r2
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	627b      	str	r3, [r7, #36]	; 0x24
        if (cell == OBJECT_INVALID_IX) {
 8014aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014ac0:	d101      	bne.n	8014ac6 <json_object_get_cell_ix+0x68>
            return ix;
 8014ac2:	6a3b      	ldr	r3, [r7, #32]
 8014ac4:	e031      	b.n	8014b2a <json_object_get_cell_ix+0xcc>
        }
        hash_to_check = object->hashes[cell];
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	689a      	ldr	r2, [r3, #8]
 8014aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014acc:	009b      	lsls	r3, r3, #2
 8014ace:	4413      	add	r3, r2
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	61fb      	str	r3, [r7, #28]
        if (hash != hash_to_check) {
 8014ad4:	683a      	ldr	r2, [r7, #0]
 8014ad6:	69fb      	ldr	r3, [r7, #28]
 8014ad8:	429a      	cmp	r2, r3
 8014ada:	d11b      	bne.n	8014b14 <json_object_get_cell_ix+0xb6>
            continue;
        }
        key_to_check = object->names[cell];
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	68da      	ldr	r2, [r3, #12]
 8014ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae2:	009b      	lsls	r3, r3, #2
 8014ae4:	4413      	add	r3, r2
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	61bb      	str	r3, [r7, #24]
        key_to_check_len = strlen(key_to_check);
 8014aea:	69b8      	ldr	r0, [r7, #24]
 8014aec:	f7eb fc02 	bl	80002f4 <strlen>
 8014af0:	6178      	str	r0, [r7, #20]
        if (key_to_check_len == key_len && strncmp(key, key_to_check, key_len) == 0) {
 8014af2:	697a      	ldr	r2, [r7, #20]
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d10d      	bne.n	8014b16 <json_object_get_cell_ix+0xb8>
 8014afa:	687a      	ldr	r2, [r7, #4]
 8014afc:	69b9      	ldr	r1, [r7, #24]
 8014afe:	68b8      	ldr	r0, [r7, #8]
 8014b00:	f003 fa42 	bl	8017f88 <strncmp>
 8014b04:	4603      	mov	r3, r0
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d105      	bne.n	8014b16 <json_object_get_cell_ix+0xb8>
            *out_found = PARSON_TRUE;
 8014b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b0c:	2201      	movs	r2, #1
 8014b0e:	601a      	str	r2, [r3, #0]
            return ix;
 8014b10:	6a3b      	ldr	r3, [r7, #32]
 8014b12:	e00a      	b.n	8014b2a <json_object_get_cell_ix+0xcc>
            continue;
 8014b14:	bf00      	nop
    for (i = 0; i < object->cell_capacity; i++) {
 8014b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b18:	3301      	adds	r3, #1
 8014b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	6a1b      	ldr	r3, [r3, #32]
 8014b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d3ba      	bcc.n	8014a9c <json_object_get_cell_ix+0x3e>
        }
    }
    return OBJECT_INVALID_IX;
 8014b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	3730      	adds	r7, #48	; 0x30
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}

08014b32 <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, char *name, JSON_Value *value) {
 8014b32:	b580      	push	{r7, lr}
 8014b34:	b08a      	sub	sp, #40	; 0x28
 8014b36:	af02      	add	r7, sp, #8
 8014b38:	60f8      	str	r0, [r7, #12]
 8014b3a:	60b9      	str	r1, [r7, #8]
 8014b3c:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8014b3e:	2300      	movs	r3, #0
 8014b40:	61bb      	str	r3, [r7, #24]
    parson_bool_t found = PARSON_FALSE;
 8014b42:	2300      	movs	r3, #0
 8014b44:	613b      	str	r3, [r7, #16]
    size_t cell_ix = 0;
 8014b46:	2300      	movs	r3, #0
 8014b48:	61fb      	str	r3, [r7, #28]
    JSON_Status res = JSONFailure;
 8014b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b4e:	617b      	str	r3, [r7, #20]

    if (!object || !name || !value) {
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d005      	beq.n	8014b62 <json_object_add+0x30>
 8014b56:	68bb      	ldr	r3, [r7, #8]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d002      	beq.n	8014b62 <json_object_add+0x30>
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d102      	bne.n	8014b68 <json_object_add+0x36>
        return JSONFailure;
 8014b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b66:	e06e      	b.n	8014c46 <json_object_add+0x114>
    }

    hash = hash_string(name, strlen(name));
 8014b68:	68b8      	ldr	r0, [r7, #8]
 8014b6a:	f7eb fbc3 	bl	80002f4 <strlen>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	4619      	mov	r1, r3
 8014b72:	68b8      	ldr	r0, [r7, #8]
 8014b74:	f7ff fd92 	bl	801469c <hash_string>
 8014b78:	61b8      	str	r0, [r7, #24]
    found = PARSON_FALSE;
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8014b7e:	68b8      	ldr	r0, [r7, #8]
 8014b80:	f7eb fbb8 	bl	80002f4 <strlen>
 8014b84:	4602      	mov	r2, r0
 8014b86:	f107 0310 	add.w	r3, r7, #16
 8014b8a:	9300      	str	r3, [sp, #0]
 8014b8c:	69bb      	ldr	r3, [r7, #24]
 8014b8e:	68b9      	ldr	r1, [r7, #8]
 8014b90:	68f8      	ldr	r0, [r7, #12]
 8014b92:	f7ff ff64 	bl	8014a5e <json_object_get_cell_ix>
 8014b96:	61f8      	str	r0, [r7, #28]
    if (found) {
 8014b98:	693b      	ldr	r3, [r7, #16]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d002      	beq.n	8014ba4 <json_object_add+0x72>
        return JSONFailure;
 8014b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ba2:	e050      	b.n	8014c46 <json_object_add+0x114>
    }

    if (object->count >= object->item_capacity) {
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	699a      	ldr	r2, [r3, #24]
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	69db      	ldr	r3, [r3, #28]
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d316      	bcc.n	8014bde <json_object_add+0xac>
        res = json_object_grow_and_rehash(object);
 8014bb0:	68f8      	ldr	r0, [r7, #12]
 8014bb2:	f7ff fee9 	bl	8014988 <json_object_grow_and_rehash>
 8014bb6:	6178      	str	r0, [r7, #20]
        if (res != JSONSuccess) {
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d002      	beq.n	8014bc4 <json_object_add+0x92>
            return JSONFailure;
 8014bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bc2:	e040      	b.n	8014c46 <json_object_add+0x114>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8014bc4:	68b8      	ldr	r0, [r7, #8]
 8014bc6:	f7eb fb95 	bl	80002f4 <strlen>
 8014bca:	4602      	mov	r2, r0
 8014bcc:	f107 0310 	add.w	r3, r7, #16
 8014bd0:	9300      	str	r3, [sp, #0]
 8014bd2:	69bb      	ldr	r3, [r7, #24]
 8014bd4:	68b9      	ldr	r1, [r7, #8]
 8014bd6:	68f8      	ldr	r0, [r7, #12]
 8014bd8:	f7ff ff41 	bl	8014a5e <json_object_get_cell_ix>
 8014bdc:	61f8      	str	r0, [r7, #28]
    }

    object->names[object->count] = name;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	68da      	ldr	r2, [r3, #12]
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	699b      	ldr	r3, [r3, #24]
 8014be6:	009b      	lsls	r3, r3, #2
 8014be8:	4413      	add	r3, r2
 8014bea:	68ba      	ldr	r2, [r7, #8]
 8014bec:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	685a      	ldr	r2, [r3, #4]
 8014bf2:	69fb      	ldr	r3, [r7, #28]
 8014bf4:	009b      	lsls	r3, r3, #2
 8014bf6:	4413      	add	r3, r2
 8014bf8:	68fa      	ldr	r2, [r7, #12]
 8014bfa:	6992      	ldr	r2, [r2, #24]
 8014bfc:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	691a      	ldr	r2, [r3, #16]
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	699b      	ldr	r3, [r3, #24]
 8014c06:	009b      	lsls	r3, r3, #2
 8014c08:	4413      	add	r3, r2
 8014c0a:	687a      	ldr	r2, [r7, #4]
 8014c0c:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	695a      	ldr	r2, [r3, #20]
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	699b      	ldr	r3, [r3, #24]
 8014c16:	009b      	lsls	r3, r3, #2
 8014c18:	4413      	add	r3, r2
 8014c1a:	69fa      	ldr	r2, [r7, #28]
 8014c1c:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	689a      	ldr	r2, [r3, #8]
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	699b      	ldr	r3, [r3, #24]
 8014c26:	009b      	lsls	r3, r3, #2
 8014c28:	4413      	add	r3, r2
 8014c2a:	69ba      	ldr	r2, [r7, #24]
 8014c2c:	601a      	str	r2, [r3, #0]
    object->count++;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	699b      	ldr	r3, [r3, #24]
 8014c32:	1c5a      	adds	r2, r3, #1
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 8014c38:	68f8      	ldr	r0, [r7, #12]
 8014c3a:	f001 ff2a 	bl	8016a92 <json_object_get_wrapping_value>
 8014c3e:	4602      	mov	r2, r0
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	601a      	str	r2, [r3, #0]

    return JSONSuccess;
 8014c44:	2300      	movs	r3, #0
}
 8014c46:	4618      	mov	r0, r3
 8014c48:	3720      	adds	r7, #32
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	bd80      	pop	{r7, pc}
	...

08014c50 <json_object_free>:
    }
    temp_object = json_value_get_object(temp_value);
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
}

static void json_object_free(JSON_Object *object) {
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b082      	sub	sp, #8
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
    json_object_deinit(object, PARSON_TRUE, PARSON_TRUE);
 8014c58:	2201      	movs	r2, #1
 8014c5a:	2101      	movs	r1, #1
 8014c5c:	6878      	ldr	r0, [r7, #4]
 8014c5e:	f7ff fe2b 	bl	80148b8 <json_object_deinit>
    parson_free(object);
 8014c62:	4b04      	ldr	r3, [pc, #16]	; (8014c74 <json_object_free+0x24>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	4798      	blx	r3
}
 8014c6a:	bf00      	nop
 8014c6c:	3708      	adds	r7, #8
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}
 8014c72:	bf00      	nop
 8014c74:	24000038 	.word	0x24000038

08014c78 <json_array_make>:

/* JSON Array */
static JSON_Array * json_array_make(JSON_Value *wrapping_value) {
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 8014c80:	4b0d      	ldr	r3, [pc, #52]	; (8014cb8 <json_array_make+0x40>)
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	2010      	movs	r0, #16
 8014c86:	4798      	blx	r3
 8014c88:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d101      	bne.n	8014c94 <json_array_make+0x1c>
        return NULL;
 8014c90:	2300      	movs	r3, #0
 8014c92:	e00c      	b.n	8014cae <json_array_make+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	687a      	ldr	r2, [r7, #4]
 8014c98:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	2200      	movs	r2, #0
 8014caa:	609a      	str	r2, [r3, #8]
    return new_array;
 8014cac:	68fb      	ldr	r3, [r7, #12]
}
 8014cae:	4618      	mov	r0, r3
 8014cb0:	3710      	adds	r7, #16
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd80      	pop	{r7, pc}
 8014cb6:	bf00      	nop
 8014cb8:	24000034 	.word	0x24000034

08014cbc <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b084      	sub	sp, #16
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
 8014cc4:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	689a      	ldr	r2, [r3, #8]
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	68db      	ldr	r3, [r3, #12]
 8014cce:	429a      	cmp	r2, r3
 8014cd0:	d310      	bcc.n	8014cf4 <json_array_add+0x38>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	68db      	ldr	r3, [r3, #12]
 8014cd6:	005b      	lsls	r3, r3, #1
 8014cd8:	2b10      	cmp	r3, #16
 8014cda:	bf38      	it	cc
 8014cdc:	2310      	movcc	r3, #16
 8014cde:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) != JSONSuccess) {
 8014ce0:	68f9      	ldr	r1, [r7, #12]
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f000 f81e 	bl	8014d24 <json_array_resize>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d002      	beq.n	8014cf4 <json_array_add+0x38>
            return JSONFailure;
 8014cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cf2:	e013      	b.n	8014d1c <json_array_add+0x60>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 8014cf4:	6878      	ldr	r0, [r7, #4]
 8014cf6:	f001 ff09 	bl	8016b0c <json_array_get_wrapping_value>
 8014cfa:	4602      	mov	r2, r0
 8014cfc:	683b      	ldr	r3, [r7, #0]
 8014cfe:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	685a      	ldr	r2, [r3, #4]
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	689b      	ldr	r3, [r3, #8]
 8014d08:	009b      	lsls	r3, r3, #2
 8014d0a:	4413      	add	r3, r2
 8014d0c:	683a      	ldr	r2, [r7, #0]
 8014d0e:	601a      	str	r2, [r3, #0]
    array->count++;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	689b      	ldr	r3, [r3, #8]
 8014d14:	1c5a      	adds	r2, r3, #1
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 8014d1a:	2300      	movs	r3, #0
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	3710      	adds	r7, #16
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}

08014d24 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b084      	sub	sp, #16
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 8014d32:	683b      	ldr	r3, [r7, #0]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d102      	bne.n	8014d3e <json_array_resize+0x1a>
        return JSONFailure;
 8014d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d3c:	e02a      	b.n	8014d94 <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 8014d3e:	4b17      	ldr	r3, [pc, #92]	; (8014d9c <json_array_resize+0x78>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	683a      	ldr	r2, [r7, #0]
 8014d44:	0092      	lsls	r2, r2, #2
 8014d46:	4610      	mov	r0, r2
 8014d48:	4798      	blx	r3
 8014d4a:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d102      	bne.n	8014d58 <json_array_resize+0x34>
        return JSONFailure;
 8014d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d56:	e01d      	b.n	8014d94 <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	685b      	ldr	r3, [r3, #4]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d00c      	beq.n	8014d7a <json_array_resize+0x56>
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	689b      	ldr	r3, [r3, #8]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d008      	beq.n	8014d7a <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	6859      	ldr	r1, [r3, #4]
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	689b      	ldr	r3, [r3, #8]
 8014d70:	009b      	lsls	r3, r3, #2
 8014d72:	461a      	mov	r2, r3
 8014d74:	68f8      	ldr	r0, [r7, #12]
 8014d76:	f002 feeb 	bl	8017b50 <memcpy>
    }
    parson_free(array->items);
 8014d7a:	4b09      	ldr	r3, [pc, #36]	; (8014da0 <json_array_resize+0x7c>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	687a      	ldr	r2, [r7, #4]
 8014d80:	6852      	ldr	r2, [r2, #4]
 8014d82:	4610      	mov	r0, r2
 8014d84:	4798      	blx	r3
    array->items = new_items;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	68fa      	ldr	r2, [r7, #12]
 8014d8a:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	683a      	ldr	r2, [r7, #0]
 8014d90:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 8014d92:	2300      	movs	r3, #0
}
 8014d94:	4618      	mov	r0, r3
 8014d96:	3710      	adds	r7, #16
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}
 8014d9c:	24000034 	.word	0x24000034
 8014da0:	24000038 	.word	0x24000038

08014da4 <json_array_free>:

static void json_array_free(JSON_Array *array) {
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b084      	sub	sp, #16
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 8014dac:	2300      	movs	r3, #0
 8014dae:	60fb      	str	r3, [r7, #12]
 8014db0:	e00b      	b.n	8014dca <json_array_free+0x26>
        json_value_free(array->items[i]);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	685a      	ldr	r2, [r3, #4]
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	009b      	lsls	r3, r3, #2
 8014dba:	4413      	add	r3, r2
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	f001 ff50 	bl	8016c64 <json_value_free>
    for (i = 0; i < array->count; i++) {
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	3301      	adds	r3, #1
 8014dc8:	60fb      	str	r3, [r7, #12]
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	689b      	ldr	r3, [r3, #8]
 8014dce:	68fa      	ldr	r2, [r7, #12]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	d3ee      	bcc.n	8014db2 <json_array_free+0xe>
    }
    parson_free(array->items);
 8014dd4:	4b06      	ldr	r3, [pc, #24]	; (8014df0 <json_array_free+0x4c>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	687a      	ldr	r2, [r7, #4]
 8014dda:	6852      	ldr	r2, [r2, #4]
 8014ddc:	4610      	mov	r0, r2
 8014dde:	4798      	blx	r3
    parson_free(array);
 8014de0:	4b03      	ldr	r3, [pc, #12]	; (8014df0 <json_array_free+0x4c>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	4798      	blx	r3
}
 8014de8:	bf00      	nop
 8014dea:	3710      	adds	r7, #16
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}
 8014df0:	24000038 	.word	0x24000038

08014df4 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b084      	sub	sp, #16
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
 8014dfc:	6039      	str	r1, [r7, #0]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8014dfe:	4b0d      	ldr	r3, [pc, #52]	; (8014e34 <json_value_init_string_no_copy+0x40>)
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	2010      	movs	r0, #16
 8014e04:	4798      	blx	r3
 8014e06:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d101      	bne.n	8014e12 <json_value_init_string_no_copy+0x1e>
        return NULL;
 8014e0e:	2300      	movs	r3, #0
 8014e10:	e00c      	b.n	8014e2c <json_value_init_string_no_copy+0x38>
    }
    new_value->parent = NULL;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	2200      	movs	r2, #0
 8014e16:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	2202      	movs	r2, #2
 8014e1c:	605a      	str	r2, [r3, #4]
    new_value->value.string.chars = string;
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	687a      	ldr	r2, [r7, #4]
 8014e22:	609a      	str	r2, [r3, #8]
    new_value->value.string.length = length;
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	683a      	ldr	r2, [r7, #0]
 8014e28:	60da      	str	r2, [r3, #12]
    return new_value;
 8014e2a:	68fb      	ldr	r3, [r7, #12]
}
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	3710      	adds	r7, #16
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}
 8014e34:	24000034 	.word	0x24000034

08014e38 <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 8014e38:	b480      	push	{r7}
 8014e3a:	b083      	sub	sp, #12
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	781b      	ldrb	r3, [r3, #0]
 8014e46:	2b22      	cmp	r3, #34	; 0x22
 8014e48:	d002      	beq.n	8014e50 <skip_quotes+0x18>
        return JSONFailure;
 8014e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e4e:	e02f      	b.n	8014eb0 <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	1c5a      	adds	r2, r3, #1
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 8014e5a:	e01e      	b.n	8014e9a <skip_quotes+0x62>
        if (**string == '\0') {
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d102      	bne.n	8014e6c <skip_quotes+0x34>
            return JSONFailure;
 8014e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e6a:	e021      	b.n	8014eb0 <skip_quotes+0x78>
        } else if (**string == '\\') {
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	781b      	ldrb	r3, [r3, #0]
 8014e72:	2b5c      	cmp	r3, #92	; 0x5c
 8014e74:	d10c      	bne.n	8014e90 <skip_quotes+0x58>
            SKIP_CHAR(string);
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	1c5a      	adds	r2, r3, #1
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d102      	bne.n	8014e90 <skip_quotes+0x58>
                return JSONFailure;
 8014e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e8e:	e00f      	b.n	8014eb0 <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	1c5a      	adds	r2, r3, #1
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	781b      	ldrb	r3, [r3, #0]
 8014ea0:	2b22      	cmp	r3, #34	; 0x22
 8014ea2:	d1db      	bne.n	8014e5c <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	1c5a      	adds	r2, r3, #1
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 8014eae:	2300      	movs	r3, #0
}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	370c      	adds	r7, #12
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eba:	4770      	bx	lr

08014ebc <parse_utf16>:

static JSON_Status parse_utf16(const char **unprocessed, char **processed) {
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b088      	sub	sp, #32
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
 8014ec4:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    char *processed_ptr = *processed;
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	61bb      	str	r3, [r7, #24]
    JSON_Status status = JSONFailure;
 8014ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ed6:	617b      	str	r3, [r7, #20]
    unprocessed_ptr++; /* skips u */
 8014ed8:	69bb      	ldr	r3, [r7, #24]
 8014eda:	3301      	adds	r3, #1
 8014edc:	61bb      	str	r3, [r7, #24]
    status = parse_utf16_hex(unprocessed_ptr, &cp);
 8014ede:	f107 030c 	add.w	r3, r7, #12
 8014ee2:	4619      	mov	r1, r3
 8014ee4:	69b8      	ldr	r0, [r7, #24]
 8014ee6:	f7ff fa18 	bl	801431a <parse_utf16_hex>
 8014eea:	6178      	str	r0, [r7, #20]
    if (status != JSONSuccess) {
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d002      	beq.n	8014ef8 <parse_utf16+0x3c>
        return JSONFailure;
 8014ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ef6:	e0ce      	b.n	8015096 <parse_utf16+0x1da>
    }
    if (cp < 0x80) {
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	2b7f      	cmp	r3, #127	; 0x7f
 8014efc:	d804      	bhi.n	8014f08 <parse_utf16+0x4c>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	b2da      	uxtb	r2, r3
 8014f02:	69fb      	ldr	r3, [r7, #28]
 8014f04:	701a      	strb	r2, [r3, #0]
 8014f06:	e0bc      	b.n	8015082 <parse_utf16+0x1c6>
    } else if (cp < 0x800) {
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014f0e:	d219      	bcs.n	8014f44 <parse_utf16+0x88>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	099b      	lsrs	r3, r3, #6
 8014f14:	b2db      	uxtb	r3, r3
 8014f16:	f003 031f 	and.w	r3, r3, #31
 8014f1a:	b2db      	uxtb	r3, r3
 8014f1c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8014f20:	b2da      	uxtb	r2, r3
 8014f22:	69fb      	ldr	r3, [r7, #28]
 8014f24:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	b2db      	uxtb	r3, r3
 8014f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f2e:	b2da      	uxtb	r2, r3
 8014f30:	69fb      	ldr	r3, [r7, #28]
 8014f32:	3301      	adds	r3, #1
 8014f34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014f38:	b2d2      	uxtb	r2, r2
 8014f3a:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 8014f3c:	69fb      	ldr	r3, [r7, #28]
 8014f3e:	3301      	adds	r3, #1
 8014f40:	61fb      	str	r3, [r7, #28]
 8014f42:	e09e      	b.n	8015082 <parse_utf16+0x1c6>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8014f4a:	d303      	bcc.n	8014f54 <parse_utf16+0x98>
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8014f52:	d325      	bcc.n	8014fa0 <parse_utf16+0xe4>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	0b1b      	lsrs	r3, r3, #12
 8014f58:	b2db      	uxtb	r3, r3
 8014f5a:	f003 030f 	and.w	r3, r3, #15
 8014f5e:	b2db      	uxtb	r3, r3
 8014f60:	f063 031f 	orn	r3, r3, #31
 8014f64:	b2da      	uxtb	r2, r3
 8014f66:	69fb      	ldr	r3, [r7, #28]
 8014f68:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	099b      	lsrs	r3, r3, #6
 8014f6e:	b2db      	uxtb	r3, r3
 8014f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f74:	b2da      	uxtb	r2, r3
 8014f76:	69fb      	ldr	r3, [r7, #28]
 8014f78:	3301      	adds	r3, #1
 8014f7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014f7e:	b2d2      	uxtb	r2, r2
 8014f80:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	b2db      	uxtb	r3, r3
 8014f86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f8a:	b2da      	uxtb	r2, r3
 8014f8c:	69fb      	ldr	r3, [r7, #28]
 8014f8e:	3302      	adds	r3, #2
 8014f90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014f94:	b2d2      	uxtb	r2, r2
 8014f96:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 8014f98:	69fb      	ldr	r3, [r7, #28]
 8014f9a:	3302      	adds	r3, #2
 8014f9c:	61fb      	str	r3, [r7, #28]
 8014f9e:	e070      	b.n	8015082 <parse_utf16+0x1c6>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8014fa6:	d369      	bcc.n	801507c <parse_utf16+0x1c0>
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8014fae:	d265      	bcs.n	801507c <parse_utf16+0x1c0>
        lead = cp;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 8014fb4:	69bb      	ldr	r3, [r7, #24]
 8014fb6:	3304      	adds	r3, #4
 8014fb8:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 8014fba:	69bb      	ldr	r3, [r7, #24]
 8014fbc:	1c5a      	adds	r2, r3, #1
 8014fbe:	61ba      	str	r2, [r7, #24]
 8014fc0:	781b      	ldrb	r3, [r3, #0]
 8014fc2:	2b5c      	cmp	r3, #92	; 0x5c
 8014fc4:	d105      	bne.n	8014fd2 <parse_utf16+0x116>
 8014fc6:	69bb      	ldr	r3, [r7, #24]
 8014fc8:	1c5a      	adds	r2, r3, #1
 8014fca:	61ba      	str	r2, [r7, #24]
 8014fcc:	781b      	ldrb	r3, [r3, #0]
 8014fce:	2b75      	cmp	r3, #117	; 0x75
 8014fd0:	d002      	beq.n	8014fd8 <parse_utf16+0x11c>
            return JSONFailure;
 8014fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014fd6:	e05e      	b.n	8015096 <parse_utf16+0x1da>
        }
        status = parse_utf16_hex(unprocessed_ptr, &trail);
 8014fd8:	f107 0308 	add.w	r3, r7, #8
 8014fdc:	4619      	mov	r1, r3
 8014fde:	69b8      	ldr	r0, [r7, #24]
 8014fe0:	f7ff f99b 	bl	801431a <parse_utf16_hex>
 8014fe4:	6178      	str	r0, [r7, #20]
        if (status != JSONSuccess || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 8014fe6:	697b      	ldr	r3, [r7, #20]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d107      	bne.n	8014ffc <parse_utf16+0x140>
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8014ff2:	d303      	bcc.n	8014ffc <parse_utf16+0x140>
 8014ff4:	68bb      	ldr	r3, [r7, #8]
 8014ff6:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8014ffa:	d302      	bcc.n	8015002 <parse_utf16+0x146>
            return JSONFailure;
 8014ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015000:	e049      	b.n	8015096 <parse_utf16+0x1da>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 8015002:	693b      	ldr	r3, [r7, #16]
 8015004:	029a      	lsls	r2, r3, #10
 8015006:	4b26      	ldr	r3, [pc, #152]	; (80150a0 <parse_utf16+0x1e4>)
 8015008:	4013      	ands	r3, r2
 801500a:	68ba      	ldr	r2, [r7, #8]
 801500c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8015010:	4313      	orrs	r3, r2
 8015012:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8015016:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	0c9b      	lsrs	r3, r3, #18
 801501c:	b2db      	uxtb	r3, r3
 801501e:	f003 0307 	and.w	r3, r3, #7
 8015022:	b2db      	uxtb	r3, r3
 8015024:	f063 030f 	orn	r3, r3, #15
 8015028:	b2da      	uxtb	r2, r3
 801502a:	69fb      	ldr	r3, [r7, #28]
 801502c:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	0b1b      	lsrs	r3, r3, #12
 8015032:	b2db      	uxtb	r3, r3
 8015034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015038:	b2da      	uxtb	r2, r3
 801503a:	69fb      	ldr	r3, [r7, #28]
 801503c:	3301      	adds	r3, #1
 801503e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015042:	b2d2      	uxtb	r2, r2
 8015044:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	099b      	lsrs	r3, r3, #6
 801504a:	b2db      	uxtb	r3, r3
 801504c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015050:	b2da      	uxtb	r2, r3
 8015052:	69fb      	ldr	r3, [r7, #28]
 8015054:	3302      	adds	r3, #2
 8015056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801505a:	b2d2      	uxtb	r2, r2
 801505c:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	b2db      	uxtb	r3, r3
 8015062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015066:	b2da      	uxtb	r2, r3
 8015068:	69fb      	ldr	r3, [r7, #28]
 801506a:	3303      	adds	r3, #3
 801506c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015070:	b2d2      	uxtb	r2, r2
 8015072:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 8015074:	69fb      	ldr	r3, [r7, #28]
 8015076:	3303      	adds	r3, #3
 8015078:	61fb      	str	r3, [r7, #28]
 801507a:	e002      	b.n	8015082 <parse_utf16+0x1c6>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 801507c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015080:	e009      	b.n	8015096 <parse_utf16+0x1da>
    }
    unprocessed_ptr += 3;
 8015082:	69bb      	ldr	r3, [r7, #24]
 8015084:	3303      	adds	r3, #3
 8015086:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 8015088:	683b      	ldr	r3, [r7, #0]
 801508a:	69fa      	ldr	r2, [r7, #28]
 801508c:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	69ba      	ldr	r2, [r7, #24]
 8015092:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 8015094:	2300      	movs	r3, #0
}
 8015096:	4618      	mov	r0, r3
 8015098:	3720      	adds	r7, #32
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	000ffc00 	.word	0x000ffc00

080150a4 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t input_len, size_t *output_len) {
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b08a      	sub	sp, #40	; 0x28
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	60f8      	str	r0, [r7, #12]
 80150ac:	60b9      	str	r1, [r7, #8]
 80150ae:	607a      	str	r2, [r7, #4]
    const char *input_ptr = input;
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	617b      	str	r3, [r7, #20]
    size_t initial_size = (input_len + 1) * sizeof(char);
 80150b4:	68bb      	ldr	r3, [r7, #8]
 80150b6:	3301      	adds	r3, #1
 80150b8:	627b      	str	r3, [r7, #36]	; 0x24
    size_t final_size = 0;
 80150ba:	2300      	movs	r3, #0
 80150bc:	623b      	str	r3, [r7, #32]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 80150be:	2300      	movs	r3, #0
 80150c0:	61fb      	str	r3, [r7, #28]
 80150c2:	2300      	movs	r3, #0
 80150c4:	613b      	str	r3, [r7, #16]
 80150c6:	2300      	movs	r3, #0
 80150c8:	61bb      	str	r3, [r7, #24]
    output = (char*)parson_malloc(initial_size);
 80150ca:	4b69      	ldr	r3, [pc, #420]	; (8015270 <process_string+0x1cc>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150d0:	4798      	blx	r3
 80150d2:	61f8      	str	r0, [r7, #28]
    if (output == NULL) {
 80150d4:	69fb      	ldr	r3, [r7, #28]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	f000 80b9 	beq.w	801524e <process_string+0x1aa>
        goto error;
    }
    output_ptr = output;
 80150dc:	69fb      	ldr	r3, [r7, #28]
 80150de:	613b      	str	r3, [r7, #16]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 80150e0:	e08a      	b.n	80151f8 <process_string+0x154>
        if (*input_ptr == '\\') {
 80150e2:	697b      	ldr	r3, [r7, #20]
 80150e4:	781b      	ldrb	r3, [r3, #0]
 80150e6:	2b5c      	cmp	r3, #92	; 0x5c
 80150e8:	d176      	bne.n	80151d8 <process_string+0x134>
            input_ptr++;
 80150ea:	697b      	ldr	r3, [r7, #20]
 80150ec:	3301      	adds	r3, #1
 80150ee:	617b      	str	r3, [r7, #20]
            switch (*input_ptr) {
 80150f0:	697b      	ldr	r3, [r7, #20]
 80150f2:	781b      	ldrb	r3, [r3, #0]
 80150f4:	2b75      	cmp	r3, #117	; 0x75
 80150f6:	f300 80ac 	bgt.w	8015252 <process_string+0x1ae>
 80150fa:	2b5c      	cmp	r3, #92	; 0x5c
 80150fc:	da04      	bge.n	8015108 <process_string+0x64>
 80150fe:	2b22      	cmp	r3, #34	; 0x22
 8015100:	d03e      	beq.n	8015180 <process_string+0xdc>
 8015102:	2b2f      	cmp	r3, #47	; 0x2f
 8015104:	d044      	beq.n	8015190 <process_string+0xec>
                    if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
                        goto error;
                    }
                    break;
                default:
                    goto error;
 8015106:	e0a4      	b.n	8015252 <process_string+0x1ae>
 8015108:	3b5c      	subs	r3, #92	; 0x5c
 801510a:	2b19      	cmp	r3, #25
 801510c:	f200 80a1 	bhi.w	8015252 <process_string+0x1ae>
 8015110:	a201      	add	r2, pc, #4	; (adr r2, 8015118 <process_string+0x74>)
 8015112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015116:	bf00      	nop
 8015118:	08015189 	.word	0x08015189
 801511c:	08015253 	.word	0x08015253
 8015120:	08015253 	.word	0x08015253
 8015124:	08015253 	.word	0x08015253
 8015128:	08015253 	.word	0x08015253
 801512c:	08015253 	.word	0x08015253
 8015130:	08015199 	.word	0x08015199
 8015134:	08015253 	.word	0x08015253
 8015138:	08015253 	.word	0x08015253
 801513c:	08015253 	.word	0x08015253
 8015140:	080151a1 	.word	0x080151a1
 8015144:	08015253 	.word	0x08015253
 8015148:	08015253 	.word	0x08015253
 801514c:	08015253 	.word	0x08015253
 8015150:	08015253 	.word	0x08015253
 8015154:	08015253 	.word	0x08015253
 8015158:	08015253 	.word	0x08015253
 801515c:	08015253 	.word	0x08015253
 8015160:	080151a9 	.word	0x080151a9
 8015164:	08015253 	.word	0x08015253
 8015168:	08015253 	.word	0x08015253
 801516c:	08015253 	.word	0x08015253
 8015170:	080151b1 	.word	0x080151b1
 8015174:	08015253 	.word	0x08015253
 8015178:	080151b9 	.word	0x080151b9
 801517c:	080151c1 	.word	0x080151c1
                case '\"': *output_ptr = '\"'; break;
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	2222      	movs	r2, #34	; 0x22
 8015184:	701a      	strb	r2, [r3, #0]
 8015186:	e031      	b.n	80151ec <process_string+0x148>
                case '\\': *output_ptr = '\\'; break;
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	225c      	movs	r2, #92	; 0x5c
 801518c:	701a      	strb	r2, [r3, #0]
 801518e:	e02d      	b.n	80151ec <process_string+0x148>
                case '/':  *output_ptr = '/';  break;
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	222f      	movs	r2, #47	; 0x2f
 8015194:	701a      	strb	r2, [r3, #0]
 8015196:	e029      	b.n	80151ec <process_string+0x148>
                case 'b':  *output_ptr = '\b'; break;
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	2208      	movs	r2, #8
 801519c:	701a      	strb	r2, [r3, #0]
 801519e:	e025      	b.n	80151ec <process_string+0x148>
                case 'f':  *output_ptr = '\f'; break;
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	220c      	movs	r2, #12
 80151a4:	701a      	strb	r2, [r3, #0]
 80151a6:	e021      	b.n	80151ec <process_string+0x148>
                case 'n':  *output_ptr = '\n'; break;
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	220a      	movs	r2, #10
 80151ac:	701a      	strb	r2, [r3, #0]
 80151ae:	e01d      	b.n	80151ec <process_string+0x148>
                case 'r':  *output_ptr = '\r'; break;
 80151b0:	693b      	ldr	r3, [r7, #16]
 80151b2:	220d      	movs	r2, #13
 80151b4:	701a      	strb	r2, [r3, #0]
 80151b6:	e019      	b.n	80151ec <process_string+0x148>
                case 't':  *output_ptr = '\t'; break;
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	2209      	movs	r2, #9
 80151bc:	701a      	strb	r2, [r3, #0]
 80151be:	e015      	b.n	80151ec <process_string+0x148>
                    if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
 80151c0:	f107 0210 	add.w	r2, r7, #16
 80151c4:	f107 0314 	add.w	r3, r7, #20
 80151c8:	4611      	mov	r1, r2
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7ff fe76 	bl	8014ebc <parse_utf16>
 80151d0:	4603      	mov	r3, r0
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d009      	beq.n	80151ea <process_string+0x146>
                        goto error;
 80151d6:	e041      	b.n	801525c <process_string+0x1b8>
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 80151d8:	697b      	ldr	r3, [r7, #20]
 80151da:	781b      	ldrb	r3, [r3, #0]
 80151dc:	2b1f      	cmp	r3, #31
 80151de:	d93a      	bls.n	8015256 <process_string+0x1b2>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 80151e0:	697a      	ldr	r2, [r7, #20]
 80151e2:	693b      	ldr	r3, [r7, #16]
 80151e4:	7812      	ldrb	r2, [r2, #0]
 80151e6:	701a      	strb	r2, [r3, #0]
 80151e8:	e000      	b.n	80151ec <process_string+0x148>
                    break;
 80151ea:	bf00      	nop
        }
        output_ptr++;
 80151ec:	693b      	ldr	r3, [r7, #16]
 80151ee:	3301      	adds	r3, #1
 80151f0:	613b      	str	r3, [r7, #16]
        input_ptr++;
 80151f2:	697b      	ldr	r3, [r7, #20]
 80151f4:	3301      	adds	r3, #1
 80151f6:	617b      	str	r3, [r7, #20]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 80151f8:	697b      	ldr	r3, [r7, #20]
 80151fa:	781b      	ldrb	r3, [r3, #0]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d007      	beq.n	8015210 <process_string+0x16c>
 8015200:	697a      	ldr	r2, [r7, #20]
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	1ad3      	subs	r3, r2, r3
 8015206:	461a      	mov	r2, r3
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	4293      	cmp	r3, r2
 801520c:	f63f af69 	bhi.w	80150e2 <process_string+0x3e>
    }
    *output_ptr = '\0';
 8015210:	693b      	ldr	r3, [r7, #16]
 8015212:	2200      	movs	r2, #0
 8015214:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 8015216:	693a      	ldr	r2, [r7, #16]
 8015218:	69fb      	ldr	r3, [r7, #28]
 801521a:	1ad3      	subs	r3, r2, r3
 801521c:	3301      	adds	r3, #1
 801521e:	623b      	str	r3, [r7, #32]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 8015220:	4b13      	ldr	r3, [pc, #76]	; (8015270 <process_string+0x1cc>)
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	6a38      	ldr	r0, [r7, #32]
 8015226:	4798      	blx	r3
 8015228:	61b8      	str	r0, [r7, #24]
    if (resized_output == NULL) {
 801522a:	69bb      	ldr	r3, [r7, #24]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d014      	beq.n	801525a <process_string+0x1b6>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 8015230:	6a3a      	ldr	r2, [r7, #32]
 8015232:	69f9      	ldr	r1, [r7, #28]
 8015234:	69b8      	ldr	r0, [r7, #24]
 8015236:	f002 fc8b 	bl	8017b50 <memcpy>
    *output_len = final_size - 1;
 801523a:	6a3b      	ldr	r3, [r7, #32]
 801523c:	1e5a      	subs	r2, r3, #1
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	601a      	str	r2, [r3, #0]
    parson_free(output);
 8015242:	4b0c      	ldr	r3, [pc, #48]	; (8015274 <process_string+0x1d0>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	69f8      	ldr	r0, [r7, #28]
 8015248:	4798      	blx	r3
    return resized_output;
 801524a:	69bb      	ldr	r3, [r7, #24]
 801524c:	e00b      	b.n	8015266 <process_string+0x1c2>
        goto error;
 801524e:	bf00      	nop
 8015250:	e004      	b.n	801525c <process_string+0x1b8>
                    goto error;
 8015252:	bf00      	nop
 8015254:	e002      	b.n	801525c <process_string+0x1b8>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 8015256:	bf00      	nop
 8015258:	e000      	b.n	801525c <process_string+0x1b8>
        goto error;
 801525a:	bf00      	nop
error:
    parson_free(output);
 801525c:	4b05      	ldr	r3, [pc, #20]	; (8015274 <process_string+0x1d0>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	69f8      	ldr	r0, [r7, #28]
 8015262:	4798      	blx	r3
    return NULL;
 8015264:	2300      	movs	r3, #0
}
 8015266:	4618      	mov	r0, r3
 8015268:	3728      	adds	r7, #40	; 0x28
 801526a:	46bd      	mov	sp, r7
 801526c:	bd80      	pop	{r7, pc}
 801526e:	bf00      	nop
 8015270:	24000034 	.word	0x24000034
 8015274:	24000038 	.word	0x24000038

08015278 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 8015278:	b580      	push	{r7, lr}
 801527a:	b086      	sub	sp, #24
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
 8015280:	6039      	str	r1, [r7, #0]
    const char *string_start = *string;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	617b      	str	r3, [r7, #20]
    size_t input_string_len = 0;
 8015288:	2300      	movs	r3, #0
 801528a:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	f7ff fdd3 	bl	8014e38 <skip_quotes>
 8015292:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d001      	beq.n	801529e <get_quoted_string+0x26>
        return NULL;
 801529a:	2300      	movs	r3, #0
 801529c:	e00d      	b.n	80152ba <get_quoted_string+0x42>
    }
    input_string_len = *string - string_start - 2; /* length without quotes */
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	681a      	ldr	r2, [r3, #0]
 80152a2:	697b      	ldr	r3, [r7, #20]
 80152a4:	1ad3      	subs	r3, r2, r3
 80152a6:	3b02      	subs	r3, #2
 80152a8:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, input_string_len, output_string_len);
 80152aa:	697b      	ldr	r3, [r7, #20]
 80152ac:	3301      	adds	r3, #1
 80152ae:	683a      	ldr	r2, [r7, #0]
 80152b0:	6939      	ldr	r1, [r7, #16]
 80152b2:	4618      	mov	r0, r3
 80152b4:	f7ff fef6 	bl	80150a4 <process_string>
 80152b8:	4603      	mov	r3, r0
}
 80152ba:	4618      	mov	r0, r3
 80152bc:	3718      	adds	r7, #24
 80152be:	46bd      	mov	sp, r7
 80152c0:	bd80      	pop	{r7, pc}
	...

080152c4 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b082      	sub	sp, #8
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
 80152cc:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80152d4:	d906      	bls.n	80152e4 <parse_value+0x20>
        return NULL;
 80152d6:	2300      	movs	r3, #0
 80152d8:	e08d      	b.n	80153f6 <parse_value+0x132>
    }
    SKIP_WHITESPACES(string);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	1c5a      	adds	r2, r3, #1
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	601a      	str	r2, [r3, #0]
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	781b      	ldrb	r3, [r3, #0]
 80152ea:	3301      	adds	r3, #1
 80152ec:	4a44      	ldr	r2, [pc, #272]	; (8015400 <parse_value+0x13c>)
 80152ee:	4413      	add	r3, r2
 80152f0:	781b      	ldrb	r3, [r3, #0]
 80152f2:	f003 0308 	and.w	r3, r3, #8
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d1ef      	bne.n	80152da <parse_value+0x16>
    switch (**string) {
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	781b      	ldrb	r3, [r3, #0]
 8015300:	2b7b      	cmp	r3, #123	; 0x7b
 8015302:	dc77      	bgt.n	80153f4 <parse_value+0x130>
 8015304:	2b5b      	cmp	r3, #91	; 0x5b
 8015306:	da08      	bge.n	801531a <parse_value+0x56>
 8015308:	2b39      	cmp	r3, #57	; 0x39
 801530a:	dc73      	bgt.n	80153f4 <parse_value+0x130>
 801530c:	2b30      	cmp	r3, #48	; 0x30
 801530e:	da67      	bge.n	80153e0 <parse_value+0x11c>
 8015310:	2b22      	cmp	r3, #34	; 0x22
 8015312:	d05b      	beq.n	80153cc <parse_value+0x108>
 8015314:	2b2d      	cmp	r3, #45	; 0x2d
 8015316:	d063      	beq.n	80153e0 <parse_value+0x11c>
 8015318:	e06c      	b.n	80153f4 <parse_value+0x130>
 801531a:	3b5b      	subs	r3, #91	; 0x5b
 801531c:	2b20      	cmp	r3, #32
 801531e:	d869      	bhi.n	80153f4 <parse_value+0x130>
 8015320:	a201      	add	r2, pc, #4	; (adr r2, 8015328 <parse_value+0x64>)
 8015322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015326:	bf00      	nop
 8015328:	080153bd 	.word	0x080153bd
 801532c:	080153f5 	.word	0x080153f5
 8015330:	080153f5 	.word	0x080153f5
 8015334:	080153f5 	.word	0x080153f5
 8015338:	080153f5 	.word	0x080153f5
 801533c:	080153f5 	.word	0x080153f5
 8015340:	080153f5 	.word	0x080153f5
 8015344:	080153f5 	.word	0x080153f5
 8015348:	080153f5 	.word	0x080153f5
 801534c:	080153f5 	.word	0x080153f5
 8015350:	080153f5 	.word	0x080153f5
 8015354:	080153d7 	.word	0x080153d7
 8015358:	080153f5 	.word	0x080153f5
 801535c:	080153f5 	.word	0x080153f5
 8015360:	080153f5 	.word	0x080153f5
 8015364:	080153f5 	.word	0x080153f5
 8015368:	080153f5 	.word	0x080153f5
 801536c:	080153f5 	.word	0x080153f5
 8015370:	080153f5 	.word	0x080153f5
 8015374:	080153eb 	.word	0x080153eb
 8015378:	080153f5 	.word	0x080153f5
 801537c:	080153f5 	.word	0x080153f5
 8015380:	080153f5 	.word	0x080153f5
 8015384:	080153f5 	.word	0x080153f5
 8015388:	080153f5 	.word	0x080153f5
 801538c:	080153d7 	.word	0x080153d7
 8015390:	080153f5 	.word	0x080153f5
 8015394:	080153f5 	.word	0x080153f5
 8015398:	080153f5 	.word	0x080153f5
 801539c:	080153f5 	.word	0x080153f5
 80153a0:	080153f5 	.word	0x080153f5
 80153a4:	080153f5 	.word	0x080153f5
 80153a8:	080153ad 	.word	0x080153ad
        case '{':
            return parse_object_value(string, nesting + 1);
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	3301      	adds	r3, #1
 80153b0:	4619      	mov	r1, r3
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f000 f826 	bl	8015404 <parse_object_value>
 80153b8:	4603      	mov	r3, r0
 80153ba:	e01c      	b.n	80153f6 <parse_value+0x132>
        case '[':
            return parse_array_value(string, nesting + 1);
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	3301      	adds	r3, #1
 80153c0:	4619      	mov	r1, r3
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	f000 f92e 	bl	8015624 <parse_array_value>
 80153c8:	4603      	mov	r3, r0
 80153ca:	e014      	b.n	80153f6 <parse_value+0x132>
        case '\"':
            return parse_string_value(string);
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f000 f9ed 	bl	80157ac <parse_string_value>
 80153d2:	4603      	mov	r3, r0
 80153d4:	e00f      	b.n	80153f6 <parse_value+0x132>
        case 'f': case 't':
            return parse_boolean_value(string);
 80153d6:	6878      	ldr	r0, [r7, #4]
 80153d8:	f000 fa12 	bl	8015800 <parse_boolean_value>
 80153dc:	4603      	mov	r3, r0
 80153de:	e00a      	b.n	80153f6 <parse_value+0x132>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f000 fa49 	bl	8015878 <parse_number_value>
 80153e6:	4603      	mov	r3, r0
 80153e8:	e005      	b.n	80153f6 <parse_value+0x132>
        case 'n':
            return parse_null_value(string);
 80153ea:	6878      	ldr	r0, [r7, #4]
 80153ec:	f000 faa2 	bl	8015934 <parse_null_value>
 80153f0:	4603      	mov	r3, r0
 80153f2:	e000      	b.n	80153f6 <parse_value+0x132>
        default:
            return NULL;
 80153f4:	2300      	movs	r3, #0
    }
}
 80153f6:	4618      	mov	r0, r3
 80153f8:	3708      	adds	r7, #8
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}
 80153fe:	bf00      	nop
 8015400:	0801d942 	.word	0x0801d942

08015404 <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 8015404:	b580      	push	{r7, lr}
 8015406:	b088      	sub	sp, #32
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
 801540c:	6039      	str	r1, [r7, #0]
    JSON_Status status = JSONFailure;
 801540e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015412:	61fb      	str	r3, [r7, #28]
    JSON_Value *output_value = NULL, *new_value = NULL;
 8015414:	2300      	movs	r3, #0
 8015416:	61bb      	str	r3, [r7, #24]
 8015418:	2300      	movs	r3, #0
 801541a:	617b      	str	r3, [r7, #20]
    JSON_Object *output_object = NULL;
 801541c:	2300      	movs	r3, #0
 801541e:	613b      	str	r3, [r7, #16]
    char *new_key = NULL;
 8015420:	2300      	movs	r3, #0
 8015422:	60fb      	str	r3, [r7, #12]

    output_value = json_value_init_object();
 8015424:	f001 fc4c 	bl	8016cc0 <json_value_init_object>
 8015428:	61b8      	str	r0, [r7, #24]
    if (output_value == NULL) {
 801542a:	69bb      	ldr	r3, [r7, #24]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d101      	bne.n	8015434 <parse_object_value+0x30>
        return NULL;
 8015430:	2300      	movs	r3, #0
 8015432:	e0ee      	b.n	8015612 <parse_object_value+0x20e>
    }
    if (**string != '{') {
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	781b      	ldrb	r3, [r3, #0]
 801543a:	2b7b      	cmp	r3, #123	; 0x7b
 801543c:	d004      	beq.n	8015448 <parse_object_value+0x44>
        json_value_free(output_value);
 801543e:	69b8      	ldr	r0, [r7, #24]
 8015440:	f001 fc10 	bl	8016c64 <json_value_free>
        return NULL;
 8015444:	2300      	movs	r3, #0
 8015446:	e0e4      	b.n	8015612 <parse_object_value+0x20e>
    }
    output_object = json_value_get_object(output_value);
 8015448:	69b8      	ldr	r0, [r7, #24]
 801544a:	f001 fb82 	bl	8016b52 <json_value_get_object>
 801544e:	6138      	str	r0, [r7, #16]
    SKIP_CHAR(string);
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	1c5a      	adds	r2, r3, #1
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801545a:	e004      	b.n	8015466 <parse_object_value+0x62>
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	1c5a      	adds	r2, r3, #1
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	601a      	str	r2, [r3, #0]
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	781b      	ldrb	r3, [r3, #0]
 801546c:	3301      	adds	r3, #1
 801546e:	4a6b      	ldr	r2, [pc, #428]	; (801561c <parse_object_value+0x218>)
 8015470:	4413      	add	r3, r2
 8015472:	781b      	ldrb	r3, [r3, #0]
 8015474:	f003 0308 	and.w	r3, r3, #8
 8015478:	2b00      	cmp	r3, #0
 801547a:	d1ef      	bne.n	801545c <parse_object_value+0x58>
    if (**string == '}') { /* empty object */
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	2b7d      	cmp	r3, #125	; 0x7d
 8015484:	f040 809c 	bne.w	80155c0 <parse_object_value+0x1bc>
        SKIP_CHAR(string);
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	1c5a      	adds	r2, r3, #1
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	601a      	str	r2, [r3, #0]
        return output_value;
 8015492:	69bb      	ldr	r3, [r7, #24]
 8015494:	e0bd      	b.n	8015612 <parse_object_value+0x20e>
    }
    while (**string != '\0') {
        size_t key_len = 0;
 8015496:	2300      	movs	r3, #0
 8015498:	60bb      	str	r3, [r7, #8]
        new_key = get_quoted_string(string, &key_len);
 801549a:	f107 0308 	add.w	r3, r7, #8
 801549e:	4619      	mov	r1, r3
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f7ff fee9 	bl	8015278 <get_quoted_string>
 80154a6:	60f8      	str	r0, [r7, #12]
        /* We do not support key names with embedded \0 chars */
        if (!new_key) {
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d104      	bne.n	80154b8 <parse_object_value+0xb4>
            json_value_free(output_value);
 80154ae:	69b8      	ldr	r0, [r7, #24]
 80154b0:	f001 fbd8 	bl	8016c64 <json_value_free>
            return NULL;
 80154b4:	2300      	movs	r3, #0
 80154b6:	e0ac      	b.n	8015612 <parse_object_value+0x20e>
        }
        if (key_len != strlen(new_key)) {
 80154b8:	68f8      	ldr	r0, [r7, #12]
 80154ba:	f7ea ff1b 	bl	80002f4 <strlen>
 80154be:	4602      	mov	r2, r0
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	429a      	cmp	r2, r3
 80154c4:	d00d      	beq.n	80154e2 <parse_object_value+0xde>
            parson_free(new_key);
 80154c6:	4b56      	ldr	r3, [pc, #344]	; (8015620 <parse_object_value+0x21c>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	68f8      	ldr	r0, [r7, #12]
 80154cc:	4798      	blx	r3
            json_value_free(output_value);
 80154ce:	69b8      	ldr	r0, [r7, #24]
 80154d0:	f001 fbc8 	bl	8016c64 <json_value_free>
            return NULL;
 80154d4:	2300      	movs	r3, #0
 80154d6:	e09c      	b.n	8015612 <parse_object_value+0x20e>
        }
        SKIP_WHITESPACES(string);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	1c5a      	adds	r2, r3, #1
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	601a      	str	r2, [r3, #0]
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	781b      	ldrb	r3, [r3, #0]
 80154e8:	3301      	adds	r3, #1
 80154ea:	4a4c      	ldr	r2, [pc, #304]	; (801561c <parse_object_value+0x218>)
 80154ec:	4413      	add	r3, r2
 80154ee:	781b      	ldrb	r3, [r3, #0]
 80154f0:	f003 0308 	and.w	r3, r3, #8
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d1ef      	bne.n	80154d8 <parse_object_value+0xd4>
        if (**string != ':') {
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	2b3a      	cmp	r3, #58	; 0x3a
 8015500:	d008      	beq.n	8015514 <parse_object_value+0x110>
            parson_free(new_key);
 8015502:	4b47      	ldr	r3, [pc, #284]	; (8015620 <parse_object_value+0x21c>)
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	68f8      	ldr	r0, [r7, #12]
 8015508:	4798      	blx	r3
            json_value_free(output_value);
 801550a:	69b8      	ldr	r0, [r7, #24]
 801550c:	f001 fbaa 	bl	8016c64 <json_value_free>
            return NULL;
 8015510:	2300      	movs	r3, #0
 8015512:	e07e      	b.n	8015612 <parse_object_value+0x20e>
        }
        SKIP_CHAR(string);
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	1c5a      	adds	r2, r3, #1
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 801551e:	6839      	ldr	r1, [r7, #0]
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f7ff fecf 	bl	80152c4 <parse_value>
 8015526:	6178      	str	r0, [r7, #20]
        if (new_value == NULL) {
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d108      	bne.n	8015540 <parse_object_value+0x13c>
            parson_free(new_key);
 801552e:	4b3c      	ldr	r3, [pc, #240]	; (8015620 <parse_object_value+0x21c>)
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	68f8      	ldr	r0, [r7, #12]
 8015534:	4798      	blx	r3
            json_value_free(output_value);
 8015536:	69b8      	ldr	r0, [r7, #24]
 8015538:	f001 fb94 	bl	8016c64 <json_value_free>
            return NULL;
 801553c:	2300      	movs	r3, #0
 801553e:	e068      	b.n	8015612 <parse_object_value+0x20e>
        }
        status = json_object_add(output_object, new_key, new_value);
 8015540:	697a      	ldr	r2, [r7, #20]
 8015542:	68f9      	ldr	r1, [r7, #12]
 8015544:	6938      	ldr	r0, [r7, #16]
 8015546:	f7ff faf4 	bl	8014b32 <json_object_add>
 801554a:	61f8      	str	r0, [r7, #28]
        if (status != JSONSuccess) {
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d010      	beq.n	8015574 <parse_object_value+0x170>
            parson_free(new_key);
 8015552:	4b33      	ldr	r3, [pc, #204]	; (8015620 <parse_object_value+0x21c>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	68f8      	ldr	r0, [r7, #12]
 8015558:	4798      	blx	r3
            json_value_free(new_value);
 801555a:	6978      	ldr	r0, [r7, #20]
 801555c:	f001 fb82 	bl	8016c64 <json_value_free>
            json_value_free(output_value);
 8015560:	69b8      	ldr	r0, [r7, #24]
 8015562:	f001 fb7f 	bl	8016c64 <json_value_free>
            return NULL;
 8015566:	2300      	movs	r3, #0
 8015568:	e053      	b.n	8015612 <parse_object_value+0x20e>
        }
        SKIP_WHITESPACES(string);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	1c5a      	adds	r2, r3, #1
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	601a      	str	r2, [r3, #0]
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	781b      	ldrb	r3, [r3, #0]
 801557a:	3301      	adds	r3, #1
 801557c:	4a27      	ldr	r2, [pc, #156]	; (801561c <parse_object_value+0x218>)
 801557e:	4413      	add	r3, r2
 8015580:	781b      	ldrb	r3, [r3, #0]
 8015582:	f003 0308 	and.w	r3, r3, #8
 8015586:	2b00      	cmp	r3, #0
 8015588:	d1ef      	bne.n	801556a <parse_object_value+0x166>
        if (**string != ',') {
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	781b      	ldrb	r3, [r3, #0]
 8015590:	2b2c      	cmp	r3, #44	; 0x2c
 8015592:	d11c      	bne.n	80155ce <parse_object_value+0x1ca>
            break;
        }
        SKIP_CHAR(string);
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	1c5a      	adds	r2, r3, #1
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801559e:	e004      	b.n	80155aa <parse_object_value+0x1a6>
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	1c5a      	adds	r2, r3, #1
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	601a      	str	r2, [r3, #0]
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	3301      	adds	r3, #1
 80155b2:	4a1a      	ldr	r2, [pc, #104]	; (801561c <parse_object_value+0x218>)
 80155b4:	4413      	add	r3, r2
 80155b6:	781b      	ldrb	r3, [r3, #0]
 80155b8:	f003 0308 	and.w	r3, r3, #8
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d1ef      	bne.n	80155a0 <parse_object_value+0x19c>
    while (**string != '\0') {
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	781b      	ldrb	r3, [r3, #0]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	f47f af65 	bne.w	8015496 <parse_object_value+0x92>
 80155cc:	e006      	b.n	80155dc <parse_object_value+0x1d8>
            break;
 80155ce:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 80155d0:	e004      	b.n	80155dc <parse_object_value+0x1d8>
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	1c5a      	adds	r2, r3, #1
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	601a      	str	r2, [r3, #0]
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	781b      	ldrb	r3, [r3, #0]
 80155e2:	3301      	adds	r3, #1
 80155e4:	4a0d      	ldr	r2, [pc, #52]	; (801561c <parse_object_value+0x218>)
 80155e6:	4413      	add	r3, r2
 80155e8:	781b      	ldrb	r3, [r3, #0]
 80155ea:	f003 0308 	and.w	r3, r3, #8
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d1ef      	bne.n	80155d2 <parse_object_value+0x1ce>
    if (**string != '}') {
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	781b      	ldrb	r3, [r3, #0]
 80155f8:	2b7d      	cmp	r3, #125	; 0x7d
 80155fa:	d004      	beq.n	8015606 <parse_object_value+0x202>
        json_value_free(output_value);
 80155fc:	69b8      	ldr	r0, [r7, #24]
 80155fe:	f001 fb31 	bl	8016c64 <json_value_free>
        return NULL;
 8015602:	2300      	movs	r3, #0
 8015604:	e005      	b.n	8015612 <parse_object_value+0x20e>
    }
    SKIP_CHAR(string);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	1c5a      	adds	r2, r3, #1
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	601a      	str	r2, [r3, #0]
    return output_value;
 8015610:	69bb      	ldr	r3, [r7, #24]
}
 8015612:	4618      	mov	r0, r3
 8015614:	3720      	adds	r7, #32
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}
 801561a:	bf00      	nop
 801561c:	0801d942 	.word	0x0801d942
 8015620:	24000038 	.word	0x24000038

08015624 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 8015624:	b580      	push	{r7, lr}
 8015626:	b086      	sub	sp, #24
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
 801562c:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 801562e:	2300      	movs	r3, #0
 8015630:	617b      	str	r3, [r7, #20]
 8015632:	2300      	movs	r3, #0
 8015634:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 8015636:	2300      	movs	r3, #0
 8015638:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 801563a:	f001 fb6d 	bl	8016d18 <json_value_init_array>
 801563e:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d101      	bne.n	801564a <parse_array_value+0x26>
        return NULL;
 8015646:	2300      	movs	r3, #0
 8015648:	e0a9      	b.n	801579e <parse_array_value+0x17a>
    }
    if (**string != '[') {
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	781b      	ldrb	r3, [r3, #0]
 8015650:	2b5b      	cmp	r3, #91	; 0x5b
 8015652:	d004      	beq.n	801565e <parse_array_value+0x3a>
        json_value_free(output_value);
 8015654:	6978      	ldr	r0, [r7, #20]
 8015656:	f001 fb05 	bl	8016c64 <json_value_free>
        return NULL;
 801565a:	2300      	movs	r3, #0
 801565c:	e09f      	b.n	801579e <parse_array_value+0x17a>
    }
    output_array = json_value_get_array(output_value);
 801565e:	6978      	ldr	r0, [r7, #20]
 8015660:	f001 fa89 	bl	8016b76 <json_value_get_array>
 8015664:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	1c5a      	adds	r2, r3, #1
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 8015670:	e004      	b.n	801567c <parse_array_value+0x58>
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	1c5a      	adds	r2, r3, #1
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	601a      	str	r2, [r3, #0]
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	781b      	ldrb	r3, [r3, #0]
 8015682:	3301      	adds	r3, #1
 8015684:	4a48      	ldr	r2, [pc, #288]	; (80157a8 <parse_array_value+0x184>)
 8015686:	4413      	add	r3, r2
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	f003 0308 	and.w	r3, r3, #8
 801568e:	2b00      	cmp	r3, #0
 8015690:	d1ef      	bne.n	8015672 <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	781b      	ldrb	r3, [r3, #0]
 8015698:	2b5d      	cmp	r3, #93	; 0x5d
 801569a:	d14d      	bne.n	8015738 <parse_array_value+0x114>
        SKIP_CHAR(string);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	1c5a      	adds	r2, r3, #1
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	601a      	str	r2, [r3, #0]
        return output_value;
 80156a6:	697b      	ldr	r3, [r7, #20]
 80156a8:	e079      	b.n	801579e <parse_array_value+0x17a>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 80156aa:	6839      	ldr	r1, [r7, #0]
 80156ac:	6878      	ldr	r0, [r7, #4]
 80156ae:	f7ff fe09 	bl	80152c4 <parse_value>
 80156b2:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 80156b4:	693b      	ldr	r3, [r7, #16]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d104      	bne.n	80156c4 <parse_array_value+0xa0>
            json_value_free(output_value);
 80156ba:	6978      	ldr	r0, [r7, #20]
 80156bc:	f001 fad2 	bl	8016c64 <json_value_free>
            return NULL;
 80156c0:	2300      	movs	r3, #0
 80156c2:	e06c      	b.n	801579e <parse_array_value+0x17a>
        }
        if (json_array_add(output_array, new_array_value) != JSONSuccess) {
 80156c4:	6939      	ldr	r1, [r7, #16]
 80156c6:	68f8      	ldr	r0, [r7, #12]
 80156c8:	f7ff faf8 	bl	8014cbc <json_array_add>
 80156cc:	4603      	mov	r3, r0
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d00c      	beq.n	80156ec <parse_array_value+0xc8>
            json_value_free(new_array_value);
 80156d2:	6938      	ldr	r0, [r7, #16]
 80156d4:	f001 fac6 	bl	8016c64 <json_value_free>
            json_value_free(output_value);
 80156d8:	6978      	ldr	r0, [r7, #20]
 80156da:	f001 fac3 	bl	8016c64 <json_value_free>
            return NULL;
 80156de:	2300      	movs	r3, #0
 80156e0:	e05d      	b.n	801579e <parse_array_value+0x17a>
        }
        SKIP_WHITESPACES(string);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	1c5a      	adds	r2, r3, #1
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	601a      	str	r2, [r3, #0]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	781b      	ldrb	r3, [r3, #0]
 80156f2:	3301      	adds	r3, #1
 80156f4:	4a2c      	ldr	r2, [pc, #176]	; (80157a8 <parse_array_value+0x184>)
 80156f6:	4413      	add	r3, r2
 80156f8:	781b      	ldrb	r3, [r3, #0]
 80156fa:	f003 0308 	and.w	r3, r3, #8
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d1ef      	bne.n	80156e2 <parse_array_value+0xbe>
        if (**string != ',') {
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	2b2c      	cmp	r3, #44	; 0x2c
 801570a:	d11b      	bne.n	8015744 <parse_array_value+0x120>
            break;
        }
        SKIP_CHAR(string);
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	1c5a      	adds	r2, r3, #1
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 8015716:	e004      	b.n	8015722 <parse_array_value+0xfe>
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	1c5a      	adds	r2, r3, #1
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	601a      	str	r2, [r3, #0]
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	781b      	ldrb	r3, [r3, #0]
 8015728:	3301      	adds	r3, #1
 801572a:	4a1f      	ldr	r2, [pc, #124]	; (80157a8 <parse_array_value+0x184>)
 801572c:	4413      	add	r3, r2
 801572e:	781b      	ldrb	r3, [r3, #0]
 8015730:	f003 0308 	and.w	r3, r3, #8
 8015734:	2b00      	cmp	r3, #0
 8015736:	d1ef      	bne.n	8015718 <parse_array_value+0xf4>
    while (**string != '\0') {
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	781b      	ldrb	r3, [r3, #0]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d1b3      	bne.n	80156aa <parse_array_value+0x86>
 8015742:	e006      	b.n	8015752 <parse_array_value+0x12e>
            break;
 8015744:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 8015746:	e004      	b.n	8015752 <parse_array_value+0x12e>
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	1c5a      	adds	r2, r3, #1
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	601a      	str	r2, [r3, #0]
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	781b      	ldrb	r3, [r3, #0]
 8015758:	3301      	adds	r3, #1
 801575a:	4a13      	ldr	r2, [pc, #76]	; (80157a8 <parse_array_value+0x184>)
 801575c:	4413      	add	r3, r2
 801575e:	781b      	ldrb	r3, [r3, #0]
 8015760:	f003 0308 	and.w	r3, r3, #8
 8015764:	2b00      	cmp	r3, #0
 8015766:	d1ef      	bne.n	8015748 <parse_array_value+0x124>
    if (**string != ']' || /* Trim array after parsing is over */
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	781b      	ldrb	r3, [r3, #0]
 801576e:	2b5d      	cmp	r3, #93	; 0x5d
 8015770:	d10a      	bne.n	8015788 <parse_array_value+0x164>
        json_array_resize(output_array, json_array_get_count(output_array)) != JSONSuccess) {
 8015772:	68f8      	ldr	r0, [r7, #12]
 8015774:	f001 f9b9 	bl	8016aea <json_array_get_count>
 8015778:	4603      	mov	r3, r0
 801577a:	4619      	mov	r1, r3
 801577c:	68f8      	ldr	r0, [r7, #12]
 801577e:	f7ff fad1 	bl	8014d24 <json_array_resize>
 8015782:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 8015784:	2b00      	cmp	r3, #0
 8015786:	d004      	beq.n	8015792 <parse_array_value+0x16e>
            json_value_free(output_value);
 8015788:	6978      	ldr	r0, [r7, #20]
 801578a:	f001 fa6b 	bl	8016c64 <json_value_free>
            return NULL;
 801578e:	2300      	movs	r3, #0
 8015790:	e005      	b.n	801579e <parse_array_value+0x17a>
    }
    SKIP_CHAR(string);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	1c5a      	adds	r2, r3, #1
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	601a      	str	r2, [r3, #0]
    return output_value;
 801579c:	697b      	ldr	r3, [r7, #20]
}
 801579e:	4618      	mov	r0, r3
 80157a0:	3718      	adds	r7, #24
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}
 80157a6:	bf00      	nop
 80157a8:	0801d942 	.word	0x0801d942

080157ac <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b086      	sub	sp, #24
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 80157b4:	2300      	movs	r3, #0
 80157b6:	617b      	str	r3, [r7, #20]
    size_t new_string_len = 0;
 80157b8:	2300      	movs	r3, #0
 80157ba:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string, &new_string_len);
 80157bc:	f107 030c 	add.w	r3, r7, #12
 80157c0:	4619      	mov	r1, r3
 80157c2:	6878      	ldr	r0, [r7, #4]
 80157c4:	f7ff fd58 	bl	8015278 <get_quoted_string>
 80157c8:	6138      	str	r0, [r7, #16]
    if (new_string == NULL) {
 80157ca:	693b      	ldr	r3, [r7, #16]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d101      	bne.n	80157d4 <parse_string_value+0x28>
        return NULL;
 80157d0:	2300      	movs	r3, #0
 80157d2:	e00f      	b.n	80157f4 <parse_string_value+0x48>
    }
    value = json_value_init_string_no_copy(new_string, new_string_len);
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	4619      	mov	r1, r3
 80157d8:	6938      	ldr	r0, [r7, #16]
 80157da:	f7ff fb0b 	bl	8014df4 <json_value_init_string_no_copy>
 80157de:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d105      	bne.n	80157f2 <parse_string_value+0x46>
        parson_free(new_string);
 80157e6:	4b05      	ldr	r3, [pc, #20]	; (80157fc <parse_string_value+0x50>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	6938      	ldr	r0, [r7, #16]
 80157ec:	4798      	blx	r3
        return NULL;
 80157ee:	2300      	movs	r3, #0
 80157f0:	e000      	b.n	80157f4 <parse_string_value+0x48>
    }
    return value;
 80157f2:	697b      	ldr	r3, [r7, #20]
}
 80157f4:	4618      	mov	r0, r3
 80157f6:	3718      	adds	r7, #24
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bd80      	pop	{r7, pc}
 80157fc:	24000038 	.word	0x24000038

08015800 <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 8015800:	b580      	push	{r7, lr}
 8015802:	b084      	sub	sp, #16
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 8015808:	2304      	movs	r3, #4
 801580a:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 801580c:	2305      	movs	r3, #5
 801580e:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	68fa      	ldr	r2, [r7, #12]
 8015816:	4619      	mov	r1, r3
 8015818:	4815      	ldr	r0, [pc, #84]	; (8015870 <parse_boolean_value+0x70>)
 801581a:	f002 fbb5 	bl	8017f88 <strncmp>
 801581e:	4603      	mov	r3, r0
 8015820:	2b00      	cmp	r3, #0
 8015822:	d10a      	bne.n	801583a <parse_boolean_value+0x3a>
        *string += true_token_size;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681a      	ldr	r2, [r3, #0]
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	441a      	add	r2, r3
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 8015830:	2001      	movs	r0, #1
 8015832:	f001 fb2b 	bl	8016e8c <json_value_init_boolean>
 8015836:	4603      	mov	r3, r0
 8015838:	e015      	b.n	8015866 <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	68ba      	ldr	r2, [r7, #8]
 8015840:	4619      	mov	r1, r3
 8015842:	480c      	ldr	r0, [pc, #48]	; (8015874 <parse_boolean_value+0x74>)
 8015844:	f002 fba0 	bl	8017f88 <strncmp>
 8015848:	4603      	mov	r3, r0
 801584a:	2b00      	cmp	r3, #0
 801584c:	d10a      	bne.n	8015864 <parse_boolean_value+0x64>
        *string += false_token_size;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	681a      	ldr	r2, [r3, #0]
 8015852:	68bb      	ldr	r3, [r7, #8]
 8015854:	441a      	add	r2, r3
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 801585a:	2000      	movs	r0, #0
 801585c:	f001 fb16 	bl	8016e8c <json_value_init_boolean>
 8015860:	4603      	mov	r3, r0
 8015862:	e000      	b.n	8015866 <parse_boolean_value+0x66>
    }
    return NULL;
 8015864:	2300      	movs	r3, #0
}
 8015866:	4618      	mov	r0, r3
 8015868:	3710      	adds	r7, #16
 801586a:	46bd      	mov	sp, r7
 801586c:	bd80      	pop	{r7, pc}
 801586e:	bf00      	nop
 8015870:	0801d54c 	.word	0x0801d54c
 8015874:	0801d554 	.word	0x0801d554

08015878 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 8015878:	b580      	push	{r7, lr}
 801587a:	b086      	sub	sp, #24
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 8015880:	f04f 0200 	mov.w	r2, #0
 8015884:	f04f 0300 	mov.w	r3, #0
 8015888:	e9c7 2304 	strd	r2, r3, [r7, #16]
    errno = 0;
 801588c:	4b28      	ldr	r3, [pc, #160]	; (8015930 <parse_number_value+0xb8>)
 801588e:	2200      	movs	r2, #0
 8015890:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	f107 020c 	add.w	r2, r7, #12
 801589a:	4611      	mov	r1, r2
 801589c:	4618      	mov	r0, r3
 801589e:	f003 f975 	bl	8018b8c <strtod>
 80158a2:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno == ERANGE && (number <= -HUGE_VAL || number >= HUGE_VAL)) {
 80158a6:	4b22      	ldr	r3, [pc, #136]	; (8015930 <parse_number_value+0xb8>)
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	2b22      	cmp	r3, #34	; 0x22
 80158ac:	d113      	bne.n	80158d6 <parse_number_value+0x5e>
 80158ae:	ed97 7b04 	vldr	d7, [r7, #16]
 80158b2:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8015920 <parse_number_value+0xa8>
 80158b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80158ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158be:	d408      	bmi.n	80158d2 <parse_number_value+0x5a>
 80158c0:	ed97 7b04 	vldr	d7, [r7, #16]
 80158c4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8015928 <parse_number_value+0xb0>
 80158c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80158cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158d0:	dd01      	ble.n	80158d6 <parse_number_value+0x5e>
        return NULL;
 80158d2:	2300      	movs	r3, #0
 80158d4:	e01d      	b.n	8015912 <parse_number_value+0x9a>
    }
    if ((errno && errno != ERANGE) || !is_decimal(*string, end - *string)) {
 80158d6:	4b16      	ldr	r3, [pc, #88]	; (8015930 <parse_number_value+0xb8>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d003      	beq.n	80158e6 <parse_number_value+0x6e>
 80158de:	4b14      	ldr	r3, [pc, #80]	; (8015930 <parse_number_value+0xb8>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	2b22      	cmp	r3, #34	; 0x22
 80158e4:	d10b      	bne.n	80158fe <parse_number_value+0x86>
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	6818      	ldr	r0, [r3, #0]
 80158ea:	68fa      	ldr	r2, [r7, #12]
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	1ad3      	subs	r3, r2, r3
 80158f2:	4619      	mov	r1, r3
 80158f4:	f7fe fe92 	bl	801461c <is_decimal>
 80158f8:	4603      	mov	r3, r0
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d101      	bne.n	8015902 <parse_number_value+0x8a>
        return NULL;
 80158fe:	2300      	movs	r3, #0
 8015900:	e007      	b.n	8015912 <parse_number_value+0x9a>
    }
    *string = end;
 8015902:	68fa      	ldr	r2, [r7, #12]
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 8015908:	ed97 0b04 	vldr	d0, [r7, #16]
 801590c:	f001 fa78 	bl	8016e00 <json_value_init_number>
 8015910:	4603      	mov	r3, r0
}
 8015912:	4618      	mov	r0, r3
 8015914:	3718      	adds	r7, #24
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}
 801591a:	bf00      	nop
 801591c:	f3af 8000 	nop.w
 8015920:	ffffffff 	.word	0xffffffff
 8015924:	ffefffff 	.word	0xffefffff
 8015928:	ffffffff 	.word	0xffffffff
 801592c:	7fefffff 	.word	0x7fefffff
 8015930:	2400ee28 	.word	0x2400ee28

08015934 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 8015934:	b580      	push	{r7, lr}
 8015936:	b084      	sub	sp, #16
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 801593c:	2304      	movs	r3, #4
 801593e:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	68fa      	ldr	r2, [r7, #12]
 8015946:	4619      	mov	r1, r3
 8015948:	480a      	ldr	r0, [pc, #40]	; (8015974 <parse_null_value+0x40>)
 801594a:	f002 fb1d 	bl	8017f88 <strncmp>
 801594e:	4603      	mov	r3, r0
 8015950:	2b00      	cmp	r3, #0
 8015952:	d109      	bne.n	8015968 <parse_null_value+0x34>
        *string += token_size;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	681a      	ldr	r2, [r3, #0]
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	441a      	add	r2, r3
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 8015960:	f001 fab8 	bl	8016ed4 <json_value_init_null>
 8015964:	4603      	mov	r3, r0
 8015966:	e000      	b.n	801596a <parse_null_value+0x36>
    }
    return NULL;
 8015968:	2300      	movs	r3, #0
}
 801596a:	4618      	mov	r0, r3
 801596c:	3710      	adds	r7, #16
 801596e:	46bd      	mov	sp, r7
 8015970:	bd80      	pop	{r7, pc}
 8015972:	bf00      	nop
 8015974:	0801d55c 	.word	0x0801d55c

08015978 <json_serialize_to_buffer_r>:
                                  if (written < 0) { return -1; }\
                                  if (buf != NULL) { buf += written; }\
                                  written_total += written; } while(0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, parson_bool_t is_pretty, char *num_buf)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b092      	sub	sp, #72	; 0x48
 801597c:	af02      	add	r7, sp, #8
 801597e:	60f8      	str	r0, [r7, #12]
 8015980:	60b9      	str	r1, [r7, #8]
 8015982:	607a      	str	r2, [r7, #4]
 8015984:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 8015986:	2300      	movs	r3, #0
 8015988:	637b      	str	r3, [r7, #52]	; 0x34
 801598a:	2300      	movs	r3, #0
 801598c:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Value *temp_value = NULL;
 801598e:	2300      	movs	r3, #0
 8015990:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Array *array = NULL;
 8015992:	2300      	movs	r3, #0
 8015994:	62bb      	str	r3, [r7, #40]	; 0x28
    JSON_Object *object = NULL;
 8015996:	2300      	movs	r3, #0
 8015998:	627b      	str	r3, [r7, #36]	; 0x24
    size_t i = 0, count = 0;
 801599a:	2300      	movs	r3, #0
 801599c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801599e:	2300      	movs	r3, #0
 80159a0:	623b      	str	r3, [r7, #32]
    double num = 0.0;
 80159a2:	f04f 0200 	mov.w	r2, #0
 80159a6:	f04f 0300 	mov.w	r3, #0
 80159aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 80159ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159b2:	617b      	str	r3, [r7, #20]
 80159b4:	2300      	movs	r3, #0
 80159b6:	63bb      	str	r3, [r7, #56]	; 0x38
    size_t len = 0;
 80159b8:	2300      	movs	r3, #0
 80159ba:	613b      	str	r3, [r7, #16]

    switch (json_value_get_type(value)) {
 80159bc:	68f8      	ldr	r0, [r7, #12]
 80159be:	f001 f8b6 	bl	8016b2e <json_value_get_type>
 80159c2:	4603      	mov	r3, r0
 80159c4:	3301      	adds	r3, #1
 80159c6:	2b07      	cmp	r3, #7
 80159c8:	f200 82f2 	bhi.w	8015fb0 <json_serialize_to_buffer_r+0x638>
 80159cc:	a201      	add	r2, pc, #4	; (adr r2, 80159d4 <json_serialize_to_buffer_r+0x5c>)
 80159ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159d2:	bf00      	nop
 80159d4:	08015fab 	.word	0x08015fab
 80159d8:	08015fb1 	.word	0x08015fb1
 80159dc:	08015f7b 	.word	0x08015f7b
 80159e0:	08015e53 	.word	0x08015e53
 80159e4:	08015f0b 	.word	0x08015f0b
 80159e8:	08015bc3 	.word	0x08015bc3
 80159ec:	080159f5 	.word	0x080159f5
 80159f0:	08015ea1 	.word	0x08015ea1
        case JSONArray:
            array = json_value_get_array(value);
 80159f4:	68f8      	ldr	r0, [r7, #12]
 80159f6:	f001 f8be 	bl	8016b76 <json_value_get_array>
 80159fa:	62b8      	str	r0, [r7, #40]	; 0x28
            count = json_array_get_count(array);
 80159fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159fe:	f001 f874 	bl	8016aea <json_array_get_count>
 8015a02:	6238      	str	r0, [r7, #32]
            APPEND_STRING("[");
 8015a04:	499b      	ldr	r1, [pc, #620]	; (8015c74 <json_serialize_to_buffer_r+0x2fc>)
 8015a06:	68b8      	ldr	r0, [r7, #8]
 8015a08:	f000 ffbe 	bl	8016988 <append_string>
 8015a0c:	6178      	str	r0, [r7, #20]
 8015a0e:	697b      	ldr	r3, [r7, #20]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	da02      	bge.n	8015a1a <json_serialize_to_buffer_r+0xa2>
 8015a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a18:	e2cc      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015a1a:	68bb      	ldr	r3, [r7, #8]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d003      	beq.n	8015a28 <json_serialize_to_buffer_r+0xb0>
 8015a20:	697b      	ldr	r3, [r7, #20]
 8015a22:	68ba      	ldr	r2, [r7, #8]
 8015a24:	4413      	add	r3, r2
 8015a26:	60bb      	str	r3, [r7, #8]
 8015a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a2a:	697b      	ldr	r3, [r7, #20]
 8015a2c:	4413      	add	r3, r2
 8015a2e:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 8015a30:	6a3b      	ldr	r3, [r7, #32]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d018      	beq.n	8015a68 <json_serialize_to_buffer_r+0xf0>
 8015a36:	683b      	ldr	r3, [r7, #0]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d015      	beq.n	8015a68 <json_serialize_to_buffer_r+0xf0>
                APPEND_STRING("\n");
 8015a3c:	498e      	ldr	r1, [pc, #568]	; (8015c78 <json_serialize_to_buffer_r+0x300>)
 8015a3e:	68b8      	ldr	r0, [r7, #8]
 8015a40:	f000 ffa2 	bl	8016988 <append_string>
 8015a44:	6178      	str	r0, [r7, #20]
 8015a46:	697b      	ldr	r3, [r7, #20]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	da02      	bge.n	8015a52 <json_serialize_to_buffer_r+0xda>
 8015a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a50:	e2b0      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015a52:	68bb      	ldr	r3, [r7, #8]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d003      	beq.n	8015a60 <json_serialize_to_buffer_r+0xe8>
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	68ba      	ldr	r2, [r7, #8]
 8015a5c:	4413      	add	r3, r2
 8015a5e:	60bb      	str	r3, [r7, #8]
 8015a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a62:	697b      	ldr	r3, [r7, #20]
 8015a64:	4413      	add	r3, r2
 8015a66:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 8015a68:	2300      	movs	r3, #0
 8015a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015a6c:	e071      	b.n	8015b52 <json_serialize_to_buffer_r+0x1da>
                if (is_pretty) {
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d017      	beq.n	8015aa4 <json_serialize_to_buffer_r+0x12c>
                    APPEND_INDENT(level+1);
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	3301      	adds	r3, #1
 8015a78:	4619      	mov	r1, r3
 8015a7a:	68b8      	ldr	r0, [r7, #8]
 8015a7c:	f000 ff52 	bl	8016924 <append_indent>
 8015a80:	6178      	str	r0, [r7, #20]
 8015a82:	697b      	ldr	r3, [r7, #20]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	da02      	bge.n	8015a8e <json_serialize_to_buffer_r+0x116>
 8015a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a8c:	e292      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015a8e:	68bb      	ldr	r3, [r7, #8]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d003      	beq.n	8015a9c <json_serialize_to_buffer_r+0x124>
 8015a94:	697b      	ldr	r3, [r7, #20]
 8015a96:	68ba      	ldr	r2, [r7, #8]
 8015a98:	4413      	add	r3, r2
 8015a9a:	60bb      	str	r3, [r7, #8]
 8015a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a9e:	697b      	ldr	r3, [r7, #20]
 8015aa0:	4413      	add	r3, r2
 8015aa2:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_array_get_value(array, i);
 8015aa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015aa8:	f001 f804 	bl	8016ab4 <json_array_get_value>
 8015aac:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	1c5a      	adds	r2, r3, #1
 8015ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ab4:	9300      	str	r3, [sp, #0]
 8015ab6:	683b      	ldr	r3, [r7, #0]
 8015ab8:	68b9      	ldr	r1, [r7, #8]
 8015aba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015abc:	f7ff ff5c 	bl	8015978 <json_serialize_to_buffer_r>
 8015ac0:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 8015ac2:	697b      	ldr	r3, [r7, #20]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	da02      	bge.n	8015ace <json_serialize_to_buffer_r+0x156>
                    return -1;
 8015ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015acc:	e272      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
                }
                if (buf != NULL) {
 8015ace:	68bb      	ldr	r3, [r7, #8]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d003      	beq.n	8015adc <json_serialize_to_buffer_r+0x164>
                    buf += written;
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	68ba      	ldr	r2, [r7, #8]
 8015ad8:	4413      	add	r3, r2
 8015ada:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8015adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ade:	697b      	ldr	r3, [r7, #20]
 8015ae0:	4413      	add	r3, r2
 8015ae2:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 8015ae4:	6a3b      	ldr	r3, [r7, #32]
 8015ae6:	3b01      	subs	r3, #1
 8015ae8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015aea:	429a      	cmp	r2, r3
 8015aec:	d215      	bcs.n	8015b1a <json_serialize_to_buffer_r+0x1a2>
                    APPEND_STRING(",");
 8015aee:	4963      	ldr	r1, [pc, #396]	; (8015c7c <json_serialize_to_buffer_r+0x304>)
 8015af0:	68b8      	ldr	r0, [r7, #8]
 8015af2:	f000 ff49 	bl	8016988 <append_string>
 8015af6:	6178      	str	r0, [r7, #20]
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	da02      	bge.n	8015b04 <json_serialize_to_buffer_r+0x18c>
 8015afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b02:	e257      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015b04:	68bb      	ldr	r3, [r7, #8]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d003      	beq.n	8015b12 <json_serialize_to_buffer_r+0x19a>
 8015b0a:	697b      	ldr	r3, [r7, #20]
 8015b0c:	68ba      	ldr	r2, [r7, #8]
 8015b0e:	4413      	add	r3, r2
 8015b10:	60bb      	str	r3, [r7, #8]
 8015b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	4413      	add	r3, r2
 8015b18:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 8015b1a:	683b      	ldr	r3, [r7, #0]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d015      	beq.n	8015b4c <json_serialize_to_buffer_r+0x1d4>
                    APPEND_STRING("\n");
 8015b20:	4955      	ldr	r1, [pc, #340]	; (8015c78 <json_serialize_to_buffer_r+0x300>)
 8015b22:	68b8      	ldr	r0, [r7, #8]
 8015b24:	f000 ff30 	bl	8016988 <append_string>
 8015b28:	6178      	str	r0, [r7, #20]
 8015b2a:	697b      	ldr	r3, [r7, #20]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	da02      	bge.n	8015b36 <json_serialize_to_buffer_r+0x1be>
 8015b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b34:	e23e      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015b36:	68bb      	ldr	r3, [r7, #8]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d003      	beq.n	8015b44 <json_serialize_to_buffer_r+0x1cc>
 8015b3c:	697b      	ldr	r3, [r7, #20]
 8015b3e:	68ba      	ldr	r2, [r7, #8]
 8015b40:	4413      	add	r3, r2
 8015b42:	60bb      	str	r3, [r7, #8]
 8015b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015b46:	697b      	ldr	r3, [r7, #20]
 8015b48:	4413      	add	r3, r2
 8015b4a:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 8015b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b4e:	3301      	adds	r3, #1
 8015b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015b54:	6a3b      	ldr	r3, [r7, #32]
 8015b56:	429a      	cmp	r2, r3
 8015b58:	d389      	bcc.n	8015a6e <json_serialize_to_buffer_r+0xf6>
                }
            }
            if (count > 0 && is_pretty) {
 8015b5a:	6a3b      	ldr	r3, [r7, #32]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d018      	beq.n	8015b92 <json_serialize_to_buffer_r+0x21a>
 8015b60:	683b      	ldr	r3, [r7, #0]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d015      	beq.n	8015b92 <json_serialize_to_buffer_r+0x21a>
                APPEND_INDENT(level);
 8015b66:	6879      	ldr	r1, [r7, #4]
 8015b68:	68b8      	ldr	r0, [r7, #8]
 8015b6a:	f000 fedb 	bl	8016924 <append_indent>
 8015b6e:	6178      	str	r0, [r7, #20]
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	da02      	bge.n	8015b7c <json_serialize_to_buffer_r+0x204>
 8015b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b7a:	e21b      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015b7c:	68bb      	ldr	r3, [r7, #8]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d003      	beq.n	8015b8a <json_serialize_to_buffer_r+0x212>
 8015b82:	697b      	ldr	r3, [r7, #20]
 8015b84:	68ba      	ldr	r2, [r7, #8]
 8015b86:	4413      	add	r3, r2
 8015b88:	60bb      	str	r3, [r7, #8]
 8015b8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	4413      	add	r3, r2
 8015b90:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("]");
 8015b92:	493b      	ldr	r1, [pc, #236]	; (8015c80 <json_serialize_to_buffer_r+0x308>)
 8015b94:	68b8      	ldr	r0, [r7, #8]
 8015b96:	f000 fef7 	bl	8016988 <append_string>
 8015b9a:	6178      	str	r0, [r7, #20]
 8015b9c:	697b      	ldr	r3, [r7, #20]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	da02      	bge.n	8015ba8 <json_serialize_to_buffer_r+0x230>
 8015ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ba6:	e205      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015ba8:	68bb      	ldr	r3, [r7, #8]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d003      	beq.n	8015bb6 <json_serialize_to_buffer_r+0x23e>
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	68ba      	ldr	r2, [r7, #8]
 8015bb2:	4413      	add	r3, r2
 8015bb4:	60bb      	str	r3, [r7, #8]
 8015bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	4413      	add	r3, r2
 8015bbc:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 8015bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bc0:	e1f8      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
        case JSONObject:
            object = json_value_get_object(value);
 8015bc2:	68f8      	ldr	r0, [r7, #12]
 8015bc4:	f000 ffc5 	bl	8016b52 <json_value_get_object>
 8015bc8:	6278      	str	r0, [r7, #36]	; 0x24
            count  = json_object_get_count(object);
 8015bca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015bcc:	f000 ff1a 	bl	8016a04 <json_object_get_count>
 8015bd0:	6238      	str	r0, [r7, #32]
            APPEND_STRING("{");
 8015bd2:	492c      	ldr	r1, [pc, #176]	; (8015c84 <json_serialize_to_buffer_r+0x30c>)
 8015bd4:	68b8      	ldr	r0, [r7, #8]
 8015bd6:	f000 fed7 	bl	8016988 <append_string>
 8015bda:	6178      	str	r0, [r7, #20]
 8015bdc:	697b      	ldr	r3, [r7, #20]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	da02      	bge.n	8015be8 <json_serialize_to_buffer_r+0x270>
 8015be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015be6:	e1e5      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015be8:	68bb      	ldr	r3, [r7, #8]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d003      	beq.n	8015bf6 <json_serialize_to_buffer_r+0x27e>
 8015bee:	697b      	ldr	r3, [r7, #20]
 8015bf0:	68ba      	ldr	r2, [r7, #8]
 8015bf2:	4413      	add	r3, r2
 8015bf4:	60bb      	str	r3, [r7, #8]
 8015bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	4413      	add	r3, r2
 8015bfc:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 8015bfe:	6a3b      	ldr	r3, [r7, #32]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d018      	beq.n	8015c36 <json_serialize_to_buffer_r+0x2be>
 8015c04:	683b      	ldr	r3, [r7, #0]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d015      	beq.n	8015c36 <json_serialize_to_buffer_r+0x2be>
                APPEND_STRING("\n");
 8015c0a:	491b      	ldr	r1, [pc, #108]	; (8015c78 <json_serialize_to_buffer_r+0x300>)
 8015c0c:	68b8      	ldr	r0, [r7, #8]
 8015c0e:	f000 febb 	bl	8016988 <append_string>
 8015c12:	6178      	str	r0, [r7, #20]
 8015c14:	697b      	ldr	r3, [r7, #20]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	da02      	bge.n	8015c20 <json_serialize_to_buffer_r+0x2a8>
 8015c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c1e:	e1c9      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015c20:	68bb      	ldr	r3, [r7, #8]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d003      	beq.n	8015c2e <json_serialize_to_buffer_r+0x2b6>
 8015c26:	697b      	ldr	r3, [r7, #20]
 8015c28:	68ba      	ldr	r2, [r7, #8]
 8015c2a:	4413      	add	r3, r2
 8015c2c:	60bb      	str	r3, [r7, #8]
 8015c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015c30:	697b      	ldr	r3, [r7, #20]
 8015c32:	4413      	add	r3, r2
 8015c34:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 8015c36:	2300      	movs	r3, #0
 8015c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015c3a:	e0d1      	b.n	8015de0 <json_serialize_to_buffer_r+0x468>
                key = json_object_get_name(object, i);
 8015c3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c40:	f000 fef1 	bl	8016a26 <json_object_get_name>
 8015c44:	6378      	str	r0, [r7, #52]	; 0x34
                if (key == NULL) {
 8015c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d102      	bne.n	8015c52 <json_serialize_to_buffer_r+0x2da>
                    return -1;
 8015c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c50:	e1b0      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
                }
                if (is_pretty) {
 8015c52:	683b      	ldr	r3, [r7, #0]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d022      	beq.n	8015c9e <json_serialize_to_buffer_r+0x326>
                    APPEND_INDENT(level+1);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	3301      	adds	r3, #1
 8015c5c:	4619      	mov	r1, r3
 8015c5e:	68b8      	ldr	r0, [r7, #8]
 8015c60:	f000 fe60 	bl	8016924 <append_indent>
 8015c64:	6178      	str	r0, [r7, #20]
 8015c66:	697b      	ldr	r3, [r7, #20]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	da0d      	bge.n	8015c88 <json_serialize_to_buffer_r+0x310>
 8015c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c70:	e1a0      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015c72:	bf00      	nop
 8015c74:	0801d564 	.word	0x0801d564
 8015c78:	0801d568 	.word	0x0801d568
 8015c7c:	0801d56c 	.word	0x0801d56c
 8015c80:	0801d570 	.word	0x0801d570
 8015c84:	0801d574 	.word	0x0801d574
 8015c88:	68bb      	ldr	r3, [r7, #8]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d003      	beq.n	8015c96 <json_serialize_to_buffer_r+0x31e>
 8015c8e:	697b      	ldr	r3, [r7, #20]
 8015c90:	68ba      	ldr	r2, [r7, #8]
 8015c92:	4413      	add	r3, r2
 8015c94:	60bb      	str	r3, [r7, #8]
 8015c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015c98:	697b      	ldr	r3, [r7, #20]
 8015c9a:	4413      	add	r3, r2
 8015c9c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                /* We do not support key names with embedded \0 chars */
                written = json_serialize_string(key, strlen(key), buf);
 8015c9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015ca0:	f7ea fb28 	bl	80002f4 <strlen>
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	68ba      	ldr	r2, [r7, #8]
 8015ca8:	4619      	mov	r1, r3
 8015caa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015cac:	f000 f988 	bl	8015fc0 <json_serialize_string>
 8015cb0:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 8015cb2:	697b      	ldr	r3, [r7, #20]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	da02      	bge.n	8015cbe <json_serialize_to_buffer_r+0x346>
                    return -1;
 8015cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015cbc:	e17a      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
                }
                if (buf != NULL) {
 8015cbe:	68bb      	ldr	r3, [r7, #8]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d003      	beq.n	8015ccc <json_serialize_to_buffer_r+0x354>
                    buf += written;
 8015cc4:	697b      	ldr	r3, [r7, #20]
 8015cc6:	68ba      	ldr	r2, [r7, #8]
 8015cc8:	4413      	add	r3, r2
 8015cca:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8015ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015cce:	697b      	ldr	r3, [r7, #20]
 8015cd0:	4413      	add	r3, r2
 8015cd2:	63bb      	str	r3, [r7, #56]	; 0x38
                APPEND_STRING(":");
 8015cd4:	499a      	ldr	r1, [pc, #616]	; (8015f40 <json_serialize_to_buffer_r+0x5c8>)
 8015cd6:	68b8      	ldr	r0, [r7, #8]
 8015cd8:	f000 fe56 	bl	8016988 <append_string>
 8015cdc:	6178      	str	r0, [r7, #20]
 8015cde:	697b      	ldr	r3, [r7, #20]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	da02      	bge.n	8015cea <json_serialize_to_buffer_r+0x372>
 8015ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ce8:	e164      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015cea:	68bb      	ldr	r3, [r7, #8]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d003      	beq.n	8015cf8 <json_serialize_to_buffer_r+0x380>
 8015cf0:	697b      	ldr	r3, [r7, #20]
 8015cf2:	68ba      	ldr	r2, [r7, #8]
 8015cf4:	4413      	add	r3, r2
 8015cf6:	60bb      	str	r3, [r7, #8]
 8015cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015cfa:	697b      	ldr	r3, [r7, #20]
 8015cfc:	4413      	add	r3, r2
 8015cfe:	63bb      	str	r3, [r7, #56]	; 0x38
                if (is_pretty) {
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d015      	beq.n	8015d32 <json_serialize_to_buffer_r+0x3ba>
                    APPEND_STRING(" ");
 8015d06:	498f      	ldr	r1, [pc, #572]	; (8015f44 <json_serialize_to_buffer_r+0x5cc>)
 8015d08:	68b8      	ldr	r0, [r7, #8]
 8015d0a:	f000 fe3d 	bl	8016988 <append_string>
 8015d0e:	6178      	str	r0, [r7, #20]
 8015d10:	697b      	ldr	r3, [r7, #20]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	da02      	bge.n	8015d1c <json_serialize_to_buffer_r+0x3a4>
 8015d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d1a:	e14b      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015d1c:	68bb      	ldr	r3, [r7, #8]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d003      	beq.n	8015d2a <json_serialize_to_buffer_r+0x3b2>
 8015d22:	697b      	ldr	r3, [r7, #20]
 8015d24:	68ba      	ldr	r2, [r7, #8]
 8015d26:	4413      	add	r3, r2
 8015d28:	60bb      	str	r3, [r7, #8]
 8015d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	4413      	add	r3, r2
 8015d30:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_object_get_value_at(object, i);
 8015d32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015d34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d36:	f000 fe91 	bl	8016a5c <json_object_get_value_at>
 8015d3a:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	1c5a      	adds	r2, r3, #1
 8015d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d42:	9300      	str	r3, [sp, #0]
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	68b9      	ldr	r1, [r7, #8]
 8015d48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d4a:	f7ff fe15 	bl	8015978 <json_serialize_to_buffer_r>
 8015d4e:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 8015d50:	697b      	ldr	r3, [r7, #20]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	da02      	bge.n	8015d5c <json_serialize_to_buffer_r+0x3e4>
                    return -1;
 8015d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d5a:	e12b      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
                }
                if (buf != NULL) {
 8015d5c:	68bb      	ldr	r3, [r7, #8]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d003      	beq.n	8015d6a <json_serialize_to_buffer_r+0x3f2>
                    buf += written;
 8015d62:	697b      	ldr	r3, [r7, #20]
 8015d64:	68ba      	ldr	r2, [r7, #8]
 8015d66:	4413      	add	r3, r2
 8015d68:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8015d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d6c:	697b      	ldr	r3, [r7, #20]
 8015d6e:	4413      	add	r3, r2
 8015d70:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 8015d72:	6a3b      	ldr	r3, [r7, #32]
 8015d74:	3b01      	subs	r3, #1
 8015d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015d78:	429a      	cmp	r2, r3
 8015d7a:	d215      	bcs.n	8015da8 <json_serialize_to_buffer_r+0x430>
                    APPEND_STRING(",");
 8015d7c:	4972      	ldr	r1, [pc, #456]	; (8015f48 <json_serialize_to_buffer_r+0x5d0>)
 8015d7e:	68b8      	ldr	r0, [r7, #8]
 8015d80:	f000 fe02 	bl	8016988 <append_string>
 8015d84:	6178      	str	r0, [r7, #20]
 8015d86:	697b      	ldr	r3, [r7, #20]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	da02      	bge.n	8015d92 <json_serialize_to_buffer_r+0x41a>
 8015d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d90:	e110      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d003      	beq.n	8015da0 <json_serialize_to_buffer_r+0x428>
 8015d98:	697b      	ldr	r3, [r7, #20]
 8015d9a:	68ba      	ldr	r2, [r7, #8]
 8015d9c:	4413      	add	r3, r2
 8015d9e:	60bb      	str	r3, [r7, #8]
 8015da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015da2:	697b      	ldr	r3, [r7, #20]
 8015da4:	4413      	add	r3, r2
 8015da6:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d015      	beq.n	8015dda <json_serialize_to_buffer_r+0x462>
                    APPEND_STRING("\n");
 8015dae:	4967      	ldr	r1, [pc, #412]	; (8015f4c <json_serialize_to_buffer_r+0x5d4>)
 8015db0:	68b8      	ldr	r0, [r7, #8]
 8015db2:	f000 fde9 	bl	8016988 <append_string>
 8015db6:	6178      	str	r0, [r7, #20]
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	da02      	bge.n	8015dc4 <json_serialize_to_buffer_r+0x44c>
 8015dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015dc2:	e0f7      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015dc4:	68bb      	ldr	r3, [r7, #8]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d003      	beq.n	8015dd2 <json_serialize_to_buffer_r+0x45a>
 8015dca:	697b      	ldr	r3, [r7, #20]
 8015dcc:	68ba      	ldr	r2, [r7, #8]
 8015dce:	4413      	add	r3, r2
 8015dd0:	60bb      	str	r3, [r7, #8]
 8015dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015dd4:	697b      	ldr	r3, [r7, #20]
 8015dd6:	4413      	add	r3, r2
 8015dd8:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 8015dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ddc:	3301      	adds	r3, #1
 8015dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015de0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015de2:	6a3b      	ldr	r3, [r7, #32]
 8015de4:	429a      	cmp	r2, r3
 8015de6:	f4ff af29 	bcc.w	8015c3c <json_serialize_to_buffer_r+0x2c4>
                }
            }
            if (count > 0 && is_pretty) {
 8015dea:	6a3b      	ldr	r3, [r7, #32]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d018      	beq.n	8015e22 <json_serialize_to_buffer_r+0x4aa>
 8015df0:	683b      	ldr	r3, [r7, #0]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d015      	beq.n	8015e22 <json_serialize_to_buffer_r+0x4aa>
                APPEND_INDENT(level);
 8015df6:	6879      	ldr	r1, [r7, #4]
 8015df8:	68b8      	ldr	r0, [r7, #8]
 8015dfa:	f000 fd93 	bl	8016924 <append_indent>
 8015dfe:	6178      	str	r0, [r7, #20]
 8015e00:	697b      	ldr	r3, [r7, #20]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	da02      	bge.n	8015e0c <json_serialize_to_buffer_r+0x494>
 8015e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e0a:	e0d3      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d003      	beq.n	8015e1a <json_serialize_to_buffer_r+0x4a2>
 8015e12:	697b      	ldr	r3, [r7, #20]
 8015e14:	68ba      	ldr	r2, [r7, #8]
 8015e16:	4413      	add	r3, r2
 8015e18:	60bb      	str	r3, [r7, #8]
 8015e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	4413      	add	r3, r2
 8015e20:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("}");
 8015e22:	494b      	ldr	r1, [pc, #300]	; (8015f50 <json_serialize_to_buffer_r+0x5d8>)
 8015e24:	68b8      	ldr	r0, [r7, #8]
 8015e26:	f000 fdaf 	bl	8016988 <append_string>
 8015e2a:	6178      	str	r0, [r7, #20]
 8015e2c:	697b      	ldr	r3, [r7, #20]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	da02      	bge.n	8015e38 <json_serialize_to_buffer_r+0x4c0>
 8015e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e36:	e0bd      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015e38:	68bb      	ldr	r3, [r7, #8]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d003      	beq.n	8015e46 <json_serialize_to_buffer_r+0x4ce>
 8015e3e:	697b      	ldr	r3, [r7, #20]
 8015e40:	68ba      	ldr	r2, [r7, #8]
 8015e42:	4413      	add	r3, r2
 8015e44:	60bb      	str	r3, [r7, #8]
 8015e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015e48:	697b      	ldr	r3, [r7, #20]
 8015e4a:	4413      	add	r3, r2
 8015e4c:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 8015e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e50:	e0b0      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
        case JSONString:
            string = json_value_get_string(value);
 8015e52:	68f8      	ldr	r0, [r7, #12]
 8015e54:	f000 feb3 	bl	8016bbe <json_value_get_string>
 8015e58:	6338      	str	r0, [r7, #48]	; 0x30
            if (string == NULL) {
 8015e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d102      	bne.n	8015e66 <json_serialize_to_buffer_r+0x4ee>
                return -1;
 8015e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e64:	e0a6      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
            }
            len = json_value_get_string_len(value);
 8015e66:	68f8      	ldr	r0, [r7, #12]
 8015e68:	f000 febc 	bl	8016be4 <json_value_get_string_len>
 8015e6c:	6138      	str	r0, [r7, #16]
            written = json_serialize_string(string, len, buf);
 8015e6e:	68ba      	ldr	r2, [r7, #8]
 8015e70:	6939      	ldr	r1, [r7, #16]
 8015e72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e74:	f000 f8a4 	bl	8015fc0 <json_serialize_string>
 8015e78:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 8015e7a:	697b      	ldr	r3, [r7, #20]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	da02      	bge.n	8015e86 <json_serialize_to_buffer_r+0x50e>
                return -1;
 8015e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e84:	e096      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
            }
            if (buf != NULL) {
 8015e86:	68bb      	ldr	r3, [r7, #8]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d003      	beq.n	8015e94 <json_serialize_to_buffer_r+0x51c>
                buf += written;
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	68ba      	ldr	r2, [r7, #8]
 8015e90:	4413      	add	r3, r2
 8015e92:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 8015e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015e96:	697b      	ldr	r3, [r7, #20]
 8015e98:	4413      	add	r3, r2
 8015e9a:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 8015e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e9e:	e089      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 8015ea0:	68f8      	ldr	r0, [r7, #12]
 8015ea2:	f000 fecb 	bl	8016c3c <json_value_get_boolean>
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d016      	beq.n	8015eda <json_serialize_to_buffer_r+0x562>
                APPEND_STRING("true");
 8015eac:	4929      	ldr	r1, [pc, #164]	; (8015f54 <json_serialize_to_buffer_r+0x5dc>)
 8015eae:	68b8      	ldr	r0, [r7, #8]
 8015eb0:	f000 fd6a 	bl	8016988 <append_string>
 8015eb4:	6178      	str	r0, [r7, #20]
 8015eb6:	697b      	ldr	r3, [r7, #20]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	da02      	bge.n	8015ec2 <json_serialize_to_buffer_r+0x54a>
 8015ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ec0:	e078      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d003      	beq.n	8015ed0 <json_serialize_to_buffer_r+0x558>
 8015ec8:	697b      	ldr	r3, [r7, #20]
 8015eca:	68ba      	ldr	r2, [r7, #8]
 8015ecc:	4413      	add	r3, r2
 8015ece:	60bb      	str	r3, [r7, #8]
 8015ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ed2:	697b      	ldr	r3, [r7, #20]
 8015ed4:	4413      	add	r3, r2
 8015ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ed8:	e015      	b.n	8015f06 <json_serialize_to_buffer_r+0x58e>
            } else {
                APPEND_STRING("false");
 8015eda:	491f      	ldr	r1, [pc, #124]	; (8015f58 <json_serialize_to_buffer_r+0x5e0>)
 8015edc:	68b8      	ldr	r0, [r7, #8]
 8015ede:	f000 fd53 	bl	8016988 <append_string>
 8015ee2:	6178      	str	r0, [r7, #20]
 8015ee4:	697b      	ldr	r3, [r7, #20]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	da02      	bge.n	8015ef0 <json_serialize_to_buffer_r+0x578>
 8015eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015eee:	e061      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015ef0:	68bb      	ldr	r3, [r7, #8]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d003      	beq.n	8015efe <json_serialize_to_buffer_r+0x586>
 8015ef6:	697b      	ldr	r3, [r7, #20]
 8015ef8:	68ba      	ldr	r2, [r7, #8]
 8015efa:	4413      	add	r3, r2
 8015efc:	60bb      	str	r3, [r7, #8]
 8015efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015f00:	697b      	ldr	r3, [r7, #20]
 8015f02:	4413      	add	r3, r2
 8015f04:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            return written_total;
 8015f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f08:	e054      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
        case JSONNumber:
            num = json_value_get_number(value);
 8015f0a:	68f8      	ldr	r0, [r7, #12]
 8015f0c:	f000 fe7d 	bl	8016c0a <json_value_get_number>
 8015f10:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d001      	beq.n	8015f1e <json_serialize_to_buffer_r+0x5a6>
                num_buf = buf;
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            written = sprintf(num_buf, FLOAT_FORMAT,(int) num);
 8015f1e:	ed97 7b06 	vldr	d7, [r7, #24]
 8015f22:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8015f26:	ee17 2a90 	vmov	r2, s15
 8015f2a:	490c      	ldr	r1, [pc, #48]	; (8015f5c <json_serialize_to_buffer_r+0x5e4>)
 8015f2c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015f2e:	f001 ffbb 	bl	8017ea8 <siprintf>
 8015f32:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 8015f34:	697b      	ldr	r3, [r7, #20]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	da12      	bge.n	8015f60 <json_serialize_to_buffer_r+0x5e8>
                return -1;
 8015f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f3e:	e039      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015f40:	0801d578 	.word	0x0801d578
 8015f44:	0801d57c 	.word	0x0801d57c
 8015f48:	0801d56c 	.word	0x0801d56c
 8015f4c:	0801d568 	.word	0x0801d568
 8015f50:	0801d580 	.word	0x0801d580
 8015f54:	0801d54c 	.word	0x0801d54c
 8015f58:	0801d554 	.word	0x0801d554
 8015f5c:	0801d584 	.word	0x0801d584
            }
            if (buf != NULL) {
 8015f60:	68bb      	ldr	r3, [r7, #8]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d003      	beq.n	8015f6e <json_serialize_to_buffer_r+0x5f6>
                buf += written;
 8015f66:	697b      	ldr	r3, [r7, #20]
 8015f68:	68ba      	ldr	r2, [r7, #8]
 8015f6a:	4413      	add	r3, r2
 8015f6c:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 8015f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015f70:	697b      	ldr	r3, [r7, #20]
 8015f72:	4413      	add	r3, r2
 8015f74:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 8015f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f78:	e01c      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
        case JSONNull:
            APPEND_STRING("null");
 8015f7a:	4910      	ldr	r1, [pc, #64]	; (8015fbc <json_serialize_to_buffer_r+0x644>)
 8015f7c:	68b8      	ldr	r0, [r7, #8]
 8015f7e:	f000 fd03 	bl	8016988 <append_string>
 8015f82:	6178      	str	r0, [r7, #20]
 8015f84:	697b      	ldr	r3, [r7, #20]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	da02      	bge.n	8015f90 <json_serialize_to_buffer_r+0x618>
 8015f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f8e:	e011      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d003      	beq.n	8015f9e <json_serialize_to_buffer_r+0x626>
 8015f96:	697b      	ldr	r3, [r7, #20]
 8015f98:	68ba      	ldr	r2, [r7, #8]
 8015f9a:	4413      	add	r3, r2
 8015f9c:	60bb      	str	r3, [r7, #8]
 8015f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015fa0:	697b      	ldr	r3, [r7, #20]
 8015fa2:	4413      	add	r3, r2
 8015fa4:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 8015fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fa8:	e004      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
        case JSONError:
            return -1;
 8015faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015fae:	e001      	b.n	8015fb4 <json_serialize_to_buffer_r+0x63c>
        default:
            return -1;
 8015fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3740      	adds	r7, #64	; 0x40
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}
 8015fbc:	0801d55c 	.word	0x0801d55c

08015fc0 <json_serialize_string>:

static int json_serialize_string(const char *string, size_t len, char *buf) {
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b088      	sub	sp, #32
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	60f8      	str	r0, [r7, #12]
 8015fc8:	60b9      	str	r1, [r7, #8]
 8015fca:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8015fcc:	2300      	movs	r3, #0
 8015fce:	61fb      	str	r3, [r7, #28]
    char c = '\0';
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	75fb      	strb	r3, [r7, #23]
    int written = -1, written_total = 0;
 8015fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015fd8:	613b      	str	r3, [r7, #16]
 8015fda:	2300      	movs	r3, #0
 8015fdc:	61bb      	str	r3, [r7, #24]
    APPEND_STRING("\"");
 8015fde:	49bb      	ldr	r1, [pc, #748]	; (80162cc <json_serialize_string+0x30c>)
 8015fe0:	6878      	ldr	r0, [r7, #4]
 8015fe2:	f000 fcd1 	bl	8016988 <append_string>
 8015fe6:	6138      	str	r0, [r7, #16]
 8015fe8:	693b      	ldr	r3, [r7, #16]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	da03      	bge.n	8015ff6 <json_serialize_string+0x36>
 8015fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ff2:	f000 bc88 	b.w	8016906 <json_serialize_string+0x946>
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d003      	beq.n	8016004 <json_serialize_string+0x44>
 8015ffc:	693b      	ldr	r3, [r7, #16]
 8015ffe:	687a      	ldr	r2, [r7, #4]
 8016000:	4413      	add	r3, r2
 8016002:	607b      	str	r3, [r7, #4]
 8016004:	69ba      	ldr	r2, [r7, #24]
 8016006:	693b      	ldr	r3, [r7, #16]
 8016008:	4413      	add	r3, r2
 801600a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 801600c:	2300      	movs	r3, #0
 801600e:	61fb      	str	r3, [r7, #28]
 8016010:	f000 bc5d 	b.w	80168ce <json_serialize_string+0x90e>
        c = string[i];
 8016014:	68fa      	ldr	r2, [r7, #12]
 8016016:	69fb      	ldr	r3, [r7, #28]
 8016018:	4413      	add	r3, r2
 801601a:	781b      	ldrb	r3, [r3, #0]
 801601c:	75fb      	strb	r3, [r7, #23]
        switch (c) {
 801601e:	7dfb      	ldrb	r3, [r7, #23]
 8016020:	2b5c      	cmp	r3, #92	; 0x5c
 8016022:	f200 8444 	bhi.w	80168ae <json_serialize_string+0x8ee>
 8016026:	a201      	add	r2, pc, #4	; (adr r2, 801602c <json_serialize_string+0x6c>)
 8016028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801602c:	08016305 	.word	0x08016305
 8016030:	08016333 	.word	0x08016333
 8016034:	08016361 	.word	0x08016361
 8016038:	0801638f 	.word	0x0801638f
 801603c:	080163bd 	.word	0x080163bd
 8016040:	080163eb 	.word	0x080163eb
 8016044:	08016419 	.word	0x08016419
 8016048:	08016447 	.word	0x08016447
 801604c:	080161fd 	.word	0x080161fd
 8016050:	080162b5 	.word	0x080162b5
 8016054:	08016259 	.word	0x08016259
 8016058:	08016475 	.word	0x08016475
 801605c:	0801622b 	.word	0x0801622b
 8016060:	08016287 	.word	0x08016287
 8016064:	080164a3 	.word	0x080164a3
 8016068:	080164d1 	.word	0x080164d1
 801606c:	080164ff 	.word	0x080164ff
 8016070:	0801652d 	.word	0x0801652d
 8016074:	08016591 	.word	0x08016591
 8016078:	080165bf 	.word	0x080165bf
 801607c:	080165ed 	.word	0x080165ed
 8016080:	0801661b 	.word	0x0801661b
 8016084:	08016649 	.word	0x08016649
 8016088:	08016677 	.word	0x08016677
 801608c:	080166a5 	.word	0x080166a5
 8016090:	080166d3 	.word	0x080166d3
 8016094:	08016701 	.word	0x08016701
 8016098:	0801672f 	.word	0x0801672f
 801609c:	0801675d 	.word	0x0801675d
 80160a0:	0801678b 	.word	0x0801678b
 80160a4:	080167b9 	.word	0x080167b9
 80160a8:	0801681d 	.word	0x0801681d
 80160ac:	080168af 	.word	0x080168af
 80160b0:	080168af 	.word	0x080168af
 80160b4:	080161a1 	.word	0x080161a1
 80160b8:	080168af 	.word	0x080168af
 80160bc:	080168af 	.word	0x080168af
 80160c0:	080168af 	.word	0x080168af
 80160c4:	080168af 	.word	0x080168af
 80160c8:	080168af 	.word	0x080168af
 80160cc:	080168af 	.word	0x080168af
 80160d0:	080168af 	.word	0x080168af
 80160d4:	080168af 	.word	0x080168af
 80160d8:	080168af 	.word	0x080168af
 80160dc:	080168af 	.word	0x080168af
 80160e0:	080168af 	.word	0x080168af
 80160e4:	080168af 	.word	0x080168af
 80160e8:	0801684b 	.word	0x0801684b
 80160ec:	080168af 	.word	0x080168af
 80160f0:	080168af 	.word	0x080168af
 80160f4:	080168af 	.word	0x080168af
 80160f8:	080168af 	.word	0x080168af
 80160fc:	080168af 	.word	0x080168af
 8016100:	080168af 	.word	0x080168af
 8016104:	080168af 	.word	0x080168af
 8016108:	080168af 	.word	0x080168af
 801610c:	080168af 	.word	0x080168af
 8016110:	080168af 	.word	0x080168af
 8016114:	080168af 	.word	0x080168af
 8016118:	080168af 	.word	0x080168af
 801611c:	080168af 	.word	0x080168af
 8016120:	080168af 	.word	0x080168af
 8016124:	080168af 	.word	0x080168af
 8016128:	080168af 	.word	0x080168af
 801612c:	080168af 	.word	0x080168af
 8016130:	080168af 	.word	0x080168af
 8016134:	080168af 	.word	0x080168af
 8016138:	080168af 	.word	0x080168af
 801613c:	080168af 	.word	0x080168af
 8016140:	080168af 	.word	0x080168af
 8016144:	080168af 	.word	0x080168af
 8016148:	080168af 	.word	0x080168af
 801614c:	080168af 	.word	0x080168af
 8016150:	080168af 	.word	0x080168af
 8016154:	080168af 	.word	0x080168af
 8016158:	080168af 	.word	0x080168af
 801615c:	080168af 	.word	0x080168af
 8016160:	080168af 	.word	0x080168af
 8016164:	080168af 	.word	0x080168af
 8016168:	080168af 	.word	0x080168af
 801616c:	080168af 	.word	0x080168af
 8016170:	080168af 	.word	0x080168af
 8016174:	080168af 	.word	0x080168af
 8016178:	080168af 	.word	0x080168af
 801617c:	080168af 	.word	0x080168af
 8016180:	080168af 	.word	0x080168af
 8016184:	080168af 	.word	0x080168af
 8016188:	080168af 	.word	0x080168af
 801618c:	080168af 	.word	0x080168af
 8016190:	080168af 	.word	0x080168af
 8016194:	080168af 	.word	0x080168af
 8016198:	080168af 	.word	0x080168af
 801619c:	080161cf 	.word	0x080161cf
            case '\"': APPEND_STRING("\\\""); break;
 80161a0:	494b      	ldr	r1, [pc, #300]	; (80162d0 <json_serialize_string+0x310>)
 80161a2:	6878      	ldr	r0, [r7, #4]
 80161a4:	f000 fbf0 	bl	8016988 <append_string>
 80161a8:	6138      	str	r0, [r7, #16]
 80161aa:	693b      	ldr	r3, [r7, #16]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	da02      	bge.n	80161b6 <json_serialize_string+0x1f6>
 80161b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80161b4:	e3a7      	b.n	8016906 <json_serialize_string+0x946>
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d003      	beq.n	80161c4 <json_serialize_string+0x204>
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	687a      	ldr	r2, [r7, #4]
 80161c0:	4413      	add	r3, r2
 80161c2:	607b      	str	r3, [r7, #4]
 80161c4:	69ba      	ldr	r2, [r7, #24]
 80161c6:	693b      	ldr	r3, [r7, #16]
 80161c8:	4413      	add	r3, r2
 80161ca:	61bb      	str	r3, [r7, #24]
 80161cc:	e37c      	b.n	80168c8 <json_serialize_string+0x908>
            case '\\': APPEND_STRING("\\\\"); break;
 80161ce:	4941      	ldr	r1, [pc, #260]	; (80162d4 <json_serialize_string+0x314>)
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f000 fbd9 	bl	8016988 <append_string>
 80161d6:	6138      	str	r0, [r7, #16]
 80161d8:	693b      	ldr	r3, [r7, #16]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	da02      	bge.n	80161e4 <json_serialize_string+0x224>
 80161de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80161e2:	e390      	b.n	8016906 <json_serialize_string+0x946>
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d003      	beq.n	80161f2 <json_serialize_string+0x232>
 80161ea:	693b      	ldr	r3, [r7, #16]
 80161ec:	687a      	ldr	r2, [r7, #4]
 80161ee:	4413      	add	r3, r2
 80161f0:	607b      	str	r3, [r7, #4]
 80161f2:	69ba      	ldr	r2, [r7, #24]
 80161f4:	693b      	ldr	r3, [r7, #16]
 80161f6:	4413      	add	r3, r2
 80161f8:	61bb      	str	r3, [r7, #24]
 80161fa:	e365      	b.n	80168c8 <json_serialize_string+0x908>
            case '\b': APPEND_STRING("\\b"); break;
 80161fc:	4936      	ldr	r1, [pc, #216]	; (80162d8 <json_serialize_string+0x318>)
 80161fe:	6878      	ldr	r0, [r7, #4]
 8016200:	f000 fbc2 	bl	8016988 <append_string>
 8016204:	6138      	str	r0, [r7, #16]
 8016206:	693b      	ldr	r3, [r7, #16]
 8016208:	2b00      	cmp	r3, #0
 801620a:	da02      	bge.n	8016212 <json_serialize_string+0x252>
 801620c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016210:	e379      	b.n	8016906 <json_serialize_string+0x946>
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d003      	beq.n	8016220 <json_serialize_string+0x260>
 8016218:	693b      	ldr	r3, [r7, #16]
 801621a:	687a      	ldr	r2, [r7, #4]
 801621c:	4413      	add	r3, r2
 801621e:	607b      	str	r3, [r7, #4]
 8016220:	69ba      	ldr	r2, [r7, #24]
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	4413      	add	r3, r2
 8016226:	61bb      	str	r3, [r7, #24]
 8016228:	e34e      	b.n	80168c8 <json_serialize_string+0x908>
            case '\f': APPEND_STRING("\\f"); break;
 801622a:	492c      	ldr	r1, [pc, #176]	; (80162dc <json_serialize_string+0x31c>)
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f000 fbab 	bl	8016988 <append_string>
 8016232:	6138      	str	r0, [r7, #16]
 8016234:	693b      	ldr	r3, [r7, #16]
 8016236:	2b00      	cmp	r3, #0
 8016238:	da02      	bge.n	8016240 <json_serialize_string+0x280>
 801623a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801623e:	e362      	b.n	8016906 <json_serialize_string+0x946>
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d003      	beq.n	801624e <json_serialize_string+0x28e>
 8016246:	693b      	ldr	r3, [r7, #16]
 8016248:	687a      	ldr	r2, [r7, #4]
 801624a:	4413      	add	r3, r2
 801624c:	607b      	str	r3, [r7, #4]
 801624e:	69ba      	ldr	r2, [r7, #24]
 8016250:	693b      	ldr	r3, [r7, #16]
 8016252:	4413      	add	r3, r2
 8016254:	61bb      	str	r3, [r7, #24]
 8016256:	e337      	b.n	80168c8 <json_serialize_string+0x908>
            case '\n': APPEND_STRING("\\n"); break;
 8016258:	4921      	ldr	r1, [pc, #132]	; (80162e0 <json_serialize_string+0x320>)
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f000 fb94 	bl	8016988 <append_string>
 8016260:	6138      	str	r0, [r7, #16]
 8016262:	693b      	ldr	r3, [r7, #16]
 8016264:	2b00      	cmp	r3, #0
 8016266:	da02      	bge.n	801626e <json_serialize_string+0x2ae>
 8016268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801626c:	e34b      	b.n	8016906 <json_serialize_string+0x946>
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d003      	beq.n	801627c <json_serialize_string+0x2bc>
 8016274:	693b      	ldr	r3, [r7, #16]
 8016276:	687a      	ldr	r2, [r7, #4]
 8016278:	4413      	add	r3, r2
 801627a:	607b      	str	r3, [r7, #4]
 801627c:	69ba      	ldr	r2, [r7, #24]
 801627e:	693b      	ldr	r3, [r7, #16]
 8016280:	4413      	add	r3, r2
 8016282:	61bb      	str	r3, [r7, #24]
 8016284:	e320      	b.n	80168c8 <json_serialize_string+0x908>
            case '\r': APPEND_STRING("\\r"); break;
 8016286:	4917      	ldr	r1, [pc, #92]	; (80162e4 <json_serialize_string+0x324>)
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f000 fb7d 	bl	8016988 <append_string>
 801628e:	6138      	str	r0, [r7, #16]
 8016290:	693b      	ldr	r3, [r7, #16]
 8016292:	2b00      	cmp	r3, #0
 8016294:	da02      	bge.n	801629c <json_serialize_string+0x2dc>
 8016296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801629a:	e334      	b.n	8016906 <json_serialize_string+0x946>
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d003      	beq.n	80162aa <json_serialize_string+0x2ea>
 80162a2:	693b      	ldr	r3, [r7, #16]
 80162a4:	687a      	ldr	r2, [r7, #4]
 80162a6:	4413      	add	r3, r2
 80162a8:	607b      	str	r3, [r7, #4]
 80162aa:	69ba      	ldr	r2, [r7, #24]
 80162ac:	693b      	ldr	r3, [r7, #16]
 80162ae:	4413      	add	r3, r2
 80162b0:	61bb      	str	r3, [r7, #24]
 80162b2:	e309      	b.n	80168c8 <json_serialize_string+0x908>
            case '\t': APPEND_STRING("\\t"); break;
 80162b4:	490c      	ldr	r1, [pc, #48]	; (80162e8 <json_serialize_string+0x328>)
 80162b6:	6878      	ldr	r0, [r7, #4]
 80162b8:	f000 fb66 	bl	8016988 <append_string>
 80162bc:	6138      	str	r0, [r7, #16]
 80162be:	693b      	ldr	r3, [r7, #16]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	da13      	bge.n	80162ec <json_serialize_string+0x32c>
 80162c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162c8:	e31d      	b.n	8016906 <json_serialize_string+0x946>
 80162ca:	bf00      	nop
 80162cc:	0801d588 	.word	0x0801d588
 80162d0:	0801d58c 	.word	0x0801d58c
 80162d4:	0801d590 	.word	0x0801d590
 80162d8:	0801d594 	.word	0x0801d594
 80162dc:	0801d598 	.word	0x0801d598
 80162e0:	0801d59c 	.word	0x0801d59c
 80162e4:	0801d5a0 	.word	0x0801d5a0
 80162e8:	0801d5a4 	.word	0x0801d5a4
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d003      	beq.n	80162fa <json_serialize_string+0x33a>
 80162f2:	693b      	ldr	r3, [r7, #16]
 80162f4:	687a      	ldr	r2, [r7, #4]
 80162f6:	4413      	add	r3, r2
 80162f8:	607b      	str	r3, [r7, #4]
 80162fa:	69ba      	ldr	r2, [r7, #24]
 80162fc:	693b      	ldr	r3, [r7, #16]
 80162fe:	4413      	add	r3, r2
 8016300:	61bb      	str	r3, [r7, #24]
 8016302:	e2e1      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x00': APPEND_STRING("\\u0000"); break;
 8016304:	4995      	ldr	r1, [pc, #596]	; (801655c <json_serialize_string+0x59c>)
 8016306:	6878      	ldr	r0, [r7, #4]
 8016308:	f000 fb3e 	bl	8016988 <append_string>
 801630c:	6138      	str	r0, [r7, #16]
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	2b00      	cmp	r3, #0
 8016312:	da02      	bge.n	801631a <json_serialize_string+0x35a>
 8016314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016318:	e2f5      	b.n	8016906 <json_serialize_string+0x946>
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d003      	beq.n	8016328 <json_serialize_string+0x368>
 8016320:	693b      	ldr	r3, [r7, #16]
 8016322:	687a      	ldr	r2, [r7, #4]
 8016324:	4413      	add	r3, r2
 8016326:	607b      	str	r3, [r7, #4]
 8016328:	69ba      	ldr	r2, [r7, #24]
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	4413      	add	r3, r2
 801632e:	61bb      	str	r3, [r7, #24]
 8016330:	e2ca      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x01': APPEND_STRING("\\u0001"); break;
 8016332:	498b      	ldr	r1, [pc, #556]	; (8016560 <json_serialize_string+0x5a0>)
 8016334:	6878      	ldr	r0, [r7, #4]
 8016336:	f000 fb27 	bl	8016988 <append_string>
 801633a:	6138      	str	r0, [r7, #16]
 801633c:	693b      	ldr	r3, [r7, #16]
 801633e:	2b00      	cmp	r3, #0
 8016340:	da02      	bge.n	8016348 <json_serialize_string+0x388>
 8016342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016346:	e2de      	b.n	8016906 <json_serialize_string+0x946>
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d003      	beq.n	8016356 <json_serialize_string+0x396>
 801634e:	693b      	ldr	r3, [r7, #16]
 8016350:	687a      	ldr	r2, [r7, #4]
 8016352:	4413      	add	r3, r2
 8016354:	607b      	str	r3, [r7, #4]
 8016356:	69ba      	ldr	r2, [r7, #24]
 8016358:	693b      	ldr	r3, [r7, #16]
 801635a:	4413      	add	r3, r2
 801635c:	61bb      	str	r3, [r7, #24]
 801635e:	e2b3      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x02': APPEND_STRING("\\u0002"); break;
 8016360:	4980      	ldr	r1, [pc, #512]	; (8016564 <json_serialize_string+0x5a4>)
 8016362:	6878      	ldr	r0, [r7, #4]
 8016364:	f000 fb10 	bl	8016988 <append_string>
 8016368:	6138      	str	r0, [r7, #16]
 801636a:	693b      	ldr	r3, [r7, #16]
 801636c:	2b00      	cmp	r3, #0
 801636e:	da02      	bge.n	8016376 <json_serialize_string+0x3b6>
 8016370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016374:	e2c7      	b.n	8016906 <json_serialize_string+0x946>
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d003      	beq.n	8016384 <json_serialize_string+0x3c4>
 801637c:	693b      	ldr	r3, [r7, #16]
 801637e:	687a      	ldr	r2, [r7, #4]
 8016380:	4413      	add	r3, r2
 8016382:	607b      	str	r3, [r7, #4]
 8016384:	69ba      	ldr	r2, [r7, #24]
 8016386:	693b      	ldr	r3, [r7, #16]
 8016388:	4413      	add	r3, r2
 801638a:	61bb      	str	r3, [r7, #24]
 801638c:	e29c      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x03': APPEND_STRING("\\u0003"); break;
 801638e:	4976      	ldr	r1, [pc, #472]	; (8016568 <json_serialize_string+0x5a8>)
 8016390:	6878      	ldr	r0, [r7, #4]
 8016392:	f000 faf9 	bl	8016988 <append_string>
 8016396:	6138      	str	r0, [r7, #16]
 8016398:	693b      	ldr	r3, [r7, #16]
 801639a:	2b00      	cmp	r3, #0
 801639c:	da02      	bge.n	80163a4 <json_serialize_string+0x3e4>
 801639e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163a2:	e2b0      	b.n	8016906 <json_serialize_string+0x946>
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d003      	beq.n	80163b2 <json_serialize_string+0x3f2>
 80163aa:	693b      	ldr	r3, [r7, #16]
 80163ac:	687a      	ldr	r2, [r7, #4]
 80163ae:	4413      	add	r3, r2
 80163b0:	607b      	str	r3, [r7, #4]
 80163b2:	69ba      	ldr	r2, [r7, #24]
 80163b4:	693b      	ldr	r3, [r7, #16]
 80163b6:	4413      	add	r3, r2
 80163b8:	61bb      	str	r3, [r7, #24]
 80163ba:	e285      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x04': APPEND_STRING("\\u0004"); break;
 80163bc:	496b      	ldr	r1, [pc, #428]	; (801656c <json_serialize_string+0x5ac>)
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	f000 fae2 	bl	8016988 <append_string>
 80163c4:	6138      	str	r0, [r7, #16]
 80163c6:	693b      	ldr	r3, [r7, #16]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	da02      	bge.n	80163d2 <json_serialize_string+0x412>
 80163cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163d0:	e299      	b.n	8016906 <json_serialize_string+0x946>
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d003      	beq.n	80163e0 <json_serialize_string+0x420>
 80163d8:	693b      	ldr	r3, [r7, #16]
 80163da:	687a      	ldr	r2, [r7, #4]
 80163dc:	4413      	add	r3, r2
 80163de:	607b      	str	r3, [r7, #4]
 80163e0:	69ba      	ldr	r2, [r7, #24]
 80163e2:	693b      	ldr	r3, [r7, #16]
 80163e4:	4413      	add	r3, r2
 80163e6:	61bb      	str	r3, [r7, #24]
 80163e8:	e26e      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x05': APPEND_STRING("\\u0005"); break;
 80163ea:	4961      	ldr	r1, [pc, #388]	; (8016570 <json_serialize_string+0x5b0>)
 80163ec:	6878      	ldr	r0, [r7, #4]
 80163ee:	f000 facb 	bl	8016988 <append_string>
 80163f2:	6138      	str	r0, [r7, #16]
 80163f4:	693b      	ldr	r3, [r7, #16]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	da02      	bge.n	8016400 <json_serialize_string+0x440>
 80163fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163fe:	e282      	b.n	8016906 <json_serialize_string+0x946>
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d003      	beq.n	801640e <json_serialize_string+0x44e>
 8016406:	693b      	ldr	r3, [r7, #16]
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	4413      	add	r3, r2
 801640c:	607b      	str	r3, [r7, #4]
 801640e:	69ba      	ldr	r2, [r7, #24]
 8016410:	693b      	ldr	r3, [r7, #16]
 8016412:	4413      	add	r3, r2
 8016414:	61bb      	str	r3, [r7, #24]
 8016416:	e257      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x06': APPEND_STRING("\\u0006"); break;
 8016418:	4956      	ldr	r1, [pc, #344]	; (8016574 <json_serialize_string+0x5b4>)
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f000 fab4 	bl	8016988 <append_string>
 8016420:	6138      	str	r0, [r7, #16]
 8016422:	693b      	ldr	r3, [r7, #16]
 8016424:	2b00      	cmp	r3, #0
 8016426:	da02      	bge.n	801642e <json_serialize_string+0x46e>
 8016428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801642c:	e26b      	b.n	8016906 <json_serialize_string+0x946>
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d003      	beq.n	801643c <json_serialize_string+0x47c>
 8016434:	693b      	ldr	r3, [r7, #16]
 8016436:	687a      	ldr	r2, [r7, #4]
 8016438:	4413      	add	r3, r2
 801643a:	607b      	str	r3, [r7, #4]
 801643c:	69ba      	ldr	r2, [r7, #24]
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	4413      	add	r3, r2
 8016442:	61bb      	str	r3, [r7, #24]
 8016444:	e240      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x07': APPEND_STRING("\\u0007"); break;
 8016446:	494c      	ldr	r1, [pc, #304]	; (8016578 <json_serialize_string+0x5b8>)
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f000 fa9d 	bl	8016988 <append_string>
 801644e:	6138      	str	r0, [r7, #16]
 8016450:	693b      	ldr	r3, [r7, #16]
 8016452:	2b00      	cmp	r3, #0
 8016454:	da02      	bge.n	801645c <json_serialize_string+0x49c>
 8016456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801645a:	e254      	b.n	8016906 <json_serialize_string+0x946>
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d003      	beq.n	801646a <json_serialize_string+0x4aa>
 8016462:	693b      	ldr	r3, [r7, #16]
 8016464:	687a      	ldr	r2, [r7, #4]
 8016466:	4413      	add	r3, r2
 8016468:	607b      	str	r3, [r7, #4]
 801646a:	69ba      	ldr	r2, [r7, #24]
 801646c:	693b      	ldr	r3, [r7, #16]
 801646e:	4413      	add	r3, r2
 8016470:	61bb      	str	r3, [r7, #24]
 8016472:	e229      	b.n	80168c8 <json_serialize_string+0x908>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 8016474:	4941      	ldr	r1, [pc, #260]	; (801657c <json_serialize_string+0x5bc>)
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f000 fa86 	bl	8016988 <append_string>
 801647c:	6138      	str	r0, [r7, #16]
 801647e:	693b      	ldr	r3, [r7, #16]
 8016480:	2b00      	cmp	r3, #0
 8016482:	da02      	bge.n	801648a <json_serialize_string+0x4ca>
 8016484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016488:	e23d      	b.n	8016906 <json_serialize_string+0x946>
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d003      	beq.n	8016498 <json_serialize_string+0x4d8>
 8016490:	693b      	ldr	r3, [r7, #16]
 8016492:	687a      	ldr	r2, [r7, #4]
 8016494:	4413      	add	r3, r2
 8016496:	607b      	str	r3, [r7, #4]
 8016498:	69ba      	ldr	r2, [r7, #24]
 801649a:	693b      	ldr	r3, [r7, #16]
 801649c:	4413      	add	r3, r2
 801649e:	61bb      	str	r3, [r7, #24]
 80164a0:	e212      	b.n	80168c8 <json_serialize_string+0x908>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 80164a2:	4937      	ldr	r1, [pc, #220]	; (8016580 <json_serialize_string+0x5c0>)
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f000 fa6f 	bl	8016988 <append_string>
 80164aa:	6138      	str	r0, [r7, #16]
 80164ac:	693b      	ldr	r3, [r7, #16]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	da02      	bge.n	80164b8 <json_serialize_string+0x4f8>
 80164b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80164b6:	e226      	b.n	8016906 <json_serialize_string+0x946>
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d003      	beq.n	80164c6 <json_serialize_string+0x506>
 80164be:	693b      	ldr	r3, [r7, #16]
 80164c0:	687a      	ldr	r2, [r7, #4]
 80164c2:	4413      	add	r3, r2
 80164c4:	607b      	str	r3, [r7, #4]
 80164c6:	69ba      	ldr	r2, [r7, #24]
 80164c8:	693b      	ldr	r3, [r7, #16]
 80164ca:	4413      	add	r3, r2
 80164cc:	61bb      	str	r3, [r7, #24]
 80164ce:	e1fb      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 80164d0:	492c      	ldr	r1, [pc, #176]	; (8016584 <json_serialize_string+0x5c4>)
 80164d2:	6878      	ldr	r0, [r7, #4]
 80164d4:	f000 fa58 	bl	8016988 <append_string>
 80164d8:	6138      	str	r0, [r7, #16]
 80164da:	693b      	ldr	r3, [r7, #16]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	da02      	bge.n	80164e6 <json_serialize_string+0x526>
 80164e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80164e4:	e20f      	b.n	8016906 <json_serialize_string+0x946>
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d003      	beq.n	80164f4 <json_serialize_string+0x534>
 80164ec:	693b      	ldr	r3, [r7, #16]
 80164ee:	687a      	ldr	r2, [r7, #4]
 80164f0:	4413      	add	r3, r2
 80164f2:	607b      	str	r3, [r7, #4]
 80164f4:	69ba      	ldr	r2, [r7, #24]
 80164f6:	693b      	ldr	r3, [r7, #16]
 80164f8:	4413      	add	r3, r2
 80164fa:	61bb      	str	r3, [r7, #24]
 80164fc:	e1e4      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x10': APPEND_STRING("\\u0010"); break;
 80164fe:	4922      	ldr	r1, [pc, #136]	; (8016588 <json_serialize_string+0x5c8>)
 8016500:	6878      	ldr	r0, [r7, #4]
 8016502:	f000 fa41 	bl	8016988 <append_string>
 8016506:	6138      	str	r0, [r7, #16]
 8016508:	693b      	ldr	r3, [r7, #16]
 801650a:	2b00      	cmp	r3, #0
 801650c:	da02      	bge.n	8016514 <json_serialize_string+0x554>
 801650e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016512:	e1f8      	b.n	8016906 <json_serialize_string+0x946>
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d003      	beq.n	8016522 <json_serialize_string+0x562>
 801651a:	693b      	ldr	r3, [r7, #16]
 801651c:	687a      	ldr	r2, [r7, #4]
 801651e:	4413      	add	r3, r2
 8016520:	607b      	str	r3, [r7, #4]
 8016522:	69ba      	ldr	r2, [r7, #24]
 8016524:	693b      	ldr	r3, [r7, #16]
 8016526:	4413      	add	r3, r2
 8016528:	61bb      	str	r3, [r7, #24]
 801652a:	e1cd      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x11': APPEND_STRING("\\u0011"); break;
 801652c:	4917      	ldr	r1, [pc, #92]	; (801658c <json_serialize_string+0x5cc>)
 801652e:	6878      	ldr	r0, [r7, #4]
 8016530:	f000 fa2a 	bl	8016988 <append_string>
 8016534:	6138      	str	r0, [r7, #16]
 8016536:	693b      	ldr	r3, [r7, #16]
 8016538:	2b00      	cmp	r3, #0
 801653a:	da02      	bge.n	8016542 <json_serialize_string+0x582>
 801653c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016540:	e1e1      	b.n	8016906 <json_serialize_string+0x946>
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d003      	beq.n	8016550 <json_serialize_string+0x590>
 8016548:	693b      	ldr	r3, [r7, #16]
 801654a:	687a      	ldr	r2, [r7, #4]
 801654c:	4413      	add	r3, r2
 801654e:	607b      	str	r3, [r7, #4]
 8016550:	69ba      	ldr	r2, [r7, #24]
 8016552:	693b      	ldr	r3, [r7, #16]
 8016554:	4413      	add	r3, r2
 8016556:	61bb      	str	r3, [r7, #24]
 8016558:	e1b6      	b.n	80168c8 <json_serialize_string+0x908>
 801655a:	bf00      	nop
 801655c:	0801d5a8 	.word	0x0801d5a8
 8016560:	0801d5b0 	.word	0x0801d5b0
 8016564:	0801d5b8 	.word	0x0801d5b8
 8016568:	0801d5c0 	.word	0x0801d5c0
 801656c:	0801d5c8 	.word	0x0801d5c8
 8016570:	0801d5d0 	.word	0x0801d5d0
 8016574:	0801d5d8 	.word	0x0801d5d8
 8016578:	0801d5e0 	.word	0x0801d5e0
 801657c:	0801d5e8 	.word	0x0801d5e8
 8016580:	0801d5f0 	.word	0x0801d5f0
 8016584:	0801d5f8 	.word	0x0801d5f8
 8016588:	0801d600 	.word	0x0801d600
 801658c:	0801d608 	.word	0x0801d608
            case '\x12': APPEND_STRING("\\u0012"); break;
 8016590:	4995      	ldr	r1, [pc, #596]	; (80167e8 <json_serialize_string+0x828>)
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	f000 f9f8 	bl	8016988 <append_string>
 8016598:	6138      	str	r0, [r7, #16]
 801659a:	693b      	ldr	r3, [r7, #16]
 801659c:	2b00      	cmp	r3, #0
 801659e:	da02      	bge.n	80165a6 <json_serialize_string+0x5e6>
 80165a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165a4:	e1af      	b.n	8016906 <json_serialize_string+0x946>
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d003      	beq.n	80165b4 <json_serialize_string+0x5f4>
 80165ac:	693b      	ldr	r3, [r7, #16]
 80165ae:	687a      	ldr	r2, [r7, #4]
 80165b0:	4413      	add	r3, r2
 80165b2:	607b      	str	r3, [r7, #4]
 80165b4:	69ba      	ldr	r2, [r7, #24]
 80165b6:	693b      	ldr	r3, [r7, #16]
 80165b8:	4413      	add	r3, r2
 80165ba:	61bb      	str	r3, [r7, #24]
 80165bc:	e184      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x13': APPEND_STRING("\\u0013"); break;
 80165be:	498b      	ldr	r1, [pc, #556]	; (80167ec <json_serialize_string+0x82c>)
 80165c0:	6878      	ldr	r0, [r7, #4]
 80165c2:	f000 f9e1 	bl	8016988 <append_string>
 80165c6:	6138      	str	r0, [r7, #16]
 80165c8:	693b      	ldr	r3, [r7, #16]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	da02      	bge.n	80165d4 <json_serialize_string+0x614>
 80165ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165d2:	e198      	b.n	8016906 <json_serialize_string+0x946>
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d003      	beq.n	80165e2 <json_serialize_string+0x622>
 80165da:	693b      	ldr	r3, [r7, #16]
 80165dc:	687a      	ldr	r2, [r7, #4]
 80165de:	4413      	add	r3, r2
 80165e0:	607b      	str	r3, [r7, #4]
 80165e2:	69ba      	ldr	r2, [r7, #24]
 80165e4:	693b      	ldr	r3, [r7, #16]
 80165e6:	4413      	add	r3, r2
 80165e8:	61bb      	str	r3, [r7, #24]
 80165ea:	e16d      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x14': APPEND_STRING("\\u0014"); break;
 80165ec:	4980      	ldr	r1, [pc, #512]	; (80167f0 <json_serialize_string+0x830>)
 80165ee:	6878      	ldr	r0, [r7, #4]
 80165f0:	f000 f9ca 	bl	8016988 <append_string>
 80165f4:	6138      	str	r0, [r7, #16]
 80165f6:	693b      	ldr	r3, [r7, #16]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	da02      	bge.n	8016602 <json_serialize_string+0x642>
 80165fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016600:	e181      	b.n	8016906 <json_serialize_string+0x946>
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d003      	beq.n	8016610 <json_serialize_string+0x650>
 8016608:	693b      	ldr	r3, [r7, #16]
 801660a:	687a      	ldr	r2, [r7, #4]
 801660c:	4413      	add	r3, r2
 801660e:	607b      	str	r3, [r7, #4]
 8016610:	69ba      	ldr	r2, [r7, #24]
 8016612:	693b      	ldr	r3, [r7, #16]
 8016614:	4413      	add	r3, r2
 8016616:	61bb      	str	r3, [r7, #24]
 8016618:	e156      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x15': APPEND_STRING("\\u0015"); break;
 801661a:	4976      	ldr	r1, [pc, #472]	; (80167f4 <json_serialize_string+0x834>)
 801661c:	6878      	ldr	r0, [r7, #4]
 801661e:	f000 f9b3 	bl	8016988 <append_string>
 8016622:	6138      	str	r0, [r7, #16]
 8016624:	693b      	ldr	r3, [r7, #16]
 8016626:	2b00      	cmp	r3, #0
 8016628:	da02      	bge.n	8016630 <json_serialize_string+0x670>
 801662a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801662e:	e16a      	b.n	8016906 <json_serialize_string+0x946>
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d003      	beq.n	801663e <json_serialize_string+0x67e>
 8016636:	693b      	ldr	r3, [r7, #16]
 8016638:	687a      	ldr	r2, [r7, #4]
 801663a:	4413      	add	r3, r2
 801663c:	607b      	str	r3, [r7, #4]
 801663e:	69ba      	ldr	r2, [r7, #24]
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	4413      	add	r3, r2
 8016644:	61bb      	str	r3, [r7, #24]
 8016646:	e13f      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x16': APPEND_STRING("\\u0016"); break;
 8016648:	496b      	ldr	r1, [pc, #428]	; (80167f8 <json_serialize_string+0x838>)
 801664a:	6878      	ldr	r0, [r7, #4]
 801664c:	f000 f99c 	bl	8016988 <append_string>
 8016650:	6138      	str	r0, [r7, #16]
 8016652:	693b      	ldr	r3, [r7, #16]
 8016654:	2b00      	cmp	r3, #0
 8016656:	da02      	bge.n	801665e <json_serialize_string+0x69e>
 8016658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801665c:	e153      	b.n	8016906 <json_serialize_string+0x946>
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d003      	beq.n	801666c <json_serialize_string+0x6ac>
 8016664:	693b      	ldr	r3, [r7, #16]
 8016666:	687a      	ldr	r2, [r7, #4]
 8016668:	4413      	add	r3, r2
 801666a:	607b      	str	r3, [r7, #4]
 801666c:	69ba      	ldr	r2, [r7, #24]
 801666e:	693b      	ldr	r3, [r7, #16]
 8016670:	4413      	add	r3, r2
 8016672:	61bb      	str	r3, [r7, #24]
 8016674:	e128      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x17': APPEND_STRING("\\u0017"); break;
 8016676:	4961      	ldr	r1, [pc, #388]	; (80167fc <json_serialize_string+0x83c>)
 8016678:	6878      	ldr	r0, [r7, #4]
 801667a:	f000 f985 	bl	8016988 <append_string>
 801667e:	6138      	str	r0, [r7, #16]
 8016680:	693b      	ldr	r3, [r7, #16]
 8016682:	2b00      	cmp	r3, #0
 8016684:	da02      	bge.n	801668c <json_serialize_string+0x6cc>
 8016686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801668a:	e13c      	b.n	8016906 <json_serialize_string+0x946>
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d003      	beq.n	801669a <json_serialize_string+0x6da>
 8016692:	693b      	ldr	r3, [r7, #16]
 8016694:	687a      	ldr	r2, [r7, #4]
 8016696:	4413      	add	r3, r2
 8016698:	607b      	str	r3, [r7, #4]
 801669a:	69ba      	ldr	r2, [r7, #24]
 801669c:	693b      	ldr	r3, [r7, #16]
 801669e:	4413      	add	r3, r2
 80166a0:	61bb      	str	r3, [r7, #24]
 80166a2:	e111      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x18': APPEND_STRING("\\u0018"); break;
 80166a4:	4956      	ldr	r1, [pc, #344]	; (8016800 <json_serialize_string+0x840>)
 80166a6:	6878      	ldr	r0, [r7, #4]
 80166a8:	f000 f96e 	bl	8016988 <append_string>
 80166ac:	6138      	str	r0, [r7, #16]
 80166ae:	693b      	ldr	r3, [r7, #16]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	da02      	bge.n	80166ba <json_serialize_string+0x6fa>
 80166b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166b8:	e125      	b.n	8016906 <json_serialize_string+0x946>
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d003      	beq.n	80166c8 <json_serialize_string+0x708>
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	687a      	ldr	r2, [r7, #4]
 80166c4:	4413      	add	r3, r2
 80166c6:	607b      	str	r3, [r7, #4]
 80166c8:	69ba      	ldr	r2, [r7, #24]
 80166ca:	693b      	ldr	r3, [r7, #16]
 80166cc:	4413      	add	r3, r2
 80166ce:	61bb      	str	r3, [r7, #24]
 80166d0:	e0fa      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x19': APPEND_STRING("\\u0019"); break;
 80166d2:	494c      	ldr	r1, [pc, #304]	; (8016804 <json_serialize_string+0x844>)
 80166d4:	6878      	ldr	r0, [r7, #4]
 80166d6:	f000 f957 	bl	8016988 <append_string>
 80166da:	6138      	str	r0, [r7, #16]
 80166dc:	693b      	ldr	r3, [r7, #16]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	da02      	bge.n	80166e8 <json_serialize_string+0x728>
 80166e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166e6:	e10e      	b.n	8016906 <json_serialize_string+0x946>
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d003      	beq.n	80166f6 <json_serialize_string+0x736>
 80166ee:	693b      	ldr	r3, [r7, #16]
 80166f0:	687a      	ldr	r2, [r7, #4]
 80166f2:	4413      	add	r3, r2
 80166f4:	607b      	str	r3, [r7, #4]
 80166f6:	69ba      	ldr	r2, [r7, #24]
 80166f8:	693b      	ldr	r3, [r7, #16]
 80166fa:	4413      	add	r3, r2
 80166fc:	61bb      	str	r3, [r7, #24]
 80166fe:	e0e3      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 8016700:	4941      	ldr	r1, [pc, #260]	; (8016808 <json_serialize_string+0x848>)
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f000 f940 	bl	8016988 <append_string>
 8016708:	6138      	str	r0, [r7, #16]
 801670a:	693b      	ldr	r3, [r7, #16]
 801670c:	2b00      	cmp	r3, #0
 801670e:	da02      	bge.n	8016716 <json_serialize_string+0x756>
 8016710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016714:	e0f7      	b.n	8016906 <json_serialize_string+0x946>
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d003      	beq.n	8016724 <json_serialize_string+0x764>
 801671c:	693b      	ldr	r3, [r7, #16]
 801671e:	687a      	ldr	r2, [r7, #4]
 8016720:	4413      	add	r3, r2
 8016722:	607b      	str	r3, [r7, #4]
 8016724:	69ba      	ldr	r2, [r7, #24]
 8016726:	693b      	ldr	r3, [r7, #16]
 8016728:	4413      	add	r3, r2
 801672a:	61bb      	str	r3, [r7, #24]
 801672c:	e0cc      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 801672e:	4937      	ldr	r1, [pc, #220]	; (801680c <json_serialize_string+0x84c>)
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	f000 f929 	bl	8016988 <append_string>
 8016736:	6138      	str	r0, [r7, #16]
 8016738:	693b      	ldr	r3, [r7, #16]
 801673a:	2b00      	cmp	r3, #0
 801673c:	da02      	bge.n	8016744 <json_serialize_string+0x784>
 801673e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016742:	e0e0      	b.n	8016906 <json_serialize_string+0x946>
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d003      	beq.n	8016752 <json_serialize_string+0x792>
 801674a:	693b      	ldr	r3, [r7, #16]
 801674c:	687a      	ldr	r2, [r7, #4]
 801674e:	4413      	add	r3, r2
 8016750:	607b      	str	r3, [r7, #4]
 8016752:	69ba      	ldr	r2, [r7, #24]
 8016754:	693b      	ldr	r3, [r7, #16]
 8016756:	4413      	add	r3, r2
 8016758:	61bb      	str	r3, [r7, #24]
 801675a:	e0b5      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x1c': APPEND_STRING("\\u001c"); break;
 801675c:	492c      	ldr	r1, [pc, #176]	; (8016810 <json_serialize_string+0x850>)
 801675e:	6878      	ldr	r0, [r7, #4]
 8016760:	f000 f912 	bl	8016988 <append_string>
 8016764:	6138      	str	r0, [r7, #16]
 8016766:	693b      	ldr	r3, [r7, #16]
 8016768:	2b00      	cmp	r3, #0
 801676a:	da02      	bge.n	8016772 <json_serialize_string+0x7b2>
 801676c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016770:	e0c9      	b.n	8016906 <json_serialize_string+0x946>
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d003      	beq.n	8016780 <json_serialize_string+0x7c0>
 8016778:	693b      	ldr	r3, [r7, #16]
 801677a:	687a      	ldr	r2, [r7, #4]
 801677c:	4413      	add	r3, r2
 801677e:	607b      	str	r3, [r7, #4]
 8016780:	69ba      	ldr	r2, [r7, #24]
 8016782:	693b      	ldr	r3, [r7, #16]
 8016784:	4413      	add	r3, r2
 8016786:	61bb      	str	r3, [r7, #24]
 8016788:	e09e      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 801678a:	4922      	ldr	r1, [pc, #136]	; (8016814 <json_serialize_string+0x854>)
 801678c:	6878      	ldr	r0, [r7, #4]
 801678e:	f000 f8fb 	bl	8016988 <append_string>
 8016792:	6138      	str	r0, [r7, #16]
 8016794:	693b      	ldr	r3, [r7, #16]
 8016796:	2b00      	cmp	r3, #0
 8016798:	da02      	bge.n	80167a0 <json_serialize_string+0x7e0>
 801679a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801679e:	e0b2      	b.n	8016906 <json_serialize_string+0x946>
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d003      	beq.n	80167ae <json_serialize_string+0x7ee>
 80167a6:	693b      	ldr	r3, [r7, #16]
 80167a8:	687a      	ldr	r2, [r7, #4]
 80167aa:	4413      	add	r3, r2
 80167ac:	607b      	str	r3, [r7, #4]
 80167ae:	69ba      	ldr	r2, [r7, #24]
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	4413      	add	r3, r2
 80167b4:	61bb      	str	r3, [r7, #24]
 80167b6:	e087      	b.n	80168c8 <json_serialize_string+0x908>
            case '\x1e': APPEND_STRING("\\u001e"); break;
 80167b8:	4917      	ldr	r1, [pc, #92]	; (8016818 <json_serialize_string+0x858>)
 80167ba:	6878      	ldr	r0, [r7, #4]
 80167bc:	f000 f8e4 	bl	8016988 <append_string>
 80167c0:	6138      	str	r0, [r7, #16]
 80167c2:	693b      	ldr	r3, [r7, #16]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	da02      	bge.n	80167ce <json_serialize_string+0x80e>
 80167c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80167cc:	e09b      	b.n	8016906 <json_serialize_string+0x946>
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d003      	beq.n	80167dc <json_serialize_string+0x81c>
 80167d4:	693b      	ldr	r3, [r7, #16]
 80167d6:	687a      	ldr	r2, [r7, #4]
 80167d8:	4413      	add	r3, r2
 80167da:	607b      	str	r3, [r7, #4]
 80167dc:	69ba      	ldr	r2, [r7, #24]
 80167de:	693b      	ldr	r3, [r7, #16]
 80167e0:	4413      	add	r3, r2
 80167e2:	61bb      	str	r3, [r7, #24]
 80167e4:	e070      	b.n	80168c8 <json_serialize_string+0x908>
 80167e6:	bf00      	nop
 80167e8:	0801d610 	.word	0x0801d610
 80167ec:	0801d618 	.word	0x0801d618
 80167f0:	0801d620 	.word	0x0801d620
 80167f4:	0801d628 	.word	0x0801d628
 80167f8:	0801d630 	.word	0x0801d630
 80167fc:	0801d638 	.word	0x0801d638
 8016800:	0801d640 	.word	0x0801d640
 8016804:	0801d648 	.word	0x0801d648
 8016808:	0801d650 	.word	0x0801d650
 801680c:	0801d658 	.word	0x0801d658
 8016810:	0801d660 	.word	0x0801d660
 8016814:	0801d668 	.word	0x0801d668
 8016818:	0801d670 	.word	0x0801d670
            case '\x1f': APPEND_STRING("\\u001f"); break;
 801681c:	493c      	ldr	r1, [pc, #240]	; (8016910 <json_serialize_string+0x950>)
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f000 f8b2 	bl	8016988 <append_string>
 8016824:	6138      	str	r0, [r7, #16]
 8016826:	693b      	ldr	r3, [r7, #16]
 8016828:	2b00      	cmp	r3, #0
 801682a:	da02      	bge.n	8016832 <json_serialize_string+0x872>
 801682c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016830:	e069      	b.n	8016906 <json_serialize_string+0x946>
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d003      	beq.n	8016840 <json_serialize_string+0x880>
 8016838:	693b      	ldr	r3, [r7, #16]
 801683a:	687a      	ldr	r2, [r7, #4]
 801683c:	4413      	add	r3, r2
 801683e:	607b      	str	r3, [r7, #4]
 8016840:	69ba      	ldr	r2, [r7, #24]
 8016842:	693b      	ldr	r3, [r7, #16]
 8016844:	4413      	add	r3, r2
 8016846:	61bb      	str	r3, [r7, #24]
 8016848:	e03e      	b.n	80168c8 <json_serialize_string+0x908>
            case '/':
                if (parson_escape_slashes) {
 801684a:	4b32      	ldr	r3, [pc, #200]	; (8016914 <json_serialize_string+0x954>)
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d016      	beq.n	8016880 <json_serialize_string+0x8c0>
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8016852:	4931      	ldr	r1, [pc, #196]	; (8016918 <json_serialize_string+0x958>)
 8016854:	6878      	ldr	r0, [r7, #4]
 8016856:	f000 f897 	bl	8016988 <append_string>
 801685a:	6138      	str	r0, [r7, #16]
 801685c:	693b      	ldr	r3, [r7, #16]
 801685e:	2b00      	cmp	r3, #0
 8016860:	da02      	bge.n	8016868 <json_serialize_string+0x8a8>
 8016862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016866:	e04e      	b.n	8016906 <json_serialize_string+0x946>
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d003      	beq.n	8016876 <json_serialize_string+0x8b6>
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	687a      	ldr	r2, [r7, #4]
 8016872:	4413      	add	r3, r2
 8016874:	607b      	str	r3, [r7, #4]
 8016876:	69ba      	ldr	r2, [r7, #24]
 8016878:	693b      	ldr	r3, [r7, #16]
 801687a:	4413      	add	r3, r2
 801687c:	61bb      	str	r3, [r7, #24]
                } else {
                    APPEND_STRING("/");
                }
                break;
 801687e:	e023      	b.n	80168c8 <json_serialize_string+0x908>
                    APPEND_STRING("/");
 8016880:	4926      	ldr	r1, [pc, #152]	; (801691c <json_serialize_string+0x95c>)
 8016882:	6878      	ldr	r0, [r7, #4]
 8016884:	f000 f880 	bl	8016988 <append_string>
 8016888:	6138      	str	r0, [r7, #16]
 801688a:	693b      	ldr	r3, [r7, #16]
 801688c:	2b00      	cmp	r3, #0
 801688e:	da02      	bge.n	8016896 <json_serialize_string+0x8d6>
 8016890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016894:	e037      	b.n	8016906 <json_serialize_string+0x946>
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d003      	beq.n	80168a4 <json_serialize_string+0x8e4>
 801689c:	693b      	ldr	r3, [r7, #16]
 801689e:	687a      	ldr	r2, [r7, #4]
 80168a0:	4413      	add	r3, r2
 80168a2:	607b      	str	r3, [r7, #4]
 80168a4:	69ba      	ldr	r2, [r7, #24]
 80168a6:	693b      	ldr	r3, [r7, #16]
 80168a8:	4413      	add	r3, r2
 80168aa:	61bb      	str	r3, [r7, #24]
                break;
 80168ac:	e00c      	b.n	80168c8 <json_serialize_string+0x908>
            default:
                if (buf != NULL) {
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d005      	beq.n	80168c0 <json_serialize_string+0x900>
                    buf[0] = c;
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	7dfa      	ldrb	r2, [r7, #23]
 80168b8:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	3301      	adds	r3, #1
 80168be:	607b      	str	r3, [r7, #4]
                }
                written_total += 1;
 80168c0:	69bb      	ldr	r3, [r7, #24]
 80168c2:	3301      	adds	r3, #1
 80168c4:	61bb      	str	r3, [r7, #24]
                break;
 80168c6:	bf00      	nop
    for (i = 0; i < len; i++) {
 80168c8:	69fb      	ldr	r3, [r7, #28]
 80168ca:	3301      	adds	r3, #1
 80168cc:	61fb      	str	r3, [r7, #28]
 80168ce:	69fa      	ldr	r2, [r7, #28]
 80168d0:	68bb      	ldr	r3, [r7, #8]
 80168d2:	429a      	cmp	r2, r3
 80168d4:	f4ff ab9e 	bcc.w	8016014 <json_serialize_string+0x54>
        }
    }
    APPEND_STRING("\"");
 80168d8:	4911      	ldr	r1, [pc, #68]	; (8016920 <json_serialize_string+0x960>)
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f000 f854 	bl	8016988 <append_string>
 80168e0:	6138      	str	r0, [r7, #16]
 80168e2:	693b      	ldr	r3, [r7, #16]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	da02      	bge.n	80168ee <json_serialize_string+0x92e>
 80168e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80168ec:	e00b      	b.n	8016906 <json_serialize_string+0x946>
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d003      	beq.n	80168fc <json_serialize_string+0x93c>
 80168f4:	693b      	ldr	r3, [r7, #16]
 80168f6:	687a      	ldr	r2, [r7, #4]
 80168f8:	4413      	add	r3, r2
 80168fa:	607b      	str	r3, [r7, #4]
 80168fc:	69ba      	ldr	r2, [r7, #24]
 80168fe:	693b      	ldr	r3, [r7, #16]
 8016900:	4413      	add	r3, r2
 8016902:	61bb      	str	r3, [r7, #24]
    return written_total;
 8016904:	69bb      	ldr	r3, [r7, #24]
}
 8016906:	4618      	mov	r0, r3
 8016908:	3720      	adds	r7, #32
 801690a:	46bd      	mov	sp, r7
 801690c:	bd80      	pop	{r7, pc}
 801690e:	bf00      	nop
 8016910:	0801d678 	.word	0x0801d678
 8016914:	2400003c 	.word	0x2400003c
 8016918:	0801d680 	.word	0x0801d680
 801691c:	0801d684 	.word	0x0801d684
 8016920:	0801d588 	.word	0x0801d588

08016924 <append_indent>:

static int append_indent(char *buf, int level) {
 8016924:	b580      	push	{r7, lr}
 8016926:	b086      	sub	sp, #24
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
 801692c:	6039      	str	r1, [r7, #0]
    int i;
    int written = -1, written_total = 0;
 801692e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016932:	60fb      	str	r3, [r7, #12]
 8016934:	2300      	movs	r3, #0
 8016936:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 8016938:	2300      	movs	r3, #0
 801693a:	617b      	str	r3, [r7, #20]
 801693c:	e018      	b.n	8016970 <append_indent+0x4c>
        APPEND_STRING("    ");
 801693e:	4911      	ldr	r1, [pc, #68]	; (8016984 <append_indent+0x60>)
 8016940:	6878      	ldr	r0, [r7, #4]
 8016942:	f000 f821 	bl	8016988 <append_string>
 8016946:	60f8      	str	r0, [r7, #12]
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	2b00      	cmp	r3, #0
 801694c:	da02      	bge.n	8016954 <append_indent+0x30>
 801694e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016952:	e012      	b.n	801697a <append_indent+0x56>
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d003      	beq.n	8016962 <append_indent+0x3e>
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	687a      	ldr	r2, [r7, #4]
 801695e:	4413      	add	r3, r2
 8016960:	607b      	str	r3, [r7, #4]
 8016962:	693a      	ldr	r2, [r7, #16]
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	4413      	add	r3, r2
 8016968:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801696a:	697b      	ldr	r3, [r7, #20]
 801696c:	3301      	adds	r3, #1
 801696e:	617b      	str	r3, [r7, #20]
 8016970:	697a      	ldr	r2, [r7, #20]
 8016972:	683b      	ldr	r3, [r7, #0]
 8016974:	429a      	cmp	r2, r3
 8016976:	dbe2      	blt.n	801693e <append_indent+0x1a>
    }
    return written_total;
 8016978:	693b      	ldr	r3, [r7, #16]
}
 801697a:	4618      	mov	r0, r3
 801697c:	3718      	adds	r7, #24
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}
 8016982:	bf00      	nop
 8016984:	0801d688 	.word	0x0801d688

08016988 <append_string>:

static int append_string(char *buf, const char *string) {
 8016988:	b580      	push	{r7, lr}
 801698a:	b082      	sub	sp, #8
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	6039      	str	r1, [r7, #0]
    if (buf == NULL) {
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d104      	bne.n	80169a2 <append_string+0x1a>
        return (int)strlen(string);
 8016998:	6838      	ldr	r0, [r7, #0]
 801699a:	f7e9 fcab 	bl	80002f4 <strlen>
 801699e:	4603      	mov	r3, r0
 80169a0:	e005      	b.n	80169ae <append_string+0x26>
    }
    return sprintf(buf, "%s", string);
 80169a2:	683a      	ldr	r2, [r7, #0]
 80169a4:	4904      	ldr	r1, [pc, #16]	; (80169b8 <append_string+0x30>)
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f001 fa7e 	bl	8017ea8 <siprintf>
 80169ac:	4603      	mov	r3, r0
}
 80169ae:	4618      	mov	r0, r3
 80169b0:	3708      	adds	r7, #8
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd80      	pop	{r7, pc}
 80169b6:	bf00      	nop
 80169b8:	0801d690 	.word	0x0801d690

080169bc <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 80169bc:	b580      	push	{r7, lr}
 80169be:	b082      	sub	sp, #8
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d101      	bne.n	80169ce <json_parse_string+0x12>
        return NULL;
 80169ca:	2300      	movs	r3, #0
 80169cc:	e016      	b.n	80169fc <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	781b      	ldrb	r3, [r3, #0]
 80169d2:	2bef      	cmp	r3, #239	; 0xef
 80169d4:	d10c      	bne.n	80169f0 <json_parse_string+0x34>
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	3301      	adds	r3, #1
 80169da:	781b      	ldrb	r3, [r3, #0]
 80169dc:	2bbb      	cmp	r3, #187	; 0xbb
 80169de:	d107      	bne.n	80169f0 <json_parse_string+0x34>
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	3302      	adds	r3, #2
 80169e4:	781b      	ldrb	r3, [r3, #0]
 80169e6:	2bbf      	cmp	r3, #191	; 0xbf
 80169e8:	d102      	bne.n	80169f0 <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	3303      	adds	r3, #3
 80169ee:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 80169f0:	1d3b      	adds	r3, r7, #4
 80169f2:	2100      	movs	r1, #0
 80169f4:	4618      	mov	r0, r3
 80169f6:	f7fe fc65 	bl	80152c4 <parse_value>
 80169fa:	4603      	mov	r3, r0
}
 80169fc:	4618      	mov	r0, r3
 80169fe:	3708      	adds	r7, #8
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd80      	pop	{r7, pc}

08016a04 <json_object_get_count>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
 8016a04:	b480      	push	{r7}
 8016a06:	b083      	sub	sp, #12
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d002      	beq.n	8016a18 <json_object_get_count+0x14>
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	699b      	ldr	r3, [r3, #24]
 8016a16:	e000      	b.n	8016a1a <json_object_get_count+0x16>
 8016a18:	2300      	movs	r3, #0
}
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	370c      	adds	r7, #12
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a24:	4770      	bx	lr

08016a26 <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 8016a26:	b580      	push	{r7, lr}
 8016a28:	b082      	sub	sp, #8
 8016a2a:	af00      	add	r7, sp, #0
 8016a2c:	6078      	str	r0, [r7, #4]
 8016a2e:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d006      	beq.n	8016a44 <json_object_get_name+0x1e>
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f7ff ffe4 	bl	8016a04 <json_object_get_count>
 8016a3c:	4602      	mov	r2, r0
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	4293      	cmp	r3, r2
 8016a42:	d301      	bcc.n	8016a48 <json_object_get_name+0x22>
        return NULL;
 8016a44:	2300      	movs	r3, #0
 8016a46:	e005      	b.n	8016a54 <json_object_get_name+0x2e>
    }
    return object->names[index];
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	68da      	ldr	r2, [r3, #12]
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	009b      	lsls	r3, r3, #2
 8016a50:	4413      	add	r3, r2
 8016a52:	681b      	ldr	r3, [r3, #0]
}
 8016a54:	4618      	mov	r0, r3
 8016a56:	3708      	adds	r7, #8
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}

08016a5c <json_object_get_value_at>:

JSON_Value * json_object_get_value_at(const JSON_Object *object, size_t index) {
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b082      	sub	sp, #8
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d006      	beq.n	8016a7a <json_object_get_value_at+0x1e>
 8016a6c:	6878      	ldr	r0, [r7, #4]
 8016a6e:	f7ff ffc9 	bl	8016a04 <json_object_get_count>
 8016a72:	4602      	mov	r2, r0
 8016a74:	683b      	ldr	r3, [r7, #0]
 8016a76:	4293      	cmp	r3, r2
 8016a78:	d301      	bcc.n	8016a7e <json_object_get_value_at+0x22>
        return NULL;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	e005      	b.n	8016a8a <json_object_get_value_at+0x2e>
    }
    return object->values[index];
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	691a      	ldr	r2, [r3, #16]
 8016a82:	683b      	ldr	r3, [r7, #0]
 8016a84:	009b      	lsls	r3, r3, #2
 8016a86:	4413      	add	r3, r2
 8016a88:	681b      	ldr	r3, [r3, #0]
}
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	3708      	adds	r7, #8
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd80      	pop	{r7, pc}

08016a92 <json_object_get_wrapping_value>:

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 8016a92:	b480      	push	{r7}
 8016a94:	b083      	sub	sp, #12
 8016a96:	af00      	add	r7, sp, #0
 8016a98:	6078      	str	r0, [r7, #4]
    if (!object) {
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d101      	bne.n	8016aa4 <json_object_get_wrapping_value+0x12>
        return NULL;
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	e001      	b.n	8016aa8 <json_object_get_wrapping_value+0x16>
    }
    return object->wrapping_value;
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	681b      	ldr	r3, [r3, #0]
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	370c      	adds	r7, #12
 8016aac:	46bd      	mov	sp, r7
 8016aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab2:	4770      	bx	lr

08016ab4 <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b082      	sub	sp, #8
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
 8016abc:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d006      	beq.n	8016ad2 <json_array_get_value+0x1e>
 8016ac4:	6878      	ldr	r0, [r7, #4]
 8016ac6:	f000 f810 	bl	8016aea <json_array_get_count>
 8016aca:	4602      	mov	r2, r0
 8016acc:	683b      	ldr	r3, [r7, #0]
 8016ace:	4293      	cmp	r3, r2
 8016ad0:	d301      	bcc.n	8016ad6 <json_array_get_value+0x22>
        return NULL;
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	e005      	b.n	8016ae2 <json_array_get_value+0x2e>
    }
    return array->items[index];
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	685a      	ldr	r2, [r3, #4]
 8016ada:	683b      	ldr	r3, [r7, #0]
 8016adc:	009b      	lsls	r3, r3, #2
 8016ade:	4413      	add	r3, r2
 8016ae0:	681b      	ldr	r3, [r3, #0]
}
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	3708      	adds	r7, #8
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	bd80      	pop	{r7, pc}

08016aea <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 8016aea:	b480      	push	{r7}
 8016aec:	b083      	sub	sp, #12
 8016aee:	af00      	add	r7, sp, #0
 8016af0:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d002      	beq.n	8016afe <json_array_get_count+0x14>
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	689b      	ldr	r3, [r3, #8]
 8016afc:	e000      	b.n	8016b00 <json_array_get_count+0x16>
 8016afe:	2300      	movs	r3, #0
}
 8016b00:	4618      	mov	r0, r3
 8016b02:	370c      	adds	r7, #12
 8016b04:	46bd      	mov	sp, r7
 8016b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0a:	4770      	bx	lr

08016b0c <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 8016b0c:	b480      	push	{r7}
 8016b0e:	b083      	sub	sp, #12
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
    if (!array) {
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d101      	bne.n	8016b1e <json_array_get_wrapping_value+0x12>
        return NULL;
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	e001      	b.n	8016b22 <json_array_get_wrapping_value+0x16>
    }
    return array->wrapping_value;
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	681b      	ldr	r3, [r3, #0]
}
 8016b22:	4618      	mov	r0, r3
 8016b24:	370c      	adds	r7, #12
 8016b26:	46bd      	mov	sp, r7
 8016b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2c:	4770      	bx	lr

08016b2e <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 8016b2e:	b480      	push	{r7}
 8016b30:	b083      	sub	sp, #12
 8016b32:	af00      	add	r7, sp, #0
 8016b34:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d002      	beq.n	8016b42 <json_value_get_type+0x14>
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	685b      	ldr	r3, [r3, #4]
 8016b40:	e001      	b.n	8016b46 <json_value_get_type+0x18>
 8016b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016b46:	4618      	mov	r0, r3
 8016b48:	370c      	adds	r7, #12
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b50:	4770      	bx	lr

08016b52 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 8016b52:	b580      	push	{r7, lr}
 8016b54:	b082      	sub	sp, #8
 8016b56:	af00      	add	r7, sp, #0
 8016b58:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8016b5a:	6878      	ldr	r0, [r7, #4]
 8016b5c:	f7ff ffe7 	bl	8016b2e <json_value_get_type>
 8016b60:	4603      	mov	r3, r0
 8016b62:	2b04      	cmp	r3, #4
 8016b64:	d102      	bne.n	8016b6c <json_value_get_object+0x1a>
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	689b      	ldr	r3, [r3, #8]
 8016b6a:	e000      	b.n	8016b6e <json_value_get_object+0x1c>
 8016b6c:	2300      	movs	r3, #0
}
 8016b6e:	4618      	mov	r0, r3
 8016b70:	3708      	adds	r7, #8
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}

08016b76 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 8016b76:	b580      	push	{r7, lr}
 8016b78:	b082      	sub	sp, #8
 8016b7a:	af00      	add	r7, sp, #0
 8016b7c:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f7ff ffd5 	bl	8016b2e <json_value_get_type>
 8016b84:	4603      	mov	r3, r0
 8016b86:	2b05      	cmp	r3, #5
 8016b88:	d102      	bne.n	8016b90 <json_value_get_array+0x1a>
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	689b      	ldr	r3, [r3, #8]
 8016b8e:	e000      	b.n	8016b92 <json_value_get_array+0x1c>
 8016b90:	2300      	movs	r3, #0
}
 8016b92:	4618      	mov	r0, r3
 8016b94:	3708      	adds	r7, #8
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}

08016b9a <json_value_get_string_desc>:

static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {
 8016b9a:	b580      	push	{r7, lr}
 8016b9c:	b082      	sub	sp, #8
 8016b9e:	af00      	add	r7, sp, #0
 8016ba0:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 8016ba2:	6878      	ldr	r0, [r7, #4]
 8016ba4:	f7ff ffc3 	bl	8016b2e <json_value_get_type>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	2b02      	cmp	r3, #2
 8016bac:	d102      	bne.n	8016bb4 <json_value_get_string_desc+0x1a>
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	3308      	adds	r3, #8
 8016bb2:	e000      	b.n	8016bb6 <json_value_get_string_desc+0x1c>
 8016bb4:	2300      	movs	r3, #0
}
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	3708      	adds	r7, #8
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	bd80      	pop	{r7, pc}

08016bbe <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 8016bbe:	b580      	push	{r7, lr}
 8016bc0:	b084      	sub	sp, #16
 8016bc2:	af00      	add	r7, sp, #0
 8016bc4:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 8016bc6:	6878      	ldr	r0, [r7, #4]
 8016bc8:	f7ff ffe7 	bl	8016b9a <json_value_get_string_desc>
 8016bcc:	60f8      	str	r0, [r7, #12]
    return str ? str->chars : NULL;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d002      	beq.n	8016bda <json_value_get_string+0x1c>
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	e000      	b.n	8016bdc <json_value_get_string+0x1e>
 8016bda:	2300      	movs	r3, #0
}
 8016bdc:	4618      	mov	r0, r3
 8016bde:	3710      	adds	r7, #16
 8016be0:	46bd      	mov	sp, r7
 8016be2:	bd80      	pop	{r7, pc}

08016be4 <json_value_get_string_len>:

size_t json_value_get_string_len(const JSON_Value *value) {
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b084      	sub	sp, #16
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f7ff ffd4 	bl	8016b9a <json_value_get_string_desc>
 8016bf2:	60f8      	str	r0, [r7, #12]
    return str ? str->length : 0;
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d002      	beq.n	8016c00 <json_value_get_string_len+0x1c>
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	685b      	ldr	r3, [r3, #4]
 8016bfe:	e000      	b.n	8016c02 <json_value_get_string_len+0x1e>
 8016c00:	2300      	movs	r3, #0
}
 8016c02:	4618      	mov	r0, r3
 8016c04:	3710      	adds	r7, #16
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}

08016c0a <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 8016c0a:	b580      	push	{r7, lr}
 8016c0c:	b082      	sub	sp, #8
 8016c0e:	af00      	add	r7, sp, #0
 8016c10:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 8016c12:	6878      	ldr	r0, [r7, #4]
 8016c14:	f7ff ff8b 	bl	8016b2e <json_value_get_type>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	2b03      	cmp	r3, #3
 8016c1c:	d103      	bne.n	8016c26 <json_value_get_number+0x1c>
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016c24:	e003      	b.n	8016c2e <json_value_get_number+0x24>
 8016c26:	f04f 0200 	mov.w	r2, #0
 8016c2a:	f04f 0300 	mov.w	r3, #0
 8016c2e:	ec43 2b17 	vmov	d7, r2, r3
}
 8016c32:	eeb0 0b47 	vmov.f64	d0, d7
 8016c36:	3708      	adds	r7, #8
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b082      	sub	sp, #8
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 8016c44:	6878      	ldr	r0, [r7, #4]
 8016c46:	f7ff ff72 	bl	8016b2e <json_value_get_type>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	2b06      	cmp	r3, #6
 8016c4e:	d102      	bne.n	8016c56 <json_value_get_boolean+0x1a>
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	689b      	ldr	r3, [r3, #8]
 8016c54:	e001      	b.n	8016c5a <json_value_get_boolean+0x1e>
 8016c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	3708      	adds	r7, #8
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}
	...

08016c64 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b082      	sub	sp, #8
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 8016c6c:	6878      	ldr	r0, [r7, #4]
 8016c6e:	f7ff ff5e 	bl	8016b2e <json_value_get_type>
 8016c72:	4603      	mov	r3, r0
 8016c74:	2b05      	cmp	r3, #5
 8016c76:	d012      	beq.n	8016c9e <json_value_free+0x3a>
 8016c78:	2b05      	cmp	r3, #5
 8016c7a:	dc16      	bgt.n	8016caa <json_value_free+0x46>
 8016c7c:	2b02      	cmp	r3, #2
 8016c7e:	d007      	beq.n	8016c90 <json_value_free+0x2c>
 8016c80:	2b04      	cmp	r3, #4
 8016c82:	d112      	bne.n	8016caa <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	689b      	ldr	r3, [r3, #8]
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f7fd ffe1 	bl	8014c50 <json_object_free>
            break;
 8016c8e:	e00d      	b.n	8016cac <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string.chars);
 8016c90:	4b0a      	ldr	r3, [pc, #40]	; (8016cbc <json_value_free+0x58>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	687a      	ldr	r2, [r7, #4]
 8016c96:	6892      	ldr	r2, [r2, #8]
 8016c98:	4610      	mov	r0, r2
 8016c9a:	4798      	blx	r3
            break;
 8016c9c:	e006      	b.n	8016cac <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	689b      	ldr	r3, [r3, #8]
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f7fe f87e 	bl	8014da4 <json_array_free>
            break;
 8016ca8:	e000      	b.n	8016cac <json_value_free+0x48>
        default:
            break;
 8016caa:	bf00      	nop
    }
    parson_free(value);
 8016cac:	4b03      	ldr	r3, [pc, #12]	; (8016cbc <json_value_free+0x58>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	6878      	ldr	r0, [r7, #4]
 8016cb2:	4798      	blx	r3
}
 8016cb4:	bf00      	nop
 8016cb6:	3708      	adds	r7, #8
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}
 8016cbc:	24000038 	.word	0x24000038

08016cc0 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b082      	sub	sp, #8
 8016cc4:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016cc6:	4b12      	ldr	r3, [pc, #72]	; (8016d10 <json_value_init_object+0x50>)
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	2010      	movs	r0, #16
 8016ccc:	4798      	blx	r3
 8016cce:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d101      	bne.n	8016cda <json_value_init_object+0x1a>
        return NULL;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	e016      	b.n	8016d08 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	2200      	movs	r2, #0
 8016cde:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	2204      	movs	r2, #4
 8016ce4:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_make(new_value);
 8016ce6:	6878      	ldr	r0, [r7, #4]
 8016ce8:	f7fd fd04 	bl	80146f4 <json_object_make>
 8016cec:	4602      	mov	r2, r0
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	689b      	ldr	r3, [r3, #8]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d105      	bne.n	8016d06 <json_value_init_object+0x46>
        parson_free(new_value);
 8016cfa:	4b06      	ldr	r3, [pc, #24]	; (8016d14 <json_value_init_object+0x54>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	6878      	ldr	r0, [r7, #4]
 8016d00:	4798      	blx	r3
        return NULL;
 8016d02:	2300      	movs	r3, #0
 8016d04:	e000      	b.n	8016d08 <json_value_init_object+0x48>
    }
    return new_value;
 8016d06:	687b      	ldr	r3, [r7, #4]
}
 8016d08:	4618      	mov	r0, r3
 8016d0a:	3708      	adds	r7, #8
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}
 8016d10:	24000034 	.word	0x24000034
 8016d14:	24000038 	.word	0x24000038

08016d18 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b082      	sub	sp, #8
 8016d1c:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016d1e:	4b12      	ldr	r3, [pc, #72]	; (8016d68 <json_value_init_array+0x50>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	2010      	movs	r0, #16
 8016d24:	4798      	blx	r3
 8016d26:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d101      	bne.n	8016d32 <json_value_init_array+0x1a>
        return NULL;
 8016d2e:	2300      	movs	r3, #0
 8016d30:	e016      	b.n	8016d60 <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	2200      	movs	r2, #0
 8016d36:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	2205      	movs	r2, #5
 8016d3c:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_make(new_value);
 8016d3e:	6878      	ldr	r0, [r7, #4]
 8016d40:	f7fd ff9a 	bl	8014c78 <json_array_make>
 8016d44:	4602      	mov	r2, r0
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	689b      	ldr	r3, [r3, #8]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d105      	bne.n	8016d5e <json_value_init_array+0x46>
        parson_free(new_value);
 8016d52:	4b06      	ldr	r3, [pc, #24]	; (8016d6c <json_value_init_array+0x54>)
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	6878      	ldr	r0, [r7, #4]
 8016d58:	4798      	blx	r3
        return NULL;
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	e000      	b.n	8016d60 <json_value_init_array+0x48>
    }
    return new_value;
 8016d5e:	687b      	ldr	r3, [r7, #4]
}
 8016d60:	4618      	mov	r0, r3
 8016d62:	3708      	adds	r7, #8
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd80      	pop	{r7, pc}
 8016d68:	24000034 	.word	0x24000034
 8016d6c:	24000038 	.word	0x24000038

08016d70 <json_value_init_string>:

JSON_Value * json_value_init_string(const char *string) {
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b082      	sub	sp, #8
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d101      	bne.n	8016d82 <json_value_init_string+0x12>
        return NULL;
 8016d7e:	2300      	movs	r3, #0
 8016d80:	e008      	b.n	8016d94 <json_value_init_string+0x24>
    }
    return json_value_init_string_with_len(string, strlen(string));
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	f7e9 fab6 	bl	80002f4 <strlen>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	4619      	mov	r1, r3
 8016d8c:	6878      	ldr	r0, [r7, #4]
 8016d8e:	f000 f805 	bl	8016d9c <json_value_init_string_with_len>
 8016d92:	4603      	mov	r3, r0
}
 8016d94:	4618      	mov	r0, r3
 8016d96:	3708      	adds	r7, #8
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd80      	pop	{r7, pc}

08016d9c <json_value_init_string_with_len>:

JSON_Value * json_value_init_string_with_len(const char *string, size_t length) {
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b084      	sub	sp, #16
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
 8016da4:	6039      	str	r1, [r7, #0]
    char *copy = NULL;
 8016da6:	2300      	movs	r3, #0
 8016da8:	60fb      	str	r3, [r7, #12]
    JSON_Value *value;
    if (string == NULL) {
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d101      	bne.n	8016db4 <json_value_init_string_with_len+0x18>
        return NULL;
 8016db0:	2300      	movs	r3, #0
 8016db2:	e01f      	b.n	8016df4 <json_value_init_string_with_len+0x58>
    }
    if (!is_valid_utf8(string, length)) {
 8016db4:	6839      	ldr	r1, [r7, #0]
 8016db6:	6878      	ldr	r0, [r7, #4]
 8016db8:	f7fd fc0a 	bl	80145d0 <is_valid_utf8>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d101      	bne.n	8016dc6 <json_value_init_string_with_len+0x2a>
        return NULL;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	e016      	b.n	8016df4 <json_value_init_string_with_len+0x58>
    }
    copy = parson_strndup(string, length);
 8016dc6:	6839      	ldr	r1, [r7, #0]
 8016dc8:	6878      	ldr	r0, [r7, #4]
 8016dca:	f7fd fa4b 	bl	8014264 <parson_strndup>
 8016dce:	60f8      	str	r0, [r7, #12]
    if (copy == NULL) {
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d101      	bne.n	8016dda <json_value_init_string_with_len+0x3e>
        return NULL;
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	e00c      	b.n	8016df4 <json_value_init_string_with_len+0x58>
    }
    value = json_value_init_string_no_copy(copy, length);
 8016dda:	6839      	ldr	r1, [r7, #0]
 8016ddc:	68f8      	ldr	r0, [r7, #12]
 8016dde:	f7fe f809 	bl	8014df4 <json_value_init_string_no_copy>
 8016de2:	60b8      	str	r0, [r7, #8]
    if (value == NULL) {
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d103      	bne.n	8016df2 <json_value_init_string_with_len+0x56>
        parson_free(copy);
 8016dea:	4b04      	ldr	r3, [pc, #16]	; (8016dfc <json_value_init_string_with_len+0x60>)
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	68f8      	ldr	r0, [r7, #12]
 8016df0:	4798      	blx	r3
    }
    return value;
 8016df2:	68bb      	ldr	r3, [r7, #8]
}
 8016df4:	4618      	mov	r0, r3
 8016df6:	3710      	adds	r7, #16
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	bd80      	pop	{r7, pc}
 8016dfc:	24000038 	.word	0x24000038

08016e00 <json_value_init_number>:

JSON_Value * json_value_init_number(double number) {
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b084      	sub	sp, #16
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 8016e0e:	ed97 6b00 	vldr	d6, [r7]
 8016e12:	ed97 7b00 	vldr	d7, [r7]
 8016e16:	eeb4 6b47 	vcmp.f64	d6, d7
 8016e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e1e:	d612      	bvs.n	8016e46 <json_value_init_number+0x46>
 8016e20:	ed97 7b00 	vldr	d7, [r7]
 8016e24:	eeb0 7bc7 	vabs.f64	d7, d7
 8016e28:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8016e80 <json_value_init_number+0x80>
 8016e2c:	eeb4 7b46 	vcmp.f64	d7, d6
 8016e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e34:	bfd4      	ite	le
 8016e36:	2301      	movle	r3, #1
 8016e38:	2300      	movgt	r3, #0
 8016e3a:	b2db      	uxtb	r3, r3
 8016e3c:	f083 0301 	eor.w	r3, r3, #1
 8016e40:	b2db      	uxtb	r3, r3
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d001      	beq.n	8016e4a <json_value_init_number+0x4a>
        return NULL;
 8016e46:	2300      	movs	r3, #0
 8016e48:	e015      	b.n	8016e76 <json_value_init_number+0x76>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016e4a:	4b0f      	ldr	r3, [pc, #60]	; (8016e88 <json_value_init_number+0x88>)
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	2010      	movs	r0, #16
 8016e50:	4798      	blx	r3
 8016e52:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d101      	bne.n	8016e5e <json_value_init_number+0x5e>
        return NULL;
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	e00b      	b.n	8016e76 <json_value_init_number+0x76>
    }
    new_value->parent = NULL;
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	2200      	movs	r2, #0
 8016e62:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	2203      	movs	r2, #3
 8016e68:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 8016e6a:	68f9      	ldr	r1, [r7, #12]
 8016e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e70:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 8016e74:	68fb      	ldr	r3, [r7, #12]
}
 8016e76:	4618      	mov	r0, r3
 8016e78:	3710      	adds	r7, #16
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	bd80      	pop	{r7, pc}
 8016e7e:	bf00      	nop
 8016e80:	ffffffff 	.word	0xffffffff
 8016e84:	7fefffff 	.word	0x7fefffff
 8016e88:	24000034 	.word	0x24000034

08016e8c <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b084      	sub	sp, #16
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016e94:	4b0e      	ldr	r3, [pc, #56]	; (8016ed0 <json_value_init_boolean+0x44>)
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	2010      	movs	r0, #16
 8016e9a:	4798      	blx	r3
 8016e9c:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d101      	bne.n	8016ea8 <json_value_init_boolean+0x1c>
        return NULL;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	e00f      	b.n	8016ec8 <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	2200      	movs	r2, #0
 8016eac:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	2206      	movs	r2, #6
 8016eb2:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	bf14      	ite	ne
 8016eba:	2301      	movne	r3, #1
 8016ebc:	2300      	moveq	r3, #0
 8016ebe:	b2db      	uxtb	r3, r3
 8016ec0:	461a      	mov	r2, r3
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	609a      	str	r2, [r3, #8]
    return new_value;
 8016ec6:	68fb      	ldr	r3, [r7, #12]
}
 8016ec8:	4618      	mov	r0, r3
 8016eca:	3710      	adds	r7, #16
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}
 8016ed0:	24000034 	.word	0x24000034

08016ed4 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b082      	sub	sp, #8
 8016ed8:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016eda:	4b0a      	ldr	r3, [pc, #40]	; (8016f04 <json_value_init_null+0x30>)
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	2010      	movs	r0, #16
 8016ee0:	4798      	blx	r3
 8016ee2:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d101      	bne.n	8016eee <json_value_init_null+0x1a>
        return NULL;
 8016eea:	2300      	movs	r3, #0
 8016eec:	e006      	b.n	8016efc <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	2201      	movs	r2, #1
 8016ef8:	605a      	str	r2, [r3, #4]
    return new_value;
 8016efa:	687b      	ldr	r3, [r7, #4]
}
 8016efc:	4618      	mov	r0, r3
 8016efe:	3708      	adds	r7, #8
 8016f00:	46bd      	mov	sp, r7
 8016f02:	bd80      	pop	{r7, pc}
 8016f04:	24000034 	.word	0x24000034

08016f08 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b096      	sub	sp, #88	; 0x58
 8016f0c:	af02      	add	r7, sp, #8
 8016f0e:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 8016f10:	f107 030c 	add.w	r3, r7, #12
 8016f14:	9300      	str	r3, [sp, #0]
 8016f16:	2300      	movs	r3, #0
 8016f18:	2200      	movs	r2, #0
 8016f1a:	2100      	movs	r1, #0
 8016f1c:	6878      	ldr	r0, [r7, #4]
 8016f1e:	f7fe fd2b 	bl	8015978 <json_serialize_to_buffer_r>
 8016f22:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res) + 1;
 8016f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	db02      	blt.n	8016f30 <json_serialization_size+0x28>
 8016f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f2c:	3301      	adds	r3, #1
 8016f2e:	e000      	b.n	8016f32 <json_serialization_size+0x2a>
 8016f30:	2300      	movs	r3, #0
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	3750      	adds	r7, #80	; 0x50
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}

08016f3a <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 8016f3a:	b580      	push	{r7, lr}
 8016f3c:	b088      	sub	sp, #32
 8016f3e:	af02      	add	r7, sp, #8
 8016f40:	60f8      	str	r0, [r7, #12]
 8016f42:	60b9      	str	r1, [r7, #8]
 8016f44:	607a      	str	r2, [r7, #4]
    int written = -1;
 8016f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f4a:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 8016f4c:	68f8      	ldr	r0, [r7, #12]
 8016f4e:	f7ff ffdb 	bl	8016f08 <json_serialization_size>
 8016f52:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 8016f54:	693b      	ldr	r3, [r7, #16]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d003      	beq.n	8016f62 <json_serialize_to_buffer+0x28>
 8016f5a:	687a      	ldr	r2, [r7, #4]
 8016f5c:	693b      	ldr	r3, [r7, #16]
 8016f5e:	429a      	cmp	r2, r3
 8016f60:	d202      	bcs.n	8016f68 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 8016f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f66:	e00f      	b.n	8016f88 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, PARSON_FALSE, NULL);
 8016f68:	2300      	movs	r3, #0
 8016f6a:	9300      	str	r3, [sp, #0]
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	2200      	movs	r2, #0
 8016f70:	68b9      	ldr	r1, [r7, #8]
 8016f72:	68f8      	ldr	r0, [r7, #12]
 8016f74:	f7fe fd00 	bl	8015978 <json_serialize_to_buffer_r>
 8016f78:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 8016f7a:	697b      	ldr	r3, [r7, #20]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	da02      	bge.n	8016f86 <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 8016f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f84:	e000      	b.n	8016f88 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 8016f86:	2300      	movs	r3, #0
}
 8016f88:	4618      	mov	r0, r3
 8016f8a:	3718      	adds	r7, #24
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}

08016f90 <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b086      	sub	sp, #24
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 8016f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f9c:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f7ff ffb2 	bl	8016f08 <json_serialization_size>
 8016fa4:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 8016faa:	693b      	ldr	r3, [r7, #16]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d101      	bne.n	8016fb4 <json_serialize_to_string+0x24>
        return NULL;
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	e018      	b.n	8016fe6 <json_serialize_to_string+0x56>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 8016fb4:	4b0e      	ldr	r3, [pc, #56]	; (8016ff0 <json_serialize_to_string+0x60>)
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	6938      	ldr	r0, [r7, #16]
 8016fba:	4798      	blx	r3
 8016fbc:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d101      	bne.n	8016fc8 <json_serialize_to_string+0x38>
        return NULL;
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	e00e      	b.n	8016fe6 <json_serialize_to_string+0x56>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 8016fc8:	693a      	ldr	r2, [r7, #16]
 8016fca:	68f9      	ldr	r1, [r7, #12]
 8016fcc:	6878      	ldr	r0, [r7, #4]
 8016fce:	f7ff ffb4 	bl	8016f3a <json_serialize_to_buffer>
 8016fd2:	6178      	str	r0, [r7, #20]
    if (serialization_result != JSONSuccess) {
 8016fd4:	697b      	ldr	r3, [r7, #20]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d004      	beq.n	8016fe4 <json_serialize_to_string+0x54>
        json_free_serialized_string(buf);
 8016fda:	68f8      	ldr	r0, [r7, #12]
 8016fdc:	f000 f80a 	bl	8016ff4 <json_free_serialized_string>
        return NULL;
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	e000      	b.n	8016fe6 <json_serialize_to_string+0x56>
    }
    return buf;
 8016fe4:	68fb      	ldr	r3, [r7, #12]
}
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	3718      	adds	r7, #24
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}
 8016fee:	bf00      	nop
 8016ff0:	24000034 	.word	0x24000034

08016ff4 <json_free_serialized_string>:
        return NULL;
    }
    return buf;
}

void json_free_serialized_string(char *string) {
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b082      	sub	sp, #8
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
    parson_free(string);
 8016ffc:	4b03      	ldr	r3, [pc, #12]	; (801700c <json_free_serialized_string+0x18>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	6878      	ldr	r0, [r7, #4]
 8017002:	4798      	blx	r3
}
 8017004:	bf00      	nop
 8017006:	3708      	adds	r7, #8
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}
 801700c:	24000038 	.word	0x24000038

08017010 <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 8017010:	b580      	push	{r7, lr}
 8017012:	b08e      	sub	sp, #56	; 0x38
 8017014:	af02      	add	r7, sp, #8
 8017016:	60f8      	str	r0, [r7, #12]
 8017018:	60b9      	str	r1, [r7, #8]
 801701a:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 801701c:	2300      	movs	r3, #0
 801701e:	62bb      	str	r3, [r7, #40]	; 0x28
    parson_bool_t found = PARSON_FALSE;
 8017020:	2300      	movs	r3, #0
 8017022:	617b      	str	r3, [r7, #20]
    size_t cell_ix = 0;
 8017024:	2300      	movs	r3, #0
 8017026:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t item_ix = 0;
 8017028:	2300      	movs	r3, #0
 801702a:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Value *old_value = NULL;
 801702c:	2300      	movs	r3, #0
 801702e:	623b      	str	r3, [r7, #32]
    char *key_copy = NULL;
 8017030:	2300      	movs	r3, #0
 8017032:	61fb      	str	r3, [r7, #28]

    if (!object || !name || !value || value->parent) {
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d009      	beq.n	801704e <json_object_set_value+0x3e>
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d006      	beq.n	801704e <json_object_set_value+0x3e>
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d003      	beq.n	801704e <json_object_set_value+0x3e>
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d002      	beq.n	8017054 <json_object_set_value+0x44>
        return JSONFailure;
 801704e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017052:	e095      	b.n	8017180 <json_object_set_value+0x170>
    }
    hash = hash_string(name, strlen(name));
 8017054:	68b8      	ldr	r0, [r7, #8]
 8017056:	f7e9 f94d 	bl	80002f4 <strlen>
 801705a:	4603      	mov	r3, r0
 801705c:	4619      	mov	r1, r3
 801705e:	68b8      	ldr	r0, [r7, #8]
 8017060:	f7fd fb1c 	bl	801469c <hash_string>
 8017064:	62b8      	str	r0, [r7, #40]	; 0x28
    found = PARSON_FALSE;
 8017066:	2300      	movs	r3, #0
 8017068:	617b      	str	r3, [r7, #20]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 801706a:	68b8      	ldr	r0, [r7, #8]
 801706c:	f7e9 f942 	bl	80002f4 <strlen>
 8017070:	4602      	mov	r2, r0
 8017072:	f107 0314 	add.w	r3, r7, #20
 8017076:	9300      	str	r3, [sp, #0]
 8017078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801707a:	68b9      	ldr	r1, [r7, #8]
 801707c:	68f8      	ldr	r0, [r7, #12]
 801707e:	f7fd fcee 	bl	8014a5e <json_object_get_cell_ix>
 8017082:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (found) {
 8017084:	697b      	ldr	r3, [r7, #20]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d01f      	beq.n	80170ca <json_object_set_value+0xba>
        item_ix = object->cells[cell_ix];
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	685a      	ldr	r2, [r3, #4]
 801708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017090:	009b      	lsls	r3, r3, #2
 8017092:	4413      	add	r3, r2
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	627b      	str	r3, [r7, #36]	; 0x24
        old_value = object->values[item_ix];
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	691a      	ldr	r2, [r3, #16]
 801709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801709e:	009b      	lsls	r3, r3, #2
 80170a0:	4413      	add	r3, r2
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	623b      	str	r3, [r7, #32]
        json_value_free(old_value);
 80170a6:	6a38      	ldr	r0, [r7, #32]
 80170a8:	f7ff fddc 	bl	8016c64 <json_value_free>
        object->values[item_ix] = value;
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	691a      	ldr	r2, [r3, #16]
 80170b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b2:	009b      	lsls	r3, r3, #2
 80170b4:	4413      	add	r3, r2
 80170b6:	687a      	ldr	r2, [r7, #4]
 80170b8:	601a      	str	r2, [r3, #0]
        value->parent = json_object_get_wrapping_value(object);
 80170ba:	68f8      	ldr	r0, [r7, #12]
 80170bc:	f7ff fce9 	bl	8016a92 <json_object_get_wrapping_value>
 80170c0:	4602      	mov	r2, r0
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	601a      	str	r2, [r3, #0]
        return JSONSuccess;
 80170c6:	2300      	movs	r3, #0
 80170c8:	e05a      	b.n	8017180 <json_object_set_value+0x170>
    }
    if (object->count >= object->item_capacity) {
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	699a      	ldr	r2, [r3, #24]
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	69db      	ldr	r3, [r3, #28]
 80170d2:	429a      	cmp	r2, r3
 80170d4:	d316      	bcc.n	8017104 <json_object_set_value+0xf4>
        JSON_Status res = json_object_grow_and_rehash(object);
 80170d6:	68f8      	ldr	r0, [r7, #12]
 80170d8:	f7fd fc56 	bl	8014988 <json_object_grow_and_rehash>
 80170dc:	61b8      	str	r0, [r7, #24]
        if (res != JSONSuccess) {
 80170de:	69bb      	ldr	r3, [r7, #24]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d002      	beq.n	80170ea <json_object_set_value+0xda>
            return JSONFailure;
 80170e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170e8:	e04a      	b.n	8017180 <json_object_set_value+0x170>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 80170ea:	68b8      	ldr	r0, [r7, #8]
 80170ec:	f7e9 f902 	bl	80002f4 <strlen>
 80170f0:	4602      	mov	r2, r0
 80170f2:	f107 0314 	add.w	r3, r7, #20
 80170f6:	9300      	str	r3, [sp, #0]
 80170f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170fa:	68b9      	ldr	r1, [r7, #8]
 80170fc:	68f8      	ldr	r0, [r7, #12]
 80170fe:	f7fd fcae 	bl	8014a5e <json_object_get_cell_ix>
 8017102:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    key_copy = parson_strdup(name);
 8017104:	68b8      	ldr	r0, [r7, #8]
 8017106:	f7fd f8cf 	bl	80142a8 <parson_strdup>
 801710a:	61f8      	str	r0, [r7, #28]
    if (!key_copy) {
 801710c:	69fb      	ldr	r3, [r7, #28]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d102      	bne.n	8017118 <json_object_set_value+0x108>
        return JSONFailure;
 8017112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017116:	e033      	b.n	8017180 <json_object_set_value+0x170>
    }
    object->names[object->count] = key_copy;
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	68da      	ldr	r2, [r3, #12]
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	699b      	ldr	r3, [r3, #24]
 8017120:	009b      	lsls	r3, r3, #2
 8017122:	4413      	add	r3, r2
 8017124:	69fa      	ldr	r2, [r7, #28]
 8017126:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	685a      	ldr	r2, [r3, #4]
 801712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801712e:	009b      	lsls	r3, r3, #2
 8017130:	4413      	add	r3, r2
 8017132:	68fa      	ldr	r2, [r7, #12]
 8017134:	6992      	ldr	r2, [r2, #24]
 8017136:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	691a      	ldr	r2, [r3, #16]
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	699b      	ldr	r3, [r3, #24]
 8017140:	009b      	lsls	r3, r3, #2
 8017142:	4413      	add	r3, r2
 8017144:	687a      	ldr	r2, [r7, #4]
 8017146:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	695a      	ldr	r2, [r3, #20]
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	699b      	ldr	r3, [r3, #24]
 8017150:	009b      	lsls	r3, r3, #2
 8017152:	4413      	add	r3, r2
 8017154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017156:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	689a      	ldr	r2, [r3, #8]
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	699b      	ldr	r3, [r3, #24]
 8017160:	009b      	lsls	r3, r3, #2
 8017162:	4413      	add	r3, r2
 8017164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017166:	601a      	str	r2, [r3, #0]
    object->count++;
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	699b      	ldr	r3, [r3, #24]
 801716c:	1c5a      	adds	r2, r3, #1
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 8017172:	68f8      	ldr	r0, [r7, #12]
 8017174:	f7ff fc8d 	bl	8016a92 <json_object_get_wrapping_value>
 8017178:	4602      	mov	r2, r0
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801717e:	2300      	movs	r3, #0
}
 8017180:	4618      	mov	r0, r3
 8017182:	3730      	adds	r7, #48	; 0x30
 8017184:	46bd      	mov	sp, r7
 8017186:	bd80      	pop	{r7, pc}

08017188 <json_object_set_string>:

JSON_Status json_object_set_string(JSON_Object *object, const char *name, const char *string) {
 8017188:	b580      	push	{r7, lr}
 801718a:	b086      	sub	sp, #24
 801718c:	af00      	add	r7, sp, #0
 801718e:	60f8      	str	r0, [r7, #12]
 8017190:	60b9      	str	r1, [r7, #8]
 8017192:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_string(string);
 8017194:	6878      	ldr	r0, [r7, #4]
 8017196:	f7ff fdeb 	bl	8016d70 <json_value_init_string>
 801719a:	6178      	str	r0, [r7, #20]
    JSON_Status status = json_object_set_value(object, name, value);
 801719c:	697a      	ldr	r2, [r7, #20]
 801719e:	68b9      	ldr	r1, [r7, #8]
 80171a0:	68f8      	ldr	r0, [r7, #12]
 80171a2:	f7ff ff35 	bl	8017010 <json_object_set_value>
 80171a6:	6138      	str	r0, [r7, #16]
    if (status != JSONSuccess) {
 80171a8:	693b      	ldr	r3, [r7, #16]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d002      	beq.n	80171b4 <json_object_set_string+0x2c>
        json_value_free(value);
 80171ae:	6978      	ldr	r0, [r7, #20]
 80171b0:	f7ff fd58 	bl	8016c64 <json_value_free>
    }
    return status;
 80171b4:	693b      	ldr	r3, [r7, #16]
}
 80171b6:	4618      	mov	r0, r3
 80171b8:	3718      	adds	r7, #24
 80171ba:	46bd      	mov	sp, r7
 80171bc:	bd80      	pop	{r7, pc}

080171be <json_object_set_number>:
        json_value_free(value);
    }
    return status;
}

JSON_Status json_object_set_number(JSON_Object *object, const char *name, double number) {
 80171be:	b580      	push	{r7, lr}
 80171c0:	b086      	sub	sp, #24
 80171c2:	af00      	add	r7, sp, #0
 80171c4:	60f8      	str	r0, [r7, #12]
 80171c6:	60b9      	str	r1, [r7, #8]
 80171c8:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 80171cc:	ed97 0b00 	vldr	d0, [r7]
 80171d0:	f7ff fe16 	bl	8016e00 <json_value_init_number>
 80171d4:	6178      	str	r0, [r7, #20]
    JSON_Status status = json_object_set_value(object, name, value);
 80171d6:	697a      	ldr	r2, [r7, #20]
 80171d8:	68b9      	ldr	r1, [r7, #8]
 80171da:	68f8      	ldr	r0, [r7, #12]
 80171dc:	f7ff ff18 	bl	8017010 <json_object_set_value>
 80171e0:	6138      	str	r0, [r7, #16]
    if (status != JSONSuccess) {
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d002      	beq.n	80171ee <json_object_set_number+0x30>
        json_value_free(value);
 80171e8:	6978      	ldr	r0, [r7, #20]
 80171ea:	f7ff fd3b 	bl	8016c64 <json_value_free>
    }
    return status;
 80171ee:	693b      	ldr	r3, [r7, #16]
}
 80171f0:	4618      	mov	r0, r3
 80171f2:	3718      	adds	r7, #24
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bd80      	pop	{r7, pc}

080171f8 <json_set_allocation_functions>:

int json_boolean(const JSON_Value *value) {
    return json_value_get_boolean(value);
}

void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {
 80171f8:	b480      	push	{r7}
 80171fa:	b083      	sub	sp, #12
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
 8017200:	6039      	str	r1, [r7, #0]
    parson_malloc = malloc_fun;
 8017202:	4a06      	ldr	r2, [pc, #24]	; (801721c <json_set_allocation_functions+0x24>)
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	6013      	str	r3, [r2, #0]
    parson_free = free_fun;
 8017208:	4a05      	ldr	r2, [pc, #20]	; (8017220 <json_set_allocation_functions+0x28>)
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	6013      	str	r3, [r2, #0]
}
 801720e:	bf00      	nop
 8017210:	370c      	adds	r7, #12
 8017212:	46bd      	mov	sp, r7
 8017214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017218:	4770      	bx	lr
 801721a:	bf00      	nop
 801721c:	24000034 	.word	0x24000034
 8017220:	24000038 	.word	0x24000038

08017224 <share_malloc>:
static osMutexId_t ShareMutex;

extern int ReadyShare;
static char ShareMessage[256];

static void* share_malloc (unsigned int size){
 8017224:	b580      	push	{r7, lr}
 8017226:	b084      	sub	sp, #16
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
	void* result=malloc(size);
 801722c:	6878      	ldr	r0, [r7, #4]
 801722e:	f000 fc71 	bl	8017b14 <malloc>
 8017232:	4603      	mov	r3, r0
 8017234:	60fb      	str	r3, [r7, #12]
	return result;
 8017236:	68fb      	ldr	r3, [r7, #12]
}
 8017238:	4618      	mov	r0, r3
 801723a:	3710      	adds	r7, #16
 801723c:	46bd      	mov	sp, r7
 801723e:	bd80      	pop	{r7, pc}

08017240 <share_free>:
static void share_free(void* buffer){
 8017240:	b580      	push	{r7, lr}
 8017242:	b082      	sub	sp, #8
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
	free(buffer);
 8017248:	6878      	ldr	r0, [r7, #4]
 801724a:	f000 fc6b 	bl	8017b24 <free>
}
 801724e:	bf00      	nop
 8017250:	3708      	adds	r7, #8
 8017252:	46bd      	mov	sp, r7
 8017254:	bd80      	pop	{r7, pc}
	...

08017258 <ShareSaveChange>:

void ShareSaveChange() {
 8017258:	b580      	push	{r7, lr}
 801725a:	b088      	sub	sp, #32
 801725c:	af00      	add	r7, sp, #0
	int count=0;
 801725e:	2300      	movs	r3, #0
 8017260:	61fb      	str	r3, [r7, #28]
	if (osMutexAcquire(ShareMutex, osWaitForever) == osOK) {
 8017262:	4b3b      	ldr	r3, [pc, #236]	; (8017350 <ShareSaveChange+0xf8>)
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801726a:	4618      	mov	r0, r3
 801726c:	f7ee ff9d 	bl	80061aa <osMutexAcquire>
 8017270:	4603      	mov	r3, r0
 8017272:	2b00      	cmp	r3, #0
 8017274:	d157      	bne.n	8017326 <ShareSaveChange+0xce>
		int size=sizeof(charts)/sizeof(charts[0]);
 8017276:	2304      	movs	r3, #4
 8017278:	617b      	str	r3, [r7, #20]
		for (size_t i = 0; i < size; i++) {
 801727a:	2300      	movs	r3, #0
 801727c:	61bb      	str	r3, [r7, #24]
 801727e:	e04e      	b.n	801731e <ShareSaveChange+0xc6>
			ENTRY e, *ep;
//			ShareValue *value;
			e.key = charts[i];
 8017280:	4a34      	ldr	r2, [pc, #208]	; (8017354 <ShareSaveChange+0xfc>)
 8017282:	69bb      	ldr	r3, [r7, #24]
 8017284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017288:	607b      	str	r3, [r7, #4]
			ep = hsearch(e, FIND);
 801728a:	2200      	movs	r2, #0
 801728c:	1d3b      	adds	r3, r7, #4
 801728e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017292:	f000 fb2f 	bl	80178f4 <hsearch>
 8017296:	6138      	str	r0, [r7, #16]
			if (ep != NULL) {
 8017298:	693b      	ldr	r3, [r7, #16]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d02f      	beq.n	80172fe <ShareSaveChange+0xa6>
				if (((ShareValue*) ep->data)->changed) {
 801729e:	693b      	ldr	r3, [r7, #16]
 80172a0:	685b      	ldr	r3, [r3, #4]
 80172a2:	685b      	ldr	r3, [r3, #4]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d037      	beq.n	8017318 <ShareSaveChange+0xc0>
					JSON_Value *value = ((ShareValue*) ep->data)->json_root;
 80172a8:	693b      	ldr	r3, [r7, #16]
 80172aa:	685b      	ldr	r3, [r3, #4]
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	60fb      	str	r3, [r7, #12]
//					char *string =
					json_serialize_to_buffer(value, ShareMessage, 80);
 80172b0:	2250      	movs	r2, #80	; 0x50
 80172b2:	4929      	ldr	r1, [pc, #164]	; (8017358 <ShareSaveChange+0x100>)
 80172b4:	68f8      	ldr	r0, [r7, #12]
 80172b6:	f7ff fe40 	bl	8016f3a <json_serialize_to_buffer>
					Debug_Message(LOG_INFO, ShareMessage);
 80172ba:	4927      	ldr	r1, [pc, #156]	; (8017358 <ShareSaveChange+0x100>)
 80172bc:	2009      	movs	r0, #9
 80172be:	f7e9 ff89 	bl	80011d4 <Debug_Message>
					// Save to EEPROM
					count++;
 80172c2:	69fb      	ldr	r3, [r7, #28]
 80172c4:	3301      	adds	r3, #1
 80172c6:	61fb      	str	r3, [r7, #28]
					((ShareValue*) ep->data)->changed=0;
 80172c8:	693b      	ldr	r3, [r7, #16]
 80172ca:	685b      	ldr	r3, [r3, #4]
 80172cc:	2200      	movs	r2, #0
 80172ce:	605a      	str	r2, [r3, #4]
					e.data=ep->data;
 80172d0:	693b      	ldr	r3, [r7, #16]
 80172d2:	685b      	ldr	r3, [r3, #4]
 80172d4:	60bb      	str	r3, [r7, #8]
					hsearch(e, ENTER);
 80172d6:	2201      	movs	r2, #1
 80172d8:	1d3b      	adds	r3, r7, #4
 80172da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80172de:	f000 fb09 	bl	80178f4 <hsearch>
					sprintf(ShareMessage, "save json %s", charts[i]);
 80172e2:	4a1c      	ldr	r2, [pc, #112]	; (8017354 <ShareSaveChange+0xfc>)
 80172e4:	69bb      	ldr	r3, [r7, #24]
 80172e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80172ea:	461a      	mov	r2, r3
 80172ec:	491b      	ldr	r1, [pc, #108]	; (801735c <ShareSaveChange+0x104>)
 80172ee:	481a      	ldr	r0, [pc, #104]	; (8017358 <ShareSaveChange+0x100>)
 80172f0:	f000 fdda 	bl	8017ea8 <siprintf>
					Debug_Message(LOG_INFO, ShareMessage);
 80172f4:	4918      	ldr	r1, [pc, #96]	; (8017358 <ShareSaveChange+0x100>)
 80172f6:	2009      	movs	r0, #9
 80172f8:	f7e9 ff6c 	bl	80011d4 <Debug_Message>
 80172fc:	e00c      	b.n	8017318 <ShareSaveChange+0xc0>
				}
			} else {
				sprintf(ShareMessage, "chart %s is broken", charts[i]);
 80172fe:	4a15      	ldr	r2, [pc, #84]	; (8017354 <ShareSaveChange+0xfc>)
 8017300:	69bb      	ldr	r3, [r7, #24]
 8017302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017306:	461a      	mov	r2, r3
 8017308:	4915      	ldr	r1, [pc, #84]	; (8017360 <ShareSaveChange+0x108>)
 801730a:	4813      	ldr	r0, [pc, #76]	; (8017358 <ShareSaveChange+0x100>)
 801730c:	f000 fdcc 	bl	8017ea8 <siprintf>
				Debug_Message(LOG_INFO, ShareMessage);
 8017310:	4911      	ldr	r1, [pc, #68]	; (8017358 <ShareSaveChange+0x100>)
 8017312:	2009      	movs	r0, #9
 8017314:	f7e9 ff5e 	bl	80011d4 <Debug_Message>
		for (size_t i = 0; i < size; i++) {
 8017318:	69bb      	ldr	r3, [r7, #24]
 801731a:	3301      	adds	r3, #1
 801731c:	61bb      	str	r3, [r7, #24]
 801731e:	697b      	ldr	r3, [r7, #20]
 8017320:	69ba      	ldr	r2, [r7, #24]
 8017322:	429a      	cmp	r2, r3
 8017324:	d3ac      	bcc.n	8017280 <ShareSaveChange+0x28>
			}
		}
	}
	osMutexRelease(ShareMutex);
 8017326:	4b0a      	ldr	r3, [pc, #40]	; (8017350 <ShareSaveChange+0xf8>)
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	4618      	mov	r0, r3
 801732c:	f7ee ff88 	bl	8006240 <osMutexRelease>
	if(count) 	Debug_Message(LOG_INFO, "share table is saved");
 8017330:	69fb      	ldr	r3, [r7, #28]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d004      	beq.n	8017340 <ShareSaveChange+0xe8>
 8017336:	490b      	ldr	r1, [pc, #44]	; (8017364 <ShareSaveChange+0x10c>)
 8017338:	2009      	movs	r0, #9
 801733a:	f7e9 ff4b 	bl	80011d4 <Debug_Message>
	else Debug_Message(LOG_INFO, "share table not changed");
}
 801733e:	e003      	b.n	8017348 <ShareSaveChange+0xf0>
	else Debug_Message(LOG_INFO, "share table not changed");
 8017340:	4909      	ldr	r1, [pc, #36]	; (8017368 <ShareSaveChange+0x110>)
 8017342:	2009      	movs	r0, #9
 8017344:	f7e9 ff46 	bl	80011d4 <Debug_Message>
}
 8017348:	bf00      	nop
 801734a:	3720      	adds	r7, #32
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}
 8017350:	2400b7d4 	.word	0x2400b7d4
 8017354:	24000040 	.word	0x24000040
 8017358:	2400b7d8 	.word	0x2400b7d8
 801735c:	0801d6fc 	.word	0x0801d6fc
 8017360:	0801d70c 	.word	0x0801d70c
 8017364:	0801d720 	.word	0x0801d720
 8017368:	0801d738 	.word	0x0801d738

0801736c <ShareInit>:
void ShareInit() {
 801736c:	b580      	push	{r7, lr}
 801736e:	b086      	sub	sp, #24
 8017370:	af00      	add	r7, sp, #0
	ENTRY e, *ep;
	ShareValue *value;
	ShareMutex=osMutexNew(NULL);
 8017372:	2000      	movs	r0, #0
 8017374:	f7ee fe93 	bl	800609e <osMutexNew>
 8017378:	4603      	mov	r3, r0
 801737a:	4a38      	ldr	r2, [pc, #224]	; (801745c <ShareInit+0xf0>)
 801737c:	6013      	str	r3, [r2, #0]
	json_set_allocation_functions(share_malloc, share_free);
 801737e:	4938      	ldr	r1, [pc, #224]	; (8017460 <ShareInit+0xf4>)
 8017380:	4838      	ldr	r0, [pc, #224]	; (8017464 <ShareInit+0xf8>)
 8017382:	f7ff ff39 	bl	80171f8 <json_set_allocation_functions>
	const size_t capacity = sizeof charts / sizeof charts[0];
 8017386:	2304      	movs	r3, #4
 8017388:	613b      	str	r3, [r7, #16]
	hcreate(capacity);
 801738a:	6938      	ldr	r0, [r7, #16]
 801738c:	f000 faac 	bl	80178e8 <hcreate>
	for (size_t i = 0; i < capacity; i++) {
 8017390:	2300      	movs	r3, #0
 8017392:	617b      	str	r3, [r7, #20]
 8017394:	e053      	b.n	801743e <ShareInit+0xd2>
		value = malloc(sizeof(ShareValue));
 8017396:	2008      	movs	r0, #8
 8017398:	f000 fbbc 	bl	8017b14 <malloc>
 801739c:	4603      	mov	r3, r0
 801739e:	60fb      	str	r3, [r7, #12]
		e.key = charts[i];
 80173a0:	4a31      	ldr	r2, [pc, #196]	; (8017468 <ShareInit+0xfc>)
 80173a2:	697b      	ldr	r3, [r7, #20]
 80173a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173a8:	603b      	str	r3, [r7, #0]
		//Load string
		sprintf(ShareMessage, "string json %s", values[i]);
 80173aa:	4a30      	ldr	r2, [pc, #192]	; (801746c <ShareInit+0x100>)
 80173ac:	697b      	ldr	r3, [r7, #20]
 80173ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173b2:	461a      	mov	r2, r3
 80173b4:	492e      	ldr	r1, [pc, #184]	; (8017470 <ShareInit+0x104>)
 80173b6:	482f      	ldr	r0, [pc, #188]	; (8017474 <ShareInit+0x108>)
 80173b8:	f000 fd76 	bl	8017ea8 <siprintf>
		Debug_Message(LOG_INFO, ShareMessage);
 80173bc:	492d      	ldr	r1, [pc, #180]	; (8017474 <ShareInit+0x108>)
 80173be:	2009      	movs	r0, #9
 80173c0:	f7e9 ff08 	bl	80011d4 <Debug_Message>
		value->json_root = json_parse_string(values[i]);
 80173c4:	4a29      	ldr	r2, [pc, #164]	; (801746c <ShareInit+0x100>)
 80173c6:	697b      	ldr	r3, [r7, #20]
 80173c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173cc:	4618      	mov	r0, r3
 80173ce:	f7ff faf5 	bl	80169bc <json_parse_string>
 80173d2:	4602      	mov	r2, r0
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	601a      	str	r2, [r3, #0]
		if(value->json_root!=NULL){
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d02b      	beq.n	8017438 <ShareInit+0xcc>
			json_serialize_to_buffer(value->json_root, &ShareMessage, 120);
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	2278      	movs	r2, #120	; 0x78
 80173e6:	4923      	ldr	r1, [pc, #140]	; (8017474 <ShareInit+0x108>)
 80173e8:	4618      	mov	r0, r3
 80173ea:	f7ff fda6 	bl	8016f3a <json_serialize_to_buffer>
			Debug_Message(LOG_INFO, ShareMessage);
 80173ee:	4921      	ldr	r1, [pc, #132]	; (8017474 <ShareInit+0x108>)
 80173f0:	2009      	movs	r0, #9
 80173f2:	f7e9 feef 	bl	80011d4 <Debug_Message>
			sprintf(ShareMessage, "load json %s", charts[i]);
 80173f6:	4a1c      	ldr	r2, [pc, #112]	; (8017468 <ShareInit+0xfc>)
 80173f8:	697b      	ldr	r3, [r7, #20]
 80173fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173fe:	461a      	mov	r2, r3
 8017400:	491d      	ldr	r1, [pc, #116]	; (8017478 <ShareInit+0x10c>)
 8017402:	481c      	ldr	r0, [pc, #112]	; (8017474 <ShareInit+0x108>)
 8017404:	f000 fd50 	bl	8017ea8 <siprintf>
			Debug_Message(LOG_INFO, ShareMessage);
 8017408:	491a      	ldr	r1, [pc, #104]	; (8017474 <ShareInit+0x108>)
 801740a:	2009      	movs	r0, #9
 801740c:	f7e9 fee2 	bl	80011d4 <Debug_Message>
			value->changed = 0;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	2200      	movs	r2, #0
 8017414:	605a      	str	r2, [r3, #4]
			e.data = (void*) value;
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	607b      	str	r3, [r7, #4]
			ep = hsearch(e, ENTER);
 801741a:	2201      	movs	r2, #1
 801741c:	463b      	mov	r3, r7
 801741e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017422:	f000 fa67 	bl	80178f4 <hsearch>
 8017426:	60b8      	str	r0, [r7, #8]
			if (ep == NULL) {
 8017428:	68bb      	ldr	r3, [r7, #8]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d104      	bne.n	8017438 <ShareInit+0xcc>
				Debug_Message(LOG_FATAL, "entry failed");
 801742e:	4913      	ldr	r1, [pc, #76]	; (801747c <ShareInit+0x110>)
 8017430:	2000      	movs	r0, #0
 8017432:	f7e9 fecf 	bl	80011d4 <Debug_Message>
 8017436:	e00d      	b.n	8017454 <ShareInit+0xe8>
	for (size_t i = 0; i < capacity; i++) {
 8017438:	697b      	ldr	r3, [r7, #20]
 801743a:	3301      	adds	r3, #1
 801743c:	617b      	str	r3, [r7, #20]
 801743e:	697a      	ldr	r2, [r7, #20]
 8017440:	693b      	ldr	r3, [r7, #16]
 8017442:	429a      	cmp	r2, r3
 8017444:	d3a7      	bcc.n	8017396 <ShareInit+0x2a>
				return;
			}
		}
	}
	ReadyShare = 1;
 8017446:	4b0e      	ldr	r3, [pc, #56]	; (8017480 <ShareInit+0x114>)
 8017448:	2201      	movs	r2, #1
 801744a:	601a      	str	r2, [r3, #0]
	Debug_Message(LOG_INFO, "Share table is loaded");
 801744c:	490d      	ldr	r1, [pc, #52]	; (8017484 <ShareInit+0x118>)
 801744e:	2009      	movs	r0, #9
 8017450:	f7e9 fec0 	bl	80011d4 <Debug_Message>
}
 8017454:	3718      	adds	r7, #24
 8017456:	46bd      	mov	sp, r7
 8017458:	bd80      	pop	{r7, pc}
 801745a:	bf00      	nop
 801745c:	2400b7d4 	.word	0x2400b7d4
 8017460:	08017241 	.word	0x08017241
 8017464:	08017225 	.word	0x08017225
 8017468:	24000040 	.word	0x24000040
 801746c:	24000050 	.word	0x24000050
 8017470:	0801d750 	.word	0x0801d750
 8017474:	2400b7d8 	.word	0x2400b7d8
 8017478:	0801d760 	.word	0x0801d760
 801747c:	0801d770 	.word	0x0801d770
 8017480:	2400025c 	.word	0x2400025c
 8017484:	0801d780 	.word	0x0801d780

08017488 <ShareGetJson>:


JSON_Value* ShareGetJson(char *chart) {
 8017488:	b580      	push	{r7, lr}
 801748a:	b086      	sub	sp, #24
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
	JSON_Value *result = NULL;
 8017490:	2300      	movs	r3, #0
 8017492:	617b      	str	r3, [r7, #20]
	if (osMutexAcquire(ShareMutex, osWaitForever) == osOK) {
 8017494:	4b12      	ldr	r3, [pc, #72]	; (80174e0 <ShareGetJson+0x58>)
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801749c:	4618      	mov	r0, r3
 801749e:	f7ee fe84 	bl	80061aa <osMutexAcquire>
 80174a2:	4603      	mov	r3, r0
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d115      	bne.n	80174d4 <ShareGetJson+0x4c>
		ENTRY e, *ep;
//		ShareValue *value;
		e.key = chart;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	60bb      	str	r3, [r7, #8]
		ep = hsearch(e, FIND);
 80174ac:	2200      	movs	r2, #0
 80174ae:	f107 0308 	add.w	r3, r7, #8
 80174b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80174b6:	f000 fa1d 	bl	80178f4 <hsearch>
 80174ba:	6138      	str	r0, [r7, #16]
		if (ep != NULL) {
 80174bc:	693b      	ldr	r3, [r7, #16]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d003      	beq.n	80174ca <ShareGetJson+0x42>
			result = ((ShareValue*) ep->data)->json_root;
 80174c2:	693b      	ldr	r3, [r7, #16]
 80174c4:	685b      	ldr	r3, [r3, #4]
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	617b      	str	r3, [r7, #20]
		}
		osMutexRelease(ShareMutex);
 80174ca:	4b05      	ldr	r3, [pc, #20]	; (80174e0 <ShareGetJson+0x58>)
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7ee feb6 	bl	8006240 <osMutexRelease>
	}
	return result;
 80174d4:	697b      	ldr	r3, [r7, #20]
}
 80174d6:	4618      	mov	r0, r3
 80174d8:	3718      	adds	r7, #24
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}
 80174de:	bf00      	nop
 80174e0:	2400b7d4 	.word	0x2400b7d4

080174e4 <ShareSetJson>:
void ShareSetJson(char *chart, JSON_Value *rvalue) {
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b086      	sub	sp, #24
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
 80174ec:	6039      	str	r1, [r7, #0]
	if (osMutexAcquire(ShareMutex, osWaitForever) == osOK) {
 80174ee:	4b20      	ldr	r3, [pc, #128]	; (8017570 <ShareSetJson+0x8c>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80174f6:	4618      	mov	r0, r3
 80174f8:	f7ee fe57 	bl	80061aa <osMutexAcquire>
 80174fc:	4603      	mov	r3, r0
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d131      	bne.n	8017566 <ShareSetJson+0x82>
		ENTRY e, *ep;
		ShareValue *value;
		e.key = chart;
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	60bb      	str	r3, [r7, #8]
		ep = hsearch(e, FIND);
 8017506:	2200      	movs	r2, #0
 8017508:	f107 0308 	add.w	r3, r7, #8
 801750c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017510:	f000 f9f0 	bl	80178f4 <hsearch>
 8017514:	6178      	str	r0, [r7, #20]
		if (ep != NULL) {
 8017516:	697b      	ldr	r3, [r7, #20]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d01f      	beq.n	801755c <ShareSetJson+0x78>
			free(ep->data);
 801751c:	697b      	ldr	r3, [r7, #20]
 801751e:	685b      	ldr	r3, [r3, #4]
 8017520:	4618      	mov	r0, r3
 8017522:	f000 faff 	bl	8017b24 <free>
			value = malloc(sizeof(ShareValue));
 8017526:	2008      	movs	r0, #8
 8017528:	f000 faf4 	bl	8017b14 <malloc>
 801752c:	4603      	mov	r3, r0
 801752e:	613b      	str	r3, [r7, #16]
			value->changed = 1;
 8017530:	693b      	ldr	r3, [r7, #16]
 8017532:	2201      	movs	r2, #1
 8017534:	605a      	str	r2, [r3, #4]
			value->json_root = rvalue;
 8017536:	693b      	ldr	r3, [r7, #16]
 8017538:	683a      	ldr	r2, [r7, #0]
 801753a:	601a      	str	r2, [r3, #0]
			e.data = (void*) value;
 801753c:	693b      	ldr	r3, [r7, #16]
 801753e:	60fb      	str	r3, [r7, #12]
			if (hsearch(e, ENTER) == NULL)
 8017540:	2201      	movs	r2, #1
 8017542:	f107 0308 	add.w	r3, r7, #8
 8017546:	e893 0003 	ldmia.w	r3, {r0, r1}
 801754a:	f000 f9d3 	bl	80178f4 <hsearch>
 801754e:	4603      	mov	r3, r0
 8017550:	2b00      	cmp	r3, #0
 8017552:	d103      	bne.n	801755c <ShareSetJson+0x78>
				Debug_Message(LOG_FATAL, "entry failed");
 8017554:	4907      	ldr	r1, [pc, #28]	; (8017574 <ShareSetJson+0x90>)
 8017556:	2000      	movs	r0, #0
 8017558:	f7e9 fe3c 	bl	80011d4 <Debug_Message>
		}
		osMutexRelease(ShareMutex);
 801755c:	4b04      	ldr	r3, [pc, #16]	; (8017570 <ShareSetJson+0x8c>)
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	4618      	mov	r0, r3
 8017562:	f7ee fe6d 	bl	8006240 <osMutexRelease>
	}
}
 8017566:	bf00      	nop
 8017568:	3718      	adds	r7, #24
 801756a:	46bd      	mov	sp, r7
 801756c:	bd80      	pop	{r7, pc}
 801756e:	bf00      	nop
 8017570:	2400b7d4 	.word	0x2400b7d4
 8017574:	0801d770 	.word	0x0801d770

08017578 <__sflush_r>:
 8017578:	898a      	ldrh	r2, [r1, #12]
 801757a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801757e:	4605      	mov	r5, r0
 8017580:	0710      	lsls	r0, r2, #28
 8017582:	460c      	mov	r4, r1
 8017584:	d458      	bmi.n	8017638 <__sflush_r+0xc0>
 8017586:	684b      	ldr	r3, [r1, #4]
 8017588:	2b00      	cmp	r3, #0
 801758a:	dc05      	bgt.n	8017598 <__sflush_r+0x20>
 801758c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801758e:	2b00      	cmp	r3, #0
 8017590:	dc02      	bgt.n	8017598 <__sflush_r+0x20>
 8017592:	2000      	movs	r0, #0
 8017594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801759a:	2e00      	cmp	r6, #0
 801759c:	d0f9      	beq.n	8017592 <__sflush_r+0x1a>
 801759e:	2300      	movs	r3, #0
 80175a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80175a4:	682f      	ldr	r7, [r5, #0]
 80175a6:	602b      	str	r3, [r5, #0]
 80175a8:	d032      	beq.n	8017610 <__sflush_r+0x98>
 80175aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80175ac:	89a3      	ldrh	r3, [r4, #12]
 80175ae:	075a      	lsls	r2, r3, #29
 80175b0:	d505      	bpl.n	80175be <__sflush_r+0x46>
 80175b2:	6863      	ldr	r3, [r4, #4]
 80175b4:	1ac0      	subs	r0, r0, r3
 80175b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80175b8:	b10b      	cbz	r3, 80175be <__sflush_r+0x46>
 80175ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80175bc:	1ac0      	subs	r0, r0, r3
 80175be:	2300      	movs	r3, #0
 80175c0:	4602      	mov	r2, r0
 80175c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80175c4:	6a21      	ldr	r1, [r4, #32]
 80175c6:	4628      	mov	r0, r5
 80175c8:	47b0      	blx	r6
 80175ca:	1c43      	adds	r3, r0, #1
 80175cc:	89a3      	ldrh	r3, [r4, #12]
 80175ce:	d106      	bne.n	80175de <__sflush_r+0x66>
 80175d0:	6829      	ldr	r1, [r5, #0]
 80175d2:	291d      	cmp	r1, #29
 80175d4:	d82c      	bhi.n	8017630 <__sflush_r+0xb8>
 80175d6:	4a2a      	ldr	r2, [pc, #168]	; (8017680 <__sflush_r+0x108>)
 80175d8:	40ca      	lsrs	r2, r1
 80175da:	07d6      	lsls	r6, r2, #31
 80175dc:	d528      	bpl.n	8017630 <__sflush_r+0xb8>
 80175de:	2200      	movs	r2, #0
 80175e0:	6062      	str	r2, [r4, #4]
 80175e2:	04d9      	lsls	r1, r3, #19
 80175e4:	6922      	ldr	r2, [r4, #16]
 80175e6:	6022      	str	r2, [r4, #0]
 80175e8:	d504      	bpl.n	80175f4 <__sflush_r+0x7c>
 80175ea:	1c42      	adds	r2, r0, #1
 80175ec:	d101      	bne.n	80175f2 <__sflush_r+0x7a>
 80175ee:	682b      	ldr	r3, [r5, #0]
 80175f0:	b903      	cbnz	r3, 80175f4 <__sflush_r+0x7c>
 80175f2:	6560      	str	r0, [r4, #84]	; 0x54
 80175f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80175f6:	602f      	str	r7, [r5, #0]
 80175f8:	2900      	cmp	r1, #0
 80175fa:	d0ca      	beq.n	8017592 <__sflush_r+0x1a>
 80175fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017600:	4299      	cmp	r1, r3
 8017602:	d002      	beq.n	801760a <__sflush_r+0x92>
 8017604:	4628      	mov	r0, r5
 8017606:	f000 fad3 	bl	8017bb0 <_free_r>
 801760a:	2000      	movs	r0, #0
 801760c:	6360      	str	r0, [r4, #52]	; 0x34
 801760e:	e7c1      	b.n	8017594 <__sflush_r+0x1c>
 8017610:	6a21      	ldr	r1, [r4, #32]
 8017612:	2301      	movs	r3, #1
 8017614:	4628      	mov	r0, r5
 8017616:	47b0      	blx	r6
 8017618:	1c41      	adds	r1, r0, #1
 801761a:	d1c7      	bne.n	80175ac <__sflush_r+0x34>
 801761c:	682b      	ldr	r3, [r5, #0]
 801761e:	2b00      	cmp	r3, #0
 8017620:	d0c4      	beq.n	80175ac <__sflush_r+0x34>
 8017622:	2b1d      	cmp	r3, #29
 8017624:	d001      	beq.n	801762a <__sflush_r+0xb2>
 8017626:	2b16      	cmp	r3, #22
 8017628:	d101      	bne.n	801762e <__sflush_r+0xb6>
 801762a:	602f      	str	r7, [r5, #0]
 801762c:	e7b1      	b.n	8017592 <__sflush_r+0x1a>
 801762e:	89a3      	ldrh	r3, [r4, #12]
 8017630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017634:	81a3      	strh	r3, [r4, #12]
 8017636:	e7ad      	b.n	8017594 <__sflush_r+0x1c>
 8017638:	690f      	ldr	r7, [r1, #16]
 801763a:	2f00      	cmp	r7, #0
 801763c:	d0a9      	beq.n	8017592 <__sflush_r+0x1a>
 801763e:	0793      	lsls	r3, r2, #30
 8017640:	680e      	ldr	r6, [r1, #0]
 8017642:	bf08      	it	eq
 8017644:	694b      	ldreq	r3, [r1, #20]
 8017646:	600f      	str	r7, [r1, #0]
 8017648:	bf18      	it	ne
 801764a:	2300      	movne	r3, #0
 801764c:	eba6 0807 	sub.w	r8, r6, r7
 8017650:	608b      	str	r3, [r1, #8]
 8017652:	f1b8 0f00 	cmp.w	r8, #0
 8017656:	dd9c      	ble.n	8017592 <__sflush_r+0x1a>
 8017658:	6a21      	ldr	r1, [r4, #32]
 801765a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801765c:	4643      	mov	r3, r8
 801765e:	463a      	mov	r2, r7
 8017660:	4628      	mov	r0, r5
 8017662:	47b0      	blx	r6
 8017664:	2800      	cmp	r0, #0
 8017666:	dc06      	bgt.n	8017676 <__sflush_r+0xfe>
 8017668:	89a3      	ldrh	r3, [r4, #12]
 801766a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801766e:	81a3      	strh	r3, [r4, #12]
 8017670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017674:	e78e      	b.n	8017594 <__sflush_r+0x1c>
 8017676:	4407      	add	r7, r0
 8017678:	eba8 0800 	sub.w	r8, r8, r0
 801767c:	e7e9      	b.n	8017652 <__sflush_r+0xda>
 801767e:	bf00      	nop
 8017680:	20400001 	.word	0x20400001

08017684 <_fflush_r>:
 8017684:	b538      	push	{r3, r4, r5, lr}
 8017686:	690b      	ldr	r3, [r1, #16]
 8017688:	4605      	mov	r5, r0
 801768a:	460c      	mov	r4, r1
 801768c:	b913      	cbnz	r3, 8017694 <_fflush_r+0x10>
 801768e:	2500      	movs	r5, #0
 8017690:	4628      	mov	r0, r5
 8017692:	bd38      	pop	{r3, r4, r5, pc}
 8017694:	b118      	cbz	r0, 801769e <_fflush_r+0x1a>
 8017696:	6983      	ldr	r3, [r0, #24]
 8017698:	b90b      	cbnz	r3, 801769e <_fflush_r+0x1a>
 801769a:	f000 f887 	bl	80177ac <__sinit>
 801769e:	4b14      	ldr	r3, [pc, #80]	; (80176f0 <_fflush_r+0x6c>)
 80176a0:	429c      	cmp	r4, r3
 80176a2:	d11b      	bne.n	80176dc <_fflush_r+0x58>
 80176a4:	686c      	ldr	r4, [r5, #4]
 80176a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d0ef      	beq.n	801768e <_fflush_r+0xa>
 80176ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80176b0:	07d0      	lsls	r0, r2, #31
 80176b2:	d404      	bmi.n	80176be <_fflush_r+0x3a>
 80176b4:	0599      	lsls	r1, r3, #22
 80176b6:	d402      	bmi.n	80176be <_fflush_r+0x3a>
 80176b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80176ba:	f000 f9c4 	bl	8017a46 <__retarget_lock_acquire_recursive>
 80176be:	4628      	mov	r0, r5
 80176c0:	4621      	mov	r1, r4
 80176c2:	f7ff ff59 	bl	8017578 <__sflush_r>
 80176c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80176c8:	07da      	lsls	r2, r3, #31
 80176ca:	4605      	mov	r5, r0
 80176cc:	d4e0      	bmi.n	8017690 <_fflush_r+0xc>
 80176ce:	89a3      	ldrh	r3, [r4, #12]
 80176d0:	059b      	lsls	r3, r3, #22
 80176d2:	d4dd      	bmi.n	8017690 <_fflush_r+0xc>
 80176d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80176d6:	f000 f9b7 	bl	8017a48 <__retarget_lock_release_recursive>
 80176da:	e7d9      	b.n	8017690 <_fflush_r+0xc>
 80176dc:	4b05      	ldr	r3, [pc, #20]	; (80176f4 <_fflush_r+0x70>)
 80176de:	429c      	cmp	r4, r3
 80176e0:	d101      	bne.n	80176e6 <_fflush_r+0x62>
 80176e2:	68ac      	ldr	r4, [r5, #8]
 80176e4:	e7df      	b.n	80176a6 <_fflush_r+0x22>
 80176e6:	4b04      	ldr	r3, [pc, #16]	; (80176f8 <_fflush_r+0x74>)
 80176e8:	429c      	cmp	r4, r3
 80176ea:	bf08      	it	eq
 80176ec:	68ec      	ldreq	r4, [r5, #12]
 80176ee:	e7da      	b.n	80176a6 <_fflush_r+0x22>
 80176f0:	0801da64 	.word	0x0801da64
 80176f4:	0801da84 	.word	0x0801da84
 80176f8:	0801da44 	.word	0x0801da44

080176fc <std>:
 80176fc:	2300      	movs	r3, #0
 80176fe:	b510      	push	{r4, lr}
 8017700:	4604      	mov	r4, r0
 8017702:	e9c0 3300 	strd	r3, r3, [r0]
 8017706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801770a:	6083      	str	r3, [r0, #8]
 801770c:	8181      	strh	r1, [r0, #12]
 801770e:	6643      	str	r3, [r0, #100]	; 0x64
 8017710:	81c2      	strh	r2, [r0, #14]
 8017712:	6183      	str	r3, [r0, #24]
 8017714:	4619      	mov	r1, r3
 8017716:	2208      	movs	r2, #8
 8017718:	305c      	adds	r0, #92	; 0x5c
 801771a:	f000 fa41 	bl	8017ba0 <memset>
 801771e:	4b05      	ldr	r3, [pc, #20]	; (8017734 <std+0x38>)
 8017720:	6263      	str	r3, [r4, #36]	; 0x24
 8017722:	4b05      	ldr	r3, [pc, #20]	; (8017738 <std+0x3c>)
 8017724:	62a3      	str	r3, [r4, #40]	; 0x28
 8017726:	4b05      	ldr	r3, [pc, #20]	; (801773c <std+0x40>)
 8017728:	62e3      	str	r3, [r4, #44]	; 0x2c
 801772a:	4b05      	ldr	r3, [pc, #20]	; (8017740 <std+0x44>)
 801772c:	6224      	str	r4, [r4, #32]
 801772e:	6323      	str	r3, [r4, #48]	; 0x30
 8017730:	bd10      	pop	{r4, pc}
 8017732:	bf00      	nop
 8017734:	08017ee9 	.word	0x08017ee9
 8017738:	08017f0b 	.word	0x08017f0b
 801773c:	08017f43 	.word	0x08017f43
 8017740:	08017f67 	.word	0x08017f67

08017744 <_cleanup_r>:
 8017744:	4901      	ldr	r1, [pc, #4]	; (801774c <_cleanup_r+0x8>)
 8017746:	f000 b8af 	b.w	80178a8 <_fwalk_reent>
 801774a:	bf00      	nop
 801774c:	08017685 	.word	0x08017685

08017750 <__sfmoreglue>:
 8017750:	b570      	push	{r4, r5, r6, lr}
 8017752:	1e4a      	subs	r2, r1, #1
 8017754:	2568      	movs	r5, #104	; 0x68
 8017756:	4355      	muls	r5, r2
 8017758:	460e      	mov	r6, r1
 801775a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801775e:	f000 fa77 	bl	8017c50 <_malloc_r>
 8017762:	4604      	mov	r4, r0
 8017764:	b140      	cbz	r0, 8017778 <__sfmoreglue+0x28>
 8017766:	2100      	movs	r1, #0
 8017768:	e9c0 1600 	strd	r1, r6, [r0]
 801776c:	300c      	adds	r0, #12
 801776e:	60a0      	str	r0, [r4, #8]
 8017770:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017774:	f000 fa14 	bl	8017ba0 <memset>
 8017778:	4620      	mov	r0, r4
 801777a:	bd70      	pop	{r4, r5, r6, pc}

0801777c <__sfp_lock_acquire>:
 801777c:	4801      	ldr	r0, [pc, #4]	; (8017784 <__sfp_lock_acquire+0x8>)
 801777e:	f000 b962 	b.w	8017a46 <__retarget_lock_acquire_recursive>
 8017782:	bf00      	nop
 8017784:	2400ee38 	.word	0x2400ee38

08017788 <__sfp_lock_release>:
 8017788:	4801      	ldr	r0, [pc, #4]	; (8017790 <__sfp_lock_release+0x8>)
 801778a:	f000 b95d 	b.w	8017a48 <__retarget_lock_release_recursive>
 801778e:	bf00      	nop
 8017790:	2400ee38 	.word	0x2400ee38

08017794 <__sinit_lock_acquire>:
 8017794:	4801      	ldr	r0, [pc, #4]	; (801779c <__sinit_lock_acquire+0x8>)
 8017796:	f000 b956 	b.w	8017a46 <__retarget_lock_acquire_recursive>
 801779a:	bf00      	nop
 801779c:	2400ee33 	.word	0x2400ee33

080177a0 <__sinit_lock_release>:
 80177a0:	4801      	ldr	r0, [pc, #4]	; (80177a8 <__sinit_lock_release+0x8>)
 80177a2:	f000 b951 	b.w	8017a48 <__retarget_lock_release_recursive>
 80177a6:	bf00      	nop
 80177a8:	2400ee33 	.word	0x2400ee33

080177ac <__sinit>:
 80177ac:	b510      	push	{r4, lr}
 80177ae:	4604      	mov	r4, r0
 80177b0:	f7ff fff0 	bl	8017794 <__sinit_lock_acquire>
 80177b4:	69a3      	ldr	r3, [r4, #24]
 80177b6:	b11b      	cbz	r3, 80177c0 <__sinit+0x14>
 80177b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177bc:	f7ff bff0 	b.w	80177a0 <__sinit_lock_release>
 80177c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80177c4:	6523      	str	r3, [r4, #80]	; 0x50
 80177c6:	4b13      	ldr	r3, [pc, #76]	; (8017814 <__sinit+0x68>)
 80177c8:	4a13      	ldr	r2, [pc, #76]	; (8017818 <__sinit+0x6c>)
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80177ce:	42a3      	cmp	r3, r4
 80177d0:	bf04      	itt	eq
 80177d2:	2301      	moveq	r3, #1
 80177d4:	61a3      	streq	r3, [r4, #24]
 80177d6:	4620      	mov	r0, r4
 80177d8:	f000 f820 	bl	801781c <__sfp>
 80177dc:	6060      	str	r0, [r4, #4]
 80177de:	4620      	mov	r0, r4
 80177e0:	f000 f81c 	bl	801781c <__sfp>
 80177e4:	60a0      	str	r0, [r4, #8]
 80177e6:	4620      	mov	r0, r4
 80177e8:	f000 f818 	bl	801781c <__sfp>
 80177ec:	2200      	movs	r2, #0
 80177ee:	60e0      	str	r0, [r4, #12]
 80177f0:	2104      	movs	r1, #4
 80177f2:	6860      	ldr	r0, [r4, #4]
 80177f4:	f7ff ff82 	bl	80176fc <std>
 80177f8:	68a0      	ldr	r0, [r4, #8]
 80177fa:	2201      	movs	r2, #1
 80177fc:	2109      	movs	r1, #9
 80177fe:	f7ff ff7d 	bl	80176fc <std>
 8017802:	68e0      	ldr	r0, [r4, #12]
 8017804:	2202      	movs	r2, #2
 8017806:	2112      	movs	r1, #18
 8017808:	f7ff ff78 	bl	80176fc <std>
 801780c:	2301      	movs	r3, #1
 801780e:	61a3      	str	r3, [r4, #24]
 8017810:	e7d2      	b.n	80177b8 <__sinit+0xc>
 8017812:	bf00      	nop
 8017814:	0801daa4 	.word	0x0801daa4
 8017818:	08017745 	.word	0x08017745

0801781c <__sfp>:
 801781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801781e:	4607      	mov	r7, r0
 8017820:	f7ff ffac 	bl	801777c <__sfp_lock_acquire>
 8017824:	4b1e      	ldr	r3, [pc, #120]	; (80178a0 <__sfp+0x84>)
 8017826:	681e      	ldr	r6, [r3, #0]
 8017828:	69b3      	ldr	r3, [r6, #24]
 801782a:	b913      	cbnz	r3, 8017832 <__sfp+0x16>
 801782c:	4630      	mov	r0, r6
 801782e:	f7ff ffbd 	bl	80177ac <__sinit>
 8017832:	3648      	adds	r6, #72	; 0x48
 8017834:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017838:	3b01      	subs	r3, #1
 801783a:	d503      	bpl.n	8017844 <__sfp+0x28>
 801783c:	6833      	ldr	r3, [r6, #0]
 801783e:	b30b      	cbz	r3, 8017884 <__sfp+0x68>
 8017840:	6836      	ldr	r6, [r6, #0]
 8017842:	e7f7      	b.n	8017834 <__sfp+0x18>
 8017844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017848:	b9d5      	cbnz	r5, 8017880 <__sfp+0x64>
 801784a:	4b16      	ldr	r3, [pc, #88]	; (80178a4 <__sfp+0x88>)
 801784c:	60e3      	str	r3, [r4, #12]
 801784e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017852:	6665      	str	r5, [r4, #100]	; 0x64
 8017854:	f000 f8f6 	bl	8017a44 <__retarget_lock_init_recursive>
 8017858:	f7ff ff96 	bl	8017788 <__sfp_lock_release>
 801785c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017860:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017864:	6025      	str	r5, [r4, #0]
 8017866:	61a5      	str	r5, [r4, #24]
 8017868:	2208      	movs	r2, #8
 801786a:	4629      	mov	r1, r5
 801786c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017870:	f000 f996 	bl	8017ba0 <memset>
 8017874:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017878:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801787c:	4620      	mov	r0, r4
 801787e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017880:	3468      	adds	r4, #104	; 0x68
 8017882:	e7d9      	b.n	8017838 <__sfp+0x1c>
 8017884:	2104      	movs	r1, #4
 8017886:	4638      	mov	r0, r7
 8017888:	f7ff ff62 	bl	8017750 <__sfmoreglue>
 801788c:	4604      	mov	r4, r0
 801788e:	6030      	str	r0, [r6, #0]
 8017890:	2800      	cmp	r0, #0
 8017892:	d1d5      	bne.n	8017840 <__sfp+0x24>
 8017894:	f7ff ff78 	bl	8017788 <__sfp_lock_release>
 8017898:	230c      	movs	r3, #12
 801789a:	603b      	str	r3, [r7, #0]
 801789c:	e7ee      	b.n	801787c <__sfp+0x60>
 801789e:	bf00      	nop
 80178a0:	0801daa4 	.word	0x0801daa4
 80178a4:	ffff0001 	.word	0xffff0001

080178a8 <_fwalk_reent>:
 80178a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178ac:	4606      	mov	r6, r0
 80178ae:	4688      	mov	r8, r1
 80178b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80178b4:	2700      	movs	r7, #0
 80178b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80178ba:	f1b9 0901 	subs.w	r9, r9, #1
 80178be:	d505      	bpl.n	80178cc <_fwalk_reent+0x24>
 80178c0:	6824      	ldr	r4, [r4, #0]
 80178c2:	2c00      	cmp	r4, #0
 80178c4:	d1f7      	bne.n	80178b6 <_fwalk_reent+0xe>
 80178c6:	4638      	mov	r0, r7
 80178c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178cc:	89ab      	ldrh	r3, [r5, #12]
 80178ce:	2b01      	cmp	r3, #1
 80178d0:	d907      	bls.n	80178e2 <_fwalk_reent+0x3a>
 80178d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80178d6:	3301      	adds	r3, #1
 80178d8:	d003      	beq.n	80178e2 <_fwalk_reent+0x3a>
 80178da:	4629      	mov	r1, r5
 80178dc:	4630      	mov	r0, r6
 80178de:	47c0      	blx	r8
 80178e0:	4307      	orrs	r7, r0
 80178e2:	3568      	adds	r5, #104	; 0x68
 80178e4:	e7e9      	b.n	80178ba <_fwalk_reent+0x12>
	...

080178e8 <hcreate>:
 80178e8:	4901      	ldr	r1, [pc, #4]	; (80178f0 <hcreate+0x8>)
 80178ea:	f000 b815 	b.w	8017918 <hcreate_r>
 80178ee:	bf00      	nop
 80178f0:	2400b8d8 	.word	0x2400b8d8

080178f4 <hsearch>:
 80178f4:	b510      	push	{r4, lr}
 80178f6:	b086      	sub	sp, #24
 80178f8:	ac02      	add	r4, sp, #8
 80178fa:	e884 0003 	stmia.w	r4, {r0, r1}
 80178fe:	4b05      	ldr	r3, [pc, #20]	; (8017914 <hsearch+0x20>)
 8017900:	9300      	str	r3, [sp, #0]
 8017902:	e894 0003 	ldmia.w	r4, {r0, r1}
 8017906:	ab05      	add	r3, sp, #20
 8017908:	f000 f838 	bl	801797c <hsearch_r>
 801790c:	9805      	ldr	r0, [sp, #20]
 801790e:	b006      	add	sp, #24
 8017910:	bd10      	pop	{r4, pc}
 8017912:	bf00      	nop
 8017914:	2400b8d8 	.word	0x2400b8d8

08017918 <hcreate_r>:
 8017918:	b538      	push	{r3, r4, r5, lr}
 801791a:	680b      	ldr	r3, [r1, #0]
 801791c:	460d      	mov	r5, r1
 801791e:	b12b      	cbz	r3, 801792c <hcreate_r+0x14>
 8017920:	f001 fa40 	bl	8018da4 <__errno>
 8017924:	2316      	movs	r3, #22
 8017926:	6003      	str	r3, [r0, #0]
 8017928:	2000      	movs	r0, #0
 801792a:	bd38      	pop	{r3, r4, r5, pc}
 801792c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8017930:	bf28      	it	cs
 8017932:	f04f 6080 	movcs.w	r0, #67108864	; 0x4000000
 8017936:	2810      	cmp	r0, #16
 8017938:	bf38      	it	cc
 801793a:	2010      	movcc	r0, #16
 801793c:	1e42      	subs	r2, r0, #1
 801793e:	4202      	tst	r2, r0
 8017940:	d005      	beq.n	801794e <hcreate_r+0x36>
 8017942:	0840      	lsrs	r0, r0, #1
 8017944:	f103 0301 	add.w	r3, r3, #1
 8017948:	d1fb      	bne.n	8017942 <hcreate_r+0x2a>
 801794a:	2001      	movs	r0, #1
 801794c:	4098      	lsls	r0, r3
 801794e:	6068      	str	r0, [r5, #4]
 8017950:	0080      	lsls	r0, r0, #2
 8017952:	f000 f8df 	bl	8017b14 <malloc>
 8017956:	4604      	mov	r4, r0
 8017958:	6028      	str	r0, [r5, #0]
 801795a:	b138      	cbz	r0, 801796c <hcreate_r+0x54>
 801795c:	686b      	ldr	r3, [r5, #4]
 801795e:	2200      	movs	r2, #0
 8017960:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8017964:	42a3      	cmp	r3, r4
 8017966:	d105      	bne.n	8017974 <hcreate_r+0x5c>
 8017968:	2001      	movs	r0, #1
 801796a:	e7de      	b.n	801792a <hcreate_r+0x12>
 801796c:	f001 fa1a 	bl	8018da4 <__errno>
 8017970:	230c      	movs	r3, #12
 8017972:	e7d8      	b.n	8017926 <hcreate_r+0xe>
 8017974:	f844 2b04 	str.w	r2, [r4], #4
 8017978:	e7f4      	b.n	8017964 <hcreate_r+0x4c>
	...

0801797c <hsearch_r>:
 801797c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017980:	ac02      	add	r4, sp, #8
 8017982:	e904 0003 	stmdb	r4, {r0, r1}
 8017986:	f8dd 8000 	ldr.w	r8, [sp]
 801798a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801798c:	4640      	mov	r0, r8
 801798e:	4691      	mov	r9, r2
 8017990:	461e      	mov	r6, r3
 8017992:	f7e8 fcaf 	bl	80002f4 <strlen>
 8017996:	4b18      	ldr	r3, [pc, #96]	; (80179f8 <hsearch_r+0x7c>)
 8017998:	4601      	mov	r1, r0
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	4640      	mov	r0, r8
 801799e:	4798      	blx	r3
 80179a0:	686b      	ldr	r3, [r5, #4]
 80179a2:	682f      	ldr	r7, [r5, #0]
 80179a4:	3b01      	subs	r3, #1
 80179a6:	ea03 0400 	and.w	r4, r3, r0
 80179aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80179ae:	b99d      	cbnz	r5, 80179d8 <hsearch_r+0x5c>
 80179b0:	f1b9 0f00 	cmp.w	r9, #0
 80179b4:	d017      	beq.n	80179e6 <hsearch_r+0x6a>
 80179b6:	200c      	movs	r0, #12
 80179b8:	f000 f8ac 	bl	8017b14 <malloc>
 80179bc:	b198      	cbz	r0, 80179e6 <hsearch_r+0x6a>
 80179be:	9b01      	ldr	r3, [sp, #4]
 80179c0:	6083      	str	r3, [r0, #8]
 80179c2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 80179c6:	f8c0 8004 	str.w	r8, [r0, #4]
 80179ca:	6003      	str	r3, [r0, #0]
 80179cc:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 80179d0:	3004      	adds	r0, #4
 80179d2:	6030      	str	r0, [r6, #0]
 80179d4:	2001      	movs	r0, #1
 80179d6:	e008      	b.n	80179ea <hsearch_r+0x6e>
 80179d8:	6868      	ldr	r0, [r5, #4]
 80179da:	4641      	mov	r1, r8
 80179dc:	f7e8 fc80 	bl	80002e0 <strcmp>
 80179e0:	b130      	cbz	r0, 80179f0 <hsearch_r+0x74>
 80179e2:	682d      	ldr	r5, [r5, #0]
 80179e4:	e7e3      	b.n	80179ae <hsearch_r+0x32>
 80179e6:	2000      	movs	r0, #0
 80179e8:	6030      	str	r0, [r6, #0]
 80179ea:	b003      	add	sp, #12
 80179ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179f0:	3504      	adds	r5, #4
 80179f2:	6035      	str	r5, [r6, #0]
 80179f4:	e7ee      	b.n	80179d4 <hsearch_r+0x58>
 80179f6:	bf00      	nop
 80179f8:	240000c4 	.word	0x240000c4

080179fc <__libc_init_array>:
 80179fc:	b570      	push	{r4, r5, r6, lr}
 80179fe:	4d0d      	ldr	r5, [pc, #52]	; (8017a34 <__libc_init_array+0x38>)
 8017a00:	4c0d      	ldr	r4, [pc, #52]	; (8017a38 <__libc_init_array+0x3c>)
 8017a02:	1b64      	subs	r4, r4, r5
 8017a04:	10a4      	asrs	r4, r4, #2
 8017a06:	2600      	movs	r6, #0
 8017a08:	42a6      	cmp	r6, r4
 8017a0a:	d109      	bne.n	8017a20 <__libc_init_array+0x24>
 8017a0c:	4d0b      	ldr	r5, [pc, #44]	; (8017a3c <__libc_init_array+0x40>)
 8017a0e:	4c0c      	ldr	r4, [pc, #48]	; (8017a40 <__libc_init_array+0x44>)
 8017a10:	f002 ffa4 	bl	801a95c <_init>
 8017a14:	1b64      	subs	r4, r4, r5
 8017a16:	10a4      	asrs	r4, r4, #2
 8017a18:	2600      	movs	r6, #0
 8017a1a:	42a6      	cmp	r6, r4
 8017a1c:	d105      	bne.n	8017a2a <__libc_init_array+0x2e>
 8017a1e:	bd70      	pop	{r4, r5, r6, pc}
 8017a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8017a24:	4798      	blx	r3
 8017a26:	3601      	adds	r6, #1
 8017a28:	e7ee      	b.n	8017a08 <__libc_init_array+0xc>
 8017a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017a2e:	4798      	blx	r3
 8017a30:	3601      	adds	r6, #1
 8017a32:	e7f2      	b.n	8017a1a <__libc_init_array+0x1e>
 8017a34:	0801dde0 	.word	0x0801dde0
 8017a38:	0801dde0 	.word	0x0801dde0
 8017a3c:	0801dde0 	.word	0x0801dde0
 8017a40:	0801dde4 	.word	0x0801dde4

08017a44 <__retarget_lock_init_recursive>:
 8017a44:	4770      	bx	lr

08017a46 <__retarget_lock_acquire_recursive>:
 8017a46:	4770      	bx	lr

08017a48 <__retarget_lock_release_recursive>:
 8017a48:	4770      	bx	lr

08017a4a <__swhatbuf_r>:
 8017a4a:	b570      	push	{r4, r5, r6, lr}
 8017a4c:	460e      	mov	r6, r1
 8017a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a52:	2900      	cmp	r1, #0
 8017a54:	b096      	sub	sp, #88	; 0x58
 8017a56:	4614      	mov	r4, r2
 8017a58:	461d      	mov	r5, r3
 8017a5a:	da07      	bge.n	8017a6c <__swhatbuf_r+0x22>
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	602b      	str	r3, [r5, #0]
 8017a60:	89b3      	ldrh	r3, [r6, #12]
 8017a62:	061a      	lsls	r2, r3, #24
 8017a64:	d410      	bmi.n	8017a88 <__swhatbuf_r+0x3e>
 8017a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017a6a:	e00e      	b.n	8017a8a <__swhatbuf_r+0x40>
 8017a6c:	466a      	mov	r2, sp
 8017a6e:	f001 f9b1 	bl	8018dd4 <_fstat_r>
 8017a72:	2800      	cmp	r0, #0
 8017a74:	dbf2      	blt.n	8017a5c <__swhatbuf_r+0x12>
 8017a76:	9a01      	ldr	r2, [sp, #4]
 8017a78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017a7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017a80:	425a      	negs	r2, r3
 8017a82:	415a      	adcs	r2, r3
 8017a84:	602a      	str	r2, [r5, #0]
 8017a86:	e7ee      	b.n	8017a66 <__swhatbuf_r+0x1c>
 8017a88:	2340      	movs	r3, #64	; 0x40
 8017a8a:	2000      	movs	r0, #0
 8017a8c:	6023      	str	r3, [r4, #0]
 8017a8e:	b016      	add	sp, #88	; 0x58
 8017a90:	bd70      	pop	{r4, r5, r6, pc}
	...

08017a94 <__smakebuf_r>:
 8017a94:	898b      	ldrh	r3, [r1, #12]
 8017a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017a98:	079d      	lsls	r5, r3, #30
 8017a9a:	4606      	mov	r6, r0
 8017a9c:	460c      	mov	r4, r1
 8017a9e:	d507      	bpl.n	8017ab0 <__smakebuf_r+0x1c>
 8017aa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017aa4:	6023      	str	r3, [r4, #0]
 8017aa6:	6123      	str	r3, [r4, #16]
 8017aa8:	2301      	movs	r3, #1
 8017aaa:	6163      	str	r3, [r4, #20]
 8017aac:	b002      	add	sp, #8
 8017aae:	bd70      	pop	{r4, r5, r6, pc}
 8017ab0:	ab01      	add	r3, sp, #4
 8017ab2:	466a      	mov	r2, sp
 8017ab4:	f7ff ffc9 	bl	8017a4a <__swhatbuf_r>
 8017ab8:	9900      	ldr	r1, [sp, #0]
 8017aba:	4605      	mov	r5, r0
 8017abc:	4630      	mov	r0, r6
 8017abe:	f000 f8c7 	bl	8017c50 <_malloc_r>
 8017ac2:	b948      	cbnz	r0, 8017ad8 <__smakebuf_r+0x44>
 8017ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ac8:	059a      	lsls	r2, r3, #22
 8017aca:	d4ef      	bmi.n	8017aac <__smakebuf_r+0x18>
 8017acc:	f023 0303 	bic.w	r3, r3, #3
 8017ad0:	f043 0302 	orr.w	r3, r3, #2
 8017ad4:	81a3      	strh	r3, [r4, #12]
 8017ad6:	e7e3      	b.n	8017aa0 <__smakebuf_r+0xc>
 8017ad8:	4b0d      	ldr	r3, [pc, #52]	; (8017b10 <__smakebuf_r+0x7c>)
 8017ada:	62b3      	str	r3, [r6, #40]	; 0x28
 8017adc:	89a3      	ldrh	r3, [r4, #12]
 8017ade:	6020      	str	r0, [r4, #0]
 8017ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ae4:	81a3      	strh	r3, [r4, #12]
 8017ae6:	9b00      	ldr	r3, [sp, #0]
 8017ae8:	6163      	str	r3, [r4, #20]
 8017aea:	9b01      	ldr	r3, [sp, #4]
 8017aec:	6120      	str	r0, [r4, #16]
 8017aee:	b15b      	cbz	r3, 8017b08 <__smakebuf_r+0x74>
 8017af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017af4:	4630      	mov	r0, r6
 8017af6:	f001 fd3d 	bl	8019574 <_isatty_r>
 8017afa:	b128      	cbz	r0, 8017b08 <__smakebuf_r+0x74>
 8017afc:	89a3      	ldrh	r3, [r4, #12]
 8017afe:	f023 0303 	bic.w	r3, r3, #3
 8017b02:	f043 0301 	orr.w	r3, r3, #1
 8017b06:	81a3      	strh	r3, [r4, #12]
 8017b08:	89a0      	ldrh	r0, [r4, #12]
 8017b0a:	4305      	orrs	r5, r0
 8017b0c:	81a5      	strh	r5, [r4, #12]
 8017b0e:	e7cd      	b.n	8017aac <__smakebuf_r+0x18>
 8017b10:	08017745 	.word	0x08017745

08017b14 <malloc>:
 8017b14:	4b02      	ldr	r3, [pc, #8]	; (8017b20 <malloc+0xc>)
 8017b16:	4601      	mov	r1, r0
 8017b18:	6818      	ldr	r0, [r3, #0]
 8017b1a:	f000 b899 	b.w	8017c50 <_malloc_r>
 8017b1e:	bf00      	nop
 8017b20:	24000060 	.word	0x24000060

08017b24 <free>:
 8017b24:	4b02      	ldr	r3, [pc, #8]	; (8017b30 <free+0xc>)
 8017b26:	4601      	mov	r1, r0
 8017b28:	6818      	ldr	r0, [r3, #0]
 8017b2a:	f000 b841 	b.w	8017bb0 <_free_r>
 8017b2e:	bf00      	nop
 8017b30:	24000060 	.word	0x24000060

08017b34 <memcmp>:
 8017b34:	b530      	push	{r4, r5, lr}
 8017b36:	3901      	subs	r1, #1
 8017b38:	2400      	movs	r4, #0
 8017b3a:	42a2      	cmp	r2, r4
 8017b3c:	d101      	bne.n	8017b42 <memcmp+0xe>
 8017b3e:	2000      	movs	r0, #0
 8017b40:	e005      	b.n	8017b4e <memcmp+0x1a>
 8017b42:	5d03      	ldrb	r3, [r0, r4]
 8017b44:	3401      	adds	r4, #1
 8017b46:	5d0d      	ldrb	r5, [r1, r4]
 8017b48:	42ab      	cmp	r3, r5
 8017b4a:	d0f6      	beq.n	8017b3a <memcmp+0x6>
 8017b4c:	1b58      	subs	r0, r3, r5
 8017b4e:	bd30      	pop	{r4, r5, pc}

08017b50 <memcpy>:
 8017b50:	440a      	add	r2, r1
 8017b52:	4291      	cmp	r1, r2
 8017b54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017b58:	d100      	bne.n	8017b5c <memcpy+0xc>
 8017b5a:	4770      	bx	lr
 8017b5c:	b510      	push	{r4, lr}
 8017b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b66:	4291      	cmp	r1, r2
 8017b68:	d1f9      	bne.n	8017b5e <memcpy+0xe>
 8017b6a:	bd10      	pop	{r4, pc}

08017b6c <memmove>:
 8017b6c:	4288      	cmp	r0, r1
 8017b6e:	b510      	push	{r4, lr}
 8017b70:	eb01 0402 	add.w	r4, r1, r2
 8017b74:	d902      	bls.n	8017b7c <memmove+0x10>
 8017b76:	4284      	cmp	r4, r0
 8017b78:	4623      	mov	r3, r4
 8017b7a:	d807      	bhi.n	8017b8c <memmove+0x20>
 8017b7c:	1e43      	subs	r3, r0, #1
 8017b7e:	42a1      	cmp	r1, r4
 8017b80:	d008      	beq.n	8017b94 <memmove+0x28>
 8017b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017b8a:	e7f8      	b.n	8017b7e <memmove+0x12>
 8017b8c:	4402      	add	r2, r0
 8017b8e:	4601      	mov	r1, r0
 8017b90:	428a      	cmp	r2, r1
 8017b92:	d100      	bne.n	8017b96 <memmove+0x2a>
 8017b94:	bd10      	pop	{r4, pc}
 8017b96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017b9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017b9e:	e7f7      	b.n	8017b90 <memmove+0x24>

08017ba0 <memset>:
 8017ba0:	4402      	add	r2, r0
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	4293      	cmp	r3, r2
 8017ba6:	d100      	bne.n	8017baa <memset+0xa>
 8017ba8:	4770      	bx	lr
 8017baa:	f803 1b01 	strb.w	r1, [r3], #1
 8017bae:	e7f9      	b.n	8017ba4 <memset+0x4>

08017bb0 <_free_r>:
 8017bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017bb2:	2900      	cmp	r1, #0
 8017bb4:	d048      	beq.n	8017c48 <_free_r+0x98>
 8017bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017bba:	9001      	str	r0, [sp, #4]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	f1a1 0404 	sub.w	r4, r1, #4
 8017bc2:	bfb8      	it	lt
 8017bc4:	18e4      	addlt	r4, r4, r3
 8017bc6:	f001 fd09 	bl	80195dc <__malloc_lock>
 8017bca:	4a20      	ldr	r2, [pc, #128]	; (8017c4c <_free_r+0x9c>)
 8017bcc:	9801      	ldr	r0, [sp, #4]
 8017bce:	6813      	ldr	r3, [r2, #0]
 8017bd0:	4615      	mov	r5, r2
 8017bd2:	b933      	cbnz	r3, 8017be2 <_free_r+0x32>
 8017bd4:	6063      	str	r3, [r4, #4]
 8017bd6:	6014      	str	r4, [r2, #0]
 8017bd8:	b003      	add	sp, #12
 8017bda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017bde:	f001 bd03 	b.w	80195e8 <__malloc_unlock>
 8017be2:	42a3      	cmp	r3, r4
 8017be4:	d90b      	bls.n	8017bfe <_free_r+0x4e>
 8017be6:	6821      	ldr	r1, [r4, #0]
 8017be8:	1862      	adds	r2, r4, r1
 8017bea:	4293      	cmp	r3, r2
 8017bec:	bf04      	itt	eq
 8017bee:	681a      	ldreq	r2, [r3, #0]
 8017bf0:	685b      	ldreq	r3, [r3, #4]
 8017bf2:	6063      	str	r3, [r4, #4]
 8017bf4:	bf04      	itt	eq
 8017bf6:	1852      	addeq	r2, r2, r1
 8017bf8:	6022      	streq	r2, [r4, #0]
 8017bfa:	602c      	str	r4, [r5, #0]
 8017bfc:	e7ec      	b.n	8017bd8 <_free_r+0x28>
 8017bfe:	461a      	mov	r2, r3
 8017c00:	685b      	ldr	r3, [r3, #4]
 8017c02:	b10b      	cbz	r3, 8017c08 <_free_r+0x58>
 8017c04:	42a3      	cmp	r3, r4
 8017c06:	d9fa      	bls.n	8017bfe <_free_r+0x4e>
 8017c08:	6811      	ldr	r1, [r2, #0]
 8017c0a:	1855      	adds	r5, r2, r1
 8017c0c:	42a5      	cmp	r5, r4
 8017c0e:	d10b      	bne.n	8017c28 <_free_r+0x78>
 8017c10:	6824      	ldr	r4, [r4, #0]
 8017c12:	4421      	add	r1, r4
 8017c14:	1854      	adds	r4, r2, r1
 8017c16:	42a3      	cmp	r3, r4
 8017c18:	6011      	str	r1, [r2, #0]
 8017c1a:	d1dd      	bne.n	8017bd8 <_free_r+0x28>
 8017c1c:	681c      	ldr	r4, [r3, #0]
 8017c1e:	685b      	ldr	r3, [r3, #4]
 8017c20:	6053      	str	r3, [r2, #4]
 8017c22:	4421      	add	r1, r4
 8017c24:	6011      	str	r1, [r2, #0]
 8017c26:	e7d7      	b.n	8017bd8 <_free_r+0x28>
 8017c28:	d902      	bls.n	8017c30 <_free_r+0x80>
 8017c2a:	230c      	movs	r3, #12
 8017c2c:	6003      	str	r3, [r0, #0]
 8017c2e:	e7d3      	b.n	8017bd8 <_free_r+0x28>
 8017c30:	6825      	ldr	r5, [r4, #0]
 8017c32:	1961      	adds	r1, r4, r5
 8017c34:	428b      	cmp	r3, r1
 8017c36:	bf04      	itt	eq
 8017c38:	6819      	ldreq	r1, [r3, #0]
 8017c3a:	685b      	ldreq	r3, [r3, #4]
 8017c3c:	6063      	str	r3, [r4, #4]
 8017c3e:	bf04      	itt	eq
 8017c40:	1949      	addeq	r1, r1, r5
 8017c42:	6021      	streq	r1, [r4, #0]
 8017c44:	6054      	str	r4, [r2, #4]
 8017c46:	e7c7      	b.n	8017bd8 <_free_r+0x28>
 8017c48:	b003      	add	sp, #12
 8017c4a:	bd30      	pop	{r4, r5, pc}
 8017c4c:	2400b8e0 	.word	0x2400b8e0

08017c50 <_malloc_r>:
 8017c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c52:	1ccd      	adds	r5, r1, #3
 8017c54:	f025 0503 	bic.w	r5, r5, #3
 8017c58:	3508      	adds	r5, #8
 8017c5a:	2d0c      	cmp	r5, #12
 8017c5c:	bf38      	it	cc
 8017c5e:	250c      	movcc	r5, #12
 8017c60:	2d00      	cmp	r5, #0
 8017c62:	4606      	mov	r6, r0
 8017c64:	db01      	blt.n	8017c6a <_malloc_r+0x1a>
 8017c66:	42a9      	cmp	r1, r5
 8017c68:	d903      	bls.n	8017c72 <_malloc_r+0x22>
 8017c6a:	230c      	movs	r3, #12
 8017c6c:	6033      	str	r3, [r6, #0]
 8017c6e:	2000      	movs	r0, #0
 8017c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c72:	f001 fcb3 	bl	80195dc <__malloc_lock>
 8017c76:	4921      	ldr	r1, [pc, #132]	; (8017cfc <_malloc_r+0xac>)
 8017c78:	680a      	ldr	r2, [r1, #0]
 8017c7a:	4614      	mov	r4, r2
 8017c7c:	b99c      	cbnz	r4, 8017ca6 <_malloc_r+0x56>
 8017c7e:	4f20      	ldr	r7, [pc, #128]	; (8017d00 <_malloc_r+0xb0>)
 8017c80:	683b      	ldr	r3, [r7, #0]
 8017c82:	b923      	cbnz	r3, 8017c8e <_malloc_r+0x3e>
 8017c84:	4621      	mov	r1, r4
 8017c86:	4630      	mov	r0, r6
 8017c88:	f000 f8fe 	bl	8017e88 <_sbrk_r>
 8017c8c:	6038      	str	r0, [r7, #0]
 8017c8e:	4629      	mov	r1, r5
 8017c90:	4630      	mov	r0, r6
 8017c92:	f000 f8f9 	bl	8017e88 <_sbrk_r>
 8017c96:	1c43      	adds	r3, r0, #1
 8017c98:	d123      	bne.n	8017ce2 <_malloc_r+0x92>
 8017c9a:	230c      	movs	r3, #12
 8017c9c:	6033      	str	r3, [r6, #0]
 8017c9e:	4630      	mov	r0, r6
 8017ca0:	f001 fca2 	bl	80195e8 <__malloc_unlock>
 8017ca4:	e7e3      	b.n	8017c6e <_malloc_r+0x1e>
 8017ca6:	6823      	ldr	r3, [r4, #0]
 8017ca8:	1b5b      	subs	r3, r3, r5
 8017caa:	d417      	bmi.n	8017cdc <_malloc_r+0x8c>
 8017cac:	2b0b      	cmp	r3, #11
 8017cae:	d903      	bls.n	8017cb8 <_malloc_r+0x68>
 8017cb0:	6023      	str	r3, [r4, #0]
 8017cb2:	441c      	add	r4, r3
 8017cb4:	6025      	str	r5, [r4, #0]
 8017cb6:	e004      	b.n	8017cc2 <_malloc_r+0x72>
 8017cb8:	6863      	ldr	r3, [r4, #4]
 8017cba:	42a2      	cmp	r2, r4
 8017cbc:	bf0c      	ite	eq
 8017cbe:	600b      	streq	r3, [r1, #0]
 8017cc0:	6053      	strne	r3, [r2, #4]
 8017cc2:	4630      	mov	r0, r6
 8017cc4:	f001 fc90 	bl	80195e8 <__malloc_unlock>
 8017cc8:	f104 000b 	add.w	r0, r4, #11
 8017ccc:	1d23      	adds	r3, r4, #4
 8017cce:	f020 0007 	bic.w	r0, r0, #7
 8017cd2:	1ac2      	subs	r2, r0, r3
 8017cd4:	d0cc      	beq.n	8017c70 <_malloc_r+0x20>
 8017cd6:	1a1b      	subs	r3, r3, r0
 8017cd8:	50a3      	str	r3, [r4, r2]
 8017cda:	e7c9      	b.n	8017c70 <_malloc_r+0x20>
 8017cdc:	4622      	mov	r2, r4
 8017cde:	6864      	ldr	r4, [r4, #4]
 8017ce0:	e7cc      	b.n	8017c7c <_malloc_r+0x2c>
 8017ce2:	1cc4      	adds	r4, r0, #3
 8017ce4:	f024 0403 	bic.w	r4, r4, #3
 8017ce8:	42a0      	cmp	r0, r4
 8017cea:	d0e3      	beq.n	8017cb4 <_malloc_r+0x64>
 8017cec:	1a21      	subs	r1, r4, r0
 8017cee:	4630      	mov	r0, r6
 8017cf0:	f000 f8ca 	bl	8017e88 <_sbrk_r>
 8017cf4:	3001      	adds	r0, #1
 8017cf6:	d1dd      	bne.n	8017cb4 <_malloc_r+0x64>
 8017cf8:	e7cf      	b.n	8017c9a <_malloc_r+0x4a>
 8017cfa:	bf00      	nop
 8017cfc:	2400b8e0 	.word	0x2400b8e0
 8017d00:	2400b8e4 	.word	0x2400b8e4

08017d04 <iprintf>:
 8017d04:	b40f      	push	{r0, r1, r2, r3}
 8017d06:	4b0a      	ldr	r3, [pc, #40]	; (8017d30 <iprintf+0x2c>)
 8017d08:	b513      	push	{r0, r1, r4, lr}
 8017d0a:	681c      	ldr	r4, [r3, #0]
 8017d0c:	b124      	cbz	r4, 8017d18 <iprintf+0x14>
 8017d0e:	69a3      	ldr	r3, [r4, #24]
 8017d10:	b913      	cbnz	r3, 8017d18 <iprintf+0x14>
 8017d12:	4620      	mov	r0, r4
 8017d14:	f7ff fd4a 	bl	80177ac <__sinit>
 8017d18:	ab05      	add	r3, sp, #20
 8017d1a:	9a04      	ldr	r2, [sp, #16]
 8017d1c:	68a1      	ldr	r1, [r4, #8]
 8017d1e:	9301      	str	r3, [sp, #4]
 8017d20:	4620      	mov	r0, r4
 8017d22:	f002 fab7 	bl	801a294 <_vfiprintf_r>
 8017d26:	b002      	add	sp, #8
 8017d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d2c:	b004      	add	sp, #16
 8017d2e:	4770      	bx	lr
 8017d30:	24000060 	.word	0x24000060

08017d34 <rand>:
 8017d34:	4b17      	ldr	r3, [pc, #92]	; (8017d94 <rand+0x60>)
 8017d36:	b510      	push	{r4, lr}
 8017d38:	681c      	ldr	r4, [r3, #0]
 8017d3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017d3c:	b9b3      	cbnz	r3, 8017d6c <rand+0x38>
 8017d3e:	2018      	movs	r0, #24
 8017d40:	f7ff fee8 	bl	8017b14 <malloc>
 8017d44:	63a0      	str	r0, [r4, #56]	; 0x38
 8017d46:	b928      	cbnz	r0, 8017d54 <rand+0x20>
 8017d48:	4602      	mov	r2, r0
 8017d4a:	4b13      	ldr	r3, [pc, #76]	; (8017d98 <rand+0x64>)
 8017d4c:	4813      	ldr	r0, [pc, #76]	; (8017d9c <rand+0x68>)
 8017d4e:	214e      	movs	r1, #78	; 0x4e
 8017d50:	f000 fffa 	bl	8018d48 <__assert_func>
 8017d54:	4a12      	ldr	r2, [pc, #72]	; (8017da0 <rand+0x6c>)
 8017d56:	4b13      	ldr	r3, [pc, #76]	; (8017da4 <rand+0x70>)
 8017d58:	e9c0 2300 	strd	r2, r3, [r0]
 8017d5c:	4b12      	ldr	r3, [pc, #72]	; (8017da8 <rand+0x74>)
 8017d5e:	6083      	str	r3, [r0, #8]
 8017d60:	230b      	movs	r3, #11
 8017d62:	8183      	strh	r3, [r0, #12]
 8017d64:	2201      	movs	r2, #1
 8017d66:	2300      	movs	r3, #0
 8017d68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017d6c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017d6e:	480f      	ldr	r0, [pc, #60]	; (8017dac <rand+0x78>)
 8017d70:	690a      	ldr	r2, [r1, #16]
 8017d72:	694b      	ldr	r3, [r1, #20]
 8017d74:	4c0e      	ldr	r4, [pc, #56]	; (8017db0 <rand+0x7c>)
 8017d76:	4350      	muls	r0, r2
 8017d78:	fb04 0003 	mla	r0, r4, r3, r0
 8017d7c:	fba2 3404 	umull	r3, r4, r2, r4
 8017d80:	1c5a      	adds	r2, r3, #1
 8017d82:	4404      	add	r4, r0
 8017d84:	f144 0000 	adc.w	r0, r4, #0
 8017d88:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017d8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017d90:	bd10      	pop	{r4, pc}
 8017d92:	bf00      	nop
 8017d94:	24000060 	.word	0x24000060
 8017d98:	0801daa8 	.word	0x0801daa8
 8017d9c:	0801dabf 	.word	0x0801dabf
 8017da0:	abcd330e 	.word	0xabcd330e
 8017da4:	e66d1234 	.word	0xe66d1234
 8017da8:	0005deec 	.word	0x0005deec
 8017dac:	5851f42d 	.word	0x5851f42d
 8017db0:	4c957f2d 	.word	0x4c957f2d

08017db4 <cleanup_glue>:
 8017db4:	b538      	push	{r3, r4, r5, lr}
 8017db6:	460c      	mov	r4, r1
 8017db8:	6809      	ldr	r1, [r1, #0]
 8017dba:	4605      	mov	r5, r0
 8017dbc:	b109      	cbz	r1, 8017dc2 <cleanup_glue+0xe>
 8017dbe:	f7ff fff9 	bl	8017db4 <cleanup_glue>
 8017dc2:	4621      	mov	r1, r4
 8017dc4:	4628      	mov	r0, r5
 8017dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dca:	f7ff bef1 	b.w	8017bb0 <_free_r>
	...

08017dd0 <_reclaim_reent>:
 8017dd0:	4b2c      	ldr	r3, [pc, #176]	; (8017e84 <_reclaim_reent+0xb4>)
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	4283      	cmp	r3, r0
 8017dd6:	b570      	push	{r4, r5, r6, lr}
 8017dd8:	4604      	mov	r4, r0
 8017dda:	d051      	beq.n	8017e80 <_reclaim_reent+0xb0>
 8017ddc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017dde:	b143      	cbz	r3, 8017df2 <_reclaim_reent+0x22>
 8017de0:	68db      	ldr	r3, [r3, #12]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d14a      	bne.n	8017e7c <_reclaim_reent+0xac>
 8017de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017de8:	6819      	ldr	r1, [r3, #0]
 8017dea:	b111      	cbz	r1, 8017df2 <_reclaim_reent+0x22>
 8017dec:	4620      	mov	r0, r4
 8017dee:	f7ff fedf 	bl	8017bb0 <_free_r>
 8017df2:	6961      	ldr	r1, [r4, #20]
 8017df4:	b111      	cbz	r1, 8017dfc <_reclaim_reent+0x2c>
 8017df6:	4620      	mov	r0, r4
 8017df8:	f7ff feda 	bl	8017bb0 <_free_r>
 8017dfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017dfe:	b111      	cbz	r1, 8017e06 <_reclaim_reent+0x36>
 8017e00:	4620      	mov	r0, r4
 8017e02:	f7ff fed5 	bl	8017bb0 <_free_r>
 8017e06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017e08:	b111      	cbz	r1, 8017e10 <_reclaim_reent+0x40>
 8017e0a:	4620      	mov	r0, r4
 8017e0c:	f7ff fed0 	bl	8017bb0 <_free_r>
 8017e10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017e12:	b111      	cbz	r1, 8017e1a <_reclaim_reent+0x4a>
 8017e14:	4620      	mov	r0, r4
 8017e16:	f7ff fecb 	bl	8017bb0 <_free_r>
 8017e1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017e1c:	b111      	cbz	r1, 8017e24 <_reclaim_reent+0x54>
 8017e1e:	4620      	mov	r0, r4
 8017e20:	f7ff fec6 	bl	8017bb0 <_free_r>
 8017e24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017e26:	b111      	cbz	r1, 8017e2e <_reclaim_reent+0x5e>
 8017e28:	4620      	mov	r0, r4
 8017e2a:	f7ff fec1 	bl	8017bb0 <_free_r>
 8017e2e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017e30:	b111      	cbz	r1, 8017e38 <_reclaim_reent+0x68>
 8017e32:	4620      	mov	r0, r4
 8017e34:	f7ff febc 	bl	8017bb0 <_free_r>
 8017e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017e3a:	b111      	cbz	r1, 8017e42 <_reclaim_reent+0x72>
 8017e3c:	4620      	mov	r0, r4
 8017e3e:	f7ff feb7 	bl	8017bb0 <_free_r>
 8017e42:	69a3      	ldr	r3, [r4, #24]
 8017e44:	b1e3      	cbz	r3, 8017e80 <_reclaim_reent+0xb0>
 8017e46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017e48:	4620      	mov	r0, r4
 8017e4a:	4798      	blx	r3
 8017e4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017e4e:	b1b9      	cbz	r1, 8017e80 <_reclaim_reent+0xb0>
 8017e50:	4620      	mov	r0, r4
 8017e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e56:	f7ff bfad 	b.w	8017db4 <cleanup_glue>
 8017e5a:	5949      	ldr	r1, [r1, r5]
 8017e5c:	b941      	cbnz	r1, 8017e70 <_reclaim_reent+0xa0>
 8017e5e:	3504      	adds	r5, #4
 8017e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e62:	2d80      	cmp	r5, #128	; 0x80
 8017e64:	68d9      	ldr	r1, [r3, #12]
 8017e66:	d1f8      	bne.n	8017e5a <_reclaim_reent+0x8a>
 8017e68:	4620      	mov	r0, r4
 8017e6a:	f7ff fea1 	bl	8017bb0 <_free_r>
 8017e6e:	e7ba      	b.n	8017de6 <_reclaim_reent+0x16>
 8017e70:	680e      	ldr	r6, [r1, #0]
 8017e72:	4620      	mov	r0, r4
 8017e74:	f7ff fe9c 	bl	8017bb0 <_free_r>
 8017e78:	4631      	mov	r1, r6
 8017e7a:	e7ef      	b.n	8017e5c <_reclaim_reent+0x8c>
 8017e7c:	2500      	movs	r5, #0
 8017e7e:	e7ef      	b.n	8017e60 <_reclaim_reent+0x90>
 8017e80:	bd70      	pop	{r4, r5, r6, pc}
 8017e82:	bf00      	nop
 8017e84:	24000060 	.word	0x24000060

08017e88 <_sbrk_r>:
 8017e88:	b538      	push	{r3, r4, r5, lr}
 8017e8a:	4d06      	ldr	r5, [pc, #24]	; (8017ea4 <_sbrk_r+0x1c>)
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	4604      	mov	r4, r0
 8017e90:	4608      	mov	r0, r1
 8017e92:	602b      	str	r3, [r5, #0]
 8017e94:	f7e9 f8b0 	bl	8000ff8 <_sbrk>
 8017e98:	1c43      	adds	r3, r0, #1
 8017e9a:	d102      	bne.n	8017ea2 <_sbrk_r+0x1a>
 8017e9c:	682b      	ldr	r3, [r5, #0]
 8017e9e:	b103      	cbz	r3, 8017ea2 <_sbrk_r+0x1a>
 8017ea0:	6023      	str	r3, [r4, #0]
 8017ea2:	bd38      	pop	{r3, r4, r5, pc}
 8017ea4:	2400ee28 	.word	0x2400ee28

08017ea8 <siprintf>:
 8017ea8:	b40e      	push	{r1, r2, r3}
 8017eaa:	b500      	push	{lr}
 8017eac:	b09c      	sub	sp, #112	; 0x70
 8017eae:	ab1d      	add	r3, sp, #116	; 0x74
 8017eb0:	9002      	str	r0, [sp, #8]
 8017eb2:	9006      	str	r0, [sp, #24]
 8017eb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017eb8:	4809      	ldr	r0, [pc, #36]	; (8017ee0 <siprintf+0x38>)
 8017eba:	9107      	str	r1, [sp, #28]
 8017ebc:	9104      	str	r1, [sp, #16]
 8017ebe:	4909      	ldr	r1, [pc, #36]	; (8017ee4 <siprintf+0x3c>)
 8017ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ec4:	9105      	str	r1, [sp, #20]
 8017ec6:	6800      	ldr	r0, [r0, #0]
 8017ec8:	9301      	str	r3, [sp, #4]
 8017eca:	a902      	add	r1, sp, #8
 8017ecc:	f002 f8b8 	bl	801a040 <_svfiprintf_r>
 8017ed0:	9b02      	ldr	r3, [sp, #8]
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	701a      	strb	r2, [r3, #0]
 8017ed6:	b01c      	add	sp, #112	; 0x70
 8017ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017edc:	b003      	add	sp, #12
 8017ede:	4770      	bx	lr
 8017ee0:	24000060 	.word	0x24000060
 8017ee4:	ffff0208 	.word	0xffff0208

08017ee8 <__sread>:
 8017ee8:	b510      	push	{r4, lr}
 8017eea:	460c      	mov	r4, r1
 8017eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ef0:	f002 fc94 	bl	801a81c <_read_r>
 8017ef4:	2800      	cmp	r0, #0
 8017ef6:	bfab      	itete	ge
 8017ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017efa:	89a3      	ldrhlt	r3, [r4, #12]
 8017efc:	181b      	addge	r3, r3, r0
 8017efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017f02:	bfac      	ite	ge
 8017f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8017f06:	81a3      	strhlt	r3, [r4, #12]
 8017f08:	bd10      	pop	{r4, pc}

08017f0a <__swrite>:
 8017f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f0e:	461f      	mov	r7, r3
 8017f10:	898b      	ldrh	r3, [r1, #12]
 8017f12:	05db      	lsls	r3, r3, #23
 8017f14:	4605      	mov	r5, r0
 8017f16:	460c      	mov	r4, r1
 8017f18:	4616      	mov	r6, r2
 8017f1a:	d505      	bpl.n	8017f28 <__swrite+0x1e>
 8017f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f20:	2302      	movs	r3, #2
 8017f22:	2200      	movs	r2, #0
 8017f24:	f001 fb36 	bl	8019594 <_lseek_r>
 8017f28:	89a3      	ldrh	r3, [r4, #12]
 8017f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017f32:	81a3      	strh	r3, [r4, #12]
 8017f34:	4632      	mov	r2, r6
 8017f36:	463b      	mov	r3, r7
 8017f38:	4628      	mov	r0, r5
 8017f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f3e:	f000 be83 	b.w	8018c48 <_write_r>

08017f42 <__sseek>:
 8017f42:	b510      	push	{r4, lr}
 8017f44:	460c      	mov	r4, r1
 8017f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f4a:	f001 fb23 	bl	8019594 <_lseek_r>
 8017f4e:	1c43      	adds	r3, r0, #1
 8017f50:	89a3      	ldrh	r3, [r4, #12]
 8017f52:	bf15      	itete	ne
 8017f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8017f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017f5e:	81a3      	strheq	r3, [r4, #12]
 8017f60:	bf18      	it	ne
 8017f62:	81a3      	strhne	r3, [r4, #12]
 8017f64:	bd10      	pop	{r4, pc}

08017f66 <__sclose>:
 8017f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f6a:	f000 bf0b 	b.w	8018d84 <_close_r>

08017f6e <strchr>:
 8017f6e:	b2c9      	uxtb	r1, r1
 8017f70:	4603      	mov	r3, r0
 8017f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f76:	b11a      	cbz	r2, 8017f80 <strchr+0x12>
 8017f78:	428a      	cmp	r2, r1
 8017f7a:	d1f9      	bne.n	8017f70 <strchr+0x2>
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	4770      	bx	lr
 8017f80:	2900      	cmp	r1, #0
 8017f82:	bf18      	it	ne
 8017f84:	2300      	movne	r3, #0
 8017f86:	e7f9      	b.n	8017f7c <strchr+0xe>

08017f88 <strncmp>:
 8017f88:	b510      	push	{r4, lr}
 8017f8a:	b16a      	cbz	r2, 8017fa8 <strncmp+0x20>
 8017f8c:	3901      	subs	r1, #1
 8017f8e:	1884      	adds	r4, r0, r2
 8017f90:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017f94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017f98:	4293      	cmp	r3, r2
 8017f9a:	d103      	bne.n	8017fa4 <strncmp+0x1c>
 8017f9c:	42a0      	cmp	r0, r4
 8017f9e:	d001      	beq.n	8017fa4 <strncmp+0x1c>
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d1f5      	bne.n	8017f90 <strncmp+0x8>
 8017fa4:	1a98      	subs	r0, r3, r2
 8017fa6:	bd10      	pop	{r4, pc}
 8017fa8:	4610      	mov	r0, r2
 8017faa:	e7fc      	b.n	8017fa6 <strncmp+0x1e>

08017fac <sulp>:
 8017fac:	b570      	push	{r4, r5, r6, lr}
 8017fae:	4604      	mov	r4, r0
 8017fb0:	460d      	mov	r5, r1
 8017fb2:	4616      	mov	r6, r2
 8017fb4:	ec45 4b10 	vmov	d0, r4, r5
 8017fb8:	f001 fe88 	bl	8019ccc <__ulp>
 8017fbc:	b17e      	cbz	r6, 8017fde <sulp+0x32>
 8017fbe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017fc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	dd09      	ble.n	8017fde <sulp+0x32>
 8017fca:	051b      	lsls	r3, r3, #20
 8017fcc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8017fd0:	2000      	movs	r0, #0
 8017fd2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8017fd6:	ec41 0b17 	vmov	d7, r0, r1
 8017fda:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017fde:	bd70      	pop	{r4, r5, r6, pc}

08017fe0 <_strtod_l>:
 8017fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fe4:	ed2d 8b0c 	vpush	{d8-d13}
 8017fe8:	b09d      	sub	sp, #116	; 0x74
 8017fea:	461f      	mov	r7, r3
 8017fec:	2300      	movs	r3, #0
 8017fee:	9318      	str	r3, [sp, #96]	; 0x60
 8017ff0:	4ba6      	ldr	r3, [pc, #664]	; (801828c <_strtod_l+0x2ac>)
 8017ff2:	9213      	str	r2, [sp, #76]	; 0x4c
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	9308      	str	r3, [sp, #32]
 8017ff8:	4604      	mov	r4, r0
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	468a      	mov	sl, r1
 8017ffe:	f7e8 f979 	bl	80002f4 <strlen>
 8018002:	f04f 0800 	mov.w	r8, #0
 8018006:	4605      	mov	r5, r0
 8018008:	f04f 0900 	mov.w	r9, #0
 801800c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8018010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018012:	781a      	ldrb	r2, [r3, #0]
 8018014:	2a2b      	cmp	r2, #43	; 0x2b
 8018016:	d04d      	beq.n	80180b4 <_strtod_l+0xd4>
 8018018:	d83a      	bhi.n	8018090 <_strtod_l+0xb0>
 801801a:	2a0d      	cmp	r2, #13
 801801c:	d833      	bhi.n	8018086 <_strtod_l+0xa6>
 801801e:	2a08      	cmp	r2, #8
 8018020:	d833      	bhi.n	801808a <_strtod_l+0xaa>
 8018022:	2a00      	cmp	r2, #0
 8018024:	d03d      	beq.n	80180a2 <_strtod_l+0xc2>
 8018026:	2300      	movs	r3, #0
 8018028:	930b      	str	r3, [sp, #44]	; 0x2c
 801802a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801802c:	7833      	ldrb	r3, [r6, #0]
 801802e:	2b30      	cmp	r3, #48	; 0x30
 8018030:	f040 80b6 	bne.w	80181a0 <_strtod_l+0x1c0>
 8018034:	7873      	ldrb	r3, [r6, #1]
 8018036:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801803a:	2b58      	cmp	r3, #88	; 0x58
 801803c:	d16d      	bne.n	801811a <_strtod_l+0x13a>
 801803e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018040:	9301      	str	r3, [sp, #4]
 8018042:	ab18      	add	r3, sp, #96	; 0x60
 8018044:	9702      	str	r7, [sp, #8]
 8018046:	9300      	str	r3, [sp, #0]
 8018048:	4a91      	ldr	r2, [pc, #580]	; (8018290 <_strtod_l+0x2b0>)
 801804a:	ab19      	add	r3, sp, #100	; 0x64
 801804c:	a917      	add	r1, sp, #92	; 0x5c
 801804e:	4620      	mov	r0, r4
 8018050:	f000 ff3a 	bl	8018ec8 <__gethex>
 8018054:	f010 0507 	ands.w	r5, r0, #7
 8018058:	4607      	mov	r7, r0
 801805a:	d005      	beq.n	8018068 <_strtod_l+0x88>
 801805c:	2d06      	cmp	r5, #6
 801805e:	d12b      	bne.n	80180b8 <_strtod_l+0xd8>
 8018060:	3601      	adds	r6, #1
 8018062:	2300      	movs	r3, #0
 8018064:	9617      	str	r6, [sp, #92]	; 0x5c
 8018066:	930b      	str	r3, [sp, #44]	; 0x2c
 8018068:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801806a:	2b00      	cmp	r3, #0
 801806c:	f040 856e 	bne.w	8018b4c <_strtod_l+0xb6c>
 8018070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018072:	b1e3      	cbz	r3, 80180ae <_strtod_l+0xce>
 8018074:	ec49 8b17 	vmov	d7, r8, r9
 8018078:	eeb1 0b47 	vneg.f64	d0, d7
 801807c:	b01d      	add	sp, #116	; 0x74
 801807e:	ecbd 8b0c 	vpop	{d8-d13}
 8018082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018086:	2a20      	cmp	r2, #32
 8018088:	d1cd      	bne.n	8018026 <_strtod_l+0x46>
 801808a:	3301      	adds	r3, #1
 801808c:	9317      	str	r3, [sp, #92]	; 0x5c
 801808e:	e7bf      	b.n	8018010 <_strtod_l+0x30>
 8018090:	2a2d      	cmp	r2, #45	; 0x2d
 8018092:	d1c8      	bne.n	8018026 <_strtod_l+0x46>
 8018094:	2201      	movs	r2, #1
 8018096:	920b      	str	r2, [sp, #44]	; 0x2c
 8018098:	1c5a      	adds	r2, r3, #1
 801809a:	9217      	str	r2, [sp, #92]	; 0x5c
 801809c:	785b      	ldrb	r3, [r3, #1]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d1c3      	bne.n	801802a <_strtod_l+0x4a>
 80180a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80180a4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	f040 854d 	bne.w	8018b48 <_strtod_l+0xb68>
 80180ae:	ec49 8b10 	vmov	d0, r8, r9
 80180b2:	e7e3      	b.n	801807c <_strtod_l+0x9c>
 80180b4:	2200      	movs	r2, #0
 80180b6:	e7ee      	b.n	8018096 <_strtod_l+0xb6>
 80180b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80180ba:	b13a      	cbz	r2, 80180cc <_strtod_l+0xec>
 80180bc:	2135      	movs	r1, #53	; 0x35
 80180be:	a81a      	add	r0, sp, #104	; 0x68
 80180c0:	f001 ff10 	bl	8019ee4 <__copybits>
 80180c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80180c6:	4620      	mov	r0, r4
 80180c8:	f001 fad4 	bl	8019674 <_Bfree>
 80180cc:	3d01      	subs	r5, #1
 80180ce:	2d05      	cmp	r5, #5
 80180d0:	d807      	bhi.n	80180e2 <_strtod_l+0x102>
 80180d2:	e8df f005 	tbb	[pc, r5]
 80180d6:	0b0e      	.short	0x0b0e
 80180d8:	030e1d18 	.word	0x030e1d18
 80180dc:	f04f 0900 	mov.w	r9, #0
 80180e0:	46c8      	mov	r8, r9
 80180e2:	073b      	lsls	r3, r7, #28
 80180e4:	d5c0      	bpl.n	8018068 <_strtod_l+0x88>
 80180e6:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80180ea:	e7bd      	b.n	8018068 <_strtod_l+0x88>
 80180ec:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80180f0:	e7f7      	b.n	80180e2 <_strtod_l+0x102>
 80180f2:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80180f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80180f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80180fc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018100:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8018104:	e7ed      	b.n	80180e2 <_strtod_l+0x102>
 8018106:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8018294 <_strtod_l+0x2b4>
 801810a:	f04f 0800 	mov.w	r8, #0
 801810e:	e7e8      	b.n	80180e2 <_strtod_l+0x102>
 8018110:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8018114:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8018118:	e7e3      	b.n	80180e2 <_strtod_l+0x102>
 801811a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801811c:	1c5a      	adds	r2, r3, #1
 801811e:	9217      	str	r2, [sp, #92]	; 0x5c
 8018120:	785b      	ldrb	r3, [r3, #1]
 8018122:	2b30      	cmp	r3, #48	; 0x30
 8018124:	d0f9      	beq.n	801811a <_strtod_l+0x13a>
 8018126:	2b00      	cmp	r3, #0
 8018128:	d09e      	beq.n	8018068 <_strtod_l+0x88>
 801812a:	2301      	movs	r3, #1
 801812c:	9306      	str	r3, [sp, #24]
 801812e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018130:	930c      	str	r3, [sp, #48]	; 0x30
 8018132:	2300      	movs	r3, #0
 8018134:	9304      	str	r3, [sp, #16]
 8018136:	930a      	str	r3, [sp, #40]	; 0x28
 8018138:	461e      	mov	r6, r3
 801813a:	220a      	movs	r2, #10
 801813c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801813e:	f890 b000 	ldrb.w	fp, [r0]
 8018142:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8018146:	b2d9      	uxtb	r1, r3
 8018148:	2909      	cmp	r1, #9
 801814a:	d92b      	bls.n	80181a4 <_strtod_l+0x1c4>
 801814c:	9908      	ldr	r1, [sp, #32]
 801814e:	462a      	mov	r2, r5
 8018150:	f7ff ff1a 	bl	8017f88 <strncmp>
 8018154:	2800      	cmp	r0, #0
 8018156:	d035      	beq.n	80181c4 <_strtod_l+0x1e4>
 8018158:	2000      	movs	r0, #0
 801815a:	465a      	mov	r2, fp
 801815c:	4633      	mov	r3, r6
 801815e:	4683      	mov	fp, r0
 8018160:	4601      	mov	r1, r0
 8018162:	2a65      	cmp	r2, #101	; 0x65
 8018164:	d001      	beq.n	801816a <_strtod_l+0x18a>
 8018166:	2a45      	cmp	r2, #69	; 0x45
 8018168:	d118      	bne.n	801819c <_strtod_l+0x1bc>
 801816a:	b91b      	cbnz	r3, 8018174 <_strtod_l+0x194>
 801816c:	9b06      	ldr	r3, [sp, #24]
 801816e:	4303      	orrs	r3, r0
 8018170:	d097      	beq.n	80180a2 <_strtod_l+0xc2>
 8018172:	2300      	movs	r3, #0
 8018174:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8018178:	f10a 0201 	add.w	r2, sl, #1
 801817c:	9217      	str	r2, [sp, #92]	; 0x5c
 801817e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8018182:	2a2b      	cmp	r2, #43	; 0x2b
 8018184:	d077      	beq.n	8018276 <_strtod_l+0x296>
 8018186:	2a2d      	cmp	r2, #45	; 0x2d
 8018188:	d07d      	beq.n	8018286 <_strtod_l+0x2a6>
 801818a:	f04f 0e00 	mov.w	lr, #0
 801818e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8018192:	2d09      	cmp	r5, #9
 8018194:	f240 8084 	bls.w	80182a0 <_strtod_l+0x2c0>
 8018198:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801819c:	2500      	movs	r5, #0
 801819e:	e09f      	b.n	80182e0 <_strtod_l+0x300>
 80181a0:	2300      	movs	r3, #0
 80181a2:	e7c3      	b.n	801812c <_strtod_l+0x14c>
 80181a4:	2e08      	cmp	r6, #8
 80181a6:	bfd5      	itete	le
 80181a8:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80181aa:	9904      	ldrgt	r1, [sp, #16]
 80181ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80181b0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80181b4:	f100 0001 	add.w	r0, r0, #1
 80181b8:	bfd4      	ite	le
 80181ba:	930a      	strle	r3, [sp, #40]	; 0x28
 80181bc:	9304      	strgt	r3, [sp, #16]
 80181be:	3601      	adds	r6, #1
 80181c0:	9017      	str	r0, [sp, #92]	; 0x5c
 80181c2:	e7bb      	b.n	801813c <_strtod_l+0x15c>
 80181c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80181c6:	195a      	adds	r2, r3, r5
 80181c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80181ca:	5d5a      	ldrb	r2, [r3, r5]
 80181cc:	b3ae      	cbz	r6, 801823a <_strtod_l+0x25a>
 80181ce:	4683      	mov	fp, r0
 80181d0:	4633      	mov	r3, r6
 80181d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80181d6:	2909      	cmp	r1, #9
 80181d8:	d912      	bls.n	8018200 <_strtod_l+0x220>
 80181da:	2101      	movs	r1, #1
 80181dc:	e7c1      	b.n	8018162 <_strtod_l+0x182>
 80181de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80181e0:	1c5a      	adds	r2, r3, #1
 80181e2:	9217      	str	r2, [sp, #92]	; 0x5c
 80181e4:	785a      	ldrb	r2, [r3, #1]
 80181e6:	3001      	adds	r0, #1
 80181e8:	2a30      	cmp	r2, #48	; 0x30
 80181ea:	d0f8      	beq.n	80181de <_strtod_l+0x1fe>
 80181ec:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80181f0:	2b08      	cmp	r3, #8
 80181f2:	f200 84b0 	bhi.w	8018b56 <_strtod_l+0xb76>
 80181f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80181f8:	930c      	str	r3, [sp, #48]	; 0x30
 80181fa:	4683      	mov	fp, r0
 80181fc:	2000      	movs	r0, #0
 80181fe:	4603      	mov	r3, r0
 8018200:	3a30      	subs	r2, #48	; 0x30
 8018202:	f100 0101 	add.w	r1, r0, #1
 8018206:	d012      	beq.n	801822e <_strtod_l+0x24e>
 8018208:	448b      	add	fp, r1
 801820a:	eb00 0c03 	add.w	ip, r0, r3
 801820e:	4619      	mov	r1, r3
 8018210:	250a      	movs	r5, #10
 8018212:	4561      	cmp	r1, ip
 8018214:	d113      	bne.n	801823e <_strtod_l+0x25e>
 8018216:	1819      	adds	r1, r3, r0
 8018218:	2908      	cmp	r1, #8
 801821a:	f103 0301 	add.w	r3, r3, #1
 801821e:	4403      	add	r3, r0
 8018220:	dc1d      	bgt.n	801825e <_strtod_l+0x27e>
 8018222:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018224:	210a      	movs	r1, #10
 8018226:	fb01 2200 	mla	r2, r1, r0, r2
 801822a:	920a      	str	r2, [sp, #40]	; 0x28
 801822c:	2100      	movs	r1, #0
 801822e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018230:	1c50      	adds	r0, r2, #1
 8018232:	9017      	str	r0, [sp, #92]	; 0x5c
 8018234:	7852      	ldrb	r2, [r2, #1]
 8018236:	4608      	mov	r0, r1
 8018238:	e7cb      	b.n	80181d2 <_strtod_l+0x1f2>
 801823a:	4630      	mov	r0, r6
 801823c:	e7d4      	b.n	80181e8 <_strtod_l+0x208>
 801823e:	2908      	cmp	r1, #8
 8018240:	dc04      	bgt.n	801824c <_strtod_l+0x26c>
 8018242:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018244:	436f      	muls	r7, r5
 8018246:	970a      	str	r7, [sp, #40]	; 0x28
 8018248:	3101      	adds	r1, #1
 801824a:	e7e2      	b.n	8018212 <_strtod_l+0x232>
 801824c:	f101 0e01 	add.w	lr, r1, #1
 8018250:	f1be 0f10 	cmp.w	lr, #16
 8018254:	bfde      	ittt	le
 8018256:	9f04      	ldrle	r7, [sp, #16]
 8018258:	436f      	mulle	r7, r5
 801825a:	9704      	strle	r7, [sp, #16]
 801825c:	e7f4      	b.n	8018248 <_strtod_l+0x268>
 801825e:	2b10      	cmp	r3, #16
 8018260:	bfdf      	itttt	le
 8018262:	9804      	ldrle	r0, [sp, #16]
 8018264:	210a      	movle	r1, #10
 8018266:	fb01 2200 	mlale	r2, r1, r0, r2
 801826a:	9204      	strle	r2, [sp, #16]
 801826c:	e7de      	b.n	801822c <_strtod_l+0x24c>
 801826e:	f04f 0b00 	mov.w	fp, #0
 8018272:	2101      	movs	r1, #1
 8018274:	e77a      	b.n	801816c <_strtod_l+0x18c>
 8018276:	f04f 0e00 	mov.w	lr, #0
 801827a:	f10a 0202 	add.w	r2, sl, #2
 801827e:	9217      	str	r2, [sp, #92]	; 0x5c
 8018280:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8018284:	e783      	b.n	801818e <_strtod_l+0x1ae>
 8018286:	f04f 0e01 	mov.w	lr, #1
 801828a:	e7f6      	b.n	801827a <_strtod_l+0x29a>
 801828c:	0801dc38 	.word	0x0801dc38
 8018290:	0801db2c 	.word	0x0801db2c
 8018294:	7ff00000 	.word	0x7ff00000
 8018298:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801829a:	1c55      	adds	r5, r2, #1
 801829c:	9517      	str	r5, [sp, #92]	; 0x5c
 801829e:	7852      	ldrb	r2, [r2, #1]
 80182a0:	2a30      	cmp	r2, #48	; 0x30
 80182a2:	d0f9      	beq.n	8018298 <_strtod_l+0x2b8>
 80182a4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80182a8:	2d08      	cmp	r5, #8
 80182aa:	f63f af77 	bhi.w	801819c <_strtod_l+0x1bc>
 80182ae:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80182b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80182b4:	9208      	str	r2, [sp, #32]
 80182b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80182b8:	1c55      	adds	r5, r2, #1
 80182ba:	9517      	str	r5, [sp, #92]	; 0x5c
 80182bc:	7852      	ldrb	r2, [r2, #1]
 80182be:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80182c2:	2f09      	cmp	r7, #9
 80182c4:	d937      	bls.n	8018336 <_strtod_l+0x356>
 80182c6:	9f08      	ldr	r7, [sp, #32]
 80182c8:	1bed      	subs	r5, r5, r7
 80182ca:	2d08      	cmp	r5, #8
 80182cc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80182d0:	dc02      	bgt.n	80182d8 <_strtod_l+0x2f8>
 80182d2:	4565      	cmp	r5, ip
 80182d4:	bfa8      	it	ge
 80182d6:	4665      	movge	r5, ip
 80182d8:	f1be 0f00 	cmp.w	lr, #0
 80182dc:	d000      	beq.n	80182e0 <_strtod_l+0x300>
 80182de:	426d      	negs	r5, r5
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d14f      	bne.n	8018384 <_strtod_l+0x3a4>
 80182e4:	9b06      	ldr	r3, [sp, #24]
 80182e6:	4303      	orrs	r3, r0
 80182e8:	f47f aebe 	bne.w	8018068 <_strtod_l+0x88>
 80182ec:	2900      	cmp	r1, #0
 80182ee:	f47f aed8 	bne.w	80180a2 <_strtod_l+0xc2>
 80182f2:	2a69      	cmp	r2, #105	; 0x69
 80182f4:	d027      	beq.n	8018346 <_strtod_l+0x366>
 80182f6:	dc24      	bgt.n	8018342 <_strtod_l+0x362>
 80182f8:	2a49      	cmp	r2, #73	; 0x49
 80182fa:	d024      	beq.n	8018346 <_strtod_l+0x366>
 80182fc:	2a4e      	cmp	r2, #78	; 0x4e
 80182fe:	f47f aed0 	bne.w	80180a2 <_strtod_l+0xc2>
 8018302:	499b      	ldr	r1, [pc, #620]	; (8018570 <_strtod_l+0x590>)
 8018304:	a817      	add	r0, sp, #92	; 0x5c
 8018306:	f001 f837 	bl	8019378 <__match>
 801830a:	2800      	cmp	r0, #0
 801830c:	f43f aec9 	beq.w	80180a2 <_strtod_l+0xc2>
 8018310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018312:	781b      	ldrb	r3, [r3, #0]
 8018314:	2b28      	cmp	r3, #40	; 0x28
 8018316:	d12d      	bne.n	8018374 <_strtod_l+0x394>
 8018318:	4996      	ldr	r1, [pc, #600]	; (8018574 <_strtod_l+0x594>)
 801831a:	aa1a      	add	r2, sp, #104	; 0x68
 801831c:	a817      	add	r0, sp, #92	; 0x5c
 801831e:	f001 f83f 	bl	80193a0 <__hexnan>
 8018322:	2805      	cmp	r0, #5
 8018324:	d126      	bne.n	8018374 <_strtod_l+0x394>
 8018326:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018328:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801832c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8018330:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8018334:	e698      	b.n	8018068 <_strtod_l+0x88>
 8018336:	250a      	movs	r5, #10
 8018338:	fb05 250c 	mla	r5, r5, ip, r2
 801833c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8018340:	e7b9      	b.n	80182b6 <_strtod_l+0x2d6>
 8018342:	2a6e      	cmp	r2, #110	; 0x6e
 8018344:	e7db      	b.n	80182fe <_strtod_l+0x31e>
 8018346:	498c      	ldr	r1, [pc, #560]	; (8018578 <_strtod_l+0x598>)
 8018348:	a817      	add	r0, sp, #92	; 0x5c
 801834a:	f001 f815 	bl	8019378 <__match>
 801834e:	2800      	cmp	r0, #0
 8018350:	f43f aea7 	beq.w	80180a2 <_strtod_l+0xc2>
 8018354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018356:	4989      	ldr	r1, [pc, #548]	; (801857c <_strtod_l+0x59c>)
 8018358:	3b01      	subs	r3, #1
 801835a:	a817      	add	r0, sp, #92	; 0x5c
 801835c:	9317      	str	r3, [sp, #92]	; 0x5c
 801835e:	f001 f80b 	bl	8019378 <__match>
 8018362:	b910      	cbnz	r0, 801836a <_strtod_l+0x38a>
 8018364:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018366:	3301      	adds	r3, #1
 8018368:	9317      	str	r3, [sp, #92]	; 0x5c
 801836a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8018590 <_strtod_l+0x5b0>
 801836e:	f04f 0800 	mov.w	r8, #0
 8018372:	e679      	b.n	8018068 <_strtod_l+0x88>
 8018374:	4882      	ldr	r0, [pc, #520]	; (8018580 <_strtod_l+0x5a0>)
 8018376:	f002 fa63 	bl	801a840 <nan>
 801837a:	ed8d 0b04 	vstr	d0, [sp, #16]
 801837e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018382:	e671      	b.n	8018068 <_strtod_l+0x88>
 8018384:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8018388:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801838c:	eba5 020b 	sub.w	r2, r5, fp
 8018390:	2e00      	cmp	r6, #0
 8018392:	bf08      	it	eq
 8018394:	461e      	moveq	r6, r3
 8018396:	2b10      	cmp	r3, #16
 8018398:	ed8d 7b08 	vstr	d7, [sp, #32]
 801839c:	9206      	str	r2, [sp, #24]
 801839e:	461a      	mov	r2, r3
 80183a0:	bfa8      	it	ge
 80183a2:	2210      	movge	r2, #16
 80183a4:	2b09      	cmp	r3, #9
 80183a6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80183aa:	dd0e      	ble.n	80183ca <_strtod_l+0x3ea>
 80183ac:	4975      	ldr	r1, [pc, #468]	; (8018584 <_strtod_l+0x5a4>)
 80183ae:	eddd 7a04 	vldr	s15, [sp, #16]
 80183b2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80183b6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80183ba:	ed9d 5b08 	vldr	d5, [sp, #32]
 80183be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80183c2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80183c6:	ec59 8b17 	vmov	r8, r9, d7
 80183ca:	2b0f      	cmp	r3, #15
 80183cc:	dc37      	bgt.n	801843e <_strtod_l+0x45e>
 80183ce:	9906      	ldr	r1, [sp, #24]
 80183d0:	2900      	cmp	r1, #0
 80183d2:	f43f ae49 	beq.w	8018068 <_strtod_l+0x88>
 80183d6:	dd23      	ble.n	8018420 <_strtod_l+0x440>
 80183d8:	2916      	cmp	r1, #22
 80183da:	dc0b      	bgt.n	80183f4 <_strtod_l+0x414>
 80183dc:	4b69      	ldr	r3, [pc, #420]	; (8018584 <_strtod_l+0x5a4>)
 80183de:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80183e2:	ed93 7b00 	vldr	d7, [r3]
 80183e6:	ec49 8b16 	vmov	d6, r8, r9
 80183ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80183ee:	ec59 8b17 	vmov	r8, r9, d7
 80183f2:	e639      	b.n	8018068 <_strtod_l+0x88>
 80183f4:	9806      	ldr	r0, [sp, #24]
 80183f6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80183fa:	4281      	cmp	r1, r0
 80183fc:	db1f      	blt.n	801843e <_strtod_l+0x45e>
 80183fe:	4a61      	ldr	r2, [pc, #388]	; (8018584 <_strtod_l+0x5a4>)
 8018400:	f1c3 030f 	rsb	r3, r3, #15
 8018404:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8018408:	ed91 7b00 	vldr	d7, [r1]
 801840c:	ec49 8b16 	vmov	d6, r8, r9
 8018410:	1ac3      	subs	r3, r0, r3
 8018412:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018416:	ee27 7b06 	vmul.f64	d7, d7, d6
 801841a:	ed92 6b00 	vldr	d6, [r2]
 801841e:	e7e4      	b.n	80183ea <_strtod_l+0x40a>
 8018420:	9906      	ldr	r1, [sp, #24]
 8018422:	3116      	adds	r1, #22
 8018424:	db0b      	blt.n	801843e <_strtod_l+0x45e>
 8018426:	4b57      	ldr	r3, [pc, #348]	; (8018584 <_strtod_l+0x5a4>)
 8018428:	ebab 0505 	sub.w	r5, fp, r5
 801842c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8018430:	ed95 7b00 	vldr	d7, [r5]
 8018434:	ec49 8b16 	vmov	d6, r8, r9
 8018438:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801843c:	e7d7      	b.n	80183ee <_strtod_l+0x40e>
 801843e:	9906      	ldr	r1, [sp, #24]
 8018440:	1a9a      	subs	r2, r3, r2
 8018442:	440a      	add	r2, r1
 8018444:	2a00      	cmp	r2, #0
 8018446:	dd74      	ble.n	8018532 <_strtod_l+0x552>
 8018448:	f012 000f 	ands.w	r0, r2, #15
 801844c:	d00a      	beq.n	8018464 <_strtod_l+0x484>
 801844e:	494d      	ldr	r1, [pc, #308]	; (8018584 <_strtod_l+0x5a4>)
 8018450:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018454:	ed91 7b00 	vldr	d7, [r1]
 8018458:	ec49 8b16 	vmov	d6, r8, r9
 801845c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018460:	ec59 8b17 	vmov	r8, r9, d7
 8018464:	f032 020f 	bics.w	r2, r2, #15
 8018468:	d04f      	beq.n	801850a <_strtod_l+0x52a>
 801846a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801846e:	dd22      	ble.n	80184b6 <_strtod_l+0x4d6>
 8018470:	2500      	movs	r5, #0
 8018472:	462e      	mov	r6, r5
 8018474:	950a      	str	r5, [sp, #40]	; 0x28
 8018476:	462f      	mov	r7, r5
 8018478:	2322      	movs	r3, #34	; 0x22
 801847a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8018590 <_strtod_l+0x5b0>
 801847e:	6023      	str	r3, [r4, #0]
 8018480:	f04f 0800 	mov.w	r8, #0
 8018484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018486:	2b00      	cmp	r3, #0
 8018488:	f43f adee 	beq.w	8018068 <_strtod_l+0x88>
 801848c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801848e:	4620      	mov	r0, r4
 8018490:	f001 f8f0 	bl	8019674 <_Bfree>
 8018494:	4639      	mov	r1, r7
 8018496:	4620      	mov	r0, r4
 8018498:	f001 f8ec 	bl	8019674 <_Bfree>
 801849c:	4631      	mov	r1, r6
 801849e:	4620      	mov	r0, r4
 80184a0:	f001 f8e8 	bl	8019674 <_Bfree>
 80184a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80184a6:	4620      	mov	r0, r4
 80184a8:	f001 f8e4 	bl	8019674 <_Bfree>
 80184ac:	4629      	mov	r1, r5
 80184ae:	4620      	mov	r0, r4
 80184b0:	f001 f8e0 	bl	8019674 <_Bfree>
 80184b4:	e5d8      	b.n	8018068 <_strtod_l+0x88>
 80184b6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80184ba:	2000      	movs	r0, #0
 80184bc:	4f32      	ldr	r7, [pc, #200]	; (8018588 <_strtod_l+0x5a8>)
 80184be:	1112      	asrs	r2, r2, #4
 80184c0:	4601      	mov	r1, r0
 80184c2:	2a01      	cmp	r2, #1
 80184c4:	dc24      	bgt.n	8018510 <_strtod_l+0x530>
 80184c6:	b108      	cbz	r0, 80184cc <_strtod_l+0x4ec>
 80184c8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80184cc:	4a2e      	ldr	r2, [pc, #184]	; (8018588 <_strtod_l+0x5a8>)
 80184ce:	482f      	ldr	r0, [pc, #188]	; (801858c <_strtod_l+0x5ac>)
 80184d0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80184d4:	ed91 7b00 	vldr	d7, [r1]
 80184d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80184dc:	ec49 8b16 	vmov	d6, r8, r9
 80184e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80184e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80184e8:	9905      	ldr	r1, [sp, #20]
 80184ea:	4a29      	ldr	r2, [pc, #164]	; (8018590 <_strtod_l+0x5b0>)
 80184ec:	400a      	ands	r2, r1
 80184ee:	4282      	cmp	r2, r0
 80184f0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80184f4:	d8bc      	bhi.n	8018470 <_strtod_l+0x490>
 80184f6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80184fa:	4282      	cmp	r2, r0
 80184fc:	bf86      	itte	hi
 80184fe:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8018594 <_strtod_l+0x5b4>
 8018502:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8018506:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801850a:	2200      	movs	r2, #0
 801850c:	9204      	str	r2, [sp, #16]
 801850e:	e07f      	b.n	8018610 <_strtod_l+0x630>
 8018510:	f012 0f01 	tst.w	r2, #1
 8018514:	d00a      	beq.n	801852c <_strtod_l+0x54c>
 8018516:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 801851a:	ed90 7b00 	vldr	d7, [r0]
 801851e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8018522:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018526:	ed8d 7b04 	vstr	d7, [sp, #16]
 801852a:	2001      	movs	r0, #1
 801852c:	3101      	adds	r1, #1
 801852e:	1052      	asrs	r2, r2, #1
 8018530:	e7c7      	b.n	80184c2 <_strtod_l+0x4e2>
 8018532:	d0ea      	beq.n	801850a <_strtod_l+0x52a>
 8018534:	4252      	negs	r2, r2
 8018536:	f012 000f 	ands.w	r0, r2, #15
 801853a:	d00a      	beq.n	8018552 <_strtod_l+0x572>
 801853c:	4911      	ldr	r1, [pc, #68]	; (8018584 <_strtod_l+0x5a4>)
 801853e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018542:	ed91 7b00 	vldr	d7, [r1]
 8018546:	ec49 8b16 	vmov	d6, r8, r9
 801854a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801854e:	ec59 8b17 	vmov	r8, r9, d7
 8018552:	1112      	asrs	r2, r2, #4
 8018554:	d0d9      	beq.n	801850a <_strtod_l+0x52a>
 8018556:	2a1f      	cmp	r2, #31
 8018558:	dd1e      	ble.n	8018598 <_strtod_l+0x5b8>
 801855a:	2500      	movs	r5, #0
 801855c:	462e      	mov	r6, r5
 801855e:	950a      	str	r5, [sp, #40]	; 0x28
 8018560:	462f      	mov	r7, r5
 8018562:	2322      	movs	r3, #34	; 0x22
 8018564:	f04f 0800 	mov.w	r8, #0
 8018568:	f04f 0900 	mov.w	r9, #0
 801856c:	6023      	str	r3, [r4, #0]
 801856e:	e789      	b.n	8018484 <_strtod_l+0x4a4>
 8018570:	0801db27 	.word	0x0801db27
 8018574:	0801db40 	.word	0x0801db40
 8018578:	0801db1e 	.word	0x0801db1e
 801857c:	0801db21 	.word	0x0801db21
 8018580:	0801dbbb 	.word	0x0801dbbb
 8018584:	0801dcd8 	.word	0x0801dcd8
 8018588:	0801dcb0 	.word	0x0801dcb0
 801858c:	7ca00000 	.word	0x7ca00000
 8018590:	7ff00000 	.word	0x7ff00000
 8018594:	7fefffff 	.word	0x7fefffff
 8018598:	f012 0110 	ands.w	r1, r2, #16
 801859c:	bf18      	it	ne
 801859e:	216a      	movne	r1, #106	; 0x6a
 80185a0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80185a4:	9104      	str	r1, [sp, #16]
 80185a6:	49c0      	ldr	r1, [pc, #768]	; (80188a8 <_strtod_l+0x8c8>)
 80185a8:	2000      	movs	r0, #0
 80185aa:	07d7      	lsls	r7, r2, #31
 80185ac:	d508      	bpl.n	80185c0 <_strtod_l+0x5e0>
 80185ae:	ed9d 6b08 	vldr	d6, [sp, #32]
 80185b2:	ed91 7b00 	vldr	d7, [r1]
 80185b6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80185ba:	ed8d 7b08 	vstr	d7, [sp, #32]
 80185be:	2001      	movs	r0, #1
 80185c0:	1052      	asrs	r2, r2, #1
 80185c2:	f101 0108 	add.w	r1, r1, #8
 80185c6:	d1f0      	bne.n	80185aa <_strtod_l+0x5ca>
 80185c8:	b108      	cbz	r0, 80185ce <_strtod_l+0x5ee>
 80185ca:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80185ce:	9a04      	ldr	r2, [sp, #16]
 80185d0:	b1ba      	cbz	r2, 8018602 <_strtod_l+0x622>
 80185d2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80185d6:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80185da:	2a00      	cmp	r2, #0
 80185dc:	4649      	mov	r1, r9
 80185de:	dd10      	ble.n	8018602 <_strtod_l+0x622>
 80185e0:	2a1f      	cmp	r2, #31
 80185e2:	f340 8132 	ble.w	801884a <_strtod_l+0x86a>
 80185e6:	2a34      	cmp	r2, #52	; 0x34
 80185e8:	bfde      	ittt	le
 80185ea:	3a20      	suble	r2, #32
 80185ec:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 80185f0:	fa00 f202 	lslle.w	r2, r0, r2
 80185f4:	f04f 0800 	mov.w	r8, #0
 80185f8:	bfcc      	ite	gt
 80185fa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80185fe:	ea02 0901 	andle.w	r9, r2, r1
 8018602:	ec49 8b17 	vmov	d7, r8, r9
 8018606:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801860a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801860e:	d0a4      	beq.n	801855a <_strtod_l+0x57a>
 8018610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018612:	9200      	str	r2, [sp, #0]
 8018614:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018616:	4632      	mov	r2, r6
 8018618:	4620      	mov	r0, r4
 801861a:	f001 f897 	bl	801974c <__s2b>
 801861e:	900a      	str	r0, [sp, #40]	; 0x28
 8018620:	2800      	cmp	r0, #0
 8018622:	f43f af25 	beq.w	8018470 <_strtod_l+0x490>
 8018626:	9b06      	ldr	r3, [sp, #24]
 8018628:	ebab 0505 	sub.w	r5, fp, r5
 801862c:	2b00      	cmp	r3, #0
 801862e:	bfb4      	ite	lt
 8018630:	462b      	movlt	r3, r5
 8018632:	2300      	movge	r3, #0
 8018634:	930c      	str	r3, [sp, #48]	; 0x30
 8018636:	9b06      	ldr	r3, [sp, #24]
 8018638:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8018890 <_strtod_l+0x8b0>
 801863c:	ed9f ab96 	vldr	d10, [pc, #600]	; 8018898 <_strtod_l+0x8b8>
 8018640:	ed9f bb97 	vldr	d11, [pc, #604]	; 80188a0 <_strtod_l+0x8c0>
 8018644:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018648:	2500      	movs	r5, #0
 801864a:	9312      	str	r3, [sp, #72]	; 0x48
 801864c:	462e      	mov	r6, r5
 801864e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018650:	4620      	mov	r0, r4
 8018652:	6859      	ldr	r1, [r3, #4]
 8018654:	f000 ffce 	bl	80195f4 <_Balloc>
 8018658:	4607      	mov	r7, r0
 801865a:	2800      	cmp	r0, #0
 801865c:	f43f af0c 	beq.w	8018478 <_strtod_l+0x498>
 8018660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018662:	691a      	ldr	r2, [r3, #16]
 8018664:	3202      	adds	r2, #2
 8018666:	f103 010c 	add.w	r1, r3, #12
 801866a:	0092      	lsls	r2, r2, #2
 801866c:	300c      	adds	r0, #12
 801866e:	f7ff fa6f 	bl	8017b50 <memcpy>
 8018672:	ec49 8b10 	vmov	d0, r8, r9
 8018676:	aa1a      	add	r2, sp, #104	; 0x68
 8018678:	a919      	add	r1, sp, #100	; 0x64
 801867a:	4620      	mov	r0, r4
 801867c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8018680:	f001 fba0 	bl	8019dc4 <__d2b>
 8018684:	9018      	str	r0, [sp, #96]	; 0x60
 8018686:	2800      	cmp	r0, #0
 8018688:	f43f aef6 	beq.w	8018478 <_strtod_l+0x498>
 801868c:	2101      	movs	r1, #1
 801868e:	4620      	mov	r0, r4
 8018690:	f001 f8f6 	bl	8019880 <__i2b>
 8018694:	4606      	mov	r6, r0
 8018696:	2800      	cmp	r0, #0
 8018698:	f43f aeee 	beq.w	8018478 <_strtod_l+0x498>
 801869c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801869e:	991a      	ldr	r1, [sp, #104]	; 0x68
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	bfab      	itete	ge
 80186a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80186a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80186a8:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80186ac:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80186b0:	bfac      	ite	ge
 80186b2:	eb03 0b02 	addge.w	fp, r3, r2
 80186b6:	eba2 0a03 	sublt.w	sl, r2, r3
 80186ba:	9a04      	ldr	r2, [sp, #16]
 80186bc:	1a9b      	subs	r3, r3, r2
 80186be:	440b      	add	r3, r1
 80186c0:	4a7a      	ldr	r2, [pc, #488]	; (80188ac <_strtod_l+0x8cc>)
 80186c2:	3b01      	subs	r3, #1
 80186c4:	4293      	cmp	r3, r2
 80186c6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80186ca:	f280 80d1 	bge.w	8018870 <_strtod_l+0x890>
 80186ce:	1ad2      	subs	r2, r2, r3
 80186d0:	2a1f      	cmp	r2, #31
 80186d2:	eba1 0102 	sub.w	r1, r1, r2
 80186d6:	f04f 0001 	mov.w	r0, #1
 80186da:	f300 80bd 	bgt.w	8018858 <_strtod_l+0x878>
 80186de:	fa00 f302 	lsl.w	r3, r0, r2
 80186e2:	930e      	str	r3, [sp, #56]	; 0x38
 80186e4:	2300      	movs	r3, #0
 80186e6:	930d      	str	r3, [sp, #52]	; 0x34
 80186e8:	eb0b 0301 	add.w	r3, fp, r1
 80186ec:	9a04      	ldr	r2, [sp, #16]
 80186ee:	459b      	cmp	fp, r3
 80186f0:	448a      	add	sl, r1
 80186f2:	4492      	add	sl, r2
 80186f4:	465a      	mov	r2, fp
 80186f6:	bfa8      	it	ge
 80186f8:	461a      	movge	r2, r3
 80186fa:	4552      	cmp	r2, sl
 80186fc:	bfa8      	it	ge
 80186fe:	4652      	movge	r2, sl
 8018700:	2a00      	cmp	r2, #0
 8018702:	bfc2      	ittt	gt
 8018704:	1a9b      	subgt	r3, r3, r2
 8018706:	ebaa 0a02 	subgt.w	sl, sl, r2
 801870a:	ebab 0b02 	subgt.w	fp, fp, r2
 801870e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018710:	2a00      	cmp	r2, #0
 8018712:	dd18      	ble.n	8018746 <_strtod_l+0x766>
 8018714:	4631      	mov	r1, r6
 8018716:	4620      	mov	r0, r4
 8018718:	9315      	str	r3, [sp, #84]	; 0x54
 801871a:	f001 f96d 	bl	80199f8 <__pow5mult>
 801871e:	4606      	mov	r6, r0
 8018720:	2800      	cmp	r0, #0
 8018722:	f43f aea9 	beq.w	8018478 <_strtod_l+0x498>
 8018726:	4601      	mov	r1, r0
 8018728:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801872a:	4620      	mov	r0, r4
 801872c:	f001 f8be 	bl	80198ac <__multiply>
 8018730:	9014      	str	r0, [sp, #80]	; 0x50
 8018732:	2800      	cmp	r0, #0
 8018734:	f43f aea0 	beq.w	8018478 <_strtod_l+0x498>
 8018738:	9918      	ldr	r1, [sp, #96]	; 0x60
 801873a:	4620      	mov	r0, r4
 801873c:	f000 ff9a 	bl	8019674 <_Bfree>
 8018740:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018744:	9218      	str	r2, [sp, #96]	; 0x60
 8018746:	2b00      	cmp	r3, #0
 8018748:	f300 8097 	bgt.w	801887a <_strtod_l+0x89a>
 801874c:	9b06      	ldr	r3, [sp, #24]
 801874e:	2b00      	cmp	r3, #0
 8018750:	dd08      	ble.n	8018764 <_strtod_l+0x784>
 8018752:	4639      	mov	r1, r7
 8018754:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018756:	4620      	mov	r0, r4
 8018758:	f001 f94e 	bl	80199f8 <__pow5mult>
 801875c:	4607      	mov	r7, r0
 801875e:	2800      	cmp	r0, #0
 8018760:	f43f ae8a 	beq.w	8018478 <_strtod_l+0x498>
 8018764:	f1ba 0f00 	cmp.w	sl, #0
 8018768:	dd08      	ble.n	801877c <_strtod_l+0x79c>
 801876a:	4639      	mov	r1, r7
 801876c:	4652      	mov	r2, sl
 801876e:	4620      	mov	r0, r4
 8018770:	f001 f99c 	bl	8019aac <__lshift>
 8018774:	4607      	mov	r7, r0
 8018776:	2800      	cmp	r0, #0
 8018778:	f43f ae7e 	beq.w	8018478 <_strtod_l+0x498>
 801877c:	f1bb 0f00 	cmp.w	fp, #0
 8018780:	dd08      	ble.n	8018794 <_strtod_l+0x7b4>
 8018782:	4631      	mov	r1, r6
 8018784:	465a      	mov	r2, fp
 8018786:	4620      	mov	r0, r4
 8018788:	f001 f990 	bl	8019aac <__lshift>
 801878c:	4606      	mov	r6, r0
 801878e:	2800      	cmp	r0, #0
 8018790:	f43f ae72 	beq.w	8018478 <_strtod_l+0x498>
 8018794:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018796:	463a      	mov	r2, r7
 8018798:	4620      	mov	r0, r4
 801879a:	f001 fa0f 	bl	8019bbc <__mdiff>
 801879e:	4605      	mov	r5, r0
 80187a0:	2800      	cmp	r0, #0
 80187a2:	f43f ae69 	beq.w	8018478 <_strtod_l+0x498>
 80187a6:	2300      	movs	r3, #0
 80187a8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80187ac:	60c3      	str	r3, [r0, #12]
 80187ae:	4631      	mov	r1, r6
 80187b0:	f001 f9e8 	bl	8019b84 <__mcmp>
 80187b4:	2800      	cmp	r0, #0
 80187b6:	da7f      	bge.n	80188b8 <_strtod_l+0x8d8>
 80187b8:	ea5a 0308 	orrs.w	r3, sl, r8
 80187bc:	f040 80a5 	bne.w	801890a <_strtod_l+0x92a>
 80187c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	f040 80a0 	bne.w	801890a <_strtod_l+0x92a>
 80187ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80187ce:	0d1b      	lsrs	r3, r3, #20
 80187d0:	051b      	lsls	r3, r3, #20
 80187d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80187d6:	f240 8098 	bls.w	801890a <_strtod_l+0x92a>
 80187da:	696b      	ldr	r3, [r5, #20]
 80187dc:	b91b      	cbnz	r3, 80187e6 <_strtod_l+0x806>
 80187de:	692b      	ldr	r3, [r5, #16]
 80187e0:	2b01      	cmp	r3, #1
 80187e2:	f340 8092 	ble.w	801890a <_strtod_l+0x92a>
 80187e6:	4629      	mov	r1, r5
 80187e8:	2201      	movs	r2, #1
 80187ea:	4620      	mov	r0, r4
 80187ec:	f001 f95e 	bl	8019aac <__lshift>
 80187f0:	4631      	mov	r1, r6
 80187f2:	4605      	mov	r5, r0
 80187f4:	f001 f9c6 	bl	8019b84 <__mcmp>
 80187f8:	2800      	cmp	r0, #0
 80187fa:	f340 8086 	ble.w	801890a <_strtod_l+0x92a>
 80187fe:	9904      	ldr	r1, [sp, #16]
 8018800:	4a2b      	ldr	r2, [pc, #172]	; (80188b0 <_strtod_l+0x8d0>)
 8018802:	464b      	mov	r3, r9
 8018804:	2900      	cmp	r1, #0
 8018806:	f000 80a1 	beq.w	801894c <_strtod_l+0x96c>
 801880a:	ea02 0109 	and.w	r1, r2, r9
 801880e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018812:	f300 809b 	bgt.w	801894c <_strtod_l+0x96c>
 8018816:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801881a:	f77f aea2 	ble.w	8018562 <_strtod_l+0x582>
 801881e:	4a25      	ldr	r2, [pc, #148]	; (80188b4 <_strtod_l+0x8d4>)
 8018820:	2300      	movs	r3, #0
 8018822:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8018826:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 801882a:	ec49 8b17 	vmov	d7, r8, r9
 801882e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018832:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018836:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801883a:	4313      	orrs	r3, r2
 801883c:	bf08      	it	eq
 801883e:	2322      	moveq	r3, #34	; 0x22
 8018840:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018844:	bf08      	it	eq
 8018846:	6023      	streq	r3, [r4, #0]
 8018848:	e620      	b.n	801848c <_strtod_l+0x4ac>
 801884a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801884e:	fa01 f202 	lsl.w	r2, r1, r2
 8018852:	ea02 0808 	and.w	r8, r2, r8
 8018856:	e6d4      	b.n	8018602 <_strtod_l+0x622>
 8018858:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801885c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8018860:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8018864:	33e2      	adds	r3, #226	; 0xe2
 8018866:	fa00 f303 	lsl.w	r3, r0, r3
 801886a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 801886e:	e73b      	b.n	80186e8 <_strtod_l+0x708>
 8018870:	2000      	movs	r0, #0
 8018872:	2301      	movs	r3, #1
 8018874:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8018878:	e736      	b.n	80186e8 <_strtod_l+0x708>
 801887a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801887c:	461a      	mov	r2, r3
 801887e:	4620      	mov	r0, r4
 8018880:	f001 f914 	bl	8019aac <__lshift>
 8018884:	9018      	str	r0, [sp, #96]	; 0x60
 8018886:	2800      	cmp	r0, #0
 8018888:	f47f af60 	bne.w	801874c <_strtod_l+0x76c>
 801888c:	e5f4      	b.n	8018478 <_strtod_l+0x498>
 801888e:	bf00      	nop
 8018890:	94a03595 	.word	0x94a03595
 8018894:	3fcfffff 	.word	0x3fcfffff
 8018898:	94a03595 	.word	0x94a03595
 801889c:	3fdfffff 	.word	0x3fdfffff
 80188a0:	35afe535 	.word	0x35afe535
 80188a4:	3fe00000 	.word	0x3fe00000
 80188a8:	0801db58 	.word	0x0801db58
 80188ac:	fffffc02 	.word	0xfffffc02
 80188b0:	7ff00000 	.word	0x7ff00000
 80188b4:	39500000 	.word	0x39500000
 80188b8:	46cb      	mov	fp, r9
 80188ba:	d165      	bne.n	8018988 <_strtod_l+0x9a8>
 80188bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80188c0:	f1ba 0f00 	cmp.w	sl, #0
 80188c4:	d02a      	beq.n	801891c <_strtod_l+0x93c>
 80188c6:	4aaa      	ldr	r2, [pc, #680]	; (8018b70 <_strtod_l+0xb90>)
 80188c8:	4293      	cmp	r3, r2
 80188ca:	d12b      	bne.n	8018924 <_strtod_l+0x944>
 80188cc:	9b04      	ldr	r3, [sp, #16]
 80188ce:	4641      	mov	r1, r8
 80188d0:	b1fb      	cbz	r3, 8018912 <_strtod_l+0x932>
 80188d2:	4aa8      	ldr	r2, [pc, #672]	; (8018b74 <_strtod_l+0xb94>)
 80188d4:	ea09 0202 	and.w	r2, r9, r2
 80188d8:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80188dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80188e0:	d81a      	bhi.n	8018918 <_strtod_l+0x938>
 80188e2:	0d12      	lsrs	r2, r2, #20
 80188e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80188e8:	fa00 f303 	lsl.w	r3, r0, r3
 80188ec:	4299      	cmp	r1, r3
 80188ee:	d119      	bne.n	8018924 <_strtod_l+0x944>
 80188f0:	4ba1      	ldr	r3, [pc, #644]	; (8018b78 <_strtod_l+0xb98>)
 80188f2:	459b      	cmp	fp, r3
 80188f4:	d102      	bne.n	80188fc <_strtod_l+0x91c>
 80188f6:	3101      	adds	r1, #1
 80188f8:	f43f adbe 	beq.w	8018478 <_strtod_l+0x498>
 80188fc:	4b9d      	ldr	r3, [pc, #628]	; (8018b74 <_strtod_l+0xb94>)
 80188fe:	ea0b 0303 	and.w	r3, fp, r3
 8018902:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8018906:	f04f 0800 	mov.w	r8, #0
 801890a:	9b04      	ldr	r3, [sp, #16]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d186      	bne.n	801881e <_strtod_l+0x83e>
 8018910:	e5bc      	b.n	801848c <_strtod_l+0x4ac>
 8018912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018916:	e7e9      	b.n	80188ec <_strtod_l+0x90c>
 8018918:	4603      	mov	r3, r0
 801891a:	e7e7      	b.n	80188ec <_strtod_l+0x90c>
 801891c:	ea53 0308 	orrs.w	r3, r3, r8
 8018920:	f43f af6d 	beq.w	80187fe <_strtod_l+0x81e>
 8018924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018926:	b1db      	cbz	r3, 8018960 <_strtod_l+0x980>
 8018928:	ea13 0f0b 	tst.w	r3, fp
 801892c:	d0ed      	beq.n	801890a <_strtod_l+0x92a>
 801892e:	9a04      	ldr	r2, [sp, #16]
 8018930:	4640      	mov	r0, r8
 8018932:	4649      	mov	r1, r9
 8018934:	f1ba 0f00 	cmp.w	sl, #0
 8018938:	d016      	beq.n	8018968 <_strtod_l+0x988>
 801893a:	f7ff fb37 	bl	8017fac <sulp>
 801893e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8018942:	ee37 7b00 	vadd.f64	d7, d7, d0
 8018946:	ec59 8b17 	vmov	r8, r9, d7
 801894a:	e7de      	b.n	801890a <_strtod_l+0x92a>
 801894c:	4013      	ands	r3, r2
 801894e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018952:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8018956:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801895a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801895e:	e7d4      	b.n	801890a <_strtod_l+0x92a>
 8018960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018962:	ea13 0f08 	tst.w	r3, r8
 8018966:	e7e1      	b.n	801892c <_strtod_l+0x94c>
 8018968:	f7ff fb20 	bl	8017fac <sulp>
 801896c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8018970:	ee37 7b40 	vsub.f64	d7, d7, d0
 8018974:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018978:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801897c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018980:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8018984:	d1c1      	bne.n	801890a <_strtod_l+0x92a>
 8018986:	e5ec      	b.n	8018562 <_strtod_l+0x582>
 8018988:	4631      	mov	r1, r6
 801898a:	4628      	mov	r0, r5
 801898c:	f001 fa76 	bl	8019e7c <__ratio>
 8018990:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8018994:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801899c:	d867      	bhi.n	8018a6e <_strtod_l+0xa8e>
 801899e:	f1ba 0f00 	cmp.w	sl, #0
 80189a2:	d044      	beq.n	8018a2e <_strtod_l+0xa4e>
 80189a4:	4b75      	ldr	r3, [pc, #468]	; (8018b7c <_strtod_l+0xb9c>)
 80189a6:	2200      	movs	r2, #0
 80189a8:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80189ac:	4971      	ldr	r1, [pc, #452]	; (8018b74 <_strtod_l+0xb94>)
 80189ae:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8018b88 <_strtod_l+0xba8>
 80189b2:	ea0b 0001 	and.w	r0, fp, r1
 80189b6:	4560      	cmp	r0, ip
 80189b8:	900d      	str	r0, [sp, #52]	; 0x34
 80189ba:	f040 808b 	bne.w	8018ad4 <_strtod_l+0xaf4>
 80189be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80189c2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80189c6:	ec49 8b10 	vmov	d0, r8, r9
 80189ca:	ec43 2b1c 	vmov	d12, r2, r3
 80189ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80189d2:	f001 f97b 	bl	8019ccc <__ulp>
 80189d6:	ec49 8b1d 	vmov	d13, r8, r9
 80189da:	eeac db00 	vfma.f64	d13, d12, d0
 80189de:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 80189e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80189e4:	4963      	ldr	r1, [pc, #396]	; (8018b74 <_strtod_l+0xb94>)
 80189e6:	4a66      	ldr	r2, [pc, #408]	; (8018b80 <_strtod_l+0xba0>)
 80189e8:	4019      	ands	r1, r3
 80189ea:	4291      	cmp	r1, r2
 80189ec:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80189f0:	d947      	bls.n	8018a82 <_strtod_l+0xaa2>
 80189f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80189f8:	4293      	cmp	r3, r2
 80189fa:	d103      	bne.n	8018a04 <_strtod_l+0xa24>
 80189fc:	9b08      	ldr	r3, [sp, #32]
 80189fe:	3301      	adds	r3, #1
 8018a00:	f43f ad3a 	beq.w	8018478 <_strtod_l+0x498>
 8018a04:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8018b78 <_strtod_l+0xb98>
 8018a08:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8018a0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018a0e:	4620      	mov	r0, r4
 8018a10:	f000 fe30 	bl	8019674 <_Bfree>
 8018a14:	4639      	mov	r1, r7
 8018a16:	4620      	mov	r0, r4
 8018a18:	f000 fe2c 	bl	8019674 <_Bfree>
 8018a1c:	4631      	mov	r1, r6
 8018a1e:	4620      	mov	r0, r4
 8018a20:	f000 fe28 	bl	8019674 <_Bfree>
 8018a24:	4629      	mov	r1, r5
 8018a26:	4620      	mov	r0, r4
 8018a28:	f000 fe24 	bl	8019674 <_Bfree>
 8018a2c:	e60f      	b.n	801864e <_strtod_l+0x66e>
 8018a2e:	f1b8 0f00 	cmp.w	r8, #0
 8018a32:	d112      	bne.n	8018a5a <_strtod_l+0xa7a>
 8018a34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018a38:	b9b3      	cbnz	r3, 8018a68 <_strtod_l+0xa88>
 8018a3a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8018a3e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a46:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8018a4a:	d401      	bmi.n	8018a50 <_strtod_l+0xa70>
 8018a4c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8018a50:	eeb1 7b48 	vneg.f64	d7, d8
 8018a54:	ec53 2b17 	vmov	r2, r3, d7
 8018a58:	e7a8      	b.n	80189ac <_strtod_l+0x9cc>
 8018a5a:	f1b8 0f01 	cmp.w	r8, #1
 8018a5e:	d103      	bne.n	8018a68 <_strtod_l+0xa88>
 8018a60:	f1b9 0f00 	cmp.w	r9, #0
 8018a64:	f43f ad7d 	beq.w	8018562 <_strtod_l+0x582>
 8018a68:	4b46      	ldr	r3, [pc, #280]	; (8018b84 <_strtod_l+0xba4>)
 8018a6a:	2200      	movs	r2, #0
 8018a6c:	e79c      	b.n	80189a8 <_strtod_l+0x9c8>
 8018a6e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8018a72:	ee20 8b08 	vmul.f64	d8, d0, d8
 8018a76:	f1ba 0f00 	cmp.w	sl, #0
 8018a7a:	d0e9      	beq.n	8018a50 <_strtod_l+0xa70>
 8018a7c:	ec53 2b18 	vmov	r2, r3, d8
 8018a80:	e794      	b.n	80189ac <_strtod_l+0x9cc>
 8018a82:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8018a86:	9b04      	ldr	r3, [sp, #16]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d1bf      	bne.n	8018a0c <_strtod_l+0xa2c>
 8018a8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018a92:	0d1b      	lsrs	r3, r3, #20
 8018a94:	051b      	lsls	r3, r3, #20
 8018a96:	429a      	cmp	r2, r3
 8018a98:	d1b8      	bne.n	8018a0c <_strtod_l+0xa2c>
 8018a9a:	ec51 0b18 	vmov	r0, r1, d8
 8018a9e:	f7e7 fe43 	bl	8000728 <__aeabi_d2lz>
 8018aa2:	f7e7 fe13 	bl	80006cc <__aeabi_l2d>
 8018aa6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018aaa:	ec41 0b17 	vmov	d7, r0, r1
 8018aae:	ea43 0308 	orr.w	r3, r3, r8
 8018ab2:	ea53 030a 	orrs.w	r3, r3, sl
 8018ab6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8018aba:	d03e      	beq.n	8018b3a <_strtod_l+0xb5a>
 8018abc:	eeb4 8bca 	vcmpe.f64	d8, d10
 8018ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ac4:	f53f ace2 	bmi.w	801848c <_strtod_l+0x4ac>
 8018ac8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8018acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ad0:	dd9c      	ble.n	8018a0c <_strtod_l+0xa2c>
 8018ad2:	e4db      	b.n	801848c <_strtod_l+0x4ac>
 8018ad4:	9904      	ldr	r1, [sp, #16]
 8018ad6:	b301      	cbz	r1, 8018b1a <_strtod_l+0xb3a>
 8018ad8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018ada:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8018ade:	d81c      	bhi.n	8018b1a <_strtod_l+0xb3a>
 8018ae0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8018b68 <_strtod_l+0xb88>
 8018ae4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aec:	d811      	bhi.n	8018b12 <_strtod_l+0xb32>
 8018aee:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8018af2:	ee18 3a10 	vmov	r3, s16
 8018af6:	2b01      	cmp	r3, #1
 8018af8:	bf38      	it	cc
 8018afa:	2301      	movcc	r3, #1
 8018afc:	ee08 3a10 	vmov	s16, r3
 8018b00:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8018b04:	f1ba 0f00 	cmp.w	sl, #0
 8018b08:	d114      	bne.n	8018b34 <_strtod_l+0xb54>
 8018b0a:	eeb1 7b48 	vneg.f64	d7, d8
 8018b0e:	ec53 2b17 	vmov	r2, r3, d7
 8018b12:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018b14:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8018b18:	1a0b      	subs	r3, r1, r0
 8018b1a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8018b1e:	ec43 2b1c 	vmov	d12, r2, r3
 8018b22:	f001 f8d3 	bl	8019ccc <__ulp>
 8018b26:	ed9d 7b08 	vldr	d7, [sp, #32]
 8018b2a:	eeac 7b00 	vfma.f64	d7, d12, d0
 8018b2e:	ec59 8b17 	vmov	r8, r9, d7
 8018b32:	e7a8      	b.n	8018a86 <_strtod_l+0xaa6>
 8018b34:	ec53 2b18 	vmov	r2, r3, d8
 8018b38:	e7eb      	b.n	8018b12 <_strtod_l+0xb32>
 8018b3a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8018b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b42:	f57f af63 	bpl.w	8018a0c <_strtod_l+0xa2c>
 8018b46:	e4a1      	b.n	801848c <_strtod_l+0x4ac>
 8018b48:	2300      	movs	r3, #0
 8018b4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018b4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018b50:	6013      	str	r3, [r2, #0]
 8018b52:	f7ff ba8d 	b.w	8018070 <_strtod_l+0x90>
 8018b56:	2a65      	cmp	r2, #101	; 0x65
 8018b58:	f43f ab89 	beq.w	801826e <_strtod_l+0x28e>
 8018b5c:	2a45      	cmp	r2, #69	; 0x45
 8018b5e:	f43f ab86 	beq.w	801826e <_strtod_l+0x28e>
 8018b62:	2101      	movs	r1, #1
 8018b64:	f7ff bbbe 	b.w	80182e4 <_strtod_l+0x304>
 8018b68:	ffc00000 	.word	0xffc00000
 8018b6c:	41dfffff 	.word	0x41dfffff
 8018b70:	000fffff 	.word	0x000fffff
 8018b74:	7ff00000 	.word	0x7ff00000
 8018b78:	7fefffff 	.word	0x7fefffff
 8018b7c:	3ff00000 	.word	0x3ff00000
 8018b80:	7c9fffff 	.word	0x7c9fffff
 8018b84:	bff00000 	.word	0xbff00000
 8018b88:	7fe00000 	.word	0x7fe00000

08018b8c <strtod>:
 8018b8c:	460a      	mov	r2, r1
 8018b8e:	4601      	mov	r1, r0
 8018b90:	4802      	ldr	r0, [pc, #8]	; (8018b9c <strtod+0x10>)
 8018b92:	4b03      	ldr	r3, [pc, #12]	; (8018ba0 <strtod+0x14>)
 8018b94:	6800      	ldr	r0, [r0, #0]
 8018b96:	f7ff ba23 	b.w	8017fe0 <_strtod_l>
 8018b9a:	bf00      	nop
 8018b9c:	24000060 	.word	0x24000060
 8018ba0:	240000cc 	.word	0x240000cc

08018ba4 <__swbuf_r>:
 8018ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ba6:	460e      	mov	r6, r1
 8018ba8:	4614      	mov	r4, r2
 8018baa:	4605      	mov	r5, r0
 8018bac:	b118      	cbz	r0, 8018bb6 <__swbuf_r+0x12>
 8018bae:	6983      	ldr	r3, [r0, #24]
 8018bb0:	b90b      	cbnz	r3, 8018bb6 <__swbuf_r+0x12>
 8018bb2:	f7fe fdfb 	bl	80177ac <__sinit>
 8018bb6:	4b21      	ldr	r3, [pc, #132]	; (8018c3c <__swbuf_r+0x98>)
 8018bb8:	429c      	cmp	r4, r3
 8018bba:	d12b      	bne.n	8018c14 <__swbuf_r+0x70>
 8018bbc:	686c      	ldr	r4, [r5, #4]
 8018bbe:	69a3      	ldr	r3, [r4, #24]
 8018bc0:	60a3      	str	r3, [r4, #8]
 8018bc2:	89a3      	ldrh	r3, [r4, #12]
 8018bc4:	071a      	lsls	r2, r3, #28
 8018bc6:	d52f      	bpl.n	8018c28 <__swbuf_r+0x84>
 8018bc8:	6923      	ldr	r3, [r4, #16]
 8018bca:	b36b      	cbz	r3, 8018c28 <__swbuf_r+0x84>
 8018bcc:	6923      	ldr	r3, [r4, #16]
 8018bce:	6820      	ldr	r0, [r4, #0]
 8018bd0:	1ac0      	subs	r0, r0, r3
 8018bd2:	6963      	ldr	r3, [r4, #20]
 8018bd4:	b2f6      	uxtb	r6, r6
 8018bd6:	4283      	cmp	r3, r0
 8018bd8:	4637      	mov	r7, r6
 8018bda:	dc04      	bgt.n	8018be6 <__swbuf_r+0x42>
 8018bdc:	4621      	mov	r1, r4
 8018bde:	4628      	mov	r0, r5
 8018be0:	f7fe fd50 	bl	8017684 <_fflush_r>
 8018be4:	bb30      	cbnz	r0, 8018c34 <__swbuf_r+0x90>
 8018be6:	68a3      	ldr	r3, [r4, #8]
 8018be8:	3b01      	subs	r3, #1
 8018bea:	60a3      	str	r3, [r4, #8]
 8018bec:	6823      	ldr	r3, [r4, #0]
 8018bee:	1c5a      	adds	r2, r3, #1
 8018bf0:	6022      	str	r2, [r4, #0]
 8018bf2:	701e      	strb	r6, [r3, #0]
 8018bf4:	6963      	ldr	r3, [r4, #20]
 8018bf6:	3001      	adds	r0, #1
 8018bf8:	4283      	cmp	r3, r0
 8018bfa:	d004      	beq.n	8018c06 <__swbuf_r+0x62>
 8018bfc:	89a3      	ldrh	r3, [r4, #12]
 8018bfe:	07db      	lsls	r3, r3, #31
 8018c00:	d506      	bpl.n	8018c10 <__swbuf_r+0x6c>
 8018c02:	2e0a      	cmp	r6, #10
 8018c04:	d104      	bne.n	8018c10 <__swbuf_r+0x6c>
 8018c06:	4621      	mov	r1, r4
 8018c08:	4628      	mov	r0, r5
 8018c0a:	f7fe fd3b 	bl	8017684 <_fflush_r>
 8018c0e:	b988      	cbnz	r0, 8018c34 <__swbuf_r+0x90>
 8018c10:	4638      	mov	r0, r7
 8018c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c14:	4b0a      	ldr	r3, [pc, #40]	; (8018c40 <__swbuf_r+0x9c>)
 8018c16:	429c      	cmp	r4, r3
 8018c18:	d101      	bne.n	8018c1e <__swbuf_r+0x7a>
 8018c1a:	68ac      	ldr	r4, [r5, #8]
 8018c1c:	e7cf      	b.n	8018bbe <__swbuf_r+0x1a>
 8018c1e:	4b09      	ldr	r3, [pc, #36]	; (8018c44 <__swbuf_r+0xa0>)
 8018c20:	429c      	cmp	r4, r3
 8018c22:	bf08      	it	eq
 8018c24:	68ec      	ldreq	r4, [r5, #12]
 8018c26:	e7ca      	b.n	8018bbe <__swbuf_r+0x1a>
 8018c28:	4621      	mov	r1, r4
 8018c2a:	4628      	mov	r0, r5
 8018c2c:	f000 f81e 	bl	8018c6c <__swsetup_r>
 8018c30:	2800      	cmp	r0, #0
 8018c32:	d0cb      	beq.n	8018bcc <__swbuf_r+0x28>
 8018c34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018c38:	e7ea      	b.n	8018c10 <__swbuf_r+0x6c>
 8018c3a:	bf00      	nop
 8018c3c:	0801da64 	.word	0x0801da64
 8018c40:	0801da84 	.word	0x0801da84
 8018c44:	0801da44 	.word	0x0801da44

08018c48 <_write_r>:
 8018c48:	b538      	push	{r3, r4, r5, lr}
 8018c4a:	4d07      	ldr	r5, [pc, #28]	; (8018c68 <_write_r+0x20>)
 8018c4c:	4604      	mov	r4, r0
 8018c4e:	4608      	mov	r0, r1
 8018c50:	4611      	mov	r1, r2
 8018c52:	2200      	movs	r2, #0
 8018c54:	602a      	str	r2, [r5, #0]
 8018c56:	461a      	mov	r2, r3
 8018c58:	f7e8 f97d 	bl	8000f56 <_write>
 8018c5c:	1c43      	adds	r3, r0, #1
 8018c5e:	d102      	bne.n	8018c66 <_write_r+0x1e>
 8018c60:	682b      	ldr	r3, [r5, #0]
 8018c62:	b103      	cbz	r3, 8018c66 <_write_r+0x1e>
 8018c64:	6023      	str	r3, [r4, #0]
 8018c66:	bd38      	pop	{r3, r4, r5, pc}
 8018c68:	2400ee28 	.word	0x2400ee28

08018c6c <__swsetup_r>:
 8018c6c:	4b32      	ldr	r3, [pc, #200]	; (8018d38 <__swsetup_r+0xcc>)
 8018c6e:	b570      	push	{r4, r5, r6, lr}
 8018c70:	681d      	ldr	r5, [r3, #0]
 8018c72:	4606      	mov	r6, r0
 8018c74:	460c      	mov	r4, r1
 8018c76:	b125      	cbz	r5, 8018c82 <__swsetup_r+0x16>
 8018c78:	69ab      	ldr	r3, [r5, #24]
 8018c7a:	b913      	cbnz	r3, 8018c82 <__swsetup_r+0x16>
 8018c7c:	4628      	mov	r0, r5
 8018c7e:	f7fe fd95 	bl	80177ac <__sinit>
 8018c82:	4b2e      	ldr	r3, [pc, #184]	; (8018d3c <__swsetup_r+0xd0>)
 8018c84:	429c      	cmp	r4, r3
 8018c86:	d10f      	bne.n	8018ca8 <__swsetup_r+0x3c>
 8018c88:	686c      	ldr	r4, [r5, #4]
 8018c8a:	89a3      	ldrh	r3, [r4, #12]
 8018c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018c90:	0719      	lsls	r1, r3, #28
 8018c92:	d42c      	bmi.n	8018cee <__swsetup_r+0x82>
 8018c94:	06dd      	lsls	r5, r3, #27
 8018c96:	d411      	bmi.n	8018cbc <__swsetup_r+0x50>
 8018c98:	2309      	movs	r3, #9
 8018c9a:	6033      	str	r3, [r6, #0]
 8018c9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018ca0:	81a3      	strh	r3, [r4, #12]
 8018ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018ca6:	e03e      	b.n	8018d26 <__swsetup_r+0xba>
 8018ca8:	4b25      	ldr	r3, [pc, #148]	; (8018d40 <__swsetup_r+0xd4>)
 8018caa:	429c      	cmp	r4, r3
 8018cac:	d101      	bne.n	8018cb2 <__swsetup_r+0x46>
 8018cae:	68ac      	ldr	r4, [r5, #8]
 8018cb0:	e7eb      	b.n	8018c8a <__swsetup_r+0x1e>
 8018cb2:	4b24      	ldr	r3, [pc, #144]	; (8018d44 <__swsetup_r+0xd8>)
 8018cb4:	429c      	cmp	r4, r3
 8018cb6:	bf08      	it	eq
 8018cb8:	68ec      	ldreq	r4, [r5, #12]
 8018cba:	e7e6      	b.n	8018c8a <__swsetup_r+0x1e>
 8018cbc:	0758      	lsls	r0, r3, #29
 8018cbe:	d512      	bpl.n	8018ce6 <__swsetup_r+0x7a>
 8018cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018cc2:	b141      	cbz	r1, 8018cd6 <__swsetup_r+0x6a>
 8018cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018cc8:	4299      	cmp	r1, r3
 8018cca:	d002      	beq.n	8018cd2 <__swsetup_r+0x66>
 8018ccc:	4630      	mov	r0, r6
 8018cce:	f7fe ff6f 	bl	8017bb0 <_free_r>
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8018cd6:	89a3      	ldrh	r3, [r4, #12]
 8018cd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018cdc:	81a3      	strh	r3, [r4, #12]
 8018cde:	2300      	movs	r3, #0
 8018ce0:	6063      	str	r3, [r4, #4]
 8018ce2:	6923      	ldr	r3, [r4, #16]
 8018ce4:	6023      	str	r3, [r4, #0]
 8018ce6:	89a3      	ldrh	r3, [r4, #12]
 8018ce8:	f043 0308 	orr.w	r3, r3, #8
 8018cec:	81a3      	strh	r3, [r4, #12]
 8018cee:	6923      	ldr	r3, [r4, #16]
 8018cf0:	b94b      	cbnz	r3, 8018d06 <__swsetup_r+0x9a>
 8018cf2:	89a3      	ldrh	r3, [r4, #12]
 8018cf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018cfc:	d003      	beq.n	8018d06 <__swsetup_r+0x9a>
 8018cfe:	4621      	mov	r1, r4
 8018d00:	4630      	mov	r0, r6
 8018d02:	f7fe fec7 	bl	8017a94 <__smakebuf_r>
 8018d06:	89a0      	ldrh	r0, [r4, #12]
 8018d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018d0c:	f010 0301 	ands.w	r3, r0, #1
 8018d10:	d00a      	beq.n	8018d28 <__swsetup_r+0xbc>
 8018d12:	2300      	movs	r3, #0
 8018d14:	60a3      	str	r3, [r4, #8]
 8018d16:	6963      	ldr	r3, [r4, #20]
 8018d18:	425b      	negs	r3, r3
 8018d1a:	61a3      	str	r3, [r4, #24]
 8018d1c:	6923      	ldr	r3, [r4, #16]
 8018d1e:	b943      	cbnz	r3, 8018d32 <__swsetup_r+0xc6>
 8018d20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018d24:	d1ba      	bne.n	8018c9c <__swsetup_r+0x30>
 8018d26:	bd70      	pop	{r4, r5, r6, pc}
 8018d28:	0781      	lsls	r1, r0, #30
 8018d2a:	bf58      	it	pl
 8018d2c:	6963      	ldrpl	r3, [r4, #20]
 8018d2e:	60a3      	str	r3, [r4, #8]
 8018d30:	e7f4      	b.n	8018d1c <__swsetup_r+0xb0>
 8018d32:	2000      	movs	r0, #0
 8018d34:	e7f7      	b.n	8018d26 <__swsetup_r+0xba>
 8018d36:	bf00      	nop
 8018d38:	24000060 	.word	0x24000060
 8018d3c:	0801da64 	.word	0x0801da64
 8018d40:	0801da84 	.word	0x0801da84
 8018d44:	0801da44 	.word	0x0801da44

08018d48 <__assert_func>:
 8018d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018d4a:	4614      	mov	r4, r2
 8018d4c:	461a      	mov	r2, r3
 8018d4e:	4b09      	ldr	r3, [pc, #36]	; (8018d74 <__assert_func+0x2c>)
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	4605      	mov	r5, r0
 8018d54:	68d8      	ldr	r0, [r3, #12]
 8018d56:	b14c      	cbz	r4, 8018d6c <__assert_func+0x24>
 8018d58:	4b07      	ldr	r3, [pc, #28]	; (8018d78 <__assert_func+0x30>)
 8018d5a:	9100      	str	r1, [sp, #0]
 8018d5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018d60:	4906      	ldr	r1, [pc, #24]	; (8018d7c <__assert_func+0x34>)
 8018d62:	462b      	mov	r3, r5
 8018d64:	f000 f824 	bl	8018db0 <fiprintf>
 8018d68:	f001 fd7f 	bl	801a86a <abort>
 8018d6c:	4b04      	ldr	r3, [pc, #16]	; (8018d80 <__assert_func+0x38>)
 8018d6e:	461c      	mov	r4, r3
 8018d70:	e7f3      	b.n	8018d5a <__assert_func+0x12>
 8018d72:	bf00      	nop
 8018d74:	24000060 	.word	0x24000060
 8018d78:	0801db80 	.word	0x0801db80
 8018d7c:	0801db8d 	.word	0x0801db8d
 8018d80:	0801dbbb 	.word	0x0801dbbb

08018d84 <_close_r>:
 8018d84:	b538      	push	{r3, r4, r5, lr}
 8018d86:	4d06      	ldr	r5, [pc, #24]	; (8018da0 <_close_r+0x1c>)
 8018d88:	2300      	movs	r3, #0
 8018d8a:	4604      	mov	r4, r0
 8018d8c:	4608      	mov	r0, r1
 8018d8e:	602b      	str	r3, [r5, #0]
 8018d90:	f7e8 f8fd 	bl	8000f8e <_close>
 8018d94:	1c43      	adds	r3, r0, #1
 8018d96:	d102      	bne.n	8018d9e <_close_r+0x1a>
 8018d98:	682b      	ldr	r3, [r5, #0]
 8018d9a:	b103      	cbz	r3, 8018d9e <_close_r+0x1a>
 8018d9c:	6023      	str	r3, [r4, #0]
 8018d9e:	bd38      	pop	{r3, r4, r5, pc}
 8018da0:	2400ee28 	.word	0x2400ee28

08018da4 <__errno>:
 8018da4:	4b01      	ldr	r3, [pc, #4]	; (8018dac <__errno+0x8>)
 8018da6:	6818      	ldr	r0, [r3, #0]
 8018da8:	4770      	bx	lr
 8018daa:	bf00      	nop
 8018dac:	24000060 	.word	0x24000060

08018db0 <fiprintf>:
 8018db0:	b40e      	push	{r1, r2, r3}
 8018db2:	b503      	push	{r0, r1, lr}
 8018db4:	4601      	mov	r1, r0
 8018db6:	ab03      	add	r3, sp, #12
 8018db8:	4805      	ldr	r0, [pc, #20]	; (8018dd0 <fiprintf+0x20>)
 8018dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8018dbe:	6800      	ldr	r0, [r0, #0]
 8018dc0:	9301      	str	r3, [sp, #4]
 8018dc2:	f001 fa67 	bl	801a294 <_vfiprintf_r>
 8018dc6:	b002      	add	sp, #8
 8018dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8018dcc:	b003      	add	sp, #12
 8018dce:	4770      	bx	lr
 8018dd0:	24000060 	.word	0x24000060

08018dd4 <_fstat_r>:
 8018dd4:	b538      	push	{r3, r4, r5, lr}
 8018dd6:	4d07      	ldr	r5, [pc, #28]	; (8018df4 <_fstat_r+0x20>)
 8018dd8:	2300      	movs	r3, #0
 8018dda:	4604      	mov	r4, r0
 8018ddc:	4608      	mov	r0, r1
 8018dde:	4611      	mov	r1, r2
 8018de0:	602b      	str	r3, [r5, #0]
 8018de2:	f7e8 f8e0 	bl	8000fa6 <_fstat>
 8018de6:	1c43      	adds	r3, r0, #1
 8018de8:	d102      	bne.n	8018df0 <_fstat_r+0x1c>
 8018dea:	682b      	ldr	r3, [r5, #0]
 8018dec:	b103      	cbz	r3, 8018df0 <_fstat_r+0x1c>
 8018dee:	6023      	str	r3, [r4, #0]
 8018df0:	bd38      	pop	{r3, r4, r5, pc}
 8018df2:	bf00      	nop
 8018df4:	2400ee28 	.word	0x2400ee28

08018df8 <rshift>:
 8018df8:	6903      	ldr	r3, [r0, #16]
 8018dfa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018dfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e02:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018e06:	f100 0414 	add.w	r4, r0, #20
 8018e0a:	dd45      	ble.n	8018e98 <rshift+0xa0>
 8018e0c:	f011 011f 	ands.w	r1, r1, #31
 8018e10:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018e14:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018e18:	d10c      	bne.n	8018e34 <rshift+0x3c>
 8018e1a:	f100 0710 	add.w	r7, r0, #16
 8018e1e:	4629      	mov	r1, r5
 8018e20:	42b1      	cmp	r1, r6
 8018e22:	d334      	bcc.n	8018e8e <rshift+0x96>
 8018e24:	1a9b      	subs	r3, r3, r2
 8018e26:	009b      	lsls	r3, r3, #2
 8018e28:	1eea      	subs	r2, r5, #3
 8018e2a:	4296      	cmp	r6, r2
 8018e2c:	bf38      	it	cc
 8018e2e:	2300      	movcc	r3, #0
 8018e30:	4423      	add	r3, r4
 8018e32:	e015      	b.n	8018e60 <rshift+0x68>
 8018e34:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018e38:	f1c1 0820 	rsb	r8, r1, #32
 8018e3c:	40cf      	lsrs	r7, r1
 8018e3e:	f105 0e04 	add.w	lr, r5, #4
 8018e42:	46a1      	mov	r9, r4
 8018e44:	4576      	cmp	r6, lr
 8018e46:	46f4      	mov	ip, lr
 8018e48:	d815      	bhi.n	8018e76 <rshift+0x7e>
 8018e4a:	1a9b      	subs	r3, r3, r2
 8018e4c:	009a      	lsls	r2, r3, #2
 8018e4e:	3a04      	subs	r2, #4
 8018e50:	3501      	adds	r5, #1
 8018e52:	42ae      	cmp	r6, r5
 8018e54:	bf38      	it	cc
 8018e56:	2200      	movcc	r2, #0
 8018e58:	18a3      	adds	r3, r4, r2
 8018e5a:	50a7      	str	r7, [r4, r2]
 8018e5c:	b107      	cbz	r7, 8018e60 <rshift+0x68>
 8018e5e:	3304      	adds	r3, #4
 8018e60:	1b1a      	subs	r2, r3, r4
 8018e62:	42a3      	cmp	r3, r4
 8018e64:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018e68:	bf08      	it	eq
 8018e6a:	2300      	moveq	r3, #0
 8018e6c:	6102      	str	r2, [r0, #16]
 8018e6e:	bf08      	it	eq
 8018e70:	6143      	streq	r3, [r0, #20]
 8018e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e76:	f8dc c000 	ldr.w	ip, [ip]
 8018e7a:	fa0c fc08 	lsl.w	ip, ip, r8
 8018e7e:	ea4c 0707 	orr.w	r7, ip, r7
 8018e82:	f849 7b04 	str.w	r7, [r9], #4
 8018e86:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018e8a:	40cf      	lsrs	r7, r1
 8018e8c:	e7da      	b.n	8018e44 <rshift+0x4c>
 8018e8e:	f851 cb04 	ldr.w	ip, [r1], #4
 8018e92:	f847 cf04 	str.w	ip, [r7, #4]!
 8018e96:	e7c3      	b.n	8018e20 <rshift+0x28>
 8018e98:	4623      	mov	r3, r4
 8018e9a:	e7e1      	b.n	8018e60 <rshift+0x68>

08018e9c <__hexdig_fun>:
 8018e9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018ea0:	2b09      	cmp	r3, #9
 8018ea2:	d802      	bhi.n	8018eaa <__hexdig_fun+0xe>
 8018ea4:	3820      	subs	r0, #32
 8018ea6:	b2c0      	uxtb	r0, r0
 8018ea8:	4770      	bx	lr
 8018eaa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018eae:	2b05      	cmp	r3, #5
 8018eb0:	d801      	bhi.n	8018eb6 <__hexdig_fun+0x1a>
 8018eb2:	3847      	subs	r0, #71	; 0x47
 8018eb4:	e7f7      	b.n	8018ea6 <__hexdig_fun+0xa>
 8018eb6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018eba:	2b05      	cmp	r3, #5
 8018ebc:	d801      	bhi.n	8018ec2 <__hexdig_fun+0x26>
 8018ebe:	3827      	subs	r0, #39	; 0x27
 8018ec0:	e7f1      	b.n	8018ea6 <__hexdig_fun+0xa>
 8018ec2:	2000      	movs	r0, #0
 8018ec4:	4770      	bx	lr
	...

08018ec8 <__gethex>:
 8018ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ecc:	ed2d 8b02 	vpush	{d8}
 8018ed0:	b089      	sub	sp, #36	; 0x24
 8018ed2:	ee08 0a10 	vmov	s16, r0
 8018ed6:	9304      	str	r3, [sp, #16]
 8018ed8:	4bbc      	ldr	r3, [pc, #752]	; (80191cc <__gethex+0x304>)
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	9301      	str	r3, [sp, #4]
 8018ede:	4618      	mov	r0, r3
 8018ee0:	468b      	mov	fp, r1
 8018ee2:	4690      	mov	r8, r2
 8018ee4:	f7e7 fa06 	bl	80002f4 <strlen>
 8018ee8:	9b01      	ldr	r3, [sp, #4]
 8018eea:	f8db 2000 	ldr.w	r2, [fp]
 8018eee:	4403      	add	r3, r0
 8018ef0:	4682      	mov	sl, r0
 8018ef2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018ef6:	9305      	str	r3, [sp, #20]
 8018ef8:	1c93      	adds	r3, r2, #2
 8018efa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018efe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018f02:	32fe      	adds	r2, #254	; 0xfe
 8018f04:	18d1      	adds	r1, r2, r3
 8018f06:	461f      	mov	r7, r3
 8018f08:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018f0c:	9100      	str	r1, [sp, #0]
 8018f0e:	2830      	cmp	r0, #48	; 0x30
 8018f10:	d0f8      	beq.n	8018f04 <__gethex+0x3c>
 8018f12:	f7ff ffc3 	bl	8018e9c <__hexdig_fun>
 8018f16:	4604      	mov	r4, r0
 8018f18:	2800      	cmp	r0, #0
 8018f1a:	d13a      	bne.n	8018f92 <__gethex+0xca>
 8018f1c:	9901      	ldr	r1, [sp, #4]
 8018f1e:	4652      	mov	r2, sl
 8018f20:	4638      	mov	r0, r7
 8018f22:	f7ff f831 	bl	8017f88 <strncmp>
 8018f26:	4605      	mov	r5, r0
 8018f28:	2800      	cmp	r0, #0
 8018f2a:	d168      	bne.n	8018ffe <__gethex+0x136>
 8018f2c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018f30:	eb07 060a 	add.w	r6, r7, sl
 8018f34:	f7ff ffb2 	bl	8018e9c <__hexdig_fun>
 8018f38:	2800      	cmp	r0, #0
 8018f3a:	d062      	beq.n	8019002 <__gethex+0x13a>
 8018f3c:	4633      	mov	r3, r6
 8018f3e:	7818      	ldrb	r0, [r3, #0]
 8018f40:	2830      	cmp	r0, #48	; 0x30
 8018f42:	461f      	mov	r7, r3
 8018f44:	f103 0301 	add.w	r3, r3, #1
 8018f48:	d0f9      	beq.n	8018f3e <__gethex+0x76>
 8018f4a:	f7ff ffa7 	bl	8018e9c <__hexdig_fun>
 8018f4e:	2301      	movs	r3, #1
 8018f50:	fab0 f480 	clz	r4, r0
 8018f54:	0964      	lsrs	r4, r4, #5
 8018f56:	4635      	mov	r5, r6
 8018f58:	9300      	str	r3, [sp, #0]
 8018f5a:	463a      	mov	r2, r7
 8018f5c:	4616      	mov	r6, r2
 8018f5e:	3201      	adds	r2, #1
 8018f60:	7830      	ldrb	r0, [r6, #0]
 8018f62:	f7ff ff9b 	bl	8018e9c <__hexdig_fun>
 8018f66:	2800      	cmp	r0, #0
 8018f68:	d1f8      	bne.n	8018f5c <__gethex+0x94>
 8018f6a:	9901      	ldr	r1, [sp, #4]
 8018f6c:	4652      	mov	r2, sl
 8018f6e:	4630      	mov	r0, r6
 8018f70:	f7ff f80a 	bl	8017f88 <strncmp>
 8018f74:	b980      	cbnz	r0, 8018f98 <__gethex+0xd0>
 8018f76:	b94d      	cbnz	r5, 8018f8c <__gethex+0xc4>
 8018f78:	eb06 050a 	add.w	r5, r6, sl
 8018f7c:	462a      	mov	r2, r5
 8018f7e:	4616      	mov	r6, r2
 8018f80:	3201      	adds	r2, #1
 8018f82:	7830      	ldrb	r0, [r6, #0]
 8018f84:	f7ff ff8a 	bl	8018e9c <__hexdig_fun>
 8018f88:	2800      	cmp	r0, #0
 8018f8a:	d1f8      	bne.n	8018f7e <__gethex+0xb6>
 8018f8c:	1bad      	subs	r5, r5, r6
 8018f8e:	00ad      	lsls	r5, r5, #2
 8018f90:	e004      	b.n	8018f9c <__gethex+0xd4>
 8018f92:	2400      	movs	r4, #0
 8018f94:	4625      	mov	r5, r4
 8018f96:	e7e0      	b.n	8018f5a <__gethex+0x92>
 8018f98:	2d00      	cmp	r5, #0
 8018f9a:	d1f7      	bne.n	8018f8c <__gethex+0xc4>
 8018f9c:	7833      	ldrb	r3, [r6, #0]
 8018f9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018fa2:	2b50      	cmp	r3, #80	; 0x50
 8018fa4:	d13b      	bne.n	801901e <__gethex+0x156>
 8018fa6:	7873      	ldrb	r3, [r6, #1]
 8018fa8:	2b2b      	cmp	r3, #43	; 0x2b
 8018faa:	d02c      	beq.n	8019006 <__gethex+0x13e>
 8018fac:	2b2d      	cmp	r3, #45	; 0x2d
 8018fae:	d02e      	beq.n	801900e <__gethex+0x146>
 8018fb0:	1c71      	adds	r1, r6, #1
 8018fb2:	f04f 0900 	mov.w	r9, #0
 8018fb6:	7808      	ldrb	r0, [r1, #0]
 8018fb8:	f7ff ff70 	bl	8018e9c <__hexdig_fun>
 8018fbc:	1e43      	subs	r3, r0, #1
 8018fbe:	b2db      	uxtb	r3, r3
 8018fc0:	2b18      	cmp	r3, #24
 8018fc2:	d82c      	bhi.n	801901e <__gethex+0x156>
 8018fc4:	f1a0 0210 	sub.w	r2, r0, #16
 8018fc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018fcc:	f7ff ff66 	bl	8018e9c <__hexdig_fun>
 8018fd0:	1e43      	subs	r3, r0, #1
 8018fd2:	b2db      	uxtb	r3, r3
 8018fd4:	2b18      	cmp	r3, #24
 8018fd6:	d91d      	bls.n	8019014 <__gethex+0x14c>
 8018fd8:	f1b9 0f00 	cmp.w	r9, #0
 8018fdc:	d000      	beq.n	8018fe0 <__gethex+0x118>
 8018fde:	4252      	negs	r2, r2
 8018fe0:	4415      	add	r5, r2
 8018fe2:	f8cb 1000 	str.w	r1, [fp]
 8018fe6:	b1e4      	cbz	r4, 8019022 <__gethex+0x15a>
 8018fe8:	9b00      	ldr	r3, [sp, #0]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	bf14      	ite	ne
 8018fee:	2700      	movne	r7, #0
 8018ff0:	2706      	moveq	r7, #6
 8018ff2:	4638      	mov	r0, r7
 8018ff4:	b009      	add	sp, #36	; 0x24
 8018ff6:	ecbd 8b02 	vpop	{d8}
 8018ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ffe:	463e      	mov	r6, r7
 8019000:	4625      	mov	r5, r4
 8019002:	2401      	movs	r4, #1
 8019004:	e7ca      	b.n	8018f9c <__gethex+0xd4>
 8019006:	f04f 0900 	mov.w	r9, #0
 801900a:	1cb1      	adds	r1, r6, #2
 801900c:	e7d3      	b.n	8018fb6 <__gethex+0xee>
 801900e:	f04f 0901 	mov.w	r9, #1
 8019012:	e7fa      	b.n	801900a <__gethex+0x142>
 8019014:	230a      	movs	r3, #10
 8019016:	fb03 0202 	mla	r2, r3, r2, r0
 801901a:	3a10      	subs	r2, #16
 801901c:	e7d4      	b.n	8018fc8 <__gethex+0x100>
 801901e:	4631      	mov	r1, r6
 8019020:	e7df      	b.n	8018fe2 <__gethex+0x11a>
 8019022:	1bf3      	subs	r3, r6, r7
 8019024:	3b01      	subs	r3, #1
 8019026:	4621      	mov	r1, r4
 8019028:	2b07      	cmp	r3, #7
 801902a:	dc0b      	bgt.n	8019044 <__gethex+0x17c>
 801902c:	ee18 0a10 	vmov	r0, s16
 8019030:	f000 fae0 	bl	80195f4 <_Balloc>
 8019034:	4604      	mov	r4, r0
 8019036:	b940      	cbnz	r0, 801904a <__gethex+0x182>
 8019038:	4b65      	ldr	r3, [pc, #404]	; (80191d0 <__gethex+0x308>)
 801903a:	4602      	mov	r2, r0
 801903c:	21de      	movs	r1, #222	; 0xde
 801903e:	4865      	ldr	r0, [pc, #404]	; (80191d4 <__gethex+0x30c>)
 8019040:	f7ff fe82 	bl	8018d48 <__assert_func>
 8019044:	3101      	adds	r1, #1
 8019046:	105b      	asrs	r3, r3, #1
 8019048:	e7ee      	b.n	8019028 <__gethex+0x160>
 801904a:	f100 0914 	add.w	r9, r0, #20
 801904e:	f04f 0b00 	mov.w	fp, #0
 8019052:	f1ca 0301 	rsb	r3, sl, #1
 8019056:	f8cd 9008 	str.w	r9, [sp, #8]
 801905a:	f8cd b000 	str.w	fp, [sp]
 801905e:	9306      	str	r3, [sp, #24]
 8019060:	42b7      	cmp	r7, r6
 8019062:	d340      	bcc.n	80190e6 <__gethex+0x21e>
 8019064:	9802      	ldr	r0, [sp, #8]
 8019066:	9b00      	ldr	r3, [sp, #0]
 8019068:	f840 3b04 	str.w	r3, [r0], #4
 801906c:	eba0 0009 	sub.w	r0, r0, r9
 8019070:	1080      	asrs	r0, r0, #2
 8019072:	0146      	lsls	r6, r0, #5
 8019074:	6120      	str	r0, [r4, #16]
 8019076:	4618      	mov	r0, r3
 8019078:	f000 fbb2 	bl	80197e0 <__hi0bits>
 801907c:	1a30      	subs	r0, r6, r0
 801907e:	f8d8 6000 	ldr.w	r6, [r8]
 8019082:	42b0      	cmp	r0, r6
 8019084:	dd63      	ble.n	801914e <__gethex+0x286>
 8019086:	1b87      	subs	r7, r0, r6
 8019088:	4639      	mov	r1, r7
 801908a:	4620      	mov	r0, r4
 801908c:	f000 ff4d 	bl	8019f2a <__any_on>
 8019090:	4682      	mov	sl, r0
 8019092:	b1a8      	cbz	r0, 80190c0 <__gethex+0x1f8>
 8019094:	1e7b      	subs	r3, r7, #1
 8019096:	1159      	asrs	r1, r3, #5
 8019098:	f003 021f 	and.w	r2, r3, #31
 801909c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80190a0:	f04f 0a01 	mov.w	sl, #1
 80190a4:	fa0a f202 	lsl.w	r2, sl, r2
 80190a8:	420a      	tst	r2, r1
 80190aa:	d009      	beq.n	80190c0 <__gethex+0x1f8>
 80190ac:	4553      	cmp	r3, sl
 80190ae:	dd05      	ble.n	80190bc <__gethex+0x1f4>
 80190b0:	1eb9      	subs	r1, r7, #2
 80190b2:	4620      	mov	r0, r4
 80190b4:	f000 ff39 	bl	8019f2a <__any_on>
 80190b8:	2800      	cmp	r0, #0
 80190ba:	d145      	bne.n	8019148 <__gethex+0x280>
 80190bc:	f04f 0a02 	mov.w	sl, #2
 80190c0:	4639      	mov	r1, r7
 80190c2:	4620      	mov	r0, r4
 80190c4:	f7ff fe98 	bl	8018df8 <rshift>
 80190c8:	443d      	add	r5, r7
 80190ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80190ce:	42ab      	cmp	r3, r5
 80190d0:	da4c      	bge.n	801916c <__gethex+0x2a4>
 80190d2:	ee18 0a10 	vmov	r0, s16
 80190d6:	4621      	mov	r1, r4
 80190d8:	f000 facc 	bl	8019674 <_Bfree>
 80190dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80190de:	2300      	movs	r3, #0
 80190e0:	6013      	str	r3, [r2, #0]
 80190e2:	27a3      	movs	r7, #163	; 0xa3
 80190e4:	e785      	b.n	8018ff2 <__gethex+0x12a>
 80190e6:	1e73      	subs	r3, r6, #1
 80190e8:	9a05      	ldr	r2, [sp, #20]
 80190ea:	9303      	str	r3, [sp, #12]
 80190ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80190f0:	4293      	cmp	r3, r2
 80190f2:	d019      	beq.n	8019128 <__gethex+0x260>
 80190f4:	f1bb 0f20 	cmp.w	fp, #32
 80190f8:	d107      	bne.n	801910a <__gethex+0x242>
 80190fa:	9b02      	ldr	r3, [sp, #8]
 80190fc:	9a00      	ldr	r2, [sp, #0]
 80190fe:	f843 2b04 	str.w	r2, [r3], #4
 8019102:	9302      	str	r3, [sp, #8]
 8019104:	2300      	movs	r3, #0
 8019106:	9300      	str	r3, [sp, #0]
 8019108:	469b      	mov	fp, r3
 801910a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801910e:	f7ff fec5 	bl	8018e9c <__hexdig_fun>
 8019112:	9b00      	ldr	r3, [sp, #0]
 8019114:	f000 000f 	and.w	r0, r0, #15
 8019118:	fa00 f00b 	lsl.w	r0, r0, fp
 801911c:	4303      	orrs	r3, r0
 801911e:	9300      	str	r3, [sp, #0]
 8019120:	f10b 0b04 	add.w	fp, fp, #4
 8019124:	9b03      	ldr	r3, [sp, #12]
 8019126:	e00d      	b.n	8019144 <__gethex+0x27c>
 8019128:	9b03      	ldr	r3, [sp, #12]
 801912a:	9a06      	ldr	r2, [sp, #24]
 801912c:	4413      	add	r3, r2
 801912e:	42bb      	cmp	r3, r7
 8019130:	d3e0      	bcc.n	80190f4 <__gethex+0x22c>
 8019132:	4618      	mov	r0, r3
 8019134:	9901      	ldr	r1, [sp, #4]
 8019136:	9307      	str	r3, [sp, #28]
 8019138:	4652      	mov	r2, sl
 801913a:	f7fe ff25 	bl	8017f88 <strncmp>
 801913e:	9b07      	ldr	r3, [sp, #28]
 8019140:	2800      	cmp	r0, #0
 8019142:	d1d7      	bne.n	80190f4 <__gethex+0x22c>
 8019144:	461e      	mov	r6, r3
 8019146:	e78b      	b.n	8019060 <__gethex+0x198>
 8019148:	f04f 0a03 	mov.w	sl, #3
 801914c:	e7b8      	b.n	80190c0 <__gethex+0x1f8>
 801914e:	da0a      	bge.n	8019166 <__gethex+0x29e>
 8019150:	1a37      	subs	r7, r6, r0
 8019152:	4621      	mov	r1, r4
 8019154:	ee18 0a10 	vmov	r0, s16
 8019158:	463a      	mov	r2, r7
 801915a:	f000 fca7 	bl	8019aac <__lshift>
 801915e:	1bed      	subs	r5, r5, r7
 8019160:	4604      	mov	r4, r0
 8019162:	f100 0914 	add.w	r9, r0, #20
 8019166:	f04f 0a00 	mov.w	sl, #0
 801916a:	e7ae      	b.n	80190ca <__gethex+0x202>
 801916c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019170:	42a8      	cmp	r0, r5
 8019172:	dd72      	ble.n	801925a <__gethex+0x392>
 8019174:	1b45      	subs	r5, r0, r5
 8019176:	42ae      	cmp	r6, r5
 8019178:	dc36      	bgt.n	80191e8 <__gethex+0x320>
 801917a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801917e:	2b02      	cmp	r3, #2
 8019180:	d02a      	beq.n	80191d8 <__gethex+0x310>
 8019182:	2b03      	cmp	r3, #3
 8019184:	d02c      	beq.n	80191e0 <__gethex+0x318>
 8019186:	2b01      	cmp	r3, #1
 8019188:	d115      	bne.n	80191b6 <__gethex+0x2ee>
 801918a:	42ae      	cmp	r6, r5
 801918c:	d113      	bne.n	80191b6 <__gethex+0x2ee>
 801918e:	2e01      	cmp	r6, #1
 8019190:	d10b      	bne.n	80191aa <__gethex+0x2e2>
 8019192:	9a04      	ldr	r2, [sp, #16]
 8019194:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019198:	6013      	str	r3, [r2, #0]
 801919a:	2301      	movs	r3, #1
 801919c:	6123      	str	r3, [r4, #16]
 801919e:	f8c9 3000 	str.w	r3, [r9]
 80191a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80191a4:	2762      	movs	r7, #98	; 0x62
 80191a6:	601c      	str	r4, [r3, #0]
 80191a8:	e723      	b.n	8018ff2 <__gethex+0x12a>
 80191aa:	1e71      	subs	r1, r6, #1
 80191ac:	4620      	mov	r0, r4
 80191ae:	f000 febc 	bl	8019f2a <__any_on>
 80191b2:	2800      	cmp	r0, #0
 80191b4:	d1ed      	bne.n	8019192 <__gethex+0x2ca>
 80191b6:	ee18 0a10 	vmov	r0, s16
 80191ba:	4621      	mov	r1, r4
 80191bc:	f000 fa5a 	bl	8019674 <_Bfree>
 80191c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80191c2:	2300      	movs	r3, #0
 80191c4:	6013      	str	r3, [r2, #0]
 80191c6:	2750      	movs	r7, #80	; 0x50
 80191c8:	e713      	b.n	8018ff2 <__gethex+0x12a>
 80191ca:	bf00      	nop
 80191cc:	0801dc38 	.word	0x0801dc38
 80191d0:	0801dbbc 	.word	0x0801dbbc
 80191d4:	0801dbcd 	.word	0x0801dbcd
 80191d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d1eb      	bne.n	80191b6 <__gethex+0x2ee>
 80191de:	e7d8      	b.n	8019192 <__gethex+0x2ca>
 80191e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d1d5      	bne.n	8019192 <__gethex+0x2ca>
 80191e6:	e7e6      	b.n	80191b6 <__gethex+0x2ee>
 80191e8:	1e6f      	subs	r7, r5, #1
 80191ea:	f1ba 0f00 	cmp.w	sl, #0
 80191ee:	d131      	bne.n	8019254 <__gethex+0x38c>
 80191f0:	b127      	cbz	r7, 80191fc <__gethex+0x334>
 80191f2:	4639      	mov	r1, r7
 80191f4:	4620      	mov	r0, r4
 80191f6:	f000 fe98 	bl	8019f2a <__any_on>
 80191fa:	4682      	mov	sl, r0
 80191fc:	117b      	asrs	r3, r7, #5
 80191fe:	2101      	movs	r1, #1
 8019200:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019204:	f007 071f 	and.w	r7, r7, #31
 8019208:	fa01 f707 	lsl.w	r7, r1, r7
 801920c:	421f      	tst	r7, r3
 801920e:	4629      	mov	r1, r5
 8019210:	4620      	mov	r0, r4
 8019212:	bf18      	it	ne
 8019214:	f04a 0a02 	orrne.w	sl, sl, #2
 8019218:	1b76      	subs	r6, r6, r5
 801921a:	f7ff fded 	bl	8018df8 <rshift>
 801921e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019222:	2702      	movs	r7, #2
 8019224:	f1ba 0f00 	cmp.w	sl, #0
 8019228:	d048      	beq.n	80192bc <__gethex+0x3f4>
 801922a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801922e:	2b02      	cmp	r3, #2
 8019230:	d015      	beq.n	801925e <__gethex+0x396>
 8019232:	2b03      	cmp	r3, #3
 8019234:	d017      	beq.n	8019266 <__gethex+0x39e>
 8019236:	2b01      	cmp	r3, #1
 8019238:	d109      	bne.n	801924e <__gethex+0x386>
 801923a:	f01a 0f02 	tst.w	sl, #2
 801923e:	d006      	beq.n	801924e <__gethex+0x386>
 8019240:	f8d9 0000 	ldr.w	r0, [r9]
 8019244:	ea4a 0a00 	orr.w	sl, sl, r0
 8019248:	f01a 0f01 	tst.w	sl, #1
 801924c:	d10e      	bne.n	801926c <__gethex+0x3a4>
 801924e:	f047 0710 	orr.w	r7, r7, #16
 8019252:	e033      	b.n	80192bc <__gethex+0x3f4>
 8019254:	f04f 0a01 	mov.w	sl, #1
 8019258:	e7d0      	b.n	80191fc <__gethex+0x334>
 801925a:	2701      	movs	r7, #1
 801925c:	e7e2      	b.n	8019224 <__gethex+0x35c>
 801925e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019260:	f1c3 0301 	rsb	r3, r3, #1
 8019264:	9315      	str	r3, [sp, #84]	; 0x54
 8019266:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019268:	2b00      	cmp	r3, #0
 801926a:	d0f0      	beq.n	801924e <__gethex+0x386>
 801926c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019270:	f104 0314 	add.w	r3, r4, #20
 8019274:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019278:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801927c:	f04f 0c00 	mov.w	ip, #0
 8019280:	4618      	mov	r0, r3
 8019282:	f853 2b04 	ldr.w	r2, [r3], #4
 8019286:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801928a:	d01c      	beq.n	80192c6 <__gethex+0x3fe>
 801928c:	3201      	adds	r2, #1
 801928e:	6002      	str	r2, [r0, #0]
 8019290:	2f02      	cmp	r7, #2
 8019292:	f104 0314 	add.w	r3, r4, #20
 8019296:	d13f      	bne.n	8019318 <__gethex+0x450>
 8019298:	f8d8 2000 	ldr.w	r2, [r8]
 801929c:	3a01      	subs	r2, #1
 801929e:	42b2      	cmp	r2, r6
 80192a0:	d10a      	bne.n	80192b8 <__gethex+0x3f0>
 80192a2:	1171      	asrs	r1, r6, #5
 80192a4:	2201      	movs	r2, #1
 80192a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80192aa:	f006 061f 	and.w	r6, r6, #31
 80192ae:	fa02 f606 	lsl.w	r6, r2, r6
 80192b2:	421e      	tst	r6, r3
 80192b4:	bf18      	it	ne
 80192b6:	4617      	movne	r7, r2
 80192b8:	f047 0720 	orr.w	r7, r7, #32
 80192bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80192be:	601c      	str	r4, [r3, #0]
 80192c0:	9b04      	ldr	r3, [sp, #16]
 80192c2:	601d      	str	r5, [r3, #0]
 80192c4:	e695      	b.n	8018ff2 <__gethex+0x12a>
 80192c6:	4299      	cmp	r1, r3
 80192c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80192cc:	d8d8      	bhi.n	8019280 <__gethex+0x3b8>
 80192ce:	68a3      	ldr	r3, [r4, #8]
 80192d0:	459b      	cmp	fp, r3
 80192d2:	db19      	blt.n	8019308 <__gethex+0x440>
 80192d4:	6861      	ldr	r1, [r4, #4]
 80192d6:	ee18 0a10 	vmov	r0, s16
 80192da:	3101      	adds	r1, #1
 80192dc:	f000 f98a 	bl	80195f4 <_Balloc>
 80192e0:	4681      	mov	r9, r0
 80192e2:	b918      	cbnz	r0, 80192ec <__gethex+0x424>
 80192e4:	4b1a      	ldr	r3, [pc, #104]	; (8019350 <__gethex+0x488>)
 80192e6:	4602      	mov	r2, r0
 80192e8:	2184      	movs	r1, #132	; 0x84
 80192ea:	e6a8      	b.n	801903e <__gethex+0x176>
 80192ec:	6922      	ldr	r2, [r4, #16]
 80192ee:	3202      	adds	r2, #2
 80192f0:	f104 010c 	add.w	r1, r4, #12
 80192f4:	0092      	lsls	r2, r2, #2
 80192f6:	300c      	adds	r0, #12
 80192f8:	f7fe fc2a 	bl	8017b50 <memcpy>
 80192fc:	4621      	mov	r1, r4
 80192fe:	ee18 0a10 	vmov	r0, s16
 8019302:	f000 f9b7 	bl	8019674 <_Bfree>
 8019306:	464c      	mov	r4, r9
 8019308:	6923      	ldr	r3, [r4, #16]
 801930a:	1c5a      	adds	r2, r3, #1
 801930c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019310:	6122      	str	r2, [r4, #16]
 8019312:	2201      	movs	r2, #1
 8019314:	615a      	str	r2, [r3, #20]
 8019316:	e7bb      	b.n	8019290 <__gethex+0x3c8>
 8019318:	6922      	ldr	r2, [r4, #16]
 801931a:	455a      	cmp	r2, fp
 801931c:	dd0b      	ble.n	8019336 <__gethex+0x46e>
 801931e:	2101      	movs	r1, #1
 8019320:	4620      	mov	r0, r4
 8019322:	f7ff fd69 	bl	8018df8 <rshift>
 8019326:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801932a:	3501      	adds	r5, #1
 801932c:	42ab      	cmp	r3, r5
 801932e:	f6ff aed0 	blt.w	80190d2 <__gethex+0x20a>
 8019332:	2701      	movs	r7, #1
 8019334:	e7c0      	b.n	80192b8 <__gethex+0x3f0>
 8019336:	f016 061f 	ands.w	r6, r6, #31
 801933a:	d0fa      	beq.n	8019332 <__gethex+0x46a>
 801933c:	449a      	add	sl, r3
 801933e:	f1c6 0620 	rsb	r6, r6, #32
 8019342:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019346:	f000 fa4b 	bl	80197e0 <__hi0bits>
 801934a:	42b0      	cmp	r0, r6
 801934c:	dbe7      	blt.n	801931e <__gethex+0x456>
 801934e:	e7f0      	b.n	8019332 <__gethex+0x46a>
 8019350:	0801dbbc 	.word	0x0801dbbc

08019354 <L_shift>:
 8019354:	f1c2 0208 	rsb	r2, r2, #8
 8019358:	0092      	lsls	r2, r2, #2
 801935a:	b570      	push	{r4, r5, r6, lr}
 801935c:	f1c2 0620 	rsb	r6, r2, #32
 8019360:	6843      	ldr	r3, [r0, #4]
 8019362:	6804      	ldr	r4, [r0, #0]
 8019364:	fa03 f506 	lsl.w	r5, r3, r6
 8019368:	432c      	orrs	r4, r5
 801936a:	40d3      	lsrs	r3, r2
 801936c:	6004      	str	r4, [r0, #0]
 801936e:	f840 3f04 	str.w	r3, [r0, #4]!
 8019372:	4288      	cmp	r0, r1
 8019374:	d3f4      	bcc.n	8019360 <L_shift+0xc>
 8019376:	bd70      	pop	{r4, r5, r6, pc}

08019378 <__match>:
 8019378:	b530      	push	{r4, r5, lr}
 801937a:	6803      	ldr	r3, [r0, #0]
 801937c:	3301      	adds	r3, #1
 801937e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019382:	b914      	cbnz	r4, 801938a <__match+0x12>
 8019384:	6003      	str	r3, [r0, #0]
 8019386:	2001      	movs	r0, #1
 8019388:	bd30      	pop	{r4, r5, pc}
 801938a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801938e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019392:	2d19      	cmp	r5, #25
 8019394:	bf98      	it	ls
 8019396:	3220      	addls	r2, #32
 8019398:	42a2      	cmp	r2, r4
 801939a:	d0f0      	beq.n	801937e <__match+0x6>
 801939c:	2000      	movs	r0, #0
 801939e:	e7f3      	b.n	8019388 <__match+0x10>

080193a0 <__hexnan>:
 80193a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a4:	680b      	ldr	r3, [r1, #0]
 80193a6:	6801      	ldr	r1, [r0, #0]
 80193a8:	115e      	asrs	r6, r3, #5
 80193aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80193ae:	f013 031f 	ands.w	r3, r3, #31
 80193b2:	b087      	sub	sp, #28
 80193b4:	bf18      	it	ne
 80193b6:	3604      	addne	r6, #4
 80193b8:	2500      	movs	r5, #0
 80193ba:	1f37      	subs	r7, r6, #4
 80193bc:	4682      	mov	sl, r0
 80193be:	4690      	mov	r8, r2
 80193c0:	9301      	str	r3, [sp, #4]
 80193c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80193c6:	46b9      	mov	r9, r7
 80193c8:	463c      	mov	r4, r7
 80193ca:	9502      	str	r5, [sp, #8]
 80193cc:	46ab      	mov	fp, r5
 80193ce:	784a      	ldrb	r2, [r1, #1]
 80193d0:	1c4b      	adds	r3, r1, #1
 80193d2:	9303      	str	r3, [sp, #12]
 80193d4:	b342      	cbz	r2, 8019428 <__hexnan+0x88>
 80193d6:	4610      	mov	r0, r2
 80193d8:	9105      	str	r1, [sp, #20]
 80193da:	9204      	str	r2, [sp, #16]
 80193dc:	f7ff fd5e 	bl	8018e9c <__hexdig_fun>
 80193e0:	2800      	cmp	r0, #0
 80193e2:	d14f      	bne.n	8019484 <__hexnan+0xe4>
 80193e4:	9a04      	ldr	r2, [sp, #16]
 80193e6:	9905      	ldr	r1, [sp, #20]
 80193e8:	2a20      	cmp	r2, #32
 80193ea:	d818      	bhi.n	801941e <__hexnan+0x7e>
 80193ec:	9b02      	ldr	r3, [sp, #8]
 80193ee:	459b      	cmp	fp, r3
 80193f0:	dd13      	ble.n	801941a <__hexnan+0x7a>
 80193f2:	454c      	cmp	r4, r9
 80193f4:	d206      	bcs.n	8019404 <__hexnan+0x64>
 80193f6:	2d07      	cmp	r5, #7
 80193f8:	dc04      	bgt.n	8019404 <__hexnan+0x64>
 80193fa:	462a      	mov	r2, r5
 80193fc:	4649      	mov	r1, r9
 80193fe:	4620      	mov	r0, r4
 8019400:	f7ff ffa8 	bl	8019354 <L_shift>
 8019404:	4544      	cmp	r4, r8
 8019406:	d950      	bls.n	80194aa <__hexnan+0x10a>
 8019408:	2300      	movs	r3, #0
 801940a:	f1a4 0904 	sub.w	r9, r4, #4
 801940e:	f844 3c04 	str.w	r3, [r4, #-4]
 8019412:	f8cd b008 	str.w	fp, [sp, #8]
 8019416:	464c      	mov	r4, r9
 8019418:	461d      	mov	r5, r3
 801941a:	9903      	ldr	r1, [sp, #12]
 801941c:	e7d7      	b.n	80193ce <__hexnan+0x2e>
 801941e:	2a29      	cmp	r2, #41	; 0x29
 8019420:	d156      	bne.n	80194d0 <__hexnan+0x130>
 8019422:	3102      	adds	r1, #2
 8019424:	f8ca 1000 	str.w	r1, [sl]
 8019428:	f1bb 0f00 	cmp.w	fp, #0
 801942c:	d050      	beq.n	80194d0 <__hexnan+0x130>
 801942e:	454c      	cmp	r4, r9
 8019430:	d206      	bcs.n	8019440 <__hexnan+0xa0>
 8019432:	2d07      	cmp	r5, #7
 8019434:	dc04      	bgt.n	8019440 <__hexnan+0xa0>
 8019436:	462a      	mov	r2, r5
 8019438:	4649      	mov	r1, r9
 801943a:	4620      	mov	r0, r4
 801943c:	f7ff ff8a 	bl	8019354 <L_shift>
 8019440:	4544      	cmp	r4, r8
 8019442:	d934      	bls.n	80194ae <__hexnan+0x10e>
 8019444:	f1a8 0204 	sub.w	r2, r8, #4
 8019448:	4623      	mov	r3, r4
 801944a:	f853 1b04 	ldr.w	r1, [r3], #4
 801944e:	f842 1f04 	str.w	r1, [r2, #4]!
 8019452:	429f      	cmp	r7, r3
 8019454:	d2f9      	bcs.n	801944a <__hexnan+0xaa>
 8019456:	1b3b      	subs	r3, r7, r4
 8019458:	f023 0303 	bic.w	r3, r3, #3
 801945c:	3304      	adds	r3, #4
 801945e:	3401      	adds	r4, #1
 8019460:	3e03      	subs	r6, #3
 8019462:	42b4      	cmp	r4, r6
 8019464:	bf88      	it	hi
 8019466:	2304      	movhi	r3, #4
 8019468:	4443      	add	r3, r8
 801946a:	2200      	movs	r2, #0
 801946c:	f843 2b04 	str.w	r2, [r3], #4
 8019470:	429f      	cmp	r7, r3
 8019472:	d2fb      	bcs.n	801946c <__hexnan+0xcc>
 8019474:	683b      	ldr	r3, [r7, #0]
 8019476:	b91b      	cbnz	r3, 8019480 <__hexnan+0xe0>
 8019478:	4547      	cmp	r7, r8
 801947a:	d127      	bne.n	80194cc <__hexnan+0x12c>
 801947c:	2301      	movs	r3, #1
 801947e:	603b      	str	r3, [r7, #0]
 8019480:	2005      	movs	r0, #5
 8019482:	e026      	b.n	80194d2 <__hexnan+0x132>
 8019484:	3501      	adds	r5, #1
 8019486:	2d08      	cmp	r5, #8
 8019488:	f10b 0b01 	add.w	fp, fp, #1
 801948c:	dd06      	ble.n	801949c <__hexnan+0xfc>
 801948e:	4544      	cmp	r4, r8
 8019490:	d9c3      	bls.n	801941a <__hexnan+0x7a>
 8019492:	2300      	movs	r3, #0
 8019494:	f844 3c04 	str.w	r3, [r4, #-4]
 8019498:	2501      	movs	r5, #1
 801949a:	3c04      	subs	r4, #4
 801949c:	6822      	ldr	r2, [r4, #0]
 801949e:	f000 000f 	and.w	r0, r0, #15
 80194a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80194a6:	6022      	str	r2, [r4, #0]
 80194a8:	e7b7      	b.n	801941a <__hexnan+0x7a>
 80194aa:	2508      	movs	r5, #8
 80194ac:	e7b5      	b.n	801941a <__hexnan+0x7a>
 80194ae:	9b01      	ldr	r3, [sp, #4]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d0df      	beq.n	8019474 <__hexnan+0xd4>
 80194b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80194b8:	f1c3 0320 	rsb	r3, r3, #32
 80194bc:	fa22 f303 	lsr.w	r3, r2, r3
 80194c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80194c4:	401a      	ands	r2, r3
 80194c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80194ca:	e7d3      	b.n	8019474 <__hexnan+0xd4>
 80194cc:	3f04      	subs	r7, #4
 80194ce:	e7d1      	b.n	8019474 <__hexnan+0xd4>
 80194d0:	2004      	movs	r0, #4
 80194d2:	b007      	add	sp, #28
 80194d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080194d8 <hash4>:
 80194d8:	4603      	mov	r3, r0
 80194da:	b510      	push	{r4, lr}
 80194dc:	4608      	mov	r0, r1
 80194de:	2900      	cmp	r1, #0
 80194e0:	d046      	beq.n	8019570 <hash4+0x98>
 80194e2:	1dcc      	adds	r4, r1, #7
 80194e4:	f001 0107 	and.w	r1, r1, #7
 80194e8:	3901      	subs	r1, #1
 80194ea:	08e4      	lsrs	r4, r4, #3
 80194ec:	2906      	cmp	r1, #6
 80194ee:	d805      	bhi.n	80194fc <hash4+0x24>
 80194f0:	e8df f001 	tbb	[pc, r1]
 80194f4:	36383a3c 	.word	0x36383a3c
 80194f8:	3234      	.short	0x3234
 80194fa:	30          	.byte	0x30
 80194fb:	00          	.byte	0x00
 80194fc:	2000      	movs	r0, #0
 80194fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019502:	eb00 1140 	add.w	r1, r0, r0, lsl #5
 8019506:	4411      	add	r1, r2
 8019508:	f813 2b01 	ldrb.w	r2, [r3], #1
 801950c:	eb01 1141 	add.w	r1, r1, r1, lsl #5
 8019510:	4411      	add	r1, r2
 8019512:	eb01 1241 	add.w	r2, r1, r1, lsl #5
 8019516:	f813 1b01 	ldrb.w	r1, [r3], #1
 801951a:	4411      	add	r1, r2
 801951c:	eb01 1241 	add.w	r2, r1, r1, lsl #5
 8019520:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019524:	4411      	add	r1, r2
 8019526:	eb01 1241 	add.w	r2, r1, r1, lsl #5
 801952a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801952e:	4411      	add	r1, r2
 8019530:	eb01 1241 	add.w	r2, r1, r1, lsl #5
 8019534:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019538:	4411      	add	r1, r2
 801953a:	eb01 1241 	add.w	r2, r1, r1, lsl #5
 801953e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019542:	4411      	add	r1, r2
 8019544:	eb01 1041 	add.w	r0, r1, r1, lsl #5
 8019548:	7819      	ldrb	r1, [r3, #0]
 801954a:	3c01      	subs	r4, #1
 801954c:	4408      	add	r0, r1
 801954e:	d00f      	beq.n	8019570 <hash4+0x98>
 8019550:	3301      	adds	r3, #1
 8019552:	e7d4      	b.n	80194fe <hash4+0x26>
 8019554:	2100      	movs	r1, #0
 8019556:	e7d7      	b.n	8019508 <hash4+0x30>
 8019558:	2100      	movs	r1, #0
 801955a:	e7da      	b.n	8019512 <hash4+0x3a>
 801955c:	2100      	movs	r1, #0
 801955e:	e7dd      	b.n	801951c <hash4+0x44>
 8019560:	2100      	movs	r1, #0
 8019562:	e7e0      	b.n	8019526 <hash4+0x4e>
 8019564:	2100      	movs	r1, #0
 8019566:	e7e3      	b.n	8019530 <hash4+0x58>
 8019568:	2100      	movs	r1, #0
 801956a:	e7e6      	b.n	801953a <hash4+0x62>
 801956c:	2100      	movs	r1, #0
 801956e:	e7e9      	b.n	8019544 <hash4+0x6c>
 8019570:	bd10      	pop	{r4, pc}
	...

08019574 <_isatty_r>:
 8019574:	b538      	push	{r3, r4, r5, lr}
 8019576:	4d06      	ldr	r5, [pc, #24]	; (8019590 <_isatty_r+0x1c>)
 8019578:	2300      	movs	r3, #0
 801957a:	4604      	mov	r4, r0
 801957c:	4608      	mov	r0, r1
 801957e:	602b      	str	r3, [r5, #0]
 8019580:	f7e7 fd21 	bl	8000fc6 <_isatty>
 8019584:	1c43      	adds	r3, r0, #1
 8019586:	d102      	bne.n	801958e <_isatty_r+0x1a>
 8019588:	682b      	ldr	r3, [r5, #0]
 801958a:	b103      	cbz	r3, 801958e <_isatty_r+0x1a>
 801958c:	6023      	str	r3, [r4, #0]
 801958e:	bd38      	pop	{r3, r4, r5, pc}
 8019590:	2400ee28 	.word	0x2400ee28

08019594 <_lseek_r>:
 8019594:	b538      	push	{r3, r4, r5, lr}
 8019596:	4d07      	ldr	r5, [pc, #28]	; (80195b4 <_lseek_r+0x20>)
 8019598:	4604      	mov	r4, r0
 801959a:	4608      	mov	r0, r1
 801959c:	4611      	mov	r1, r2
 801959e:	2200      	movs	r2, #0
 80195a0:	602a      	str	r2, [r5, #0]
 80195a2:	461a      	mov	r2, r3
 80195a4:	f7e7 fd1a 	bl	8000fdc <_lseek>
 80195a8:	1c43      	adds	r3, r0, #1
 80195aa:	d102      	bne.n	80195b2 <_lseek_r+0x1e>
 80195ac:	682b      	ldr	r3, [r5, #0]
 80195ae:	b103      	cbz	r3, 80195b2 <_lseek_r+0x1e>
 80195b0:	6023      	str	r3, [r4, #0]
 80195b2:	bd38      	pop	{r3, r4, r5, pc}
 80195b4:	2400ee28 	.word	0x2400ee28

080195b8 <__ascii_mbtowc>:
 80195b8:	b082      	sub	sp, #8
 80195ba:	b901      	cbnz	r1, 80195be <__ascii_mbtowc+0x6>
 80195bc:	a901      	add	r1, sp, #4
 80195be:	b142      	cbz	r2, 80195d2 <__ascii_mbtowc+0x1a>
 80195c0:	b14b      	cbz	r3, 80195d6 <__ascii_mbtowc+0x1e>
 80195c2:	7813      	ldrb	r3, [r2, #0]
 80195c4:	600b      	str	r3, [r1, #0]
 80195c6:	7812      	ldrb	r2, [r2, #0]
 80195c8:	1e10      	subs	r0, r2, #0
 80195ca:	bf18      	it	ne
 80195cc:	2001      	movne	r0, #1
 80195ce:	b002      	add	sp, #8
 80195d0:	4770      	bx	lr
 80195d2:	4610      	mov	r0, r2
 80195d4:	e7fb      	b.n	80195ce <__ascii_mbtowc+0x16>
 80195d6:	f06f 0001 	mvn.w	r0, #1
 80195da:	e7f8      	b.n	80195ce <__ascii_mbtowc+0x16>

080195dc <__malloc_lock>:
 80195dc:	4801      	ldr	r0, [pc, #4]	; (80195e4 <__malloc_lock+0x8>)
 80195de:	f7fe ba32 	b.w	8017a46 <__retarget_lock_acquire_recursive>
 80195e2:	bf00      	nop
 80195e4:	2400ee34 	.word	0x2400ee34

080195e8 <__malloc_unlock>:
 80195e8:	4801      	ldr	r0, [pc, #4]	; (80195f0 <__malloc_unlock+0x8>)
 80195ea:	f7fe ba2d 	b.w	8017a48 <__retarget_lock_release_recursive>
 80195ee:	bf00      	nop
 80195f0:	2400ee34 	.word	0x2400ee34

080195f4 <_Balloc>:
 80195f4:	b570      	push	{r4, r5, r6, lr}
 80195f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80195f8:	4604      	mov	r4, r0
 80195fa:	460d      	mov	r5, r1
 80195fc:	b976      	cbnz	r6, 801961c <_Balloc+0x28>
 80195fe:	2010      	movs	r0, #16
 8019600:	f7fe fa88 	bl	8017b14 <malloc>
 8019604:	4602      	mov	r2, r0
 8019606:	6260      	str	r0, [r4, #36]	; 0x24
 8019608:	b920      	cbnz	r0, 8019614 <_Balloc+0x20>
 801960a:	4b18      	ldr	r3, [pc, #96]	; (801966c <_Balloc+0x78>)
 801960c:	4818      	ldr	r0, [pc, #96]	; (8019670 <_Balloc+0x7c>)
 801960e:	2166      	movs	r1, #102	; 0x66
 8019610:	f7ff fb9a 	bl	8018d48 <__assert_func>
 8019614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019618:	6006      	str	r6, [r0, #0]
 801961a:	60c6      	str	r6, [r0, #12]
 801961c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801961e:	68f3      	ldr	r3, [r6, #12]
 8019620:	b183      	cbz	r3, 8019644 <_Balloc+0x50>
 8019622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019624:	68db      	ldr	r3, [r3, #12]
 8019626:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801962a:	b9b8      	cbnz	r0, 801965c <_Balloc+0x68>
 801962c:	2101      	movs	r1, #1
 801962e:	fa01 f605 	lsl.w	r6, r1, r5
 8019632:	1d72      	adds	r2, r6, #5
 8019634:	0092      	lsls	r2, r2, #2
 8019636:	4620      	mov	r0, r4
 8019638:	f000 fc98 	bl	8019f6c <_calloc_r>
 801963c:	b160      	cbz	r0, 8019658 <_Balloc+0x64>
 801963e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019642:	e00e      	b.n	8019662 <_Balloc+0x6e>
 8019644:	2221      	movs	r2, #33	; 0x21
 8019646:	2104      	movs	r1, #4
 8019648:	4620      	mov	r0, r4
 801964a:	f000 fc8f 	bl	8019f6c <_calloc_r>
 801964e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019650:	60f0      	str	r0, [r6, #12]
 8019652:	68db      	ldr	r3, [r3, #12]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d1e4      	bne.n	8019622 <_Balloc+0x2e>
 8019658:	2000      	movs	r0, #0
 801965a:	bd70      	pop	{r4, r5, r6, pc}
 801965c:	6802      	ldr	r2, [r0, #0]
 801965e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019662:	2300      	movs	r3, #0
 8019664:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019668:	e7f7      	b.n	801965a <_Balloc+0x66>
 801966a:	bf00      	nop
 801966c:	0801daa8 	.word	0x0801daa8
 8019670:	0801dc4c 	.word	0x0801dc4c

08019674 <_Bfree>:
 8019674:	b570      	push	{r4, r5, r6, lr}
 8019676:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019678:	4605      	mov	r5, r0
 801967a:	460c      	mov	r4, r1
 801967c:	b976      	cbnz	r6, 801969c <_Bfree+0x28>
 801967e:	2010      	movs	r0, #16
 8019680:	f7fe fa48 	bl	8017b14 <malloc>
 8019684:	4602      	mov	r2, r0
 8019686:	6268      	str	r0, [r5, #36]	; 0x24
 8019688:	b920      	cbnz	r0, 8019694 <_Bfree+0x20>
 801968a:	4b09      	ldr	r3, [pc, #36]	; (80196b0 <_Bfree+0x3c>)
 801968c:	4809      	ldr	r0, [pc, #36]	; (80196b4 <_Bfree+0x40>)
 801968e:	218a      	movs	r1, #138	; 0x8a
 8019690:	f7ff fb5a 	bl	8018d48 <__assert_func>
 8019694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019698:	6006      	str	r6, [r0, #0]
 801969a:	60c6      	str	r6, [r0, #12]
 801969c:	b13c      	cbz	r4, 80196ae <_Bfree+0x3a>
 801969e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80196a0:	6862      	ldr	r2, [r4, #4]
 80196a2:	68db      	ldr	r3, [r3, #12]
 80196a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80196a8:	6021      	str	r1, [r4, #0]
 80196aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80196ae:	bd70      	pop	{r4, r5, r6, pc}
 80196b0:	0801daa8 	.word	0x0801daa8
 80196b4:	0801dc4c 	.word	0x0801dc4c

080196b8 <__multadd>:
 80196b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196bc:	690e      	ldr	r6, [r1, #16]
 80196be:	4607      	mov	r7, r0
 80196c0:	4698      	mov	r8, r3
 80196c2:	460c      	mov	r4, r1
 80196c4:	f101 0014 	add.w	r0, r1, #20
 80196c8:	2300      	movs	r3, #0
 80196ca:	6805      	ldr	r5, [r0, #0]
 80196cc:	b2a9      	uxth	r1, r5
 80196ce:	fb02 8101 	mla	r1, r2, r1, r8
 80196d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80196d6:	0c2d      	lsrs	r5, r5, #16
 80196d8:	fb02 c505 	mla	r5, r2, r5, ip
 80196dc:	b289      	uxth	r1, r1
 80196de:	3301      	adds	r3, #1
 80196e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80196e4:	429e      	cmp	r6, r3
 80196e6:	f840 1b04 	str.w	r1, [r0], #4
 80196ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80196ee:	dcec      	bgt.n	80196ca <__multadd+0x12>
 80196f0:	f1b8 0f00 	cmp.w	r8, #0
 80196f4:	d022      	beq.n	801973c <__multadd+0x84>
 80196f6:	68a3      	ldr	r3, [r4, #8]
 80196f8:	42b3      	cmp	r3, r6
 80196fa:	dc19      	bgt.n	8019730 <__multadd+0x78>
 80196fc:	6861      	ldr	r1, [r4, #4]
 80196fe:	4638      	mov	r0, r7
 8019700:	3101      	adds	r1, #1
 8019702:	f7ff ff77 	bl	80195f4 <_Balloc>
 8019706:	4605      	mov	r5, r0
 8019708:	b928      	cbnz	r0, 8019716 <__multadd+0x5e>
 801970a:	4602      	mov	r2, r0
 801970c:	4b0d      	ldr	r3, [pc, #52]	; (8019744 <__multadd+0x8c>)
 801970e:	480e      	ldr	r0, [pc, #56]	; (8019748 <__multadd+0x90>)
 8019710:	21b5      	movs	r1, #181	; 0xb5
 8019712:	f7ff fb19 	bl	8018d48 <__assert_func>
 8019716:	6922      	ldr	r2, [r4, #16]
 8019718:	3202      	adds	r2, #2
 801971a:	f104 010c 	add.w	r1, r4, #12
 801971e:	0092      	lsls	r2, r2, #2
 8019720:	300c      	adds	r0, #12
 8019722:	f7fe fa15 	bl	8017b50 <memcpy>
 8019726:	4621      	mov	r1, r4
 8019728:	4638      	mov	r0, r7
 801972a:	f7ff ffa3 	bl	8019674 <_Bfree>
 801972e:	462c      	mov	r4, r5
 8019730:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019734:	3601      	adds	r6, #1
 8019736:	f8c3 8014 	str.w	r8, [r3, #20]
 801973a:	6126      	str	r6, [r4, #16]
 801973c:	4620      	mov	r0, r4
 801973e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019742:	bf00      	nop
 8019744:	0801dbbc 	.word	0x0801dbbc
 8019748:	0801dc4c 	.word	0x0801dc4c

0801974c <__s2b>:
 801974c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019750:	460c      	mov	r4, r1
 8019752:	4615      	mov	r5, r2
 8019754:	461f      	mov	r7, r3
 8019756:	2209      	movs	r2, #9
 8019758:	3308      	adds	r3, #8
 801975a:	4606      	mov	r6, r0
 801975c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019760:	2100      	movs	r1, #0
 8019762:	2201      	movs	r2, #1
 8019764:	429a      	cmp	r2, r3
 8019766:	db09      	blt.n	801977c <__s2b+0x30>
 8019768:	4630      	mov	r0, r6
 801976a:	f7ff ff43 	bl	80195f4 <_Balloc>
 801976e:	b940      	cbnz	r0, 8019782 <__s2b+0x36>
 8019770:	4602      	mov	r2, r0
 8019772:	4b19      	ldr	r3, [pc, #100]	; (80197d8 <__s2b+0x8c>)
 8019774:	4819      	ldr	r0, [pc, #100]	; (80197dc <__s2b+0x90>)
 8019776:	21ce      	movs	r1, #206	; 0xce
 8019778:	f7ff fae6 	bl	8018d48 <__assert_func>
 801977c:	0052      	lsls	r2, r2, #1
 801977e:	3101      	adds	r1, #1
 8019780:	e7f0      	b.n	8019764 <__s2b+0x18>
 8019782:	9b08      	ldr	r3, [sp, #32]
 8019784:	6143      	str	r3, [r0, #20]
 8019786:	2d09      	cmp	r5, #9
 8019788:	f04f 0301 	mov.w	r3, #1
 801978c:	6103      	str	r3, [r0, #16]
 801978e:	dd16      	ble.n	80197be <__s2b+0x72>
 8019790:	f104 0909 	add.w	r9, r4, #9
 8019794:	46c8      	mov	r8, r9
 8019796:	442c      	add	r4, r5
 8019798:	f818 3b01 	ldrb.w	r3, [r8], #1
 801979c:	4601      	mov	r1, r0
 801979e:	3b30      	subs	r3, #48	; 0x30
 80197a0:	220a      	movs	r2, #10
 80197a2:	4630      	mov	r0, r6
 80197a4:	f7ff ff88 	bl	80196b8 <__multadd>
 80197a8:	45a0      	cmp	r8, r4
 80197aa:	d1f5      	bne.n	8019798 <__s2b+0x4c>
 80197ac:	f1a5 0408 	sub.w	r4, r5, #8
 80197b0:	444c      	add	r4, r9
 80197b2:	1b2d      	subs	r5, r5, r4
 80197b4:	1963      	adds	r3, r4, r5
 80197b6:	42bb      	cmp	r3, r7
 80197b8:	db04      	blt.n	80197c4 <__s2b+0x78>
 80197ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197be:	340a      	adds	r4, #10
 80197c0:	2509      	movs	r5, #9
 80197c2:	e7f6      	b.n	80197b2 <__s2b+0x66>
 80197c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80197c8:	4601      	mov	r1, r0
 80197ca:	3b30      	subs	r3, #48	; 0x30
 80197cc:	220a      	movs	r2, #10
 80197ce:	4630      	mov	r0, r6
 80197d0:	f7ff ff72 	bl	80196b8 <__multadd>
 80197d4:	e7ee      	b.n	80197b4 <__s2b+0x68>
 80197d6:	bf00      	nop
 80197d8:	0801dbbc 	.word	0x0801dbbc
 80197dc:	0801dc4c 	.word	0x0801dc4c

080197e0 <__hi0bits>:
 80197e0:	0c03      	lsrs	r3, r0, #16
 80197e2:	041b      	lsls	r3, r3, #16
 80197e4:	b9d3      	cbnz	r3, 801981c <__hi0bits+0x3c>
 80197e6:	0400      	lsls	r0, r0, #16
 80197e8:	2310      	movs	r3, #16
 80197ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80197ee:	bf04      	itt	eq
 80197f0:	0200      	lsleq	r0, r0, #8
 80197f2:	3308      	addeq	r3, #8
 80197f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80197f8:	bf04      	itt	eq
 80197fa:	0100      	lsleq	r0, r0, #4
 80197fc:	3304      	addeq	r3, #4
 80197fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019802:	bf04      	itt	eq
 8019804:	0080      	lsleq	r0, r0, #2
 8019806:	3302      	addeq	r3, #2
 8019808:	2800      	cmp	r0, #0
 801980a:	db05      	blt.n	8019818 <__hi0bits+0x38>
 801980c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019810:	f103 0301 	add.w	r3, r3, #1
 8019814:	bf08      	it	eq
 8019816:	2320      	moveq	r3, #32
 8019818:	4618      	mov	r0, r3
 801981a:	4770      	bx	lr
 801981c:	2300      	movs	r3, #0
 801981e:	e7e4      	b.n	80197ea <__hi0bits+0xa>

08019820 <__lo0bits>:
 8019820:	6803      	ldr	r3, [r0, #0]
 8019822:	f013 0207 	ands.w	r2, r3, #7
 8019826:	4601      	mov	r1, r0
 8019828:	d00b      	beq.n	8019842 <__lo0bits+0x22>
 801982a:	07da      	lsls	r2, r3, #31
 801982c:	d424      	bmi.n	8019878 <__lo0bits+0x58>
 801982e:	0798      	lsls	r0, r3, #30
 8019830:	bf49      	itett	mi
 8019832:	085b      	lsrmi	r3, r3, #1
 8019834:	089b      	lsrpl	r3, r3, #2
 8019836:	2001      	movmi	r0, #1
 8019838:	600b      	strmi	r3, [r1, #0]
 801983a:	bf5c      	itt	pl
 801983c:	600b      	strpl	r3, [r1, #0]
 801983e:	2002      	movpl	r0, #2
 8019840:	4770      	bx	lr
 8019842:	b298      	uxth	r0, r3
 8019844:	b9b0      	cbnz	r0, 8019874 <__lo0bits+0x54>
 8019846:	0c1b      	lsrs	r3, r3, #16
 8019848:	2010      	movs	r0, #16
 801984a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801984e:	bf04      	itt	eq
 8019850:	0a1b      	lsreq	r3, r3, #8
 8019852:	3008      	addeq	r0, #8
 8019854:	071a      	lsls	r2, r3, #28
 8019856:	bf04      	itt	eq
 8019858:	091b      	lsreq	r3, r3, #4
 801985a:	3004      	addeq	r0, #4
 801985c:	079a      	lsls	r2, r3, #30
 801985e:	bf04      	itt	eq
 8019860:	089b      	lsreq	r3, r3, #2
 8019862:	3002      	addeq	r0, #2
 8019864:	07da      	lsls	r2, r3, #31
 8019866:	d403      	bmi.n	8019870 <__lo0bits+0x50>
 8019868:	085b      	lsrs	r3, r3, #1
 801986a:	f100 0001 	add.w	r0, r0, #1
 801986e:	d005      	beq.n	801987c <__lo0bits+0x5c>
 8019870:	600b      	str	r3, [r1, #0]
 8019872:	4770      	bx	lr
 8019874:	4610      	mov	r0, r2
 8019876:	e7e8      	b.n	801984a <__lo0bits+0x2a>
 8019878:	2000      	movs	r0, #0
 801987a:	4770      	bx	lr
 801987c:	2020      	movs	r0, #32
 801987e:	4770      	bx	lr

08019880 <__i2b>:
 8019880:	b510      	push	{r4, lr}
 8019882:	460c      	mov	r4, r1
 8019884:	2101      	movs	r1, #1
 8019886:	f7ff feb5 	bl	80195f4 <_Balloc>
 801988a:	4602      	mov	r2, r0
 801988c:	b928      	cbnz	r0, 801989a <__i2b+0x1a>
 801988e:	4b05      	ldr	r3, [pc, #20]	; (80198a4 <__i2b+0x24>)
 8019890:	4805      	ldr	r0, [pc, #20]	; (80198a8 <__i2b+0x28>)
 8019892:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019896:	f7ff fa57 	bl	8018d48 <__assert_func>
 801989a:	2301      	movs	r3, #1
 801989c:	6144      	str	r4, [r0, #20]
 801989e:	6103      	str	r3, [r0, #16]
 80198a0:	bd10      	pop	{r4, pc}
 80198a2:	bf00      	nop
 80198a4:	0801dbbc 	.word	0x0801dbbc
 80198a8:	0801dc4c 	.word	0x0801dc4c

080198ac <__multiply>:
 80198ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198b0:	4614      	mov	r4, r2
 80198b2:	690a      	ldr	r2, [r1, #16]
 80198b4:	6923      	ldr	r3, [r4, #16]
 80198b6:	429a      	cmp	r2, r3
 80198b8:	bfb8      	it	lt
 80198ba:	460b      	movlt	r3, r1
 80198bc:	460d      	mov	r5, r1
 80198be:	bfbc      	itt	lt
 80198c0:	4625      	movlt	r5, r4
 80198c2:	461c      	movlt	r4, r3
 80198c4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80198c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80198cc:	68ab      	ldr	r3, [r5, #8]
 80198ce:	6869      	ldr	r1, [r5, #4]
 80198d0:	eb0a 0709 	add.w	r7, sl, r9
 80198d4:	42bb      	cmp	r3, r7
 80198d6:	b085      	sub	sp, #20
 80198d8:	bfb8      	it	lt
 80198da:	3101      	addlt	r1, #1
 80198dc:	f7ff fe8a 	bl	80195f4 <_Balloc>
 80198e0:	b930      	cbnz	r0, 80198f0 <__multiply+0x44>
 80198e2:	4602      	mov	r2, r0
 80198e4:	4b42      	ldr	r3, [pc, #264]	; (80199f0 <__multiply+0x144>)
 80198e6:	4843      	ldr	r0, [pc, #268]	; (80199f4 <__multiply+0x148>)
 80198e8:	f240 115d 	movw	r1, #349	; 0x15d
 80198ec:	f7ff fa2c 	bl	8018d48 <__assert_func>
 80198f0:	f100 0614 	add.w	r6, r0, #20
 80198f4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80198f8:	4633      	mov	r3, r6
 80198fa:	2200      	movs	r2, #0
 80198fc:	4543      	cmp	r3, r8
 80198fe:	d31e      	bcc.n	801993e <__multiply+0x92>
 8019900:	f105 0c14 	add.w	ip, r5, #20
 8019904:	f104 0314 	add.w	r3, r4, #20
 8019908:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801990c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019910:	9202      	str	r2, [sp, #8]
 8019912:	ebac 0205 	sub.w	r2, ip, r5
 8019916:	3a15      	subs	r2, #21
 8019918:	f022 0203 	bic.w	r2, r2, #3
 801991c:	3204      	adds	r2, #4
 801991e:	f105 0115 	add.w	r1, r5, #21
 8019922:	458c      	cmp	ip, r1
 8019924:	bf38      	it	cc
 8019926:	2204      	movcc	r2, #4
 8019928:	9201      	str	r2, [sp, #4]
 801992a:	9a02      	ldr	r2, [sp, #8]
 801992c:	9303      	str	r3, [sp, #12]
 801992e:	429a      	cmp	r2, r3
 8019930:	d808      	bhi.n	8019944 <__multiply+0x98>
 8019932:	2f00      	cmp	r7, #0
 8019934:	dc55      	bgt.n	80199e2 <__multiply+0x136>
 8019936:	6107      	str	r7, [r0, #16]
 8019938:	b005      	add	sp, #20
 801993a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801993e:	f843 2b04 	str.w	r2, [r3], #4
 8019942:	e7db      	b.n	80198fc <__multiply+0x50>
 8019944:	f8b3 a000 	ldrh.w	sl, [r3]
 8019948:	f1ba 0f00 	cmp.w	sl, #0
 801994c:	d020      	beq.n	8019990 <__multiply+0xe4>
 801994e:	f105 0e14 	add.w	lr, r5, #20
 8019952:	46b1      	mov	r9, r6
 8019954:	2200      	movs	r2, #0
 8019956:	f85e 4b04 	ldr.w	r4, [lr], #4
 801995a:	f8d9 b000 	ldr.w	fp, [r9]
 801995e:	b2a1      	uxth	r1, r4
 8019960:	fa1f fb8b 	uxth.w	fp, fp
 8019964:	fb0a b101 	mla	r1, sl, r1, fp
 8019968:	4411      	add	r1, r2
 801996a:	f8d9 2000 	ldr.w	r2, [r9]
 801996e:	0c24      	lsrs	r4, r4, #16
 8019970:	0c12      	lsrs	r2, r2, #16
 8019972:	fb0a 2404 	mla	r4, sl, r4, r2
 8019976:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801997a:	b289      	uxth	r1, r1
 801997c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019980:	45f4      	cmp	ip, lr
 8019982:	f849 1b04 	str.w	r1, [r9], #4
 8019986:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801998a:	d8e4      	bhi.n	8019956 <__multiply+0xaa>
 801998c:	9901      	ldr	r1, [sp, #4]
 801998e:	5072      	str	r2, [r6, r1]
 8019990:	9a03      	ldr	r2, [sp, #12]
 8019992:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019996:	3304      	adds	r3, #4
 8019998:	f1b9 0f00 	cmp.w	r9, #0
 801999c:	d01f      	beq.n	80199de <__multiply+0x132>
 801999e:	6834      	ldr	r4, [r6, #0]
 80199a0:	f105 0114 	add.w	r1, r5, #20
 80199a4:	46b6      	mov	lr, r6
 80199a6:	f04f 0a00 	mov.w	sl, #0
 80199aa:	880a      	ldrh	r2, [r1, #0]
 80199ac:	f8be b002 	ldrh.w	fp, [lr, #2]
 80199b0:	fb09 b202 	mla	r2, r9, r2, fp
 80199b4:	4492      	add	sl, r2
 80199b6:	b2a4      	uxth	r4, r4
 80199b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80199bc:	f84e 4b04 	str.w	r4, [lr], #4
 80199c0:	f851 4b04 	ldr.w	r4, [r1], #4
 80199c4:	f8be 2000 	ldrh.w	r2, [lr]
 80199c8:	0c24      	lsrs	r4, r4, #16
 80199ca:	fb09 2404 	mla	r4, r9, r4, r2
 80199ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80199d2:	458c      	cmp	ip, r1
 80199d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80199d8:	d8e7      	bhi.n	80199aa <__multiply+0xfe>
 80199da:	9a01      	ldr	r2, [sp, #4]
 80199dc:	50b4      	str	r4, [r6, r2]
 80199de:	3604      	adds	r6, #4
 80199e0:	e7a3      	b.n	801992a <__multiply+0x7e>
 80199e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d1a5      	bne.n	8019936 <__multiply+0x8a>
 80199ea:	3f01      	subs	r7, #1
 80199ec:	e7a1      	b.n	8019932 <__multiply+0x86>
 80199ee:	bf00      	nop
 80199f0:	0801dbbc 	.word	0x0801dbbc
 80199f4:	0801dc4c 	.word	0x0801dc4c

080199f8 <__pow5mult>:
 80199f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199fc:	4615      	mov	r5, r2
 80199fe:	f012 0203 	ands.w	r2, r2, #3
 8019a02:	4606      	mov	r6, r0
 8019a04:	460f      	mov	r7, r1
 8019a06:	d007      	beq.n	8019a18 <__pow5mult+0x20>
 8019a08:	4c25      	ldr	r4, [pc, #148]	; (8019aa0 <__pow5mult+0xa8>)
 8019a0a:	3a01      	subs	r2, #1
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019a12:	f7ff fe51 	bl	80196b8 <__multadd>
 8019a16:	4607      	mov	r7, r0
 8019a18:	10ad      	asrs	r5, r5, #2
 8019a1a:	d03d      	beq.n	8019a98 <__pow5mult+0xa0>
 8019a1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019a1e:	b97c      	cbnz	r4, 8019a40 <__pow5mult+0x48>
 8019a20:	2010      	movs	r0, #16
 8019a22:	f7fe f877 	bl	8017b14 <malloc>
 8019a26:	4602      	mov	r2, r0
 8019a28:	6270      	str	r0, [r6, #36]	; 0x24
 8019a2a:	b928      	cbnz	r0, 8019a38 <__pow5mult+0x40>
 8019a2c:	4b1d      	ldr	r3, [pc, #116]	; (8019aa4 <__pow5mult+0xac>)
 8019a2e:	481e      	ldr	r0, [pc, #120]	; (8019aa8 <__pow5mult+0xb0>)
 8019a30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019a34:	f7ff f988 	bl	8018d48 <__assert_func>
 8019a38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019a3c:	6004      	str	r4, [r0, #0]
 8019a3e:	60c4      	str	r4, [r0, #12]
 8019a40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019a44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019a48:	b94c      	cbnz	r4, 8019a5e <__pow5mult+0x66>
 8019a4a:	f240 2171 	movw	r1, #625	; 0x271
 8019a4e:	4630      	mov	r0, r6
 8019a50:	f7ff ff16 	bl	8019880 <__i2b>
 8019a54:	2300      	movs	r3, #0
 8019a56:	f8c8 0008 	str.w	r0, [r8, #8]
 8019a5a:	4604      	mov	r4, r0
 8019a5c:	6003      	str	r3, [r0, #0]
 8019a5e:	f04f 0900 	mov.w	r9, #0
 8019a62:	07eb      	lsls	r3, r5, #31
 8019a64:	d50a      	bpl.n	8019a7c <__pow5mult+0x84>
 8019a66:	4639      	mov	r1, r7
 8019a68:	4622      	mov	r2, r4
 8019a6a:	4630      	mov	r0, r6
 8019a6c:	f7ff ff1e 	bl	80198ac <__multiply>
 8019a70:	4639      	mov	r1, r7
 8019a72:	4680      	mov	r8, r0
 8019a74:	4630      	mov	r0, r6
 8019a76:	f7ff fdfd 	bl	8019674 <_Bfree>
 8019a7a:	4647      	mov	r7, r8
 8019a7c:	106d      	asrs	r5, r5, #1
 8019a7e:	d00b      	beq.n	8019a98 <__pow5mult+0xa0>
 8019a80:	6820      	ldr	r0, [r4, #0]
 8019a82:	b938      	cbnz	r0, 8019a94 <__pow5mult+0x9c>
 8019a84:	4622      	mov	r2, r4
 8019a86:	4621      	mov	r1, r4
 8019a88:	4630      	mov	r0, r6
 8019a8a:	f7ff ff0f 	bl	80198ac <__multiply>
 8019a8e:	6020      	str	r0, [r4, #0]
 8019a90:	f8c0 9000 	str.w	r9, [r0]
 8019a94:	4604      	mov	r4, r0
 8019a96:	e7e4      	b.n	8019a62 <__pow5mult+0x6a>
 8019a98:	4638      	mov	r0, r7
 8019a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a9e:	bf00      	nop
 8019aa0:	0801dda0 	.word	0x0801dda0
 8019aa4:	0801daa8 	.word	0x0801daa8
 8019aa8:	0801dc4c 	.word	0x0801dc4c

08019aac <__lshift>:
 8019aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ab0:	460c      	mov	r4, r1
 8019ab2:	6849      	ldr	r1, [r1, #4]
 8019ab4:	6923      	ldr	r3, [r4, #16]
 8019ab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019aba:	68a3      	ldr	r3, [r4, #8]
 8019abc:	4607      	mov	r7, r0
 8019abe:	4691      	mov	r9, r2
 8019ac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019ac4:	f108 0601 	add.w	r6, r8, #1
 8019ac8:	42b3      	cmp	r3, r6
 8019aca:	db0b      	blt.n	8019ae4 <__lshift+0x38>
 8019acc:	4638      	mov	r0, r7
 8019ace:	f7ff fd91 	bl	80195f4 <_Balloc>
 8019ad2:	4605      	mov	r5, r0
 8019ad4:	b948      	cbnz	r0, 8019aea <__lshift+0x3e>
 8019ad6:	4602      	mov	r2, r0
 8019ad8:	4b28      	ldr	r3, [pc, #160]	; (8019b7c <__lshift+0xd0>)
 8019ada:	4829      	ldr	r0, [pc, #164]	; (8019b80 <__lshift+0xd4>)
 8019adc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019ae0:	f7ff f932 	bl	8018d48 <__assert_func>
 8019ae4:	3101      	adds	r1, #1
 8019ae6:	005b      	lsls	r3, r3, #1
 8019ae8:	e7ee      	b.n	8019ac8 <__lshift+0x1c>
 8019aea:	2300      	movs	r3, #0
 8019aec:	f100 0114 	add.w	r1, r0, #20
 8019af0:	f100 0210 	add.w	r2, r0, #16
 8019af4:	4618      	mov	r0, r3
 8019af6:	4553      	cmp	r3, sl
 8019af8:	db33      	blt.n	8019b62 <__lshift+0xb6>
 8019afa:	6920      	ldr	r0, [r4, #16]
 8019afc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019b00:	f104 0314 	add.w	r3, r4, #20
 8019b04:	f019 091f 	ands.w	r9, r9, #31
 8019b08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019b0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019b10:	d02b      	beq.n	8019b6a <__lshift+0xbe>
 8019b12:	f1c9 0e20 	rsb	lr, r9, #32
 8019b16:	468a      	mov	sl, r1
 8019b18:	2200      	movs	r2, #0
 8019b1a:	6818      	ldr	r0, [r3, #0]
 8019b1c:	fa00 f009 	lsl.w	r0, r0, r9
 8019b20:	4302      	orrs	r2, r0
 8019b22:	f84a 2b04 	str.w	r2, [sl], #4
 8019b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b2a:	459c      	cmp	ip, r3
 8019b2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8019b30:	d8f3      	bhi.n	8019b1a <__lshift+0x6e>
 8019b32:	ebac 0304 	sub.w	r3, ip, r4
 8019b36:	3b15      	subs	r3, #21
 8019b38:	f023 0303 	bic.w	r3, r3, #3
 8019b3c:	3304      	adds	r3, #4
 8019b3e:	f104 0015 	add.w	r0, r4, #21
 8019b42:	4584      	cmp	ip, r0
 8019b44:	bf38      	it	cc
 8019b46:	2304      	movcc	r3, #4
 8019b48:	50ca      	str	r2, [r1, r3]
 8019b4a:	b10a      	cbz	r2, 8019b50 <__lshift+0xa4>
 8019b4c:	f108 0602 	add.w	r6, r8, #2
 8019b50:	3e01      	subs	r6, #1
 8019b52:	4638      	mov	r0, r7
 8019b54:	612e      	str	r6, [r5, #16]
 8019b56:	4621      	mov	r1, r4
 8019b58:	f7ff fd8c 	bl	8019674 <_Bfree>
 8019b5c:	4628      	mov	r0, r5
 8019b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b62:	f842 0f04 	str.w	r0, [r2, #4]!
 8019b66:	3301      	adds	r3, #1
 8019b68:	e7c5      	b.n	8019af6 <__lshift+0x4a>
 8019b6a:	3904      	subs	r1, #4
 8019b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b70:	f841 2f04 	str.w	r2, [r1, #4]!
 8019b74:	459c      	cmp	ip, r3
 8019b76:	d8f9      	bhi.n	8019b6c <__lshift+0xc0>
 8019b78:	e7ea      	b.n	8019b50 <__lshift+0xa4>
 8019b7a:	bf00      	nop
 8019b7c:	0801dbbc 	.word	0x0801dbbc
 8019b80:	0801dc4c 	.word	0x0801dc4c

08019b84 <__mcmp>:
 8019b84:	b530      	push	{r4, r5, lr}
 8019b86:	6902      	ldr	r2, [r0, #16]
 8019b88:	690c      	ldr	r4, [r1, #16]
 8019b8a:	1b12      	subs	r2, r2, r4
 8019b8c:	d10e      	bne.n	8019bac <__mcmp+0x28>
 8019b8e:	f100 0314 	add.w	r3, r0, #20
 8019b92:	3114      	adds	r1, #20
 8019b94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019b98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019b9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019ba0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019ba4:	42a5      	cmp	r5, r4
 8019ba6:	d003      	beq.n	8019bb0 <__mcmp+0x2c>
 8019ba8:	d305      	bcc.n	8019bb6 <__mcmp+0x32>
 8019baa:	2201      	movs	r2, #1
 8019bac:	4610      	mov	r0, r2
 8019bae:	bd30      	pop	{r4, r5, pc}
 8019bb0:	4283      	cmp	r3, r0
 8019bb2:	d3f3      	bcc.n	8019b9c <__mcmp+0x18>
 8019bb4:	e7fa      	b.n	8019bac <__mcmp+0x28>
 8019bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019bba:	e7f7      	b.n	8019bac <__mcmp+0x28>

08019bbc <__mdiff>:
 8019bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bc0:	460c      	mov	r4, r1
 8019bc2:	4606      	mov	r6, r0
 8019bc4:	4611      	mov	r1, r2
 8019bc6:	4620      	mov	r0, r4
 8019bc8:	4617      	mov	r7, r2
 8019bca:	f7ff ffdb 	bl	8019b84 <__mcmp>
 8019bce:	1e05      	subs	r5, r0, #0
 8019bd0:	d110      	bne.n	8019bf4 <__mdiff+0x38>
 8019bd2:	4629      	mov	r1, r5
 8019bd4:	4630      	mov	r0, r6
 8019bd6:	f7ff fd0d 	bl	80195f4 <_Balloc>
 8019bda:	b930      	cbnz	r0, 8019bea <__mdiff+0x2e>
 8019bdc:	4b39      	ldr	r3, [pc, #228]	; (8019cc4 <__mdiff+0x108>)
 8019bde:	4602      	mov	r2, r0
 8019be0:	f240 2132 	movw	r1, #562	; 0x232
 8019be4:	4838      	ldr	r0, [pc, #224]	; (8019cc8 <__mdiff+0x10c>)
 8019be6:	f7ff f8af 	bl	8018d48 <__assert_func>
 8019bea:	2301      	movs	r3, #1
 8019bec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019bf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bf4:	bfa4      	itt	ge
 8019bf6:	463b      	movge	r3, r7
 8019bf8:	4627      	movge	r7, r4
 8019bfa:	4630      	mov	r0, r6
 8019bfc:	6879      	ldr	r1, [r7, #4]
 8019bfe:	bfa6      	itte	ge
 8019c00:	461c      	movge	r4, r3
 8019c02:	2500      	movge	r5, #0
 8019c04:	2501      	movlt	r5, #1
 8019c06:	f7ff fcf5 	bl	80195f4 <_Balloc>
 8019c0a:	b920      	cbnz	r0, 8019c16 <__mdiff+0x5a>
 8019c0c:	4b2d      	ldr	r3, [pc, #180]	; (8019cc4 <__mdiff+0x108>)
 8019c0e:	4602      	mov	r2, r0
 8019c10:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019c14:	e7e6      	b.n	8019be4 <__mdiff+0x28>
 8019c16:	693e      	ldr	r6, [r7, #16]
 8019c18:	60c5      	str	r5, [r0, #12]
 8019c1a:	6925      	ldr	r5, [r4, #16]
 8019c1c:	f107 0114 	add.w	r1, r7, #20
 8019c20:	f104 0914 	add.w	r9, r4, #20
 8019c24:	f100 0e14 	add.w	lr, r0, #20
 8019c28:	f107 0210 	add.w	r2, r7, #16
 8019c2c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019c30:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019c34:	46f2      	mov	sl, lr
 8019c36:	2700      	movs	r7, #0
 8019c38:	f859 3b04 	ldr.w	r3, [r9], #4
 8019c3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019c40:	fa1f f883 	uxth.w	r8, r3
 8019c44:	fa17 f78b 	uxtah	r7, r7, fp
 8019c48:	0c1b      	lsrs	r3, r3, #16
 8019c4a:	eba7 0808 	sub.w	r8, r7, r8
 8019c4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019c52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019c56:	fa1f f888 	uxth.w	r8, r8
 8019c5a:	141f      	asrs	r7, r3, #16
 8019c5c:	454d      	cmp	r5, r9
 8019c5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019c62:	f84a 3b04 	str.w	r3, [sl], #4
 8019c66:	d8e7      	bhi.n	8019c38 <__mdiff+0x7c>
 8019c68:	1b2b      	subs	r3, r5, r4
 8019c6a:	3b15      	subs	r3, #21
 8019c6c:	f023 0303 	bic.w	r3, r3, #3
 8019c70:	3304      	adds	r3, #4
 8019c72:	3415      	adds	r4, #21
 8019c74:	42a5      	cmp	r5, r4
 8019c76:	bf38      	it	cc
 8019c78:	2304      	movcc	r3, #4
 8019c7a:	4419      	add	r1, r3
 8019c7c:	4473      	add	r3, lr
 8019c7e:	469e      	mov	lr, r3
 8019c80:	460d      	mov	r5, r1
 8019c82:	4565      	cmp	r5, ip
 8019c84:	d30e      	bcc.n	8019ca4 <__mdiff+0xe8>
 8019c86:	f10c 0203 	add.w	r2, ip, #3
 8019c8a:	1a52      	subs	r2, r2, r1
 8019c8c:	f022 0203 	bic.w	r2, r2, #3
 8019c90:	3903      	subs	r1, #3
 8019c92:	458c      	cmp	ip, r1
 8019c94:	bf38      	it	cc
 8019c96:	2200      	movcc	r2, #0
 8019c98:	441a      	add	r2, r3
 8019c9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019c9e:	b17b      	cbz	r3, 8019cc0 <__mdiff+0x104>
 8019ca0:	6106      	str	r6, [r0, #16]
 8019ca2:	e7a5      	b.n	8019bf0 <__mdiff+0x34>
 8019ca4:	f855 8b04 	ldr.w	r8, [r5], #4
 8019ca8:	fa17 f488 	uxtah	r4, r7, r8
 8019cac:	1422      	asrs	r2, r4, #16
 8019cae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019cb2:	b2a4      	uxth	r4, r4
 8019cb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019cb8:	f84e 4b04 	str.w	r4, [lr], #4
 8019cbc:	1417      	asrs	r7, r2, #16
 8019cbe:	e7e0      	b.n	8019c82 <__mdiff+0xc6>
 8019cc0:	3e01      	subs	r6, #1
 8019cc2:	e7ea      	b.n	8019c9a <__mdiff+0xde>
 8019cc4:	0801dbbc 	.word	0x0801dbbc
 8019cc8:	0801dc4c 	.word	0x0801dc4c

08019ccc <__ulp>:
 8019ccc:	b082      	sub	sp, #8
 8019cce:	ed8d 0b00 	vstr	d0, [sp]
 8019cd2:	9b01      	ldr	r3, [sp, #4]
 8019cd4:	4912      	ldr	r1, [pc, #72]	; (8019d20 <__ulp+0x54>)
 8019cd6:	4019      	ands	r1, r3
 8019cd8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019cdc:	2900      	cmp	r1, #0
 8019cde:	dd05      	ble.n	8019cec <__ulp+0x20>
 8019ce0:	2200      	movs	r2, #0
 8019ce2:	460b      	mov	r3, r1
 8019ce4:	ec43 2b10 	vmov	d0, r2, r3
 8019ce8:	b002      	add	sp, #8
 8019cea:	4770      	bx	lr
 8019cec:	4249      	negs	r1, r1
 8019cee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019cf2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019cf6:	f04f 0200 	mov.w	r2, #0
 8019cfa:	f04f 0300 	mov.w	r3, #0
 8019cfe:	da04      	bge.n	8019d0a <__ulp+0x3e>
 8019d00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019d04:	fa41 f300 	asr.w	r3, r1, r0
 8019d08:	e7ec      	b.n	8019ce4 <__ulp+0x18>
 8019d0a:	f1a0 0114 	sub.w	r1, r0, #20
 8019d0e:	291e      	cmp	r1, #30
 8019d10:	bfda      	itte	le
 8019d12:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019d16:	fa20 f101 	lsrle.w	r1, r0, r1
 8019d1a:	2101      	movgt	r1, #1
 8019d1c:	460a      	mov	r2, r1
 8019d1e:	e7e1      	b.n	8019ce4 <__ulp+0x18>
 8019d20:	7ff00000 	.word	0x7ff00000

08019d24 <__b2d>:
 8019d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d26:	6905      	ldr	r5, [r0, #16]
 8019d28:	f100 0714 	add.w	r7, r0, #20
 8019d2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019d30:	1f2e      	subs	r6, r5, #4
 8019d32:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019d36:	4620      	mov	r0, r4
 8019d38:	f7ff fd52 	bl	80197e0 <__hi0bits>
 8019d3c:	f1c0 0320 	rsb	r3, r0, #32
 8019d40:	280a      	cmp	r0, #10
 8019d42:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019dc0 <__b2d+0x9c>
 8019d46:	600b      	str	r3, [r1, #0]
 8019d48:	dc14      	bgt.n	8019d74 <__b2d+0x50>
 8019d4a:	f1c0 0e0b 	rsb	lr, r0, #11
 8019d4e:	fa24 f10e 	lsr.w	r1, r4, lr
 8019d52:	42b7      	cmp	r7, r6
 8019d54:	ea41 030c 	orr.w	r3, r1, ip
 8019d58:	bf34      	ite	cc
 8019d5a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019d5e:	2100      	movcs	r1, #0
 8019d60:	3015      	adds	r0, #21
 8019d62:	fa04 f000 	lsl.w	r0, r4, r0
 8019d66:	fa21 f10e 	lsr.w	r1, r1, lr
 8019d6a:	ea40 0201 	orr.w	r2, r0, r1
 8019d6e:	ec43 2b10 	vmov	d0, r2, r3
 8019d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d74:	42b7      	cmp	r7, r6
 8019d76:	bf3a      	itte	cc
 8019d78:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019d7c:	f1a5 0608 	subcc.w	r6, r5, #8
 8019d80:	2100      	movcs	r1, #0
 8019d82:	380b      	subs	r0, #11
 8019d84:	d017      	beq.n	8019db6 <__b2d+0x92>
 8019d86:	f1c0 0c20 	rsb	ip, r0, #32
 8019d8a:	fa04 f500 	lsl.w	r5, r4, r0
 8019d8e:	42be      	cmp	r6, r7
 8019d90:	fa21 f40c 	lsr.w	r4, r1, ip
 8019d94:	ea45 0504 	orr.w	r5, r5, r4
 8019d98:	bf8c      	ite	hi
 8019d9a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019d9e:	2400      	movls	r4, #0
 8019da0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019da4:	fa01 f000 	lsl.w	r0, r1, r0
 8019da8:	fa24 f40c 	lsr.w	r4, r4, ip
 8019dac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019db0:	ea40 0204 	orr.w	r2, r0, r4
 8019db4:	e7db      	b.n	8019d6e <__b2d+0x4a>
 8019db6:	ea44 030c 	orr.w	r3, r4, ip
 8019dba:	460a      	mov	r2, r1
 8019dbc:	e7d7      	b.n	8019d6e <__b2d+0x4a>
 8019dbe:	bf00      	nop
 8019dc0:	3ff00000 	.word	0x3ff00000

08019dc4 <__d2b>:
 8019dc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019dc8:	4689      	mov	r9, r1
 8019dca:	2101      	movs	r1, #1
 8019dcc:	ec57 6b10 	vmov	r6, r7, d0
 8019dd0:	4690      	mov	r8, r2
 8019dd2:	f7ff fc0f 	bl	80195f4 <_Balloc>
 8019dd6:	4604      	mov	r4, r0
 8019dd8:	b930      	cbnz	r0, 8019de8 <__d2b+0x24>
 8019dda:	4602      	mov	r2, r0
 8019ddc:	4b25      	ldr	r3, [pc, #148]	; (8019e74 <__d2b+0xb0>)
 8019dde:	4826      	ldr	r0, [pc, #152]	; (8019e78 <__d2b+0xb4>)
 8019de0:	f240 310a 	movw	r1, #778	; 0x30a
 8019de4:	f7fe ffb0 	bl	8018d48 <__assert_func>
 8019de8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019dec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019df0:	bb35      	cbnz	r5, 8019e40 <__d2b+0x7c>
 8019df2:	2e00      	cmp	r6, #0
 8019df4:	9301      	str	r3, [sp, #4]
 8019df6:	d028      	beq.n	8019e4a <__d2b+0x86>
 8019df8:	4668      	mov	r0, sp
 8019dfa:	9600      	str	r6, [sp, #0]
 8019dfc:	f7ff fd10 	bl	8019820 <__lo0bits>
 8019e00:	9900      	ldr	r1, [sp, #0]
 8019e02:	b300      	cbz	r0, 8019e46 <__d2b+0x82>
 8019e04:	9a01      	ldr	r2, [sp, #4]
 8019e06:	f1c0 0320 	rsb	r3, r0, #32
 8019e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8019e0e:	430b      	orrs	r3, r1
 8019e10:	40c2      	lsrs	r2, r0
 8019e12:	6163      	str	r3, [r4, #20]
 8019e14:	9201      	str	r2, [sp, #4]
 8019e16:	9b01      	ldr	r3, [sp, #4]
 8019e18:	61a3      	str	r3, [r4, #24]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	bf14      	ite	ne
 8019e1e:	2202      	movne	r2, #2
 8019e20:	2201      	moveq	r2, #1
 8019e22:	6122      	str	r2, [r4, #16]
 8019e24:	b1d5      	cbz	r5, 8019e5c <__d2b+0x98>
 8019e26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019e2a:	4405      	add	r5, r0
 8019e2c:	f8c9 5000 	str.w	r5, [r9]
 8019e30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019e34:	f8c8 0000 	str.w	r0, [r8]
 8019e38:	4620      	mov	r0, r4
 8019e3a:	b003      	add	sp, #12
 8019e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019e44:	e7d5      	b.n	8019df2 <__d2b+0x2e>
 8019e46:	6161      	str	r1, [r4, #20]
 8019e48:	e7e5      	b.n	8019e16 <__d2b+0x52>
 8019e4a:	a801      	add	r0, sp, #4
 8019e4c:	f7ff fce8 	bl	8019820 <__lo0bits>
 8019e50:	9b01      	ldr	r3, [sp, #4]
 8019e52:	6163      	str	r3, [r4, #20]
 8019e54:	2201      	movs	r2, #1
 8019e56:	6122      	str	r2, [r4, #16]
 8019e58:	3020      	adds	r0, #32
 8019e5a:	e7e3      	b.n	8019e24 <__d2b+0x60>
 8019e5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019e60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019e64:	f8c9 0000 	str.w	r0, [r9]
 8019e68:	6918      	ldr	r0, [r3, #16]
 8019e6a:	f7ff fcb9 	bl	80197e0 <__hi0bits>
 8019e6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019e72:	e7df      	b.n	8019e34 <__d2b+0x70>
 8019e74:	0801dbbc 	.word	0x0801dbbc
 8019e78:	0801dc4c 	.word	0x0801dc4c

08019e7c <__ratio>:
 8019e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e80:	468a      	mov	sl, r1
 8019e82:	4669      	mov	r1, sp
 8019e84:	4683      	mov	fp, r0
 8019e86:	f7ff ff4d 	bl	8019d24 <__b2d>
 8019e8a:	a901      	add	r1, sp, #4
 8019e8c:	4650      	mov	r0, sl
 8019e8e:	ec59 8b10 	vmov	r8, r9, d0
 8019e92:	ee10 6a10 	vmov	r6, s0
 8019e96:	f7ff ff45 	bl	8019d24 <__b2d>
 8019e9a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8019e9e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8019ea2:	eba3 0c02 	sub.w	ip, r3, r2
 8019ea6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019eaa:	1a9b      	subs	r3, r3, r2
 8019eac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019eb0:	ec55 4b10 	vmov	r4, r5, d0
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	ee10 0a10 	vmov	r0, s0
 8019eba:	bfce      	itee	gt
 8019ebc:	464a      	movgt	r2, r9
 8019ebe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019ec2:	462a      	movle	r2, r5
 8019ec4:	464f      	mov	r7, r9
 8019ec6:	4629      	mov	r1, r5
 8019ec8:	bfcc      	ite	gt
 8019eca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019ece:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019ed2:	ec47 6b17 	vmov	d7, r6, r7
 8019ed6:	ec41 0b16 	vmov	d6, r0, r1
 8019eda:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8019ede:	b003      	add	sp, #12
 8019ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019ee4 <__copybits>:
 8019ee4:	3901      	subs	r1, #1
 8019ee6:	b570      	push	{r4, r5, r6, lr}
 8019ee8:	1149      	asrs	r1, r1, #5
 8019eea:	6914      	ldr	r4, [r2, #16]
 8019eec:	3101      	adds	r1, #1
 8019eee:	f102 0314 	add.w	r3, r2, #20
 8019ef2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019ef6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019efa:	1f05      	subs	r5, r0, #4
 8019efc:	42a3      	cmp	r3, r4
 8019efe:	d30c      	bcc.n	8019f1a <__copybits+0x36>
 8019f00:	1aa3      	subs	r3, r4, r2
 8019f02:	3b11      	subs	r3, #17
 8019f04:	f023 0303 	bic.w	r3, r3, #3
 8019f08:	3211      	adds	r2, #17
 8019f0a:	42a2      	cmp	r2, r4
 8019f0c:	bf88      	it	hi
 8019f0e:	2300      	movhi	r3, #0
 8019f10:	4418      	add	r0, r3
 8019f12:	2300      	movs	r3, #0
 8019f14:	4288      	cmp	r0, r1
 8019f16:	d305      	bcc.n	8019f24 <__copybits+0x40>
 8019f18:	bd70      	pop	{r4, r5, r6, pc}
 8019f1a:	f853 6b04 	ldr.w	r6, [r3], #4
 8019f1e:	f845 6f04 	str.w	r6, [r5, #4]!
 8019f22:	e7eb      	b.n	8019efc <__copybits+0x18>
 8019f24:	f840 3b04 	str.w	r3, [r0], #4
 8019f28:	e7f4      	b.n	8019f14 <__copybits+0x30>

08019f2a <__any_on>:
 8019f2a:	f100 0214 	add.w	r2, r0, #20
 8019f2e:	6900      	ldr	r0, [r0, #16]
 8019f30:	114b      	asrs	r3, r1, #5
 8019f32:	4298      	cmp	r0, r3
 8019f34:	b510      	push	{r4, lr}
 8019f36:	db11      	blt.n	8019f5c <__any_on+0x32>
 8019f38:	dd0a      	ble.n	8019f50 <__any_on+0x26>
 8019f3a:	f011 011f 	ands.w	r1, r1, #31
 8019f3e:	d007      	beq.n	8019f50 <__any_on+0x26>
 8019f40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019f44:	fa24 f001 	lsr.w	r0, r4, r1
 8019f48:	fa00 f101 	lsl.w	r1, r0, r1
 8019f4c:	428c      	cmp	r4, r1
 8019f4e:	d10b      	bne.n	8019f68 <__any_on+0x3e>
 8019f50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019f54:	4293      	cmp	r3, r2
 8019f56:	d803      	bhi.n	8019f60 <__any_on+0x36>
 8019f58:	2000      	movs	r0, #0
 8019f5a:	bd10      	pop	{r4, pc}
 8019f5c:	4603      	mov	r3, r0
 8019f5e:	e7f7      	b.n	8019f50 <__any_on+0x26>
 8019f60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019f64:	2900      	cmp	r1, #0
 8019f66:	d0f5      	beq.n	8019f54 <__any_on+0x2a>
 8019f68:	2001      	movs	r0, #1
 8019f6a:	e7f6      	b.n	8019f5a <__any_on+0x30>

08019f6c <_calloc_r>:
 8019f6c:	b513      	push	{r0, r1, r4, lr}
 8019f6e:	434a      	muls	r2, r1
 8019f70:	4611      	mov	r1, r2
 8019f72:	9201      	str	r2, [sp, #4]
 8019f74:	f7fd fe6c 	bl	8017c50 <_malloc_r>
 8019f78:	4604      	mov	r4, r0
 8019f7a:	b118      	cbz	r0, 8019f84 <_calloc_r+0x18>
 8019f7c:	9a01      	ldr	r2, [sp, #4]
 8019f7e:	2100      	movs	r1, #0
 8019f80:	f7fd fe0e 	bl	8017ba0 <memset>
 8019f84:	4620      	mov	r0, r4
 8019f86:	b002      	add	sp, #8
 8019f88:	bd10      	pop	{r4, pc}

08019f8a <__ssputs_r>:
 8019f8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f8e:	688e      	ldr	r6, [r1, #8]
 8019f90:	429e      	cmp	r6, r3
 8019f92:	4682      	mov	sl, r0
 8019f94:	460c      	mov	r4, r1
 8019f96:	4690      	mov	r8, r2
 8019f98:	461f      	mov	r7, r3
 8019f9a:	d838      	bhi.n	801a00e <__ssputs_r+0x84>
 8019f9c:	898a      	ldrh	r2, [r1, #12]
 8019f9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019fa2:	d032      	beq.n	801a00a <__ssputs_r+0x80>
 8019fa4:	6825      	ldr	r5, [r4, #0]
 8019fa6:	6909      	ldr	r1, [r1, #16]
 8019fa8:	eba5 0901 	sub.w	r9, r5, r1
 8019fac:	6965      	ldr	r5, [r4, #20]
 8019fae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019fb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019fb6:	3301      	adds	r3, #1
 8019fb8:	444b      	add	r3, r9
 8019fba:	106d      	asrs	r5, r5, #1
 8019fbc:	429d      	cmp	r5, r3
 8019fbe:	bf38      	it	cc
 8019fc0:	461d      	movcc	r5, r3
 8019fc2:	0553      	lsls	r3, r2, #21
 8019fc4:	d531      	bpl.n	801a02a <__ssputs_r+0xa0>
 8019fc6:	4629      	mov	r1, r5
 8019fc8:	f7fd fe42 	bl	8017c50 <_malloc_r>
 8019fcc:	4606      	mov	r6, r0
 8019fce:	b950      	cbnz	r0, 8019fe6 <__ssputs_r+0x5c>
 8019fd0:	230c      	movs	r3, #12
 8019fd2:	f8ca 3000 	str.w	r3, [sl]
 8019fd6:	89a3      	ldrh	r3, [r4, #12]
 8019fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019fdc:	81a3      	strh	r3, [r4, #12]
 8019fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fe6:	6921      	ldr	r1, [r4, #16]
 8019fe8:	464a      	mov	r2, r9
 8019fea:	f7fd fdb1 	bl	8017b50 <memcpy>
 8019fee:	89a3      	ldrh	r3, [r4, #12]
 8019ff0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ff8:	81a3      	strh	r3, [r4, #12]
 8019ffa:	6126      	str	r6, [r4, #16]
 8019ffc:	6165      	str	r5, [r4, #20]
 8019ffe:	444e      	add	r6, r9
 801a000:	eba5 0509 	sub.w	r5, r5, r9
 801a004:	6026      	str	r6, [r4, #0]
 801a006:	60a5      	str	r5, [r4, #8]
 801a008:	463e      	mov	r6, r7
 801a00a:	42be      	cmp	r6, r7
 801a00c:	d900      	bls.n	801a010 <__ssputs_r+0x86>
 801a00e:	463e      	mov	r6, r7
 801a010:	4632      	mov	r2, r6
 801a012:	6820      	ldr	r0, [r4, #0]
 801a014:	4641      	mov	r1, r8
 801a016:	f7fd fda9 	bl	8017b6c <memmove>
 801a01a:	68a3      	ldr	r3, [r4, #8]
 801a01c:	6822      	ldr	r2, [r4, #0]
 801a01e:	1b9b      	subs	r3, r3, r6
 801a020:	4432      	add	r2, r6
 801a022:	60a3      	str	r3, [r4, #8]
 801a024:	6022      	str	r2, [r4, #0]
 801a026:	2000      	movs	r0, #0
 801a028:	e7db      	b.n	8019fe2 <__ssputs_r+0x58>
 801a02a:	462a      	mov	r2, r5
 801a02c:	f000 fc24 	bl	801a878 <_realloc_r>
 801a030:	4606      	mov	r6, r0
 801a032:	2800      	cmp	r0, #0
 801a034:	d1e1      	bne.n	8019ffa <__ssputs_r+0x70>
 801a036:	6921      	ldr	r1, [r4, #16]
 801a038:	4650      	mov	r0, sl
 801a03a:	f7fd fdb9 	bl	8017bb0 <_free_r>
 801a03e:	e7c7      	b.n	8019fd0 <__ssputs_r+0x46>

0801a040 <_svfiprintf_r>:
 801a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a044:	4698      	mov	r8, r3
 801a046:	898b      	ldrh	r3, [r1, #12]
 801a048:	061b      	lsls	r3, r3, #24
 801a04a:	b09d      	sub	sp, #116	; 0x74
 801a04c:	4607      	mov	r7, r0
 801a04e:	460d      	mov	r5, r1
 801a050:	4614      	mov	r4, r2
 801a052:	d50e      	bpl.n	801a072 <_svfiprintf_r+0x32>
 801a054:	690b      	ldr	r3, [r1, #16]
 801a056:	b963      	cbnz	r3, 801a072 <_svfiprintf_r+0x32>
 801a058:	2140      	movs	r1, #64	; 0x40
 801a05a:	f7fd fdf9 	bl	8017c50 <_malloc_r>
 801a05e:	6028      	str	r0, [r5, #0]
 801a060:	6128      	str	r0, [r5, #16]
 801a062:	b920      	cbnz	r0, 801a06e <_svfiprintf_r+0x2e>
 801a064:	230c      	movs	r3, #12
 801a066:	603b      	str	r3, [r7, #0]
 801a068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a06c:	e0d1      	b.n	801a212 <_svfiprintf_r+0x1d2>
 801a06e:	2340      	movs	r3, #64	; 0x40
 801a070:	616b      	str	r3, [r5, #20]
 801a072:	2300      	movs	r3, #0
 801a074:	9309      	str	r3, [sp, #36]	; 0x24
 801a076:	2320      	movs	r3, #32
 801a078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a07c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a080:	2330      	movs	r3, #48	; 0x30
 801a082:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a22c <_svfiprintf_r+0x1ec>
 801a086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a08a:	f04f 0901 	mov.w	r9, #1
 801a08e:	4623      	mov	r3, r4
 801a090:	469a      	mov	sl, r3
 801a092:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a096:	b10a      	cbz	r2, 801a09c <_svfiprintf_r+0x5c>
 801a098:	2a25      	cmp	r2, #37	; 0x25
 801a09a:	d1f9      	bne.n	801a090 <_svfiprintf_r+0x50>
 801a09c:	ebba 0b04 	subs.w	fp, sl, r4
 801a0a0:	d00b      	beq.n	801a0ba <_svfiprintf_r+0x7a>
 801a0a2:	465b      	mov	r3, fp
 801a0a4:	4622      	mov	r2, r4
 801a0a6:	4629      	mov	r1, r5
 801a0a8:	4638      	mov	r0, r7
 801a0aa:	f7ff ff6e 	bl	8019f8a <__ssputs_r>
 801a0ae:	3001      	adds	r0, #1
 801a0b0:	f000 80aa 	beq.w	801a208 <_svfiprintf_r+0x1c8>
 801a0b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a0b6:	445a      	add	r2, fp
 801a0b8:	9209      	str	r2, [sp, #36]	; 0x24
 801a0ba:	f89a 3000 	ldrb.w	r3, [sl]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	f000 80a2 	beq.w	801a208 <_svfiprintf_r+0x1c8>
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a0ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0ce:	f10a 0a01 	add.w	sl, sl, #1
 801a0d2:	9304      	str	r3, [sp, #16]
 801a0d4:	9307      	str	r3, [sp, #28]
 801a0d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a0da:	931a      	str	r3, [sp, #104]	; 0x68
 801a0dc:	4654      	mov	r4, sl
 801a0de:	2205      	movs	r2, #5
 801a0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0e4:	4851      	ldr	r0, [pc, #324]	; (801a22c <_svfiprintf_r+0x1ec>)
 801a0e6:	f7e6 f913 	bl	8000310 <memchr>
 801a0ea:	9a04      	ldr	r2, [sp, #16]
 801a0ec:	b9d8      	cbnz	r0, 801a126 <_svfiprintf_r+0xe6>
 801a0ee:	06d0      	lsls	r0, r2, #27
 801a0f0:	bf44      	itt	mi
 801a0f2:	2320      	movmi	r3, #32
 801a0f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0f8:	0711      	lsls	r1, r2, #28
 801a0fa:	bf44      	itt	mi
 801a0fc:	232b      	movmi	r3, #43	; 0x2b
 801a0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a102:	f89a 3000 	ldrb.w	r3, [sl]
 801a106:	2b2a      	cmp	r3, #42	; 0x2a
 801a108:	d015      	beq.n	801a136 <_svfiprintf_r+0xf6>
 801a10a:	9a07      	ldr	r2, [sp, #28]
 801a10c:	4654      	mov	r4, sl
 801a10e:	2000      	movs	r0, #0
 801a110:	f04f 0c0a 	mov.w	ip, #10
 801a114:	4621      	mov	r1, r4
 801a116:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a11a:	3b30      	subs	r3, #48	; 0x30
 801a11c:	2b09      	cmp	r3, #9
 801a11e:	d94e      	bls.n	801a1be <_svfiprintf_r+0x17e>
 801a120:	b1b0      	cbz	r0, 801a150 <_svfiprintf_r+0x110>
 801a122:	9207      	str	r2, [sp, #28]
 801a124:	e014      	b.n	801a150 <_svfiprintf_r+0x110>
 801a126:	eba0 0308 	sub.w	r3, r0, r8
 801a12a:	fa09 f303 	lsl.w	r3, r9, r3
 801a12e:	4313      	orrs	r3, r2
 801a130:	9304      	str	r3, [sp, #16]
 801a132:	46a2      	mov	sl, r4
 801a134:	e7d2      	b.n	801a0dc <_svfiprintf_r+0x9c>
 801a136:	9b03      	ldr	r3, [sp, #12]
 801a138:	1d19      	adds	r1, r3, #4
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	9103      	str	r1, [sp, #12]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	bfbb      	ittet	lt
 801a142:	425b      	neglt	r3, r3
 801a144:	f042 0202 	orrlt.w	r2, r2, #2
 801a148:	9307      	strge	r3, [sp, #28]
 801a14a:	9307      	strlt	r3, [sp, #28]
 801a14c:	bfb8      	it	lt
 801a14e:	9204      	strlt	r2, [sp, #16]
 801a150:	7823      	ldrb	r3, [r4, #0]
 801a152:	2b2e      	cmp	r3, #46	; 0x2e
 801a154:	d10c      	bne.n	801a170 <_svfiprintf_r+0x130>
 801a156:	7863      	ldrb	r3, [r4, #1]
 801a158:	2b2a      	cmp	r3, #42	; 0x2a
 801a15a:	d135      	bne.n	801a1c8 <_svfiprintf_r+0x188>
 801a15c:	9b03      	ldr	r3, [sp, #12]
 801a15e:	1d1a      	adds	r2, r3, #4
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	9203      	str	r2, [sp, #12]
 801a164:	2b00      	cmp	r3, #0
 801a166:	bfb8      	it	lt
 801a168:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a16c:	3402      	adds	r4, #2
 801a16e:	9305      	str	r3, [sp, #20]
 801a170:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a23c <_svfiprintf_r+0x1fc>
 801a174:	7821      	ldrb	r1, [r4, #0]
 801a176:	2203      	movs	r2, #3
 801a178:	4650      	mov	r0, sl
 801a17a:	f7e6 f8c9 	bl	8000310 <memchr>
 801a17e:	b140      	cbz	r0, 801a192 <_svfiprintf_r+0x152>
 801a180:	2340      	movs	r3, #64	; 0x40
 801a182:	eba0 000a 	sub.w	r0, r0, sl
 801a186:	fa03 f000 	lsl.w	r0, r3, r0
 801a18a:	9b04      	ldr	r3, [sp, #16]
 801a18c:	4303      	orrs	r3, r0
 801a18e:	3401      	adds	r4, #1
 801a190:	9304      	str	r3, [sp, #16]
 801a192:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a196:	4826      	ldr	r0, [pc, #152]	; (801a230 <_svfiprintf_r+0x1f0>)
 801a198:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a19c:	2206      	movs	r2, #6
 801a19e:	f7e6 f8b7 	bl	8000310 <memchr>
 801a1a2:	2800      	cmp	r0, #0
 801a1a4:	d038      	beq.n	801a218 <_svfiprintf_r+0x1d8>
 801a1a6:	4b23      	ldr	r3, [pc, #140]	; (801a234 <_svfiprintf_r+0x1f4>)
 801a1a8:	bb1b      	cbnz	r3, 801a1f2 <_svfiprintf_r+0x1b2>
 801a1aa:	9b03      	ldr	r3, [sp, #12]
 801a1ac:	3307      	adds	r3, #7
 801a1ae:	f023 0307 	bic.w	r3, r3, #7
 801a1b2:	3308      	adds	r3, #8
 801a1b4:	9303      	str	r3, [sp, #12]
 801a1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1b8:	4433      	add	r3, r6
 801a1ba:	9309      	str	r3, [sp, #36]	; 0x24
 801a1bc:	e767      	b.n	801a08e <_svfiprintf_r+0x4e>
 801a1be:	fb0c 3202 	mla	r2, ip, r2, r3
 801a1c2:	460c      	mov	r4, r1
 801a1c4:	2001      	movs	r0, #1
 801a1c6:	e7a5      	b.n	801a114 <_svfiprintf_r+0xd4>
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	3401      	adds	r4, #1
 801a1cc:	9305      	str	r3, [sp, #20]
 801a1ce:	4619      	mov	r1, r3
 801a1d0:	f04f 0c0a 	mov.w	ip, #10
 801a1d4:	4620      	mov	r0, r4
 801a1d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1da:	3a30      	subs	r2, #48	; 0x30
 801a1dc:	2a09      	cmp	r2, #9
 801a1de:	d903      	bls.n	801a1e8 <_svfiprintf_r+0x1a8>
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d0c5      	beq.n	801a170 <_svfiprintf_r+0x130>
 801a1e4:	9105      	str	r1, [sp, #20]
 801a1e6:	e7c3      	b.n	801a170 <_svfiprintf_r+0x130>
 801a1e8:	fb0c 2101 	mla	r1, ip, r1, r2
 801a1ec:	4604      	mov	r4, r0
 801a1ee:	2301      	movs	r3, #1
 801a1f0:	e7f0      	b.n	801a1d4 <_svfiprintf_r+0x194>
 801a1f2:	ab03      	add	r3, sp, #12
 801a1f4:	9300      	str	r3, [sp, #0]
 801a1f6:	462a      	mov	r2, r5
 801a1f8:	4b0f      	ldr	r3, [pc, #60]	; (801a238 <_svfiprintf_r+0x1f8>)
 801a1fa:	a904      	add	r1, sp, #16
 801a1fc:	4638      	mov	r0, r7
 801a1fe:	f3af 8000 	nop.w
 801a202:	1c42      	adds	r2, r0, #1
 801a204:	4606      	mov	r6, r0
 801a206:	d1d6      	bne.n	801a1b6 <_svfiprintf_r+0x176>
 801a208:	89ab      	ldrh	r3, [r5, #12]
 801a20a:	065b      	lsls	r3, r3, #25
 801a20c:	f53f af2c 	bmi.w	801a068 <_svfiprintf_r+0x28>
 801a210:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a212:	b01d      	add	sp, #116	; 0x74
 801a214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a218:	ab03      	add	r3, sp, #12
 801a21a:	9300      	str	r3, [sp, #0]
 801a21c:	462a      	mov	r2, r5
 801a21e:	4b06      	ldr	r3, [pc, #24]	; (801a238 <_svfiprintf_r+0x1f8>)
 801a220:	a904      	add	r1, sp, #16
 801a222:	4638      	mov	r0, r7
 801a224:	f000 f9d4 	bl	801a5d0 <_printf_i>
 801a228:	e7eb      	b.n	801a202 <_svfiprintf_r+0x1c2>
 801a22a:	bf00      	nop
 801a22c:	0801ddac 	.word	0x0801ddac
 801a230:	0801ddb6 	.word	0x0801ddb6
 801a234:	00000000 	.word	0x00000000
 801a238:	08019f8b 	.word	0x08019f8b
 801a23c:	0801ddb2 	.word	0x0801ddb2

0801a240 <__sfputc_r>:
 801a240:	6893      	ldr	r3, [r2, #8]
 801a242:	3b01      	subs	r3, #1
 801a244:	2b00      	cmp	r3, #0
 801a246:	b410      	push	{r4}
 801a248:	6093      	str	r3, [r2, #8]
 801a24a:	da08      	bge.n	801a25e <__sfputc_r+0x1e>
 801a24c:	6994      	ldr	r4, [r2, #24]
 801a24e:	42a3      	cmp	r3, r4
 801a250:	db01      	blt.n	801a256 <__sfputc_r+0x16>
 801a252:	290a      	cmp	r1, #10
 801a254:	d103      	bne.n	801a25e <__sfputc_r+0x1e>
 801a256:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a25a:	f7fe bca3 	b.w	8018ba4 <__swbuf_r>
 801a25e:	6813      	ldr	r3, [r2, #0]
 801a260:	1c58      	adds	r0, r3, #1
 801a262:	6010      	str	r0, [r2, #0]
 801a264:	7019      	strb	r1, [r3, #0]
 801a266:	4608      	mov	r0, r1
 801a268:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a26c:	4770      	bx	lr

0801a26e <__sfputs_r>:
 801a26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a270:	4606      	mov	r6, r0
 801a272:	460f      	mov	r7, r1
 801a274:	4614      	mov	r4, r2
 801a276:	18d5      	adds	r5, r2, r3
 801a278:	42ac      	cmp	r4, r5
 801a27a:	d101      	bne.n	801a280 <__sfputs_r+0x12>
 801a27c:	2000      	movs	r0, #0
 801a27e:	e007      	b.n	801a290 <__sfputs_r+0x22>
 801a280:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a284:	463a      	mov	r2, r7
 801a286:	4630      	mov	r0, r6
 801a288:	f7ff ffda 	bl	801a240 <__sfputc_r>
 801a28c:	1c43      	adds	r3, r0, #1
 801a28e:	d1f3      	bne.n	801a278 <__sfputs_r+0xa>
 801a290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a294 <_vfiprintf_r>:
 801a294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a298:	460d      	mov	r5, r1
 801a29a:	b09d      	sub	sp, #116	; 0x74
 801a29c:	4614      	mov	r4, r2
 801a29e:	4698      	mov	r8, r3
 801a2a0:	4606      	mov	r6, r0
 801a2a2:	b118      	cbz	r0, 801a2ac <_vfiprintf_r+0x18>
 801a2a4:	6983      	ldr	r3, [r0, #24]
 801a2a6:	b90b      	cbnz	r3, 801a2ac <_vfiprintf_r+0x18>
 801a2a8:	f7fd fa80 	bl	80177ac <__sinit>
 801a2ac:	4b89      	ldr	r3, [pc, #548]	; (801a4d4 <_vfiprintf_r+0x240>)
 801a2ae:	429d      	cmp	r5, r3
 801a2b0:	d11b      	bne.n	801a2ea <_vfiprintf_r+0x56>
 801a2b2:	6875      	ldr	r5, [r6, #4]
 801a2b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a2b6:	07d9      	lsls	r1, r3, #31
 801a2b8:	d405      	bmi.n	801a2c6 <_vfiprintf_r+0x32>
 801a2ba:	89ab      	ldrh	r3, [r5, #12]
 801a2bc:	059a      	lsls	r2, r3, #22
 801a2be:	d402      	bmi.n	801a2c6 <_vfiprintf_r+0x32>
 801a2c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a2c2:	f7fd fbc0 	bl	8017a46 <__retarget_lock_acquire_recursive>
 801a2c6:	89ab      	ldrh	r3, [r5, #12]
 801a2c8:	071b      	lsls	r3, r3, #28
 801a2ca:	d501      	bpl.n	801a2d0 <_vfiprintf_r+0x3c>
 801a2cc:	692b      	ldr	r3, [r5, #16]
 801a2ce:	b9eb      	cbnz	r3, 801a30c <_vfiprintf_r+0x78>
 801a2d0:	4629      	mov	r1, r5
 801a2d2:	4630      	mov	r0, r6
 801a2d4:	f7fe fcca 	bl	8018c6c <__swsetup_r>
 801a2d8:	b1c0      	cbz	r0, 801a30c <_vfiprintf_r+0x78>
 801a2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a2dc:	07dc      	lsls	r4, r3, #31
 801a2de:	d50e      	bpl.n	801a2fe <_vfiprintf_r+0x6a>
 801a2e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a2e4:	b01d      	add	sp, #116	; 0x74
 801a2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ea:	4b7b      	ldr	r3, [pc, #492]	; (801a4d8 <_vfiprintf_r+0x244>)
 801a2ec:	429d      	cmp	r5, r3
 801a2ee:	d101      	bne.n	801a2f4 <_vfiprintf_r+0x60>
 801a2f0:	68b5      	ldr	r5, [r6, #8]
 801a2f2:	e7df      	b.n	801a2b4 <_vfiprintf_r+0x20>
 801a2f4:	4b79      	ldr	r3, [pc, #484]	; (801a4dc <_vfiprintf_r+0x248>)
 801a2f6:	429d      	cmp	r5, r3
 801a2f8:	bf08      	it	eq
 801a2fa:	68f5      	ldreq	r5, [r6, #12]
 801a2fc:	e7da      	b.n	801a2b4 <_vfiprintf_r+0x20>
 801a2fe:	89ab      	ldrh	r3, [r5, #12]
 801a300:	0598      	lsls	r0, r3, #22
 801a302:	d4ed      	bmi.n	801a2e0 <_vfiprintf_r+0x4c>
 801a304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a306:	f7fd fb9f 	bl	8017a48 <__retarget_lock_release_recursive>
 801a30a:	e7e9      	b.n	801a2e0 <_vfiprintf_r+0x4c>
 801a30c:	2300      	movs	r3, #0
 801a30e:	9309      	str	r3, [sp, #36]	; 0x24
 801a310:	2320      	movs	r3, #32
 801a312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a316:	f8cd 800c 	str.w	r8, [sp, #12]
 801a31a:	2330      	movs	r3, #48	; 0x30
 801a31c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a4e0 <_vfiprintf_r+0x24c>
 801a320:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a324:	f04f 0901 	mov.w	r9, #1
 801a328:	4623      	mov	r3, r4
 801a32a:	469a      	mov	sl, r3
 801a32c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a330:	b10a      	cbz	r2, 801a336 <_vfiprintf_r+0xa2>
 801a332:	2a25      	cmp	r2, #37	; 0x25
 801a334:	d1f9      	bne.n	801a32a <_vfiprintf_r+0x96>
 801a336:	ebba 0b04 	subs.w	fp, sl, r4
 801a33a:	d00b      	beq.n	801a354 <_vfiprintf_r+0xc0>
 801a33c:	465b      	mov	r3, fp
 801a33e:	4622      	mov	r2, r4
 801a340:	4629      	mov	r1, r5
 801a342:	4630      	mov	r0, r6
 801a344:	f7ff ff93 	bl	801a26e <__sfputs_r>
 801a348:	3001      	adds	r0, #1
 801a34a:	f000 80aa 	beq.w	801a4a2 <_vfiprintf_r+0x20e>
 801a34e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a350:	445a      	add	r2, fp
 801a352:	9209      	str	r2, [sp, #36]	; 0x24
 801a354:	f89a 3000 	ldrb.w	r3, [sl]
 801a358:	2b00      	cmp	r3, #0
 801a35a:	f000 80a2 	beq.w	801a4a2 <_vfiprintf_r+0x20e>
 801a35e:	2300      	movs	r3, #0
 801a360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a368:	f10a 0a01 	add.w	sl, sl, #1
 801a36c:	9304      	str	r3, [sp, #16]
 801a36e:	9307      	str	r3, [sp, #28]
 801a370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a374:	931a      	str	r3, [sp, #104]	; 0x68
 801a376:	4654      	mov	r4, sl
 801a378:	2205      	movs	r2, #5
 801a37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a37e:	4858      	ldr	r0, [pc, #352]	; (801a4e0 <_vfiprintf_r+0x24c>)
 801a380:	f7e5 ffc6 	bl	8000310 <memchr>
 801a384:	9a04      	ldr	r2, [sp, #16]
 801a386:	b9d8      	cbnz	r0, 801a3c0 <_vfiprintf_r+0x12c>
 801a388:	06d1      	lsls	r1, r2, #27
 801a38a:	bf44      	itt	mi
 801a38c:	2320      	movmi	r3, #32
 801a38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a392:	0713      	lsls	r3, r2, #28
 801a394:	bf44      	itt	mi
 801a396:	232b      	movmi	r3, #43	; 0x2b
 801a398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a39c:	f89a 3000 	ldrb.w	r3, [sl]
 801a3a0:	2b2a      	cmp	r3, #42	; 0x2a
 801a3a2:	d015      	beq.n	801a3d0 <_vfiprintf_r+0x13c>
 801a3a4:	9a07      	ldr	r2, [sp, #28]
 801a3a6:	4654      	mov	r4, sl
 801a3a8:	2000      	movs	r0, #0
 801a3aa:	f04f 0c0a 	mov.w	ip, #10
 801a3ae:	4621      	mov	r1, r4
 801a3b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a3b4:	3b30      	subs	r3, #48	; 0x30
 801a3b6:	2b09      	cmp	r3, #9
 801a3b8:	d94e      	bls.n	801a458 <_vfiprintf_r+0x1c4>
 801a3ba:	b1b0      	cbz	r0, 801a3ea <_vfiprintf_r+0x156>
 801a3bc:	9207      	str	r2, [sp, #28]
 801a3be:	e014      	b.n	801a3ea <_vfiprintf_r+0x156>
 801a3c0:	eba0 0308 	sub.w	r3, r0, r8
 801a3c4:	fa09 f303 	lsl.w	r3, r9, r3
 801a3c8:	4313      	orrs	r3, r2
 801a3ca:	9304      	str	r3, [sp, #16]
 801a3cc:	46a2      	mov	sl, r4
 801a3ce:	e7d2      	b.n	801a376 <_vfiprintf_r+0xe2>
 801a3d0:	9b03      	ldr	r3, [sp, #12]
 801a3d2:	1d19      	adds	r1, r3, #4
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	9103      	str	r1, [sp, #12]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	bfbb      	ittet	lt
 801a3dc:	425b      	neglt	r3, r3
 801a3de:	f042 0202 	orrlt.w	r2, r2, #2
 801a3e2:	9307      	strge	r3, [sp, #28]
 801a3e4:	9307      	strlt	r3, [sp, #28]
 801a3e6:	bfb8      	it	lt
 801a3e8:	9204      	strlt	r2, [sp, #16]
 801a3ea:	7823      	ldrb	r3, [r4, #0]
 801a3ec:	2b2e      	cmp	r3, #46	; 0x2e
 801a3ee:	d10c      	bne.n	801a40a <_vfiprintf_r+0x176>
 801a3f0:	7863      	ldrb	r3, [r4, #1]
 801a3f2:	2b2a      	cmp	r3, #42	; 0x2a
 801a3f4:	d135      	bne.n	801a462 <_vfiprintf_r+0x1ce>
 801a3f6:	9b03      	ldr	r3, [sp, #12]
 801a3f8:	1d1a      	adds	r2, r3, #4
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	9203      	str	r2, [sp, #12]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	bfb8      	it	lt
 801a402:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a406:	3402      	adds	r4, #2
 801a408:	9305      	str	r3, [sp, #20]
 801a40a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a4f0 <_vfiprintf_r+0x25c>
 801a40e:	7821      	ldrb	r1, [r4, #0]
 801a410:	2203      	movs	r2, #3
 801a412:	4650      	mov	r0, sl
 801a414:	f7e5 ff7c 	bl	8000310 <memchr>
 801a418:	b140      	cbz	r0, 801a42c <_vfiprintf_r+0x198>
 801a41a:	2340      	movs	r3, #64	; 0x40
 801a41c:	eba0 000a 	sub.w	r0, r0, sl
 801a420:	fa03 f000 	lsl.w	r0, r3, r0
 801a424:	9b04      	ldr	r3, [sp, #16]
 801a426:	4303      	orrs	r3, r0
 801a428:	3401      	adds	r4, #1
 801a42a:	9304      	str	r3, [sp, #16]
 801a42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a430:	482c      	ldr	r0, [pc, #176]	; (801a4e4 <_vfiprintf_r+0x250>)
 801a432:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a436:	2206      	movs	r2, #6
 801a438:	f7e5 ff6a 	bl	8000310 <memchr>
 801a43c:	2800      	cmp	r0, #0
 801a43e:	d03f      	beq.n	801a4c0 <_vfiprintf_r+0x22c>
 801a440:	4b29      	ldr	r3, [pc, #164]	; (801a4e8 <_vfiprintf_r+0x254>)
 801a442:	bb1b      	cbnz	r3, 801a48c <_vfiprintf_r+0x1f8>
 801a444:	9b03      	ldr	r3, [sp, #12]
 801a446:	3307      	adds	r3, #7
 801a448:	f023 0307 	bic.w	r3, r3, #7
 801a44c:	3308      	adds	r3, #8
 801a44e:	9303      	str	r3, [sp, #12]
 801a450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a452:	443b      	add	r3, r7
 801a454:	9309      	str	r3, [sp, #36]	; 0x24
 801a456:	e767      	b.n	801a328 <_vfiprintf_r+0x94>
 801a458:	fb0c 3202 	mla	r2, ip, r2, r3
 801a45c:	460c      	mov	r4, r1
 801a45e:	2001      	movs	r0, #1
 801a460:	e7a5      	b.n	801a3ae <_vfiprintf_r+0x11a>
 801a462:	2300      	movs	r3, #0
 801a464:	3401      	adds	r4, #1
 801a466:	9305      	str	r3, [sp, #20]
 801a468:	4619      	mov	r1, r3
 801a46a:	f04f 0c0a 	mov.w	ip, #10
 801a46e:	4620      	mov	r0, r4
 801a470:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a474:	3a30      	subs	r2, #48	; 0x30
 801a476:	2a09      	cmp	r2, #9
 801a478:	d903      	bls.n	801a482 <_vfiprintf_r+0x1ee>
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d0c5      	beq.n	801a40a <_vfiprintf_r+0x176>
 801a47e:	9105      	str	r1, [sp, #20]
 801a480:	e7c3      	b.n	801a40a <_vfiprintf_r+0x176>
 801a482:	fb0c 2101 	mla	r1, ip, r1, r2
 801a486:	4604      	mov	r4, r0
 801a488:	2301      	movs	r3, #1
 801a48a:	e7f0      	b.n	801a46e <_vfiprintf_r+0x1da>
 801a48c:	ab03      	add	r3, sp, #12
 801a48e:	9300      	str	r3, [sp, #0]
 801a490:	462a      	mov	r2, r5
 801a492:	4b16      	ldr	r3, [pc, #88]	; (801a4ec <_vfiprintf_r+0x258>)
 801a494:	a904      	add	r1, sp, #16
 801a496:	4630      	mov	r0, r6
 801a498:	f3af 8000 	nop.w
 801a49c:	4607      	mov	r7, r0
 801a49e:	1c78      	adds	r0, r7, #1
 801a4a0:	d1d6      	bne.n	801a450 <_vfiprintf_r+0x1bc>
 801a4a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a4a4:	07d9      	lsls	r1, r3, #31
 801a4a6:	d405      	bmi.n	801a4b4 <_vfiprintf_r+0x220>
 801a4a8:	89ab      	ldrh	r3, [r5, #12]
 801a4aa:	059a      	lsls	r2, r3, #22
 801a4ac:	d402      	bmi.n	801a4b4 <_vfiprintf_r+0x220>
 801a4ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a4b0:	f7fd faca 	bl	8017a48 <__retarget_lock_release_recursive>
 801a4b4:	89ab      	ldrh	r3, [r5, #12]
 801a4b6:	065b      	lsls	r3, r3, #25
 801a4b8:	f53f af12 	bmi.w	801a2e0 <_vfiprintf_r+0x4c>
 801a4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a4be:	e711      	b.n	801a2e4 <_vfiprintf_r+0x50>
 801a4c0:	ab03      	add	r3, sp, #12
 801a4c2:	9300      	str	r3, [sp, #0]
 801a4c4:	462a      	mov	r2, r5
 801a4c6:	4b09      	ldr	r3, [pc, #36]	; (801a4ec <_vfiprintf_r+0x258>)
 801a4c8:	a904      	add	r1, sp, #16
 801a4ca:	4630      	mov	r0, r6
 801a4cc:	f000 f880 	bl	801a5d0 <_printf_i>
 801a4d0:	e7e4      	b.n	801a49c <_vfiprintf_r+0x208>
 801a4d2:	bf00      	nop
 801a4d4:	0801da64 	.word	0x0801da64
 801a4d8:	0801da84 	.word	0x0801da84
 801a4dc:	0801da44 	.word	0x0801da44
 801a4e0:	0801ddac 	.word	0x0801ddac
 801a4e4:	0801ddb6 	.word	0x0801ddb6
 801a4e8:	00000000 	.word	0x00000000
 801a4ec:	0801a26f 	.word	0x0801a26f
 801a4f0:	0801ddb2 	.word	0x0801ddb2

0801a4f4 <_printf_common>:
 801a4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4f8:	4616      	mov	r6, r2
 801a4fa:	4699      	mov	r9, r3
 801a4fc:	688a      	ldr	r2, [r1, #8]
 801a4fe:	690b      	ldr	r3, [r1, #16]
 801a500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a504:	4293      	cmp	r3, r2
 801a506:	bfb8      	it	lt
 801a508:	4613      	movlt	r3, r2
 801a50a:	6033      	str	r3, [r6, #0]
 801a50c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a510:	4607      	mov	r7, r0
 801a512:	460c      	mov	r4, r1
 801a514:	b10a      	cbz	r2, 801a51a <_printf_common+0x26>
 801a516:	3301      	adds	r3, #1
 801a518:	6033      	str	r3, [r6, #0]
 801a51a:	6823      	ldr	r3, [r4, #0]
 801a51c:	0699      	lsls	r1, r3, #26
 801a51e:	bf42      	ittt	mi
 801a520:	6833      	ldrmi	r3, [r6, #0]
 801a522:	3302      	addmi	r3, #2
 801a524:	6033      	strmi	r3, [r6, #0]
 801a526:	6825      	ldr	r5, [r4, #0]
 801a528:	f015 0506 	ands.w	r5, r5, #6
 801a52c:	d106      	bne.n	801a53c <_printf_common+0x48>
 801a52e:	f104 0a19 	add.w	sl, r4, #25
 801a532:	68e3      	ldr	r3, [r4, #12]
 801a534:	6832      	ldr	r2, [r6, #0]
 801a536:	1a9b      	subs	r3, r3, r2
 801a538:	42ab      	cmp	r3, r5
 801a53a:	dc26      	bgt.n	801a58a <_printf_common+0x96>
 801a53c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a540:	1e13      	subs	r3, r2, #0
 801a542:	6822      	ldr	r2, [r4, #0]
 801a544:	bf18      	it	ne
 801a546:	2301      	movne	r3, #1
 801a548:	0692      	lsls	r2, r2, #26
 801a54a:	d42b      	bmi.n	801a5a4 <_printf_common+0xb0>
 801a54c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a550:	4649      	mov	r1, r9
 801a552:	4638      	mov	r0, r7
 801a554:	47c0      	blx	r8
 801a556:	3001      	adds	r0, #1
 801a558:	d01e      	beq.n	801a598 <_printf_common+0xa4>
 801a55a:	6823      	ldr	r3, [r4, #0]
 801a55c:	68e5      	ldr	r5, [r4, #12]
 801a55e:	6832      	ldr	r2, [r6, #0]
 801a560:	f003 0306 	and.w	r3, r3, #6
 801a564:	2b04      	cmp	r3, #4
 801a566:	bf08      	it	eq
 801a568:	1aad      	subeq	r5, r5, r2
 801a56a:	68a3      	ldr	r3, [r4, #8]
 801a56c:	6922      	ldr	r2, [r4, #16]
 801a56e:	bf0c      	ite	eq
 801a570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a574:	2500      	movne	r5, #0
 801a576:	4293      	cmp	r3, r2
 801a578:	bfc4      	itt	gt
 801a57a:	1a9b      	subgt	r3, r3, r2
 801a57c:	18ed      	addgt	r5, r5, r3
 801a57e:	2600      	movs	r6, #0
 801a580:	341a      	adds	r4, #26
 801a582:	42b5      	cmp	r5, r6
 801a584:	d11a      	bne.n	801a5bc <_printf_common+0xc8>
 801a586:	2000      	movs	r0, #0
 801a588:	e008      	b.n	801a59c <_printf_common+0xa8>
 801a58a:	2301      	movs	r3, #1
 801a58c:	4652      	mov	r2, sl
 801a58e:	4649      	mov	r1, r9
 801a590:	4638      	mov	r0, r7
 801a592:	47c0      	blx	r8
 801a594:	3001      	adds	r0, #1
 801a596:	d103      	bne.n	801a5a0 <_printf_common+0xac>
 801a598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5a0:	3501      	adds	r5, #1
 801a5a2:	e7c6      	b.n	801a532 <_printf_common+0x3e>
 801a5a4:	18e1      	adds	r1, r4, r3
 801a5a6:	1c5a      	adds	r2, r3, #1
 801a5a8:	2030      	movs	r0, #48	; 0x30
 801a5aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a5ae:	4422      	add	r2, r4
 801a5b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a5b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a5b8:	3302      	adds	r3, #2
 801a5ba:	e7c7      	b.n	801a54c <_printf_common+0x58>
 801a5bc:	2301      	movs	r3, #1
 801a5be:	4622      	mov	r2, r4
 801a5c0:	4649      	mov	r1, r9
 801a5c2:	4638      	mov	r0, r7
 801a5c4:	47c0      	blx	r8
 801a5c6:	3001      	adds	r0, #1
 801a5c8:	d0e6      	beq.n	801a598 <_printf_common+0xa4>
 801a5ca:	3601      	adds	r6, #1
 801a5cc:	e7d9      	b.n	801a582 <_printf_common+0x8e>
	...

0801a5d0 <_printf_i>:
 801a5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a5d4:	460c      	mov	r4, r1
 801a5d6:	4691      	mov	r9, r2
 801a5d8:	7e27      	ldrb	r7, [r4, #24]
 801a5da:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a5dc:	2f78      	cmp	r7, #120	; 0x78
 801a5de:	4680      	mov	r8, r0
 801a5e0:	469a      	mov	sl, r3
 801a5e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a5e6:	d807      	bhi.n	801a5f8 <_printf_i+0x28>
 801a5e8:	2f62      	cmp	r7, #98	; 0x62
 801a5ea:	d80a      	bhi.n	801a602 <_printf_i+0x32>
 801a5ec:	2f00      	cmp	r7, #0
 801a5ee:	f000 80d8 	beq.w	801a7a2 <_printf_i+0x1d2>
 801a5f2:	2f58      	cmp	r7, #88	; 0x58
 801a5f4:	f000 80a3 	beq.w	801a73e <_printf_i+0x16e>
 801a5f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a5fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a600:	e03a      	b.n	801a678 <_printf_i+0xa8>
 801a602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a606:	2b15      	cmp	r3, #21
 801a608:	d8f6      	bhi.n	801a5f8 <_printf_i+0x28>
 801a60a:	a001      	add	r0, pc, #4	; (adr r0, 801a610 <_printf_i+0x40>)
 801a60c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a610:	0801a669 	.word	0x0801a669
 801a614:	0801a67d 	.word	0x0801a67d
 801a618:	0801a5f9 	.word	0x0801a5f9
 801a61c:	0801a5f9 	.word	0x0801a5f9
 801a620:	0801a5f9 	.word	0x0801a5f9
 801a624:	0801a5f9 	.word	0x0801a5f9
 801a628:	0801a67d 	.word	0x0801a67d
 801a62c:	0801a5f9 	.word	0x0801a5f9
 801a630:	0801a5f9 	.word	0x0801a5f9
 801a634:	0801a5f9 	.word	0x0801a5f9
 801a638:	0801a5f9 	.word	0x0801a5f9
 801a63c:	0801a789 	.word	0x0801a789
 801a640:	0801a6ad 	.word	0x0801a6ad
 801a644:	0801a76b 	.word	0x0801a76b
 801a648:	0801a5f9 	.word	0x0801a5f9
 801a64c:	0801a5f9 	.word	0x0801a5f9
 801a650:	0801a7ab 	.word	0x0801a7ab
 801a654:	0801a5f9 	.word	0x0801a5f9
 801a658:	0801a6ad 	.word	0x0801a6ad
 801a65c:	0801a5f9 	.word	0x0801a5f9
 801a660:	0801a5f9 	.word	0x0801a5f9
 801a664:	0801a773 	.word	0x0801a773
 801a668:	680b      	ldr	r3, [r1, #0]
 801a66a:	1d1a      	adds	r2, r3, #4
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	600a      	str	r2, [r1, #0]
 801a670:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a678:	2301      	movs	r3, #1
 801a67a:	e0a3      	b.n	801a7c4 <_printf_i+0x1f4>
 801a67c:	6825      	ldr	r5, [r4, #0]
 801a67e:	6808      	ldr	r0, [r1, #0]
 801a680:	062e      	lsls	r6, r5, #24
 801a682:	f100 0304 	add.w	r3, r0, #4
 801a686:	d50a      	bpl.n	801a69e <_printf_i+0xce>
 801a688:	6805      	ldr	r5, [r0, #0]
 801a68a:	600b      	str	r3, [r1, #0]
 801a68c:	2d00      	cmp	r5, #0
 801a68e:	da03      	bge.n	801a698 <_printf_i+0xc8>
 801a690:	232d      	movs	r3, #45	; 0x2d
 801a692:	426d      	negs	r5, r5
 801a694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a698:	485e      	ldr	r0, [pc, #376]	; (801a814 <_printf_i+0x244>)
 801a69a:	230a      	movs	r3, #10
 801a69c:	e019      	b.n	801a6d2 <_printf_i+0x102>
 801a69e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a6a2:	6805      	ldr	r5, [r0, #0]
 801a6a4:	600b      	str	r3, [r1, #0]
 801a6a6:	bf18      	it	ne
 801a6a8:	b22d      	sxthne	r5, r5
 801a6aa:	e7ef      	b.n	801a68c <_printf_i+0xbc>
 801a6ac:	680b      	ldr	r3, [r1, #0]
 801a6ae:	6825      	ldr	r5, [r4, #0]
 801a6b0:	1d18      	adds	r0, r3, #4
 801a6b2:	6008      	str	r0, [r1, #0]
 801a6b4:	0628      	lsls	r0, r5, #24
 801a6b6:	d501      	bpl.n	801a6bc <_printf_i+0xec>
 801a6b8:	681d      	ldr	r5, [r3, #0]
 801a6ba:	e002      	b.n	801a6c2 <_printf_i+0xf2>
 801a6bc:	0669      	lsls	r1, r5, #25
 801a6be:	d5fb      	bpl.n	801a6b8 <_printf_i+0xe8>
 801a6c0:	881d      	ldrh	r5, [r3, #0]
 801a6c2:	4854      	ldr	r0, [pc, #336]	; (801a814 <_printf_i+0x244>)
 801a6c4:	2f6f      	cmp	r7, #111	; 0x6f
 801a6c6:	bf0c      	ite	eq
 801a6c8:	2308      	moveq	r3, #8
 801a6ca:	230a      	movne	r3, #10
 801a6cc:	2100      	movs	r1, #0
 801a6ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a6d2:	6866      	ldr	r6, [r4, #4]
 801a6d4:	60a6      	str	r6, [r4, #8]
 801a6d6:	2e00      	cmp	r6, #0
 801a6d8:	bfa2      	ittt	ge
 801a6da:	6821      	ldrge	r1, [r4, #0]
 801a6dc:	f021 0104 	bicge.w	r1, r1, #4
 801a6e0:	6021      	strge	r1, [r4, #0]
 801a6e2:	b90d      	cbnz	r5, 801a6e8 <_printf_i+0x118>
 801a6e4:	2e00      	cmp	r6, #0
 801a6e6:	d04d      	beq.n	801a784 <_printf_i+0x1b4>
 801a6e8:	4616      	mov	r6, r2
 801a6ea:	fbb5 f1f3 	udiv	r1, r5, r3
 801a6ee:	fb03 5711 	mls	r7, r3, r1, r5
 801a6f2:	5dc7      	ldrb	r7, [r0, r7]
 801a6f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a6f8:	462f      	mov	r7, r5
 801a6fa:	42bb      	cmp	r3, r7
 801a6fc:	460d      	mov	r5, r1
 801a6fe:	d9f4      	bls.n	801a6ea <_printf_i+0x11a>
 801a700:	2b08      	cmp	r3, #8
 801a702:	d10b      	bne.n	801a71c <_printf_i+0x14c>
 801a704:	6823      	ldr	r3, [r4, #0]
 801a706:	07df      	lsls	r7, r3, #31
 801a708:	d508      	bpl.n	801a71c <_printf_i+0x14c>
 801a70a:	6923      	ldr	r3, [r4, #16]
 801a70c:	6861      	ldr	r1, [r4, #4]
 801a70e:	4299      	cmp	r1, r3
 801a710:	bfde      	ittt	le
 801a712:	2330      	movle	r3, #48	; 0x30
 801a714:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a718:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801a71c:	1b92      	subs	r2, r2, r6
 801a71e:	6122      	str	r2, [r4, #16]
 801a720:	f8cd a000 	str.w	sl, [sp]
 801a724:	464b      	mov	r3, r9
 801a726:	aa03      	add	r2, sp, #12
 801a728:	4621      	mov	r1, r4
 801a72a:	4640      	mov	r0, r8
 801a72c:	f7ff fee2 	bl	801a4f4 <_printf_common>
 801a730:	3001      	adds	r0, #1
 801a732:	d14c      	bne.n	801a7ce <_printf_i+0x1fe>
 801a734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a738:	b004      	add	sp, #16
 801a73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a73e:	4835      	ldr	r0, [pc, #212]	; (801a814 <_printf_i+0x244>)
 801a740:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a744:	6823      	ldr	r3, [r4, #0]
 801a746:	680e      	ldr	r6, [r1, #0]
 801a748:	061f      	lsls	r7, r3, #24
 801a74a:	f856 5b04 	ldr.w	r5, [r6], #4
 801a74e:	600e      	str	r6, [r1, #0]
 801a750:	d514      	bpl.n	801a77c <_printf_i+0x1ac>
 801a752:	07d9      	lsls	r1, r3, #31
 801a754:	bf44      	itt	mi
 801a756:	f043 0320 	orrmi.w	r3, r3, #32
 801a75a:	6023      	strmi	r3, [r4, #0]
 801a75c:	b91d      	cbnz	r5, 801a766 <_printf_i+0x196>
 801a75e:	6823      	ldr	r3, [r4, #0]
 801a760:	f023 0320 	bic.w	r3, r3, #32
 801a764:	6023      	str	r3, [r4, #0]
 801a766:	2310      	movs	r3, #16
 801a768:	e7b0      	b.n	801a6cc <_printf_i+0xfc>
 801a76a:	6823      	ldr	r3, [r4, #0]
 801a76c:	f043 0320 	orr.w	r3, r3, #32
 801a770:	6023      	str	r3, [r4, #0]
 801a772:	2378      	movs	r3, #120	; 0x78
 801a774:	4828      	ldr	r0, [pc, #160]	; (801a818 <_printf_i+0x248>)
 801a776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a77a:	e7e3      	b.n	801a744 <_printf_i+0x174>
 801a77c:	065e      	lsls	r6, r3, #25
 801a77e:	bf48      	it	mi
 801a780:	b2ad      	uxthmi	r5, r5
 801a782:	e7e6      	b.n	801a752 <_printf_i+0x182>
 801a784:	4616      	mov	r6, r2
 801a786:	e7bb      	b.n	801a700 <_printf_i+0x130>
 801a788:	680b      	ldr	r3, [r1, #0]
 801a78a:	6826      	ldr	r6, [r4, #0]
 801a78c:	6960      	ldr	r0, [r4, #20]
 801a78e:	1d1d      	adds	r5, r3, #4
 801a790:	600d      	str	r5, [r1, #0]
 801a792:	0635      	lsls	r5, r6, #24
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	d501      	bpl.n	801a79c <_printf_i+0x1cc>
 801a798:	6018      	str	r0, [r3, #0]
 801a79a:	e002      	b.n	801a7a2 <_printf_i+0x1d2>
 801a79c:	0671      	lsls	r1, r6, #25
 801a79e:	d5fb      	bpl.n	801a798 <_printf_i+0x1c8>
 801a7a0:	8018      	strh	r0, [r3, #0]
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	6123      	str	r3, [r4, #16]
 801a7a6:	4616      	mov	r6, r2
 801a7a8:	e7ba      	b.n	801a720 <_printf_i+0x150>
 801a7aa:	680b      	ldr	r3, [r1, #0]
 801a7ac:	1d1a      	adds	r2, r3, #4
 801a7ae:	600a      	str	r2, [r1, #0]
 801a7b0:	681e      	ldr	r6, [r3, #0]
 801a7b2:	6862      	ldr	r2, [r4, #4]
 801a7b4:	2100      	movs	r1, #0
 801a7b6:	4630      	mov	r0, r6
 801a7b8:	f7e5 fdaa 	bl	8000310 <memchr>
 801a7bc:	b108      	cbz	r0, 801a7c2 <_printf_i+0x1f2>
 801a7be:	1b80      	subs	r0, r0, r6
 801a7c0:	6060      	str	r0, [r4, #4]
 801a7c2:	6863      	ldr	r3, [r4, #4]
 801a7c4:	6123      	str	r3, [r4, #16]
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a7cc:	e7a8      	b.n	801a720 <_printf_i+0x150>
 801a7ce:	6923      	ldr	r3, [r4, #16]
 801a7d0:	4632      	mov	r2, r6
 801a7d2:	4649      	mov	r1, r9
 801a7d4:	4640      	mov	r0, r8
 801a7d6:	47d0      	blx	sl
 801a7d8:	3001      	adds	r0, #1
 801a7da:	d0ab      	beq.n	801a734 <_printf_i+0x164>
 801a7dc:	6823      	ldr	r3, [r4, #0]
 801a7de:	079b      	lsls	r3, r3, #30
 801a7e0:	d413      	bmi.n	801a80a <_printf_i+0x23a>
 801a7e2:	68e0      	ldr	r0, [r4, #12]
 801a7e4:	9b03      	ldr	r3, [sp, #12]
 801a7e6:	4298      	cmp	r0, r3
 801a7e8:	bfb8      	it	lt
 801a7ea:	4618      	movlt	r0, r3
 801a7ec:	e7a4      	b.n	801a738 <_printf_i+0x168>
 801a7ee:	2301      	movs	r3, #1
 801a7f0:	4632      	mov	r2, r6
 801a7f2:	4649      	mov	r1, r9
 801a7f4:	4640      	mov	r0, r8
 801a7f6:	47d0      	blx	sl
 801a7f8:	3001      	adds	r0, #1
 801a7fa:	d09b      	beq.n	801a734 <_printf_i+0x164>
 801a7fc:	3501      	adds	r5, #1
 801a7fe:	68e3      	ldr	r3, [r4, #12]
 801a800:	9903      	ldr	r1, [sp, #12]
 801a802:	1a5b      	subs	r3, r3, r1
 801a804:	42ab      	cmp	r3, r5
 801a806:	dcf2      	bgt.n	801a7ee <_printf_i+0x21e>
 801a808:	e7eb      	b.n	801a7e2 <_printf_i+0x212>
 801a80a:	2500      	movs	r5, #0
 801a80c:	f104 0619 	add.w	r6, r4, #25
 801a810:	e7f5      	b.n	801a7fe <_printf_i+0x22e>
 801a812:	bf00      	nop
 801a814:	0801ddbd 	.word	0x0801ddbd
 801a818:	0801ddce 	.word	0x0801ddce

0801a81c <_read_r>:
 801a81c:	b538      	push	{r3, r4, r5, lr}
 801a81e:	4d07      	ldr	r5, [pc, #28]	; (801a83c <_read_r+0x20>)
 801a820:	4604      	mov	r4, r0
 801a822:	4608      	mov	r0, r1
 801a824:	4611      	mov	r1, r2
 801a826:	2200      	movs	r2, #0
 801a828:	602a      	str	r2, [r5, #0]
 801a82a:	461a      	mov	r2, r3
 801a82c:	f7e6 fb76 	bl	8000f1c <_read>
 801a830:	1c43      	adds	r3, r0, #1
 801a832:	d102      	bne.n	801a83a <_read_r+0x1e>
 801a834:	682b      	ldr	r3, [r5, #0]
 801a836:	b103      	cbz	r3, 801a83a <_read_r+0x1e>
 801a838:	6023      	str	r3, [r4, #0]
 801a83a:	bd38      	pop	{r3, r4, r5, pc}
 801a83c:	2400ee28 	.word	0x2400ee28

0801a840 <nan>:
 801a840:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a848 <nan+0x8>
 801a844:	4770      	bx	lr
 801a846:	bf00      	nop
 801a848:	00000000 	.word	0x00000000
 801a84c:	7ff80000 	.word	0x7ff80000

0801a850 <__ascii_wctomb>:
 801a850:	b149      	cbz	r1, 801a866 <__ascii_wctomb+0x16>
 801a852:	2aff      	cmp	r2, #255	; 0xff
 801a854:	bf85      	ittet	hi
 801a856:	238a      	movhi	r3, #138	; 0x8a
 801a858:	6003      	strhi	r3, [r0, #0]
 801a85a:	700a      	strbls	r2, [r1, #0]
 801a85c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801a860:	bf98      	it	ls
 801a862:	2001      	movls	r0, #1
 801a864:	4770      	bx	lr
 801a866:	4608      	mov	r0, r1
 801a868:	4770      	bx	lr

0801a86a <abort>:
 801a86a:	b508      	push	{r3, lr}
 801a86c:	2006      	movs	r0, #6
 801a86e:	f000 f851 	bl	801a914 <raise>
 801a872:	2001      	movs	r0, #1
 801a874:	f7e6 fb48 	bl	8000f08 <_exit>

0801a878 <_realloc_r>:
 801a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a87a:	4607      	mov	r7, r0
 801a87c:	4614      	mov	r4, r2
 801a87e:	460e      	mov	r6, r1
 801a880:	b921      	cbnz	r1, 801a88c <_realloc_r+0x14>
 801a882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a886:	4611      	mov	r1, r2
 801a888:	f7fd b9e2 	b.w	8017c50 <_malloc_r>
 801a88c:	b922      	cbnz	r2, 801a898 <_realloc_r+0x20>
 801a88e:	f7fd f98f 	bl	8017bb0 <_free_r>
 801a892:	4625      	mov	r5, r4
 801a894:	4628      	mov	r0, r5
 801a896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a898:	f000 f858 	bl	801a94c <_malloc_usable_size_r>
 801a89c:	42a0      	cmp	r0, r4
 801a89e:	d20f      	bcs.n	801a8c0 <_realloc_r+0x48>
 801a8a0:	4621      	mov	r1, r4
 801a8a2:	4638      	mov	r0, r7
 801a8a4:	f7fd f9d4 	bl	8017c50 <_malloc_r>
 801a8a8:	4605      	mov	r5, r0
 801a8aa:	2800      	cmp	r0, #0
 801a8ac:	d0f2      	beq.n	801a894 <_realloc_r+0x1c>
 801a8ae:	4631      	mov	r1, r6
 801a8b0:	4622      	mov	r2, r4
 801a8b2:	f7fd f94d 	bl	8017b50 <memcpy>
 801a8b6:	4631      	mov	r1, r6
 801a8b8:	4638      	mov	r0, r7
 801a8ba:	f7fd f979 	bl	8017bb0 <_free_r>
 801a8be:	e7e9      	b.n	801a894 <_realloc_r+0x1c>
 801a8c0:	4635      	mov	r5, r6
 801a8c2:	e7e7      	b.n	801a894 <_realloc_r+0x1c>

0801a8c4 <_raise_r>:
 801a8c4:	291f      	cmp	r1, #31
 801a8c6:	b538      	push	{r3, r4, r5, lr}
 801a8c8:	4604      	mov	r4, r0
 801a8ca:	460d      	mov	r5, r1
 801a8cc:	d904      	bls.n	801a8d8 <_raise_r+0x14>
 801a8ce:	2316      	movs	r3, #22
 801a8d0:	6003      	str	r3, [r0, #0]
 801a8d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a8d6:	bd38      	pop	{r3, r4, r5, pc}
 801a8d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a8da:	b112      	cbz	r2, 801a8e2 <_raise_r+0x1e>
 801a8dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a8e0:	b94b      	cbnz	r3, 801a8f6 <_raise_r+0x32>
 801a8e2:	4620      	mov	r0, r4
 801a8e4:	f000 f830 	bl	801a948 <_getpid_r>
 801a8e8:	462a      	mov	r2, r5
 801a8ea:	4601      	mov	r1, r0
 801a8ec:	4620      	mov	r0, r4
 801a8ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a8f2:	f000 b817 	b.w	801a924 <_kill_r>
 801a8f6:	2b01      	cmp	r3, #1
 801a8f8:	d00a      	beq.n	801a910 <_raise_r+0x4c>
 801a8fa:	1c59      	adds	r1, r3, #1
 801a8fc:	d103      	bne.n	801a906 <_raise_r+0x42>
 801a8fe:	2316      	movs	r3, #22
 801a900:	6003      	str	r3, [r0, #0]
 801a902:	2001      	movs	r0, #1
 801a904:	e7e7      	b.n	801a8d6 <_raise_r+0x12>
 801a906:	2400      	movs	r4, #0
 801a908:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a90c:	4628      	mov	r0, r5
 801a90e:	4798      	blx	r3
 801a910:	2000      	movs	r0, #0
 801a912:	e7e0      	b.n	801a8d6 <_raise_r+0x12>

0801a914 <raise>:
 801a914:	4b02      	ldr	r3, [pc, #8]	; (801a920 <raise+0xc>)
 801a916:	4601      	mov	r1, r0
 801a918:	6818      	ldr	r0, [r3, #0]
 801a91a:	f7ff bfd3 	b.w	801a8c4 <_raise_r>
 801a91e:	bf00      	nop
 801a920:	24000060 	.word	0x24000060

0801a924 <_kill_r>:
 801a924:	b538      	push	{r3, r4, r5, lr}
 801a926:	4d07      	ldr	r5, [pc, #28]	; (801a944 <_kill_r+0x20>)
 801a928:	2300      	movs	r3, #0
 801a92a:	4604      	mov	r4, r0
 801a92c:	4608      	mov	r0, r1
 801a92e:	4611      	mov	r1, r2
 801a930:	602b      	str	r3, [r5, #0]
 801a932:	f7e6 fad7 	bl	8000ee4 <_kill>
 801a936:	1c43      	adds	r3, r0, #1
 801a938:	d102      	bne.n	801a940 <_kill_r+0x1c>
 801a93a:	682b      	ldr	r3, [r5, #0]
 801a93c:	b103      	cbz	r3, 801a940 <_kill_r+0x1c>
 801a93e:	6023      	str	r3, [r4, #0]
 801a940:	bd38      	pop	{r3, r4, r5, pc}
 801a942:	bf00      	nop
 801a944:	2400ee28 	.word	0x2400ee28

0801a948 <_getpid_r>:
 801a948:	f7e6 bac4 	b.w	8000ed4 <_getpid>

0801a94c <_malloc_usable_size_r>:
 801a94c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a950:	1f18      	subs	r0, r3, #4
 801a952:	2b00      	cmp	r3, #0
 801a954:	bfbc      	itt	lt
 801a956:	580b      	ldrlt	r3, [r1, r0]
 801a958:	18c0      	addlt	r0, r0, r3
 801a95a:	4770      	bx	lr

0801a95c <_init>:
 801a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a95e:	bf00      	nop
 801a960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a962:	bc08      	pop	{r3}
 801a964:	469e      	mov	lr, r3
 801a966:	4770      	bx	lr

0801a968 <_fini>:
 801a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a96a:	bf00      	nop
 801a96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a96e:	bc08      	pop	{r3}
 801a970:	469e      	mov	lr, r3
 801a972:	4770      	bx	lr
