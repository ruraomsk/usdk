
STM32H743_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b818  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003634  0801bab8  0801bab8  0002bab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801f0ec  0801f0ec  0002f0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801f0f0  0801f0f0  0002f0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000023c  24000000  0801f0f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000f454  2400023c  0801f330  0003023c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2400f690  0801f330  0003f690  2**0
                  ALLOC
  8 .lwip_sec     000419d0  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005b216  00000000  00000000  0003026a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000945a  00000000  00000000  0008b480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002820  00000000  00000000  000948e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002688  00000000  00000000  00097100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000141b6  00000000  00000000  00099788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003d519  00000000  00000000  000ad93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00187197  00000000  00000000  000eae57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00271fee  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bb90  00000000  00000000  00272044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400023c 	.word	0x2400023c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801baa0 	.word	0x0801baa0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000240 	.word	0x24000240
 80002dc:	0801baa0 	.word	0x0801baa0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2lz>:
 8000728:	b508      	push	{r3, lr}
 800072a:	4602      	mov	r2, r0
 800072c:	460b      	mov	r3, r1
 800072e:	ec43 2b17 	vmov	d7, r2, r3
 8000732:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	d403      	bmi.n	8000744 <__aeabi_d2lz+0x1c>
 800073c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000740:	f000 b80a 	b.w	8000758 <__aeabi_d2ulz>
 8000744:	eeb1 7b47 	vneg.f64	d7, d7
 8000748:	ec51 0b17 	vmov	r0, r1, d7
 800074c:	f000 f804 	bl	8000758 <__aeabi_d2ulz>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	bd08      	pop	{r3, pc}

08000758 <__aeabi_d2ulz>:
 8000758:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000788 <__aeabi_d2ulz+0x30>
 800075c:	ec41 0b17 	vmov	d7, r0, r1
 8000760:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000790 <__aeabi_d2ulz+0x38>
 8000764:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000768:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800076c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000770:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000774:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000778:	ee16 1a10 	vmov	r1, s12
 800077c:	ee17 0a90 	vmov	r0, s15
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	f3af 8000 	nop.w
 8000788:	00000000 	.word	0x00000000
 800078c:	3df00000 	.word	0x3df00000
 8000790:	00000000 	.word	0x00000000
 8000794:	41f00000 	.word	0x41f00000

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800079e:	f000 fa7f 	bl	8000ca0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007a2:	4b49      	ldr	r3, [pc, #292]	; (80008c8 <main+0x130>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d11b      	bne.n	80007e6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007ae:	f3bf 8f4f 	dsb	sy
}
 80007b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007b4:	f3bf 8f6f 	isb	sy
}
 80007b8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ba:	4b43      	ldr	r3, [pc, #268]	; (80008c8 <main+0x130>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007c2:	f3bf 8f4f 	dsb	sy
}
 80007c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007c8:	f3bf 8f6f 	isb	sy
}
 80007cc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007ce:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <main+0x130>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a3d      	ldr	r2, [pc, #244]	; (80008c8 <main+0x130>)
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007da:	f3bf 8f4f 	dsb	sy
}
 80007de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007e0:	f3bf 8f6f 	isb	sy
}
 80007e4:	e000      	b.n	80007e8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007e6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <main+0x130>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d138      	bne.n	8000866 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <main+0x130>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007fc:	f3bf 8f4f 	dsb	sy
}
 8000800:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <main+0x130>)
 8000804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000808:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	0b5b      	lsrs	r3, r3, #13
 800080e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000812:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800081c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	015a      	lsls	r2, r3, #5
 8000822:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000826:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800082c:	4926      	ldr	r1, [pc, #152]	; (80008c8 <main+0x130>)
 800082e:	4313      	orrs	r3, r2
 8000830:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1ef      	bne.n	800081e <main+0x86>
    } while(sets-- != 0U);
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1e5a      	subs	r2, r3, #1
 8000842:	60ba      	str	r2, [r7, #8]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1e5      	bne.n	8000814 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000848:	f3bf 8f4f 	dsb	sy
}
 800084c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <main+0x130>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	4a1d      	ldr	r2, [pc, #116]	; (80008c8 <main+0x130>)
 8000854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000858:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800085a:	f3bf 8f4f 	dsb	sy
}
 800085e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000860:	f3bf 8f6f 	isb	sy
}
 8000864:	e000      	b.n	8000868 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000866:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000868:	f001 f850 	bl	800190c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086c:	f000 f842 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000870:	f000 f8c4 	bl	80009fc <MX_GPIO_Init>
  MX_UART4_Init();
 8000874:	f000 f8ba 	bl	80009ec <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000878:	f005 fb76 	bl	8005f68 <osKernelInitialize>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  DeviceTimeInit();
 800087c:	f000 fe3c 	bl	80014f8 <DeviceTimeInit>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */

  DebugLoggerQueue = osMessageQueueNew(16, sizeof(DebugLoggerMsg), NULL);
 8000880:	2200      	movs	r2, #0
 8000882:	2188      	movs	r1, #136	; 0x88
 8000884:	2010      	movs	r0, #16
 8000886:	f005 fea9 	bl	80065dc <osMessageQueueNew>
 800088a:	4603      	mov	r3, r0
 800088c:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <main+0x134>)
 800088e:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000890:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <main+0x138>)
 8000892:	2100      	movs	r1, #0
 8000894:	480f      	ldr	r0, [pc, #60]	; (80008d4 <main+0x13c>)
 8000896:	f005 fbc6 	bl	8006026 <osThreadNew>
 800089a:	4603      	mov	r3, r0
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <main+0x140>)
 800089e:	6013      	str	r3, [r2, #0]

  /* creation of DebugLogger */
  DebugLoggerHandle = osThreadNew(StartDebugLogger, NULL, &DebugLogger_attributes);
 80008a0:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <main+0x144>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	480e      	ldr	r0, [pc, #56]	; (80008e0 <main+0x148>)
 80008a6:	f005 fbbe 	bl	8006026 <osThreadNew>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <main+0x14c>)
 80008ae:	6013      	str	r3, [r2, #0]

  /* creation of TCPMain */
  TCPMainHandle = osThreadNew(StartTCPMain, NULL, &TCPMain_attributes);
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <main+0x150>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <main+0x154>)
 80008b6:	f005 fbb6 	bl	8006026 <osThreadNew>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <main+0x158>)
 80008be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008c0:	f005 fb76 	bl	8005fb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80008c4:	e7fe      	b.n	80008c4 <main+0x12c>
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00
 80008cc:	2400b90c 	.word	0x2400b90c
 80008d0:	0801ea8c 	.word	0x0801ea8c
 80008d4:	08000c1d 	.word	0x08000c1d
 80008d8:	2400b914 	.word	0x2400b914
 80008dc:	0801eab0 	.word	0x0801eab0
 80008e0:	08000c51 	.word	0x08000c51
 80008e4:	2400b910 	.word	0x2400b910
 80008e8:	0801ead4 	.word	0x0801ead4
 80008ec:	08000c79 	.word	0x08000c79
 80008f0:	2400b918 	.word	0x2400b918

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b09c      	sub	sp, #112	; 0x70
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	224c      	movs	r2, #76	; 0x4c
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f017 fd2a 	bl	801835c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2220      	movs	r2, #32
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f017 fd24 	bl	801835c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000914:	2002      	movs	r0, #2
 8000916:	f003 fa47 	bl	8003da8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <SystemClock_Config+0xf0>)
 8000920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000922:	4a30      	ldr	r2, [pc, #192]	; (80009e4 <SystemClock_Config+0xf0>)
 8000924:	f023 0301 	bic.w	r3, r3, #1
 8000928:	62d3      	str	r3, [r2, #44]	; 0x2c
 800092a:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <SystemClock_Config+0xf0>)
 800092c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <SystemClock_Config+0xf4>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a2b      	ldr	r2, [pc, #172]	; (80009e8 <SystemClock_Config+0xf4>)
 800093a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <SystemClock_Config+0xf4>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800094c:	bf00      	nop
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <SystemClock_Config+0xf4>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800095a:	d1f8      	bne.n	800094e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800095c:	2301      	movs	r3, #1
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000960:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2302      	movs	r3, #2
 8000968:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096a:	2302      	movs	r3, #2
 800096c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800096e:	2304      	movs	r3, #4
 8000970:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000972:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000976:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000984:	2304      	movs	r3, #4
 8000986:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000988:	2300      	movs	r3, #0
 800098a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4618      	mov	r0, r3
 8000996:	f003 fa41 	bl	8003e1c <HAL_RCC_OscConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009a0:	f000 f9ce 	bl	8000d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a4:	233f      	movs	r3, #63	; 0x3f
 80009a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a8:	2303      	movs	r3, #3
 80009aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009b0:	2308      	movs	r3, #8
 80009b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009b4:	2340      	movs	r3, #64	; 0x40
 80009b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009b8:	2340      	movs	r3, #64	; 0x40
 80009ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009c2:	2340      	movs	r3, #64	; 0x40
 80009c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2102      	movs	r1, #2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 fe36 	bl	800463c <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80009d6:	f000 f9b3 	bl	8000d40 <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3770      	adds	r7, #112	; 0x70
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	58000400 	.word	0x58000400
 80009e8:	58024800 	.word	0x58024800

080009ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 1 */
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b7a      	ldr	r3, [pc, #488]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	4a78      	ldr	r2, [pc, #480]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a22:	4b76      	ldr	r3, [pc, #472]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	61bb      	str	r3, [r7, #24]
 8000a2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a30:	4b72      	ldr	r3, [pc, #456]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a36:	4a71      	ldr	r2, [pc, #452]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a40:	4b6e      	ldr	r3, [pc, #440]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b6b      	ldr	r3, [pc, #428]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	4a69      	ldr	r2, [pc, #420]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5e:	4b67      	ldr	r3, [pc, #412]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	4b63      	ldr	r3, [pc, #396]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a72:	4a62      	ldr	r2, [pc, #392]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7c:	4b5f      	ldr	r3, [pc, #380]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	4b5c      	ldr	r3, [pc, #368]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	4a5a      	ldr	r2, [pc, #360]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9a:	4b58      	ldr	r3, [pc, #352]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	f003 0308 	and.w	r3, r3, #8
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa8:	4b54      	ldr	r3, [pc, #336]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	4a53      	ldr	r2, [pc, #332]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab8:	4b50      	ldr	r3, [pc, #320]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac6:	4b4d      	ldr	r3, [pc, #308]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a4b      	ldr	r2, [pc, #300]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b49      	ldr	r3, [pc, #292]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000aea:	4845      	ldr	r0, [pc, #276]	; (8000c00 <MX_GPIO_Init+0x204>)
 8000aec:	f003 f942 	bl	8003d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af6:	4843      	ldr	r0, [pc, #268]	; (8000c04 <MX_GPIO_Init+0x208>)
 8000af8:	f003 f93c 	bl	8003d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2102      	movs	r1, #2
 8000b00:	4841      	ldr	r0, [pc, #260]	; (8000c08 <MX_GPIO_Init+0x20c>)
 8000b02:	f003 f937 	bl	8003d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	483c      	ldr	r0, [pc, #240]	; (8000c0c <MX_GPIO_Init+0x210>)
 8000b1c:	f002 ff7a 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b30:	2308      	movs	r3, #8
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4835      	ldr	r0, [pc, #212]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000b3c:	f002 ff6a 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b40:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4829      	ldr	r0, [pc, #164]	; (8000c00 <MX_GPIO_Init+0x204>)
 8000b5a:	f002 ff5b 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b70:	2307      	movs	r3, #7
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4822      	ldr	r0, [pc, #136]	; (8000c04 <MX_GPIO_Init+0x208>)
 8000b7c:	f002 ff4a 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	481a      	ldr	r0, [pc, #104]	; (8000c04 <MX_GPIO_Init+0x208>)
 8000b9a:	f002 ff3b 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_GPIO_Init+0x218>)
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4819      	ldr	r0, [pc, #100]	; (8000c18 <MX_GPIO_Init+0x21c>)
 8000bb2:	f002 ff2f 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bb6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bc8:	230a      	movs	r3, #10
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480f      	ldr	r0, [pc, #60]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000bd4:	f002 ff1e 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <MX_GPIO_Init+0x20c>)
 8000bf0:	f002 ff10 	bl	8003a14 <HAL_GPIO_Init>

}
 8000bf4:	bf00      	nop
 8000bf6:	3730      	adds	r7, #48	; 0x30
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	58024400 	.word	0x58024400
 8000c00:	58020400 	.word	0x58020400
 8000c04:	58020c00 	.word	0x58020c00
 8000c08:	58021000 	.word	0x58021000
 8000c0c:	58020800 	.word	0x58020800
 8000c10:	58020000 	.word	0x58020000
 8000c14:	11110000 	.word	0x11110000
 8000c18:	58021800 	.word	0x58021800

08000c1c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000c24:	f004 fb94 	bl	8005350 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  ReadyETH=1;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <StartDefaultTask+0x2c>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
  ShareInit();
 8000c2e:	f016 ffa7 	bl	8017b80 <ShareInit>
  Debug_Message(LOG_INFO, "Запущена основная задача");
 8000c32:	4906      	ldr	r1, [pc, #24]	; (8000c4c <StartDefaultTask+0x30>)
 8000c34:	2009      	movs	r0, #9
 8000c36:	f000 fabd 	bl	80011b4 <Debug_Message>

  for (;;) {
	  osDelay(5000);
 8000c3a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c3e:	f005 fa85 	bl	800614c <osDelay>
	  ShareSaveChange();
 8000c42:	f016 ff25 	bl	8017a90 <ShareSaveChange>
	  osDelay(5000);
 8000c46:	e7f8      	b.n	8000c3a <StartDefaultTask+0x1e>
 8000c48:	24000258 	.word	0x24000258
 8000c4c:	0801bad8 	.word	0x0801bad8

08000c50 <StartDebugLogger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugLogger */
void StartDebugLogger(void *argument)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugLogger */
  /* Infinite loop */
	while (!ReadyShare) {
 8000c58:	e002      	b.n	8000c60 <StartDebugLogger+0x10>
		osDelay(100);
 8000c5a:	2064      	movs	r0, #100	; 0x64
 8000c5c:	f005 fa76 	bl	800614c <osDelay>
	while (!ReadyShare) {
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <StartDebugLogger+0x24>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d0f8      	beq.n	8000c5a <StartDebugLogger+0xa>
	}
	DebugLoggerLoop();
 8000c68:	f000 fb04 	bl	8001274 <DebugLoggerLoop>
  /* USER CODE END StartDebugLogger */
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	24000260 	.word	0x24000260

08000c78 <StartTCPMain>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTCPMain */
void StartTCPMain(void *argument)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTCPMain */
  /* Infinite loop */
	while (!ReadyShare) {
 8000c80:	e002      	b.n	8000c88 <StartTCPMain+0x10>
		osDelay(100);
 8000c82:	2064      	movs	r0, #100	; 0x64
 8000c84:	f005 fa62 	bl	800614c <osDelay>
	while (!ReadyShare) {
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <StartTCPMain+0x24>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f8      	beq.n	8000c82 <StartTCPMain+0xa>
	}
	TCPMainLoop();
 8000c90:	f013 fdf4 	bl	801487c <TCPMainLoop>
  /* USER CODE END StartTCPMain */
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	24000260 	.word	0x24000260

08000ca0 <MPU_Config>:

/* MPU Configuration */

void MPU_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cb2:	f000 ff87 	bl	8001bc4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MPU_Config+0x78>)
 8000cc0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000cc2:	230e      	movs	r3, #14
 8000cc4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 ffa5 	bl	8001c34 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d02:	463b      	mov	r3, r7
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 ff95 	bl	8001c34 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d0a:	2004      	movs	r0, #4
 8000d0c:	f000 ff72 	bl	8001bf4 <HAL_MPU_Enable>

}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	30040000 	.word	0x30040000

08000d1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d2e:	f000 fe29 	bl	8001984 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40001000 	.word	0x40001000

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_MspInit+0x38>)
 8000d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_MspInit+0x38>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_MspInit+0x38>)
 8000d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	210f      	movs	r1, #15
 8000d74:	f06f 0001 	mvn.w	r0, #1
 8000d78:	f000 fefc 	bl	8001b74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	58024400 	.word	0x58024400

08000d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b090      	sub	sp, #64	; 0x40
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b0f      	cmp	r3, #15
 8000d94:	d827      	bhi.n	8000de6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000d96:	2200      	movs	r2, #0
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	2036      	movs	r0, #54	; 0x36
 8000d9c:	f000 feea 	bl	8001b74 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000da0:	2036      	movs	r0, #54	; 0x36
 8000da2:	f000 ff01 	bl	8001ba8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000da6:	4a29      	ldr	r2, [pc, #164]	; (8000e4c <HAL_InitTick+0xc4>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dac:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <HAL_InitTick+0xc8>)
 8000dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db2:	4a27      	ldr	r2, [pc, #156]	; (8000e50 <HAL_InitTick+0xc8>)
 8000db4:	f043 0310 	orr.w	r3, r3, #16
 8000db8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dbc:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <HAL_InitTick+0xc8>)
 8000dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dca:	f107 0210 	add.w	r2, r7, #16
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 ffa7 	bl	8004d28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d106      	bne.n	8000df2 <HAL_InitTick+0x6a>
 8000de4:	e001      	b.n	8000dea <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e02b      	b.n	8000e42 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dea:	f003 ff87 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 8000dee:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000df0:	e004      	b.n	8000dfc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000df2:	f003 ff83 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 8000df6:	4603      	mov	r3, r0
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <HAL_InitTick+0xcc>)
 8000e00:	fba2 2303 	umull	r2, r3, r2, r3
 8000e04:	0c9b      	lsrs	r3, r3, #18
 8000e06:	3b01      	subs	r3, #1
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_InitTick+0xd0>)
 8000e0c:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <HAL_InitTick+0xd4>)
 8000e0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_InitTick+0xd0>)
 8000e12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e16:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e18:	4a0f      	ldr	r2, [pc, #60]	; (8000e58 <HAL_InitTick+0xd0>)
 8000e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e1c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_InitTick+0xd0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_InitTick+0xd0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e2a:	480b      	ldr	r0, [pc, #44]	; (8000e58 <HAL_InitTick+0xd0>)
 8000e2c:	f003 ffbe 	bl	8004dac <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d104      	bne.n	8000e40 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e36:	4808      	ldr	r0, [pc, #32]	; (8000e58 <HAL_InitTick+0xd0>)
 8000e38:	f004 f81a 	bl	8004e70 <HAL_TIM_Base_Start_IT>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	e000      	b.n	8000e42 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3740      	adds	r7, #64	; 0x40
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	24000008 	.word	0x24000008
 8000e50:	58024400 	.word	0x58024400
 8000e54:	431bde83 	.word	0x431bde83
 8000e58:	2400b91c 	.word	0x2400b91c
 8000e5c:	40001000 	.word	0x40001000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <TIM6_DAC_IRQHandler+0x10>)
 8000e92:	f004 f85d 	bl	8004f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2400b91c 	.word	0x2400b91c

08000ea0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <ETH_IRQHandler+0x10>)
 8000ea6:	f001 fbe3 	bl	8002670 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2400bce0 	.word	0x2400bce0

08000eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
	return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_kill>:

int _kill(int pid, int sig)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <_kill+0x20>)
 8000ed0:	2216      	movs	r2, #22
 8000ed2:	601a      	str	r2, [r3, #0]
	return -1;
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	2400ee5c 	.word	0x2400ee5c

08000ee8 <_exit>:

void _exit (int status)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ffe5 	bl	8000ec4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000efa:	e7fe      	b.n	8000efa <_exit+0x12>

08000efc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	e00a      	b.n	8000f24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f0e:	f3af 8000 	nop.w
 8000f12:	4601      	mov	r1, r0
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	60ba      	str	r2, [r7, #8]
 8000f1a:	b2ca      	uxtb	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbf0      	blt.n	8000f0e <_read+0x12>
	}

return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e009      	b.n	8000f5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	60ba      	str	r2, [r7, #8]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbf1      	blt.n	8000f48 <_write+0x12>
	}
	return len;
 8000f64:	687b      	ldr	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <_close>:

int _close(int file)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
	return -1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f96:	605a      	str	r2, [r3, #4]
	return 0;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_isatty>:

int _isatty(int file)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
	return 1;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d205      	bcs.n	8001014 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <_sbrk+0x6c>)
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001012:	e009      	b.n	8001028 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a06      	ldr	r2, [pc, #24]	; (800103c <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	371c      	adds	r7, #28
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	24080000 	.word	0x24080000
 8001038:	00000400 	.word	0x00000400
 800103c:	24000264 	.word	0x24000264
 8001040:	2400f690 	.word	0x2400f690
 8001044:	2400ee5c 	.word	0x2400ee5c

08001048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800104c:	4b39      	ldr	r3, [pc, #228]	; (8001134 <SystemInit+0xec>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a38      	ldr	r2, [pc, #224]	; (8001134 <SystemInit+0xec>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800105c:	4b36      	ldr	r3, [pc, #216]	; (8001138 <SystemInit+0xf0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	2b06      	cmp	r3, #6
 8001066:	d807      	bhi.n	8001078 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001068:	4b33      	ldr	r3, [pc, #204]	; (8001138 <SystemInit+0xf0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 030f 	bic.w	r3, r3, #15
 8001070:	4a31      	ldr	r2, [pc, #196]	; (8001138 <SystemInit+0xf0>)
 8001072:	f043 0307 	orr.w	r3, r3, #7
 8001076:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001078:	4b30      	ldr	r3, [pc, #192]	; (800113c <SystemInit+0xf4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a2f      	ldr	r2, [pc, #188]	; (800113c <SystemInit+0xf4>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <SystemInit+0xf4>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800108a:	4b2c      	ldr	r3, [pc, #176]	; (800113c <SystemInit+0xf4>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	492b      	ldr	r1, [pc, #172]	; (800113c <SystemInit+0xf4>)
 8001090:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <SystemInit+0xf8>)
 8001092:	4013      	ands	r3, r2
 8001094:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <SystemInit+0xf0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d007      	beq.n	80010b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <SystemInit+0xf0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 030f 	bic.w	r3, r3, #15
 80010aa:	4a23      	ldr	r2, [pc, #140]	; (8001138 <SystemInit+0xf0>)
 80010ac:	f043 0307 	orr.w	r3, r3, #7
 80010b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010b2:	4b22      	ldr	r3, [pc, #136]	; (800113c <SystemInit+0xf4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <SystemInit+0xf4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <SystemInit+0xf4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <SystemInit+0xf4>)
 80010c6:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <SystemInit+0xfc>)
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <SystemInit+0xf4>)
 80010cc:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <SystemInit+0x100>)
 80010ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <SystemInit+0xf4>)
 80010d2:	4a1e      	ldr	r2, [pc, #120]	; (800114c <SystemInit+0x104>)
 80010d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <SystemInit+0xf4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <SystemInit+0xf4>)
 80010de:	4a1b      	ldr	r2, [pc, #108]	; (800114c <SystemInit+0x104>)
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <SystemInit+0xf4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <SystemInit+0xf4>)
 80010ea:	4a18      	ldr	r2, [pc, #96]	; (800114c <SystemInit+0x104>)
 80010ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <SystemInit+0xf4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <SystemInit+0xf4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a10      	ldr	r2, [pc, #64]	; (800113c <SystemInit+0xf4>)
 80010fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <SystemInit+0xf4>)
 8001102:	2200      	movs	r2, #0
 8001104:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <SystemInit+0x108>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <SystemInit+0x10c>)
 800110c:	4013      	ands	r3, r2
 800110e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001112:	d202      	bcs.n	800111a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <SystemInit+0x110>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <SystemInit+0x114>)
 800111c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001120:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SystemInit+0xec>)
 8001124:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001128:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	52002000 	.word	0x52002000
 800113c:	58024400 	.word	0x58024400
 8001140:	eaf6ed7f 	.word	0xeaf6ed7f
 8001144:	02020200 	.word	0x02020200
 8001148:	01ff0000 	.word	0x01ff0000
 800114c:	01010280 	.word	0x01010280
 8001150:	5c001000 	.word	0x5c001000
 8001154:	ffff0000 	.word	0xffff0000
 8001158:	51008108 	.word	0x51008108
 800115c:	52004000 	.word	0x52004000

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001198 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001164:	f7ff ff70 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	; (80011a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	; (80011ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f017 f813 	bl	80181b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff fb01 	bl	8000798 <main>
  bx  lr
 8001196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800119c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011a0:	2400023c 	.word	0x2400023c
  ldr r2, =_sidata
 80011a4:	0801f0f4 	.word	0x0801f0f4
  ldr r2, =_sbss
 80011a8:	2400023c 	.word	0x2400023c
  ldr r4, =_ebss
 80011ac:	2400f690 	.word	0x2400f690

080011b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC3_IRQHandler>
	...

080011b4 <Debug_Message>:
	ip_addr_t ipAddr;
	int adr1, adr2, adr3, adr4;
	unsigned int port;
} debugSetup;

void Debug_Message(int level, char *message) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	DebugLoggerMsg *newLog;
	newLog = malloc(sizeof(DebugLoggerMsg));
 80011be:	2088      	movs	r0, #136	; 0x88
 80011c0:	f017 f886 	bl	80182d0 <malloc>
 80011c4:	4603      	mov	r3, r0
 80011c6:	60bb      	str	r3, [r7, #8]
	memset(newLog->Buffer, 0, sizeof(newLog->Buffer));
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	3308      	adds	r3, #8
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f017 f8c3 	bl	801835c <memset>
	int len = strlen(message);
 80011d6:	6838      	ldr	r0, [r7, #0]
 80011d8:	f7ff f88c 	bl	80002f4 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	60fb      	str	r3, [r7, #12]
	if (len > (sizeof(newLog->Buffer) - 1)) {
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b7f      	cmp	r3, #127	; 0x7f
 80011e4:	d901      	bls.n	80011ea <Debug_Message+0x36>
		len = sizeof(newLog->Buffer) - 1;
 80011e6:	237f      	movs	r3, #127	; 0x7f
 80011e8:	60fb      	str	r3, [r7, #12]
	}
	memcpy(newLog->Buffer, message, len);
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	3308      	adds	r3, #8
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f017 f88a 	bl	801830c <memcpy>
	newLog->Level = level;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]
	newLog->time = GetDeviceTime();
 80011fe:	f000 f98d 	bl	800151c <GetDeviceTime>
 8001202:	4602      	mov	r2, r0
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	605a      	str	r2, [r3, #4]
	osMessageQueuePut(DebugLoggerQueue, newLog, 0, 0);
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <Debug_Message+0x70>)
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	2300      	movs	r3, #0
 800120e:	2200      	movs	r2, #0
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	f005 fa57 	bl	80066c4 <osMessageQueuePut>
	free(newLog);
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f017 f862 	bl	80182e0 <free>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2400b90c 	.word	0x2400b90c

08001228 <Debuger_Status>:
char* Debuger_Status(int level) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	switch (level) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b09      	cmp	r3, #9
 8001234:	d00c      	beq.n	8001250 <Debuger_Status+0x28>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b09      	cmp	r3, #9
 800123a:	dc0b      	bgt.n	8001254 <Debuger_Status+0x2c>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <Debuger_Status+0x24>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d105      	bne.n	8001254 <Debuger_Status+0x2c>
	case LOG_ERROR:
		return "ERROR";
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <Debuger_Status+0x3c>)
 800124a:	e004      	b.n	8001256 <Debuger_Status+0x2e>
	case LOG_FATAL:
		return "FATAL";
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <Debuger_Status+0x40>)
 800124e:	e002      	b.n	8001256 <Debuger_Status+0x2e>
	case LOG_INFO:
		return "INFO ";
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <Debuger_Status+0x44>)
 8001252:	e000      	b.n	8001256 <Debuger_Status+0x2e>
	default:
		return "UNDEF";
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <Debuger_Status+0x48>)
	}
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	0801bb08 	.word	0x0801bb08
 8001268:	0801bb10 	.word	0x0801bb10
 800126c:	0801bb18 	.word	0x0801bb18
 8001270:	0801bb20 	.word	0x0801bb20

08001274 <DebugLoggerLoop>:
void DebugLoggerLoop() {
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b0a7      	sub	sp, #156	; 0x9c
 8001278:	af02      	add	r7, sp, #8
	struct udp_pcb *udp;
	DebugReadSetup();
 800127a:	f000 f86b 	bl	8001354 <DebugReadSetup>
	DebugWriteSetup();
 800127e:	f000 f8f9 	bl	8001474 <DebugWriteSetup>
	udp = udp_new();
 8001282:	f010 fe21 	bl	8011ec8 <udp_new>
 8001286:	4603      	mov	r3, r0
 8001288:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	udp_connect(udp, &debugSetup.ipAddr, debugSetup.port);
 800128c:	4b2b      	ldr	r3, [pc, #172]	; (800133c <DebugLoggerLoop+0xc8>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	461a      	mov	r2, r3
 8001292:	492a      	ldr	r1, [pc, #168]	; (800133c <DebugLoggerLoop+0xc8>)
 8001294:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001298:	f010 fda8 	bl	8011dec <udp_connect>
	ReadyLogger = 1;
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <DebugLoggerLoop+0xcc>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
	Debug_Message(LOG_INFO, "Logger запущен");
 80012a2:	4928      	ldr	r1, [pc, #160]	; (8001344 <DebugLoggerLoop+0xd0>)
 80012a4:	2009      	movs	r0, #9
 80012a6:	f7ff ff85 	bl	80011b4 <Debug_Message>
	/* Infinite loop */
	for (;;) {
		DebugLoggerMsg msg;
		if (osMessageQueueGet(DebugLoggerQueue, &msg, NULL, 0) == osOK) {
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <DebugLoggerLoop+0xd4>)
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	4639      	mov	r1, r7
 80012b0:	2300      	movs	r3, #0
 80012b2:	2200      	movs	r2, #0
 80012b4:	f005 fa66 	bl	8006784 <osMessageQueueGet>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d139      	bne.n	8001332 <DebugLoggerLoop+0xbe>
			sprintf(LoggerBuffer, "%s:%6s:%s\n\r", TimeToString(msg.time),
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f935 	bl	8001530 <TimeToString>
 80012c6:	4604      	mov	r4, r0
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ffac 	bl	8001228 <Debuger_Status>
 80012d0:	4602      	mov	r2, r0
 80012d2:	463b      	mov	r3, r7
 80012d4:	3308      	adds	r3, #8
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	4613      	mov	r3, r2
 80012da:	4622      	mov	r2, r4
 80012dc:	491b      	ldr	r1, [pc, #108]	; (800134c <DebugLoggerLoop+0xd8>)
 80012de:	481c      	ldr	r0, [pc, #112]	; (8001350 <DebugLoggerLoop+0xdc>)
 80012e0:	f017 f9c0 	bl	8018664 <siprintf>
					Debuger_Status(msg.Level), msg.Buffer);
			struct pbuf *udp_buffer = pbuf_alloc(PBUF_TRANSPORT,
					strlen(LoggerBuffer), PBUF_RAM);
 80012e4:	481a      	ldr	r0, [pc, #104]	; (8001350 <DebugLoggerLoop+0xdc>)
 80012e6:	f7ff f805 	bl	80002f4 <strlen>
 80012ea:	4603      	mov	r3, r0
			struct pbuf *udp_buffer = pbuf_alloc(PBUF_TRANSPORT,
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80012f2:	4619      	mov	r1, r3
 80012f4:	2036      	movs	r0, #54	; 0x36
 80012f6:	f009 feef 	bl	800b0d8 <pbuf_alloc>
 80012fa:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			if (udp_buffer != NULL) {
 80012fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001302:	2b00      	cmp	r3, #0
 8001304:	d015      	beq.n	8001332 <DebugLoggerLoop+0xbe>
				memcpy(udp_buffer->payload, LoggerBuffer, strlen(LoggerBuffer));
 8001306:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800130a:	685c      	ldr	r4, [r3, #4]
 800130c:	4810      	ldr	r0, [pc, #64]	; (8001350 <DebugLoggerLoop+0xdc>)
 800130e:	f7fe fff1 	bl	80002f4 <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	490e      	ldr	r1, [pc, #56]	; (8001350 <DebugLoggerLoop+0xdc>)
 8001318:	4620      	mov	r0, r4
 800131a:	f016 fff7 	bl	801830c <memcpy>
				udp_send(udp, udp_buffer);
 800131e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001322:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001326:	f010 faef 	bl	8011908 <udp_send>
				pbuf_free(udp_buffer);
 800132a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800132e:	f00a f9b7 	bl	800b6a0 <pbuf_free>
			}
		}
		osDelay(100);
 8001332:	2064      	movs	r0, #100	; 0x64
 8001334:	f004 ff0a 	bl	800614c <osDelay>
	for (;;) {
 8001338:	e7b7      	b.n	80012aa <DebugLoggerLoop+0x36>
 800133a:	bf00      	nop
 800133c:	2400b968 	.word	0x2400b968
 8001340:	2400025c 	.word	0x2400025c
 8001344:	0801bb28 	.word	0x0801bb28
 8001348:	2400b90c 	.word	0x2400b90c
 800134c:	0801bb40 	.word	0x0801bb40
 8001350:	2400b980 	.word	0x2400b980

08001354 <DebugReadSetup>:
	}
}
void DebugReadSetup(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af02      	add	r7, sp, #8
	JSON_Value *root = ShareGetJson("debug");
 800135a:	483d      	ldr	r0, [pc, #244]	; (8001450 <DebugReadSetup+0xfc>)
 800135c:	f016 fc72 	bl	8017c44 <ShareGetJson>
 8001360:	4603      	mov	r3, r0
 8001362:	607b      	str	r3, [r7, #4]
	JSON_Object *object = json_value_get_object(root);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f016 f851 	bl	801740c <json_value_get_object>
 800136a:	6038      	str	r0, [r7, #0]
	debugSetup.port = (int) json_object_get_number(object, "port");
 800136c:	4939      	ldr	r1, [pc, #228]	; (8001454 <DebugReadSetup+0x100>)
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f015 ff91 	bl	8017296 <json_object_get_number>
 8001374:	eeb0 7b40 	vmov.f64	d7, d0
 8001378:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800137c:	ee17 2a90 	vmov	r2, s15
 8001380:	4b35      	ldr	r3, [pc, #212]	; (8001458 <DebugReadSetup+0x104>)
 8001382:	615a      	str	r2, [r3, #20]
	sscanf(json_object_get_string(object, "ip"), "%d.%d.%d.%d",
 8001384:	4935      	ldr	r1, [pc, #212]	; (800145c <DebugReadSetup+0x108>)
 8001386:	6838      	ldr	r0, [r7, #0]
 8001388:	f015 ff73 	bl	8017272 <json_object_get_string>
 800138c:	4b34      	ldr	r3, [pc, #208]	; (8001460 <DebugReadSetup+0x10c>)
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <DebugReadSetup+0x110>)
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	4b34      	ldr	r3, [pc, #208]	; (8001468 <DebugReadSetup+0x114>)
 8001396:	4a35      	ldr	r2, [pc, #212]	; (800146c <DebugReadSetup+0x118>)
 8001398:	4935      	ldr	r1, [pc, #212]	; (8001470 <DebugReadSetup+0x11c>)
 800139a:	f017 f983 	bl	80186a4 <siscanf>
			&debugSetup.adr1, &debugSetup.adr2, &debugSetup.adr3,
			&debugSetup.adr4);
	IP_ADDR4(&debugSetup.ipAddr, debugSetup.adr1, debugSetup.adr2,
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <DebugReadSetup+0x104>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	061a      	lsls	r2, r3, #24
 80013a4:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <DebugReadSetup+0x104>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	041b      	lsls	r3, r3, #16
 80013aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80013ae:	431a      	orrs	r2, r3
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <DebugReadSetup+0x104>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	431a      	orrs	r2, r3
 80013ba:	4b27      	ldr	r3, [pc, #156]	; (8001458 <DebugReadSetup+0x104>)
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	061a      	lsls	r2, r3, #24
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <DebugReadSetup+0x104>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	0619      	lsls	r1, r3, #24
 80013ca:	4b23      	ldr	r3, [pc, #140]	; (8001458 <DebugReadSetup+0x104>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	041b      	lsls	r3, r3, #16
 80013d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80013d4:	4319      	orrs	r1, r3
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <DebugReadSetup+0x104>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4319      	orrs	r1, r3
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <DebugReadSetup+0x104>)
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	430b      	orrs	r3, r1
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80013ee:	431a      	orrs	r2, r3
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <DebugReadSetup+0x104>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	0619      	lsls	r1, r3, #24
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <DebugReadSetup+0x104>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	041b      	lsls	r3, r3, #16
 80013fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001400:	4319      	orrs	r1, r3
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <DebugReadSetup+0x104>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b29b      	uxth	r3, r3
 800140a:	4319      	orrs	r1, r3
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <DebugReadSetup+0x104>)
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	430b      	orrs	r3, r1
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800141a:	431a      	orrs	r2, r3
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <DebugReadSetup+0x104>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	0619      	lsls	r1, r3, #24
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <DebugReadSetup+0x104>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	041b      	lsls	r3, r3, #16
 8001428:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800142c:	4319      	orrs	r1, r3
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <DebugReadSetup+0x104>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b29b      	uxth	r3, r3
 8001436:	4319      	orrs	r1, r3
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <DebugReadSetup+0x104>)
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	430b      	orrs	r3, r1
 8001440:	0e1b      	lsrs	r3, r3, #24
 8001442:	4313      	orrs	r3, r2
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <DebugReadSetup+0x104>)
 8001446:	6013      	str	r3, [r2, #0]
			debugSetup.adr3, debugSetup.adr4);
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	0801bb4c 	.word	0x0801bb4c
 8001454:	0801bb54 	.word	0x0801bb54
 8001458:	2400b968 	.word	0x2400b968
 800145c:	0801bb5c 	.word	0x0801bb5c
 8001460:	2400b978 	.word	0x2400b978
 8001464:	2400b974 	.word	0x2400b974
 8001468:	2400b970 	.word	0x2400b970
 800146c:	2400b96c 	.word	0x2400b96c
 8001470:	0801bb60 	.word	0x0801bb60

08001474 <DebugWriteSetup>:

void DebugWriteSetup(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af02      	add	r7, sp, #8
	JSON_Value *root_value = json_value_init_object();
 800147a:	f016 f87d 	bl	8017578 <json_value_init_object>
 800147e:	60f8      	str	r0, [r7, #12]
	JSON_Object *root_object = json_value_get_object(root_value);
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f015 ffc3 	bl	801740c <json_value_get_object>
 8001486:	60b8      	str	r0, [r7, #8]
	char *serialized_string = NULL;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
	sprintf(LoggerBuffer, "%d.%d.%d.%d", debugSetup.adr1, debugSetup.adr2,
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <DebugWriteSetup+0x6c>)
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <DebugWriteSetup+0x6c>)
 8001492:	6898      	ldr	r0, [r3, #8]
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <DebugWriteSetup+0x6c>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <DebugWriteSetup+0x6c>)
 800149a:	6912      	ldr	r2, [r2, #16]
 800149c:	9201      	str	r2, [sp, #4]
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	4603      	mov	r3, r0
 80014a2:	460a      	mov	r2, r1
 80014a4:	490f      	ldr	r1, [pc, #60]	; (80014e4 <DebugWriteSetup+0x70>)
 80014a6:	4810      	ldr	r0, [pc, #64]	; (80014e8 <DebugWriteSetup+0x74>)
 80014a8:	f017 f8dc 	bl	8018664 <siprintf>
			debugSetup.adr3, debugSetup.adr4);
	json_object_set_string(root_object, "ip", LoggerBuffer);
 80014ac:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <DebugWriteSetup+0x74>)
 80014ae:	490f      	ldr	r1, [pc, #60]	; (80014ec <DebugWriteSetup+0x78>)
 80014b0:	68b8      	ldr	r0, [r7, #8]
 80014b2:	f016 fa85 	bl	80179c0 <json_object_set_string>
	json_object_set_number(root_object, "port", debugSetup.port);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <DebugWriteSetup+0x6c>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80014c2:	eeb0 0b47 	vmov.f64	d0, d7
 80014c6:	490a      	ldr	r1, [pc, #40]	; (80014f0 <DebugWriteSetup+0x7c>)
 80014c8:	68b8      	ldr	r0, [r7, #8]
 80014ca:	f016 fa94 	bl	80179f6 <json_object_set_number>
	ShareSetJson("debug", root_value);
 80014ce:	68f9      	ldr	r1, [r7, #12]
 80014d0:	4808      	ldr	r0, [pc, #32]	; (80014f4 <DebugWriteSetup+0x80>)
 80014d2:	f016 fbe5 	bl	8017ca0 <ShareSetJson>
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2400b968 	.word	0x2400b968
 80014e4:	0801bb60 	.word	0x0801bb60
 80014e8:	2400b980 	.word	0x2400b980
 80014ec:	0801bb5c 	.word	0x0801bb5c
 80014f0:	0801bb54 	.word	0x0801bb54
 80014f4:	0801bb4c 	.word	0x0801bb4c

080014f8 <DeviceTimeInit>:
#include "DeviceTime.h"

static dev_time DeviceTimer;
static char DeviceTimeBuffer[20];
static osMutexId_t TimerMutex;
void DeviceTimeInit(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	//Здесь потом напишем
	DeviceTimer=0;
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <DeviceTimeInit+0x1c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
	TimerMutex=osMutexNew(NULL);
 8001502:	2000      	movs	r0, #0
 8001504:	f004 fe3d 	bl	8006182 <osMutexNew>
 8001508:	4603      	mov	r3, r0
 800150a:	4a03      	ldr	r2, [pc, #12]	; (8001518 <DeviceTimeInit+0x20>)
 800150c:	6013      	str	r3, [r2, #0]
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	24000268 	.word	0x24000268
 8001518:	24000280 	.word	0x24000280

0800151c <GetDeviceTime>:
dev_time GetDeviceTime(){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	UpdateDeviceTime();
 8001520:	f000 f886 	bl	8001630 <UpdateDeviceTime>
	return DeviceTimer;
 8001524:	4b01      	ldr	r3, [pc, #4]	; (800152c <GetDeviceTime+0x10>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	bd80      	pop	{r7, pc}
 800152c:	24000268 	.word	0x24000268

08001530 <TimeToString>:
char* TimeToString(dev_time time){
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af02      	add	r7, sp, #8
 8001536:	6078      	str	r0, [r7, #4]
	if (osMutexAcquire(TimerMutex, osWaitForever) == osOK) {
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <TimeToString+0xd8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001540:	4618      	mov	r0, r3
 8001542:	f004 fea4 	bl	800628e <osMutexAcquire>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d150      	bne.n	80015ee <TimeToString+0xbe>
		int hour, minute, sec, msec;
		msec = time % 1000;
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <TimeToString+0xdc>)
 8001550:	fba3 1302 	umull	r1, r3, r3, r2
 8001554:	099b      	lsrs	r3, r3, #6
 8001556:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800155a:	fb01 f303 	mul.w	r3, r1, r3
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	61fb      	str	r3, [r7, #28]
		sec = (time / 1000U) % 86400U;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a29      	ldr	r2, [pc, #164]	; (800160c <TimeToString+0xdc>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	099a      	lsrs	r2, r3, #6
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <TimeToString+0xe0>)
 800156e:	fba3 1302 	umull	r1, r3, r3, r2
 8001572:	0c1b      	lsrs	r3, r3, #16
 8001574:	4927      	ldr	r1, [pc, #156]	; (8001614 <TimeToString+0xe4>)
 8001576:	fb01 f303 	mul.w	r3, r1, r3
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	61bb      	str	r3, [r7, #24]
		hour = sec / 3600;
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	4a25      	ldr	r2, [pc, #148]	; (8001618 <TimeToString+0xe8>)
 8001582:	fb82 1203 	smull	r1, r2, r2, r3
 8001586:	441a      	add	r2, r3
 8001588:	12d2      	asrs	r2, r2, #11
 800158a:	17db      	asrs	r3, r3, #31
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	617b      	str	r3, [r7, #20]
		sec -= hour * 3600;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	4a22      	ldr	r2, [pc, #136]	; (800161c <TimeToString+0xec>)
 8001594:	fb02 f303 	mul.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4413      	add	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
		minute = sec / 60;
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <TimeToString+0xf0>)
 80015a2:	fb82 1203 	smull	r1, r2, r2, r3
 80015a6:	441a      	add	r2, r3
 80015a8:	1152      	asrs	r2, r2, #5
 80015aa:	17db      	asrs	r3, r3, #31
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	613b      	str	r3, [r7, #16]
		sec = sec % 60;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <TimeToString+0xf0>)
 80015b4:	fb83 1302 	smull	r1, r3, r3, r2
 80015b8:	4413      	add	r3, r2
 80015ba:	1159      	asrs	r1, r3, #5
 80015bc:	17d3      	asrs	r3, r2, #31
 80015be:	1ac9      	subs	r1, r1, r3
 80015c0:	460b      	mov	r3, r1
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	1a5b      	subs	r3, r3, r1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	61bb      	str	r3, [r7, #24]
		sprintf(DeviceTimeBuffer, "%02d.%02d.%02d.%03d", hour, minute, sec, msec);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4912      	ldr	r1, [pc, #72]	; (8001624 <TimeToString+0xf4>)
 80015da:	4813      	ldr	r0, [pc, #76]	; (8001628 <TimeToString+0xf8>)
 80015dc:	f017 f842 	bl	8018664 <siprintf>
	} else {
		char temp[]="ERROR!\0";
		return temp;
	}
	osMutexRelease(TimerMutex);
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <TimeToString+0xd8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f004 fe9d 	bl	8006324 <osMutexRelease>
	return DeviceTimeBuffer;
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <TimeToString+0xf8>)
 80015ec:	e007      	b.n	80015fe <TimeToString+0xce>
		char temp[]="ERROR!\0";
 80015ee:	4a0f      	ldr	r2, [pc, #60]	; (800162c <TimeToString+0xfc>)
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f8:	e883 0003 	stmia.w	r3, {r0, r1}
		return temp;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	24000280 	.word	0x24000280
 800160c:	10624dd3 	.word	0x10624dd3
 8001610:	c22e4507 	.word	0xc22e4507
 8001614:	00015180 	.word	0x00015180
 8001618:	91a2b3c5 	.word	0x91a2b3c5
 800161c:	fffff1f0 	.word	0xfffff1f0
 8001620:	88888889 	.word	0x88888889
 8001624:	0801bb6c 	.word	0x0801bb6c
 8001628:	2400026c 	.word	0x2400026c
 800162c:	0801bb80 	.word	0x0801bb80

08001630 <UpdateDeviceTime>:
void UpdateDeviceTime(void){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	DeviceTimer=HAL_GetTick();
 8001634:	f000 f9ba 	bl	80019ac <HAL_GetTick>
 8001638:	4603      	mov	r3, r0
 800163a:	4a02      	ldr	r2, [pc, #8]	; (8001644 <UpdateDeviceTime+0x14>)
 800163c:	6013      	str	r3, [r2, #0]
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	24000268 	.word	0x24000268

08001648 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00b      	beq.n	8001670 <LAN8742_RegisterBusIO+0x28>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d007      	beq.n	8001670 <LAN8742_RegisterBusIO+0x28>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <LAN8742_RegisterBusIO+0x28>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001674:	e014      	b.n	80016a0 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d17c      	bne.n	80017c6 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2220      	movs	r2, #32
 80016de:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e01c      	b.n	8001720 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f107 0208 	add.w	r2, r7, #8
 80016ee:	2112      	movs	r1, #18
 80016f0:	6978      	ldr	r0, [r7, #20]
 80016f2:	4798      	blx	r3
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da03      	bge.n	8001702 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80016fa:	f06f 0304 	mvn.w	r3, #4
 80016fe:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001700:	e00b      	b.n	800171a <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	429a      	cmp	r2, r3
 800170c:	d105      	bne.n	800171a <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
         break;
 8001718:	e005      	b.n	8001726 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b1f      	cmp	r3, #31
 8001724:	d9df      	bls.n	80016e6 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b1f      	cmp	r3, #31
 800172c:	d902      	bls.n	8001734 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800172e:	f06f 0302 	mvn.w	r3, #2
 8001732:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d145      	bne.n	80017c6 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6810      	ldr	r0, [r2, #0]
 8001742:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001746:	2100      	movs	r1, #0
 8001748:	4798      	blx	r3
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	db37      	blt.n	80017c0 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6810      	ldr	r0, [r2, #0]
 8001758:	f107 0208 	add.w	r2, r7, #8
 800175c:	2100      	movs	r1, #0
 800175e:	4798      	blx	r3
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	db28      	blt.n	80017b8 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	4798      	blx	r3
 800176c:	4603      	mov	r3, r0
 800176e:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001770:	e01c      	b.n	80017ac <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4798      	blx	r3
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001784:	d80e      	bhi.n	80017a4 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6810      	ldr	r0, [r2, #0]
 800178e:	f107 0208 	add.w	r2, r7, #8
 8001792:	2100      	movs	r1, #0
 8001794:	4798      	blx	r3
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	da07      	bge.n	80017ac <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800179c:	f06f 0304 	mvn.w	r3, #4
 80017a0:	613b      	str	r3, [r7, #16]
                 break;
 80017a2:	e010      	b.n	80017c6 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80017a4:	f06f 0301 	mvn.w	r3, #1
 80017a8:	613b      	str	r3, [r7, #16]
               break;
 80017aa:	e00c      	b.n	80017c6 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1dd      	bne.n	8001772 <LAN8742_Init+0xc6>
 80017b6:	e006      	b.n	80017c6 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80017b8:	f06f 0304 	mvn.w	r3, #4
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	e002      	b.n	80017c6 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80017c0:	f06f 0303 	mvn.w	r3, #3
 80017c4:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d112      	bne.n	80017f2 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4798      	blx	r3
 80017d2:	4603      	mov	r3, r0
 80017d4:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80017d6:	bf00      	nop
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4798      	blx	r3
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017ea:	d9f5      	bls.n	80017d8 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80017f2:	693b      	ldr	r3, [r7, #16]
 }
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6810      	ldr	r0, [r2, #0]
 8001810:	f107 020c 	add.w	r2, r7, #12
 8001814:	2101      	movs	r1, #1
 8001816:	4798      	blx	r3
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	da02      	bge.n	8001824 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800181e:	f06f 0304 	mvn.w	r3, #4
 8001822:	e06e      	b.n	8001902 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6810      	ldr	r0, [r2, #0]
 800182c:	f107 020c 	add.w	r2, r7, #12
 8001830:	2101      	movs	r1, #1
 8001832:	4798      	blx	r3
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	da02      	bge.n	8001840 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800183a:	f06f 0304 	mvn.w	r3, #4
 800183e:	e060      	b.n	8001902 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800184a:	2301      	movs	r3, #1
 800184c:	e059      	b.n	8001902 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6810      	ldr	r0, [r2, #0]
 8001856:	f107 020c 	add.w	r2, r7, #12
 800185a:	2100      	movs	r1, #0
 800185c:	4798      	blx	r3
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	da02      	bge.n	800186a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001864:	f06f 0304 	mvn.w	r3, #4
 8001868:	e04b      	b.n	8001902 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d11b      	bne.n	80018ac <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <LAN8742_GetLinkState+0x90>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001888:	2302      	movs	r3, #2
 800188a:	e03a      	b.n	8001902 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001896:	2303      	movs	r3, #3
 8001898:	e033      	b.n	8001902 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018a4:	2304      	movs	r3, #4
 80018a6:	e02c      	b.n	8001902 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018a8:	2305      	movs	r3, #5
 80018aa:	e02a      	b.n	8001902 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6810      	ldr	r0, [r2, #0]
 80018b4:	f107 020c 	add.w	r2, r7, #12
 80018b8:	211f      	movs	r1, #31
 80018ba:	4798      	blx	r3
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	da02      	bge.n	80018c8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80018c2:	f06f 0304 	mvn.w	r3, #4
 80018c6:	e01c      	b.n	8001902 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80018d2:	2306      	movs	r3, #6
 80018d4:	e015      	b.n	8001902 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f003 031c 	and.w	r3, r3, #28
 80018dc:	2b18      	cmp	r3, #24
 80018de:	d101      	bne.n	80018e4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80018e0:	2302      	movs	r3, #2
 80018e2:	e00e      	b.n	8001902 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 031c 	and.w	r3, r3, #28
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d101      	bne.n	80018f2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e007      	b.n	8001902 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f003 031c 	and.w	r3, r3, #28
 80018f8:	2b14      	cmp	r3, #20
 80018fa:	d101      	bne.n	8001900 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018fc:	2304      	movs	r3, #4
 80018fe:	e000      	b.n	8001902 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001900:	2305      	movs	r3, #5
    }				
  }
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001912:	2003      	movs	r0, #3
 8001914:	f000 f923 	bl	8001b5e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001918:	f003 f846 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 800191c:	4602      	mov	r2, r0
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_Init+0x68>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	4913      	ldr	r1, [pc, #76]	; (8001978 <HAL_Init+0x6c>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
 8001934:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <HAL_Init+0x68>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <HAL_Init+0x6c>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_Init+0x70>)
 800194e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_Init+0x74>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001956:	2000      	movs	r0, #0
 8001958:	f7ff fa16 	bl	8000d88 <HAL_InitTick>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e002      	b.n	800196c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001966:	f7ff f9f1 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	58024400 	.word	0x58024400
 8001978:	0801eaf8 	.word	0x0801eaf8
 800197c:	24000004 	.word	0x24000004
 8001980:	24000000 	.word	0x24000000

08001984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x20>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_IncTick+0x24>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <HAL_IncTick+0x24>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2400000c 	.word	0x2400000c
 80019a8:	2400bb80 	.word	0x2400bb80

080019ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_GetTick+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2400bb80 	.word	0x2400bb80

080019c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <HAL_GetREVID+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0c1b      	lsrs	r3, r3, #16
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	5c001000 	.word	0x5c001000

080019dc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80019ec:	4904      	ldr	r1, [pc, #16]	; (8001a00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	58000400 	.word	0x58000400

08001a04 <__NVIC_SetPriorityGrouping>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <__NVIC_SetPriorityGrouping+0x40>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x40>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00
 8001a48:	05fa0000 	.word	0x05fa0000

08001a4c <__NVIC_GetPriorityGrouping>:
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_EnableIRQ>:
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	db0b      	blt.n	8001a92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <__NVIC_EnableIRQ+0x38>)
 8001a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2001      	movs	r0, #1
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ff4c 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b82:	f7ff ff63 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001b86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	6978      	ldr	r0, [r7, #20]
 8001b8e:	f7ff ffb3 	bl	8001af8 <NVIC_EncodePriority>
 8001b92:	4602      	mov	r2, r0
 8001b94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff82 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001ba0:	bf00      	nop
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff56 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001bc8:	f3bf 8f5f 	dmb	sy
}
 8001bcc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <HAL_MPU_Disable+0x28>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	4a06      	ldr	r2, [pc, #24]	; (8001bec <HAL_MPU_Disable+0x28>)
 8001bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_MPU_Disable+0x2c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	605a      	str	r2, [r3, #4]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00
 8001bf0:	e000ed90 	.word	0xe000ed90

08001bf4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_MPU_Enable+0x38>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_MPU_Enable+0x3c>)
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_MPU_Enable+0x3c>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c10:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c12:	f3bf 8f4f 	dsb	sy
}
 8001c16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c18:	f3bf 8f6f 	isb	sy
}
 8001c1c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed90 	.word	0xe000ed90
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	785a      	ldrb	r2, [r3, #1]
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_MPU_ConfigRegion+0x84>)
 8001c42:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d029      	beq.n	8001ca0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001c4c:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <HAL_MPU_ConfigRegion+0x84>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7b1b      	ldrb	r3, [r3, #12]
 8001c58:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7adb      	ldrb	r3, [r3, #11]
 8001c5e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c60:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7a9b      	ldrb	r3, [r3, #10]
 8001c66:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	7b5b      	ldrb	r3, [r3, #13]
 8001c6e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7b9b      	ldrb	r3, [r3, #14]
 8001c76:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7bdb      	ldrb	r3, [r3, #15]
 8001c7e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7a5b      	ldrb	r3, [r3, #9]
 8001c86:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7a1b      	ldrb	r3, [r3, #8]
 8001c8e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c90:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c9a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c9c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001c9e:	e005      	b.n	8001cac <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_MPU_ConfigRegion+0x84>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <HAL_MPU_ConfigRegion+0x84>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed90 	.word	0xe000ed90

08001cbc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0c6      	b.n	8001e5c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f003 fc92 	bl	8005600 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2223      	movs	r2, #35	; 0x23
 8001ce0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	4b60      	ldr	r3, [pc, #384]	; (8001e64 <HAL_ETH_Init+0x1a8>)
 8001ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ce8:	4a5e      	ldr	r2, [pc, #376]	; (8001e64 <HAL_ETH_Init+0x1a8>)
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cf2:	4b5c      	ldr	r3, [pc, #368]	; (8001e64 <HAL_ETH_Init+0x1a8>)
 8001cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7a1b      	ldrb	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d103      	bne.n	8001d10 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7ff fe67 	bl	80019dc <HAL_SYSCFG_ETHInterfaceSelect>
 8001d0e:	e003      	b.n	8001d18 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001d10:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001d14:	f7ff fe62 	bl	80019dc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d30:	f7ff fe3c 	bl	80019ac <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001d36:	e00f      	b.n	8001d58 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001d38:	f7ff fe38 	bl	80019ac <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d46:	d907      	bls.n	8001d58 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	22e0      	movs	r2, #224	; 0xe0
 8001d52:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e081      	b.n	8001e5c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1e6      	bne.n	8001d38 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f001 fad8 	bl	8003320 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001d70:	f002 ff94 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4a3c      	ldr	r2, [pc, #240]	; (8001e68 <HAL_ETH_Init+0x1ac>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	0c9a      	lsrs	r2, r3, #18
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3a01      	subs	r2, #1
 8001d84:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f001 fa2b 	bl	80031e4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001da4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001da8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	22e0      	movs	r2, #224	; 0xe0
 8001dc0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e04a      	b.n	8001e5c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	f241 1308 	movw	r3, #4360	; 0x1108
 8001dce:	4413      	add	r3, r2
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <HAL_ETH_Init+0x1b0>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6952      	ldr	r2, [r2, #20]
 8001dda:	0052      	lsls	r2, r2, #1
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	6809      	ldr	r1, [r1, #0]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	f241 1308 	movw	r3, #4360	; 0x1108
 8001de6:	440b      	add	r3, r1
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f001 faf0 	bl	80033d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f001 fb34 	bl	800345e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	3305      	adds	r3, #5
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	021a      	lsls	r2, r3, #8
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	3304      	adds	r3, #4
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	3303      	adds	r3, #3
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	061a      	lsls	r2, r3, #24
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	3302      	adds	r3, #2
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	041b      	lsls	r3, r3, #16
 8001e28:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e34:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e42:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2210      	movs	r2, #16
 8001e52:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2210      	movs	r2, #16
 8001e58:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	58024400 	.word	0x58024400
 8001e68:	431bde83 	.word	0x431bde83
 8001e6c:	ffff8001 	.word	0xffff8001

08001e70 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	3310      	adds	r3, #16
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_ETH_DescAssignMemory+0x28>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d904      	bls.n	8001ea2 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e021      	b.n	8001ee6 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00b      	beq.n	8001ed8 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d174      	bne.n	8001fec <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2223      	movs	r2, #35	; 0x23
 8001f06:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	e00f      	b.n	8001f2e <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3310      	adds	r3, #16
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d9ec      	bls.n	8001f0e <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0202 	orr.w	r2, r2, #2
 8001f48:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	f241 1304 	movw	r3, #4356	; 0x1104
 8001f76:	4413      	add	r3, r2
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6811      	ldr	r1, [r2, #0]
 8001f7e:	f043 0201 	orr.w	r2, r3, #1
 8001f82:	f241 1304 	movw	r3, #4356	; 0x1104
 8001f86:	440b      	add	r3, r1
 8001f88:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f92:	4413      	add	r3, r2
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6811      	ldr	r1, [r2, #0]
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001fa2:	440b      	add	r3, r1
 8001fa4:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001fb8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001fbc:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	f241 1334 	movw	r3, #4404	; 0x1134
 8001fc6:	4413      	add	r3, r2
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6811      	ldr	r1, [r2, #0]
 8001fce:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	f241 1334 	movw	r3, #4404	; 0x1134
 8001fd8:	440b      	add	r3, r1
 8001fda:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2210      	movs	r2, #16
 8001fe0:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2222      	movs	r2, #34	; 0x22
 8001fe6:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e000      	b.n	8001fee <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
  }
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d067      	beq.n	80020dc <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2223      	movs	r2, #35	; 0x23
 8002010:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	f241 1334 	movw	r3, #4404	; 0x1134
 800201a:	4413      	add	r3, r2
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6811      	ldr	r1, [r2, #0]
 8002022:	4a32      	ldr	r2, [pc, #200]	; (80020ec <HAL_ETH_Stop_IT+0xf0>)
 8002024:	401a      	ands	r2, r3
 8002026:	f241 1334 	movw	r3, #4404	; 0x1134
 800202a:	440b      	add	r3, r1
 800202c:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	f241 1304 	movw	r3, #4356	; 0x1104
 8002036:	4413      	add	r3, r2
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6811      	ldr	r1, [r2, #0]
 800203e:	f023 0201 	bic.w	r2, r3, #1
 8002042:	f241 1304 	movw	r3, #4356	; 0x1104
 8002046:	440b      	add	r3, r1
 8002048:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002052:	4413      	add	r3, r2
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6811      	ldr	r1, [r2, #0]
 800205a:	f023 0201 	bic.w	r2, r3, #1
 800205e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002062:	440b      	add	r3, r1
 8002064:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0202 	bic.w	r2, r2, #2
 8002098:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e00f      	b.n	80020c0 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3310      	adds	r3, #16
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3301      	adds	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d9ec      	bls.n	80020a0 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2210      	movs	r2, #16
 80020d0:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2210      	movs	r2, #16
 80020d6:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	e000      	b.n	80020de <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
  }
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	ffff2fbe 	.word	0xffff2fbe

080020f0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d107      	bne.n	8002112 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e073      	b.n	80021fa <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002116:	2b10      	cmp	r3, #16
 8002118:	d16e      	bne.n	80021f8 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800211a:	2200      	movs	r2, #0
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f001 f9fa 	bl	8003518 <ETH_Prepare_Tx_Descriptors>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212e:	f043 0202 	orr.w	r2, r3, #2
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e05f      	b.n	80021fa <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3206      	adds	r2, #6
 8002142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002146:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	629a      	str	r2, [r3, #40]	; 0x28
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	2b03      	cmp	r3, #3
 8002158:	d904      	bls.n	8002164 <HAL_ETH_Transmit+0x74>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	1f1a      	subs	r2, r3, #4
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	3106      	adds	r1, #6
 8002170:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002174:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002178:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 800217a:	f7ff fc17 	bl	80019ac <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002180:	e034      	b.n	80021ec <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d011      	beq.n	80021b8 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002198:	f043 0208 	orr.w	r2, r3, #8
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	22e0      	movs	r2, #224	; 0xe0
 80021b2:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e020      	b.n	80021fa <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021be:	d015      	beq.n	80021ec <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80021c0:	f7ff fbf4 	bl	80019ac <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d302      	bcc.n	80021d6 <HAL_ETH_Transmit+0xe6>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10a      	bne.n	80021ec <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021da:	f043 0204 	orr.w	r2, r3, #4
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	22e0      	movs	r2, #224	; 0xe0
 80021e6:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e006      	b.n	80021fa <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	dbc6      	blt.n	8002182 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	e000      	b.n	80021fa <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
  }
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002202:	b480      	push	{r7}
 8002204:	b089      	sub	sp, #36	; 0x24
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3344      	adds	r3, #68	; 0x44
 800220e:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221e:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d06b      	beq.n	800230c <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002234:	2300      	movs	r3, #0
 8002236:	e0ce      	b.n	80023d6 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3301      	adds	r3, #1
 800223c:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d036      	beq.n	80022b8 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	3301      	adds	r3, #1
 800224e:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3301      	adds	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d902      	bls.n	800226c <HAL_ETH_IsRxDataAvailable+0x6a>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3b04      	subs	r3, #4
 800226a:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db11      	blt.n	80022a2 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2201      	movs	r2, #1
 800228e:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	3301      	adds	r3, #1
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d902      	bls.n	80022a2 <HAL_ETH_IsRxDataAvailable+0xa0>
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	3b04      	subs	r3, #4
 80022a0:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e08e      	b.n	80023d6 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d012      	beq.n	80022ea <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80022c8:	2301      	movs	r3, #1
 80022ca:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	3301      	adds	r3, #1
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d902      	bls.n	80022de <HAL_ETH_IsRxDataAvailable+0xdc>
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3b04      	subs	r3, #4
 80022dc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	e010      	b.n	800230c <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	3301      	adds	r3, #1
 80022ee:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	3301      	adds	r3, #1
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d902      	bls.n	8002302 <HAL_ETH_IsRxDataAvailable+0x100>
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	3b04      	subs	r3, #4
 8002300:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db02      	blt.n	800231a <HAL_ETH_IsRxDataAvailable+0x118>
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d98e      	bls.n	8002238 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d056      	beq.n	80023ce <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002338:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e03b      	b.n	80023b8 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800234e:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	3b01      	subs	r3, #1
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	429a      	cmp	r2, r3
 8002394:	d20d      	bcs.n	80023b2 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3301      	adds	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d902      	bls.n	80023a8 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b04      	subs	r3, #4
 80023a6:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b0:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3301      	adds	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3bf      	bcc.n	8002340 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	f241 1328 	movw	r3, #4392	; 0x1128
 80023ca:	440b      	add	r3, r1
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]

  return 0;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b08a      	sub	sp, #40	; 0x28
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3344      	adds	r3, #68	; 0x44
 80023f0:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002404:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d104      	bne.n	800241a <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e07d      	b.n	8002516 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10f      	bne.n	8002442 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff feed 	bl	8002202 <HAL_ETH_IsRxDataAvailable>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e071      	b.n	8002516 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
 8002446:	e031      	b.n	80024ac <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	461a      	mov	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	461a      	mov	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002482:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	3301      	adds	r3, #1
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	2b03      	cmp	r3, #3
 800248e:	d902      	bls.n	8002496 <HAL_ETH_GetRxDataBuffer+0xb4>
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	3b04      	subs	r3, #4
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249e:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	3301      	adds	r3, #1
 80024aa:	623b      	str	r3, [r7, #32]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	6a3a      	ldr	r2, [r7, #32]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d3c7      	bcc.n	8002448 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	461a      	mov	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d803      	bhi.n	80024e2 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	e018      	b.n	8002514 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d012      	beq.n	8002510 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	461a      	mov	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	1ad2      	subs	r2, r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	e001      	b.n	8002514 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3728      	adds	r7, #40	; 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3344      	adds	r3, #68	; 0x44
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff fe60 	bl	8002202 <HAL_ETH_IsRxDataAvailable>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e017      	b.n	800257c <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	699a      	ldr	r2, [r3, #24]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	4413      	add	r3, r2
 8002554:	3b01      	subs	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d902      	bls.n	8002564 <HAL_ETH_GetRxDataLength+0x46>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	3b04      	subs	r3, #4
 8002562:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256c:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3344      	adds	r3, #68	; 0x44
 8002590:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a0:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e057      	b.n	8002664 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3301      	adds	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	e03b      	b.n	8002640 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025d6:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d009      	beq.n	80025f4 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3b01      	subs	r3, #1
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	429a      	cmp	r2, r3
 800261c:	d20d      	bcs.n	800263a <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3301      	adds	r3, #1
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	2b03      	cmp	r3, #3
 8002628:	d902      	bls.n	8002630 <HAL_ETH_BuildRxDescriptors+0xac>
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3b04      	subs	r3, #4
 800262e:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002638:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	3301      	adds	r3, #1
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	d3bf      	bcc.n	80025c8 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6819      	ldr	r1, [r3, #0]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	f241 1328 	movw	r3, #4392	; 0x1128
 8002652:	440b      	add	r3, r1
 8002654:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3724      	adds	r7, #36	; 0x24
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002686:	2b40      	cmp	r3, #64	; 0x40
 8002688:	d113      	bne.n	80026b2 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	f241 1334 	movw	r3, #4404	; 0x1134
 8002692:	4413      	add	r3, r2
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b40      	cmp	r3, #64	; 0x40
 800269c:	d109      	bne.n	80026b2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f003 f884 	bl	80057ac <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026ac:	f248 0240 	movw	r2, #32832	; 0x8040
 80026b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d113      	bne.n	80026ec <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	f241 1334 	movw	r3, #4404	; 0x1134
 80026cc:	4413      	add	r3, r2
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d109      	bne.n	80026ec <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f8b7 	bl	800284c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026e6:	f248 0201 	movw	r2, #32769	; 0x8001
 80026ea:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026fe:	d149      	bne.n	8002794 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	f241 1334 	movw	r3, #4404	; 0x1134
 8002708:	4413      	add	r3, r2
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002714:	d13e      	bne.n	8002794 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271a:	f043 0208 	orr.w	r2, r3, #8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002734:	d11b      	bne.n	800276e <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	f241 1302 	movw	r3, #4354	; 0x1102
 8002744:	4013      	ands	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	f241 1334 	movw	r3, #4404	; 0x1134
 8002752:	4413      	add	r3, r2
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6811      	ldr	r1, [r2, #0]
 800275a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800275e:	f241 1334 	movw	r3, #4404	; 0x1134
 8002762:	440b      	add	r3, r1
 8002764:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	22e0      	movs	r2, #224	; 0xe0
 800276a:	66da      	str	r2, [r3, #108]	; 0x6c
 800276c:	e00f      	b.n	800278e <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002788:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 800278c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f866 	bl	8002860 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800279c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80027a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80027a4:	d10e      	bne.n	80027c4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	22e0      	movs	r2, #224	; 0xe0
 80027b6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f85b 	bl	8002874 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d10f      	bne.n	80027f4 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027dc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f84e 	bl	8002888 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b20      	cmp	r3, #32
 8002802:	d10f      	bne.n	8002824 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800280c:	f003 020f 	and.w	r2, r3, #15
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f840 	bl	800289c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <HAL_ETH_IRQHandler+0x1d8>)
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_ETH_IRQHandler+0x1d8>)
 8002832:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f839 	bl	80028b0 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	58000080 	.word	0x58000080

0800284c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e03e      	b.n	8002964 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028ee:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	055b      	lsls	r3, r3, #21
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	041b      	lsls	r3, r3, #16
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f043 030c 	orr.w	r3, r3, #12
 8002912:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002926:	f7ff f841 	bl	80019ac <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800292c:	e009      	b.n	8002942 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800292e:	f7ff f83d 	bl	80019ac <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800293c:	d901      	bls.n	8002942 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e010      	b.n	8002964 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ed      	bne.n	800292e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800295a:	b29b      	uxth	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e03c      	b.n	8002a08 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002996:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	055b      	lsls	r3, r3, #21
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	041b      	lsls	r3, r3, #16
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f023 030c 	bic.w	r3, r3, #12
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_ETH_WritePHYRegister+0xa4>)
 80029ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80029d2:	4a0f      	ldr	r2, [pc, #60]	; (8002a10 <HAL_ETH_WritePHYRegister+0xa4>)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80029da:	f7fe ffe7 	bl	80019ac <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80029e0:	e009      	b.n	80029f6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80029e2:	f7fe ffe3 	bl	80019ac <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029f0:	d901      	bls.n	80029f6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e008      	b.n	8002a08 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ed      	bne.n	80029e2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40028000 	.word	0x40028000

08002a14 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e1c3      	b.n	8002db0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 020c 	and.w	r2, r3, #12
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf0c      	ite	eq
 8002a6e:	2301      	moveq	r3, #1
 8002a70:	2300      	movne	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bf14      	ite	ne
 8002b0e:	2301      	movne	r3, #1
 8002b10:	2300      	moveq	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf0c      	ite	eq
 8002b42:	2301      	moveq	r3, #1
 8002b44:	2300      	movne	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf14      	ite	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	2300      	moveq	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf14      	ite	ne
 8002c5c:	2301      	movne	r3, #1
 8002c5e:	2300      	moveq	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	0e5b      	lsrs	r3, r3, #25
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 020f 	and.w	r2, r3, #15
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf0c      	ite	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	2300      	movne	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bf14      	ite	ne
 8002d26:	2301      	movne	r3, #1
 8002d28:	2300      	moveq	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002d3c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d4c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf14      	ite	ne
 8002d82:	2301      	movne	r3, #1
 8002d84:	2300      	moveq	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e00a      	b.n	8002de6 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d105      	bne.n	8002de4 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002dd8:	6839      	ldr	r1, [r7, #0]
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f860 	bl	8002ea0 <ETH_SetMACConfig>

    return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e000      	b.n	8002de6 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
  }
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e00:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e08:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e0a:	f001 ff47 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8002e0e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d908      	bls.n	8002e2a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d804      	bhi.n	8002e2a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e027      	b.n	8002e7a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4a18      	ldr	r2, [pc, #96]	; (8002e90 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d908      	bls.n	8002e44 <HAL_ETH_SetMDIOClockRange+0x54>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4a17      	ldr	r2, [pc, #92]	; (8002e94 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d204      	bcs.n	8002e44 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	e01a      	b.n	8002e7a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d303      	bcc.n	8002e54 <HAL_ETH_SetMDIOClockRange+0x64>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d911      	bls.n	8002e78 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4a10      	ldr	r2, [pc, #64]	; (8002e98 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d908      	bls.n	8002e6e <HAL_ETH_SetMDIOClockRange+0x7e>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4a0f      	ldr	r2, [pc, #60]	; (8002e9c <HAL_ETH_SetMDIOClockRange+0xac>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d804      	bhi.n	8002e6e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e005      	b.n	8002e7a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	e000      	b.n	8002e7a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002e78:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002e84:	bf00      	nop
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	01312cff 	.word	0x01312cff
 8002e90:	02160ebf 	.word	0x02160ebf
 8002e94:	03938700 	.word	0x03938700
 8002e98:	05f5e0ff 	.word	0x05f5e0ff
 8002e9c:	08f0d17f 	.word	0x08f0d17f

08002ea0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002eb2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	791b      	ldrb	r3, [r3, #4]
 8002eb8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002eba:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	7b1b      	ldrb	r3, [r3, #12]
 8002ec0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002ec2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	7b5b      	ldrb	r3, [r3, #13]
 8002ec8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002eca:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	7b9b      	ldrb	r3, [r3, #14]
 8002ed0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ed2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	7bdb      	ldrb	r3, [r3, #15]
 8002ed8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002eda:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	7c12      	ldrb	r2, [r2, #16]
 8002ee0:	2a00      	cmp	r2, #0
 8002ee2:	d102      	bne.n	8002eea <ETH_SetMACConfig+0x4a>
 8002ee4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002ee8:	e000      	b.n	8002eec <ETH_SetMACConfig+0x4c>
 8002eea:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002eec:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	7c52      	ldrb	r2, [r2, #17]
 8002ef2:	2a00      	cmp	r2, #0
 8002ef4:	d102      	bne.n	8002efc <ETH_SetMACConfig+0x5c>
 8002ef6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002efa:	e000      	b.n	8002efe <ETH_SetMACConfig+0x5e>
 8002efc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002efe:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	7c9b      	ldrb	r3, [r3, #18]
 8002f04:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f06:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002f0c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002f12:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	7f1b      	ldrb	r3, [r3, #28]
 8002f18:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002f1a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	7f5b      	ldrb	r3, [r3, #29]
 8002f20:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002f22:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	7f92      	ldrb	r2, [r2, #30]
 8002f28:	2a00      	cmp	r2, #0
 8002f2a:	d102      	bne.n	8002f32 <ETH_SetMACConfig+0x92>
 8002f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f30:	e000      	b.n	8002f34 <ETH_SetMACConfig+0x94>
 8002f32:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002f34:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	7fdb      	ldrb	r3, [r3, #31]
 8002f3a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002f3c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f44:	2a00      	cmp	r2, #0
 8002f46:	d102      	bne.n	8002f4e <ETH_SetMACConfig+0xae>
 8002f48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f4c:	e000      	b.n	8002f50 <ETH_SetMACConfig+0xb0>
 8002f4e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002f50:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002f56:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f5e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002f60:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b56      	ldr	r3, [pc, #344]	; (80030cc <ETH_SetMACConfig+0x22c>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f8a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002f8c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f94:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002f96:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f9e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002fa0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002fa8:	2a00      	cmp	r2, #0
 8002faa:	d102      	bne.n	8002fb2 <ETH_SetMACConfig+0x112>
 8002fac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fb0:	e000      	b.n	8002fb4 <ETH_SetMACConfig+0x114>
 8002fb2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002fb4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4b42      	ldr	r3, [pc, #264]	; (80030d0 <ETH_SetMACConfig+0x230>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	68f9      	ldr	r1, [r7, #12]
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fd8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	4b3a      	ldr	r3, [pc, #232]	; (80030d4 <ETH_SetMACConfig+0x234>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	68f9      	ldr	r1, [r7, #12]
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ffc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003002:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800300a:	2a00      	cmp	r2, #0
 800300c:	d101      	bne.n	8003012 <ETH_SetMACConfig+0x172>
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	e000      	b.n	8003014 <ETH_SetMACConfig+0x174>
 8003012:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003014:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003026:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800302a:	4013      	ands	r3, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	430b      	orrs	r3, r1
 8003034:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800303c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003044:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f023 0103 	bic.w	r1, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	430a      	orrs	r2, r1
 800305e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800306a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003086:	2a00      	cmp	r2, #0
 8003088:	d101      	bne.n	800308e <ETH_SetMACConfig+0x1ee>
 800308a:	2240      	movs	r2, #64	; 0x40
 800308c:	e000      	b.n	8003090 <ETH_SetMACConfig+0x1f0>
 800308e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003090:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003098:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800309a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80030a2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80030b0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	00048083 	.word	0x00048083
 80030d0:	c0f88000 	.word	0xc0f88000
 80030d4:	fffffef0 	.word	0xfffffef0

080030d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <ETH_SetDMAConfig+0xf8>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	6809      	ldr	r1, [r1, #0]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80030fe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	791b      	ldrb	r3, [r3, #4]
 8003104:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800310a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	7b1b      	ldrb	r3, [r3, #12]
 8003110:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	f241 0304 	movw	r3, #4100	; 0x1004
 800311e:	4413      	add	r3, r2
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <ETH_SetDMAConfig+0xfc>)
 8003124:	4013      	ands	r3, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6811      	ldr	r1, [r2, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	431a      	orrs	r2, r3
 800312e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003132:	440b      	add	r3, r1
 8003134:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	7b5b      	ldrb	r3, [r3, #13]
 800313a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <ETH_SetDMAConfig+0x100>)
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6811      	ldr	r1, [r2, #0]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	431a      	orrs	r2, r3
 800315a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800315e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	7d1b      	ldrb	r3, [r3, #20]
 8003168:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800316a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	7f5b      	ldrb	r3, [r3, #29]
 8003170:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	f241 1304 	movw	r3, #4356	; 0x1104
 800317e:	4413      	add	r3, r2
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4b16      	ldr	r3, [pc, #88]	; (80031dc <ETH_SetDMAConfig+0x104>)
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6811      	ldr	r1, [r2, #0]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	431a      	orrs	r2, r3
 800318e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003192:	440b      	add	r3, r1
 8003194:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	7f1b      	ldrb	r3, [r3, #28]
 800319a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	f241 1308 	movw	r3, #4360	; 0x1108
 80031ac:	4413      	add	r3, r2
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <ETH_SetDMAConfig+0x108>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6811      	ldr	r1, [r2, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	f241 1308 	movw	r3, #4360	; 0x1108
 80031c0:	440b      	add	r3, r1
 80031c2:	601a      	str	r2, [r3, #0]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	ffff87fd 	.word	0xffff87fd
 80031d4:	ffff2ffe 	.word	0xffff2ffe
 80031d8:	fffec000 	.word	0xfffec000
 80031dc:	ffc0efef 	.word	0xffc0efef
 80031e0:	7fc0ffff 	.word	0x7fc0ffff

080031e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b0a4      	sub	sp, #144	; 0x90
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031f2:	2300      	movs	r3, #0
 80031f4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003214:	2300      	movs	r3, #0
 8003216:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800321a:	2301      	movs	r3, #1
 800321c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003224:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003226:	2300      	movs	r3, #0
 8003228:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800322c:	2300      	movs	r3, #0
 800322e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003236:	2300      	movs	r3, #0
 8003238:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800323c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003240:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003248:	2300      	movs	r3, #0
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800325e:	2300      	movs	r3, #0
 8003260:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003262:	2300      	movs	r3, #0
 8003264:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003266:	2300      	movs	r3, #0
 8003268:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800326a:	2300      	movs	r3, #0
 800326c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800327c:	2320      	movs	r3, #32
 800327e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800328e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003294:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003298:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800329a:	2300      	movs	r3, #0
 800329c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80032a0:	2302      	movs	r3, #2
 80032a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80032be:	2300      	movs	r3, #0
 80032c0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80032c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032cc:	4619      	mov	r1, r3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fde6 	bl	8002ea0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80032d4:	2301      	movs	r3, #1
 80032d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80032d8:	2301      	movs	r3, #1
 80032da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003304:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800330a:	f107 0308 	add.w	r3, r7, #8
 800330e:	4619      	mov	r1, r3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff fee1 	bl	80030d8 <ETH_SetDMAConfig>
}
 8003316:	bf00      	nop
 8003318:	3790      	adds	r7, #144	; 0x90
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003330:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003338:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800333a:	f001 fcaf 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 800333e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d908      	bls.n	800335a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d804      	bhi.n	800335a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e027      	b.n	80033aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d908      	bls.n	8003374 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d204      	bcs.n	8003374 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e01a      	b.n	80033aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d303      	bcc.n	8003384 <ETH_MAC_MDIO_ClkConfig+0x64>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d911      	bls.n	80033a8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4a10      	ldr	r2, [pc, #64]	; (80033c8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d908      	bls.n	800339e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4a0f      	ldr	r2, [pc, #60]	; (80033cc <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d804      	bhi.n	800339e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	e005      	b.n	80033aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	e000      	b.n	80033aa <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80033a8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	01312cff 	.word	0x01312cff
 80033c0:	02160ebf 	.word	0x02160ebf
 80033c4:	03938700 	.word	0x03938700
 80033c8:	05f5e0ff 	.word	0x05f5e0ff
 80033cc:	08f0d17f 	.word	0x08f0d17f

080033d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e01d      	b.n	800341a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68d9      	ldr	r1, [r3, #12]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	440b      	add	r3, r1
 80033ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2200      	movs	r2, #0
 80033fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2200      	movs	r2, #0
 8003406:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	3206      	adds	r2, #6
 8003410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3301      	adds	r3, #1
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d9de      	bls.n	80033de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f241 132c 	movw	r3, #4396	; 0x112c
 800342e:	4413      	add	r3, r2
 8003430:	2203      	movs	r2, #3
 8003432:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68d9      	ldr	r1, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	f241 1314 	movw	r3, #4372	; 0x1114
 8003440:	4413      	add	r3, r2
 8003442:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003450:	601a      	str	r2, [r3, #0]
}
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	e024      	b.n	80034b6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6919      	ldr	r1, [r3, #16]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	440b      	add	r3, r1
 800347c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2200      	movs	r2, #0
 8003488:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2200      	movs	r2, #0
 8003494:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2200      	movs	r2, #0
 800349a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2200      	movs	r2, #0
 80034a0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	3310      	adds	r3, #16
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3301      	adds	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d9d7      	bls.n	800346c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	f241 1330 	movw	r3, #4400	; 0x1130
 80034e2:	4413      	add	r3, r2
 80034e4:	2203      	movs	r2, #3
 80034e6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6919      	ldr	r1, [r3, #16]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80034f4:	4413      	add	r3, r2
 80034f6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	f241 1328 	movw	r3, #4392	; 0x1128
 8003508:	4413      	add	r3, r2
 800350a:	6019      	str	r1, [r3, #0]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003518:	b480      	push	{r7}
 800351a:	b08d      	sub	sp, #52	; 0x34
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3318      	adds	r3, #24
 8003528:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8003536:	2300      	movs	r3, #0
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800353e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003542:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800355a:	d007      	beq.n	800356c <ETH_Prepare_Tx_Descriptors+0x54>
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	3304      	adds	r3, #4
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800356c:	2302      	movs	r3, #2
 800356e:	e24a      	b.n	8003a06 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d044      	beq.n	8003606 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	4b72      	ldr	r3, [pc, #456]	; (800374c <ETH_Prepare_Tx_Descriptors+0x234>)
 8003582:	4013      	ands	r3, r2
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003588:	431a      	orrs	r2, r3
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d027      	beq.n	8003606 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	431a      	orrs	r2, r3
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	431a      	orrs	r2, r3
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035f4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003604:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00e      	beq.n	8003630 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	4b4e      	ldr	r3, [pc, #312]	; (8003750 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003618:	4013      	ands	r3, r2
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	6992      	ldr	r2, [r2, #24]
 800361e:	431a      	orrs	r2, r3
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d105      	bne.n	8003648 <ETH_Prepare_Tx_Descriptors+0x130>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d030      	beq.n	80036aa <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	3301      	adds	r3, #1
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	2b03      	cmp	r3, #3
 800366a:	d902      	bls.n	8003672 <ETH_Prepare_Tx_Descriptors+0x15a>
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	3b04      	subs	r3, #4
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	3301      	adds	r3, #1
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800368a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800368e:	d10c      	bne.n	80036aa <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003698:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80036a6:	2302      	movs	r3, #2
 80036a8:	e1ad      	b.n	8003a06 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	3301      	adds	r3, #1
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <ETH_Prepare_Tx_Descriptors+0x238>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	6852      	ldr	r2, [r2, #4]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d012      	beq.n	80036fa <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	6852      	ldr	r2, [r2, #4]
 80036f0:	0412      	lsls	r2, r2, #16
 80036f2:	431a      	orrs	r2, r3
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	e008      	b.n	800370c <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	2200      	movs	r2, #0
 80036fe:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003706:	4013      	ands	r3, r2
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	d021      	beq.n	800375c <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	04db      	lsls	r3, r3, #19
 8003726:	431a      	orrs	r2, r3
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <ETH_Prepare_Tx_Descriptors+0x240>)
 8003732:	4013      	ands	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	69d2      	ldr	r2, [r2, #28]
 8003738:	431a      	orrs	r2, r3
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	e02e      	b.n	80037aa <ETH_Prepare_Tx_Descriptors+0x292>
 800374c:	ffff0000 	.word	0xffff0000
 8003750:	ffffc000 	.word	0xffffc000
 8003754:	c000ffff 	.word	0xc000ffff
 8003758:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	4b93      	ldr	r3, [pc, #588]	; (80039b0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003762:	4013      	ands	r3, r2
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	6852      	ldr	r2, [r2, #4]
 8003768:	431a      	orrs	r2, r3
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d008      	beq.n	800378c <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	431a      	orrs	r2, r3
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	431a      	orrs	r2, r3
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80cb 	beq.w	8003990 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	431a      	orrs	r2, r3
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800380c:	e0c0      	b.n	8003990 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	3301      	adds	r3, #1
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	2b03      	cmp	r3, #3
 8003824:	d902      	bls.n	800382c <ETH_Prepare_Tx_Descriptors+0x314>
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	3b04      	subs	r3, #4
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003834:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800384a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800384e:	d007      	beq.n	8003860 <ETH_Prepare_Tx_Descriptors+0x348>
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	3304      	adds	r3, #4
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d026      	beq.n	80038ae <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800386e:	2300      	movs	r3, #0
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
 8003872:	e016      	b.n	80038a2 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003882:	3301      	adds	r3, #1
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	2b03      	cmp	r3, #3
 800388a:	d902      	bls.n	8003892 <ETH_Prepare_Tx_Descriptors+0x37a>
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	3b04      	subs	r3, #4
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800389a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	3301      	adds	r3, #1
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
 80038a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d3e4      	bcc.n	8003874 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 80038aa:	2302      	movs	r3, #2
 80038ac:	e0ab      	b.n	8003a06 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	3301      	adds	r3, #1
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	4b3a      	ldr	r3, [pc, #232]	; (80039b4 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	6852      	ldr	r2, [r2, #4]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d012      	beq.n	8003904 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	6852      	ldr	r2, [r2, #4]
 80038fa:	0412      	lsls	r2, r2, #16
 80038fc:	431a      	orrs	r2, r3
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	609a      	str	r2, [r3, #8]
 8003902:	e008      	b.n	8003916 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	2200      	movs	r2, #0
 8003908:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003910:	4013      	ands	r3, r2
 8003912:	6a3a      	ldr	r2, [r7, #32]
 8003914:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00f      	beq.n	8003942 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	4b25      	ldr	r3, [pc, #148]	; (80039bc <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003928:	4013      	ands	r3, r2
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	69d2      	ldr	r2, [r2, #28]
 800392e:	431a      	orrs	r2, r3
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	60da      	str	r2, [r3, #12]
 8003940:	e017      	b.n	8003972 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003948:	4013      	ands	r3, r2
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	6852      	ldr	r2, [r2, #4]
 800394e:	431a      	orrs	r2, r3
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	431a      	orrs	r2, r3
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	3301      	adds	r3, #1
 8003976:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	f47f af3a 	bne.w	800380e <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00f      	beq.n	80039c0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	e00e      	b.n	80039cc <ETH_Prepare_Tx_Descriptors+0x4b4>
 80039ae:	bf00      	nop
 80039b0:	ffff8000 	.word	0xffff8000
 80039b4:	ffffc000 	.word	0xffffc000
 80039b8:	c000ffff 	.word	0xc000ffff
 80039bc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039dc:	6979      	ldr	r1, [r7, #20]
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	3304      	adds	r3, #4
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ec:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80039ee:	b672      	cpsid	i
}
 80039f0:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	4413      	add	r3, r2
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003a00:	b662      	cpsie	i
}
 8003a02:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3734      	adds	r7, #52	; 0x34
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop

08003a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b089      	sub	sp, #36	; 0x24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a22:	4b89      	ldr	r3, [pc, #548]	; (8003c48 <HAL_GPIO_Init+0x234>)
 8003a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a26:	e194      	b.n	8003d52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8186 	beq.w	8003d4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d00b      	beq.n	8003a60 <HAL_GPIO_Init+0x4c>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d007      	beq.n	8003a60 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a54:	2b11      	cmp	r3, #17
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b12      	cmp	r3, #18
 8003a5e:	d130      	bne.n	8003ac2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a96:	2201      	movs	r2, #1
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	f003 0201 	and.w	r2, r3, #1
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	2203      	movs	r2, #3
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_Init+0xee>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b12      	cmp	r3, #18
 8003b00:	d123      	bne.n	8003b4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	08da      	lsrs	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3208      	adds	r2, #8
 8003b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	220f      	movs	r2, #15
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4013      	ands	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	08da      	lsrs	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3208      	adds	r2, #8
 8003b44:	69b9      	ldr	r1, [r7, #24]
 8003b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2203      	movs	r2, #3
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 0203 	and.w	r2, r3, #3
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80e0 	beq.w	8003d4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8c:	4b2f      	ldr	r3, [pc, #188]	; (8003c4c <HAL_GPIO_Init+0x238>)
 8003b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b92:	4a2e      	ldr	r2, [pc, #184]	; (8003c4c <HAL_GPIO_Init+0x238>)
 8003b94:	f043 0302 	orr.w	r3, r3, #2
 8003b98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b9c:	4b2b      	ldr	r3, [pc, #172]	; (8003c4c <HAL_GPIO_Init+0x238>)
 8003b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003baa:	4a29      	ldr	r2, [pc, #164]	; (8003c50 <HAL_GPIO_Init+0x23c>)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	220f      	movs	r2, #15
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <HAL_GPIO_Init+0x240>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d052      	beq.n	8003c7c <HAL_GPIO_Init+0x268>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_GPIO_Init+0x244>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d031      	beq.n	8003c42 <HAL_GPIO_Init+0x22e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1e      	ldr	r2, [pc, #120]	; (8003c5c <HAL_GPIO_Init+0x248>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d02b      	beq.n	8003c3e <HAL_GPIO_Init+0x22a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <HAL_GPIO_Init+0x24c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d025      	beq.n	8003c3a <HAL_GPIO_Init+0x226>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <HAL_GPIO_Init+0x250>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01f      	beq.n	8003c36 <HAL_GPIO_Init+0x222>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a1b      	ldr	r2, [pc, #108]	; (8003c68 <HAL_GPIO_Init+0x254>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d019      	beq.n	8003c32 <HAL_GPIO_Init+0x21e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <HAL_GPIO_Init+0x258>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_GPIO_Init+0x21a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <HAL_GPIO_Init+0x25c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00d      	beq.n	8003c2a <HAL_GPIO_Init+0x216>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <HAL_GPIO_Init+0x260>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <HAL_GPIO_Init+0x212>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a17      	ldr	r2, [pc, #92]	; (8003c78 <HAL_GPIO_Init+0x264>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d101      	bne.n	8003c22 <HAL_GPIO_Init+0x20e>
 8003c1e:	2309      	movs	r3, #9
 8003c20:	e02d      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c22:	230a      	movs	r3, #10
 8003c24:	e02b      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c26:	2308      	movs	r3, #8
 8003c28:	e029      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c2a:	2307      	movs	r3, #7
 8003c2c:	e027      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c2e:	2306      	movs	r3, #6
 8003c30:	e025      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c32:	2305      	movs	r3, #5
 8003c34:	e023      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c36:	2304      	movs	r3, #4
 8003c38:	e021      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e01f      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e01d      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e01b      	b.n	8003c7e <HAL_GPIO_Init+0x26a>
 8003c46:	bf00      	nop
 8003c48:	58000080 	.word	0x58000080
 8003c4c:	58024400 	.word	0x58024400
 8003c50:	58000400 	.word	0x58000400
 8003c54:	58020000 	.word	0x58020000
 8003c58:	58020400 	.word	0x58020400
 8003c5c:	58020800 	.word	0x58020800
 8003c60:	58020c00 	.word	0x58020c00
 8003c64:	58021000 	.word	0x58021000
 8003c68:	58021400 	.word	0x58021400
 8003c6c:	58021800 	.word	0x58021800
 8003c70:	58021c00 	.word	0x58021c00
 8003c74:	58022000 	.word	0x58022000
 8003c78:	58022400 	.word	0x58022400
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	f002 0203 	and.w	r2, r2, #3
 8003c84:	0092      	lsls	r2, r2, #2
 8003c86:	4093      	lsls	r3, r2
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c8e:	4938      	ldr	r1, [pc, #224]	; (8003d70 <HAL_GPIO_Init+0x35c>)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	3302      	adds	r3, #2
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f47f ae63 	bne.w	8003a28 <HAL_GPIO_Init+0x14>
  }
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	3724      	adds	r7, #36	; 0x24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	58000400 	.word	0x58000400

08003d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	807b      	strh	r3, [r7, #2]
 8003d80:	4613      	mov	r3, r2
 8003d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d84:	787b      	ldrb	r3, [r7, #1]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d8a:	887a      	ldrh	r2, [r7, #2]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003d90:	e003      	b.n	8003d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	041a      	lsls	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	619a      	str	r2, [r3, #24]
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_PWREx_ConfigSupply+0x70>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d00a      	beq.n	8003dd2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003dbc:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <HAL_PWREx_ConfigSupply+0x70>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d001      	beq.n	8003dce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e01f      	b.n	8003e0e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e01d      	b.n	8003e0e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003dd2:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <HAL_PWREx_ConfigSupply+0x70>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f023 0207 	bic.w	r2, r3, #7
 8003dda:	490f      	ldr	r1, [pc, #60]	; (8003e18 <HAL_PWREx_ConfigSupply+0x70>)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003de2:	f7fd fde3 	bl	80019ac <HAL_GetTick>
 8003de6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003de8:	e009      	b.n	8003dfe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003dea:	f7fd fddf 	bl	80019ac <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003df8:	d901      	bls.n	8003dfe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e007      	b.n	8003e0e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_PWREx_ConfigSupply+0x70>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0a:	d1ee      	bne.n	8003dea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	58024800 	.word	0x58024800

08003e1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08c      	sub	sp, #48	; 0x30
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e3ff      	b.n	800462e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8087 	beq.w	8003f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e3c:	4b99      	ldr	r3, [pc, #612]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e46:	4b97      	ldr	r3, [pc, #604]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d007      	beq.n	8003e62 <HAL_RCC_OscConfig+0x46>
 8003e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e54:	2b18      	cmp	r3, #24
 8003e56:	d110      	bne.n	8003e7a <HAL_RCC_OscConfig+0x5e>
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d10b      	bne.n	8003e7a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e62:	4b90      	ldr	r3, [pc, #576]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d06c      	beq.n	8003f48 <HAL_RCC_OscConfig+0x12c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d168      	bne.n	8003f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e3d9      	b.n	800462e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e82:	d106      	bne.n	8003e92 <HAL_RCC_OscConfig+0x76>
 8003e84:	4b87      	ldr	r3, [pc, #540]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a86      	ldr	r2, [pc, #536]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	e02e      	b.n	8003ef0 <HAL_RCC_OscConfig+0xd4>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x98>
 8003e9a:	4b82      	ldr	r3, [pc, #520]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a81      	ldr	r2, [pc, #516]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b7f      	ldr	r3, [pc, #508]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a7e      	ldr	r2, [pc, #504]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e01d      	b.n	8003ef0 <HAL_RCC_OscConfig+0xd4>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0xbc>
 8003ebe:	4b79      	ldr	r3, [pc, #484]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a78      	ldr	r2, [pc, #480]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	4b76      	ldr	r3, [pc, #472]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a75      	ldr	r2, [pc, #468]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e00b      	b.n	8003ef0 <HAL_RCC_OscConfig+0xd4>
 8003ed8:	4b72      	ldr	r3, [pc, #456]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a71      	ldr	r2, [pc, #452]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	4b6f      	ldr	r3, [pc, #444]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a6e      	ldr	r2, [pc, #440]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d013      	beq.n	8003f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fd58 	bl	80019ac <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fd fd54 	bl	80019ac <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	; 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e38d      	b.n	800462e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f12:	4b64      	ldr	r3, [pc, #400]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0xe4>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd fd44 	bl	80019ac <HAL_GetTick>
 8003f24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fd fd40 	bl	80019ac <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e379      	b.n	800462e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f3a:	4b5a      	ldr	r3, [pc, #360]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x10c>
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80ae 	beq.w	80040b4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f58:	4b52      	ldr	r3, [pc, #328]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f62:	4b50      	ldr	r3, [pc, #320]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <HAL_RCC_OscConfig+0x162>
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	2b18      	cmp	r3, #24
 8003f72:	d13a      	bne.n	8003fea <HAL_RCC_OscConfig+0x1ce>
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d135      	bne.n	8003fea <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f7e:	4b49      	ldr	r3, [pc, #292]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_RCC_OscConfig+0x17a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e34b      	b.n	800462e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f96:	f7fd fd15 	bl	80019c4 <HAL_GetREVID>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d817      	bhi.n	8003fd4 <HAL_RCC_OscConfig+0x1b8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d108      	bne.n	8003fbe <HAL_RCC_OscConfig+0x1a2>
 8003fac:	4b3d      	ldr	r3, [pc, #244]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003fb4:	4a3b      	ldr	r2, [pc, #236]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fba:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fbc:	e07a      	b.n	80040b4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbe:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	031b      	lsls	r3, r3, #12
 8003fcc:	4935      	ldr	r1, [pc, #212]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd2:	e06f      	b.n	80040b4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd4:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	4930      	ldr	r1, [pc, #192]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fe8:	e064      	b.n	80040b4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d045      	beq.n	800407e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ff2:	4b2c      	ldr	r3, [pc, #176]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 0219 	bic.w	r2, r3, #25
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4929      	ldr	r1, [pc, #164]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8004000:	4313      	orrs	r3, r2
 8004002:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fd fcd2 	bl	80019ac <HAL_GetTick>
 8004008:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800400c:	f7fd fcce 	bl	80019ac <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e307      	b.n	800462e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800401e:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402a:	f7fd fccb 	bl	80019c4 <HAL_GetREVID>
 800402e:	4603      	mov	r3, r0
 8004030:	f241 0203 	movw	r2, #4099	; 0x1003
 8004034:	4293      	cmp	r3, r2
 8004036:	d817      	bhi.n	8004068 <HAL_RCC_OscConfig+0x24c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d108      	bne.n	8004052 <HAL_RCC_OscConfig+0x236>
 8004040:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004048:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 800404a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404e:	6053      	str	r3, [r2, #4]
 8004050:	e030      	b.n	80040b4 <HAL_RCC_OscConfig+0x298>
 8004052:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	031b      	lsls	r3, r3, #12
 8004060:	4910      	ldr	r1, [pc, #64]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8004062:	4313      	orrs	r3, r2
 8004064:	604b      	str	r3, [r1, #4]
 8004066:	e025      	b.n	80040b4 <HAL_RCC_OscConfig+0x298>
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	490b      	ldr	r1, [pc, #44]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
 800407c:	e01a      	b.n	80040b4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <HAL_RCC_OscConfig+0x288>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fd fc8f 	bl	80019ac <HAL_GetTick>
 800408e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004092:	f7fd fc8b 	bl	80019ac <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d903      	bls.n	80040a8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e2c4      	b.n	800462e <HAL_RCC_OscConfig+0x812>
 80040a4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040a8:	4ba4      	ldr	r3, [pc, #656]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ee      	bne.n	8004092 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80a9 	beq.w	8004214 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040c2:	4b9e      	ldr	r3, [pc, #632]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040cc:	4b9b      	ldr	r3, [pc, #620]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d007      	beq.n	80040e8 <HAL_RCC_OscConfig+0x2cc>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b18      	cmp	r3, #24
 80040dc:	d13a      	bne.n	8004154 <HAL_RCC_OscConfig+0x338>
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d135      	bne.n	8004154 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040e8:	4b94      	ldr	r3, [pc, #592]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_OscConfig+0x2e4>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	2b80      	cmp	r3, #128	; 0x80
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e296      	b.n	800462e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004100:	f7fd fc60 	bl	80019c4 <HAL_GetREVID>
 8004104:	4603      	mov	r3, r0
 8004106:	f241 0203 	movw	r2, #4099	; 0x1003
 800410a:	4293      	cmp	r3, r2
 800410c:	d817      	bhi.n	800413e <HAL_RCC_OscConfig+0x322>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	2b20      	cmp	r3, #32
 8004114:	d108      	bne.n	8004128 <HAL_RCC_OscConfig+0x30c>
 8004116:	4b89      	ldr	r3, [pc, #548]	; (800433c <HAL_RCC_OscConfig+0x520>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800411e:	4a87      	ldr	r2, [pc, #540]	; (800433c <HAL_RCC_OscConfig+0x520>)
 8004120:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004124:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004126:	e075      	b.n	8004214 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004128:	4b84      	ldr	r3, [pc, #528]	; (800433c <HAL_RCC_OscConfig+0x520>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	069b      	lsls	r3, r3, #26
 8004136:	4981      	ldr	r1, [pc, #516]	; (800433c <HAL_RCC_OscConfig+0x520>)
 8004138:	4313      	orrs	r3, r2
 800413a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800413c:	e06a      	b.n	8004214 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800413e:	4b7f      	ldr	r3, [pc, #508]	; (800433c <HAL_RCC_OscConfig+0x520>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	061b      	lsls	r3, r3, #24
 800414c:	497b      	ldr	r1, [pc, #492]	; (800433c <HAL_RCC_OscConfig+0x520>)
 800414e:	4313      	orrs	r3, r2
 8004150:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004152:	e05f      	b.n	8004214 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d042      	beq.n	80041e2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800415c:	4b77      	ldr	r3, [pc, #476]	; (800433c <HAL_RCC_OscConfig+0x520>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a76      	ldr	r2, [pc, #472]	; (800433c <HAL_RCC_OscConfig+0x520>)
 8004162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fd fc20 	bl	80019ac <HAL_GetTick>
 800416c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004170:	f7fd fc1c 	bl	80019ac <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e255      	b.n	800462e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004182:	4b6e      	ldr	r3, [pc, #440]	; (800433c <HAL_RCC_OscConfig+0x520>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800418e:	f7fd fc19 	bl	80019c4 <HAL_GetREVID>
 8004192:	4603      	mov	r3, r0
 8004194:	f241 0203 	movw	r2, #4099	; 0x1003
 8004198:	4293      	cmp	r3, r2
 800419a:	d817      	bhi.n	80041cc <HAL_RCC_OscConfig+0x3b0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d108      	bne.n	80041b6 <HAL_RCC_OscConfig+0x39a>
 80041a4:	4b65      	ldr	r3, [pc, #404]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80041ac:	4a63      	ldr	r2, [pc, #396]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80041ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041b2:	6053      	str	r3, [r2, #4]
 80041b4:	e02e      	b.n	8004214 <HAL_RCC_OscConfig+0x3f8>
 80041b6:	4b61      	ldr	r3, [pc, #388]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	069b      	lsls	r3, r3, #26
 80041c4:	495d      	ldr	r1, [pc, #372]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]
 80041ca:	e023      	b.n	8004214 <HAL_RCC_OscConfig+0x3f8>
 80041cc:	4b5b      	ldr	r3, [pc, #364]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	061b      	lsls	r3, r3, #24
 80041da:	4958      	ldr	r1, [pc, #352]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	60cb      	str	r3, [r1, #12]
 80041e0:	e018      	b.n	8004214 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041e2:	4b56      	ldr	r3, [pc, #344]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a55      	ldr	r2, [pc, #340]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80041e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ee:	f7fd fbdd 	bl	80019ac <HAL_GetTick>
 80041f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041f6:	f7fd fbd9 	bl	80019ac <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e212      	b.n	800462e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004208:	4b4c      	ldr	r3, [pc, #304]	; (800433c <HAL_RCC_OscConfig+0x520>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f0      	bne.n	80041f6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d036      	beq.n	800428e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d019      	beq.n	800425c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004228:	4b44      	ldr	r3, [pc, #272]	; (800433c <HAL_RCC_OscConfig+0x520>)
 800422a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422c:	4a43      	ldr	r2, [pc, #268]	; (800433c <HAL_RCC_OscConfig+0x520>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004234:	f7fd fbba 	bl	80019ac <HAL_GetTick>
 8004238:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800423c:	f7fd fbb6 	bl	80019ac <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e1ef      	b.n	800462e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800424e:	4b3b      	ldr	r3, [pc, #236]	; (800433c <HAL_RCC_OscConfig+0x520>)
 8004250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0x420>
 800425a:	e018      	b.n	800428e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800425c:	4b37      	ldr	r3, [pc, #220]	; (800433c <HAL_RCC_OscConfig+0x520>)
 800425e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004260:	4a36      	ldr	r2, [pc, #216]	; (800433c <HAL_RCC_OscConfig+0x520>)
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004268:	f7fd fba0 	bl	80019ac <HAL_GetTick>
 800426c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004270:	f7fd fb9c 	bl	80019ac <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e1d5      	b.n	800462e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004282:	4b2e      	ldr	r3, [pc, #184]	; (800433c <HAL_RCC_OscConfig+0x520>)
 8004284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d036      	beq.n	8004308 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d019      	beq.n	80042d6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042a2:	4b26      	ldr	r3, [pc, #152]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a25      	ldr	r2, [pc, #148]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80042a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042ae:	f7fd fb7d 	bl	80019ac <HAL_GetTick>
 80042b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042b6:	f7fd fb79 	bl	80019ac <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e1b2      	b.n	800462e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042c8:	4b1c      	ldr	r3, [pc, #112]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x49a>
 80042d4:	e018      	b.n	8004308 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042d6:	4b19      	ldr	r3, [pc, #100]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a18      	ldr	r2, [pc, #96]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80042dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042e2:	f7fd fb63 	bl	80019ac <HAL_GetTick>
 80042e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042ea:	f7fd fb5f 	bl	80019ac <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e198      	b.n	800462e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <HAL_RCC_OscConfig+0x520>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f0      	bne.n	80042ea <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8085 	beq.w	8004420 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004316:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <HAL_RCC_OscConfig+0x524>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a09      	ldr	r2, [pc, #36]	; (8004340 <HAL_RCC_OscConfig+0x524>)
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004322:	f7fd fb43 	bl	80019ac <HAL_GetTick>
 8004326:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004328:	e00c      	b.n	8004344 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800432a:	f7fd fb3f 	bl	80019ac <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b64      	cmp	r3, #100	; 0x64
 8004336:	d905      	bls.n	8004344 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e178      	b.n	800462e <HAL_RCC_OscConfig+0x812>
 800433c:	58024400 	.word	0x58024400
 8004340:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004344:	4b96      	ldr	r3, [pc, #600]	; (80045a0 <HAL_RCC_OscConfig+0x784>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0ec      	beq.n	800432a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d106      	bne.n	8004366 <HAL_RCC_OscConfig+0x54a>
 8004358:	4b92      	ldr	r3, [pc, #584]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800435a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435c:	4a91      	ldr	r2, [pc, #580]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	6713      	str	r3, [r2, #112]	; 0x70
 8004364:	e02d      	b.n	80043c2 <HAL_RCC_OscConfig+0x5a6>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10c      	bne.n	8004388 <HAL_RCC_OscConfig+0x56c>
 800436e:	4b8d      	ldr	r3, [pc, #564]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	4a8c      	ldr	r2, [pc, #560]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004374:	f023 0301 	bic.w	r3, r3, #1
 8004378:	6713      	str	r3, [r2, #112]	; 0x70
 800437a:	4b8a      	ldr	r3, [pc, #552]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	4a89      	ldr	r2, [pc, #548]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004380:	f023 0304 	bic.w	r3, r3, #4
 8004384:	6713      	str	r3, [r2, #112]	; 0x70
 8004386:	e01c      	b.n	80043c2 <HAL_RCC_OscConfig+0x5a6>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b05      	cmp	r3, #5
 800438e:	d10c      	bne.n	80043aa <HAL_RCC_OscConfig+0x58e>
 8004390:	4b84      	ldr	r3, [pc, #528]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004394:	4a83      	ldr	r2, [pc, #524]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004396:	f043 0304 	orr.w	r3, r3, #4
 800439a:	6713      	str	r3, [r2, #112]	; 0x70
 800439c:	4b81      	ldr	r3, [pc, #516]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a0:	4a80      	ldr	r2, [pc, #512]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	6713      	str	r3, [r2, #112]	; 0x70
 80043a8:	e00b      	b.n	80043c2 <HAL_RCC_OscConfig+0x5a6>
 80043aa:	4b7e      	ldr	r3, [pc, #504]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a7d      	ldr	r2, [pc, #500]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	6713      	str	r3, [r2, #112]	; 0x70
 80043b6:	4b7b      	ldr	r3, [pc, #492]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	4a7a      	ldr	r2, [pc, #488]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80043bc:	f023 0304 	bic.w	r3, r3, #4
 80043c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d015      	beq.n	80043f6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ca:	f7fd faef 	bl	80019ac <HAL_GetTick>
 80043ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fd faeb 	bl	80019ac <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e122      	b.n	800462e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043e8:	4b6e      	ldr	r3, [pc, #440]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0ee      	beq.n	80043d2 <HAL_RCC_OscConfig+0x5b6>
 80043f4:	e014      	b.n	8004420 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f6:	f7fd fad9 	bl	80019ac <HAL_GetTick>
 80043fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043fc:	e00a      	b.n	8004414 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fe:	f7fd fad5 	bl	80019ac <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f241 3288 	movw	r2, #5000	; 0x1388
 800440c:	4293      	cmp	r3, r2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e10c      	b.n	800462e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004414:	4b63      	ldr	r3, [pc, #396]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1ee      	bne.n	80043fe <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8101 	beq.w	800462c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800442a:	4b5e      	ldr	r3, [pc, #376]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004432:	2b18      	cmp	r3, #24
 8004434:	f000 80bc 	beq.w	80045b0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	2b02      	cmp	r3, #2
 800443e:	f040 8095 	bne.w	800456c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004442:	4b58      	ldr	r3, [pc, #352]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a57      	ldr	r2, [pc, #348]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800444c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fd faad 	bl	80019ac <HAL_GetTick>
 8004452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004456:	f7fd faa9 	bl	80019ac <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e0e2      	b.n	800462e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004468:	4b4e      	ldr	r3, [pc, #312]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f0      	bne.n	8004456 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004474:	4b4b      	ldr	r3, [pc, #300]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004478:	4b4b      	ldr	r3, [pc, #300]	; (80045a8 <HAL_RCC_OscConfig+0x78c>)
 800447a:	4013      	ands	r3, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004484:	0112      	lsls	r2, r2, #4
 8004486:	430a      	orrs	r2, r1
 8004488:	4946      	ldr	r1, [pc, #280]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800448a:	4313      	orrs	r3, r2
 800448c:	628b      	str	r3, [r1, #40]	; 0x28
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	3b01      	subs	r3, #1
 8004494:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449c:	3b01      	subs	r3, #1
 800449e:	025b      	lsls	r3, r3, #9
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	3b01      	subs	r3, #1
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b6:	3b01      	subs	r3, #1
 80044b8:	061b      	lsls	r3, r3, #24
 80044ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044be:	4939      	ldr	r1, [pc, #228]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80044c4:	4b37      	ldr	r3, [pc, #220]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	4a36      	ldr	r2, [pc, #216]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044d0:	4b34      	ldr	r3, [pc, #208]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80044d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d4:	4b35      	ldr	r3, [pc, #212]	; (80045ac <HAL_RCC_OscConfig+0x790>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044dc:	00d2      	lsls	r2, r2, #3
 80044de:	4931      	ldr	r1, [pc, #196]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044e4:	4b2f      	ldr	r3, [pc, #188]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	f023 020c 	bic.w	r2, r3, #12
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	492c      	ldr	r1, [pc, #176]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044f6:	4b2b      	ldr	r3, [pc, #172]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	f023 0202 	bic.w	r2, r3, #2
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	4928      	ldr	r1, [pc, #160]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004504:	4313      	orrs	r3, r2
 8004506:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004508:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	4a25      	ldr	r2, [pc, #148]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800450e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004514:	4b23      	ldr	r3, [pc, #140]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	4a22      	ldr	r2, [pc, #136]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800451a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004520:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800452a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800452c:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	4a1c      	ldr	r2, [pc, #112]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004538:	4b1a      	ldr	r3, [pc, #104]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a19      	ldr	r2, [pc, #100]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800453e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004544:	f7fd fa32 	bl	80019ac <HAL_GetTick>
 8004548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800454c:	f7fd fa2e 	bl	80019ac <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e067      	b.n	800462e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800455e:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x730>
 800456a:	e05f      	b.n	800462c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a0c      	ldr	r2, [pc, #48]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7fd fa18 	bl	80019ac <HAL_GetTick>
 800457c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004580:	f7fd fa14 	bl	80019ac <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e04d      	b.n	800462e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004592:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <HAL_RCC_OscConfig+0x788>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x764>
 800459e:	e045      	b.n	800462c <HAL_RCC_OscConfig+0x810>
 80045a0:	58024800 	.word	0x58024800
 80045a4:	58024400 	.word	0x58024400
 80045a8:	fffffc0c 	.word	0xfffffc0c
 80045ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80045b0:	4b21      	ldr	r3, [pc, #132]	; (8004638 <HAL_RCC_OscConfig+0x81c>)
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045b6:	4b20      	ldr	r3, [pc, #128]	; (8004638 <HAL_RCC_OscConfig+0x81c>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d031      	beq.n	8004628 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f003 0203 	and.w	r2, r3, #3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d12a      	bne.n	8004628 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045de:	429a      	cmp	r2, r3
 80045e0:	d122      	bne.n	8004628 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d11a      	bne.n	8004628 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	0a5b      	lsrs	r3, r3, #9
 80045f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d111      	bne.n	8004628 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	0c1b      	lsrs	r3, r3, #16
 8004608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d108      	bne.n	8004628 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	0e1b      	lsrs	r3, r3, #24
 800461a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004622:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3730      	adds	r7, #48	; 0x30
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	58024400 	.word	0x58024400

0800463c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e19c      	b.n	800498a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004650:	4b8a      	ldr	r3, [pc, #552]	; (800487c <HAL_RCC_ClockConfig+0x240>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d910      	bls.n	8004680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	4b87      	ldr	r3, [pc, #540]	; (800487c <HAL_RCC_ClockConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 020f 	bic.w	r2, r3, #15
 8004666:	4985      	ldr	r1, [pc, #532]	; (800487c <HAL_RCC_ClockConfig+0x240>)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	4313      	orrs	r3, r2
 800466c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	4b83      	ldr	r3, [pc, #524]	; (800487c <HAL_RCC_ClockConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d001      	beq.n	8004680 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e184      	b.n	800498a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d010      	beq.n	80046ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	4b7b      	ldr	r3, [pc, #492]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004698:	429a      	cmp	r2, r3
 800469a:	d908      	bls.n	80046ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800469c:	4b78      	ldr	r3, [pc, #480]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	4975      	ldr	r1, [pc, #468]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d010      	beq.n	80046dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	4b70      	ldr	r3, [pc, #448]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d908      	bls.n	80046dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046ca:	4b6d      	ldr	r3, [pc, #436]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	496a      	ldr	r1, [pc, #424]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d010      	beq.n	800470a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699a      	ldr	r2, [r3, #24]
 80046ec:	4b64      	ldr	r3, [pc, #400]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d908      	bls.n	800470a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046f8:	4b61      	ldr	r3, [pc, #388]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	495e      	ldr	r1, [pc, #376]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 8004706:	4313      	orrs	r3, r2
 8004708:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d010      	beq.n	8004738 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	4b59      	ldr	r3, [pc, #356]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004722:	429a      	cmp	r2, r3
 8004724:	d908      	bls.n	8004738 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004726:	4b56      	ldr	r3, [pc, #344]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	4953      	ldr	r1, [pc, #332]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 8004734:	4313      	orrs	r3, r2
 8004736:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d010      	beq.n	8004766 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	4b4d      	ldr	r3, [pc, #308]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	429a      	cmp	r2, r3
 8004752:	d908      	bls.n	8004766 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004754:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f023 020f 	bic.w	r2, r3, #15
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	4947      	ldr	r1, [pc, #284]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 8004762:	4313      	orrs	r3, r2
 8004764:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d055      	beq.n	800481e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004772:	4b43      	ldr	r3, [pc, #268]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	4940      	ldr	r1, [pc, #256]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 8004780:	4313      	orrs	r3, r2
 8004782:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d107      	bne.n	800479c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800478c:	4b3c      	ldr	r3, [pc, #240]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d121      	bne.n	80047dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0f6      	b.n	800498a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d107      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047a4:	4b36      	ldr	r3, [pc, #216]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d115      	bne.n	80047dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0ea      	b.n	800498a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d107      	bne.n	80047cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047bc:	4b30      	ldr	r3, [pc, #192]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0de      	b.n	800498a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047cc:	4b2c      	ldr	r3, [pc, #176]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0d6      	b.n	800498a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047dc:	4b28      	ldr	r3, [pc, #160]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f023 0207 	bic.w	r2, r3, #7
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4925      	ldr	r1, [pc, #148]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ee:	f7fd f8dd 	bl	80019ac <HAL_GetTick>
 80047f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f4:	e00a      	b.n	800480c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f6:	f7fd f8d9 	bl	80019ac <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	; 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e0be      	b.n	800498a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480c:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	429a      	cmp	r2, r3
 800481c:	d1eb      	bne.n	80047f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d010      	beq.n	800484c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	429a      	cmp	r2, r3
 8004838:	d208      	bcs.n	800484c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800483a:	4b11      	ldr	r3, [pc, #68]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f023 020f 	bic.w	r2, r3, #15
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	490e      	ldr	r1, [pc, #56]	; (8004880 <HAL_RCC_ClockConfig+0x244>)
 8004848:	4313      	orrs	r3, r2
 800484a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RCC_ClockConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d214      	bcs.n	8004884 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	4b08      	ldr	r3, [pc, #32]	; (800487c <HAL_RCC_ClockConfig+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 020f 	bic.w	r2, r3, #15
 8004862:	4906      	ldr	r1, [pc, #24]	; (800487c <HAL_RCC_ClockConfig+0x240>)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b04      	ldr	r3, [pc, #16]	; (800487c <HAL_RCC_ClockConfig+0x240>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e086      	b.n	800498a <HAL_RCC_ClockConfig+0x34e>
 800487c:	52002000 	.word	0x52002000
 8004880:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d010      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	4b3f      	ldr	r3, [pc, #252]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800489c:	429a      	cmp	r2, r3
 800489e:	d208      	bcs.n	80048b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048a0:	4b3c      	ldr	r3, [pc, #240]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	4939      	ldr	r1, [pc, #228]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d010      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	4b34      	ldr	r3, [pc, #208]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d208      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048ce:	4b31      	ldr	r3, [pc, #196]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	492e      	ldr	r1, [pc, #184]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d010      	beq.n	800490e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699a      	ldr	r2, [r3, #24]
 80048f0:	4b28      	ldr	r3, [pc, #160]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d208      	bcs.n	800490e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048fc:	4b25      	ldr	r3, [pc, #148]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	4922      	ldr	r1, [pc, #136]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 800490a:	4313      	orrs	r3, r2
 800490c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d010      	beq.n	800493c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69da      	ldr	r2, [r3, #28]
 800491e:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004926:	429a      	cmp	r2, r3
 8004928:	d208      	bcs.n	800493c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800492a:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	4917      	ldr	r1, [pc, #92]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 8004938:	4313      	orrs	r3, r2
 800493a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800493c:	f000 f834 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b14      	ldr	r3, [pc, #80]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	4912      	ldr	r1, [pc, #72]	; (8004998 <HAL_RCC_ClockConfig+0x35c>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
 8004958:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800495a:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <HAL_RCC_ClockConfig+0x358>)
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	4a0d      	ldr	r2, [pc, #52]	; (8004998 <HAL_RCC_ClockConfig+0x35c>)
 8004964:	5cd3      	ldrb	r3, [r2, r3]
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
 8004970:	4a0a      	ldr	r2, [pc, #40]	; (800499c <HAL_RCC_ClockConfig+0x360>)
 8004972:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004974:	4a0a      	ldr	r2, [pc, #40]	; (80049a0 <HAL_RCC_ClockConfig+0x364>)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <HAL_RCC_ClockConfig+0x368>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7fc fa02 	bl	8000d88 <HAL_InitTick>
 8004984:	4603      	mov	r3, r0
 8004986:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	58024400 	.word	0x58024400
 8004998:	0801eaf8 	.word	0x0801eaf8
 800499c:	24000004 	.word	0x24000004
 80049a0:	24000000 	.word	0x24000000
 80049a4:	24000008 	.word	0x24000008

080049a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b089      	sub	sp, #36	; 0x24
 80049ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ae:	4bb3      	ldr	r3, [pc, #716]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049b6:	2b18      	cmp	r3, #24
 80049b8:	f200 8155 	bhi.w	8004c66 <HAL_RCC_GetSysClockFreq+0x2be>
 80049bc:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	08004a29 	.word	0x08004a29
 80049c8:	08004c67 	.word	0x08004c67
 80049cc:	08004c67 	.word	0x08004c67
 80049d0:	08004c67 	.word	0x08004c67
 80049d4:	08004c67 	.word	0x08004c67
 80049d8:	08004c67 	.word	0x08004c67
 80049dc:	08004c67 	.word	0x08004c67
 80049e0:	08004c67 	.word	0x08004c67
 80049e4:	08004a4f 	.word	0x08004a4f
 80049e8:	08004c67 	.word	0x08004c67
 80049ec:	08004c67 	.word	0x08004c67
 80049f0:	08004c67 	.word	0x08004c67
 80049f4:	08004c67 	.word	0x08004c67
 80049f8:	08004c67 	.word	0x08004c67
 80049fc:	08004c67 	.word	0x08004c67
 8004a00:	08004c67 	.word	0x08004c67
 8004a04:	08004a55 	.word	0x08004a55
 8004a08:	08004c67 	.word	0x08004c67
 8004a0c:	08004c67 	.word	0x08004c67
 8004a10:	08004c67 	.word	0x08004c67
 8004a14:	08004c67 	.word	0x08004c67
 8004a18:	08004c67 	.word	0x08004c67
 8004a1c:	08004c67 	.word	0x08004c67
 8004a20:	08004c67 	.word	0x08004c67
 8004a24:	08004a5b 	.word	0x08004a5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a28:	4b94      	ldr	r3, [pc, #592]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d009      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a34:	4b91      	ldr	r3, [pc, #580]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	08db      	lsrs	r3, r3, #3
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	4a90      	ldr	r2, [pc, #576]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a40:	fa22 f303 	lsr.w	r3, r2, r3
 8004a44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004a46:	e111      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a48:	4b8d      	ldr	r3, [pc, #564]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a4a:	61bb      	str	r3, [r7, #24]
    break;
 8004a4c:	e10e      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004a4e:	4b8d      	ldr	r3, [pc, #564]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a50:	61bb      	str	r3, [r7, #24]
    break;
 8004a52:	e10b      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004a54:	4b8c      	ldr	r3, [pc, #560]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a56:	61bb      	str	r3, [r7, #24]
    break;
 8004a58:	e108      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a5a:	4b88      	ldr	r3, [pc, #544]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a64:	4b85      	ldr	r3, [pc, #532]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a70:	4b82      	ldr	r3, [pc, #520]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a7a:	4b80      	ldr	r3, [pc, #512]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	08db      	lsrs	r3, r3, #3
 8004a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80e1 	beq.w	8004c60 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	f000 8083 	beq.w	8004bac <HAL_RCC_GetSysClockFreq+0x204>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	f200 80a1 	bhi.w	8004bf0 <HAL_RCC_GetSysClockFreq+0x248>
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x114>
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d056      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004aba:	e099      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004abc:	4b6f      	ldr	r3, [pc, #444]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d02d      	beq.n	8004b24 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ac8:	4b6c      	ldr	r3, [pc, #432]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	08db      	lsrs	r3, r3, #3
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	4a6b      	ldr	r2, [pc, #428]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	ee07 3a90 	vmov	s15, r3
 8004ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af2:	4b62      	ldr	r3, [pc, #392]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b06:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004b22:	e087      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004c90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b36:	4b51      	ldr	r3, [pc, #324]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b66:	e065      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004c94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7a:	4b40      	ldr	r3, [pc, #256]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004baa:	e043      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004c98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bbe:	4b2f      	ldr	r3, [pc, #188]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bd2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bee:	e021      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004c94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c02:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c32:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	0a5b      	lsrs	r3, r3, #9
 8004c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c3e:	3301      	adds	r3, #1
 8004c40:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	ee07 3a90 	vmov	s15, r3
 8004c48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c58:	ee17 3a90 	vmov	r3, s15
 8004c5c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004c5e:	e005      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61bb      	str	r3, [r7, #24]
    break;
 8004c64:	e002      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004c66:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c68:	61bb      	str	r3, [r7, #24]
    break;
 8004c6a:	bf00      	nop
  }

  return sysclockfreq;
 8004c6c:	69bb      	ldr	r3, [r7, #24]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3724      	adds	r7, #36	; 0x24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	58024400 	.word	0x58024400
 8004c80:	03d09000 	.word	0x03d09000
 8004c84:	003d0900 	.word	0x003d0900
 8004c88:	007a1200 	.word	0x007a1200
 8004c8c:	46000000 	.word	0x46000000
 8004c90:	4c742400 	.word	0x4c742400
 8004c94:	4a742400 	.word	0x4a742400
 8004c98:	4af42400 	.word	0x4af42400

08004c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ca2:	f7ff fe81 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	4b10      	ldr	r3, [pc, #64]	; (8004cec <HAL_RCC_GetHCLKFreq+0x50>)
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	0a1b      	lsrs	r3, r3, #8
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	490f      	ldr	r1, [pc, #60]	; (8004cf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cb4:	5ccb      	ldrb	r3, [r1, r3]
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	fa22 f303 	lsr.w	r3, r2, r3
 8004cbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <HAL_RCC_GetHCLKFreq+0x50>)
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cca:	5cd3      	ldrb	r3, [r2, r3]
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd6:	4a07      	ldr	r2, [pc, #28]	; (8004cf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cda:	4a07      	ldr	r2, [pc, #28]	; (8004cf8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004ce0:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	58024400 	.word	0x58024400
 8004cf0:	0801eaf8 	.word	0x0801eaf8
 8004cf4:	24000004 	.word	0x24000004
 8004cf8:	24000000 	.word	0x24000000

08004cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d00:	f7ff ffcc 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	4904      	ldr	r1, [pc, #16]	; (8004d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	58024400 	.word	0x58024400
 8004d24:	0801eaf8 	.word	0x0801eaf8

08004d28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	223f      	movs	r2, #63	; 0x3f
 8004d36:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d38:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <HAL_RCC_GetClockConfig+0x7c>)
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f003 0207 	and.w	r2, r3, #7
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004d44:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <HAL_RCC_GetClockConfig+0x7c>)
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004d50:	4b14      	ldr	r3, [pc, #80]	; (8004da4 <HAL_RCC_GetClockConfig+0x7c>)
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f003 020f 	and.w	r2, r3, #15
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004d5c:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <HAL_RCC_GetClockConfig+0x7c>)
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004d68:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <HAL_RCC_GetClockConfig+0x7c>)
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004d74:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <HAL_RCC_GetClockConfig+0x7c>)
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004d80:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <HAL_RCC_GetClockConfig+0x7c>)
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d8c:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <HAL_RCC_GetClockConfig+0x80>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 020f 	and.w	r2, r3, #15
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	601a      	str	r2, [r3, #0]
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	58024400 	.word	0x58024400
 8004da8:	52002000 	.word	0x52002000

08004dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e049      	b.n	8004e52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f841 	bl	8004e5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f000 f9f8 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
	...

08004e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d001      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e04f      	b.n	8004f28 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a23      	ldr	r2, [pc, #140]	; (8004f34 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01d      	beq.n	8004ee6 <HAL_TIM_Base_Start_IT+0x76>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb2:	d018      	beq.n	8004ee6 <HAL_TIM_Base_Start_IT+0x76>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1f      	ldr	r2, [pc, #124]	; (8004f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <HAL_TIM_Base_Start_IT+0x76>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a1e      	ldr	r2, [pc, #120]	; (8004f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00e      	beq.n	8004ee6 <HAL_TIM_Base_Start_IT+0x76>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1c      	ldr	r2, [pc, #112]	; (8004f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d009      	beq.n	8004ee6 <HAL_TIM_Base_Start_IT+0x76>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d004      	beq.n	8004ee6 <HAL_TIM_Base_Start_IT+0x76>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d115      	bne.n	8004f12 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <HAL_TIM_Base_Start_IT+0xdc>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b06      	cmp	r3, #6
 8004ef6:	d015      	beq.n	8004f24 <HAL_TIM_Base_Start_IT+0xb4>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efe:	d011      	beq.n	8004f24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f10:	e008      	b.n	8004f24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0201 	orr.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e000      	b.n	8004f26 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40000800 	.word	0x40000800
 8004f40:	40000c00 	.word	0x40000c00
 8004f44:	40010400 	.word	0x40010400
 8004f48:	40001800 	.word	0x40001800
 8004f4c:	00010007 	.word	0x00010007

08004f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d122      	bne.n	8004fac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d11b      	bne.n	8004fac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0202 	mvn.w	r2, #2
 8004f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f905 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f8f7 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f908 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d122      	bne.n	8005000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d11b      	bne.n	8005000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0204 	mvn.w	r2, #4
 8004fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f8db 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f8cd 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f8de 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b08      	cmp	r3, #8
 800500c:	d122      	bne.n	8005054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b08      	cmp	r3, #8
 800501a:	d11b      	bne.n	8005054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0208 	mvn.w	r2, #8
 8005024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2204      	movs	r2, #4
 800502a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8b1 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8005040:	e005      	b.n	800504e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f8a3 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f8b4 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0310 	and.w	r3, r3, #16
 800505e:	2b10      	cmp	r3, #16
 8005060:	d122      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b10      	cmp	r3, #16
 800506e:	d11b      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0210 	mvn.w	r2, #16
 8005078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2208      	movs	r2, #8
 800507e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f887 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8005094:	e005      	b.n	80050a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f879 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f88a 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d10e      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d107      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0201 	mvn.w	r2, #1
 80050cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fb fe24 	bl	8000d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b80      	cmp	r3, #128	; 0x80
 80050e0:	d10e      	bne.n	8005100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ec:	2b80      	cmp	r3, #128	; 0x80
 80050ee:	d107      	bne.n	8005100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f914 	bl	8005328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800510e:	d10e      	bne.n	800512e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511a:	2b80      	cmp	r3, #128	; 0x80
 800511c:	d107      	bne.n	800512e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f907 	bl	800533c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d10e      	bne.n	800515a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d107      	bne.n	800515a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f838 	bl	80051ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b20      	cmp	r3, #32
 8005166:	d10e      	bne.n	8005186 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b20      	cmp	r3, #32
 8005174:	d107      	bne.n	8005186 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f06f 0220 	mvn.w	r2, #32
 800517e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f8c7 	bl	8005314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a40      	ldr	r2, [pc, #256]	; (80052f4 <TIM_Base_SetConfig+0x114>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fe:	d00f      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3d      	ldr	r2, [pc, #244]	; (80052f8 <TIM_Base_SetConfig+0x118>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00b      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a3c      	ldr	r2, [pc, #240]	; (80052fc <TIM_Base_SetConfig+0x11c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a3b      	ldr	r2, [pc, #236]	; (8005300 <TIM_Base_SetConfig+0x120>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a3a      	ldr	r2, [pc, #232]	; (8005304 <TIM_Base_SetConfig+0x124>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d108      	bne.n	8005232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2f      	ldr	r2, [pc, #188]	; (80052f4 <TIM_Base_SetConfig+0x114>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01f      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005240:	d01b      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2c      	ldr	r2, [pc, #176]	; (80052f8 <TIM_Base_SetConfig+0x118>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d017      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2b      	ldr	r2, [pc, #172]	; (80052fc <TIM_Base_SetConfig+0x11c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <TIM_Base_SetConfig+0x120>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00f      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a29      	ldr	r2, [pc, #164]	; (8005304 <TIM_Base_SetConfig+0x124>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00b      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a28      	ldr	r2, [pc, #160]	; (8005308 <TIM_Base_SetConfig+0x128>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d007      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a27      	ldr	r2, [pc, #156]	; (800530c <TIM_Base_SetConfig+0x12c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a26      	ldr	r2, [pc, #152]	; (8005310 <TIM_Base_SetConfig+0x130>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d108      	bne.n	800528c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a10      	ldr	r2, [pc, #64]	; (80052f4 <TIM_Base_SetConfig+0x114>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00f      	beq.n	80052d8 <TIM_Base_SetConfig+0xf8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a12      	ldr	r2, [pc, #72]	; (8005304 <TIM_Base_SetConfig+0x124>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00b      	beq.n	80052d8 <TIM_Base_SetConfig+0xf8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a11      	ldr	r2, [pc, #68]	; (8005308 <TIM_Base_SetConfig+0x128>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d007      	beq.n	80052d8 <TIM_Base_SetConfig+0xf8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a10      	ldr	r2, [pc, #64]	; (800530c <TIM_Base_SetConfig+0x12c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_Base_SetConfig+0xf8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a0f      	ldr	r2, [pc, #60]	; (8005310 <TIM_Base_SetConfig+0x130>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d103      	bne.n	80052e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	615a      	str	r2, [r3, #20]
}
 80052e6:	bf00      	nop
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40010000 	.word	0x40010000
 80052f8:	40000400 	.word	0x40000400
 80052fc:	40000800 	.word	0x40000800
 8005300:	40000c00 	.word	0x40000c00
 8005304:	40010400 	.word	0x40010400
 8005308:	40014000 	.word	0x40014000
 800530c:	40014400 	.word	0x40014400
 8005310:	40014800 	.word	0x40014800

08005314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005356:	4b98      	ldr	r3, [pc, #608]	; (80055b8 <MX_LWIP_Init+0x268>)
 8005358:	22c0      	movs	r2, #192	; 0xc0
 800535a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800535c:	4b96      	ldr	r3, [pc, #600]	; (80055b8 <MX_LWIP_Init+0x268>)
 800535e:	22a8      	movs	r2, #168	; 0xa8
 8005360:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 115;
 8005362:	4b95      	ldr	r3, [pc, #596]	; (80055b8 <MX_LWIP_Init+0x268>)
 8005364:	2273      	movs	r2, #115	; 0x73
 8005366:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 135;
 8005368:	4b93      	ldr	r3, [pc, #588]	; (80055b8 <MX_LWIP_Init+0x268>)
 800536a:	2287      	movs	r2, #135	; 0x87
 800536c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800536e:	4b93      	ldr	r3, [pc, #588]	; (80055bc <MX_LWIP_Init+0x26c>)
 8005370:	22ff      	movs	r2, #255	; 0xff
 8005372:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005374:	4b91      	ldr	r3, [pc, #580]	; (80055bc <MX_LWIP_Init+0x26c>)
 8005376:	22ff      	movs	r2, #255	; 0xff
 8005378:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800537a:	4b90      	ldr	r3, [pc, #576]	; (80055bc <MX_LWIP_Init+0x26c>)
 800537c:	22ff      	movs	r2, #255	; 0xff
 800537e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005380:	4b8e      	ldr	r3, [pc, #568]	; (80055bc <MX_LWIP_Init+0x26c>)
 8005382:	2200      	movs	r2, #0
 8005384:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005386:	4b8e      	ldr	r3, [pc, #568]	; (80055c0 <MX_LWIP_Init+0x270>)
 8005388:	22c0      	movs	r2, #192	; 0xc0
 800538a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800538c:	4b8c      	ldr	r3, [pc, #560]	; (80055c0 <MX_LWIP_Init+0x270>)
 800538e:	22a8      	movs	r2, #168	; 0xa8
 8005390:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 115;
 8005392:	4b8b      	ldr	r3, [pc, #556]	; (80055c0 <MX_LWIP_Init+0x270>)
 8005394:	2273      	movs	r2, #115	; 0x73
 8005396:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005398:	4b89      	ldr	r3, [pc, #548]	; (80055c0 <MX_LWIP_Init+0x270>)
 800539a:	2201      	movs	r2, #1
 800539c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800539e:	2100      	movs	r1, #0
 80053a0:	2000      	movs	r0, #0
 80053a2:	f004 fd45 	bl	8009e30 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80053a6:	4b84      	ldr	r3, [pc, #528]	; (80055b8 <MX_LWIP_Init+0x268>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	061a      	lsls	r2, r3, #24
 80053ac:	4b82      	ldr	r3, [pc, #520]	; (80055b8 <MX_LWIP_Init+0x268>)
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	041b      	lsls	r3, r3, #16
 80053b2:	431a      	orrs	r2, r3
 80053b4:	4b80      	ldr	r3, [pc, #512]	; (80055b8 <MX_LWIP_Init+0x268>)
 80053b6:	789b      	ldrb	r3, [r3, #2]
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	4313      	orrs	r3, r2
 80053bc:	4a7e      	ldr	r2, [pc, #504]	; (80055b8 <MX_LWIP_Init+0x268>)
 80053be:	78d2      	ldrb	r2, [r2, #3]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	061a      	lsls	r2, r3, #24
 80053c4:	4b7c      	ldr	r3, [pc, #496]	; (80055b8 <MX_LWIP_Init+0x268>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	0619      	lsls	r1, r3, #24
 80053ca:	4b7b      	ldr	r3, [pc, #492]	; (80055b8 <MX_LWIP_Init+0x268>)
 80053cc:	785b      	ldrb	r3, [r3, #1]
 80053ce:	041b      	lsls	r3, r3, #16
 80053d0:	4319      	orrs	r1, r3
 80053d2:	4b79      	ldr	r3, [pc, #484]	; (80055b8 <MX_LWIP_Init+0x268>)
 80053d4:	789b      	ldrb	r3, [r3, #2]
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	430b      	orrs	r3, r1
 80053da:	4977      	ldr	r1, [pc, #476]	; (80055b8 <MX_LWIP_Init+0x268>)
 80053dc:	78c9      	ldrb	r1, [r1, #3]
 80053de:	430b      	orrs	r3, r1
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053e6:	431a      	orrs	r2, r3
 80053e8:	4b73      	ldr	r3, [pc, #460]	; (80055b8 <MX_LWIP_Init+0x268>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	0619      	lsls	r1, r3, #24
 80053ee:	4b72      	ldr	r3, [pc, #456]	; (80055b8 <MX_LWIP_Init+0x268>)
 80053f0:	785b      	ldrb	r3, [r3, #1]
 80053f2:	041b      	lsls	r3, r3, #16
 80053f4:	4319      	orrs	r1, r3
 80053f6:	4b70      	ldr	r3, [pc, #448]	; (80055b8 <MX_LWIP_Init+0x268>)
 80053f8:	789b      	ldrb	r3, [r3, #2]
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	430b      	orrs	r3, r1
 80053fe:	496e      	ldr	r1, [pc, #440]	; (80055b8 <MX_LWIP_Init+0x268>)
 8005400:	78c9      	ldrb	r1, [r1, #3]
 8005402:	430b      	orrs	r3, r1
 8005404:	0a1b      	lsrs	r3, r3, #8
 8005406:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800540a:	431a      	orrs	r2, r3
 800540c:	4b6a      	ldr	r3, [pc, #424]	; (80055b8 <MX_LWIP_Init+0x268>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	0619      	lsls	r1, r3, #24
 8005412:	4b69      	ldr	r3, [pc, #420]	; (80055b8 <MX_LWIP_Init+0x268>)
 8005414:	785b      	ldrb	r3, [r3, #1]
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	4319      	orrs	r1, r3
 800541a:	4b67      	ldr	r3, [pc, #412]	; (80055b8 <MX_LWIP_Init+0x268>)
 800541c:	789b      	ldrb	r3, [r3, #2]
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	430b      	orrs	r3, r1
 8005422:	4965      	ldr	r1, [pc, #404]	; (80055b8 <MX_LWIP_Init+0x268>)
 8005424:	78c9      	ldrb	r1, [r1, #3]
 8005426:	430b      	orrs	r3, r1
 8005428:	0e1b      	lsrs	r3, r3, #24
 800542a:	4313      	orrs	r3, r2
 800542c:	4a65      	ldr	r2, [pc, #404]	; (80055c4 <MX_LWIP_Init+0x274>)
 800542e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005430:	4b62      	ldr	r3, [pc, #392]	; (80055bc <MX_LWIP_Init+0x26c>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	061a      	lsls	r2, r3, #24
 8005436:	4b61      	ldr	r3, [pc, #388]	; (80055bc <MX_LWIP_Init+0x26c>)
 8005438:	785b      	ldrb	r3, [r3, #1]
 800543a:	041b      	lsls	r3, r3, #16
 800543c:	431a      	orrs	r2, r3
 800543e:	4b5f      	ldr	r3, [pc, #380]	; (80055bc <MX_LWIP_Init+0x26c>)
 8005440:	789b      	ldrb	r3, [r3, #2]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	4313      	orrs	r3, r2
 8005446:	4a5d      	ldr	r2, [pc, #372]	; (80055bc <MX_LWIP_Init+0x26c>)
 8005448:	78d2      	ldrb	r2, [r2, #3]
 800544a:	4313      	orrs	r3, r2
 800544c:	061a      	lsls	r2, r3, #24
 800544e:	4b5b      	ldr	r3, [pc, #364]	; (80055bc <MX_LWIP_Init+0x26c>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	0619      	lsls	r1, r3, #24
 8005454:	4b59      	ldr	r3, [pc, #356]	; (80055bc <MX_LWIP_Init+0x26c>)
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	041b      	lsls	r3, r3, #16
 800545a:	4319      	orrs	r1, r3
 800545c:	4b57      	ldr	r3, [pc, #348]	; (80055bc <MX_LWIP_Init+0x26c>)
 800545e:	789b      	ldrb	r3, [r3, #2]
 8005460:	021b      	lsls	r3, r3, #8
 8005462:	430b      	orrs	r3, r1
 8005464:	4955      	ldr	r1, [pc, #340]	; (80055bc <MX_LWIP_Init+0x26c>)
 8005466:	78c9      	ldrb	r1, [r1, #3]
 8005468:	430b      	orrs	r3, r1
 800546a:	021b      	lsls	r3, r3, #8
 800546c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005470:	431a      	orrs	r2, r3
 8005472:	4b52      	ldr	r3, [pc, #328]	; (80055bc <MX_LWIP_Init+0x26c>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	0619      	lsls	r1, r3, #24
 8005478:	4b50      	ldr	r3, [pc, #320]	; (80055bc <MX_LWIP_Init+0x26c>)
 800547a:	785b      	ldrb	r3, [r3, #1]
 800547c:	041b      	lsls	r3, r3, #16
 800547e:	4319      	orrs	r1, r3
 8005480:	4b4e      	ldr	r3, [pc, #312]	; (80055bc <MX_LWIP_Init+0x26c>)
 8005482:	789b      	ldrb	r3, [r3, #2]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	430b      	orrs	r3, r1
 8005488:	494c      	ldr	r1, [pc, #304]	; (80055bc <MX_LWIP_Init+0x26c>)
 800548a:	78c9      	ldrb	r1, [r1, #3]
 800548c:	430b      	orrs	r3, r1
 800548e:	0a1b      	lsrs	r3, r3, #8
 8005490:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005494:	431a      	orrs	r2, r3
 8005496:	4b49      	ldr	r3, [pc, #292]	; (80055bc <MX_LWIP_Init+0x26c>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	0619      	lsls	r1, r3, #24
 800549c:	4b47      	ldr	r3, [pc, #284]	; (80055bc <MX_LWIP_Init+0x26c>)
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	041b      	lsls	r3, r3, #16
 80054a2:	4319      	orrs	r1, r3
 80054a4:	4b45      	ldr	r3, [pc, #276]	; (80055bc <MX_LWIP_Init+0x26c>)
 80054a6:	789b      	ldrb	r3, [r3, #2]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	430b      	orrs	r3, r1
 80054ac:	4943      	ldr	r1, [pc, #268]	; (80055bc <MX_LWIP_Init+0x26c>)
 80054ae:	78c9      	ldrb	r1, [r1, #3]
 80054b0:	430b      	orrs	r3, r1
 80054b2:	0e1b      	lsrs	r3, r3, #24
 80054b4:	4313      	orrs	r3, r2
 80054b6:	4a44      	ldr	r2, [pc, #272]	; (80055c8 <MX_LWIP_Init+0x278>)
 80054b8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80054ba:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <MX_LWIP_Init+0x270>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	061a      	lsls	r2, r3, #24
 80054c0:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <MX_LWIP_Init+0x270>)
 80054c2:	785b      	ldrb	r3, [r3, #1]
 80054c4:	041b      	lsls	r3, r3, #16
 80054c6:	431a      	orrs	r2, r3
 80054c8:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <MX_LWIP_Init+0x270>)
 80054ca:	789b      	ldrb	r3, [r3, #2]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	4313      	orrs	r3, r2
 80054d0:	4a3b      	ldr	r2, [pc, #236]	; (80055c0 <MX_LWIP_Init+0x270>)
 80054d2:	78d2      	ldrb	r2, [r2, #3]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	061a      	lsls	r2, r3, #24
 80054d8:	4b39      	ldr	r3, [pc, #228]	; (80055c0 <MX_LWIP_Init+0x270>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	0619      	lsls	r1, r3, #24
 80054de:	4b38      	ldr	r3, [pc, #224]	; (80055c0 <MX_LWIP_Init+0x270>)
 80054e0:	785b      	ldrb	r3, [r3, #1]
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	4319      	orrs	r1, r3
 80054e6:	4b36      	ldr	r3, [pc, #216]	; (80055c0 <MX_LWIP_Init+0x270>)
 80054e8:	789b      	ldrb	r3, [r3, #2]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	430b      	orrs	r3, r1
 80054ee:	4934      	ldr	r1, [pc, #208]	; (80055c0 <MX_LWIP_Init+0x270>)
 80054f0:	78c9      	ldrb	r1, [r1, #3]
 80054f2:	430b      	orrs	r3, r1
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054fa:	431a      	orrs	r2, r3
 80054fc:	4b30      	ldr	r3, [pc, #192]	; (80055c0 <MX_LWIP_Init+0x270>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	0619      	lsls	r1, r3, #24
 8005502:	4b2f      	ldr	r3, [pc, #188]	; (80055c0 <MX_LWIP_Init+0x270>)
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	041b      	lsls	r3, r3, #16
 8005508:	4319      	orrs	r1, r3
 800550a:	4b2d      	ldr	r3, [pc, #180]	; (80055c0 <MX_LWIP_Init+0x270>)
 800550c:	789b      	ldrb	r3, [r3, #2]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	430b      	orrs	r3, r1
 8005512:	492b      	ldr	r1, [pc, #172]	; (80055c0 <MX_LWIP_Init+0x270>)
 8005514:	78c9      	ldrb	r1, [r1, #3]
 8005516:	430b      	orrs	r3, r1
 8005518:	0a1b      	lsrs	r3, r3, #8
 800551a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800551e:	431a      	orrs	r2, r3
 8005520:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <MX_LWIP_Init+0x270>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	0619      	lsls	r1, r3, #24
 8005526:	4b26      	ldr	r3, [pc, #152]	; (80055c0 <MX_LWIP_Init+0x270>)
 8005528:	785b      	ldrb	r3, [r3, #1]
 800552a:	041b      	lsls	r3, r3, #16
 800552c:	4319      	orrs	r1, r3
 800552e:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <MX_LWIP_Init+0x270>)
 8005530:	789b      	ldrb	r3, [r3, #2]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	430b      	orrs	r3, r1
 8005536:	4922      	ldr	r1, [pc, #136]	; (80055c0 <MX_LWIP_Init+0x270>)
 8005538:	78c9      	ldrb	r1, [r1, #3]
 800553a:	430b      	orrs	r3, r1
 800553c:	0e1b      	lsrs	r3, r3, #24
 800553e:	4313      	orrs	r3, r2
 8005540:	4a22      	ldr	r2, [pc, #136]	; (80055cc <MX_LWIP_Init+0x27c>)
 8005542:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005544:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <MX_LWIP_Init+0x280>)
 8005546:	9302      	str	r3, [sp, #8]
 8005548:	4b22      	ldr	r3, [pc, #136]	; (80055d4 <MX_LWIP_Init+0x284>)
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	2300      	movs	r3, #0
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	4b1e      	ldr	r3, [pc, #120]	; (80055cc <MX_LWIP_Init+0x27c>)
 8005552:	4a1d      	ldr	r2, [pc, #116]	; (80055c8 <MX_LWIP_Init+0x278>)
 8005554:	491b      	ldr	r1, [pc, #108]	; (80055c4 <MX_LWIP_Init+0x274>)
 8005556:	4820      	ldr	r0, [pc, #128]	; (80055d8 <MX_LWIP_Init+0x288>)
 8005558:	f005 fa30 	bl	800a9bc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800555c:	481e      	ldr	r0, [pc, #120]	; (80055d8 <MX_LWIP_Init+0x288>)
 800555e:	f005 fbdf 	bl	800ad20 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005562:	4b1d      	ldr	r3, [pc, #116]	; (80055d8 <MX_LWIP_Init+0x288>)
 8005564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005568:	089b      	lsrs	r3, r3, #2
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005574:	4818      	ldr	r0, [pc, #96]	; (80055d8 <MX_LWIP_Init+0x288>)
 8005576:	f005 fbe3 	bl	800ad40 <netif_set_up>
 800557a:	e002      	b.n	8005582 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800557c:	4816      	ldr	r0, [pc, #88]	; (80055d8 <MX_LWIP_Init+0x288>)
 800557e:	f005 fc4b 	bl	800ae18 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005582:	4916      	ldr	r1, [pc, #88]	; (80055dc <MX_LWIP_Init+0x28c>)
 8005584:	4814      	ldr	r0, [pc, #80]	; (80055d8 <MX_LWIP_Init+0x288>)
 8005586:	f005 fcdd 	bl	800af44 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800558a:	2224      	movs	r2, #36	; 0x24
 800558c:	2100      	movs	r1, #0
 800558e:	4814      	ldr	r0, [pc, #80]	; (80055e0 <MX_LWIP_Init+0x290>)
 8005590:	f012 fee4 	bl	801835c <memset>
  attributes.name = "EthLink";
 8005594:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <MX_LWIP_Init+0x290>)
 8005596:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <MX_LWIP_Init+0x294>)
 8005598:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800559a:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <MX_LWIP_Init+0x290>)
 800559c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055a0:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80055a2:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <MX_LWIP_Init+0x290>)
 80055a4:	2210      	movs	r2, #16
 80055a6:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80055a8:	4a0d      	ldr	r2, [pc, #52]	; (80055e0 <MX_LWIP_Init+0x290>)
 80055aa:	490b      	ldr	r1, [pc, #44]	; (80055d8 <MX_LWIP_Init+0x288>)
 80055ac:	480e      	ldr	r0, [pc, #56]	; (80055e8 <MX_LWIP_Init+0x298>)
 80055ae:	f000 fd3a 	bl	8006026 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80055b2:	bf00      	nop
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	2400bbe8 	.word	0x2400bbe8
 80055bc:	2400bbe4 	.word	0x2400bbe4
 80055c0:	2400bb84 	.word	0x2400bb84
 80055c4:	2400bbe0 	.word	0x2400bbe0
 80055c8:	2400bbec 	.word	0x2400bbec
 80055cc:	2400bbf0 	.word	0x2400bbf0
 80055d0:	08009d6d 	.word	0x08009d6d
 80055d4:	08005cad 	.word	0x08005cad
 80055d8:	2400bbac 	.word	0x2400bbac
 80055dc:	080055ed 	.word	0x080055ed
 80055e0:	2400bb88 	.word	0x2400bb88
 80055e4:	0801bb88 	.word	0x0801bb88
 80055e8:	08005dd5 	.word	0x08005dd5

080055ec <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08e      	sub	sp, #56	; 0x38
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	605a      	str	r2, [r3, #4]
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	60da      	str	r2, [r3, #12]
 8005616:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a5d      	ldr	r2, [pc, #372]	; (8005794 <HAL_ETH_MspInit+0x194>)
 800561e:	4293      	cmp	r3, r2
 8005620:	f040 80b3 	bne.w	800578a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005624:	4b5c      	ldr	r3, [pc, #368]	; (8005798 <HAL_ETH_MspInit+0x198>)
 8005626:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800562a:	4a5b      	ldr	r2, [pc, #364]	; (8005798 <HAL_ETH_MspInit+0x198>)
 800562c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005630:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005634:	4b58      	ldr	r3, [pc, #352]	; (8005798 <HAL_ETH_MspInit+0x198>)
 8005636:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800563a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800563e:	623b      	str	r3, [r7, #32]
 8005640:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8005642:	4b55      	ldr	r3, [pc, #340]	; (8005798 <HAL_ETH_MspInit+0x198>)
 8005644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005648:	4a53      	ldr	r2, [pc, #332]	; (8005798 <HAL_ETH_MspInit+0x198>)
 800564a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005652:	4b51      	ldr	r3, [pc, #324]	; (8005798 <HAL_ETH_MspInit+0x198>)
 8005654:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565c:	61fb      	str	r3, [r7, #28]
 800565e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8005660:	4b4d      	ldr	r3, [pc, #308]	; (8005798 <HAL_ETH_MspInit+0x198>)
 8005662:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005666:	4a4c      	ldr	r2, [pc, #304]	; (8005798 <HAL_ETH_MspInit+0x198>)
 8005668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800566c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005670:	4b49      	ldr	r3, [pc, #292]	; (8005798 <HAL_ETH_MspInit+0x198>)
 8005672:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800567e:	4b46      	ldr	r3, [pc, #280]	; (8005798 <HAL_ETH_MspInit+0x198>)
 8005680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005684:	4a44      	ldr	r2, [pc, #272]	; (8005798 <HAL_ETH_MspInit+0x198>)
 8005686:	f043 0304 	orr.w	r3, r3, #4
 800568a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800568e:	4b42      	ldr	r3, [pc, #264]	; (8005798 <HAL_ETH_MspInit+0x198>)
 8005690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800569c:	4b3e      	ldr	r3, [pc, #248]	; (8005798 <HAL_ETH_MspInit+0x198>)
 800569e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056a2:	4a3d      	ldr	r2, [pc, #244]	; (8005798 <HAL_ETH_MspInit+0x198>)
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056ac:	4b3a      	ldr	r3, [pc, #232]	; (8005798 <HAL_ETH_MspInit+0x198>)
 80056ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ba:	4b37      	ldr	r3, [pc, #220]	; (8005798 <HAL_ETH_MspInit+0x198>)
 80056bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056c0:	4a35      	ldr	r2, [pc, #212]	; (8005798 <HAL_ETH_MspInit+0x198>)
 80056c2:	f043 0302 	orr.w	r3, r3, #2
 80056c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056ca:	4b33      	ldr	r3, [pc, #204]	; (8005798 <HAL_ETH_MspInit+0x198>)
 80056cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80056d8:	4b2f      	ldr	r3, [pc, #188]	; (8005798 <HAL_ETH_MspInit+0x198>)
 80056da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056de:	4a2e      	ldr	r2, [pc, #184]	; (8005798 <HAL_ETH_MspInit+0x198>)
 80056e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056e8:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <HAL_ETH_MspInit+0x198>)
 80056ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	60bb      	str	r3, [r7, #8]
 80056f4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80056f6:	2332      	movs	r3, #50	; 0x32
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056fa:	2302      	movs	r3, #2
 80056fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005702:	2303      	movs	r3, #3
 8005704:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005706:	230b      	movs	r3, #11
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800570a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800570e:	4619      	mov	r1, r3
 8005710:	4822      	ldr	r0, [pc, #136]	; (800579c <HAL_ETH_MspInit+0x19c>)
 8005712:	f7fe f97f 	bl	8003a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005716:	2386      	movs	r3, #134	; 0x86
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571a:	2302      	movs	r3, #2
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800571e:	2300      	movs	r3, #0
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005722:	2303      	movs	r3, #3
 8005724:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005726:	230b      	movs	r3, #11
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800572a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800572e:	4619      	mov	r1, r3
 8005730:	481b      	ldr	r0, [pc, #108]	; (80057a0 <HAL_ETH_MspInit+0x1a0>)
 8005732:	f7fe f96f 	bl	8003a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800573c:	2302      	movs	r3, #2
 800573e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005740:	2300      	movs	r3, #0
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005744:	2303      	movs	r3, #3
 8005746:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005748:	230b      	movs	r3, #11
 800574a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800574c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005750:	4619      	mov	r1, r3
 8005752:	4814      	ldr	r0, [pc, #80]	; (80057a4 <HAL_ETH_MspInit+0x1a4>)
 8005754:	f7fe f95e 	bl	8003a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005758:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800575e:	2302      	movs	r3, #2
 8005760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005762:	2300      	movs	r3, #0
 8005764:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005766:	2303      	movs	r3, #3
 8005768:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800576a:	230b      	movs	r3, #11
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800576e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005772:	4619      	mov	r1, r3
 8005774:	480c      	ldr	r0, [pc, #48]	; (80057a8 <HAL_ETH_MspInit+0x1a8>)
 8005776:	f7fe f94d 	bl	8003a14 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800577a:	2200      	movs	r2, #0
 800577c:	2105      	movs	r1, #5
 800577e:	203d      	movs	r0, #61	; 0x3d
 8005780:	f7fc f9f8 	bl	8001b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005784:	203d      	movs	r0, #61	; 0x3d
 8005786:	f7fc fa0f 	bl	8001ba8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800578a:	bf00      	nop
 800578c:	3738      	adds	r7, #56	; 0x38
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40028000 	.word	0x40028000
 8005798:	58024400 	.word	0x58024400
 800579c:	58020800 	.word	0x58020800
 80057a0:	58020000 	.word	0x58020000
 80057a4:	58020400 	.word	0x58020400
 80057a8:	58021800 	.word	0x58021800

080057ac <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <HAL_ETH_RxCpltCallback+0x1c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fecb 	bl	8006554 <osSemaphoreRelease>
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	24000284 	.word	0x24000284

080057cc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b0ac      	sub	sp, #176	; 0xb0
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t idx = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80057e6:	4b8f      	ldr	r3, [pc, #572]	; (8005a24 <low_level_init+0x258>)
 80057e8:	4a8f      	ldr	r2, [pc, #572]	; (8005a28 <low_level_init+0x25c>)
 80057ea:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80057ec:	2300      	movs	r3, #0
 80057ee:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80057f0:	2380      	movs	r3, #128	; 0x80
 80057f2:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80057f4:	23e1      	movs	r3, #225	; 0xe1
 80057f6:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80057f8:	2300      	movs	r3, #0
 80057fa:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80057fc:	2300      	movs	r3, #0
 80057fe:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8005800:	2300      	movs	r3, #0
 8005802:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8005804:	4a87      	ldr	r2, [pc, #540]	; (8005a24 <low_level_init+0x258>)
 8005806:	f107 030c 	add.w	r3, r7, #12
 800580a:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800580c:	4b85      	ldr	r3, [pc, #532]	; (8005a24 <low_level_init+0x258>)
 800580e:	2201      	movs	r2, #1
 8005810:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005812:	4b84      	ldr	r3, [pc, #528]	; (8005a24 <low_level_init+0x258>)
 8005814:	4a85      	ldr	r2, [pc, #532]	; (8005a2c <low_level_init+0x260>)
 8005816:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005818:	4b82      	ldr	r3, [pc, #520]	; (8005a24 <low_level_init+0x258>)
 800581a:	4a85      	ldr	r2, [pc, #532]	; (8005a30 <low_level_init+0x264>)
 800581c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800581e:	4b81      	ldr	r3, [pc, #516]	; (8005a24 <low_level_init+0x258>)
 8005820:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005824:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005826:	487f      	ldr	r0, [pc, #508]	; (8005a24 <low_level_init+0x258>)
 8005828:	f7fc fa48 	bl	8001cbc <HAL_ETH_Init>
 800582c:	4603      	mov	r3, r0
 800582e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005832:	2234      	movs	r2, #52	; 0x34
 8005834:	2100      	movs	r1, #0
 8005836:	487f      	ldr	r0, [pc, #508]	; (8005a34 <low_level_init+0x268>)
 8005838:	f012 fd90 	bl	801835c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800583c:	4b7d      	ldr	r3, [pc, #500]	; (8005a34 <low_level_init+0x268>)
 800583e:	2221      	movs	r2, #33	; 0x21
 8005840:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005842:	4b7c      	ldr	r3, [pc, #496]	; (8005a34 <low_level_init+0x268>)
 8005844:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005848:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800584a:	4b7a      	ldr	r3, [pc, #488]	; (8005a34 <low_level_init+0x268>)
 800584c:	2200      	movs	r2, #0
 800584e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005850:	4879      	ldr	r0, [pc, #484]	; (8005a38 <low_level_init+0x26c>)
 8005852:	f004 ff6d 	bl	800a730 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2206      	movs	r2, #6
 800585a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800585e:	4b71      	ldr	r3, [pc, #452]	; (8005a24 <low_level_init+0x258>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	781a      	ldrb	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800586a:	4b6e      	ldr	r3, [pc, #440]	; (8005a24 <low_level_init+0x258>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	785a      	ldrb	r2, [r3, #1]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005876:	4b6b      	ldr	r3, [pc, #428]	; (8005a24 <low_level_init+0x258>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	789a      	ldrb	r2, [r3, #2]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005882:	4b68      	ldr	r3, [pc, #416]	; (8005a24 <low_level_init+0x258>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	78da      	ldrb	r2, [r3, #3]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800588e:	4b65      	ldr	r3, [pc, #404]	; (8005a24 <low_level_init+0x258>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	791a      	ldrb	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800589a:	4b62      	ldr	r3, [pc, #392]	; (8005a24 <low_level_init+0x258>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	795a      	ldrb	r2, [r3, #5]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80058ac:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058b4:	f043 030a 	orr.w	r3, r3, #10
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80058c0:	2300      	movs	r3, #0
 80058c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058c6:	e012      	b.n	80058ee <low_level_init+0x122>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80058c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80058d0:	fb02 f303 	mul.w	r3, r2, r3
 80058d4:	4a59      	ldr	r2, [pc, #356]	; (8005a3c <low_level_init+0x270>)
 80058d6:	441a      	add	r2, r3
 80058d8:	2300      	movs	r3, #0
 80058da:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80058de:	4851      	ldr	r0, [pc, #324]	; (8005a24 <low_level_init+0x258>)
 80058e0:	f7fc fac6 	bl	8001e70 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80058e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058e8:	3301      	adds	r3, #1
 80058ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d9e8      	bls.n	80058c8 <low_level_init+0xfc>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80058f6:	2200      	movs	r2, #0
 80058f8:	2101      	movs	r1, #1
 80058fa:	2001      	movs	r0, #1
 80058fc:	f000 fd4f 	bl	800639e <osSemaphoreNew>
 8005900:	4603      	mov	r3, r0
 8005902:	4a4f      	ldr	r2, [pc, #316]	; (8005a40 <low_level_init+0x274>)
 8005904:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005906:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800590a:	2224      	movs	r2, #36	; 0x24
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f012 fd24 	bl	801835c <memset>
  attributes.name = "EthIf";
 8005914:	4b4b      	ldr	r3, [pc, #300]	; (8005a44 <low_level_init+0x278>)
 8005916:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005918:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800591c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityRealtime;
 8005920:	2330      	movs	r3, #48	; 0x30
 8005922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 8005926:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800592a:	461a      	mov	r2, r3
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4846      	ldr	r0, [pc, #280]	; (8005a48 <low_level_init+0x27c>)
 8005930:	f000 fb79 	bl	8006026 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005934:	4945      	ldr	r1, [pc, #276]	; (8005a4c <low_level_init+0x280>)
 8005936:	4846      	ldr	r0, [pc, #280]	; (8005a50 <low_level_init+0x284>)
 8005938:	f7fb fe86 	bl	8001648 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800593c:	4844      	ldr	r0, [pc, #272]	; (8005a50 <low_level_init+0x284>)
 800593e:	f7fb feb5 	bl	80016ac <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005942:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d165      	bne.n	8005a16 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800594a:	4841      	ldr	r0, [pc, #260]	; (8005a50 <low_level_init+0x284>)
 800594c:	f7fb ff56 	bl	80017fc <LAN8742_GetLinkState>
 8005950:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005958:	2b01      	cmp	r3, #1
 800595a:	dc06      	bgt.n	800596a <low_level_init+0x19e>
    {
      netif_set_link_down(netif);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f005 fac1 	bl	800aee4 <netif_set_link_down>
      netif_set_down(netif);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f005 fa58 	bl	800ae18 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005968:	e057      	b.n	8005a1a <low_level_init+0x24e>
 800596a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800596e:	3b02      	subs	r3, #2
 8005970:	2b03      	cmp	r3, #3
 8005972:	d82b      	bhi.n	80059cc <low_level_init+0x200>
 8005974:	a201      	add	r2, pc, #4	; (adr r2, 800597c <low_level_init+0x1b0>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	0800598d 	.word	0x0800598d
 8005980:	0800599f 	.word	0x0800599f
 8005984:	080059af 	.word	0x080059af
 8005988:	080059bf 	.word	0x080059bf
        duplex = ETH_FULLDUPLEX_MODE;
 800598c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8005994:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800599c:	e01f      	b.n	80059de <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800599e:	2300      	movs	r3, #0
 80059a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80059a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80059ac:	e017      	b.n	80059de <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 80059ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80059bc:	e00f      	b.n	80059de <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 80059be:	2300      	movs	r3, #0
 80059c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80059c4:	2300      	movs	r3, #0
 80059c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80059ca:	e008      	b.n	80059de <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 80059cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80059d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80059dc:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80059de:	f107 0314 	add.w	r3, r7, #20
 80059e2:	4619      	mov	r1, r3
 80059e4:	480f      	ldr	r0, [pc, #60]	; (8005a24 <low_level_init+0x258>)
 80059e6:	f7fd f815 	bl	8002a14 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80059ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    MACConf.Speed = speed;
 80059f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80059f6:	f107 0314 	add.w	r3, r7, #20
 80059fa:	4619      	mov	r1, r3
 80059fc:	4809      	ldr	r0, [pc, #36]	; (8005a24 <low_level_init+0x258>)
 80059fe:	f7fd f9dd 	bl	8002dbc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005a02:	4808      	ldr	r0, [pc, #32]	; (8005a24 <low_level_init+0x258>)
 8005a04:	f7fc fa75 	bl	8001ef2 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f005 f999 	bl	800ad40 <netif_set_up>
    netif_set_link_up(netif);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f005 fa34 	bl	800ae7c <netif_set_link_up>
}
 8005a14:	e001      	b.n	8005a1a <low_level_init+0x24e>
    Error_Handler();
 8005a16:	f7fb f993 	bl	8000d40 <Error_Handler>
}
 8005a1a:	bf00      	nop
 8005a1c:	37b0      	adds	r7, #176	; 0xb0
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	2400bce0 	.word	0x2400bce0
 8005a28:	40028000 	.word	0x40028000
 8005a2c:	30040060 	.word	0x30040060
 8005a30:	30040000 	.word	0x30040000
 8005a34:	2400bd68 	.word	0x2400bd68
 8005a38:	0801eb08 	.word	0x0801eb08
 8005a3c:	30040200 	.word	0x30040200
 8005a40:	24000284 	.word	0x24000284
 8005a44:	0801bb90 	.word	0x0801bb90
 8005a48:	08005c5d 	.word	0x08005c5d
 8005a4c:	24000010 	.word	0x24000010
 8005a50:	2400bcc0 	.word	0x2400bcc0

08005a54 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b092      	sub	sp, #72	; 0x48
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005a68:	f107 030c 	add.w	r3, r7, #12
 8005a6c:	2230      	movs	r2, #48	; 0x30
 8005a6e:	2100      	movs	r1, #0
 8005a70:	4618      	mov	r0, r3
 8005a72:	f012 fc73 	bl	801835c <memset>

  for(q = p; q != NULL; q = q->next)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	643b      	str	r3, [r7, #64]	; 0x40
 8005a7a:	e049      	b.n	8005b10 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d902      	bls.n	8005a88 <low_level_output+0x34>
      return ERR_IF;
 8005a82:	f06f 030b 	mvn.w	r3, #11
 8005a86:	e056      	b.n	8005b36 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8005a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a8a:	6859      	ldr	r1, [r3, #4]
 8005a8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a8e:	4613      	mov	r3, r2
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005a9a:	4413      	add	r3, r2
 8005a9c:	3b3c      	subs	r3, #60	; 0x3c
 8005a9e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa2:	895b      	ldrh	r3, [r3, #10]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	4413      	add	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005ab4:	4413      	add	r3, r2
 8005ab6:	3b38      	subs	r3, #56	; 0x38
 8005ab8:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d012      	beq.n	8005ae6 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ac2:	1e5a      	subs	r2, r3, #1
 8005ac4:	f107 000c 	add.w	r0, r7, #12
 8005ac8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aca:	460b      	mov	r3, r1
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	440b      	add	r3, r1
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	18c1      	adds	r1, r0, r3
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3b34      	subs	r3, #52	; 0x34
 8005ae4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8005aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005af0:	4613      	mov	r3, r2
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005afc:	4413      	add	r3, r2
 8005afe:	3b34      	subs	r3, #52	; 0x34
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b06:	3301      	adds	r3, #1
 8005b08:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8005b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1b2      	bne.n	8005a7c <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	891b      	ldrh	r3, [r3, #8]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	4b08      	ldr	r3, [pc, #32]	; (8005b40 <low_level_output+0xec>)
 8005b1e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005b20:	4a07      	ldr	r2, [pc, #28]	; (8005b40 <low_level_output+0xec>)
 8005b22:	f107 030c 	add.w	r3, r7, #12
 8005b26:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005b28:	2214      	movs	r2, #20
 8005b2a:	4905      	ldr	r1, [pc, #20]	; (8005b40 <low_level_output+0xec>)
 8005b2c:	4805      	ldr	r0, [pc, #20]	; (8005b44 <low_level_output+0xf0>)
 8005b2e:	f7fc fadf 	bl	80020f0 <HAL_ETH_Transmit>

  return errval;
 8005b32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3748      	adds	r7, #72	; 0x48
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	2400bd68 	.word	0x2400bd68
 8005b44:	2400bce0 	.word	0x2400bce0

08005b48 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b098      	sub	sp, #96	; 0x60
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005b50:	2300      	movs	r3, #0
 8005b52:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60bb      	str	r3, [r7, #8]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005b5c:	f107 030c 	add.w	r3, r7, #12
 8005b60:	2230      	movs	r2, #48	; 0x30
 8005b62:	2100      	movs	r1, #0
 8005b64:	4618      	mov	r0, r3
 8005b66:	f012 fbf9 	bl	801835c <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b6e:	e015      	b.n	8005b9c <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8005b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	f107 010c 	add.w	r1, r7, #12
 8005b78:	4613      	mov	r3, r2
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4419      	add	r1, r3
 8005b82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b84:	4613      	mov	r3, r2
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005b90:	4413      	add	r3, r2
 8005b92:	3b44      	subs	r3, #68	; 0x44
 8005b94:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8005b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b98:	3301      	adds	r3, #1
 8005b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d9e6      	bls.n	8005b70 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8005ba2:	f107 030c 	add.w	r3, r7, #12
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4828      	ldr	r0, [pc, #160]	; (8005c4c <low_level_input+0x104>)
 8005baa:	f7fc fc1a 	bl	80023e2 <HAL_ETH_GetRxDataBuffer>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d145      	bne.n	8005c40 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8005bb4:	f107 0308 	add.w	r3, r7, #8
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4824      	ldr	r0, [pc, #144]	; (8005c4c <low_level_input+0x104>)
 8005bbc:	f7fc fcaf 	bl	800251e <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8005bc0:	4822      	ldr	r0, [pc, #136]	; (8005c4c <low_level_input+0x104>)
 8005bc2:	f7fc fcdf 	bl	8002584 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bcc:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8005bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	dd1d      	ble.n	8005c10 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd6:	f003 021f 	and.w	r2, r3, #31
 8005bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bdc:	4413      	add	r3, r2
 8005bde:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8005be4:	f3bf 8f4f 	dsb	sy
}
 8005be8:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005bea:	4a19      	ldr	r2, [pc, #100]	; (8005c50 <low_level_input+0x108>)
 8005bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bee:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf4:	3320      	adds	r3, #32
 8005bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfa:	3b20      	subs	r3, #32
 8005bfc:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8005bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	dcf2      	bgt.n	8005bea <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 8005c04:	f3bf 8f4f 	dsb	sy
}
 8005c08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c0a:	f3bf 8f6f 	isb	sy
}
 8005c0e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005c10:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005c12:	4810      	ldr	r0, [pc, #64]	; (8005c54 <low_level_input+0x10c>)
 8005c14:	f004 fe08 	bl	800a828 <memp_malloc_pool>
 8005c18:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 8005c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00f      	beq.n	8005c40 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8005c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c22:	4a0d      	ldr	r2, [pc, #52]	; (8005c58 <low_level_input+0x110>)
 8005c24:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	b299      	uxth	r1, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	b292      	uxth	r2, r2
 8005c30:	9201      	str	r2, [sp, #4]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c36:	2241      	movs	r2, #65	; 0x41
 8005c38:	2000      	movs	r0, #0
 8005c3a:	f005 fb77 	bl	800b32c <pbuf_alloced_custom>
 8005c3e:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 8005c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3758      	adds	r7, #88	; 0x58
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	2400bce0 	.word	0x2400bce0
 8005c50:	e000ed00 	.word	0xe000ed00
 8005c54:	0801eb08 	.word	0x0801eb08
 8005c58:	08005d09 	.word	0x08005d09

08005c5c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005c68:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <ethernetif_input+0x4c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fc1d 	bl	80064b0 <osSemaphoreAcquire>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1f5      	bne.n	8005c68 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff ff63 	bl	8005b48 <low_level_input>
 8005c82:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	68b8      	ldr	r0, [r7, #8]
 8005c92:	4798      	blx	r3
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8005c9a:	68b8      	ldr	r0, [r7, #8]
 8005c9c:	f005 fd00 	bl	800b6a0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1ea      	bne.n	8005c7c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005ca6:	e7df      	b.n	8005c68 <ethernetif_input+0xc>
 8005ca8:	24000284 	.word	0x24000284

08005cac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <ethernetif_init+0x1c>
 8005cba:	4b0e      	ldr	r3, [pc, #56]	; (8005cf4 <ethernetif_init+0x48>)
 8005cbc:	f240 224d 	movw	r2, #589	; 0x24d
 8005cc0:	490d      	ldr	r1, [pc, #52]	; (8005cf8 <ethernetif_init+0x4c>)
 8005cc2:	480e      	ldr	r0, [pc, #56]	; (8005cfc <ethernetif_init+0x50>)
 8005cc4:	f012 fbfc 	bl	80184c0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2273      	movs	r2, #115	; 0x73
 8005ccc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2274      	movs	r2, #116	; 0x74
 8005cd4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <ethernetif_init+0x54>)
 8005cdc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a08      	ldr	r2, [pc, #32]	; (8005d04 <ethernetif_init+0x58>)
 8005ce2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff fd71 	bl	80057cc <low_level_init>

  return ERR_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	0801bb98 	.word	0x0801bb98
 8005cf8:	0801bbb4 	.word	0x0801bbb4
 8005cfc:	0801bbc4 	.word	0x0801bbc4
 8005d00:	080127f1 	.word	0x080127f1
 8005d04:	08005a55 	.word	0x08005a55

08005d08 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005d14:	68f9      	ldr	r1, [r7, #12]
 8005d16:	4803      	ldr	r0, [pc, #12]	; (8005d24 <pbuf_free_custom+0x1c>)
 8005d18:	f004 fdfa 	bl	800a910 <memp_free_pool>
}
 8005d1c:	bf00      	nop
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	0801eb08 	.word	0x0801eb08

08005d28 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005d2c:	f7fb fe3e 	bl	80019ac <HAL_GetTick>
 8005d30:	4603      	mov	r3, r0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005d3c:	4802      	ldr	r0, [pc, #8]	; (8005d48 <ETH_PHY_IO_Init+0x10>)
 8005d3e:	f7fd f857 	bl	8002df0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	2400bce0 	.word	0x2400bce0

08005d4c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  return 0;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	68f9      	ldr	r1, [r7, #12]
 8005d6e:	4807      	ldr	r0, [pc, #28]	; (8005d8c <ETH_PHY_IO_ReadReg+0x30>)
 8005d70:	f7fc fda8 	bl	80028c4 <HAL_ETH_ReadPHYRegister>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d7e:	e000      	b.n	8005d82 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	2400bce0 	.word	0x2400bce0

08005d90 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	68f9      	ldr	r1, [r7, #12]
 8005da2:	4807      	ldr	r0, [pc, #28]	; (8005dc0 <ETH_PHY_IO_WriteReg+0x30>)
 8005da4:	f7fc fde2 	bl	800296c <HAL_ETH_WritePHYRegister>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005db2:	e000      	b.n	8005db6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	2400bce0 	.word	0x2400bce0

08005dc4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005dc8:	f7fb fdf0 	bl	80019ac <HAL_GetTick>
 8005dcc:	4603      	mov	r3, r0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b0a0      	sub	sp, #128	; 0x80
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005de0:	2300      	movs	r3, #0
 8005de2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005de4:	2300      	movs	r3, #0
 8005de6:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005dec:	483a      	ldr	r0, [pc, #232]	; (8005ed8 <ethernet_link_thread+0x104>)
 8005dee:	f7fb fd05 	bl	80017fc <LAN8742_GetLinkState>
 8005df2:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005df6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005dfa:	089b      	lsrs	r3, r3, #2
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00c      	beq.n	8005e20 <ethernet_link_thread+0x4c>
 8005e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	dc09      	bgt.n	8005e20 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 8005e0c:	4833      	ldr	r0, [pc, #204]	; (8005edc <ethernet_link_thread+0x108>)
 8005e0e:	f7fc f8f5 	bl	8001ffc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005e12:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005e14:	f005 f800 	bl	800ae18 <netif_set_down>
    netif_set_link_down(netif);
 8005e18:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005e1a:	f005 f863 	bl	800aee4 <netif_set_link_down>
 8005e1e:	e056      	b.n	8005ece <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005e20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d14f      	bne.n	8005ece <ethernet_link_thread+0xfa>
 8005e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	dd4c      	ble.n	8005ece <ethernet_link_thread+0xfa>
 8005e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e36:	3b02      	subs	r3, #2
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d82b      	bhi.n	8005e94 <ethernet_link_thread+0xc0>
 8005e3c:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <ethernet_link_thread+0x70>)
 8005e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e42:	bf00      	nop
 8005e44:	08005e55 	.word	0x08005e55
 8005e48:	08005e67 	.word	0x08005e67
 8005e4c:	08005e77 	.word	0x08005e77
 8005e50:	08005e87 	.word	0x08005e87
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e58:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005e5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e5e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005e60:	2301      	movs	r3, #1
 8005e62:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005e64:	e017      	b.n	8005e96 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005e6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e6e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005e70:	2301      	movs	r3, #1
 8005e72:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005e74:	e00f      	b.n	8005e96 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005e76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e7a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005e80:	2301      	movs	r3, #1
 8005e82:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005e84:	e007      	b.n	8005e96 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005e92:	e000      	b.n	8005e96 <ethernet_link_thread+0xc2>
    default:
      break;
 8005e94:	bf00      	nop
    }

    if(linkchanged)
 8005e96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d018      	beq.n	8005ece <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005e9c:	f107 0308 	add.w	r3, r7, #8
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	480e      	ldr	r0, [pc, #56]	; (8005edc <ethernet_link_thread+0x108>)
 8005ea4:	f7fc fdb6 	bl	8002a14 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eaa:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eae:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005eb0:	f107 0308 	add.w	r3, r7, #8
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4809      	ldr	r0, [pc, #36]	; (8005edc <ethernet_link_thread+0x108>)
 8005eb8:	f7fc ff80 	bl	8002dbc <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8005ebc:	4807      	ldr	r0, [pc, #28]	; (8005edc <ethernet_link_thread+0x108>)
 8005ebe:	f7fc f818 	bl	8001ef2 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005ec2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005ec4:	f004 ff3c 	bl	800ad40 <netif_set_up>
      netif_set_link_up(netif);
 8005ec8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005eca:	f004 ffd7 	bl	800ae7c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005ece:	2064      	movs	r0, #100	; 0x64
 8005ed0:	f000 f93c 	bl	800614c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005ed4:	e78a      	b.n	8005dec <ethernet_link_thread+0x18>
 8005ed6:	bf00      	nop
 8005ed8:	2400bcc0 	.word	0x2400bcc0
 8005edc:	2400bce0 	.word	0x2400bce0

08005ee0 <__NVIC_SetPriority>:
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	6039      	str	r1, [r7, #0]
 8005eea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	db0a      	blt.n	8005f0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	490c      	ldr	r1, [pc, #48]	; (8005f2c <__NVIC_SetPriority+0x4c>)
 8005efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005efe:	0112      	lsls	r2, r2, #4
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	440b      	add	r3, r1
 8005f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f08:	e00a      	b.n	8005f20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	4908      	ldr	r1, [pc, #32]	; (8005f30 <__NVIC_SetPriority+0x50>)
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	3b04      	subs	r3, #4
 8005f18:	0112      	lsls	r2, r2, #4
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	761a      	strb	r2, [r3, #24]
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	e000e100 	.word	0xe000e100
 8005f30:	e000ed00 	.word	0xe000ed00

08005f34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005f38:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <SysTick_Handler+0x1c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005f3c:	f002 fc9a 	bl	8008874 <xTaskGetSchedulerState>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d001      	beq.n	8005f4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005f46:	f003 fb7f 	bl	8009648 <xPortSysTickHandler>
  }
}
 8005f4a:	bf00      	nop
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	e000e010 	.word	0xe000e010

08005f54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f58:	2100      	movs	r1, #0
 8005f5a:	f06f 0004 	mvn.w	r0, #4
 8005f5e:	f7ff ffbf 	bl	8005ee0 <__NVIC_SetPriority>
#endif
}
 8005f62:	bf00      	nop
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f6e:	f3ef 8305 	mrs	r3, IPSR
 8005f72:	603b      	str	r3, [r7, #0]
  return(result);
 8005f74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f7a:	f06f 0305 	mvn.w	r3, #5
 8005f7e:	607b      	str	r3, [r7, #4]
 8005f80:	e00c      	b.n	8005f9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f82:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <osKernelInitialize+0x44>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d105      	bne.n	8005f96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f8a:	4b08      	ldr	r3, [pc, #32]	; (8005fac <osKernelInitialize+0x44>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	607b      	str	r3, [r7, #4]
 8005f94:	e002      	b.n	8005f9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f9c:	687b      	ldr	r3, [r7, #4]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	2400028c 	.word	0x2400028c

08005fb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fb6:	f3ef 8305 	mrs	r3, IPSR
 8005fba:	603b      	str	r3, [r7, #0]
  return(result);
 8005fbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <osKernelStart+0x1a>
    stat = osErrorISR;
 8005fc2:	f06f 0305 	mvn.w	r3, #5
 8005fc6:	607b      	str	r3, [r7, #4]
 8005fc8:	e010      	b.n	8005fec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005fca:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <osKernelStart+0x48>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d109      	bne.n	8005fe6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005fd2:	f7ff ffbf 	bl	8005f54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005fd6:	4b08      	ldr	r3, [pc, #32]	; (8005ff8 <osKernelStart+0x48>)
 8005fd8:	2202      	movs	r2, #2
 8005fda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005fdc:	f001 ffcc 	bl	8007f78 <vTaskStartScheduler>
      stat = osOK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	607b      	str	r3, [r7, #4]
 8005fe4:	e002      	b.n	8005fec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005fec:	687b      	ldr	r3, [r7, #4]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	2400028c 	.word	0x2400028c

08005ffc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006002:	f3ef 8305 	mrs	r3, IPSR
 8006006:	603b      	str	r3, [r7, #0]
  return(result);
 8006008:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800600e:	f002 f8df 	bl	80081d0 <xTaskGetTickCountFromISR>
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	e002      	b.n	800601c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8006016:	f002 f8cb 	bl	80081b0 <xTaskGetTickCount>
 800601a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800601c:	687b      	ldr	r3, [r7, #4]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006026:	b580      	push	{r7, lr}
 8006028:	b08e      	sub	sp, #56	; 0x38
 800602a:	af04      	add	r7, sp, #16
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006036:	f3ef 8305 	mrs	r3, IPSR
 800603a:	617b      	str	r3, [r7, #20]
  return(result);
 800603c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800603e:	2b00      	cmp	r3, #0
 8006040:	d17f      	bne.n	8006142 <osThreadNew+0x11c>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d07c      	beq.n	8006142 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8006048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800604c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800604e:	2318      	movs	r3, #24
 8006050:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006052:	2300      	movs	r3, #0
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800605a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d045      	beq.n	80060ee <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <osThreadNew+0x4a>
        name = attr->name;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d008      	beq.n	8006096 <osThreadNew+0x70>
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	2b38      	cmp	r3, #56	; 0x38
 8006088:	d805      	bhi.n	8006096 <osThreadNew+0x70>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <osThreadNew+0x74>
        return (NULL);
 8006096:	2300      	movs	r3, #0
 8006098:	e054      	b.n	8006144 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	089b      	lsrs	r3, r3, #2
 80060a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00e      	beq.n	80060d0 <osThreadNew+0xaa>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	2bbf      	cmp	r3, #191	; 0xbf
 80060b8:	d90a      	bls.n	80060d0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d006      	beq.n	80060d0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <osThreadNew+0xaa>
        mem = 1;
 80060ca:	2301      	movs	r3, #1
 80060cc:	61bb      	str	r3, [r7, #24]
 80060ce:	e010      	b.n	80060f2 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10c      	bne.n	80060f2 <osThreadNew+0xcc>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d108      	bne.n	80060f2 <osThreadNew+0xcc>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <osThreadNew+0xcc>
          mem = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
 80060ec:	e001      	b.n	80060f2 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d110      	bne.n	800611a <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006100:	9202      	str	r2, [sp, #8]
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6a3a      	ldr	r2, [r7, #32]
 800610c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f001 fd42 	bl	8007b98 <xTaskCreateStatic>
 8006114:	4603      	mov	r3, r0
 8006116:	613b      	str	r3, [r7, #16]
 8006118:	e013      	b.n	8006142 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d110      	bne.n	8006142 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	b29a      	uxth	r2, r3
 8006124:	f107 0310 	add.w	r3, r7, #16
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f001 fd8d 	bl	8007c52 <xTaskCreate>
 8006138:	4603      	mov	r3, r0
 800613a:	2b01      	cmp	r3, #1
 800613c:	d001      	beq.n	8006142 <osThreadNew+0x11c>
            hTask = NULL;
 800613e:	2300      	movs	r3, #0
 8006140:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006142:	693b      	ldr	r3, [r7, #16]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3728      	adds	r7, #40	; 0x28
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006154:	f3ef 8305 	mrs	r3, IPSR
 8006158:	60bb      	str	r3, [r7, #8]
  return(result);
 800615a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <osDelay+0x1c>
    stat = osErrorISR;
 8006160:	f06f 0305 	mvn.w	r3, #5
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	e007      	b.n	8006178 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 fecc 	bl	8007f10 <vTaskDelay>
    }
  }

  return (stat);
 8006178:	68fb      	ldr	r3, [r7, #12]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006182:	b580      	push	{r7, lr}
 8006184:	b088      	sub	sp, #32
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800618a:	2300      	movs	r3, #0
 800618c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800618e:	f3ef 8305 	mrs	r3, IPSR
 8006192:	60bb      	str	r3, [r7, #8]
  return(result);
 8006194:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006196:	2b00      	cmp	r3, #0
 8006198:	d174      	bne.n	8006284 <osMutexNew+0x102>
    if (attr != NULL) {
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <osMutexNew+0x26>
      type = attr->attr_bits;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e001      	b.n	80061ac <osMutexNew+0x2a>
    } else {
      type = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <osMutexNew+0x3a>
      rmtx = 1U;
 80061b6:	2301      	movs	r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	e001      	b.n	80061c0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d15c      	bne.n	8006284 <osMutexNew+0x102>
      mem = -1;
 80061ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ce:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d015      	beq.n	8006202 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d006      	beq.n	80061ec <osMutexNew+0x6a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2b4f      	cmp	r3, #79	; 0x4f
 80061e4:	d902      	bls.n	80061ec <osMutexNew+0x6a>
          mem = 1;
 80061e6:	2301      	movs	r3, #1
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	e00c      	b.n	8006206 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d108      	bne.n	8006206 <osMutexNew+0x84>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d104      	bne.n	8006206 <osMutexNew+0x84>
            mem = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	e001      	b.n	8006206 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d112      	bne.n	8006232 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d007      	beq.n	8006222 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	4619      	mov	r1, r3
 8006218:	2004      	movs	r0, #4
 800621a:	f000 fd68 	bl	8006cee <xQueueCreateMutexStatic>
 800621e:	61f8      	str	r0, [r7, #28]
 8006220:	e016      	b.n	8006250 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	4619      	mov	r1, r3
 8006228:	2001      	movs	r0, #1
 800622a:	f000 fd60 	bl	8006cee <xQueueCreateMutexStatic>
 800622e:	61f8      	str	r0, [r7, #28]
 8006230:	e00e      	b.n	8006250 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10b      	bne.n	8006250 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800623e:	2004      	movs	r0, #4
 8006240:	f000 fd3d 	bl	8006cbe <xQueueCreateMutex>
 8006244:	61f8      	str	r0, [r7, #28]
 8006246:	e003      	b.n	8006250 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006248:	2001      	movs	r0, #1
 800624a:	f000 fd38 	bl	8006cbe <xQueueCreateMutex>
 800624e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00c      	beq.n	8006270 <osMutexNew+0xee>
        if (attr != NULL) {
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <osMutexNew+0xe2>
          name = attr->name;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e001      	b.n	8006268 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006268:	68f9      	ldr	r1, [r7, #12]
 800626a:	69f8      	ldr	r0, [r7, #28]
 800626c:	f001 fc0c 	bl	8007a88 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d006      	beq.n	8006284 <osMutexNew+0x102>
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006284:	69fb      	ldr	r3, [r7, #28]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3720      	adds	r7, #32
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800628e:	b580      	push	{r7, lr}
 8006290:	b086      	sub	sp, #24
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f023 0301 	bic.w	r3, r3, #1
 800629e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062ac:	f3ef 8305 	mrs	r3, IPSR
 80062b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80062b2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80062b8:	f06f 0305 	mvn.w	r3, #5
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	e02c      	b.n	800631a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d103      	bne.n	80062ce <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80062c6:	f06f 0303 	mvn.w	r3, #3
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	e025      	b.n	800631a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d011      	beq.n	80062f8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6938      	ldr	r0, [r7, #16]
 80062d8:	f000 fd58 	bl	8006d8c <xQueueTakeMutexRecursive>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d01b      	beq.n	800631a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80062e8:	f06f 0301 	mvn.w	r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e014      	b.n	800631a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80062f0:	f06f 0302 	mvn.w	r3, #2
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	e010      	b.n	800631a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6938      	ldr	r0, [r7, #16]
 80062fc:	f001 f8ec 	bl	80074d8 <xQueueSemaphoreTake>
 8006300:	4603      	mov	r3, r0
 8006302:	2b01      	cmp	r3, #1
 8006304:	d009      	beq.n	800631a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800630c:	f06f 0301 	mvn.w	r3, #1
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	e002      	b.n	800631a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006314:	f06f 0302 	mvn.w	r3, #2
 8006318:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800631a:	697b      	ldr	r3, [r7, #20]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f023 0301 	bic.w	r3, r3, #1
 8006332:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800633c:	2300      	movs	r3, #0
 800633e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006340:	f3ef 8305 	mrs	r3, IPSR
 8006344:	60bb      	str	r3, [r7, #8]
  return(result);
 8006346:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <osMutexRelease+0x30>
    stat = osErrorISR;
 800634c:	f06f 0305 	mvn.w	r3, #5
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	e01f      	b.n	8006394 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d103      	bne.n	8006362 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800635a:	f06f 0303 	mvn.w	r3, #3
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e018      	b.n	8006394 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006368:	6938      	ldr	r0, [r7, #16]
 800636a:	f000 fcdb 	bl	8006d24 <xQueueGiveMutexRecursive>
 800636e:	4603      	mov	r3, r0
 8006370:	2b01      	cmp	r3, #1
 8006372:	d00f      	beq.n	8006394 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006374:	f06f 0302 	mvn.w	r3, #2
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e00b      	b.n	8006394 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800637c:	2300      	movs	r3, #0
 800637e:	2200      	movs	r2, #0
 8006380:	2100      	movs	r1, #0
 8006382:	6938      	ldr	r0, [r7, #16]
 8006384:	f000 fda2 	bl	8006ecc <xQueueGenericSend>
 8006388:	4603      	mov	r3, r0
 800638a:	2b01      	cmp	r3, #1
 800638c:	d002      	beq.n	8006394 <osMutexRelease+0x70>
        stat = osErrorResource;
 800638e:	f06f 0302 	mvn.w	r3, #2
 8006392:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006394:	697b      	ldr	r3, [r7, #20]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800639e:	b580      	push	{r7, lr}
 80063a0:	b08a      	sub	sp, #40	; 0x28
 80063a2:	af02      	add	r7, sp, #8
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ae:	f3ef 8305 	mrs	r3, IPSR
 80063b2:	613b      	str	r3, [r7, #16]
  return(result);
 80063b4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d175      	bne.n	80064a6 <osSemaphoreNew+0x108>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d072      	beq.n	80064a6 <osSemaphoreNew+0x108>
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d86e      	bhi.n	80064a6 <osSemaphoreNew+0x108>
    mem = -1;
 80063c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d015      	beq.n	8006400 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d006      	beq.n	80063ea <osSemaphoreNew+0x4c>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b4f      	cmp	r3, #79	; 0x4f
 80063e2:	d902      	bls.n	80063ea <osSemaphoreNew+0x4c>
        mem = 1;
 80063e4:	2301      	movs	r3, #1
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	e00c      	b.n	8006404 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d108      	bne.n	8006404 <osSemaphoreNew+0x66>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d104      	bne.n	8006404 <osSemaphoreNew+0x66>
          mem = 0;
 80063fa:	2300      	movs	r3, #0
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	e001      	b.n	8006404 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800640a:	d04c      	beq.n	80064a6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d128      	bne.n	8006464 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d10a      	bne.n	800642e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2203      	movs	r2, #3
 800641e:	9200      	str	r2, [sp, #0]
 8006420:	2200      	movs	r2, #0
 8006422:	2100      	movs	r1, #0
 8006424:	2001      	movs	r0, #1
 8006426:	f000 fb5b 	bl	8006ae0 <xQueueGenericCreateStatic>
 800642a:	61f8      	str	r0, [r7, #28]
 800642c:	e005      	b.n	800643a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800642e:	2203      	movs	r2, #3
 8006430:	2100      	movs	r1, #0
 8006432:	2001      	movs	r0, #1
 8006434:	f000 fbcc 	bl	8006bd0 <xQueueGenericCreate>
 8006438:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d022      	beq.n	8006486 <osSemaphoreNew+0xe8>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d01f      	beq.n	8006486 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006446:	2300      	movs	r3, #0
 8006448:	2200      	movs	r2, #0
 800644a:	2100      	movs	r1, #0
 800644c:	69f8      	ldr	r0, [r7, #28]
 800644e:	f000 fd3d 	bl	8006ecc <xQueueGenericSend>
 8006452:	4603      	mov	r3, r0
 8006454:	2b01      	cmp	r3, #1
 8006456:	d016      	beq.n	8006486 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006458:	69f8      	ldr	r0, [r7, #28]
 800645a:	f001 f9c9 	bl	80077f0 <vQueueDelete>
            hSemaphore = NULL;
 800645e:	2300      	movs	r3, #0
 8006460:	61fb      	str	r3, [r7, #28]
 8006462:	e010      	b.n	8006486 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d108      	bne.n	800647c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	461a      	mov	r2, r3
 8006470:	68b9      	ldr	r1, [r7, #8]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 fcc0 	bl	8006df8 <xQueueCreateCountingSemaphoreStatic>
 8006478:	61f8      	str	r0, [r7, #28]
 800647a:	e004      	b.n	8006486 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fcf1 	bl	8006e66 <xQueueCreateCountingSemaphore>
 8006484:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00c      	beq.n	80064a6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <osSemaphoreNew+0xfc>
          name = attr->name;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	e001      	b.n	800649e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800649e:	6979      	ldr	r1, [r7, #20]
 80064a0:	69f8      	ldr	r0, [r7, #28]
 80064a2:	f001 faf1 	bl	8007a88 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80064a6:	69fb      	ldr	r3, [r7, #28]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3720      	adds	r7, #32
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80064be:	2300      	movs	r3, #0
 80064c0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d103      	bne.n	80064d0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80064c8:	f06f 0303 	mvn.w	r3, #3
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	e039      	b.n	8006544 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064d0:	f3ef 8305 	mrs	r3, IPSR
 80064d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80064d6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d022      	beq.n	8006522 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80064e2:	f06f 0303 	mvn.w	r3, #3
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e02c      	b.n	8006544 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80064ee:	f107 0308 	add.w	r3, r7, #8
 80064f2:	461a      	mov	r2, r3
 80064f4:	2100      	movs	r1, #0
 80064f6:	6938      	ldr	r0, [r7, #16]
 80064f8:	f001 f8fa 	bl	80076f0 <xQueueReceiveFromISR>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d003      	beq.n	800650a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006502:	f06f 0302 	mvn.w	r3, #2
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	e01c      	b.n	8006544 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d019      	beq.n	8006544 <osSemaphoreAcquire+0x94>
 8006510:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <osSemaphoreAcquire+0xa0>)
 8006512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	e010      	b.n	8006544 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6938      	ldr	r0, [r7, #16]
 8006526:	f000 ffd7 	bl	80074d8 <xQueueSemaphoreTake>
 800652a:	4603      	mov	r3, r0
 800652c:	2b01      	cmp	r3, #1
 800652e:	d009      	beq.n	8006544 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006536:	f06f 0301 	mvn.w	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e002      	b.n	8006544 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800653e:	f06f 0302 	mvn.w	r3, #2
 8006542:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006544:	697b      	ldr	r3, [r7, #20]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d103      	bne.n	8006572 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800656a:	f06f 0303 	mvn.w	r3, #3
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e02c      	b.n	80065cc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006572:	f3ef 8305 	mrs	r3, IPSR
 8006576:	60fb      	str	r3, [r7, #12]
  return(result);
 8006578:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800657a:	2b00      	cmp	r3, #0
 800657c:	d01a      	beq.n	80065b4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800657e:	2300      	movs	r3, #0
 8006580:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006582:	f107 0308 	add.w	r3, r7, #8
 8006586:	4619      	mov	r1, r3
 8006588:	6938      	ldr	r0, [r7, #16]
 800658a:	f000 fe38 	bl	80071fe <xQueueGiveFromISR>
 800658e:	4603      	mov	r3, r0
 8006590:	2b01      	cmp	r3, #1
 8006592:	d003      	beq.n	800659c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006594:	f06f 0302 	mvn.w	r3, #2
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	e017      	b.n	80065cc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d014      	beq.n	80065cc <osSemaphoreRelease+0x78>
 80065a2:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <osSemaphoreRelease+0x84>)
 80065a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	e00b      	b.n	80065cc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80065b4:	2300      	movs	r3, #0
 80065b6:	2200      	movs	r2, #0
 80065b8:	2100      	movs	r1, #0
 80065ba:	6938      	ldr	r0, [r7, #16]
 80065bc:	f000 fc86 	bl	8006ecc <xQueueGenericSend>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d002      	beq.n	80065cc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80065c6:	f06f 0302 	mvn.w	r3, #2
 80065ca:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80065cc:	697b      	ldr	r3, [r7, #20]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	e000ed04 	.word	0xe000ed04

080065dc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08a      	sub	sp, #40	; 0x28
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065ec:	f3ef 8305 	mrs	r3, IPSR
 80065f0:	613b      	str	r3, [r7, #16]
  return(result);
 80065f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d15f      	bne.n	80066b8 <osMessageQueueNew+0xdc>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d05c      	beq.n	80066b8 <osMessageQueueNew+0xdc>
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d059      	beq.n	80066b8 <osMessageQueueNew+0xdc>
    mem = -1;
 8006604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006608:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d029      	beq.n	8006664 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d012      	beq.n	800663e <osMessageQueueNew+0x62>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	2b4f      	cmp	r3, #79	; 0x4f
 800661e:	d90e      	bls.n	800663e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	695a      	ldr	r2, [r3, #20]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68b9      	ldr	r1, [r7, #8]
 8006630:	fb01 f303 	mul.w	r3, r1, r3
 8006634:	429a      	cmp	r2, r3
 8006636:	d302      	bcc.n	800663e <osMessageQueueNew+0x62>
        mem = 1;
 8006638:	2301      	movs	r3, #1
 800663a:	61bb      	str	r3, [r7, #24]
 800663c:	e014      	b.n	8006668 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d110      	bne.n	8006668 <osMessageQueueNew+0x8c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10c      	bne.n	8006668 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006652:	2b00      	cmp	r3, #0
 8006654:	d108      	bne.n	8006668 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <osMessageQueueNew+0x8c>
          mem = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	e001      	b.n	8006668 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d10b      	bne.n	8006686 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691a      	ldr	r2, [r3, #16]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2100      	movs	r1, #0
 8006678:	9100      	str	r1, [sp, #0]
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fa2f 	bl	8006ae0 <xQueueGenericCreateStatic>
 8006682:	61f8      	str	r0, [r7, #28]
 8006684:	e008      	b.n	8006698 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d105      	bne.n	8006698 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800668c:	2200      	movs	r2, #0
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 fa9d 	bl	8006bd0 <xQueueGenericCreate>
 8006696:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00c      	beq.n	80066b8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <osMessageQueueNew+0xd0>
        name = attr->name;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	e001      	b.n	80066b0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80066b0:	6979      	ldr	r1, [r7, #20]
 80066b2:	69f8      	ldr	r0, [r7, #28]
 80066b4:	f001 f9e8 	bl	8007a88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80066b8:	69fb      	ldr	r3, [r7, #28]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80066d8:	2300      	movs	r3, #0
 80066da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066dc:	f3ef 8305 	mrs	r3, IPSR
 80066e0:	617b      	str	r3, [r7, #20]
  return(result);
 80066e2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d028      	beq.n	800673a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <osMessageQueuePut+0x36>
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <osMessageQueuePut+0x36>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80066fa:	f06f 0303 	mvn.w	r3, #3
 80066fe:	61fb      	str	r3, [r7, #28]
 8006700:	e038      	b.n	8006774 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006702:	2300      	movs	r3, #0
 8006704:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006706:	f107 0210 	add.w	r2, r7, #16
 800670a:	2300      	movs	r3, #0
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	69b8      	ldr	r0, [r7, #24]
 8006710:	f000 fcda 	bl	80070c8 <xQueueGenericSendFromISR>
 8006714:	4603      	mov	r3, r0
 8006716:	2b01      	cmp	r3, #1
 8006718:	d003      	beq.n	8006722 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800671a:	f06f 0302 	mvn.w	r3, #2
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e028      	b.n	8006774 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d025      	beq.n	8006774 <osMessageQueuePut+0xb0>
 8006728:	4b15      	ldr	r3, [pc, #84]	; (8006780 <osMessageQueuePut+0xbc>)
 800672a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	e01c      	b.n	8006774 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <osMessageQueuePut+0x82>
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d103      	bne.n	800674e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006746:	f06f 0303 	mvn.w	r3, #3
 800674a:	61fb      	str	r3, [r7, #28]
 800674c:	e012      	b.n	8006774 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800674e:	2300      	movs	r3, #0
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	69b8      	ldr	r0, [r7, #24]
 8006756:	f000 fbb9 	bl	8006ecc <xQueueGenericSend>
 800675a:	4603      	mov	r3, r0
 800675c:	2b01      	cmp	r3, #1
 800675e:	d009      	beq.n	8006774 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006766:	f06f 0301 	mvn.w	r3, #1
 800676a:	61fb      	str	r3, [r7, #28]
 800676c:	e002      	b.n	8006774 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800676e:	f06f 0302 	mvn.w	r3, #2
 8006772:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006774:	69fb      	ldr	r3, [r7, #28]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3720      	adds	r7, #32
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	e000ed04 	.word	0xe000ed04

08006784 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800679a:	f3ef 8305 	mrs	r3, IPSR
 800679e:	617b      	str	r3, [r7, #20]
  return(result);
 80067a0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d028      	beq.n	80067f8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <osMessageQueueGet+0x34>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <osMessageQueueGet+0x34>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80067b8:	f06f 0303 	mvn.w	r3, #3
 80067bc:	61fb      	str	r3, [r7, #28]
 80067be:	e037      	b.n	8006830 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80067c4:	f107 0310 	add.w	r3, r7, #16
 80067c8:	461a      	mov	r2, r3
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	69b8      	ldr	r0, [r7, #24]
 80067ce:	f000 ff8f 	bl	80076f0 <xQueueReceiveFromISR>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d003      	beq.n	80067e0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80067d8:	f06f 0302 	mvn.w	r3, #2
 80067dc:	61fb      	str	r3, [r7, #28]
 80067de:	e027      	b.n	8006830 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d024      	beq.n	8006830 <osMessageQueueGet+0xac>
 80067e6:	4b15      	ldr	r3, [pc, #84]	; (800683c <osMessageQueueGet+0xb8>)
 80067e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	e01b      	b.n	8006830 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <osMessageQueueGet+0x80>
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d103      	bne.n	800680c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006804:	f06f 0303 	mvn.w	r3, #3
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	e011      	b.n	8006830 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	69b8      	ldr	r0, [r7, #24]
 8006812:	f000 fd81 	bl	8007318 <xQueueReceive>
 8006816:	4603      	mov	r3, r0
 8006818:	2b01      	cmp	r3, #1
 800681a:	d009      	beq.n	8006830 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006822:	f06f 0301 	mvn.w	r3, #1
 8006826:	61fb      	str	r3, [r7, #28]
 8006828:	e002      	b.n	8006830 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800682a:	f06f 0302 	mvn.w	r3, #2
 800682e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006830:	69fb      	ldr	r3, [r7, #28]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3720      	adds	r7, #32
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4a07      	ldr	r2, [pc, #28]	; (800686c <vApplicationGetIdleTaskMemory+0x2c>)
 8006850:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	4a06      	ldr	r2, [pc, #24]	; (8006870 <vApplicationGetIdleTaskMemory+0x30>)
 8006856:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800685e:	601a      	str	r2, [r3, #0]
}
 8006860:	bf00      	nop
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	24000290 	.word	0x24000290
 8006870:	24000350 	.word	0x24000350

08006874 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4a07      	ldr	r2, [pc, #28]	; (80068a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006884:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	4a06      	ldr	r2, [pc, #24]	; (80068a4 <vApplicationGetTimerTaskMemory+0x30>)
 800688a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006892:	601a      	str	r2, [r3, #0]
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	24000750 	.word	0x24000750
 80068a4:	24000810 	.word	0x24000810

080068a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f103 0208 	add.w	r2, r3, #8
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f103 0208 	add.w	r2, r3, #8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f103 0208 	add.w	r2, r3, #8
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	601a      	str	r2, [r3, #0]
}
 800693e:	bf00      	nop
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006960:	d103      	bne.n	800696a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e00c      	b.n	8006984 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3308      	adds	r3, #8
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	e002      	b.n	8006978 <vListInsert+0x2e>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	429a      	cmp	r2, r3
 8006982:	d2f6      	bcs.n	8006972 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	601a      	str	r2, [r3, #0]
}
 80069b0:	bf00      	nop
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6892      	ldr	r2, [r2, #8]
 80069d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6852      	ldr	r2, [r2, #4]
 80069dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d103      	bne.n	80069f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	1e5a      	subs	r2, r3, #1
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a3a:	f002 fd73 	bl	8009524 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a46:	68f9      	ldr	r1, [r7, #12]
 8006a48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a4a:	fb01 f303 	mul.w	r3, r1, r3
 8006a4e:	441a      	add	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	68f9      	ldr	r1, [r7, #12]
 8006a6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a70:	fb01 f303 	mul.w	r3, r1, r3
 8006a74:	441a      	add	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	22ff      	movs	r2, #255	; 0xff
 8006a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	22ff      	movs	r2, #255	; 0xff
 8006a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d114      	bne.n	8006aba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01a      	beq.n	8006ace <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3310      	adds	r3, #16
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 fd17 	bl	80084d0 <xTaskRemoveFromEventList>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d012      	beq.n	8006ace <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006aa8:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <xQueueGenericReset+0xcc>)
 8006aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	e009      	b.n	8006ace <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3310      	adds	r3, #16
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7ff fef2 	bl	80068a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3324      	adds	r3, #36	; 0x24
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff feed 	bl	80068a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ace:	f002 fd59 	bl	8009584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ad2:	2301      	movs	r3, #1
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08e      	sub	sp, #56	; 0x38
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10a      	bne.n	8006b26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b22:	bf00      	nop
 8006b24:	e7fe      	b.n	8006b24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <xQueueGenericCreateStatic+0x52>
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <xQueueGenericCreateStatic+0x56>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <xQueueGenericCreateStatic+0x58>
 8006b36:	2300      	movs	r3, #0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	623b      	str	r3, [r7, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d102      	bne.n	8006b5e <xQueueGenericCreateStatic+0x7e>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <xQueueGenericCreateStatic+0x82>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <xQueueGenericCreateStatic+0x84>
 8006b62:	2300      	movs	r3, #0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10a      	bne.n	8006b7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	61fb      	str	r3, [r7, #28]
}
 8006b7a:	bf00      	nop
 8006b7c:	e7fe      	b.n	8006b7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b7e:	2350      	movs	r3, #80	; 0x50
 8006b80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b50      	cmp	r3, #80	; 0x50
 8006b86:	d00a      	beq.n	8006b9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	61bb      	str	r3, [r7, #24]
}
 8006b9a:	bf00      	nop
 8006b9c:	e7fe      	b.n	8006b9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00d      	beq.n	8006bc6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	68b9      	ldr	r1, [r7, #8]
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f83f 	bl	8006c44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3730      	adds	r7, #48	; 0x30
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08a      	sub	sp, #40	; 0x28
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <xQueueGenericCreate+0x2a>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	613b      	str	r3, [r7, #16]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	fb02 f303 	mul.w	r3, r2, r3
 8006c02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	3350      	adds	r3, #80	; 0x50
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f002 fdad 	bl	8009768 <pvPortMalloc>
 8006c0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d011      	beq.n	8006c3a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	3350      	adds	r3, #80	; 0x50
 8006c1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c28:	79fa      	ldrb	r2, [r7, #7]
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f805 	bl	8006c44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
	}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3720      	adds	r7, #32
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d103      	bne.n	8006c60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e002      	b.n	8006c66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c72:	2101      	movs	r1, #1
 8006c74:	69b8      	ldr	r0, [r7, #24]
 8006c76:	f7ff fecb 	bl	8006a10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	78fa      	ldrb	r2, [r7, #3]
 8006c7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c82:	bf00      	nop
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00e      	beq.n	8006cb6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006caa:	2300      	movs	r3, #0
 8006cac:	2200      	movs	r2, #0
 8006cae:	2100      	movs	r1, #0
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f90b 	bl	8006ecc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006cb6:	bf00      	nop
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b086      	sub	sp, #24
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	6939      	ldr	r1, [r7, #16]
 8006cd6:	6978      	ldr	r0, [r7, #20]
 8006cd8:	f7ff ff7a 	bl	8006bd0 <xQueueGenericCreate>
 8006cdc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7ff ffd3 	bl	8006c8a <prvInitialiseMutex>

		return xNewQueue;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
	}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b088      	sub	sp, #32
 8006cf2:	af02      	add	r7, sp, #8
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	6039      	str	r1, [r7, #0]
 8006cf8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006d02:	79fb      	ldrb	r3, [r7, #7]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	6939      	ldr	r1, [r7, #16]
 8006d0c:	6978      	ldr	r0, [r7, #20]
 8006d0e:	f7ff fee7 	bl	8006ae0 <xQueueGenericCreateStatic>
 8006d12:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff ffb8 	bl	8006c8a <prvInitialiseMutex>

		return xNewQueue;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
	}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006d24:	b590      	push	{r4, r7, lr}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60fb      	str	r3, [r7, #12]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	689c      	ldr	r4, [r3, #8]
 8006d50:	f001 fd80 	bl	8008854 <xTaskGetCurrentTaskHandle>
 8006d54:	4603      	mov	r3, r0
 8006d56:	429c      	cmp	r4, r3
 8006d58:	d111      	bne.n	8006d7e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	1e5a      	subs	r2, r3, #1
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d105      	bne.n	8006d78 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2100      	movs	r1, #0
 8006d72:	6938      	ldr	r0, [r7, #16]
 8006d74:	f000 f8aa 	bl	8006ecc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e001      	b.n	8006d82 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006d82:	697b      	ldr	r3, [r7, #20]
	}
 8006d84:	4618      	mov	r0, r3
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd90      	pop	{r4, r7, pc}

08006d8c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006d8c:	b590      	push	{r4, r7, lr}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	60fb      	str	r3, [r7, #12]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	689c      	ldr	r4, [r3, #8]
 8006dba:	f001 fd4b 	bl	8008854 <xTaskGetCurrentTaskHandle>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	429c      	cmp	r4, r3
 8006dc2:	d107      	bne.n	8006dd4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	e00c      	b.n	8006dee <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6938      	ldr	r0, [r7, #16]
 8006dd8:	f000 fb7e 	bl	80074d8 <xQueueSemaphoreTake>
 8006ddc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d004      	beq.n	8006dee <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006dee:	697b      	ldr	r3, [r7, #20]
	}
 8006df0:	4618      	mov	r0, r3
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd90      	pop	{r4, r7, pc}

08006df8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	; 0x28
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	61bb      	str	r3, [r7, #24]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d90a      	bls.n	8006e3e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	617b      	str	r3, [r7, #20]
}
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006e3e:	2302      	movs	r3, #2
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	2100      	movs	r1, #0
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7ff fe49 	bl	8006ae0 <xQueueGenericCreateStatic>
 8006e4e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
	}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3720      	adds	r7, #32
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b086      	sub	sp, #24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	613b      	str	r3, [r7, #16]
}
 8006e88:	bf00      	nop
 8006e8a:	e7fe      	b.n	8006e8a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d90a      	bls.n	8006eaa <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	60fb      	str	r3, [r7, #12]
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006eaa:	2202      	movs	r2, #2
 8006eac:	2100      	movs	r1, #0
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff fe8e 	bl	8006bd0 <xQueueGenericCreate>
 8006eb4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ec2:	697b      	ldr	r3, [r7, #20]
	}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08e      	sub	sp, #56	; 0x38
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006eda:	2300      	movs	r3, #0
 8006edc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <xQueueGenericSend+0x32>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d103      	bne.n	8006f0c <xQueueGenericSend+0x40>
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <xQueueGenericSend+0x44>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e000      	b.n	8006f12 <xQueueGenericSend+0x46>
 8006f10:	2300      	movs	r3, #0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <xQueueGenericSend+0x60>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d103      	bne.n	8006f3a <xQueueGenericSend+0x6e>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d101      	bne.n	8006f3e <xQueueGenericSend+0x72>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <xQueueGenericSend+0x74>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <xQueueGenericSend+0x8e>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	623b      	str	r3, [r7, #32]
}
 8006f56:	bf00      	nop
 8006f58:	e7fe      	b.n	8006f58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f5a:	f001 fc8b 	bl	8008874 <xTaskGetSchedulerState>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d102      	bne.n	8006f6a <xQueueGenericSend+0x9e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <xQueueGenericSend+0xa2>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e000      	b.n	8006f70 <xQueueGenericSend+0xa4>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <xQueueGenericSend+0xbe>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	61fb      	str	r3, [r7, #28]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f8a:	f002 facb 	bl	8009524 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d302      	bcc.n	8006fa0 <xQueueGenericSend+0xd4>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d129      	bne.n	8006ff4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fa6:	f000 fc5e 	bl	8007866 <prvCopyDataToQueue>
 8006faa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d010      	beq.n	8006fd6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	3324      	adds	r3, #36	; 0x24
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 fa89 	bl	80084d0 <xTaskRemoveFromEventList>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d013      	beq.n	8006fec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006fc4:	4b3f      	ldr	r3, [pc, #252]	; (80070c4 <xQueueGenericSend+0x1f8>)
 8006fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	e00a      	b.n	8006fec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d007      	beq.n	8006fec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006fdc:	4b39      	ldr	r3, [pc, #228]	; (80070c4 <xQueueGenericSend+0x1f8>)
 8006fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fec:	f002 faca 	bl	8009584 <vPortExitCritical>
				return pdPASS;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e063      	b.n	80070bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d103      	bne.n	8007002 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ffa:	f002 fac3 	bl	8009584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	e05c      	b.n	80070bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007004:	2b00      	cmp	r3, #0
 8007006:	d106      	bne.n	8007016 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007008:	f107 0314 	add.w	r3, r7, #20
 800700c:	4618      	mov	r0, r3
 800700e:	f001 fac3 	bl	8008598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007012:	2301      	movs	r3, #1
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007016:	f002 fab5 	bl	8009584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800701a:	f001 f81d 	bl	8008058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800701e:	f002 fa81 	bl	8009524 <vPortEnterCritical>
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007028:	b25b      	sxtb	r3, r3
 800702a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800702e:	d103      	bne.n	8007038 <xQueueGenericSend+0x16c>
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800703e:	b25b      	sxtb	r3, r3
 8007040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007044:	d103      	bne.n	800704e <xQueueGenericSend+0x182>
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800704e:	f002 fa99 	bl	8009584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007052:	1d3a      	adds	r2, r7, #4
 8007054:	f107 0314 	add.w	r3, r7, #20
 8007058:	4611      	mov	r1, r2
 800705a:	4618      	mov	r0, r3
 800705c:	f001 fab2 	bl	80085c4 <xTaskCheckForTimeOut>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d124      	bne.n	80070b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007066:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007068:	f000 fcf5 	bl	8007a56 <prvIsQueueFull>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d018      	beq.n	80070a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	3310      	adds	r3, #16
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4611      	mov	r1, r2
 800707a:	4618      	mov	r0, r3
 800707c:	f001 f9d8 	bl	8008430 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007082:	f000 fc80 	bl	8007986 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007086:	f000 fff5 	bl	8008074 <xTaskResumeAll>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	f47f af7c 	bne.w	8006f8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007092:	4b0c      	ldr	r3, [pc, #48]	; (80070c4 <xQueueGenericSend+0x1f8>)
 8007094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	e772      	b.n	8006f8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80070a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070a6:	f000 fc6e 	bl	8007986 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070aa:	f000 ffe3 	bl	8008074 <xTaskResumeAll>
 80070ae:	e76c      	b.n	8006f8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80070b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070b2:	f000 fc68 	bl	8007986 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070b6:	f000 ffdd 	bl	8008074 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80070ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3738      	adds	r7, #56	; 0x38
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	e000ed04 	.word	0xe000ed04

080070c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b090      	sub	sp, #64	; 0x40
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d103      	bne.n	8007104 <xQueueGenericSendFromISR+0x3c>
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <xQueueGenericSendFromISR+0x40>
 8007104:	2301      	movs	r3, #1
 8007106:	e000      	b.n	800710a <xQueueGenericSendFromISR+0x42>
 8007108:	2300      	movs	r3, #0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d103      	bne.n	8007132 <xQueueGenericSendFromISR+0x6a>
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712e:	2b01      	cmp	r3, #1
 8007130:	d101      	bne.n	8007136 <xQueueGenericSendFromISR+0x6e>
 8007132:	2301      	movs	r3, #1
 8007134:	e000      	b.n	8007138 <xQueueGenericSendFromISR+0x70>
 8007136:	2300      	movs	r3, #0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10a      	bne.n	8007152 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	623b      	str	r3, [r7, #32]
}
 800714e:	bf00      	nop
 8007150:	e7fe      	b.n	8007150 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007152:	f002 fac9 	bl	80096e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007156:	f3ef 8211 	mrs	r2, BASEPRI
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	61fa      	str	r2, [r7, #28]
 800716c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800716e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007170:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717a:	429a      	cmp	r2, r3
 800717c:	d302      	bcc.n	8007184 <xQueueGenericSendFromISR+0xbc>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d12f      	bne.n	80071e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800718a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800719a:	f000 fb64 	bl	8007866 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800719e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80071a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071a6:	d112      	bne.n	80071ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d016      	beq.n	80071de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	3324      	adds	r3, #36	; 0x24
 80071b4:	4618      	mov	r0, r3
 80071b6:	f001 f98b 	bl	80084d0 <xTaskRemoveFromEventList>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00e      	beq.n	80071de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	e007      	b.n	80071de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80071d2:	3301      	adds	r3, #1
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	b25a      	sxtb	r2, r3
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80071de:	2301      	movs	r3, #1
 80071e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80071e2:	e001      	b.n	80071e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071e4:	2300      	movs	r3, #0
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3740      	adds	r7, #64	; 0x40
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b08e      	sub	sp, #56	; 0x38
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10a      	bne.n	8007228 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	623b      	str	r3, [r7, #32]
}
 8007224:	bf00      	nop
 8007226:	e7fe      	b.n	8007226 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	61fb      	str	r3, [r7, #28]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d103      	bne.n	8007256 <xQueueGiveFromISR+0x58>
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <xQueueGiveFromISR+0x5c>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <xQueueGiveFromISR+0x5e>
 800725a:	2300      	movs	r3, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	61bb      	str	r3, [r7, #24]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007276:	f002 fa37 	bl	80096e8 <vPortValidateInterruptPriority>
	__asm volatile
 800727a:	f3ef 8211 	mrs	r2, BASEPRI
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	617a      	str	r2, [r7, #20]
 8007290:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007292:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007294:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d22b      	bcs.n	80072fe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c0:	d112      	bne.n	80072e8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d016      	beq.n	80072f8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	3324      	adds	r3, #36	; 0x24
 80072ce:	4618      	mov	r0, r3
 80072d0:	f001 f8fe 	bl	80084d0 <xTaskRemoveFromEventList>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00e      	beq.n	80072f8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00b      	beq.n	80072f8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2201      	movs	r2, #1
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	e007      	b.n	80072f8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ec:	3301      	adds	r3, #1
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	b25a      	sxtb	r2, r3
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80072f8:	2301      	movs	r3, #1
 80072fa:	637b      	str	r3, [r7, #52]	; 0x34
 80072fc:	e001      	b.n	8007302 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	637b      	str	r3, [r7, #52]	; 0x34
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f383 8811 	msr	BASEPRI, r3
}
 800730c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800730e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007310:	4618      	mov	r0, r3
 8007312:	3738      	adds	r7, #56	; 0x38
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08c      	sub	sp, #48	; 0x30
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007324:	2300      	movs	r3, #0
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10a      	bne.n	8007348 <xQueueReceive+0x30>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	623b      	str	r3, [r7, #32]
}
 8007344:	bf00      	nop
 8007346:	e7fe      	b.n	8007346 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d103      	bne.n	8007356 <xQueueReceive+0x3e>
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <xQueueReceive+0x42>
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <xQueueReceive+0x44>
 800735a:	2300      	movs	r3, #0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <xQueueReceive+0x5e>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	61fb      	str	r3, [r7, #28]
}
 8007372:	bf00      	nop
 8007374:	e7fe      	b.n	8007374 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007376:	f001 fa7d 	bl	8008874 <xTaskGetSchedulerState>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <xQueueReceive+0x6e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <xQueueReceive+0x72>
 8007386:	2301      	movs	r3, #1
 8007388:	e000      	b.n	800738c <xQueueReceive+0x74>
 800738a:	2300      	movs	r3, #0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10a      	bne.n	80073a6 <xQueueReceive+0x8e>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	61bb      	str	r3, [r7, #24]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073a6:	f002 f8bd 	bl	8009524 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01f      	beq.n	80073f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ba:	f000 fabe 	bl	800793a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	1e5a      	subs	r2, r3, #1
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00f      	beq.n	80073ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	3310      	adds	r3, #16
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 f87c 	bl	80084d0 <xTaskRemoveFromEventList>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d007      	beq.n	80073ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073de:	4b3d      	ldr	r3, [pc, #244]	; (80074d4 <xQueueReceive+0x1bc>)
 80073e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073ee:	f002 f8c9 	bl	8009584 <vPortExitCritical>
				return pdPASS;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e069      	b.n	80074ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d103      	bne.n	8007404 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073fc:	f002 f8c2 	bl	8009584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007400:	2300      	movs	r3, #0
 8007402:	e062      	b.n	80074ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800740a:	f107 0310 	add.w	r3, r7, #16
 800740e:	4618      	mov	r0, r3
 8007410:	f001 f8c2 	bl	8008598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007414:	2301      	movs	r3, #1
 8007416:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007418:	f002 f8b4 	bl	8009584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800741c:	f000 fe1c 	bl	8008058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007420:	f002 f880 	bl	8009524 <vPortEnterCritical>
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800742a:	b25b      	sxtb	r3, r3
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007430:	d103      	bne.n	800743a <xQueueReceive+0x122>
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007440:	b25b      	sxtb	r3, r3
 8007442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007446:	d103      	bne.n	8007450 <xQueueReceive+0x138>
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007450:	f002 f898 	bl	8009584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007454:	1d3a      	adds	r2, r7, #4
 8007456:	f107 0310 	add.w	r3, r7, #16
 800745a:	4611      	mov	r1, r2
 800745c:	4618      	mov	r0, r3
 800745e:	f001 f8b1 	bl	80085c4 <xTaskCheckForTimeOut>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d123      	bne.n	80074b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800746a:	f000 fade 	bl	8007a2a <prvIsQueueEmpty>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d017      	beq.n	80074a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	3324      	adds	r3, #36	; 0x24
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	4611      	mov	r1, r2
 800747c:	4618      	mov	r0, r3
 800747e:	f000 ffd7 	bl	8008430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007484:	f000 fa7f 	bl	8007986 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007488:	f000 fdf4 	bl	8008074 <xTaskResumeAll>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d189      	bne.n	80073a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007492:	4b10      	ldr	r3, [pc, #64]	; (80074d4 <xQueueReceive+0x1bc>)
 8007494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	e780      	b.n	80073a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80074a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a6:	f000 fa6e 	bl	8007986 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074aa:	f000 fde3 	bl	8008074 <xTaskResumeAll>
 80074ae:	e77a      	b.n	80073a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80074b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074b2:	f000 fa68 	bl	8007986 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074b6:	f000 fddd 	bl	8008074 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074bc:	f000 fab5 	bl	8007a2a <prvIsQueueEmpty>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f43f af6f 	beq.w	80073a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3730      	adds	r7, #48	; 0x30
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	e000ed04 	.word	0xe000ed04

080074d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08e      	sub	sp, #56	; 0x38
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80074ea:	2300      	movs	r3, #0
 80074ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <xQueueSemaphoreTake+0x32>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	623b      	str	r3, [r7, #32]
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800750a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	61fb      	str	r3, [r7, #28]
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007528:	f001 f9a4 	bl	8008874 <xTaskGetSchedulerState>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d102      	bne.n	8007538 <xQueueSemaphoreTake+0x60>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <xQueueSemaphoreTake+0x64>
 8007538:	2301      	movs	r3, #1
 800753a:	e000      	b.n	800753e <xQueueSemaphoreTake+0x66>
 800753c:	2300      	movs	r3, #0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	61bb      	str	r3, [r7, #24]
}
 8007554:	bf00      	nop
 8007556:	e7fe      	b.n	8007556 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007558:	f001 ffe4 	bl	8009524 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	2b00      	cmp	r3, #0
 8007566:	d024      	beq.n	80075b2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	1e5a      	subs	r2, r3, #1
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007578:	f001 faf2 	bl	8008b60 <pvTaskIncrementMutexHeldCount>
 800757c:	4602      	mov	r2, r0
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00f      	beq.n	80075aa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	3310      	adds	r3, #16
 800758e:	4618      	mov	r0, r3
 8007590:	f000 ff9e 	bl	80084d0 <xTaskRemoveFromEventList>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d007      	beq.n	80075aa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800759a:	4b54      	ldr	r3, [pc, #336]	; (80076ec <xQueueSemaphoreTake+0x214>)
 800759c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075aa:	f001 ffeb 	bl	8009584 <vPortExitCritical>
				return pdPASS;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e097      	b.n	80076e2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d111      	bne.n	80075dc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	617b      	str	r3, [r7, #20]
}
 80075d0:	bf00      	nop
 80075d2:	e7fe      	b.n	80075d2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80075d4:	f001 ffd6 	bl	8009584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075d8:	2300      	movs	r3, #0
 80075da:	e082      	b.n	80076e2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075e2:	f107 030c 	add.w	r3, r7, #12
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 ffd6 	bl	8008598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075ec:	2301      	movs	r3, #1
 80075ee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075f0:	f001 ffc8 	bl	8009584 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075f4:	f000 fd30 	bl	8008058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075f8:	f001 ff94 	bl	8009524 <vPortEnterCritical>
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007602:	b25b      	sxtb	r3, r3
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007608:	d103      	bne.n	8007612 <xQueueSemaphoreTake+0x13a>
 800760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007618:	b25b      	sxtb	r3, r3
 800761a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800761e:	d103      	bne.n	8007628 <xQueueSemaphoreTake+0x150>
 8007620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007628:	f001 ffac 	bl	8009584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800762c:	463a      	mov	r2, r7
 800762e:	f107 030c 	add.w	r3, r7, #12
 8007632:	4611      	mov	r1, r2
 8007634:	4618      	mov	r0, r3
 8007636:	f000 ffc5 	bl	80085c4 <xTaskCheckForTimeOut>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d132      	bne.n	80076a6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007642:	f000 f9f2 	bl	8007a2a <prvIsQueueEmpty>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d026      	beq.n	800769a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d109      	bne.n	8007668 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007654:	f001 ff66 	bl	8009524 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	4618      	mov	r0, r3
 800765e:	f001 f927 	bl	80088b0 <xTaskPriorityInherit>
 8007662:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007664:	f001 ff8e 	bl	8009584 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766a:	3324      	adds	r3, #36	; 0x24
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f000 fedd 	bl	8008430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007678:	f000 f985 	bl	8007986 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800767c:	f000 fcfa 	bl	8008074 <xTaskResumeAll>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	f47f af68 	bne.w	8007558 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007688:	4b18      	ldr	r3, [pc, #96]	; (80076ec <xQueueSemaphoreTake+0x214>)
 800768a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	e75e      	b.n	8007558 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800769a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800769c:	f000 f973 	bl	8007986 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076a0:	f000 fce8 	bl	8008074 <xTaskResumeAll>
 80076a4:	e758      	b.n	8007558 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80076a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076a8:	f000 f96d 	bl	8007986 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076ac:	f000 fce2 	bl	8008074 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076b2:	f000 f9ba 	bl	8007a2a <prvIsQueueEmpty>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f43f af4d 	beq.w	8007558 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00d      	beq.n	80076e0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80076c4:	f001 ff2e 	bl	8009524 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80076c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076ca:	f000 f8b4 	bl	8007836 <prvGetDisinheritPriorityAfterTimeout>
 80076ce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80076d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076d6:	4618      	mov	r0, r3
 80076d8:	f001 f9c0 	bl	8008a5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80076dc:	f001 ff52 	bl	8009584 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3738      	adds	r7, #56	; 0x38
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	e000ed04 	.word	0xe000ed04

080076f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08e      	sub	sp, #56	; 0x38
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	623b      	str	r3, [r7, #32]
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d103      	bne.n	800772a <xQueueReceiveFromISR+0x3a>
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <xQueueReceiveFromISR+0x3e>
 800772a:	2301      	movs	r3, #1
 800772c:	e000      	b.n	8007730 <xQueueReceiveFromISR+0x40>
 800772e:	2300      	movs	r3, #0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10a      	bne.n	800774a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	61fb      	str	r3, [r7, #28]
}
 8007746:	bf00      	nop
 8007748:	e7fe      	b.n	8007748 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800774a:	f001 ffcd 	bl	80096e8 <vPortValidateInterruptPriority>
	__asm volatile
 800774e:	f3ef 8211 	mrs	r2, BASEPRI
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	61ba      	str	r2, [r7, #24]
 8007764:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007766:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007768:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	2b00      	cmp	r3, #0
 8007774:	d02f      	beq.n	80077d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800777c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007784:	f000 f8d9 	bl	800793a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	1e5a      	subs	r2, r3, #1
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007790:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007798:	d112      	bne.n	80077c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d016      	beq.n	80077d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	3310      	adds	r3, #16
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fe92 	bl	80084d0 <xTaskRemoveFromEventList>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00e      	beq.n	80077d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	e007      	b.n	80077d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80077c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077c4:	3301      	adds	r3, #1
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	b25a      	sxtb	r2, r3
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80077d0:	2301      	movs	r3, #1
 80077d2:	637b      	str	r3, [r7, #52]	; 0x34
 80077d4:	e001      	b.n	80077da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	f383 8811 	msr	BASEPRI, r3
}
 80077e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3738      	adds	r7, #56	; 0x38
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10a      	bne.n	8007818 <vQueueDelete+0x28>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	60bb      	str	r3, [r7, #8]
}
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f95f 	bl	8007adc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007824:	2b00      	cmp	r3, #0
 8007826:	d102      	bne.n	800782e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f002 f869 	bl	8009900 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007836:	b480      	push	{r7}
 8007838:	b085      	sub	sp, #20
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	2b00      	cmp	r3, #0
 8007844:	d006      	beq.n	8007854 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	e001      	b.n	8007858 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007854:	2300      	movs	r3, #0
 8007856:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007858:	68fb      	ldr	r3, [r7, #12]
	}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b086      	sub	sp, #24
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007872:	2300      	movs	r3, #0
 8007874:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10d      	bne.n	80078a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d14d      	bne.n	8007928 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	4618      	mov	r0, r3
 8007892:	f001 f875 	bl	8008980 <xTaskPriorityDisinherit>
 8007896:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	609a      	str	r2, [r3, #8]
 800789e:	e043      	b.n	8007928 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d119      	bne.n	80078da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6858      	ldr	r0, [r3, #4]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	461a      	mov	r2, r3
 80078b0:	68b9      	ldr	r1, [r7, #8]
 80078b2:	f010 fd2b 	bl	801830c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	441a      	add	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d32b      	bcc.n	8007928 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	605a      	str	r2, [r3, #4]
 80078d8:	e026      	b.n	8007928 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	68d8      	ldr	r0, [r3, #12]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	461a      	mov	r2, r3
 80078e4:	68b9      	ldr	r1, [r7, #8]
 80078e6:	f010 fd11 	bl	801830c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	425b      	negs	r3, r3
 80078f4:	441a      	add	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	68da      	ldr	r2, [r3, #12]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d207      	bcs.n	8007916 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	425b      	negs	r3, r3
 8007910:	441a      	add	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b02      	cmp	r3, #2
 800791a:	d105      	bne.n	8007928 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	3b01      	subs	r3, #1
 8007926:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007930:	697b      	ldr	r3, [r7, #20]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007948:	2b00      	cmp	r3, #0
 800794a:	d018      	beq.n	800797e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007954:	441a      	add	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	429a      	cmp	r2, r3
 8007964:	d303      	bcc.n	800796e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68d9      	ldr	r1, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	461a      	mov	r2, r3
 8007978:	6838      	ldr	r0, [r7, #0]
 800797a:	f010 fcc7 	bl	801830c <memcpy>
	}
}
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800798e:	f001 fdc9 	bl	8009524 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007998:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800799a:	e011      	b.n	80079c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d012      	beq.n	80079ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3324      	adds	r3, #36	; 0x24
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fd91 	bl	80084d0 <xTaskRemoveFromEventList>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079b4:	f000 fe68 	bl	8008688 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	dce9      	bgt.n	800799c <prvUnlockQueue+0x16>
 80079c8:	e000      	b.n	80079cc <prvUnlockQueue+0x46>
					break;
 80079ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	22ff      	movs	r2, #255	; 0xff
 80079d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079d4:	f001 fdd6 	bl	8009584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079d8:	f001 fda4 	bl	8009524 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079e4:	e011      	b.n	8007a0a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d012      	beq.n	8007a14 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3310      	adds	r3, #16
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fd6c 	bl	80084d0 <xTaskRemoveFromEventList>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079fe:	f000 fe43 	bl	8008688 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dce9      	bgt.n	80079e6 <prvUnlockQueue+0x60>
 8007a12:	e000      	b.n	8007a16 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a14:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	22ff      	movs	r2, #255	; 0xff
 8007a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a1e:	f001 fdb1 	bl	8009584 <vPortExitCritical>
}
 8007a22:	bf00      	nop
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b084      	sub	sp, #16
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a32:	f001 fd77 	bl	8009524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d102      	bne.n	8007a44 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	e001      	b.n	8007a48 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a44:	2300      	movs	r3, #0
 8007a46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a48:	f001 fd9c 	bl	8009584 <vPortExitCritical>

	return xReturn;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a5e:	f001 fd61 	bl	8009524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d102      	bne.n	8007a74 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	e001      	b.n	8007a78 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a78:	f001 fd84 	bl	8009584 <vPortExitCritical>

	return xReturn;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	e014      	b.n	8007ac2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a98:	4a0f      	ldr	r2, [pc, #60]	; (8007ad8 <vQueueAddToRegistry+0x50>)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10b      	bne.n	8007abc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007aa4:	490c      	ldr	r1, [pc, #48]	; (8007ad8 <vQueueAddToRegistry+0x50>)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007aae:	4a0a      	ldr	r2, [pc, #40]	; (8007ad8 <vQueueAddToRegistry+0x50>)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	4413      	add	r3, r2
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007aba:	e006      	b.n	8007aca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b07      	cmp	r3, #7
 8007ac6:	d9e7      	bls.n	8007a98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	2400bd9c 	.word	0x2400bd9c

08007adc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	e016      	b.n	8007b18 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007aea:	4a10      	ldr	r2, [pc, #64]	; (8007b2c <vQueueUnregisterQueue+0x50>)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	4413      	add	r3, r2
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d10b      	bne.n	8007b12 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007afa:	4a0c      	ldr	r2, [pc, #48]	; (8007b2c <vQueueUnregisterQueue+0x50>)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2100      	movs	r1, #0
 8007b00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007b04:	4a09      	ldr	r2, [pc, #36]	; (8007b2c <vQueueUnregisterQueue+0x50>)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	00db      	lsls	r3, r3, #3
 8007b0a:	4413      	add	r3, r2
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	605a      	str	r2, [r3, #4]
				break;
 8007b10:	e006      	b.n	8007b20 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3301      	adds	r3, #1
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b07      	cmp	r3, #7
 8007b1c:	d9e5      	bls.n	8007aea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007b1e:	bf00      	nop
 8007b20:	bf00      	nop
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	2400bd9c 	.word	0x2400bd9c

08007b30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b40:	f001 fcf0 	bl	8009524 <vPortEnterCritical>
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b4a:	b25b      	sxtb	r3, r3
 8007b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b50:	d103      	bne.n	8007b5a <vQueueWaitForMessageRestricted+0x2a>
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b60:	b25b      	sxtb	r3, r3
 8007b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b66:	d103      	bne.n	8007b70 <vQueueWaitForMessageRestricted+0x40>
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b70:	f001 fd08 	bl	8009584 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d106      	bne.n	8007b8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	3324      	adds	r3, #36	; 0x24
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	68b9      	ldr	r1, [r7, #8]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 fc77 	bl	8008478 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b8a:	6978      	ldr	r0, [r7, #20]
 8007b8c:	f7ff fefb 	bl	8007986 <prvUnlockQueue>
	}
 8007b90:	bf00      	nop
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08e      	sub	sp, #56	; 0x38
 8007b9c:	af04      	add	r7, sp, #16
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	623b      	str	r3, [r7, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10a      	bne.n	8007bde <xTaskCreateStatic+0x46>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	61fb      	str	r3, [r7, #28]
}
 8007bda:	bf00      	nop
 8007bdc:	e7fe      	b.n	8007bdc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007bde:	23c0      	movs	r3, #192	; 0xc0
 8007be0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	2bc0      	cmp	r3, #192	; 0xc0
 8007be6:	d00a      	beq.n	8007bfe <xTaskCreateStatic+0x66>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	61bb      	str	r3, [r7, #24]
}
 8007bfa:	bf00      	nop
 8007bfc:	e7fe      	b.n	8007bfc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d01e      	beq.n	8007c44 <xTaskCreateStatic+0xac>
 8007c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01b      	beq.n	8007c44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	2202      	movs	r2, #2
 8007c1a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9303      	str	r3, [sp, #12]
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	9302      	str	r3, [sp, #8]
 8007c26:	f107 0314 	add.w	r3, r7, #20
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	68b9      	ldr	r1, [r7, #8]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 f850 	bl	8007cdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c3e:	f000 f8f7 	bl	8007e30 <prvAddNewTaskToReadyList>
 8007c42:	e001      	b.n	8007c48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007c44:	2300      	movs	r3, #0
 8007c46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c48:	697b      	ldr	r3, [r7, #20]
	}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3728      	adds	r7, #40	; 0x28
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b08c      	sub	sp, #48	; 0x30
 8007c56:	af04      	add	r7, sp, #16
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	603b      	str	r3, [r7, #0]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c62:	88fb      	ldrh	r3, [r7, #6]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 fd7e 	bl	8009768 <pvPortMalloc>
 8007c6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00e      	beq.n	8007c92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c74:	20c0      	movs	r0, #192	; 0xc0
 8007c76:	f001 fd77 	bl	8009768 <pvPortMalloc>
 8007c7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	631a      	str	r2, [r3, #48]	; 0x30
 8007c88:	e005      	b.n	8007c96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c8a:	6978      	ldr	r0, [r7, #20]
 8007c8c:	f001 fe38 	bl	8009900 <vPortFree>
 8007c90:	e001      	b.n	8007c96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d017      	beq.n	8007ccc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ca4:	88fa      	ldrh	r2, [r7, #6]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9303      	str	r3, [sp, #12]
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	9302      	str	r3, [sp, #8]
 8007cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb0:	9301      	str	r3, [sp, #4]
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68b9      	ldr	r1, [r7, #8]
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 f80e 	bl	8007cdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cc0:	69f8      	ldr	r0, [r7, #28]
 8007cc2:	f000 f8b5 	bl	8007e30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	61bb      	str	r3, [r7, #24]
 8007cca:	e002      	b.n	8007cd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007cd2:	69bb      	ldr	r3, [r7, #24]
	}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3720      	adds	r7, #32
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b088      	sub	sp, #32
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	21a5      	movs	r1, #165	; 0xa5
 8007cf6:	f010 fb31 	bl	801835c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007d04:	440b      	add	r3, r1
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	f023 0307 	bic.w	r3, r3, #7
 8007d12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	f003 0307 	and.w	r3, r3, #7
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	617b      	str	r3, [r7, #20]
}
 8007d30:	bf00      	nop
 8007d32:	e7fe      	b.n	8007d32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d01f      	beq.n	8007d7a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61fb      	str	r3, [r7, #28]
 8007d3e:	e012      	b.n	8007d66 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	4413      	add	r3, r2
 8007d46:	7819      	ldrb	r1, [r3, #0]
 8007d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	3334      	adds	r3, #52	; 0x34
 8007d50:	460a      	mov	r2, r1
 8007d52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	4413      	add	r3, r2
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d006      	beq.n	8007d6e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	3301      	adds	r3, #1
 8007d64:	61fb      	str	r3, [r7, #28]
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	2b0f      	cmp	r3, #15
 8007d6a:	d9e9      	bls.n	8007d40 <prvInitialiseNewTask+0x64>
 8007d6c:	e000      	b.n	8007d70 <prvInitialiseNewTask+0x94>
			{
				break;
 8007d6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d78:	e003      	b.n	8007d82 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	2b37      	cmp	r3, #55	; 0x37
 8007d86:	d901      	bls.n	8007d8c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d88:	2337      	movs	r3, #55	; 0x37
 8007d8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	3304      	adds	r3, #4
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe fda0 	bl	80068e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	3318      	adds	r3, #24
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fe fd9b 	bl	80068e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007db6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	2200      	movs	r2, #0
 8007dcc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	3358      	adds	r3, #88	; 0x58
 8007de2:	2260      	movs	r2, #96	; 0x60
 8007de4:	2100      	movs	r1, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f010 fab8 	bl	801835c <memset>
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	4a0d      	ldr	r2, [pc, #52]	; (8007e24 <prvInitialiseNewTask+0x148>)
 8007df0:	65da      	str	r2, [r3, #92]	; 0x5c
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	4a0c      	ldr	r2, [pc, #48]	; (8007e28 <prvInitialiseNewTask+0x14c>)
 8007df6:	661a      	str	r2, [r3, #96]	; 0x60
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	4a0c      	ldr	r2, [pc, #48]	; (8007e2c <prvInitialiseNewTask+0x150>)
 8007dfc:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	68f9      	ldr	r1, [r7, #12]
 8007e02:	69b8      	ldr	r0, [r7, #24]
 8007e04:	f001 fa62 	bl	80092cc <pxPortInitialiseStack>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e1a:	bf00      	nop
 8007e1c:	3720      	adds	r7, #32
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	0801ed58 	.word	0x0801ed58
 8007e28:	0801ed78 	.word	0x0801ed78
 8007e2c:	0801ed38 	.word	0x0801ed38

08007e30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e38:	f001 fb74 	bl	8009524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e3c:	4b2d      	ldr	r3, [pc, #180]	; (8007ef4 <prvAddNewTaskToReadyList+0xc4>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3301      	adds	r3, #1
 8007e42:	4a2c      	ldr	r2, [pc, #176]	; (8007ef4 <prvAddNewTaskToReadyList+0xc4>)
 8007e44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e46:	4b2c      	ldr	r3, [pc, #176]	; (8007ef8 <prvAddNewTaskToReadyList+0xc8>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d109      	bne.n	8007e62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e4e:	4a2a      	ldr	r2, [pc, #168]	; (8007ef8 <prvAddNewTaskToReadyList+0xc8>)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e54:	4b27      	ldr	r3, [pc, #156]	; (8007ef4 <prvAddNewTaskToReadyList+0xc4>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d110      	bne.n	8007e7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e5c:	f000 fc38 	bl	80086d0 <prvInitialiseTaskLists>
 8007e60:	e00d      	b.n	8007e7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e62:	4b26      	ldr	r3, [pc, #152]	; (8007efc <prvAddNewTaskToReadyList+0xcc>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d109      	bne.n	8007e7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e6a:	4b23      	ldr	r3, [pc, #140]	; (8007ef8 <prvAddNewTaskToReadyList+0xc8>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d802      	bhi.n	8007e7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e78:	4a1f      	ldr	r2, [pc, #124]	; (8007ef8 <prvAddNewTaskToReadyList+0xc8>)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e7e:	4b20      	ldr	r3, [pc, #128]	; (8007f00 <prvAddNewTaskToReadyList+0xd0>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3301      	adds	r3, #1
 8007e84:	4a1e      	ldr	r2, [pc, #120]	; (8007f00 <prvAddNewTaskToReadyList+0xd0>)
 8007e86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e88:	4b1d      	ldr	r3, [pc, #116]	; (8007f00 <prvAddNewTaskToReadyList+0xd0>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e94:	4b1b      	ldr	r3, [pc, #108]	; (8007f04 <prvAddNewTaskToReadyList+0xd4>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d903      	bls.n	8007ea4 <prvAddNewTaskToReadyList+0x74>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	4a18      	ldr	r2, [pc, #96]	; (8007f04 <prvAddNewTaskToReadyList+0xd4>)
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4a15      	ldr	r2, [pc, #84]	; (8007f08 <prvAddNewTaskToReadyList+0xd8>)
 8007eb2:	441a      	add	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f7fe fd21 	bl	8006902 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ec0:	f001 fb60 	bl	8009584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ec4:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <prvAddNewTaskToReadyList+0xcc>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00e      	beq.n	8007eea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <prvAddNewTaskToReadyList+0xc8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d207      	bcs.n	8007eea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007eda:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <prvAddNewTaskToReadyList+0xdc>)
 8007edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	240014e4 	.word	0x240014e4
 8007ef8:	24001010 	.word	0x24001010
 8007efc:	240014f0 	.word	0x240014f0
 8007f00:	24001500 	.word	0x24001500
 8007f04:	240014ec 	.word	0x240014ec
 8007f08:	24001014 	.word	0x24001014
 8007f0c:	e000ed04 	.word	0xe000ed04

08007f10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d017      	beq.n	8007f52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f22:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <vTaskDelay+0x60>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <vTaskDelay+0x30>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	60bb      	str	r3, [r7, #8]
}
 8007f3c:	bf00      	nop
 8007f3e:	e7fe      	b.n	8007f3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f40:	f000 f88a 	bl	8008058 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f44:	2100      	movs	r1, #0
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fe1e 	bl	8008b88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f4c:	f000 f892 	bl	8008074 <xTaskResumeAll>
 8007f50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d107      	bne.n	8007f68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007f58:	4b06      	ldr	r3, [pc, #24]	; (8007f74 <vTaskDelay+0x64>)
 8007f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f68:	bf00      	nop
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	2400150c 	.word	0x2400150c
 8007f74:	e000ed04 	.word	0xe000ed04

08007f78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08a      	sub	sp, #40	; 0x28
 8007f7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f86:	463a      	mov	r2, r7
 8007f88:	1d39      	adds	r1, r7, #4
 8007f8a:	f107 0308 	add.w	r3, r7, #8
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe fc56 	bl	8006840 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	9202      	str	r2, [sp, #8]
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	460a      	mov	r2, r1
 8007fa6:	4924      	ldr	r1, [pc, #144]	; (8008038 <vTaskStartScheduler+0xc0>)
 8007fa8:	4824      	ldr	r0, [pc, #144]	; (800803c <vTaskStartScheduler+0xc4>)
 8007faa:	f7ff fdf5 	bl	8007b98 <xTaskCreateStatic>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	4a23      	ldr	r2, [pc, #140]	; (8008040 <vTaskStartScheduler+0xc8>)
 8007fb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007fb4:	4b22      	ldr	r3, [pc, #136]	; (8008040 <vTaskStartScheduler+0xc8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	e001      	b.n	8007fc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d102      	bne.n	8007fd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007fcc:	f000 fe30 	bl	8008c30 <xTimerCreateTimerTask>
 8007fd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d11b      	bne.n	8008010 <vTaskStartScheduler+0x98>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	613b      	str	r3, [r7, #16]
}
 8007fea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fec:	4b15      	ldr	r3, [pc, #84]	; (8008044 <vTaskStartScheduler+0xcc>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	3358      	adds	r3, #88	; 0x58
 8007ff2:	4a15      	ldr	r2, [pc, #84]	; (8008048 <vTaskStartScheduler+0xd0>)
 8007ff4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ff6:	4b15      	ldr	r3, [pc, #84]	; (800804c <vTaskStartScheduler+0xd4>)
 8007ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ffc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ffe:	4b14      	ldr	r3, [pc, #80]	; (8008050 <vTaskStartScheduler+0xd8>)
 8008000:	2201      	movs	r2, #1
 8008002:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008004:	4b13      	ldr	r3, [pc, #76]	; (8008054 <vTaskStartScheduler+0xdc>)
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800800a:	f001 f9e9 	bl	80093e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800800e:	e00e      	b.n	800802e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008016:	d10a      	bne.n	800802e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	60fb      	str	r3, [r7, #12]
}
 800802a:	bf00      	nop
 800802c:	e7fe      	b.n	800802c <vTaskStartScheduler+0xb4>
}
 800802e:	bf00      	nop
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	0801bbec 	.word	0x0801bbec
 800803c:	080086a1 	.word	0x080086a1
 8008040:	24001508 	.word	0x24001508
 8008044:	24001010 	.word	0x24001010
 8008048:	24000064 	.word	0x24000064
 800804c:	24001504 	.word	0x24001504
 8008050:	240014f0 	.word	0x240014f0
 8008054:	240014e8 	.word	0x240014e8

08008058 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008058:	b480      	push	{r7}
 800805a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800805c:	4b04      	ldr	r3, [pc, #16]	; (8008070 <vTaskSuspendAll+0x18>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3301      	adds	r3, #1
 8008062:	4a03      	ldr	r2, [pc, #12]	; (8008070 <vTaskSuspendAll+0x18>)
 8008064:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008066:	bf00      	nop
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	2400150c 	.word	0x2400150c

08008074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800807e:	2300      	movs	r3, #0
 8008080:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008082:	4b42      	ldr	r3, [pc, #264]	; (800818c <xTaskResumeAll+0x118>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10a      	bne.n	80080a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	603b      	str	r3, [r7, #0]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080a0:	f001 fa40 	bl	8009524 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080a4:	4b39      	ldr	r3, [pc, #228]	; (800818c <xTaskResumeAll+0x118>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	4a38      	ldr	r2, [pc, #224]	; (800818c <xTaskResumeAll+0x118>)
 80080ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ae:	4b37      	ldr	r3, [pc, #220]	; (800818c <xTaskResumeAll+0x118>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d162      	bne.n	800817c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080b6:	4b36      	ldr	r3, [pc, #216]	; (8008190 <xTaskResumeAll+0x11c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d05e      	beq.n	800817c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080be:	e02f      	b.n	8008120 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080c0:	4b34      	ldr	r3, [pc, #208]	; (8008194 <xTaskResumeAll+0x120>)
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3318      	adds	r3, #24
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fe fc75 	bl	80069bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3304      	adds	r3, #4
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe fc70 	bl	80069bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e0:	4b2d      	ldr	r3, [pc, #180]	; (8008198 <xTaskResumeAll+0x124>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d903      	bls.n	80080f0 <xTaskResumeAll+0x7c>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	4a2a      	ldr	r2, [pc, #168]	; (8008198 <xTaskResumeAll+0x124>)
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4a27      	ldr	r2, [pc, #156]	; (800819c <xTaskResumeAll+0x128>)
 80080fe:	441a      	add	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3304      	adds	r3, #4
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f7fe fbfb 	bl	8006902 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008110:	4b23      	ldr	r3, [pc, #140]	; (80081a0 <xTaskResumeAll+0x12c>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008116:	429a      	cmp	r2, r3
 8008118:	d302      	bcc.n	8008120 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800811a:	4b22      	ldr	r3, [pc, #136]	; (80081a4 <xTaskResumeAll+0x130>)
 800811c:	2201      	movs	r2, #1
 800811e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008120:	4b1c      	ldr	r3, [pc, #112]	; (8008194 <xTaskResumeAll+0x120>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1cb      	bne.n	80080c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800812e:	f000 fb71 	bl	8008814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008132:	4b1d      	ldr	r3, [pc, #116]	; (80081a8 <xTaskResumeAll+0x134>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d010      	beq.n	8008160 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800813e:	f000 f859 	bl	80081f4 <xTaskIncrementTick>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008148:	4b16      	ldr	r3, [pc, #88]	; (80081a4 <xTaskResumeAll+0x130>)
 800814a:	2201      	movs	r2, #1
 800814c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3b01      	subs	r3, #1
 8008152:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1f1      	bne.n	800813e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800815a:	4b13      	ldr	r3, [pc, #76]	; (80081a8 <xTaskResumeAll+0x134>)
 800815c:	2200      	movs	r2, #0
 800815e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008160:	4b10      	ldr	r3, [pc, #64]	; (80081a4 <xTaskResumeAll+0x130>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d009      	beq.n	800817c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008168:	2301      	movs	r3, #1
 800816a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800816c:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <xTaskResumeAll+0x138>)
 800816e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800817c:	f001 fa02 	bl	8009584 <vPortExitCritical>

	return xAlreadyYielded;
 8008180:	68bb      	ldr	r3, [r7, #8]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	2400150c 	.word	0x2400150c
 8008190:	240014e4 	.word	0x240014e4
 8008194:	240014a4 	.word	0x240014a4
 8008198:	240014ec 	.word	0x240014ec
 800819c:	24001014 	.word	0x24001014
 80081a0:	24001010 	.word	0x24001010
 80081a4:	240014f8 	.word	0x240014f8
 80081a8:	240014f4 	.word	0x240014f4
 80081ac:	e000ed04 	.word	0xe000ed04

080081b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80081b6:	4b05      	ldr	r3, [pc, #20]	; (80081cc <xTaskGetTickCount+0x1c>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80081bc:	687b      	ldr	r3, [r7, #4]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	240014e8 	.word	0x240014e8

080081d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081d6:	f001 fa87 	bl	80096e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80081da:	2300      	movs	r3, #0
 80081dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80081de:	4b04      	ldr	r3, [pc, #16]	; (80081f0 <xTaskGetTickCountFromISR+0x20>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081e4:	683b      	ldr	r3, [r7, #0]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	240014e8 	.word	0x240014e8

080081f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081fa:	2300      	movs	r3, #0
 80081fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081fe:	4b4f      	ldr	r3, [pc, #316]	; (800833c <xTaskIncrementTick+0x148>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	f040 808f 	bne.w	8008326 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008208:	4b4d      	ldr	r3, [pc, #308]	; (8008340 <xTaskIncrementTick+0x14c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3301      	adds	r3, #1
 800820e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008210:	4a4b      	ldr	r2, [pc, #300]	; (8008340 <xTaskIncrementTick+0x14c>)
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d120      	bne.n	800825e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800821c:	4b49      	ldr	r3, [pc, #292]	; (8008344 <xTaskIncrementTick+0x150>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <xTaskIncrementTick+0x48>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	603b      	str	r3, [r7, #0]
}
 8008238:	bf00      	nop
 800823a:	e7fe      	b.n	800823a <xTaskIncrementTick+0x46>
 800823c:	4b41      	ldr	r3, [pc, #260]	; (8008344 <xTaskIncrementTick+0x150>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60fb      	str	r3, [r7, #12]
 8008242:	4b41      	ldr	r3, [pc, #260]	; (8008348 <xTaskIncrementTick+0x154>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a3f      	ldr	r2, [pc, #252]	; (8008344 <xTaskIncrementTick+0x150>)
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	4a3f      	ldr	r2, [pc, #252]	; (8008348 <xTaskIncrementTick+0x154>)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	4b3e      	ldr	r3, [pc, #248]	; (800834c <xTaskIncrementTick+0x158>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3301      	adds	r3, #1
 8008256:	4a3d      	ldr	r2, [pc, #244]	; (800834c <xTaskIncrementTick+0x158>)
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	f000 fadb 	bl	8008814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800825e:	4b3c      	ldr	r3, [pc, #240]	; (8008350 <xTaskIncrementTick+0x15c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	429a      	cmp	r2, r3
 8008266:	d349      	bcc.n	80082fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008268:	4b36      	ldr	r3, [pc, #216]	; (8008344 <xTaskIncrementTick+0x150>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d104      	bne.n	800827c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008272:	4b37      	ldr	r3, [pc, #220]	; (8008350 <xTaskIncrementTick+0x15c>)
 8008274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008278:	601a      	str	r2, [r3, #0]
					break;
 800827a:	e03f      	b.n	80082fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800827c:	4b31      	ldr	r3, [pc, #196]	; (8008344 <xTaskIncrementTick+0x150>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	429a      	cmp	r2, r3
 8008292:	d203      	bcs.n	800829c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008294:	4a2e      	ldr	r2, [pc, #184]	; (8008350 <xTaskIncrementTick+0x15c>)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800829a:	e02f      	b.n	80082fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	3304      	adds	r3, #4
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fe fb8b 	bl	80069bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d004      	beq.n	80082b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	3318      	adds	r3, #24
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe fb82 	bl	80069bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082bc:	4b25      	ldr	r3, [pc, #148]	; (8008354 <xTaskIncrementTick+0x160>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d903      	bls.n	80082cc <xTaskIncrementTick+0xd8>
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	4a22      	ldr	r2, [pc, #136]	; (8008354 <xTaskIncrementTick+0x160>)
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d0:	4613      	mov	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4a1f      	ldr	r2, [pc, #124]	; (8008358 <xTaskIncrementTick+0x164>)
 80082da:	441a      	add	r2, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	3304      	adds	r3, #4
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f7fe fb0d 	bl	8006902 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ec:	4b1b      	ldr	r3, [pc, #108]	; (800835c <xTaskIncrementTick+0x168>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d3b8      	bcc.n	8008268 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80082f6:	2301      	movs	r3, #1
 80082f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082fa:	e7b5      	b.n	8008268 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082fc:	4b17      	ldr	r3, [pc, #92]	; (800835c <xTaskIncrementTick+0x168>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008302:	4915      	ldr	r1, [pc, #84]	; (8008358 <xTaskIncrementTick+0x164>)
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	440b      	add	r3, r1
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d901      	bls.n	8008318 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008314:	2301      	movs	r3, #1
 8008316:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008318:	4b11      	ldr	r3, [pc, #68]	; (8008360 <xTaskIncrementTick+0x16c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d007      	beq.n	8008330 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008320:	2301      	movs	r3, #1
 8008322:	617b      	str	r3, [r7, #20]
 8008324:	e004      	b.n	8008330 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008326:	4b0f      	ldr	r3, [pc, #60]	; (8008364 <xTaskIncrementTick+0x170>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3301      	adds	r3, #1
 800832c:	4a0d      	ldr	r2, [pc, #52]	; (8008364 <xTaskIncrementTick+0x170>)
 800832e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008330:	697b      	ldr	r3, [r7, #20]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	2400150c 	.word	0x2400150c
 8008340:	240014e8 	.word	0x240014e8
 8008344:	2400149c 	.word	0x2400149c
 8008348:	240014a0 	.word	0x240014a0
 800834c:	240014fc 	.word	0x240014fc
 8008350:	24001504 	.word	0x24001504
 8008354:	240014ec 	.word	0x240014ec
 8008358:	24001014 	.word	0x24001014
 800835c:	24001010 	.word	0x24001010
 8008360:	240014f8 	.word	0x240014f8
 8008364:	240014f4 	.word	0x240014f4

08008368 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800836e:	4b2a      	ldr	r3, [pc, #168]	; (8008418 <vTaskSwitchContext+0xb0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d003      	beq.n	800837e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008376:	4b29      	ldr	r3, [pc, #164]	; (800841c <vTaskSwitchContext+0xb4>)
 8008378:	2201      	movs	r2, #1
 800837a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800837c:	e046      	b.n	800840c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800837e:	4b27      	ldr	r3, [pc, #156]	; (800841c <vTaskSwitchContext+0xb4>)
 8008380:	2200      	movs	r2, #0
 8008382:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008384:	4b26      	ldr	r3, [pc, #152]	; (8008420 <vTaskSwitchContext+0xb8>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60fb      	str	r3, [r7, #12]
 800838a:	e010      	b.n	80083ae <vTaskSwitchContext+0x46>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10a      	bne.n	80083a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	607b      	str	r3, [r7, #4]
}
 80083a4:	bf00      	nop
 80083a6:	e7fe      	b.n	80083a6 <vTaskSwitchContext+0x3e>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	60fb      	str	r3, [r7, #12]
 80083ae:	491d      	ldr	r1, [pc, #116]	; (8008424 <vTaskSwitchContext+0xbc>)
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4613      	mov	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	440b      	add	r3, r1
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0e4      	beq.n	800838c <vTaskSwitchContext+0x24>
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4a15      	ldr	r2, [pc, #84]	; (8008424 <vTaskSwitchContext+0xbc>)
 80083ce:	4413      	add	r3, r2
 80083d0:	60bb      	str	r3, [r7, #8]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	605a      	str	r2, [r3, #4]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	3308      	adds	r3, #8
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d104      	bne.n	80083f2 <vTaskSwitchContext+0x8a>
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	605a      	str	r2, [r3, #4]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	4a0b      	ldr	r2, [pc, #44]	; (8008428 <vTaskSwitchContext+0xc0>)
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	4a08      	ldr	r2, [pc, #32]	; (8008420 <vTaskSwitchContext+0xb8>)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008402:	4b09      	ldr	r3, [pc, #36]	; (8008428 <vTaskSwitchContext+0xc0>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3358      	adds	r3, #88	; 0x58
 8008408:	4a08      	ldr	r2, [pc, #32]	; (800842c <vTaskSwitchContext+0xc4>)
 800840a:	6013      	str	r3, [r2, #0]
}
 800840c:	bf00      	nop
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	2400150c 	.word	0x2400150c
 800841c:	240014f8 	.word	0x240014f8
 8008420:	240014ec 	.word	0x240014ec
 8008424:	24001014 	.word	0x24001014
 8008428:	24001010 	.word	0x24001010
 800842c:	24000064 	.word	0x24000064

08008430 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10a      	bne.n	8008456 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	60fb      	str	r3, [r7, #12]
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008456:	4b07      	ldr	r3, [pc, #28]	; (8008474 <vTaskPlaceOnEventList+0x44>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3318      	adds	r3, #24
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7fe fa73 	bl	800694a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008464:	2101      	movs	r1, #1
 8008466:	6838      	ldr	r0, [r7, #0]
 8008468:	f000 fb8e 	bl	8008b88 <prvAddCurrentTaskToDelayedList>
}
 800846c:	bf00      	nop
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	24001010 	.word	0x24001010

08008478 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	617b      	str	r3, [r7, #20]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084a0:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <vTaskPlaceOnEventListRestricted+0x54>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3318      	adds	r3, #24
 80084a6:	4619      	mov	r1, r3
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f7fe fa2a 	bl	8006902 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80084b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	68b8      	ldr	r0, [r7, #8]
 80084be:	f000 fb63 	bl	8008b88 <prvAddCurrentTaskToDelayedList>
	}
 80084c2:	bf00      	nop
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	24001010 	.word	0x24001010

080084d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10a      	bne.n	80084fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60fb      	str	r3, [r7, #12]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	3318      	adds	r3, #24
 8008500:	4618      	mov	r0, r3
 8008502:	f7fe fa5b 	bl	80069bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008506:	4b1e      	ldr	r3, [pc, #120]	; (8008580 <xTaskRemoveFromEventList+0xb0>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d11d      	bne.n	800854a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	3304      	adds	r3, #4
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe fa52 	bl	80069bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851c:	4b19      	ldr	r3, [pc, #100]	; (8008584 <xTaskRemoveFromEventList+0xb4>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	429a      	cmp	r2, r3
 8008522:	d903      	bls.n	800852c <xTaskRemoveFromEventList+0x5c>
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008528:	4a16      	ldr	r2, [pc, #88]	; (8008584 <xTaskRemoveFromEventList+0xb4>)
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008530:	4613      	mov	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4a13      	ldr	r2, [pc, #76]	; (8008588 <xTaskRemoveFromEventList+0xb8>)
 800853a:	441a      	add	r2, r3
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	3304      	adds	r3, #4
 8008540:	4619      	mov	r1, r3
 8008542:	4610      	mov	r0, r2
 8008544:	f7fe f9dd 	bl	8006902 <vListInsertEnd>
 8008548:	e005      	b.n	8008556 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	3318      	adds	r3, #24
 800854e:	4619      	mov	r1, r3
 8008550:	480e      	ldr	r0, [pc, #56]	; (800858c <xTaskRemoveFromEventList+0xbc>)
 8008552:	f7fe f9d6 	bl	8006902 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855a:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <xTaskRemoveFromEventList+0xc0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	429a      	cmp	r2, r3
 8008562:	d905      	bls.n	8008570 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008564:	2301      	movs	r3, #1
 8008566:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008568:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <xTaskRemoveFromEventList+0xc4>)
 800856a:	2201      	movs	r2, #1
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	e001      	b.n	8008574 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008570:	2300      	movs	r3, #0
 8008572:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008574:	697b      	ldr	r3, [r7, #20]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3718      	adds	r7, #24
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	2400150c 	.word	0x2400150c
 8008584:	240014ec 	.word	0x240014ec
 8008588:	24001014 	.word	0x24001014
 800858c:	240014a4 	.word	0x240014a4
 8008590:	24001010 	.word	0x24001010
 8008594:	240014f8 	.word	0x240014f8

08008598 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085a0:	4b06      	ldr	r3, [pc, #24]	; (80085bc <vTaskInternalSetTimeOutState+0x24>)
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085a8:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <vTaskInternalSetTimeOutState+0x28>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	605a      	str	r2, [r3, #4]
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	240014fc 	.word	0x240014fc
 80085c0:	240014e8 	.word	0x240014e8

080085c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10a      	bne.n	80085ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	613b      	str	r3, [r7, #16]
}
 80085e6:	bf00      	nop
 80085e8:	e7fe      	b.n	80085e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10a      	bne.n	8008606 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	60fb      	str	r3, [r7, #12]
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008606:	f000 ff8d 	bl	8009524 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800860a:	4b1d      	ldr	r3, [pc, #116]	; (8008680 <xTaskCheckForTimeOut+0xbc>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008622:	d102      	bne.n	800862a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008624:	2300      	movs	r3, #0
 8008626:	61fb      	str	r3, [r7, #28]
 8008628:	e023      	b.n	8008672 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	4b15      	ldr	r3, [pc, #84]	; (8008684 <xTaskCheckForTimeOut+0xc0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	429a      	cmp	r2, r3
 8008634:	d007      	beq.n	8008646 <xTaskCheckForTimeOut+0x82>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	69ba      	ldr	r2, [r7, #24]
 800863c:	429a      	cmp	r2, r3
 800863e:	d302      	bcc.n	8008646 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008640:	2301      	movs	r3, #1
 8008642:	61fb      	str	r3, [r7, #28]
 8008644:	e015      	b.n	8008672 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	429a      	cmp	r2, r3
 800864e:	d20b      	bcs.n	8008668 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	1ad2      	subs	r2, r2, r3
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7ff ff9b 	bl	8008598 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008662:	2300      	movs	r3, #0
 8008664:	61fb      	str	r3, [r7, #28]
 8008666:	e004      	b.n	8008672 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2200      	movs	r2, #0
 800866c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800866e:	2301      	movs	r3, #1
 8008670:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008672:	f000 ff87 	bl	8009584 <vPortExitCritical>

	return xReturn;
 8008676:	69fb      	ldr	r3, [r7, #28]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3720      	adds	r7, #32
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	240014e8 	.word	0x240014e8
 8008684:	240014fc 	.word	0x240014fc

08008688 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008688:	b480      	push	{r7}
 800868a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800868c:	4b03      	ldr	r3, [pc, #12]	; (800869c <vTaskMissedYield+0x14>)
 800868e:	2201      	movs	r2, #1
 8008690:	601a      	str	r2, [r3, #0]
}
 8008692:	bf00      	nop
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	240014f8 	.word	0x240014f8

080086a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086a8:	f000 f852 	bl	8008750 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086ac:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <prvIdleTask+0x28>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d9f9      	bls.n	80086a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80086b4:	4b05      	ldr	r3, [pc, #20]	; (80086cc <prvIdleTask+0x2c>)
 80086b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086c4:	e7f0      	b.n	80086a8 <prvIdleTask+0x8>
 80086c6:	bf00      	nop
 80086c8:	24001014 	.word	0x24001014
 80086cc:	e000ed04 	.word	0xe000ed04

080086d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086d6:	2300      	movs	r3, #0
 80086d8:	607b      	str	r3, [r7, #4]
 80086da:	e00c      	b.n	80086f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4a12      	ldr	r2, [pc, #72]	; (8008730 <prvInitialiseTaskLists+0x60>)
 80086e8:	4413      	add	r3, r2
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fe f8dc 	bl	80068a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3301      	adds	r3, #1
 80086f4:	607b      	str	r3, [r7, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b37      	cmp	r3, #55	; 0x37
 80086fa:	d9ef      	bls.n	80086dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086fc:	480d      	ldr	r0, [pc, #52]	; (8008734 <prvInitialiseTaskLists+0x64>)
 80086fe:	f7fe f8d3 	bl	80068a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008702:	480d      	ldr	r0, [pc, #52]	; (8008738 <prvInitialiseTaskLists+0x68>)
 8008704:	f7fe f8d0 	bl	80068a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008708:	480c      	ldr	r0, [pc, #48]	; (800873c <prvInitialiseTaskLists+0x6c>)
 800870a:	f7fe f8cd 	bl	80068a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800870e:	480c      	ldr	r0, [pc, #48]	; (8008740 <prvInitialiseTaskLists+0x70>)
 8008710:	f7fe f8ca 	bl	80068a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008714:	480b      	ldr	r0, [pc, #44]	; (8008744 <prvInitialiseTaskLists+0x74>)
 8008716:	f7fe f8c7 	bl	80068a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800871a:	4b0b      	ldr	r3, [pc, #44]	; (8008748 <prvInitialiseTaskLists+0x78>)
 800871c:	4a05      	ldr	r2, [pc, #20]	; (8008734 <prvInitialiseTaskLists+0x64>)
 800871e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008720:	4b0a      	ldr	r3, [pc, #40]	; (800874c <prvInitialiseTaskLists+0x7c>)
 8008722:	4a05      	ldr	r2, [pc, #20]	; (8008738 <prvInitialiseTaskLists+0x68>)
 8008724:	601a      	str	r2, [r3, #0]
}
 8008726:	bf00      	nop
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	24001014 	.word	0x24001014
 8008734:	24001474 	.word	0x24001474
 8008738:	24001488 	.word	0x24001488
 800873c:	240014a4 	.word	0x240014a4
 8008740:	240014b8 	.word	0x240014b8
 8008744:	240014d0 	.word	0x240014d0
 8008748:	2400149c 	.word	0x2400149c
 800874c:	240014a0 	.word	0x240014a0

08008750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008756:	e019      	b.n	800878c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008758:	f000 fee4 	bl	8009524 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875c:	4b10      	ldr	r3, [pc, #64]	; (80087a0 <prvCheckTasksWaitingTermination+0x50>)
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	3304      	adds	r3, #4
 8008768:	4618      	mov	r0, r3
 800876a:	f7fe f927 	bl	80069bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800876e:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <prvCheckTasksWaitingTermination+0x54>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3b01      	subs	r3, #1
 8008774:	4a0b      	ldr	r2, [pc, #44]	; (80087a4 <prvCheckTasksWaitingTermination+0x54>)
 8008776:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008778:	4b0b      	ldr	r3, [pc, #44]	; (80087a8 <prvCheckTasksWaitingTermination+0x58>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3b01      	subs	r3, #1
 800877e:	4a0a      	ldr	r2, [pc, #40]	; (80087a8 <prvCheckTasksWaitingTermination+0x58>)
 8008780:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008782:	f000 feff 	bl	8009584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f810 	bl	80087ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800878c:	4b06      	ldr	r3, [pc, #24]	; (80087a8 <prvCheckTasksWaitingTermination+0x58>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e1      	bne.n	8008758 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	240014b8 	.word	0x240014b8
 80087a4:	240014e4 	.word	0x240014e4
 80087a8:	240014cc 	.word	0x240014cc

080087ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3358      	adds	r3, #88	; 0x58
 80087b8:	4618      	mov	r0, r3
 80087ba:	f00f fee7 	bl	801858c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d108      	bne.n	80087da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087cc:	4618      	mov	r0, r3
 80087ce:	f001 f897 	bl	8009900 <vPortFree>
				vPortFree( pxTCB );
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f001 f894 	bl	8009900 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087d8:	e018      	b.n	800880c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d103      	bne.n	80087ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 f88b 	bl	8009900 <vPortFree>
	}
 80087ea:	e00f      	b.n	800880c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d00a      	beq.n	800880c <prvDeleteTCB+0x60>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	60fb      	str	r3, [r7, #12]
}
 8008808:	bf00      	nop
 800880a:	e7fe      	b.n	800880a <prvDeleteTCB+0x5e>
	}
 800880c:	bf00      	nop
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800881a:	4b0c      	ldr	r3, [pc, #48]	; (800884c <prvResetNextTaskUnblockTime+0x38>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d104      	bne.n	800882e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008824:	4b0a      	ldr	r3, [pc, #40]	; (8008850 <prvResetNextTaskUnblockTime+0x3c>)
 8008826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800882a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800882c:	e008      	b.n	8008840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882e:	4b07      	ldr	r3, [pc, #28]	; (800884c <prvResetNextTaskUnblockTime+0x38>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	4a04      	ldr	r2, [pc, #16]	; (8008850 <prvResetNextTaskUnblockTime+0x3c>)
 800883e:	6013      	str	r3, [r2, #0]
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	2400149c 	.word	0x2400149c
 8008850:	24001504 	.word	0x24001504

08008854 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800885a:	4b05      	ldr	r3, [pc, #20]	; (8008870 <xTaskGetCurrentTaskHandle+0x1c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008860:	687b      	ldr	r3, [r7, #4]
	}
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	24001010 	.word	0x24001010

08008874 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800887a:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <xTaskGetSchedulerState+0x34>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d102      	bne.n	8008888 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008882:	2301      	movs	r3, #1
 8008884:	607b      	str	r3, [r7, #4]
 8008886:	e008      	b.n	800889a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008888:	4b08      	ldr	r3, [pc, #32]	; (80088ac <xTaskGetSchedulerState+0x38>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008890:	2302      	movs	r3, #2
 8008892:	607b      	str	r3, [r7, #4]
 8008894:	e001      	b.n	800889a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008896:	2300      	movs	r3, #0
 8008898:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800889a:	687b      	ldr	r3, [r7, #4]
	}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	240014f0 	.word	0x240014f0
 80088ac:	2400150c 	.word	0x2400150c

080088b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d051      	beq.n	800896a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ca:	4b2a      	ldr	r3, [pc, #168]	; (8008974 <xTaskPriorityInherit+0xc4>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d241      	bcs.n	8008958 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	db06      	blt.n	80088ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088dc:	4b25      	ldr	r3, [pc, #148]	; (8008974 <xTaskPriorityInherit+0xc4>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6959      	ldr	r1, [r3, #20]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4a1f      	ldr	r2, [pc, #124]	; (8008978 <xTaskPriorityInherit+0xc8>)
 80088fc:	4413      	add	r3, r2
 80088fe:	4299      	cmp	r1, r3
 8008900:	d122      	bne.n	8008948 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	3304      	adds	r3, #4
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe f858 	bl	80069bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800890c:	4b19      	ldr	r3, [pc, #100]	; (8008974 <xTaskPriorityInherit+0xc4>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891a:	4b18      	ldr	r3, [pc, #96]	; (800897c <xTaskPriorityInherit+0xcc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	429a      	cmp	r2, r3
 8008920:	d903      	bls.n	800892a <xTaskPriorityInherit+0x7a>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008926:	4a15      	ldr	r2, [pc, #84]	; (800897c <xTaskPriorityInherit+0xcc>)
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4a10      	ldr	r2, [pc, #64]	; (8008978 <xTaskPriorityInherit+0xc8>)
 8008938:	441a      	add	r2, r3
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	3304      	adds	r3, #4
 800893e:	4619      	mov	r1, r3
 8008940:	4610      	mov	r0, r2
 8008942:	f7fd ffde 	bl	8006902 <vListInsertEnd>
 8008946:	e004      	b.n	8008952 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008948:	4b0a      	ldr	r3, [pc, #40]	; (8008974 <xTaskPriorityInherit+0xc4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008952:	2301      	movs	r3, #1
 8008954:	60fb      	str	r3, [r7, #12]
 8008956:	e008      	b.n	800896a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800895c:	4b05      	ldr	r3, [pc, #20]	; (8008974 <xTaskPriorityInherit+0xc4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008962:	429a      	cmp	r2, r3
 8008964:	d201      	bcs.n	800896a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008966:	2301      	movs	r3, #1
 8008968:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800896a:	68fb      	ldr	r3, [r7, #12]
	}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	24001010 	.word	0x24001010
 8008978:	24001014 	.word	0x24001014
 800897c:	240014ec 	.word	0x240014ec

08008980 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d056      	beq.n	8008a44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008996:	4b2e      	ldr	r3, [pc, #184]	; (8008a50 <xTaskPriorityDisinherit+0xd0>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	429a      	cmp	r2, r3
 800899e:	d00a      	beq.n	80089b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	60fb      	str	r3, [r7, #12]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	60bb      	str	r3, [r7, #8]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d8:	1e5a      	subs	r2, r3, #1
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d02c      	beq.n	8008a44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d128      	bne.n	8008a44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	3304      	adds	r3, #4
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fd ffe0 	bl	80069bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a14:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <xTaskPriorityDisinherit+0xd4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d903      	bls.n	8008a24 <xTaskPriorityDisinherit+0xa4>
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a20:	4a0c      	ldr	r2, [pc, #48]	; (8008a54 <xTaskPriorityDisinherit+0xd4>)
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4a09      	ldr	r2, [pc, #36]	; (8008a58 <xTaskPriorityDisinherit+0xd8>)
 8008a32:	441a      	add	r2, r3
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	3304      	adds	r3, #4
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	f7fd ff61 	bl	8006902 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a40:	2301      	movs	r3, #1
 8008a42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a44:	697b      	ldr	r3, [r7, #20]
	}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	24001010 	.word	0x24001010
 8008a54:	240014ec 	.word	0x240014ec
 8008a58:	24001014 	.word	0x24001014

08008a5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d06a      	beq.n	8008b4a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	60fb      	str	r3, [r7, #12]
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d902      	bls.n	8008aa2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	e002      	b.n	8008aa8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d04b      	beq.n	8008b4a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d146      	bne.n	8008b4a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008abc:	4b25      	ldr	r3, [pc, #148]	; (8008b54 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	69ba      	ldr	r2, [r7, #24]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d10a      	bne.n	8008adc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	60bb      	str	r3, [r7, #8]
}
 8008ad8:	bf00      	nop
 8008ada:	e7fe      	b.n	8008ada <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	69fa      	ldr	r2, [r7, #28]
 8008ae6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	db04      	blt.n	8008afa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	6959      	ldr	r1, [r3, #20]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4613      	mov	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4a13      	ldr	r2, [pc, #76]	; (8008b58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008b0a:	4413      	add	r3, r2
 8008b0c:	4299      	cmp	r1, r3
 8008b0e:	d11c      	bne.n	8008b4a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fd ff51 	bl	80069bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1e:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d903      	bls.n	8008b2e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2a:	4a0c      	ldr	r2, [pc, #48]	; (8008b5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4a07      	ldr	r2, [pc, #28]	; (8008b58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008b3c:	441a      	add	r2, r3
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	3304      	adds	r3, #4
 8008b42:	4619      	mov	r1, r3
 8008b44:	4610      	mov	r0, r2
 8008b46:	f7fd fedc 	bl	8006902 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b4a:	bf00      	nop
 8008b4c:	3720      	adds	r7, #32
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	24001010 	.word	0x24001010
 8008b58:	24001014 	.word	0x24001014
 8008b5c:	240014ec 	.word	0x240014ec

08008b60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b64:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b6c:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b72:	3201      	adds	r2, #1
 8008b74:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008b76:	4b03      	ldr	r3, [pc, #12]	; (8008b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b78:	681b      	ldr	r3, [r3, #0]
	}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	24001010 	.word	0x24001010

08008b88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b92:	4b21      	ldr	r3, [pc, #132]	; (8008c18 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b98:	4b20      	ldr	r3, [pc, #128]	; (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fd ff0c 	bl	80069bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008baa:	d10a      	bne.n	8008bc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bb2:	4b1a      	ldr	r3, [pc, #104]	; (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4819      	ldr	r0, [pc, #100]	; (8008c20 <prvAddCurrentTaskToDelayedList+0x98>)
 8008bbc:	f7fd fea1 	bl	8006902 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bc0:	e026      	b.n	8008c10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bca:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d209      	bcs.n	8008bee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bda:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3304      	adds	r3, #4
 8008be4:	4619      	mov	r1, r3
 8008be6:	4610      	mov	r0, r2
 8008be8:	f7fd feaf 	bl	800694a <vListInsert>
}
 8008bec:	e010      	b.n	8008c10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bee:	4b0e      	ldr	r3, [pc, #56]	; (8008c28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	f7fd fea5 	bl	800694a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c00:	4b0a      	ldr	r3, [pc, #40]	; (8008c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d202      	bcs.n	8008c10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c0a:	4a08      	ldr	r2, [pc, #32]	; (8008c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	6013      	str	r3, [r2, #0]
}
 8008c10:	bf00      	nop
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	240014e8 	.word	0x240014e8
 8008c1c:	24001010 	.word	0x24001010
 8008c20:	240014d0 	.word	0x240014d0
 8008c24:	240014a0 	.word	0x240014a0
 8008c28:	2400149c 	.word	0x2400149c
 8008c2c:	24001504 	.word	0x24001504

08008c30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	; 0x28
 8008c34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c3a:	f000 fb07 	bl	800924c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c3e:	4b1c      	ldr	r3, [pc, #112]	; (8008cb0 <xTimerCreateTimerTask+0x80>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d021      	beq.n	8008c8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c4e:	1d3a      	adds	r2, r7, #4
 8008c50:	f107 0108 	add.w	r1, r7, #8
 8008c54:	f107 030c 	add.w	r3, r7, #12
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fd fe0b 	bl	8006874 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	9202      	str	r2, [sp, #8]
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	2302      	movs	r3, #2
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	460a      	mov	r2, r1
 8008c70:	4910      	ldr	r1, [pc, #64]	; (8008cb4 <xTimerCreateTimerTask+0x84>)
 8008c72:	4811      	ldr	r0, [pc, #68]	; (8008cb8 <xTimerCreateTimerTask+0x88>)
 8008c74:	f7fe ff90 	bl	8007b98 <xTaskCreateStatic>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	4a10      	ldr	r2, [pc, #64]	; (8008cbc <xTimerCreateTimerTask+0x8c>)
 8008c7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c7e:	4b0f      	ldr	r3, [pc, #60]	; (8008cbc <xTimerCreateTimerTask+0x8c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c86:	2301      	movs	r3, #1
 8008c88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10a      	bne.n	8008ca6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	613b      	str	r3, [r7, #16]
}
 8008ca2:	bf00      	nop
 8008ca4:	e7fe      	b.n	8008ca4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ca6:	697b      	ldr	r3, [r7, #20]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	24001540 	.word	0x24001540
 8008cb4:	0801bbf4 	.word	0x0801bbf4
 8008cb8:	08008df5 	.word	0x08008df5
 8008cbc:	24001544 	.word	0x24001544

08008cc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08a      	sub	sp, #40	; 0x28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10a      	bne.n	8008cee <xTimerGenericCommand+0x2e>
	__asm volatile
 8008cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cdc:	f383 8811 	msr	BASEPRI, r3
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	623b      	str	r3, [r7, #32]
}
 8008cea:	bf00      	nop
 8008cec:	e7fe      	b.n	8008cec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008cee:	4b1a      	ldr	r3, [pc, #104]	; (8008d58 <xTimerGenericCommand+0x98>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d02a      	beq.n	8008d4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b05      	cmp	r3, #5
 8008d06:	dc18      	bgt.n	8008d3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d08:	f7ff fdb4 	bl	8008874 <xTaskGetSchedulerState>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d109      	bne.n	8008d26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d12:	4b11      	ldr	r3, [pc, #68]	; (8008d58 <xTimerGenericCommand+0x98>)
 8008d14:	6818      	ldr	r0, [r3, #0]
 8008d16:	f107 0110 	add.w	r1, r7, #16
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d1e:	f7fe f8d5 	bl	8006ecc <xQueueGenericSend>
 8008d22:	6278      	str	r0, [r7, #36]	; 0x24
 8008d24:	e012      	b.n	8008d4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d26:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <xTimerGenericCommand+0x98>)
 8008d28:	6818      	ldr	r0, [r3, #0]
 8008d2a:	f107 0110 	add.w	r1, r7, #16
 8008d2e:	2300      	movs	r3, #0
 8008d30:	2200      	movs	r2, #0
 8008d32:	f7fe f8cb 	bl	8006ecc <xQueueGenericSend>
 8008d36:	6278      	str	r0, [r7, #36]	; 0x24
 8008d38:	e008      	b.n	8008d4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d3a:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <xTimerGenericCommand+0x98>)
 8008d3c:	6818      	ldr	r0, [r3, #0]
 8008d3e:	f107 0110 	add.w	r1, r7, #16
 8008d42:	2300      	movs	r3, #0
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	f7fe f9bf 	bl	80070c8 <xQueueGenericSendFromISR>
 8008d4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3728      	adds	r7, #40	; 0x28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	24001540 	.word	0x24001540

08008d5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af02      	add	r7, sp, #8
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d66:	4b22      	ldr	r3, [pc, #136]	; (8008df0 <prvProcessExpiredTimer+0x94>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fd fe21 	bl	80069bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d80:	f003 0304 	and.w	r3, r3, #4
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d022      	beq.n	8008dce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	699a      	ldr	r2, [r3, #24]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	18d1      	adds	r1, r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	6978      	ldr	r0, [r7, #20]
 8008d96:	f000 f8d1 	bl	8008f3c <prvInsertTimerInActiveList>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d01f      	beq.n	8008de0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008da0:	2300      	movs	r3, #0
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	2300      	movs	r3, #0
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	2100      	movs	r1, #0
 8008daa:	6978      	ldr	r0, [r7, #20]
 8008dac:	f7ff ff88 	bl	8008cc0 <xTimerGenericCommand>
 8008db0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d113      	bne.n	8008de0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	60fb      	str	r3, [r7, #12]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dd4:	f023 0301 	bic.w	r3, r3, #1
 8008dd8:	b2da      	uxtb	r2, r3
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	6978      	ldr	r0, [r7, #20]
 8008de6:	4798      	blx	r3
}
 8008de8:	bf00      	nop
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	24001538 	.word	0x24001538

08008df4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dfc:	f107 0308 	add.w	r3, r7, #8
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 f857 	bl	8008eb4 <prvGetNextExpireTime>
 8008e06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 f803 	bl	8008e18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e12:	f000 f8d5 	bl	8008fc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e16:	e7f1      	b.n	8008dfc <prvTimerTask+0x8>

08008e18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e22:	f7ff f919 	bl	8008058 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e26:	f107 0308 	add.w	r3, r7, #8
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 f866 	bl	8008efc <prvSampleTimeNow>
 8008e30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d130      	bne.n	8008e9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <prvProcessTimerOrBlockTask+0x3c>
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d806      	bhi.n	8008e54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e46:	f7ff f915 	bl	8008074 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e4a:	68f9      	ldr	r1, [r7, #12]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff ff85 	bl	8008d5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e52:	e024      	b.n	8008e9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d008      	beq.n	8008e6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e5a:	4b13      	ldr	r3, [pc, #76]	; (8008ea8 <prvProcessTimerOrBlockTask+0x90>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <prvProcessTimerOrBlockTask+0x50>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e000      	b.n	8008e6a <prvProcessTimerOrBlockTask+0x52>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e6c:	4b0f      	ldr	r3, [pc, #60]	; (8008eac <prvProcessTimerOrBlockTask+0x94>)
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f7fe fe59 	bl	8007b30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e7e:	f7ff f8f9 	bl	8008074 <xTaskResumeAll>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e88:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <prvProcessTimerOrBlockTask+0x98>)
 8008e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	f3bf 8f6f 	isb	sy
}
 8008e98:	e001      	b.n	8008e9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e9a:	f7ff f8eb 	bl	8008074 <xTaskResumeAll>
}
 8008e9e:	bf00      	nop
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	2400153c 	.word	0x2400153c
 8008eac:	24001540 	.word	0x24001540
 8008eb0:	e000ed04 	.word	0xe000ed04

08008eb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ebc:	4b0e      	ldr	r3, [pc, #56]	; (8008ef8 <prvGetNextExpireTime+0x44>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <prvGetNextExpireTime+0x16>
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	e000      	b.n	8008ecc <prvGetNextExpireTime+0x18>
 8008eca:	2200      	movs	r2, #0
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d105      	bne.n	8008ee4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ed8:	4b07      	ldr	r3, [pc, #28]	; (8008ef8 <prvGetNextExpireTime+0x44>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	e001      	b.n	8008ee8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	24001538 	.word	0x24001538

08008efc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f04:	f7ff f954 	bl	80081b0 <xTaskGetTickCount>
 8008f08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <prvSampleTimeNow+0x3c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d205      	bcs.n	8008f20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f14:	f000 f936 	bl	8009184 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	e002      	b.n	8008f26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f26:	4a04      	ldr	r2, [pc, #16]	; (8008f38 <prvSampleTimeNow+0x3c>)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	24001548 	.word	0x24001548

08008f3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
 8008f48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d812      	bhi.n	8008f88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	1ad2      	subs	r2, r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d302      	bcc.n	8008f76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f70:	2301      	movs	r3, #1
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	e01b      	b.n	8008fae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f76:	4b10      	ldr	r3, [pc, #64]	; (8008fb8 <prvInsertTimerInActiveList+0x7c>)
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4610      	mov	r0, r2
 8008f82:	f7fd fce2 	bl	800694a <vListInsert>
 8008f86:	e012      	b.n	8008fae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d206      	bcs.n	8008f9e <prvInsertTimerInActiveList+0x62>
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d302      	bcc.n	8008f9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	e007      	b.n	8008fae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f9e:	4b07      	ldr	r3, [pc, #28]	; (8008fbc <prvInsertTimerInActiveList+0x80>)
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	4610      	mov	r0, r2
 8008faa:	f7fd fcce 	bl	800694a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008fae:	697b      	ldr	r3, [r7, #20]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	2400153c 	.word	0x2400153c
 8008fbc:	24001538 	.word	0x24001538

08008fc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08e      	sub	sp, #56	; 0x38
 8008fc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fc6:	e0ca      	b.n	800915e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	da18      	bge.n	8009000 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008fce:	1d3b      	adds	r3, r7, #4
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10a      	bne.n	8008ff0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	61fb      	str	r3, [r7, #28]
}
 8008fec:	bf00      	nop
 8008fee:	e7fe      	b.n	8008fee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ff6:	6850      	ldr	r0, [r2, #4]
 8008ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ffa:	6892      	ldr	r2, [r2, #8]
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	f2c0 80aa 	blt.w	800915c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d004      	beq.n	800901e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	3304      	adds	r3, #4
 8009018:	4618      	mov	r0, r3
 800901a:	f7fd fccf 	bl	80069bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800901e:	463b      	mov	r3, r7
 8009020:	4618      	mov	r0, r3
 8009022:	f7ff ff6b 	bl	8008efc <prvSampleTimeNow>
 8009026:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b09      	cmp	r3, #9
 800902c:	f200 8097 	bhi.w	800915e <prvProcessReceivedCommands+0x19e>
 8009030:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <prvProcessReceivedCommands+0x78>)
 8009032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009036:	bf00      	nop
 8009038:	08009061 	.word	0x08009061
 800903c:	08009061 	.word	0x08009061
 8009040:	08009061 	.word	0x08009061
 8009044:	080090d5 	.word	0x080090d5
 8009048:	080090e9 	.word	0x080090e9
 800904c:	08009133 	.word	0x08009133
 8009050:	08009061 	.word	0x08009061
 8009054:	08009061 	.word	0x08009061
 8009058:	080090d5 	.word	0x080090d5
 800905c:	080090e9 	.word	0x080090e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009066:	f043 0301 	orr.w	r3, r3, #1
 800906a:	b2da      	uxtb	r2, r3
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	18d1      	adds	r1, r2, r3
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009080:	f7ff ff5c 	bl	8008f3c <prvInsertTimerInActiveList>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d069      	beq.n	800915e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009090:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	2b00      	cmp	r3, #0
 800909e:	d05e      	beq.n	800915e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	441a      	add	r2, r3
 80090a8:	2300      	movs	r3, #0
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	2300      	movs	r3, #0
 80090ae:	2100      	movs	r1, #0
 80090b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090b2:	f7ff fe05 	bl	8008cc0 <xTimerGenericCommand>
 80090b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d14f      	bne.n	800915e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	61bb      	str	r3, [r7, #24]
}
 80090d0:	bf00      	nop
 80090d2:	e7fe      	b.n	80090d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090da:	f023 0301 	bic.w	r3, r3, #1
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80090e6:	e03a      	b.n	800915e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090ee:	f043 0301 	orr.w	r3, r3, #1
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10a      	bne.n	800911e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	617b      	str	r3, [r7, #20]
}
 800911a:	bf00      	nop
 800911c:	e7fe      	b.n	800911c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	699a      	ldr	r2, [r3, #24]
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	18d1      	adds	r1, r2, r3
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800912a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800912c:	f7ff ff06 	bl	8008f3c <prvInsertTimerInActiveList>
					break;
 8009130:	e015      	b.n	800915e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009138:	f003 0302 	and.w	r3, r3, #2
 800913c:	2b00      	cmp	r3, #0
 800913e:	d103      	bne.n	8009148 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009142:	f000 fbdd 	bl	8009900 <vPortFree>
 8009146:	e00a      	b.n	800915e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800914e:	f023 0301 	bic.w	r3, r3, #1
 8009152:	b2da      	uxtb	r2, r3
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800915a:	e000      	b.n	800915e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800915c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800915e:	4b08      	ldr	r3, [pc, #32]	; (8009180 <prvProcessReceivedCommands+0x1c0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	1d39      	adds	r1, r7, #4
 8009164:	2200      	movs	r2, #0
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe f8d6 	bl	8007318 <xQueueReceive>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	f47f af2a 	bne.w	8008fc8 <prvProcessReceivedCommands+0x8>
	}
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	3730      	adds	r7, #48	; 0x30
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	24001540 	.word	0x24001540

08009184 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800918a:	e048      	b.n	800921e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800918c:	4b2d      	ldr	r3, [pc, #180]	; (8009244 <prvSwitchTimerLists+0xc0>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009196:	4b2b      	ldr	r3, [pc, #172]	; (8009244 <prvSwitchTimerLists+0xc0>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3304      	adds	r3, #4
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fd fc09 	bl	80069bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091b8:	f003 0304 	and.w	r3, r3, #4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d02e      	beq.n	800921e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	4413      	add	r3, r2
 80091c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d90e      	bls.n	80091f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091de:	4b19      	ldr	r3, [pc, #100]	; (8009244 <prvSwitchTimerLists+0xc0>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f7fd fbae 	bl	800694a <vListInsert>
 80091ee:	e016      	b.n	800921e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091f0:	2300      	movs	r3, #0
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	2300      	movs	r3, #0
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	2100      	movs	r1, #0
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f7ff fd60 	bl	8008cc0 <xTimerGenericCommand>
 8009200:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10a      	bne.n	800921e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	603b      	str	r3, [r7, #0]
}
 800921a:	bf00      	nop
 800921c:	e7fe      	b.n	800921c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800921e:	4b09      	ldr	r3, [pc, #36]	; (8009244 <prvSwitchTimerLists+0xc0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1b1      	bne.n	800918c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009228:	4b06      	ldr	r3, [pc, #24]	; (8009244 <prvSwitchTimerLists+0xc0>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800922e:	4b06      	ldr	r3, [pc, #24]	; (8009248 <prvSwitchTimerLists+0xc4>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a04      	ldr	r2, [pc, #16]	; (8009244 <prvSwitchTimerLists+0xc0>)
 8009234:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009236:	4a04      	ldr	r2, [pc, #16]	; (8009248 <prvSwitchTimerLists+0xc4>)
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	6013      	str	r3, [r2, #0]
}
 800923c:	bf00      	nop
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	24001538 	.word	0x24001538
 8009248:	2400153c 	.word	0x2400153c

0800924c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009252:	f000 f967 	bl	8009524 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009256:	4b15      	ldr	r3, [pc, #84]	; (80092ac <prvCheckForValidListAndQueue+0x60>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d120      	bne.n	80092a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800925e:	4814      	ldr	r0, [pc, #80]	; (80092b0 <prvCheckForValidListAndQueue+0x64>)
 8009260:	f7fd fb22 	bl	80068a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009264:	4813      	ldr	r0, [pc, #76]	; (80092b4 <prvCheckForValidListAndQueue+0x68>)
 8009266:	f7fd fb1f 	bl	80068a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800926a:	4b13      	ldr	r3, [pc, #76]	; (80092b8 <prvCheckForValidListAndQueue+0x6c>)
 800926c:	4a10      	ldr	r2, [pc, #64]	; (80092b0 <prvCheckForValidListAndQueue+0x64>)
 800926e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009270:	4b12      	ldr	r3, [pc, #72]	; (80092bc <prvCheckForValidListAndQueue+0x70>)
 8009272:	4a10      	ldr	r2, [pc, #64]	; (80092b4 <prvCheckForValidListAndQueue+0x68>)
 8009274:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009276:	2300      	movs	r3, #0
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	4b11      	ldr	r3, [pc, #68]	; (80092c0 <prvCheckForValidListAndQueue+0x74>)
 800927c:	4a11      	ldr	r2, [pc, #68]	; (80092c4 <prvCheckForValidListAndQueue+0x78>)
 800927e:	2110      	movs	r1, #16
 8009280:	200a      	movs	r0, #10
 8009282:	f7fd fc2d 	bl	8006ae0 <xQueueGenericCreateStatic>
 8009286:	4603      	mov	r3, r0
 8009288:	4a08      	ldr	r2, [pc, #32]	; (80092ac <prvCheckForValidListAndQueue+0x60>)
 800928a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800928c:	4b07      	ldr	r3, [pc, #28]	; (80092ac <prvCheckForValidListAndQueue+0x60>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d005      	beq.n	80092a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009294:	4b05      	ldr	r3, [pc, #20]	; (80092ac <prvCheckForValidListAndQueue+0x60>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	490b      	ldr	r1, [pc, #44]	; (80092c8 <prvCheckForValidListAndQueue+0x7c>)
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fbf4 	bl	8007a88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092a0:	f000 f970 	bl	8009584 <vPortExitCritical>
}
 80092a4:	bf00      	nop
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	24001540 	.word	0x24001540
 80092b0:	24001510 	.word	0x24001510
 80092b4:	24001524 	.word	0x24001524
 80092b8:	24001538 	.word	0x24001538
 80092bc:	2400153c 	.word	0x2400153c
 80092c0:	240015ec 	.word	0x240015ec
 80092c4:	2400154c 	.word	0x2400154c
 80092c8:	0801bbfc 	.word	0x0801bbfc

080092cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	3b04      	subs	r3, #4
 80092dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3b04      	subs	r3, #4
 80092ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	f023 0201 	bic.w	r2, r3, #1
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3b04      	subs	r3, #4
 80092fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092fc:	4a0c      	ldr	r2, [pc, #48]	; (8009330 <pxPortInitialiseStack+0x64>)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3b14      	subs	r3, #20
 8009306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3b04      	subs	r3, #4
 8009312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f06f 0202 	mvn.w	r2, #2
 800931a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	3b20      	subs	r3, #32
 8009320:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009322:	68fb      	ldr	r3, [r7, #12]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	08009335 	.word	0x08009335

08009334 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800933e:	4b12      	ldr	r3, [pc, #72]	; (8009388 <prvTaskExitError+0x54>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009346:	d00a      	beq.n	800935e <prvTaskExitError+0x2a>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	60fb      	str	r3, [r7, #12]
}
 800935a:	bf00      	nop
 800935c:	e7fe      	b.n	800935c <prvTaskExitError+0x28>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	60bb      	str	r3, [r7, #8]
}
 8009370:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009372:	bf00      	nop
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0fc      	beq.n	8009374 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800937a:	bf00      	nop
 800937c:	bf00      	nop
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	24000024 	.word	0x24000024
 800938c:	00000000 	.word	0x00000000

08009390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009390:	4b07      	ldr	r3, [pc, #28]	; (80093b0 <pxCurrentTCBConst2>)
 8009392:	6819      	ldr	r1, [r3, #0]
 8009394:	6808      	ldr	r0, [r1, #0]
 8009396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939a:	f380 8809 	msr	PSP, r0
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f04f 0000 	mov.w	r0, #0
 80093a6:	f380 8811 	msr	BASEPRI, r0
 80093aa:	4770      	bx	lr
 80093ac:	f3af 8000 	nop.w

080093b0 <pxCurrentTCBConst2>:
 80093b0:	24001010 	.word	0x24001010
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop

080093b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093b8:	4808      	ldr	r0, [pc, #32]	; (80093dc <prvPortStartFirstTask+0x24>)
 80093ba:	6800      	ldr	r0, [r0, #0]
 80093bc:	6800      	ldr	r0, [r0, #0]
 80093be:	f380 8808 	msr	MSP, r0
 80093c2:	f04f 0000 	mov.w	r0, #0
 80093c6:	f380 8814 	msr	CONTROL, r0
 80093ca:	b662      	cpsie	i
 80093cc:	b661      	cpsie	f
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	df00      	svc	0
 80093d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093da:	bf00      	nop
 80093dc:	e000ed08 	.word	0xe000ed08

080093e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093e6:	4b46      	ldr	r3, [pc, #280]	; (8009500 <xPortStartScheduler+0x120>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a46      	ldr	r2, [pc, #280]	; (8009504 <xPortStartScheduler+0x124>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d10a      	bne.n	8009406 <xPortStartScheduler+0x26>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	613b      	str	r3, [r7, #16]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009406:	4b3e      	ldr	r3, [pc, #248]	; (8009500 <xPortStartScheduler+0x120>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a3f      	ldr	r2, [pc, #252]	; (8009508 <xPortStartScheduler+0x128>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d10a      	bne.n	8009426 <xPortStartScheduler+0x46>
	__asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	60fb      	str	r3, [r7, #12]
}
 8009422:	bf00      	nop
 8009424:	e7fe      	b.n	8009424 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009426:	4b39      	ldr	r3, [pc, #228]	; (800950c <xPortStartScheduler+0x12c>)
 8009428:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	b2db      	uxtb	r3, r3
 8009430:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	22ff      	movs	r2, #255	; 0xff
 8009436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	b2db      	uxtb	r3, r3
 800943e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009448:	b2da      	uxtb	r2, r3
 800944a:	4b31      	ldr	r3, [pc, #196]	; (8009510 <xPortStartScheduler+0x130>)
 800944c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800944e:	4b31      	ldr	r3, [pc, #196]	; (8009514 <xPortStartScheduler+0x134>)
 8009450:	2207      	movs	r2, #7
 8009452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009454:	e009      	b.n	800946a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009456:	4b2f      	ldr	r3, [pc, #188]	; (8009514 <xPortStartScheduler+0x134>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3b01      	subs	r3, #1
 800945c:	4a2d      	ldr	r2, [pc, #180]	; (8009514 <xPortStartScheduler+0x134>)
 800945e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009460:	78fb      	ldrb	r3, [r7, #3]
 8009462:	b2db      	uxtb	r3, r3
 8009464:	005b      	lsls	r3, r3, #1
 8009466:	b2db      	uxtb	r3, r3
 8009468:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009472:	2b80      	cmp	r3, #128	; 0x80
 8009474:	d0ef      	beq.n	8009456 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009476:	4b27      	ldr	r3, [pc, #156]	; (8009514 <xPortStartScheduler+0x134>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f1c3 0307 	rsb	r3, r3, #7
 800947e:	2b04      	cmp	r3, #4
 8009480:	d00a      	beq.n	8009498 <xPortStartScheduler+0xb8>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	60bb      	str	r3, [r7, #8]
}
 8009494:	bf00      	nop
 8009496:	e7fe      	b.n	8009496 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009498:	4b1e      	ldr	r3, [pc, #120]	; (8009514 <xPortStartScheduler+0x134>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	021b      	lsls	r3, r3, #8
 800949e:	4a1d      	ldr	r2, [pc, #116]	; (8009514 <xPortStartScheduler+0x134>)
 80094a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094a2:	4b1c      	ldr	r3, [pc, #112]	; (8009514 <xPortStartScheduler+0x134>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094aa:	4a1a      	ldr	r2, [pc, #104]	; (8009514 <xPortStartScheduler+0x134>)
 80094ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094b6:	4b18      	ldr	r3, [pc, #96]	; (8009518 <xPortStartScheduler+0x138>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a17      	ldr	r2, [pc, #92]	; (8009518 <xPortStartScheduler+0x138>)
 80094bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094c2:	4b15      	ldr	r3, [pc, #84]	; (8009518 <xPortStartScheduler+0x138>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a14      	ldr	r2, [pc, #80]	; (8009518 <xPortStartScheduler+0x138>)
 80094c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094ce:	f000 f8dd 	bl	800968c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094d2:	4b12      	ldr	r3, [pc, #72]	; (800951c <xPortStartScheduler+0x13c>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80094d8:	f000 f8fc 	bl	80096d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80094dc:	4b10      	ldr	r3, [pc, #64]	; (8009520 <xPortStartScheduler+0x140>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a0f      	ldr	r2, [pc, #60]	; (8009520 <xPortStartScheduler+0x140>)
 80094e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80094e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094e8:	f7ff ff66 	bl	80093b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094ec:	f7fe ff3c 	bl	8008368 <vTaskSwitchContext>
	prvTaskExitError();
 80094f0:	f7ff ff20 	bl	8009334 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	e000ed00 	.word	0xe000ed00
 8009504:	410fc271 	.word	0x410fc271
 8009508:	410fc270 	.word	0x410fc270
 800950c:	e000e400 	.word	0xe000e400
 8009510:	2400163c 	.word	0x2400163c
 8009514:	24001640 	.word	0x24001640
 8009518:	e000ed20 	.word	0xe000ed20
 800951c:	24000024 	.word	0x24000024
 8009520:	e000ef34 	.word	0xe000ef34

08009524 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
	__asm volatile
 800952a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	607b      	str	r3, [r7, #4]
}
 800953c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800953e:	4b0f      	ldr	r3, [pc, #60]	; (800957c <vPortEnterCritical+0x58>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3301      	adds	r3, #1
 8009544:	4a0d      	ldr	r2, [pc, #52]	; (800957c <vPortEnterCritical+0x58>)
 8009546:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009548:	4b0c      	ldr	r3, [pc, #48]	; (800957c <vPortEnterCritical+0x58>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d10f      	bne.n	8009570 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009550:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <vPortEnterCritical+0x5c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <vPortEnterCritical+0x4c>
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	603b      	str	r3, [r7, #0]
}
 800956c:	bf00      	nop
 800956e:	e7fe      	b.n	800956e <vPortEnterCritical+0x4a>
	}
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	24000024 	.word	0x24000024
 8009580:	e000ed04 	.word	0xe000ed04

08009584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800958a:	4b12      	ldr	r3, [pc, #72]	; (80095d4 <vPortExitCritical+0x50>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <vPortExitCritical+0x24>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	607b      	str	r3, [r7, #4]
}
 80095a4:	bf00      	nop
 80095a6:	e7fe      	b.n	80095a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095a8:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <vPortExitCritical+0x50>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	4a09      	ldr	r2, [pc, #36]	; (80095d4 <vPortExitCritical+0x50>)
 80095b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095b2:	4b08      	ldr	r3, [pc, #32]	; (80095d4 <vPortExitCritical+0x50>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d105      	bne.n	80095c6 <vPortExitCritical+0x42>
 80095ba:	2300      	movs	r3, #0
 80095bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	f383 8811 	msr	BASEPRI, r3
}
 80095c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	24000024 	.word	0x24000024
	...

080095e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095e0:	f3ef 8009 	mrs	r0, PSP
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	4b15      	ldr	r3, [pc, #84]	; (8009640 <pxCurrentTCBConst>)
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	f01e 0f10 	tst.w	lr, #16
 80095f0:	bf08      	it	eq
 80095f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fa:	6010      	str	r0, [r2, #0]
 80095fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009604:	f380 8811 	msr	BASEPRI, r0
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f7fe feaa 	bl	8008368 <vTaskSwitchContext>
 8009614:	f04f 0000 	mov.w	r0, #0
 8009618:	f380 8811 	msr	BASEPRI, r0
 800961c:	bc09      	pop	{r0, r3}
 800961e:	6819      	ldr	r1, [r3, #0]
 8009620:	6808      	ldr	r0, [r1, #0]
 8009622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009626:	f01e 0f10 	tst.w	lr, #16
 800962a:	bf08      	it	eq
 800962c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009630:	f380 8809 	msr	PSP, r0
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	f3af 8000 	nop.w

08009640 <pxCurrentTCBConst>:
 8009640:	24001010 	.word	0x24001010
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009644:	bf00      	nop
 8009646:	bf00      	nop

08009648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	607b      	str	r3, [r7, #4]
}
 8009660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009662:	f7fe fdc7 	bl	80081f4 <xTaskIncrementTick>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d003      	beq.n	8009674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800966c:	4b06      	ldr	r3, [pc, #24]	; (8009688 <xPortSysTickHandler+0x40>)
 800966e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	f383 8811 	msr	BASEPRI, r3
}
 800967e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	e000ed04 	.word	0xe000ed04

0800968c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800968c:	b480      	push	{r7}
 800968e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009690:	4b0b      	ldr	r3, [pc, #44]	; (80096c0 <vPortSetupTimerInterrupt+0x34>)
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009696:	4b0b      	ldr	r3, [pc, #44]	; (80096c4 <vPortSetupTimerInterrupt+0x38>)
 8009698:	2200      	movs	r2, #0
 800969a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800969c:	4b0a      	ldr	r3, [pc, #40]	; (80096c8 <vPortSetupTimerInterrupt+0x3c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a0a      	ldr	r2, [pc, #40]	; (80096cc <vPortSetupTimerInterrupt+0x40>)
 80096a2:	fba2 2303 	umull	r2, r3, r2, r3
 80096a6:	099b      	lsrs	r3, r3, #6
 80096a8:	4a09      	ldr	r2, [pc, #36]	; (80096d0 <vPortSetupTimerInterrupt+0x44>)
 80096aa:	3b01      	subs	r3, #1
 80096ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096ae:	4b04      	ldr	r3, [pc, #16]	; (80096c0 <vPortSetupTimerInterrupt+0x34>)
 80096b0:	2207      	movs	r2, #7
 80096b2:	601a      	str	r2, [r3, #0]
}
 80096b4:	bf00      	nop
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	e000e010 	.word	0xe000e010
 80096c4:	e000e018 	.word	0xe000e018
 80096c8:	24000000 	.word	0x24000000
 80096cc:	10624dd3 	.word	0x10624dd3
 80096d0:	e000e014 	.word	0xe000e014

080096d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80096d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80096e4 <vPortEnableVFP+0x10>
 80096d8:	6801      	ldr	r1, [r0, #0]
 80096da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80096de:	6001      	str	r1, [r0, #0]
 80096e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096e2:	bf00      	nop
 80096e4:	e000ed88 	.word	0xe000ed88

080096e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096ee:	f3ef 8305 	mrs	r3, IPSR
 80096f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2b0f      	cmp	r3, #15
 80096f8:	d914      	bls.n	8009724 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096fa:	4a17      	ldr	r2, [pc, #92]	; (8009758 <vPortValidateInterruptPriority+0x70>)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4413      	add	r3, r2
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009704:	4b15      	ldr	r3, [pc, #84]	; (800975c <vPortValidateInterruptPriority+0x74>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	7afa      	ldrb	r2, [r7, #11]
 800970a:	429a      	cmp	r2, r3
 800970c:	d20a      	bcs.n	8009724 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	607b      	str	r3, [r7, #4]
}
 8009720:	bf00      	nop
 8009722:	e7fe      	b.n	8009722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009724:	4b0e      	ldr	r3, [pc, #56]	; (8009760 <vPortValidateInterruptPriority+0x78>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800972c:	4b0d      	ldr	r3, [pc, #52]	; (8009764 <vPortValidateInterruptPriority+0x7c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	429a      	cmp	r2, r3
 8009732:	d90a      	bls.n	800974a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	603b      	str	r3, [r7, #0]
}
 8009746:	bf00      	nop
 8009748:	e7fe      	b.n	8009748 <vPortValidateInterruptPriority+0x60>
	}
 800974a:	bf00      	nop
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	e000e3f0 	.word	0xe000e3f0
 800975c:	2400163c 	.word	0x2400163c
 8009760:	e000ed0c 	.word	0xe000ed0c
 8009764:	24001640 	.word	0x24001640

08009768 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08a      	sub	sp, #40	; 0x28
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009770:	2300      	movs	r3, #0
 8009772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009774:	f7fe fc70 	bl	8008058 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009778:	4b5b      	ldr	r3, [pc, #364]	; (80098e8 <pvPortMalloc+0x180>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009780:	f000 f920 	bl	80099c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009784:	4b59      	ldr	r3, [pc, #356]	; (80098ec <pvPortMalloc+0x184>)
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4013      	ands	r3, r2
 800978c:	2b00      	cmp	r3, #0
 800978e:	f040 8093 	bne.w	80098b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01d      	beq.n	80097d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009798:	2208      	movs	r2, #8
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4413      	add	r3, r2
 800979e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f003 0307 	and.w	r3, r3, #7
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d014      	beq.n	80097d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f023 0307 	bic.w	r3, r3, #7
 80097b0:	3308      	adds	r3, #8
 80097b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00a      	beq.n	80097d4 <pvPortMalloc+0x6c>
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	617b      	str	r3, [r7, #20]
}
 80097d0:	bf00      	nop
 80097d2:	e7fe      	b.n	80097d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d06e      	beq.n	80098b8 <pvPortMalloc+0x150>
 80097da:	4b45      	ldr	r3, [pc, #276]	; (80098f0 <pvPortMalloc+0x188>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d869      	bhi.n	80098b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097e4:	4b43      	ldr	r3, [pc, #268]	; (80098f4 <pvPortMalloc+0x18c>)
 80097e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097e8:	4b42      	ldr	r3, [pc, #264]	; (80098f4 <pvPortMalloc+0x18c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097ee:	e004      	b.n	80097fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	429a      	cmp	r2, r3
 8009802:	d903      	bls.n	800980c <pvPortMalloc+0xa4>
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1f1      	bne.n	80097f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800980c:	4b36      	ldr	r3, [pc, #216]	; (80098e8 <pvPortMalloc+0x180>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009812:	429a      	cmp	r2, r3
 8009814:	d050      	beq.n	80098b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009816:	6a3b      	ldr	r3, [r7, #32]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2208      	movs	r2, #8
 800981c:	4413      	add	r3, r2
 800981e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	1ad2      	subs	r2, r2, r3
 8009830:	2308      	movs	r3, #8
 8009832:	005b      	lsls	r3, r3, #1
 8009834:	429a      	cmp	r2, r3
 8009836:	d91f      	bls.n	8009878 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4413      	add	r3, r2
 800983e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	f003 0307 	and.w	r3, r3, #7
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00a      	beq.n	8009860 <pvPortMalloc+0xf8>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	613b      	str	r3, [r7, #16]
}
 800985c:	bf00      	nop
 800985e:	e7fe      	b.n	800985e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	685a      	ldr	r2, [r3, #4]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	1ad2      	subs	r2, r2, r3
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009872:	69b8      	ldr	r0, [r7, #24]
 8009874:	f000 f908 	bl	8009a88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009878:	4b1d      	ldr	r3, [pc, #116]	; (80098f0 <pvPortMalloc+0x188>)
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	4a1b      	ldr	r2, [pc, #108]	; (80098f0 <pvPortMalloc+0x188>)
 8009884:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009886:	4b1a      	ldr	r3, [pc, #104]	; (80098f0 <pvPortMalloc+0x188>)
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	4b1b      	ldr	r3, [pc, #108]	; (80098f8 <pvPortMalloc+0x190>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	429a      	cmp	r2, r3
 8009890:	d203      	bcs.n	800989a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009892:	4b17      	ldr	r3, [pc, #92]	; (80098f0 <pvPortMalloc+0x188>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a18      	ldr	r2, [pc, #96]	; (80098f8 <pvPortMalloc+0x190>)
 8009898:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	4b13      	ldr	r3, [pc, #76]	; (80098ec <pvPortMalloc+0x184>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	431a      	orrs	r2, r3
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098ae:	4b13      	ldr	r3, [pc, #76]	; (80098fc <pvPortMalloc+0x194>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3301      	adds	r3, #1
 80098b4:	4a11      	ldr	r2, [pc, #68]	; (80098fc <pvPortMalloc+0x194>)
 80098b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098b8:	f7fe fbdc 	bl	8008074 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	f003 0307 	and.w	r3, r3, #7
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00a      	beq.n	80098dc <pvPortMalloc+0x174>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	60fb      	str	r3, [r7, #12]
}
 80098d8:	bf00      	nop
 80098da:	e7fe      	b.n	80098da <pvPortMalloc+0x172>
	return pvReturn;
 80098dc:	69fb      	ldr	r3, [r7, #28]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3728      	adds	r7, #40	; 0x28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	2400b64c 	.word	0x2400b64c
 80098ec:	2400b660 	.word	0x2400b660
 80098f0:	2400b650 	.word	0x2400b650
 80098f4:	2400b644 	.word	0x2400b644
 80098f8:	2400b654 	.word	0x2400b654
 80098fc:	2400b658 	.word	0x2400b658

08009900 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d04d      	beq.n	80099ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009912:	2308      	movs	r3, #8
 8009914:	425b      	negs	r3, r3
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	4413      	add	r3, r2
 800991a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	4b24      	ldr	r3, [pc, #144]	; (80099b8 <vPortFree+0xb8>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4013      	ands	r3, r2
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10a      	bne.n	8009944 <vPortFree+0x44>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	60fb      	str	r3, [r7, #12]
}
 8009940:	bf00      	nop
 8009942:	e7fe      	b.n	8009942 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00a      	beq.n	8009962 <vPortFree+0x62>
	__asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	60bb      	str	r3, [r7, #8]
}
 800995e:	bf00      	nop
 8009960:	e7fe      	b.n	8009960 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	4b14      	ldr	r3, [pc, #80]	; (80099b8 <vPortFree+0xb8>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4013      	ands	r3, r2
 800996c:	2b00      	cmp	r3, #0
 800996e:	d01e      	beq.n	80099ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d11a      	bne.n	80099ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	4b0e      	ldr	r3, [pc, #56]	; (80099b8 <vPortFree+0xb8>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	43db      	mvns	r3, r3
 8009982:	401a      	ands	r2, r3
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009988:	f7fe fb66 	bl	8008058 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	4b0a      	ldr	r3, [pc, #40]	; (80099bc <vPortFree+0xbc>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4413      	add	r3, r2
 8009996:	4a09      	ldr	r2, [pc, #36]	; (80099bc <vPortFree+0xbc>)
 8009998:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800999a:	6938      	ldr	r0, [r7, #16]
 800999c:	f000 f874 	bl	8009a88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099a0:	4b07      	ldr	r3, [pc, #28]	; (80099c0 <vPortFree+0xc0>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3301      	adds	r3, #1
 80099a6:	4a06      	ldr	r2, [pc, #24]	; (80099c0 <vPortFree+0xc0>)
 80099a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099aa:	f7fe fb63 	bl	8008074 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099ae:	bf00      	nop
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	2400b660 	.word	0x2400b660
 80099bc:	2400b650 	.word	0x2400b650
 80099c0:	2400b65c 	.word	0x2400b65c

080099c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099ca:	f649 73fe 	movw	r3, #40958	; 0x9ffe
 80099ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099d0:	4b27      	ldr	r3, [pc, #156]	; (8009a70 <prvHeapInit+0xac>)
 80099d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00c      	beq.n	80099f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3307      	adds	r3, #7
 80099e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f023 0307 	bic.w	r3, r3, #7
 80099ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	4a1f      	ldr	r2, [pc, #124]	; (8009a70 <prvHeapInit+0xac>)
 80099f4:	4413      	add	r3, r2
 80099f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099fc:	4a1d      	ldr	r2, [pc, #116]	; (8009a74 <prvHeapInit+0xb0>)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a02:	4b1c      	ldr	r3, [pc, #112]	; (8009a74 <prvHeapInit+0xb0>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a10:	2208      	movs	r2, #8
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	1a9b      	subs	r3, r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f023 0307 	bic.w	r3, r3, #7
 8009a1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4a15      	ldr	r2, [pc, #84]	; (8009a78 <prvHeapInit+0xb4>)
 8009a24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a26:	4b14      	ldr	r3, [pc, #80]	; (8009a78 <prvHeapInit+0xb4>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a2e:	4b12      	ldr	r3, [pc, #72]	; (8009a78 <prvHeapInit+0xb4>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2200      	movs	r2, #0
 8009a34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	1ad2      	subs	r2, r2, r3
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a44:	4b0c      	ldr	r3, [pc, #48]	; (8009a78 <prvHeapInit+0xb4>)
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	4a0a      	ldr	r2, [pc, #40]	; (8009a7c <prvHeapInit+0xb8>)
 8009a52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	4a09      	ldr	r2, [pc, #36]	; (8009a80 <prvHeapInit+0xbc>)
 8009a5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a5c:	4b09      	ldr	r3, [pc, #36]	; (8009a84 <prvHeapInit+0xc0>)
 8009a5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a62:	601a      	str	r2, [r3, #0]
}
 8009a64:	bf00      	nop
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	24001644 	.word	0x24001644
 8009a74:	2400b644 	.word	0x2400b644
 8009a78:	2400b64c 	.word	0x2400b64c
 8009a7c:	2400b654 	.word	0x2400b654
 8009a80:	2400b650 	.word	0x2400b650
 8009a84:	2400b660 	.word	0x2400b660

08009a88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a90:	4b28      	ldr	r3, [pc, #160]	; (8009b34 <prvInsertBlockIntoFreeList+0xac>)
 8009a92:	60fb      	str	r3, [r7, #12]
 8009a94:	e002      	b.n	8009a9c <prvInsertBlockIntoFreeList+0x14>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	60fb      	str	r3, [r7, #12]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d8f7      	bhi.n	8009a96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d108      	bne.n	8009aca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	441a      	add	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	441a      	add	r2, r3
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d118      	bne.n	8009b10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	4b15      	ldr	r3, [pc, #84]	; (8009b38 <prvInsertBlockIntoFreeList+0xb0>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d00d      	beq.n	8009b06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685a      	ldr	r2, [r3, #4]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	441a      	add	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	e008      	b.n	8009b18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b06:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <prvInsertBlockIntoFreeList+0xb0>)
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	e003      	b.n	8009b18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d002      	beq.n	8009b26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b26:	bf00      	nop
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	2400b644 	.word	0x2400b644
 8009b38:	2400b64c 	.word	0x2400b64c

08009b3c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009b46:	f007 fce5 	bl	8011514 <sys_timeouts_sleeptime>
 8009b4a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b52:	d10b      	bne.n	8009b6c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009b54:	4813      	ldr	r0, [pc, #76]	; (8009ba4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b56:	f00a fd66 	bl	8014626 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f00a fcee 	bl	8014540 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009b64:	480f      	ldr	r0, [pc, #60]	; (8009ba4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b66:	f00a fd4f 	bl	8014608 <sys_mutex_lock>
    return;
 8009b6a:	e018      	b.n	8009b9e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d102      	bne.n	8009b78 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009b72:	f007 fc95 	bl	80114a0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009b76:	e7e6      	b.n	8009b46 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009b78:	480a      	ldr	r0, [pc, #40]	; (8009ba4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b7a:	f00a fd54 	bl	8014626 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f00a fcdc 	bl	8014540 <sys_arch_mbox_fetch>
 8009b88:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009b8a:	4806      	ldr	r0, [pc, #24]	; (8009ba4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b8c:	f00a fd3c 	bl	8014608 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b96:	d102      	bne.n	8009b9e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009b98:	f007 fc82 	bl	80114a0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009b9c:	e7d3      	b.n	8009b46 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	2400bddc 	.word	0x2400bddc

08009ba8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009bb0:	4810      	ldr	r0, [pc, #64]	; (8009bf4 <tcpip_thread+0x4c>)
 8009bb2:	f00a fd29 	bl	8014608 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009bb6:	4b10      	ldr	r3, [pc, #64]	; (8009bf8 <tcpip_thread+0x50>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d005      	beq.n	8009bca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009bbe:	4b0e      	ldr	r3, [pc, #56]	; (8009bf8 <tcpip_thread+0x50>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a0e      	ldr	r2, [pc, #56]	; (8009bfc <tcpip_thread+0x54>)
 8009bc4:	6812      	ldr	r2, [r2, #0]
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009bca:	f107 030c 	add.w	r3, r7, #12
 8009bce:	4619      	mov	r1, r3
 8009bd0:	480b      	ldr	r0, [pc, #44]	; (8009c00 <tcpip_thread+0x58>)
 8009bd2:	f7ff ffb3 	bl	8009b3c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d106      	bne.n	8009bea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009bdc:	4b09      	ldr	r3, [pc, #36]	; (8009c04 <tcpip_thread+0x5c>)
 8009bde:	2291      	movs	r2, #145	; 0x91
 8009be0:	4909      	ldr	r1, [pc, #36]	; (8009c08 <tcpip_thread+0x60>)
 8009be2:	480a      	ldr	r0, [pc, #40]	; (8009c0c <tcpip_thread+0x64>)
 8009be4:	f00e fc6c 	bl	80184c0 <iprintf>
      continue;
 8009be8:	e003      	b.n	8009bf2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 f80f 	bl	8009c10 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009bf2:	e7ea      	b.n	8009bca <tcpip_thread+0x22>
 8009bf4:	2400bddc 	.word	0x2400bddc
 8009bf8:	2400b664 	.word	0x2400b664
 8009bfc:	2400b668 	.word	0x2400b668
 8009c00:	2400b66c 	.word	0x2400b66c
 8009c04:	0801bc04 	.word	0x0801bc04
 8009c08:	0801bc34 	.word	0x0801bc34
 8009c0c:	0801bc54 	.word	0x0801bc54

08009c10 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d84f      	bhi.n	8009cc0 <tcpip_thread_handle_msg+0xb0>
 8009c20:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <tcpip_thread_handle_msg+0x18>)
 8009c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c26:	bf00      	nop
 8009c28:	08009c3d 	.word	0x08009c3d
 8009c2c:	08009c67 	.word	0x08009c67
 8009c30:	08009c83 	.word	0x08009c83
 8009c34:	08009c9d 	.word	0x08009c9d
 8009c38:	08009cb3 	.word	0x08009cb3
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	6850      	ldr	r0, [r2, #4]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	6892      	ldr	r2, [r2, #8]
 8009c48:	4611      	mov	r1, r2
 8009c4a:	4798      	blx	r3
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d004      	beq.n	8009c5c <tcpip_thread_handle_msg+0x4c>
        pbuf_free(msg->msg.inp.p);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 fd22 	bl	800b6a0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	2009      	movs	r0, #9
 8009c60:	f000 fe7a 	bl	800a958 <memp_free>
      break;
 8009c64:	e033      	b.n	8009cce <tcpip_thread_handle_msg+0xbe>
#endif /* !LWIP_TCPIP_CORE_LOCKING_INPUT */

#if LWIP_TCPIP_TIMEOUT && LWIP_TIMERS
    case TCPIP_MSG_TIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6858      	ldr	r0, [r3, #4]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6899      	ldr	r1, [r3, #8]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	461a      	mov	r2, r3
 8009c74:	f007 fbb4 	bl	80113e0 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009c78:	6879      	ldr	r1, [r7, #4]
 8009c7a:	2008      	movs	r0, #8
 8009c7c:	f000 fe6c 	bl	800a958 <memp_free>
      break;
 8009c80:	e025      	b.n	8009cce <tcpip_thread_handle_msg+0xbe>
    case TCPIP_MSG_UNTIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	689a      	ldr	r2, [r3, #8]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	f007 fbcd 	bl	801142c <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	2008      	movs	r0, #8
 8009c96:	f000 fe5f 	bl	800a958 <memp_free>
      break;
 8009c9a:	e018      	b.n	8009cce <tcpip_thread_handle_msg+0xbe>
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	6892      	ldr	r2, [r2, #8]
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009ca8:	6879      	ldr	r1, [r7, #4]
 8009caa:	2008      	movs	r0, #8
 8009cac:	f000 fe54 	bl	800a958 <memp_free>
      break;
 8009cb0:	e00d      	b.n	8009cce <tcpip_thread_handle_msg+0xbe>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	6892      	ldr	r2, [r2, #8]
 8009cba:	4610      	mov	r0, r2
 8009cbc:	4798      	blx	r3
      break;
 8009cbe:	e006      	b.n	8009cce <tcpip_thread_handle_msg+0xbe>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009cc0:	4b05      	ldr	r3, [pc, #20]	; (8009cd8 <tcpip_thread_handle_msg+0xc8>)
 8009cc2:	22cf      	movs	r2, #207	; 0xcf
 8009cc4:	4905      	ldr	r1, [pc, #20]	; (8009cdc <tcpip_thread_handle_msg+0xcc>)
 8009cc6:	4806      	ldr	r0, [pc, #24]	; (8009ce0 <tcpip_thread_handle_msg+0xd0>)
 8009cc8:	f00e fbfa 	bl	80184c0 <iprintf>
      break;
 8009ccc:	bf00      	nop
  }
}
 8009cce:	bf00      	nop
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	0801bc04 	.word	0x0801bc04
 8009cdc:	0801bc34 	.word	0x0801bc34
 8009ce0:	0801bc54 	.word	0x0801bc54

08009ce4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009cf0:	481a      	ldr	r0, [pc, #104]	; (8009d5c <tcpip_inpkt+0x78>)
 8009cf2:	f00a fc56 	bl	80145a2 <sys_mbox_valid>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d105      	bne.n	8009d08 <tcpip_inpkt+0x24>
 8009cfc:	4b18      	ldr	r3, [pc, #96]	; (8009d60 <tcpip_inpkt+0x7c>)
 8009cfe:	22fc      	movs	r2, #252	; 0xfc
 8009d00:	4918      	ldr	r1, [pc, #96]	; (8009d64 <tcpip_inpkt+0x80>)
 8009d02:	4819      	ldr	r0, [pc, #100]	; (8009d68 <tcpip_inpkt+0x84>)
 8009d04:	f00e fbdc 	bl	80184c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009d08:	2009      	movs	r0, #9
 8009d0a:	f000 fdaf 	bl	800a86c <memp_malloc>
 8009d0e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d102      	bne.n	8009d1c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d1a:	e01a      	b.n	8009d52 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009d34:	6979      	ldr	r1, [r7, #20]
 8009d36:	4809      	ldr	r0, [pc, #36]	; (8009d5c <tcpip_inpkt+0x78>)
 8009d38:	f00a fbe8 	bl	801450c <sys_mbox_trypost>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d006      	beq.n	8009d50 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009d42:	6979      	ldr	r1, [r7, #20]
 8009d44:	2009      	movs	r0, #9
 8009d46:	f000 fe07 	bl	800a958 <memp_free>
    return ERR_MEM;
 8009d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d4e:	e000      	b.n	8009d52 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009d50:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	2400b66c 	.word	0x2400b66c
 8009d60:	0801bc04 	.word	0x0801bc04
 8009d64:	0801bc7c 	.word	0x0801bc7c
 8009d68:	0801bc54 	.word	0x0801bc54

08009d6c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009d7c:	f003 0318 	and.w	r3, r3, #24
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d006      	beq.n	8009d92 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009d84:	4a08      	ldr	r2, [pc, #32]	; (8009da8 <tcpip_input+0x3c>)
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff ffab 	bl	8009ce4 <tcpip_inpkt>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	e005      	b.n	8009d9e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009d92:	4a06      	ldr	r2, [pc, #24]	; (8009dac <tcpip_input+0x40>)
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7ff ffa4 	bl	8009ce4 <tcpip_inpkt>
 8009d9c:	4603      	mov	r3, r0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	0801432d 	.word	0x0801432d
 8009dac:	08013241 	.word	0x08013241

08009db0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009dba:	4819      	ldr	r0, [pc, #100]	; (8009e20 <tcpip_try_callback+0x70>)
 8009dbc:	f00a fbf1 	bl	80145a2 <sys_mbox_valid>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d106      	bne.n	8009dd4 <tcpip_try_callback+0x24>
 8009dc6:	4b17      	ldr	r3, [pc, #92]	; (8009e24 <tcpip_try_callback+0x74>)
 8009dc8:	f240 125d 	movw	r2, #349	; 0x15d
 8009dcc:	4916      	ldr	r1, [pc, #88]	; (8009e28 <tcpip_try_callback+0x78>)
 8009dce:	4817      	ldr	r0, [pc, #92]	; (8009e2c <tcpip_try_callback+0x7c>)
 8009dd0:	f00e fb76 	bl	80184c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009dd4:	2008      	movs	r0, #8
 8009dd6:	f000 fd49 	bl	800a86c <memp_malloc>
 8009dda:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d102      	bne.n	8009de8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009de6:	e017      	b.n	8009e18 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2203      	movs	r2, #3
 8009dec:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009dfa:	68f9      	ldr	r1, [r7, #12]
 8009dfc:	4808      	ldr	r0, [pc, #32]	; (8009e20 <tcpip_try_callback+0x70>)
 8009dfe:	f00a fb85 	bl	801450c <sys_mbox_trypost>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d006      	beq.n	8009e16 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009e08:	68f9      	ldr	r1, [r7, #12]
 8009e0a:	2008      	movs	r0, #8
 8009e0c:	f000 fda4 	bl	800a958 <memp_free>
    return ERR_MEM;
 8009e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e14:	e000      	b.n	8009e18 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	2400b66c 	.word	0x2400b66c
 8009e24:	0801bc04 	.word	0x0801bc04
 8009e28:	0801bc7c 	.word	0x0801bc7c
 8009e2c:	0801bc54 	.word	0x0801bc54

08009e30 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009e3a:	f000 f871 	bl	8009f20 <lwip_init>

  tcpip_init_done = initfunc;
 8009e3e:	4a17      	ldr	r2, [pc, #92]	; (8009e9c <tcpip_init+0x6c>)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009e44:	4a16      	ldr	r2, [pc, #88]	; (8009ea0 <tcpip_init+0x70>)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009e4a:	2106      	movs	r1, #6
 8009e4c:	4815      	ldr	r0, [pc, #84]	; (8009ea4 <tcpip_init+0x74>)
 8009e4e:	f00a fb43 	bl	80144d8 <sys_mbox_new>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d006      	beq.n	8009e66 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009e58:	4b13      	ldr	r3, [pc, #76]	; (8009ea8 <tcpip_init+0x78>)
 8009e5a:	f240 2261 	movw	r2, #609	; 0x261
 8009e5e:	4913      	ldr	r1, [pc, #76]	; (8009eac <tcpip_init+0x7c>)
 8009e60:	4813      	ldr	r0, [pc, #76]	; (8009eb0 <tcpip_init+0x80>)
 8009e62:	f00e fb2d 	bl	80184c0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009e66:	4813      	ldr	r0, [pc, #76]	; (8009eb4 <tcpip_init+0x84>)
 8009e68:	f00a fbb8 	bl	80145dc <sys_mutex_new>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d006      	beq.n	8009e80 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009e72:	4b0d      	ldr	r3, [pc, #52]	; (8009ea8 <tcpip_init+0x78>)
 8009e74:	f240 2265 	movw	r2, #613	; 0x265
 8009e78:	490f      	ldr	r1, [pc, #60]	; (8009eb8 <tcpip_init+0x88>)
 8009e7a:	480d      	ldr	r0, [pc, #52]	; (8009eb0 <tcpip_init+0x80>)
 8009e7c:	f00e fb20 	bl	80184c0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009e80:	2318      	movs	r3, #24
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e88:	2200      	movs	r2, #0
 8009e8a:	490c      	ldr	r1, [pc, #48]	; (8009ebc <tcpip_init+0x8c>)
 8009e8c:	480c      	ldr	r0, [pc, #48]	; (8009ec0 <tcpip_init+0x90>)
 8009e8e:	f00a fbd7 	bl	8014640 <sys_thread_new>
}
 8009e92:	bf00      	nop
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	2400b664 	.word	0x2400b664
 8009ea0:	2400b668 	.word	0x2400b668
 8009ea4:	2400b66c 	.word	0x2400b66c
 8009ea8:	0801bc04 	.word	0x0801bc04
 8009eac:	0801bc8c 	.word	0x0801bc8c
 8009eb0:	0801bc54 	.word	0x0801bc54
 8009eb4:	2400bddc 	.word	0x2400bddc
 8009eb8:	0801bcb0 	.word	0x0801bcb0
 8009ebc:	08009ba9 	.word	0x08009ba9
 8009ec0:	0801bcd4 	.word	0x0801bcd4

08009ec4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009ece:	88fb      	ldrh	r3, [r7, #6]
 8009ed0:	021b      	lsls	r3, r3, #8
 8009ed2:	b21a      	sxth	r2, r3
 8009ed4:	88fb      	ldrh	r3, [r7, #6]
 8009ed6:	0a1b      	lsrs	r3, r3, #8
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	b21b      	sxth	r3, r3
 8009edc:	4313      	orrs	r3, r2
 8009ede:	b21b      	sxth	r3, r3
 8009ee0:	b29b      	uxth	r3, r3
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b083      	sub	sp, #12
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	061a      	lsls	r2, r3, #24
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	021b      	lsls	r3, r3, #8
 8009efe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f02:	431a      	orrs	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	0a1b      	lsrs	r3, r3, #8
 8009f08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	0e1b      	lsrs	r3, r3, #24
 8009f12:	4313      	orrs	r3, r2
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009f2a:	f00a fb4b 	bl	80145c4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009f2e:	f000 f8d5 	bl	800a0dc <mem_init>
  memp_init();
 8009f32:	f000 fc2d 	bl	800a790 <memp_init>
  pbuf_init();
  netif_init();
 8009f36:	f000 fd39 	bl	800a9ac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009f3a:	f007 fb23 	bl	8011584 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009f3e:	f001 fe59 	bl	800bbf4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009f42:	f007 fa2b 	bl	801139c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009f46:	bf00      	nop
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
	...

08009f50 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	4603      	mov	r3, r0
 8009f58:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009f5a:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <ptr_to_mem+0x20>)
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	88fb      	ldrh	r3, [r7, #6]
 8009f60:	4413      	add	r3, r2
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	2400b670 	.word	0x2400b670

08009f74 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009f7c:	4b05      	ldr	r3, [pc, #20]	; (8009f94 <mem_to_ptr+0x20>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	b29b      	uxth	r3, r3
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	2400b670 	.word	0x2400b670

08009f98 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009f98:	b590      	push	{r4, r7, lr}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009fa0:	4b45      	ldr	r3, [pc, #276]	; (800a0b8 <plug_holes+0x120>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d206      	bcs.n	8009fb8 <plug_holes+0x20>
 8009faa:	4b44      	ldr	r3, [pc, #272]	; (800a0bc <plug_holes+0x124>)
 8009fac:	f240 12df 	movw	r2, #479	; 0x1df
 8009fb0:	4943      	ldr	r1, [pc, #268]	; (800a0c0 <plug_holes+0x128>)
 8009fb2:	4844      	ldr	r0, [pc, #272]	; (800a0c4 <plug_holes+0x12c>)
 8009fb4:	f00e fa84 	bl	80184c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009fb8:	4b43      	ldr	r3, [pc, #268]	; (800a0c8 <plug_holes+0x130>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d306      	bcc.n	8009fd0 <plug_holes+0x38>
 8009fc2:	4b3e      	ldr	r3, [pc, #248]	; (800a0bc <plug_holes+0x124>)
 8009fc4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009fc8:	4940      	ldr	r1, [pc, #256]	; (800a0cc <plug_holes+0x134>)
 8009fca:	483e      	ldr	r0, [pc, #248]	; (800a0c4 <plug_holes+0x12c>)
 8009fcc:	f00e fa78 	bl	80184c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	791b      	ldrb	r3, [r3, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d006      	beq.n	8009fe6 <plug_holes+0x4e>
 8009fd8:	4b38      	ldr	r3, [pc, #224]	; (800a0bc <plug_holes+0x124>)
 8009fda:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009fde:	493c      	ldr	r1, [pc, #240]	; (800a0d0 <plug_holes+0x138>)
 8009fe0:	4838      	ldr	r0, [pc, #224]	; (800a0c4 <plug_holes+0x12c>)
 8009fe2:	f00e fa6d 	bl	80184c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009fee:	d906      	bls.n	8009ffe <plug_holes+0x66>
 8009ff0:	4b32      	ldr	r3, [pc, #200]	; (800a0bc <plug_holes+0x124>)
 8009ff2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009ff6:	4937      	ldr	r1, [pc, #220]	; (800a0d4 <plug_holes+0x13c>)
 8009ff8:	4832      	ldr	r0, [pc, #200]	; (800a0c4 <plug_holes+0x12c>)
 8009ffa:	f00e fa61 	bl	80184c0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	4618      	mov	r0, r3
 800a004:	f7ff ffa4 	bl	8009f50 <ptr_to_mem>
 800a008:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d024      	beq.n	800a05c <plug_holes+0xc4>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	791b      	ldrb	r3, [r3, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d120      	bne.n	800a05c <plug_holes+0xc4>
 800a01a:	4b2b      	ldr	r3, [pc, #172]	; (800a0c8 <plug_holes+0x130>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	429a      	cmp	r2, r3
 800a022:	d01b      	beq.n	800a05c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a024:	4b2c      	ldr	r3, [pc, #176]	; (800a0d8 <plug_holes+0x140>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d102      	bne.n	800a034 <plug_holes+0x9c>
      lfree = mem;
 800a02e:	4a2a      	ldr	r2, [pc, #168]	; (800a0d8 <plug_holes+0x140>)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	881a      	ldrh	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	881b      	ldrh	r3, [r3, #0]
 800a040:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a044:	d00a      	beq.n	800a05c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7ff ff80 	bl	8009f50 <ptr_to_mem>
 800a050:	4604      	mov	r4, r0
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7ff ff8e 	bl	8009f74 <mem_to_ptr>
 800a058:	4603      	mov	r3, r0
 800a05a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	885b      	ldrh	r3, [r3, #2]
 800a060:	4618      	mov	r0, r3
 800a062:	f7ff ff75 	bl	8009f50 <ptr_to_mem>
 800a066:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d01f      	beq.n	800a0b0 <plug_holes+0x118>
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	791b      	ldrb	r3, [r3, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d11b      	bne.n	800a0b0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a078:	4b17      	ldr	r3, [pc, #92]	; (800a0d8 <plug_holes+0x140>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d102      	bne.n	800a088 <plug_holes+0xf0>
      lfree = pmem;
 800a082:	4a15      	ldr	r2, [pc, #84]	; (800a0d8 <plug_holes+0x140>)
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	881a      	ldrh	r2, [r3, #0]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a098:	d00a      	beq.n	800a0b0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff ff56 	bl	8009f50 <ptr_to_mem>
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	68b8      	ldr	r0, [r7, #8]
 800a0a8:	f7ff ff64 	bl	8009f74 <mem_to_ptr>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a0b0:	bf00      	nop
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd90      	pop	{r4, r7, pc}
 800a0b8:	2400b670 	.word	0x2400b670
 800a0bc:	0801bce4 	.word	0x0801bce4
 800a0c0:	0801bd14 	.word	0x0801bd14
 800a0c4:	0801bd2c 	.word	0x0801bd2c
 800a0c8:	2400b674 	.word	0x2400b674
 800a0cc:	0801bd54 	.word	0x0801bd54
 800a0d0:	0801bd70 	.word	0x0801bd70
 800a0d4:	0801bd8c 	.word	0x0801bd8c
 800a0d8:	2400b67c 	.word	0x2400b67c

0800a0dc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a0e2:	4b1d      	ldr	r3, [pc, #116]	; (800a158 <mem_init+0x7c>)
 800a0e4:	4a1d      	ldr	r2, [pc, #116]	; (800a15c <mem_init+0x80>)
 800a0e6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a0e8:	4b1b      	ldr	r3, [pc, #108]	; (800a158 <mem_init+0x7c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a0f4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a102:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a106:	f7ff ff23 	bl	8009f50 <ptr_to_mem>
 800a10a:	4603      	mov	r3, r0
 800a10c:	4a14      	ldr	r2, [pc, #80]	; (800a160 <mem_init+0x84>)
 800a10e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a110:	4b13      	ldr	r3, [pc, #76]	; (800a160 <mem_init+0x84>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2201      	movs	r2, #1
 800a116:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a118:	4b11      	ldr	r3, [pc, #68]	; (800a160 <mem_init+0x84>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a120:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a122:	4b0f      	ldr	r3, [pc, #60]	; (800a160 <mem_init+0x84>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a12a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a12c:	4b0a      	ldr	r3, [pc, #40]	; (800a158 <mem_init+0x7c>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a0c      	ldr	r2, [pc, #48]	; (800a164 <mem_init+0x88>)
 800a132:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a134:	480c      	ldr	r0, [pc, #48]	; (800a168 <mem_init+0x8c>)
 800a136:	f00a fa51 	bl	80145dc <sys_mutex_new>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d006      	beq.n	800a14e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a140:	4b0a      	ldr	r3, [pc, #40]	; (800a16c <mem_init+0x90>)
 800a142:	f240 221f 	movw	r2, #543	; 0x21f
 800a146:	490a      	ldr	r1, [pc, #40]	; (800a170 <mem_init+0x94>)
 800a148:	480a      	ldr	r0, [pc, #40]	; (800a174 <mem_init+0x98>)
 800a14a:	f00e f9b9 	bl	80184c0 <iprintf>
  }
}
 800a14e:	bf00      	nop
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	2400b670 	.word	0x2400b670
 800a15c:	30044000 	.word	0x30044000
 800a160:	2400b674 	.word	0x2400b674
 800a164:	2400b67c 	.word	0x2400b67c
 800a168:	2400b678 	.word	0x2400b678
 800a16c:	0801bce4 	.word	0x0801bce4
 800a170:	0801bdb8 	.word	0x0801bdb8
 800a174:	0801bd2c 	.word	0x0801bd2c

0800a178 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff fef7 	bl	8009f74 <mem_to_ptr>
 800a186:	4603      	mov	r3, r0
 800a188:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	881b      	ldrh	r3, [r3, #0]
 800a18e:	4618      	mov	r0, r3
 800a190:	f7ff fede 	bl	8009f50 <ptr_to_mem>
 800a194:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	885b      	ldrh	r3, [r3, #2]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7ff fed8 	bl	8009f50 <ptr_to_mem>
 800a1a0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1aa:	d818      	bhi.n	800a1de <mem_link_valid+0x66>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	885b      	ldrh	r3, [r3, #2]
 800a1b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1b4:	d813      	bhi.n	800a1de <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a1ba:	8afa      	ldrh	r2, [r7, #22]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d004      	beq.n	800a1ca <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	8afa      	ldrh	r2, [r7, #22]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d109      	bne.n	800a1de <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a1ca:	4b08      	ldr	r3, [pc, #32]	; (800a1ec <mem_link_valid+0x74>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d006      	beq.n	800a1e2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	885b      	ldrh	r3, [r3, #2]
 800a1d8:	8afa      	ldrh	r2, [r7, #22]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d001      	beq.n	800a1e2 <mem_link_valid+0x6a>
    return 0;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	e000      	b.n	800a1e4 <mem_link_valid+0x6c>
  }
  return 1;
 800a1e2:	2301      	movs	r3, #1
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	2400b674 	.word	0x2400b674

0800a1f0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b088      	sub	sp, #32
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d070      	beq.n	800a2e0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f003 0303 	and.w	r3, r3, #3
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00d      	beq.n	800a224 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a208:	4b37      	ldr	r3, [pc, #220]	; (800a2e8 <mem_free+0xf8>)
 800a20a:	f240 2273 	movw	r2, #627	; 0x273
 800a20e:	4937      	ldr	r1, [pc, #220]	; (800a2ec <mem_free+0xfc>)
 800a210:	4837      	ldr	r0, [pc, #220]	; (800a2f0 <mem_free+0x100>)
 800a212:	f00e f955 	bl	80184c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a216:	f00a fa33 	bl	8014680 <sys_arch_protect>
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f00a fa3d 	bl	801469c <sys_arch_unprotect>
    return;
 800a222:	e05e      	b.n	800a2e2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3b08      	subs	r3, #8
 800a228:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a22a:	4b32      	ldr	r3, [pc, #200]	; (800a2f4 <mem_free+0x104>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	69fa      	ldr	r2, [r7, #28]
 800a230:	429a      	cmp	r2, r3
 800a232:	d306      	bcc.n	800a242 <mem_free+0x52>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f103 020c 	add.w	r2, r3, #12
 800a23a:	4b2f      	ldr	r3, [pc, #188]	; (800a2f8 <mem_free+0x108>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d90d      	bls.n	800a25e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a242:	4b29      	ldr	r3, [pc, #164]	; (800a2e8 <mem_free+0xf8>)
 800a244:	f240 227f 	movw	r2, #639	; 0x27f
 800a248:	492c      	ldr	r1, [pc, #176]	; (800a2fc <mem_free+0x10c>)
 800a24a:	4829      	ldr	r0, [pc, #164]	; (800a2f0 <mem_free+0x100>)
 800a24c:	f00e f938 	bl	80184c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a250:	f00a fa16 	bl	8014680 <sys_arch_protect>
 800a254:	6138      	str	r0, [r7, #16]
 800a256:	6938      	ldr	r0, [r7, #16]
 800a258:	f00a fa20 	bl	801469c <sys_arch_unprotect>
    return;
 800a25c:	e041      	b.n	800a2e2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a25e:	4828      	ldr	r0, [pc, #160]	; (800a300 <mem_free+0x110>)
 800a260:	f00a f9d2 	bl	8014608 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	791b      	ldrb	r3, [r3, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d110      	bne.n	800a28e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a26c:	4b1e      	ldr	r3, [pc, #120]	; (800a2e8 <mem_free+0xf8>)
 800a26e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a272:	4924      	ldr	r1, [pc, #144]	; (800a304 <mem_free+0x114>)
 800a274:	481e      	ldr	r0, [pc, #120]	; (800a2f0 <mem_free+0x100>)
 800a276:	f00e f923 	bl	80184c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a27a:	4821      	ldr	r0, [pc, #132]	; (800a300 <mem_free+0x110>)
 800a27c:	f00a f9d3 	bl	8014626 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a280:	f00a f9fe 	bl	8014680 <sys_arch_protect>
 800a284:	6178      	str	r0, [r7, #20]
 800a286:	6978      	ldr	r0, [r7, #20]
 800a288:	f00a fa08 	bl	801469c <sys_arch_unprotect>
    return;
 800a28c:	e029      	b.n	800a2e2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a28e:	69f8      	ldr	r0, [r7, #28]
 800a290:	f7ff ff72 	bl	800a178 <mem_link_valid>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d110      	bne.n	800a2bc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a29a:	4b13      	ldr	r3, [pc, #76]	; (800a2e8 <mem_free+0xf8>)
 800a29c:	f240 2295 	movw	r2, #661	; 0x295
 800a2a0:	4919      	ldr	r1, [pc, #100]	; (800a308 <mem_free+0x118>)
 800a2a2:	4813      	ldr	r0, [pc, #76]	; (800a2f0 <mem_free+0x100>)
 800a2a4:	f00e f90c 	bl	80184c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a2a8:	4815      	ldr	r0, [pc, #84]	; (800a300 <mem_free+0x110>)
 800a2aa:	f00a f9bc 	bl	8014626 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a2ae:	f00a f9e7 	bl	8014680 <sys_arch_protect>
 800a2b2:	61b8      	str	r0, [r7, #24]
 800a2b4:	69b8      	ldr	r0, [r7, #24]
 800a2b6:	f00a f9f1 	bl	801469c <sys_arch_unprotect>
    return;
 800a2ba:	e012      	b.n	800a2e2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a2c2:	4b12      	ldr	r3, [pc, #72]	; (800a30c <mem_free+0x11c>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	69fa      	ldr	r2, [r7, #28]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d202      	bcs.n	800a2d2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a2cc:	4a0f      	ldr	r2, [pc, #60]	; (800a30c <mem_free+0x11c>)
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a2d2:	69f8      	ldr	r0, [r7, #28]
 800a2d4:	f7ff fe60 	bl	8009f98 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a2d8:	4809      	ldr	r0, [pc, #36]	; (800a300 <mem_free+0x110>)
 800a2da:	f00a f9a4 	bl	8014626 <sys_mutex_unlock>
 800a2de:	e000      	b.n	800a2e2 <mem_free+0xf2>
    return;
 800a2e0:	bf00      	nop
}
 800a2e2:	3720      	adds	r7, #32
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	0801bce4 	.word	0x0801bce4
 800a2ec:	0801bdd4 	.word	0x0801bdd4
 800a2f0:	0801bd2c 	.word	0x0801bd2c
 800a2f4:	2400b670 	.word	0x2400b670
 800a2f8:	2400b674 	.word	0x2400b674
 800a2fc:	0801bdf8 	.word	0x0801bdf8
 800a300:	2400b678 	.word	0x2400b678
 800a304:	0801be14 	.word	0x0801be14
 800a308:	0801be3c 	.word	0x0801be3c
 800a30c:	2400b67c 	.word	0x2400b67c

0800a310 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a31c:	887b      	ldrh	r3, [r7, #2]
 800a31e:	3303      	adds	r3, #3
 800a320:	b29b      	uxth	r3, r3
 800a322:	f023 0303 	bic.w	r3, r3, #3
 800a326:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a328:	8bfb      	ldrh	r3, [r7, #30]
 800a32a:	2b0b      	cmp	r3, #11
 800a32c:	d801      	bhi.n	800a332 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a32e:	230c      	movs	r3, #12
 800a330:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a332:	8bfb      	ldrh	r3, [r7, #30]
 800a334:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a338:	d803      	bhi.n	800a342 <mem_trim+0x32>
 800a33a:	8bfa      	ldrh	r2, [r7, #30]
 800a33c:	887b      	ldrh	r3, [r7, #2]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d201      	bcs.n	800a346 <mem_trim+0x36>
    return NULL;
 800a342:	2300      	movs	r3, #0
 800a344:	e0d8      	b.n	800a4f8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a346:	4b6e      	ldr	r3, [pc, #440]	; (800a500 <mem_trim+0x1f0>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d304      	bcc.n	800a35a <mem_trim+0x4a>
 800a350:	4b6c      	ldr	r3, [pc, #432]	; (800a504 <mem_trim+0x1f4>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	429a      	cmp	r2, r3
 800a358:	d306      	bcc.n	800a368 <mem_trim+0x58>
 800a35a:	4b6b      	ldr	r3, [pc, #428]	; (800a508 <mem_trim+0x1f8>)
 800a35c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a360:	496a      	ldr	r1, [pc, #424]	; (800a50c <mem_trim+0x1fc>)
 800a362:	486b      	ldr	r0, [pc, #428]	; (800a510 <mem_trim+0x200>)
 800a364:	f00e f8ac 	bl	80184c0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a368:	4b65      	ldr	r3, [pc, #404]	; (800a500 <mem_trim+0x1f0>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d304      	bcc.n	800a37c <mem_trim+0x6c>
 800a372:	4b64      	ldr	r3, [pc, #400]	; (800a504 <mem_trim+0x1f4>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d307      	bcc.n	800a38c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a37c:	f00a f980 	bl	8014680 <sys_arch_protect>
 800a380:	60b8      	str	r0, [r7, #8]
 800a382:	68b8      	ldr	r0, [r7, #8]
 800a384:	f00a f98a 	bl	801469c <sys_arch_unprotect>
    return rmem;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	e0b5      	b.n	800a4f8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3b08      	subs	r3, #8
 800a390:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a392:	69b8      	ldr	r0, [r7, #24]
 800a394:	f7ff fdee 	bl	8009f74 <mem_to_ptr>
 800a398:	4603      	mov	r3, r0
 800a39a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	881a      	ldrh	r2, [r3, #0]
 800a3a0:	8afb      	ldrh	r3, [r7, #22]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	3b08      	subs	r3, #8
 800a3a8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a3aa:	8bfa      	ldrh	r2, [r7, #30]
 800a3ac:	8abb      	ldrh	r3, [r7, #20]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d906      	bls.n	800a3c0 <mem_trim+0xb0>
 800a3b2:	4b55      	ldr	r3, [pc, #340]	; (800a508 <mem_trim+0x1f8>)
 800a3b4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a3b8:	4956      	ldr	r1, [pc, #344]	; (800a514 <mem_trim+0x204>)
 800a3ba:	4855      	ldr	r0, [pc, #340]	; (800a510 <mem_trim+0x200>)
 800a3bc:	f00e f880 	bl	80184c0 <iprintf>
  if (newsize > size) {
 800a3c0:	8bfa      	ldrh	r2, [r7, #30]
 800a3c2:	8abb      	ldrh	r3, [r7, #20]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d901      	bls.n	800a3cc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	e095      	b.n	800a4f8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a3cc:	8bfa      	ldrh	r2, [r7, #30]
 800a3ce:	8abb      	ldrh	r3, [r7, #20]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d101      	bne.n	800a3d8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	e08f      	b.n	800a4f8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a3d8:	484f      	ldr	r0, [pc, #316]	; (800a518 <mem_trim+0x208>)
 800a3da:	f00a f915 	bl	8014608 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	881b      	ldrh	r3, [r3, #0]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff fdb4 	bl	8009f50 <ptr_to_mem>
 800a3e8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	791b      	ldrb	r3, [r3, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d13f      	bne.n	800a472 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3fa:	d106      	bne.n	800a40a <mem_trim+0xfa>
 800a3fc:	4b42      	ldr	r3, [pc, #264]	; (800a508 <mem_trim+0x1f8>)
 800a3fe:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a402:	4946      	ldr	r1, [pc, #280]	; (800a51c <mem_trim+0x20c>)
 800a404:	4842      	ldr	r0, [pc, #264]	; (800a510 <mem_trim+0x200>)
 800a406:	f00e f85b 	bl	80184c0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	881b      	ldrh	r3, [r3, #0]
 800a40e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a410:	8afa      	ldrh	r2, [r7, #22]
 800a412:	8bfb      	ldrh	r3, [r7, #30]
 800a414:	4413      	add	r3, r2
 800a416:	b29b      	uxth	r3, r3
 800a418:	3308      	adds	r3, #8
 800a41a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a41c:	4b40      	ldr	r3, [pc, #256]	; (800a520 <mem_trim+0x210>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	429a      	cmp	r2, r3
 800a424:	d106      	bne.n	800a434 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a426:	89fb      	ldrh	r3, [r7, #14]
 800a428:	4618      	mov	r0, r3
 800a42a:	f7ff fd91 	bl	8009f50 <ptr_to_mem>
 800a42e:	4603      	mov	r3, r0
 800a430:	4a3b      	ldr	r2, [pc, #236]	; (800a520 <mem_trim+0x210>)
 800a432:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a434:	89fb      	ldrh	r3, [r7, #14]
 800a436:	4618      	mov	r0, r3
 800a438:	f7ff fd8a 	bl	8009f50 <ptr_to_mem>
 800a43c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	2200      	movs	r2, #0
 800a442:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	89ba      	ldrh	r2, [r7, #12]
 800a448:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	8afa      	ldrh	r2, [r7, #22]
 800a44e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	89fa      	ldrh	r2, [r7, #14]
 800a454:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	881b      	ldrh	r3, [r3, #0]
 800a45a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a45e:	d047      	beq.n	800a4f0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	881b      	ldrh	r3, [r3, #0]
 800a464:	4618      	mov	r0, r3
 800a466:	f7ff fd73 	bl	8009f50 <ptr_to_mem>
 800a46a:	4602      	mov	r2, r0
 800a46c:	89fb      	ldrh	r3, [r7, #14]
 800a46e:	8053      	strh	r3, [r2, #2]
 800a470:	e03e      	b.n	800a4f0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a472:	8bfb      	ldrh	r3, [r7, #30]
 800a474:	f103 0214 	add.w	r2, r3, #20
 800a478:	8abb      	ldrh	r3, [r7, #20]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d838      	bhi.n	800a4f0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a47e:	8afa      	ldrh	r2, [r7, #22]
 800a480:	8bfb      	ldrh	r3, [r7, #30]
 800a482:	4413      	add	r3, r2
 800a484:	b29b      	uxth	r3, r3
 800a486:	3308      	adds	r3, #8
 800a488:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a492:	d106      	bne.n	800a4a2 <mem_trim+0x192>
 800a494:	4b1c      	ldr	r3, [pc, #112]	; (800a508 <mem_trim+0x1f8>)
 800a496:	f240 3216 	movw	r2, #790	; 0x316
 800a49a:	4920      	ldr	r1, [pc, #128]	; (800a51c <mem_trim+0x20c>)
 800a49c:	481c      	ldr	r0, [pc, #112]	; (800a510 <mem_trim+0x200>)
 800a49e:	f00e f80f 	bl	80184c0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a4a2:	89fb      	ldrh	r3, [r7, #14]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7ff fd53 	bl	8009f50 <ptr_to_mem>
 800a4aa:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a4ac:	4b1c      	ldr	r3, [pc, #112]	; (800a520 <mem_trim+0x210>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d202      	bcs.n	800a4bc <mem_trim+0x1ac>
      lfree = mem2;
 800a4b6:	4a1a      	ldr	r2, [pc, #104]	; (800a520 <mem_trim+0x210>)
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	881a      	ldrh	r2, [r3, #0]
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	8afa      	ldrh	r2, [r7, #22]
 800a4ce:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	89fa      	ldrh	r2, [r7, #14]
 800a4d4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4de:	d007      	beq.n	800a4f0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7ff fd33 	bl	8009f50 <ptr_to_mem>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	89fb      	ldrh	r3, [r7, #14]
 800a4ee:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a4f0:	4809      	ldr	r0, [pc, #36]	; (800a518 <mem_trim+0x208>)
 800a4f2:	f00a f898 	bl	8014626 <sys_mutex_unlock>
  return rmem;
 800a4f6:	687b      	ldr	r3, [r7, #4]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3720      	adds	r7, #32
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	2400b670 	.word	0x2400b670
 800a504:	2400b674 	.word	0x2400b674
 800a508:	0801bce4 	.word	0x0801bce4
 800a50c:	0801be70 	.word	0x0801be70
 800a510:	0801bd2c 	.word	0x0801bd2c
 800a514:	0801be88 	.word	0x0801be88
 800a518:	2400b678 	.word	0x2400b678
 800a51c:	0801bea8 	.word	0x0801bea8
 800a520:	2400b67c 	.word	0x2400b67c

0800a524 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b088      	sub	sp, #32
 800a528:	af00      	add	r7, sp, #0
 800a52a:	4603      	mov	r3, r0
 800a52c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a52e:	88fb      	ldrh	r3, [r7, #6]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <mem_malloc+0x14>
    return NULL;
 800a534:	2300      	movs	r3, #0
 800a536:	e0e2      	b.n	800a6fe <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a538:	88fb      	ldrh	r3, [r7, #6]
 800a53a:	3303      	adds	r3, #3
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	f023 0303 	bic.w	r3, r3, #3
 800a542:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a544:	8bbb      	ldrh	r3, [r7, #28]
 800a546:	2b0b      	cmp	r3, #11
 800a548:	d801      	bhi.n	800a54e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a54a:	230c      	movs	r3, #12
 800a54c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a54e:	8bbb      	ldrh	r3, [r7, #28]
 800a550:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a554:	d803      	bhi.n	800a55e <mem_malloc+0x3a>
 800a556:	8bba      	ldrh	r2, [r7, #28]
 800a558:	88fb      	ldrh	r3, [r7, #6]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d201      	bcs.n	800a562 <mem_malloc+0x3e>
    return NULL;
 800a55e:	2300      	movs	r3, #0
 800a560:	e0cd      	b.n	800a6fe <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a562:	4869      	ldr	r0, [pc, #420]	; (800a708 <mem_malloc+0x1e4>)
 800a564:	f00a f850 	bl	8014608 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a568:	4b68      	ldr	r3, [pc, #416]	; (800a70c <mem_malloc+0x1e8>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7ff fd01 	bl	8009f74 <mem_to_ptr>
 800a572:	4603      	mov	r3, r0
 800a574:	83fb      	strh	r3, [r7, #30]
 800a576:	e0b7      	b.n	800a6e8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a578:	8bfb      	ldrh	r3, [r7, #30]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7ff fce8 	bl	8009f50 <ptr_to_mem>
 800a580:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	791b      	ldrb	r3, [r3, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	f040 80a7 	bne.w	800a6da <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	461a      	mov	r2, r3
 800a592:	8bfb      	ldrh	r3, [r7, #30]
 800a594:	1ad3      	subs	r3, r2, r3
 800a596:	f1a3 0208 	sub.w	r2, r3, #8
 800a59a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a59c:	429a      	cmp	r2, r3
 800a59e:	f0c0 809c 	bcc.w	800a6da <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	881b      	ldrh	r3, [r3, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	8bfb      	ldrh	r3, [r7, #30]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	f1a3 0208 	sub.w	r2, r3, #8
 800a5b0:	8bbb      	ldrh	r3, [r7, #28]
 800a5b2:	3314      	adds	r3, #20
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d333      	bcc.n	800a620 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a5b8:	8bfa      	ldrh	r2, [r7, #30]
 800a5ba:	8bbb      	ldrh	r3, [r7, #28]
 800a5bc:	4413      	add	r3, r2
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	3308      	adds	r3, #8
 800a5c2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a5c4:	8a7b      	ldrh	r3, [r7, #18]
 800a5c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5ca:	d106      	bne.n	800a5da <mem_malloc+0xb6>
 800a5cc:	4b50      	ldr	r3, [pc, #320]	; (800a710 <mem_malloc+0x1ec>)
 800a5ce:	f240 3287 	movw	r2, #903	; 0x387
 800a5d2:	4950      	ldr	r1, [pc, #320]	; (800a714 <mem_malloc+0x1f0>)
 800a5d4:	4850      	ldr	r0, [pc, #320]	; (800a718 <mem_malloc+0x1f4>)
 800a5d6:	f00d ff73 	bl	80184c0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a5da:	8a7b      	ldrh	r3, [r7, #18]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7ff fcb7 	bl	8009f50 <ptr_to_mem>
 800a5e2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	881a      	ldrh	r2, [r3, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	8bfa      	ldrh	r2, [r7, #30]
 800a5f6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	8a7a      	ldrh	r2, [r7, #18]
 800a5fc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2201      	movs	r2, #1
 800a602:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a60c:	d00b      	beq.n	800a626 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	881b      	ldrh	r3, [r3, #0]
 800a612:	4618      	mov	r0, r3
 800a614:	f7ff fc9c 	bl	8009f50 <ptr_to_mem>
 800a618:	4602      	mov	r2, r0
 800a61a:	8a7b      	ldrh	r3, [r7, #18]
 800a61c:	8053      	strh	r3, [r2, #2]
 800a61e:	e002      	b.n	800a626 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	2201      	movs	r2, #1
 800a624:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a626:	4b39      	ldr	r3, [pc, #228]	; (800a70c <mem_malloc+0x1e8>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d127      	bne.n	800a680 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a630:	4b36      	ldr	r3, [pc, #216]	; (800a70c <mem_malloc+0x1e8>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a636:	e005      	b.n	800a644 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	881b      	ldrh	r3, [r3, #0]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff fc87 	bl	8009f50 <ptr_to_mem>
 800a642:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	791b      	ldrb	r3, [r3, #4]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d004      	beq.n	800a656 <mem_malloc+0x132>
 800a64c:	4b33      	ldr	r3, [pc, #204]	; (800a71c <mem_malloc+0x1f8>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	69ba      	ldr	r2, [r7, #24]
 800a652:	429a      	cmp	r2, r3
 800a654:	d1f0      	bne.n	800a638 <mem_malloc+0x114>
          }
          lfree = cur;
 800a656:	4a2d      	ldr	r2, [pc, #180]	; (800a70c <mem_malloc+0x1e8>)
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a65c:	4b2b      	ldr	r3, [pc, #172]	; (800a70c <mem_malloc+0x1e8>)
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	4b2e      	ldr	r3, [pc, #184]	; (800a71c <mem_malloc+0x1f8>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	429a      	cmp	r2, r3
 800a666:	d00b      	beq.n	800a680 <mem_malloc+0x15c>
 800a668:	4b28      	ldr	r3, [pc, #160]	; (800a70c <mem_malloc+0x1e8>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	791b      	ldrb	r3, [r3, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d006      	beq.n	800a680 <mem_malloc+0x15c>
 800a672:	4b27      	ldr	r3, [pc, #156]	; (800a710 <mem_malloc+0x1ec>)
 800a674:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a678:	4929      	ldr	r1, [pc, #164]	; (800a720 <mem_malloc+0x1fc>)
 800a67a:	4827      	ldr	r0, [pc, #156]	; (800a718 <mem_malloc+0x1f4>)
 800a67c:	f00d ff20 	bl	80184c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a680:	4821      	ldr	r0, [pc, #132]	; (800a708 <mem_malloc+0x1e4>)
 800a682:	f009 ffd0 	bl	8014626 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a686:	8bba      	ldrh	r2, [r7, #28]
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	4413      	add	r3, r2
 800a68c:	3308      	adds	r3, #8
 800a68e:	4a23      	ldr	r2, [pc, #140]	; (800a71c <mem_malloc+0x1f8>)
 800a690:	6812      	ldr	r2, [r2, #0]
 800a692:	4293      	cmp	r3, r2
 800a694:	d906      	bls.n	800a6a4 <mem_malloc+0x180>
 800a696:	4b1e      	ldr	r3, [pc, #120]	; (800a710 <mem_malloc+0x1ec>)
 800a698:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a69c:	4921      	ldr	r1, [pc, #132]	; (800a724 <mem_malloc+0x200>)
 800a69e:	481e      	ldr	r0, [pc, #120]	; (800a718 <mem_malloc+0x1f4>)
 800a6a0:	f00d ff0e 	bl	80184c0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	f003 0303 	and.w	r3, r3, #3
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d006      	beq.n	800a6bc <mem_malloc+0x198>
 800a6ae:	4b18      	ldr	r3, [pc, #96]	; (800a710 <mem_malloc+0x1ec>)
 800a6b0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a6b4:	491c      	ldr	r1, [pc, #112]	; (800a728 <mem_malloc+0x204>)
 800a6b6:	4818      	ldr	r0, [pc, #96]	; (800a718 <mem_malloc+0x1f4>)
 800a6b8:	f00d ff02 	bl	80184c0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f003 0303 	and.w	r3, r3, #3
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d006      	beq.n	800a6d4 <mem_malloc+0x1b0>
 800a6c6:	4b12      	ldr	r3, [pc, #72]	; (800a710 <mem_malloc+0x1ec>)
 800a6c8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a6cc:	4917      	ldr	r1, [pc, #92]	; (800a72c <mem_malloc+0x208>)
 800a6ce:	4812      	ldr	r0, [pc, #72]	; (800a718 <mem_malloc+0x1f4>)
 800a6d0:	f00d fef6 	bl	80184c0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	3308      	adds	r3, #8
 800a6d8:	e011      	b.n	800a6fe <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a6da:	8bfb      	ldrh	r3, [r7, #30]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7ff fc37 	bl	8009f50 <ptr_to_mem>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a6e8:	8bfa      	ldrh	r2, [r7, #30]
 800a6ea:	8bbb      	ldrh	r3, [r7, #28]
 800a6ec:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	f4ff af41 	bcc.w	800a578 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a6f6:	4804      	ldr	r0, [pc, #16]	; (800a708 <mem_malloc+0x1e4>)
 800a6f8:	f009 ff95 	bl	8014626 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3720      	adds	r7, #32
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	2400b678 	.word	0x2400b678
 800a70c:	2400b67c 	.word	0x2400b67c
 800a710:	0801bce4 	.word	0x0801bce4
 800a714:	0801bea8 	.word	0x0801bea8
 800a718:	0801bd2c 	.word	0x0801bd2c
 800a71c:	2400b674 	.word	0x2400b674
 800a720:	0801bebc 	.word	0x0801bebc
 800a724:	0801bed8 	.word	0x0801bed8
 800a728:	0801bf08 	.word	0x0801bf08
 800a72c:	0801bf38 	.word	0x0801bf38

0800a730 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	2200      	movs	r2, #0
 800a73e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	3303      	adds	r3, #3
 800a746:	f023 0303 	bic.w	r3, r3, #3
 800a74a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a74c:	2300      	movs	r3, #0
 800a74e:	60fb      	str	r3, [r7, #12]
 800a750:	e011      	b.n	800a776 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	881b      	ldrh	r3, [r3, #0]
 800a768:	461a      	mov	r2, r3
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	4413      	add	r3, r2
 800a76e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	3301      	adds	r3, #1
 800a774:	60fb      	str	r3, [r7, #12]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	885b      	ldrh	r3, [r3, #2]
 800a77a:	461a      	mov	r2, r3
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	4293      	cmp	r3, r2
 800a780:	dbe7      	blt.n	800a752 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a782:	bf00      	nop
 800a784:	bf00      	nop
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a796:	2300      	movs	r3, #0
 800a798:	80fb      	strh	r3, [r7, #6]
 800a79a:	e009      	b.n	800a7b0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a79c:	88fb      	ldrh	r3, [r7, #6]
 800a79e:	4a08      	ldr	r2, [pc, #32]	; (800a7c0 <memp_init+0x30>)
 800a7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7ff ffc3 	bl	800a730 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a7aa:	88fb      	ldrh	r3, [r7, #6]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	80fb      	strh	r3, [r7, #6]
 800a7b0:	88fb      	ldrh	r3, [r7, #6]
 800a7b2:	2b0c      	cmp	r3, #12
 800a7b4:	d9f2      	bls.n	800a79c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a7b6:	bf00      	nop
 800a7b8:	bf00      	nop
 800a7ba:	3708      	adds	r7, #8
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	0801ebb0 	.word	0x0801ebb0

0800a7c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a7cc:	f009 ff58 	bl	8014680 <sys_arch_protect>
 800a7d0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d015      	beq.n	800a80c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	6812      	ldr	r2, [r2, #0]
 800a7e8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	f003 0303 	and.w	r3, r3, #3
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d006      	beq.n	800a802 <do_memp_malloc_pool+0x3e>
 800a7f4:	4b09      	ldr	r3, [pc, #36]	; (800a81c <do_memp_malloc_pool+0x58>)
 800a7f6:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a7fa:	4909      	ldr	r1, [pc, #36]	; (800a820 <do_memp_malloc_pool+0x5c>)
 800a7fc:	4809      	ldr	r0, [pc, #36]	; (800a824 <do_memp_malloc_pool+0x60>)
 800a7fe:	f00d fe5f 	bl	80184c0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f009 ff4a 	bl	801469c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	e003      	b.n	800a814 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f009 ff45 	bl	801469c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	0801bf5c 	.word	0x0801bf5c
 800a820:	0801bf8c 	.word	0x0801bf8c
 800a824:	0801bfb0 	.word	0x0801bfb0

0800a828 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d106      	bne.n	800a844 <memp_malloc_pool+0x1c>
 800a836:	4b0a      	ldr	r3, [pc, #40]	; (800a860 <memp_malloc_pool+0x38>)
 800a838:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a83c:	4909      	ldr	r1, [pc, #36]	; (800a864 <memp_malloc_pool+0x3c>)
 800a83e:	480a      	ldr	r0, [pc, #40]	; (800a868 <memp_malloc_pool+0x40>)
 800a840:	f00d fe3e 	bl	80184c0 <iprintf>
  if (desc == NULL) {
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <memp_malloc_pool+0x26>
    return NULL;
 800a84a:	2300      	movs	r3, #0
 800a84c:	e003      	b.n	800a856 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7ff ffb8 	bl	800a7c4 <do_memp_malloc_pool>
 800a854:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a856:	4618      	mov	r0, r3
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	0801bf5c 	.word	0x0801bf5c
 800a864:	0801bfd8 	.word	0x0801bfd8
 800a868:	0801bfb0 	.word	0x0801bfb0

0800a86c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	4603      	mov	r3, r0
 800a874:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a876:	79fb      	ldrb	r3, [r7, #7]
 800a878:	2b0c      	cmp	r3, #12
 800a87a:	d908      	bls.n	800a88e <memp_malloc+0x22>
 800a87c:	4b0a      	ldr	r3, [pc, #40]	; (800a8a8 <memp_malloc+0x3c>)
 800a87e:	f240 1257 	movw	r2, #343	; 0x157
 800a882:	490a      	ldr	r1, [pc, #40]	; (800a8ac <memp_malloc+0x40>)
 800a884:	480a      	ldr	r0, [pc, #40]	; (800a8b0 <memp_malloc+0x44>)
 800a886:	f00d fe1b 	bl	80184c0 <iprintf>
 800a88a:	2300      	movs	r3, #0
 800a88c:	e008      	b.n	800a8a0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a88e:	79fb      	ldrb	r3, [r7, #7]
 800a890:	4a08      	ldr	r2, [pc, #32]	; (800a8b4 <memp_malloc+0x48>)
 800a892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a896:	4618      	mov	r0, r3
 800a898:	f7ff ff94 	bl	800a7c4 <do_memp_malloc_pool>
 800a89c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a89e:	68fb      	ldr	r3, [r7, #12]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	0801bf5c 	.word	0x0801bf5c
 800a8ac:	0801bfec 	.word	0x0801bfec
 800a8b0:	0801bfb0 	.word	0x0801bfb0
 800a8b4:	0801ebb0 	.word	0x0801ebb0

0800a8b8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	f003 0303 	and.w	r3, r3, #3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d006      	beq.n	800a8da <do_memp_free_pool+0x22>
 800a8cc:	4b0d      	ldr	r3, [pc, #52]	; (800a904 <do_memp_free_pool+0x4c>)
 800a8ce:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a8d2:	490d      	ldr	r1, [pc, #52]	; (800a908 <do_memp_free_pool+0x50>)
 800a8d4:	480d      	ldr	r0, [pc, #52]	; (800a90c <do_memp_free_pool+0x54>)
 800a8d6:	f00d fdf3 	bl	80184c0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a8de:	f009 fecf 	bl	8014680 <sys_arch_protect>
 800a8e2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a8f6:	68b8      	ldr	r0, [r7, #8]
 800a8f8:	f009 fed0 	bl	801469c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a8fc:	bf00      	nop
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	0801bf5c 	.word	0x0801bf5c
 800a908:	0801c00c 	.word	0x0801c00c
 800a90c:	0801bfb0 	.word	0x0801bfb0

0800a910 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d106      	bne.n	800a92e <memp_free_pool+0x1e>
 800a920:	4b0a      	ldr	r3, [pc, #40]	; (800a94c <memp_free_pool+0x3c>)
 800a922:	f240 1295 	movw	r2, #405	; 0x195
 800a926:	490a      	ldr	r1, [pc, #40]	; (800a950 <memp_free_pool+0x40>)
 800a928:	480a      	ldr	r0, [pc, #40]	; (800a954 <memp_free_pool+0x44>)
 800a92a:	f00d fdc9 	bl	80184c0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d007      	beq.n	800a944 <memp_free_pool+0x34>
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d004      	beq.n	800a944 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff ffbb 	bl	800a8b8 <do_memp_free_pool>
 800a942:	e000      	b.n	800a946 <memp_free_pool+0x36>
    return;
 800a944:	bf00      	nop
}
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	0801bf5c 	.word	0x0801bf5c
 800a950:	0801bfd8 	.word	0x0801bfd8
 800a954:	0801bfb0 	.word	0x0801bfb0

0800a958 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	6039      	str	r1, [r7, #0]
 800a962:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a964:	79fb      	ldrb	r3, [r7, #7]
 800a966:	2b0c      	cmp	r3, #12
 800a968:	d907      	bls.n	800a97a <memp_free+0x22>
 800a96a:	4b0c      	ldr	r3, [pc, #48]	; (800a99c <memp_free+0x44>)
 800a96c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a970:	490b      	ldr	r1, [pc, #44]	; (800a9a0 <memp_free+0x48>)
 800a972:	480c      	ldr	r0, [pc, #48]	; (800a9a4 <memp_free+0x4c>)
 800a974:	f00d fda4 	bl	80184c0 <iprintf>
 800a978:	e00c      	b.n	800a994 <memp_free+0x3c>

  if (mem == NULL) {
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d008      	beq.n	800a992 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a980:	79fb      	ldrb	r3, [r7, #7]
 800a982:	4a09      	ldr	r2, [pc, #36]	; (800a9a8 <memp_free+0x50>)
 800a984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7ff ff94 	bl	800a8b8 <do_memp_free_pool>
 800a990:	e000      	b.n	800a994 <memp_free+0x3c>
    return;
 800a992:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	0801bf5c 	.word	0x0801bf5c
 800a9a0:	0801c02c 	.word	0x0801c02c
 800a9a4:	0801bfb0 	.word	0x0801bfb0
 800a9a8:	0801ebb0 	.word	0x0801ebb0

0800a9ac <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a9b0:	bf00      	nop
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
	...

0800a9bc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
 800a9c8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d108      	bne.n	800a9e2 <netif_add+0x26>
 800a9d0:	4b57      	ldr	r3, [pc, #348]	; (800ab30 <netif_add+0x174>)
 800a9d2:	f240 1227 	movw	r2, #295	; 0x127
 800a9d6:	4957      	ldr	r1, [pc, #348]	; (800ab34 <netif_add+0x178>)
 800a9d8:	4857      	ldr	r0, [pc, #348]	; (800ab38 <netif_add+0x17c>)
 800a9da:	f00d fd71 	bl	80184c0 <iprintf>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	e0a2      	b.n	800ab28 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d108      	bne.n	800a9fa <netif_add+0x3e>
 800a9e8:	4b51      	ldr	r3, [pc, #324]	; (800ab30 <netif_add+0x174>)
 800a9ea:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a9ee:	4953      	ldr	r1, [pc, #332]	; (800ab3c <netif_add+0x180>)
 800a9f0:	4851      	ldr	r0, [pc, #324]	; (800ab38 <netif_add+0x17c>)
 800a9f2:	f00d fd65 	bl	80184c0 <iprintf>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	e096      	b.n	800ab28 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800aa00:	4b4f      	ldr	r3, [pc, #316]	; (800ab40 <netif_add+0x184>)
 800aa02:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800aa0a:	4b4d      	ldr	r3, [pc, #308]	; (800ab40 <netif_add+0x184>)
 800aa0c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d101      	bne.n	800aa18 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800aa14:	4b4a      	ldr	r3, [pc, #296]	; (800ab40 <netif_add+0x184>)
 800aa16:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	4a45      	ldr	r2, [pc, #276]	; (800ab44 <netif_add+0x188>)
 800aa2e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6a3a      	ldr	r2, [r7, #32]
 800aa48:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800aa4a:	4b3f      	ldr	r3, [pc, #252]	; (800ab48 <netif_add+0x18c>)
 800aa4c:	781a      	ldrb	r2, [r3, #0]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa58:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	68b9      	ldr	r1, [r7, #8]
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 f913 	bl	800ac8c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	4798      	blx	r3
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <netif_add+0xba>
    return NULL;
 800aa72:	2300      	movs	r3, #0
 800aa74:	e058      	b.n	800ab28 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa7c:	2bff      	cmp	r3, #255	; 0xff
 800aa7e:	d103      	bne.n	800aa88 <netif_add+0xcc>
        netif->num = 0;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aa8c:	4b2f      	ldr	r3, [pc, #188]	; (800ab4c <netif_add+0x190>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	617b      	str	r3, [r7, #20]
 800aa92:	e02b      	b.n	800aaec <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d106      	bne.n	800aaaa <netif_add+0xee>
 800aa9c:	4b24      	ldr	r3, [pc, #144]	; (800ab30 <netif_add+0x174>)
 800aa9e:	f240 128b 	movw	r2, #395	; 0x18b
 800aaa2:	492b      	ldr	r1, [pc, #172]	; (800ab50 <netif_add+0x194>)
 800aaa4:	4824      	ldr	r0, [pc, #144]	; (800ab38 <netif_add+0x17c>)
 800aaa6:	f00d fd0b 	bl	80184c0 <iprintf>
        num_netifs++;
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	3301      	adds	r3, #1
 800aaae:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	2bff      	cmp	r3, #255	; 0xff
 800aab4:	dd06      	ble.n	800aac4 <netif_add+0x108>
 800aab6:	4b1e      	ldr	r3, [pc, #120]	; (800ab30 <netif_add+0x174>)
 800aab8:	f240 128d 	movw	r2, #397	; 0x18d
 800aabc:	4925      	ldr	r1, [pc, #148]	; (800ab54 <netif_add+0x198>)
 800aabe:	481e      	ldr	r0, [pc, #120]	; (800ab38 <netif_add+0x17c>)
 800aac0:	f00d fcfe 	bl	80184c0 <iprintf>
        if (netif2->num == netif->num) {
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d108      	bne.n	800aae6 <netif_add+0x12a>
          netif->num++;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aada:	3301      	adds	r3, #1
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800aae4:	e005      	b.n	800aaf2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	617b      	str	r3, [r7, #20]
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1d0      	bne.n	800aa94 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1be      	bne.n	800aa76 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aafe:	2bfe      	cmp	r3, #254	; 0xfe
 800ab00:	d103      	bne.n	800ab0a <netif_add+0x14e>
    netif_num = 0;
 800ab02:	4b11      	ldr	r3, [pc, #68]	; (800ab48 <netif_add+0x18c>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	701a      	strb	r2, [r3, #0]
 800ab08:	e006      	b.n	800ab18 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab10:	3301      	adds	r3, #1
 800ab12:	b2da      	uxtb	r2, r3
 800ab14:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <netif_add+0x18c>)
 800ab16:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ab18:	4b0c      	ldr	r3, [pc, #48]	; (800ab4c <netif_add+0x190>)
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ab20:	4a0a      	ldr	r2, [pc, #40]	; (800ab4c <netif_add+0x190>)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ab26:	68fb      	ldr	r3, [r7, #12]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3718      	adds	r7, #24
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	0801c048 	.word	0x0801c048
 800ab34:	0801c0dc 	.word	0x0801c0dc
 800ab38:	0801c098 	.word	0x0801c098
 800ab3c:	0801c0f8 	.word	0x0801c0f8
 800ab40:	0801ec24 	.word	0x0801ec24
 800ab44:	0800af67 	.word	0x0800af67
 800ab48:	2400b6b4 	.word	0x2400b6b4
 800ab4c:	2400ee30 	.word	0x2400ee30
 800ab50:	0801c11c 	.word	0x0801c11c
 800ab54:	0801c130 	.word	0x0801c130

0800ab58 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f002 fd49 	bl	800d5fc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f007 f9c3 	bl	8011ef8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ab72:	bf00      	nop
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
	...

0800ab7c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d106      	bne.n	800ab9c <netif_do_set_ipaddr+0x20>
 800ab8e:	4b1d      	ldr	r3, [pc, #116]	; (800ac04 <netif_do_set_ipaddr+0x88>)
 800ab90:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ab94:	491c      	ldr	r1, [pc, #112]	; (800ac08 <netif_do_set_ipaddr+0x8c>)
 800ab96:	481d      	ldr	r0, [pc, #116]	; (800ac0c <netif_do_set_ipaddr+0x90>)
 800ab98:	f00d fc92 	bl	80184c0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d106      	bne.n	800abb0 <netif_do_set_ipaddr+0x34>
 800aba2:	4b18      	ldr	r3, [pc, #96]	; (800ac04 <netif_do_set_ipaddr+0x88>)
 800aba4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800aba8:	4917      	ldr	r1, [pc, #92]	; (800ac08 <netif_do_set_ipaddr+0x8c>)
 800abaa:	4818      	ldr	r0, [pc, #96]	; (800ac0c <netif_do_set_ipaddr+0x90>)
 800abac:	f00d fc88 	bl	80184c0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	3304      	adds	r3, #4
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d01c      	beq.n	800abf8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	3304      	adds	r3, #4
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800abce:	f107 0314 	add.w	r3, r7, #20
 800abd2:	4619      	mov	r1, r3
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7ff ffbf 	bl	800ab58 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <netif_do_set_ipaddr+0x6a>
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	e000      	b.n	800abe8 <netif_do_set_ipaddr+0x6c>
 800abe6:	2300      	movs	r3, #0
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800abec:	2101      	movs	r1, #1
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f000 f8d2 	bl	800ad98 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800abf4:	2301      	movs	r3, #1
 800abf6:	e000      	b.n	800abfa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3718      	adds	r7, #24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	0801c048 	.word	0x0801c048
 800ac08:	0801c160 	.word	0x0801c160
 800ac0c:	0801c098 	.word	0x0801c098

0800ac10 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	3308      	adds	r3, #8
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d00a      	beq.n	800ac40 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <netif_do_set_netmask+0x26>
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	e000      	b.n	800ac38 <netif_do_set_netmask+0x28>
 800ac36:	2300      	movs	r3, #0
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e000      	b.n	800ac42 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ac4e:	b480      	push	{r7}
 800ac50:	b085      	sub	sp, #20
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	60f8      	str	r0, [r7, #12]
 800ac56:	60b9      	str	r1, [r7, #8]
 800ac58:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	330c      	adds	r3, #12
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d00a      	beq.n	800ac7e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d002      	beq.n	800ac74 <netif_do_set_gw+0x26>
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	e000      	b.n	800ac76 <netif_do_set_gw+0x28>
 800ac74:	2300      	movs	r3, #0
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e000      	b.n	800ac80 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3714      	adds	r7, #20
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b088      	sub	sp, #32
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
 800ac98:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d101      	bne.n	800acac <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800aca8:	4b1c      	ldr	r3, [pc, #112]	; (800ad1c <netif_set_addr+0x90>)
 800acaa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d101      	bne.n	800acb6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800acb2:	4b1a      	ldr	r3, [pc, #104]	; (800ad1c <netif_set_addr+0x90>)
 800acb4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d101      	bne.n	800acc0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800acbc:	4b17      	ldr	r3, [pc, #92]	; (800ad1c <netif_set_addr+0x90>)
 800acbe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d003      	beq.n	800acce <netif_set_addr+0x42>
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <netif_set_addr+0x46>
 800acce:	2301      	movs	r3, #1
 800acd0:	e000      	b.n	800acd4 <netif_set_addr+0x48>
 800acd2:	2300      	movs	r3, #0
 800acd4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d006      	beq.n	800acea <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800acdc:	f107 0310 	add.w	r3, r7, #16
 800ace0:	461a      	mov	r2, r3
 800ace2:	68b9      	ldr	r1, [r7, #8]
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f7ff ff49 	bl	800ab7c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800acea:	69fa      	ldr	r2, [r7, #28]
 800acec:	6879      	ldr	r1, [r7, #4]
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f7ff ff8e 	bl	800ac10 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800acf4:	69ba      	ldr	r2, [r7, #24]
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f7ff ffa8 	bl	800ac4e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d106      	bne.n	800ad12 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ad04:	f107 0310 	add.w	r3, r7, #16
 800ad08:	461a      	mov	r2, r3
 800ad0a:	68b9      	ldr	r1, [r7, #8]
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f7ff ff35 	bl	800ab7c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ad12:	bf00      	nop
 800ad14:	3720      	adds	r7, #32
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	0801ec24 	.word	0x0801ec24

0800ad20 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ad28:	4a04      	ldr	r2, [pc, #16]	; (800ad3c <netif_set_default+0x1c>)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ad2e:	bf00      	nop
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	2400ee34 	.word	0x2400ee34

0800ad40 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d107      	bne.n	800ad5e <netif_set_up+0x1e>
 800ad4e:	4b0f      	ldr	r3, [pc, #60]	; (800ad8c <netif_set_up+0x4c>)
 800ad50:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ad54:	490e      	ldr	r1, [pc, #56]	; (800ad90 <netif_set_up+0x50>)
 800ad56:	480f      	ldr	r0, [pc, #60]	; (800ad94 <netif_set_up+0x54>)
 800ad58:	f00d fbb2 	bl	80184c0 <iprintf>
 800ad5c:	e013      	b.n	800ad86 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad64:	f003 0301 	and.w	r3, r3, #1
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10c      	bne.n	800ad86 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad72:	f043 0301 	orr.w	r3, r3, #1
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ad7e:	2103      	movs	r1, #3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f809 	bl	800ad98 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	0801c048 	.word	0x0801c048
 800ad90:	0801c1d0 	.word	0x0801c1d0
 800ad94:	0801c098 	.word	0x0801c098

0800ad98 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	460b      	mov	r3, r1
 800ada2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d106      	bne.n	800adb8 <netif_issue_reports+0x20>
 800adaa:	4b18      	ldr	r3, [pc, #96]	; (800ae0c <netif_issue_reports+0x74>)
 800adac:	f240 326d 	movw	r2, #877	; 0x36d
 800adb0:	4917      	ldr	r1, [pc, #92]	; (800ae10 <netif_issue_reports+0x78>)
 800adb2:	4818      	ldr	r0, [pc, #96]	; (800ae14 <netif_issue_reports+0x7c>)
 800adb4:	f00d fb84 	bl	80184c0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800adbe:	f003 0304 	and.w	r3, r3, #4
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d01e      	beq.n	800ae04 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800adcc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800add0:	2b00      	cmp	r3, #0
 800add2:	d017      	beq.n	800ae04 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800add4:	78fb      	ldrb	r3, [r7, #3]
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	2b00      	cmp	r3, #0
 800addc:	d013      	beq.n	800ae06 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	3304      	adds	r3, #4
 800ade2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00e      	beq.n	800ae06 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800adee:	f003 0308 	and.w	r3, r3, #8
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d007      	beq.n	800ae06 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	3304      	adds	r3, #4
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f007 ffe5 	bl	8012dcc <etharp_request>
 800ae02:	e000      	b.n	800ae06 <netif_issue_reports+0x6e>
    return;
 800ae04:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	0801c048 	.word	0x0801c048
 800ae10:	0801c1ec 	.word	0x0801c1ec
 800ae14:	0801c098 	.word	0x0801c098

0800ae18 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d107      	bne.n	800ae36 <netif_set_down+0x1e>
 800ae26:	4b12      	ldr	r3, [pc, #72]	; (800ae70 <netif_set_down+0x58>)
 800ae28:	f240 329b 	movw	r2, #923	; 0x39b
 800ae2c:	4911      	ldr	r1, [pc, #68]	; (800ae74 <netif_set_down+0x5c>)
 800ae2e:	4812      	ldr	r0, [pc, #72]	; (800ae78 <netif_set_down+0x60>)
 800ae30:	f00d fb46 	bl	80184c0 <iprintf>
 800ae34:	e019      	b.n	800ae6a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae3c:	f003 0301 	and.w	r3, r3, #1
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d012      	beq.n	800ae6a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae4a:	f023 0301 	bic.w	r3, r3, #1
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae5c:	f003 0308 	and.w	r3, r3, #8
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f007 fb6f 	bl	8012548 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	0801c048 	.word	0x0801c048
 800ae74:	0801c210 	.word	0x0801c210
 800ae78:	0801c098 	.word	0x0801c098

0800ae7c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d107      	bne.n	800ae9a <netif_set_link_up+0x1e>
 800ae8a:	4b13      	ldr	r3, [pc, #76]	; (800aed8 <netif_set_link_up+0x5c>)
 800ae8c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ae90:	4912      	ldr	r1, [pc, #72]	; (800aedc <netif_set_link_up+0x60>)
 800ae92:	4813      	ldr	r0, [pc, #76]	; (800aee0 <netif_set_link_up+0x64>)
 800ae94:	f00d fb14 	bl	80184c0 <iprintf>
 800ae98:	e01b      	b.n	800aed2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aea0:	f003 0304 	and.w	r3, r3, #4
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d114      	bne.n	800aed2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aeae:	f043 0304 	orr.w	r3, r3, #4
 800aeb2:	b2da      	uxtb	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aeba:	2103      	movs	r1, #3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f7ff ff6b 	bl	800ad98 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	69db      	ldr	r3, [r3, #28]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <netif_set_link_up+0x56>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	69db      	ldr	r3, [r3, #28]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	0801c048 	.word	0x0801c048
 800aedc:	0801c230 	.word	0x0801c230
 800aee0:	0801c098 	.word	0x0801c098

0800aee4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d107      	bne.n	800af02 <netif_set_link_down+0x1e>
 800aef2:	4b11      	ldr	r3, [pc, #68]	; (800af38 <netif_set_link_down+0x54>)
 800aef4:	f240 4206 	movw	r2, #1030	; 0x406
 800aef8:	4910      	ldr	r1, [pc, #64]	; (800af3c <netif_set_link_down+0x58>)
 800aefa:	4811      	ldr	r0, [pc, #68]	; (800af40 <netif_set_link_down+0x5c>)
 800aefc:	f00d fae0 	bl	80184c0 <iprintf>
 800af00:	e017      	b.n	800af32 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af08:	f003 0304 	and.w	r3, r3, #4
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d010      	beq.n	800af32 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af16:	f023 0304 	bic.w	r3, r3, #4
 800af1a:	b2da      	uxtb	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <netif_set_link_down+0x4e>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	0801c048 	.word	0x0801c048
 800af3c:	0801c254 	.word	0x0801c254
 800af40:	0801c098 	.word	0x0801c098

0800af44 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d002      	beq.n	800af5a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	61da      	str	r2, [r3, #28]
  }
}
 800af5a:	bf00      	nop
 800af5c:	370c      	adds	r7, #12
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800af66:	b480      	push	{r7}
 800af68:	b085      	sub	sp, #20
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	60f8      	str	r0, [r7, #12]
 800af6e:	60b9      	str	r1, [r7, #8]
 800af70:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800af72:	f06f 030b 	mvn.w	r3, #11
}
 800af76:	4618      	mov	r0, r3
 800af78:	3714      	adds	r7, #20
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
	...

0800af84 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	4603      	mov	r3, r0
 800af8c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800af8e:	79fb      	ldrb	r3, [r7, #7]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d013      	beq.n	800afbc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800af94:	4b0d      	ldr	r3, [pc, #52]	; (800afcc <netif_get_by_index+0x48>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	60fb      	str	r3, [r7, #12]
 800af9a:	e00c      	b.n	800afb6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800afa2:	3301      	adds	r3, #1
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	79fa      	ldrb	r2, [r7, #7]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d101      	bne.n	800afb0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	e006      	b.n	800afbe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	60fb      	str	r3, [r7, #12]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1ef      	bne.n	800af9c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	2400ee30 	.word	0x2400ee30

0800afd0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800afd6:	f009 fb53 	bl	8014680 <sys_arch_protect>
 800afda:	6038      	str	r0, [r7, #0]
 800afdc:	4b0d      	ldr	r3, [pc, #52]	; (800b014 <pbuf_free_ooseq+0x44>)
 800afde:	2200      	movs	r2, #0
 800afe0:	701a      	strb	r2, [r3, #0]
 800afe2:	6838      	ldr	r0, [r7, #0]
 800afe4:	f009 fb5a 	bl	801469c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800afe8:	4b0b      	ldr	r3, [pc, #44]	; (800b018 <pbuf_free_ooseq+0x48>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	607b      	str	r3, [r7, #4]
 800afee:	e00a      	b.n	800b006 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d003      	beq.n	800b000 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f002 fb3d 	bl	800d678 <tcp_free_ooseq>
      return;
 800affe:	e005      	b.n	800b00c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	607b      	str	r3, [r7, #4]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1f1      	bne.n	800aff0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	2400ee38 	.word	0x2400ee38
 800b018:	2400ee40 	.word	0x2400ee40

0800b01c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b024:	f7ff ffd4 	bl	800afd0 <pbuf_free_ooseq>
}
 800b028:	bf00      	nop
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b036:	f009 fb23 	bl	8014680 <sys_arch_protect>
 800b03a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b03c:	4b0f      	ldr	r3, [pc, #60]	; (800b07c <pbuf_pool_is_empty+0x4c>)
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b042:	4b0e      	ldr	r3, [pc, #56]	; (800b07c <pbuf_pool_is_empty+0x4c>)
 800b044:	2201      	movs	r2, #1
 800b046:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f009 fb27 	bl	801469c <sys_arch_unprotect>

  if (!queued) {
 800b04e:	78fb      	ldrb	r3, [r7, #3]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10f      	bne.n	800b074 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b054:	2100      	movs	r1, #0
 800b056:	480a      	ldr	r0, [pc, #40]	; (800b080 <pbuf_pool_is_empty+0x50>)
 800b058:	f7fe feaa 	bl	8009db0 <tcpip_try_callback>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d008      	beq.n	800b074 <pbuf_pool_is_empty+0x44>
 800b062:	f009 fb0d 	bl	8014680 <sys_arch_protect>
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	4b04      	ldr	r3, [pc, #16]	; (800b07c <pbuf_pool_is_empty+0x4c>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	701a      	strb	r2, [r3, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f009 fb14 	bl	801469c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b074:	bf00      	nop
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	2400ee38 	.word	0x2400ee38
 800b080:	0800b01d 	.word	0x0800b01d

0800b084 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	4611      	mov	r1, r2
 800b090:	461a      	mov	r2, r3
 800b092:	460b      	mov	r3, r1
 800b094:	80fb      	strh	r3, [r7, #6]
 800b096:	4613      	mov	r3, r2
 800b098:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	88fa      	ldrh	r2, [r7, #6]
 800b0aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	88ba      	ldrh	r2, [r7, #4]
 800b0b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b0b2:	8b3b      	ldrh	r3, [r7, #24]
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	7f3a      	ldrb	r2, [r7, #28]
 800b0be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	73da      	strb	r2, [r3, #15]
}
 800b0cc:	bf00      	nop
 800b0ce:	3714      	adds	r7, #20
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b08c      	sub	sp, #48	; 0x30
 800b0dc:	af02      	add	r7, sp, #8
 800b0de:	4603      	mov	r3, r0
 800b0e0:	71fb      	strb	r3, [r7, #7]
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	80bb      	strh	r3, [r7, #4]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b0ea:	79fb      	ldrb	r3, [r7, #7]
 800b0ec:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b0ee:	887b      	ldrh	r3, [r7, #2]
 800b0f0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b0f4:	d07f      	beq.n	800b1f6 <pbuf_alloc+0x11e>
 800b0f6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b0fa:	f300 80c8 	bgt.w	800b28e <pbuf_alloc+0x1b6>
 800b0fe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b102:	d010      	beq.n	800b126 <pbuf_alloc+0x4e>
 800b104:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b108:	f300 80c1 	bgt.w	800b28e <pbuf_alloc+0x1b6>
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d002      	beq.n	800b116 <pbuf_alloc+0x3e>
 800b110:	2b41      	cmp	r3, #65	; 0x41
 800b112:	f040 80bc 	bne.w	800b28e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b116:	887a      	ldrh	r2, [r7, #2]
 800b118:	88bb      	ldrh	r3, [r7, #4]
 800b11a:	4619      	mov	r1, r3
 800b11c:	2000      	movs	r0, #0
 800b11e:	f000 f8d1 	bl	800b2c4 <pbuf_alloc_reference>
 800b122:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b124:	e0bd      	b.n	800b2a2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b126:	2300      	movs	r3, #0
 800b128:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b12a:	2300      	movs	r3, #0
 800b12c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b12e:	88bb      	ldrh	r3, [r7, #4]
 800b130:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b132:	200c      	movs	r0, #12
 800b134:	f7ff fb9a 	bl	800a86c <memp_malloc>
 800b138:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d109      	bne.n	800b154 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b140:	f7ff ff76 	bl	800b030 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	2b00      	cmp	r3, #0
 800b148:	d002      	beq.n	800b150 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b14a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b14c:	f000 faa8 	bl	800b6a0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b150:	2300      	movs	r3, #0
 800b152:	e0a7      	b.n	800b2a4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b154:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b156:	3303      	adds	r3, #3
 800b158:	b29b      	uxth	r3, r3
 800b15a:	f023 0303 	bic.w	r3, r3, #3
 800b15e:	b29b      	uxth	r3, r3
 800b160:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b164:	b29b      	uxth	r3, r3
 800b166:	8b7a      	ldrh	r2, [r7, #26]
 800b168:	4293      	cmp	r3, r2
 800b16a:	bf28      	it	cs
 800b16c:	4613      	movcs	r3, r2
 800b16e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b170:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b172:	3310      	adds	r3, #16
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	4413      	add	r3, r2
 800b178:	3303      	adds	r3, #3
 800b17a:	f023 0303 	bic.w	r3, r3, #3
 800b17e:	4618      	mov	r0, r3
 800b180:	89f9      	ldrh	r1, [r7, #14]
 800b182:	8b7a      	ldrh	r2, [r7, #26]
 800b184:	2300      	movs	r3, #0
 800b186:	9301      	str	r3, [sp, #4]
 800b188:	887b      	ldrh	r3, [r7, #2]
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	460b      	mov	r3, r1
 800b18e:	4601      	mov	r1, r0
 800b190:	6938      	ldr	r0, [r7, #16]
 800b192:	f7ff ff77 	bl	800b084 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	f003 0303 	and.w	r3, r3, #3
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d006      	beq.n	800b1b0 <pbuf_alloc+0xd8>
 800b1a2:	4b42      	ldr	r3, [pc, #264]	; (800b2ac <pbuf_alloc+0x1d4>)
 800b1a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1a8:	4941      	ldr	r1, [pc, #260]	; (800b2b0 <pbuf_alloc+0x1d8>)
 800b1aa:	4842      	ldr	r0, [pc, #264]	; (800b2b4 <pbuf_alloc+0x1dc>)
 800b1ac:	f00d f988 	bl	80184c0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b1b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1b2:	3303      	adds	r3, #3
 800b1b4:	f023 0303 	bic.w	r3, r3, #3
 800b1b8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b1bc:	d106      	bne.n	800b1cc <pbuf_alloc+0xf4>
 800b1be:	4b3b      	ldr	r3, [pc, #236]	; (800b2ac <pbuf_alloc+0x1d4>)
 800b1c0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b1c4:	493c      	ldr	r1, [pc, #240]	; (800b2b8 <pbuf_alloc+0x1e0>)
 800b1c6:	483b      	ldr	r0, [pc, #236]	; (800b2b4 <pbuf_alloc+0x1dc>)
 800b1c8:	f00d f97a 	bl	80184c0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d102      	bne.n	800b1d8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b1d6:	e002      	b.n	800b1de <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	693a      	ldr	r2, [r7, #16]
 800b1dc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b1e2:	8b7a      	ldrh	r2, [r7, #26]
 800b1e4:	89fb      	ldrh	r3, [r7, #14]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b1ee:	8b7b      	ldrh	r3, [r7, #26]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d19e      	bne.n	800b132 <pbuf_alloc+0x5a>
      break;
 800b1f4:	e055      	b.n	800b2a2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b1f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1f8:	3303      	adds	r3, #3
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	f023 0303 	bic.w	r3, r3, #3
 800b200:	b29a      	uxth	r2, r3
 800b202:	88bb      	ldrh	r3, [r7, #4]
 800b204:	3303      	adds	r3, #3
 800b206:	b29b      	uxth	r3, r3
 800b208:	f023 0303 	bic.w	r3, r3, #3
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	4413      	add	r3, r2
 800b210:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b212:	8b3b      	ldrh	r3, [r7, #24]
 800b214:	3310      	adds	r3, #16
 800b216:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b218:	8b3a      	ldrh	r2, [r7, #24]
 800b21a:	88bb      	ldrh	r3, [r7, #4]
 800b21c:	3303      	adds	r3, #3
 800b21e:	f023 0303 	bic.w	r3, r3, #3
 800b222:	429a      	cmp	r2, r3
 800b224:	d306      	bcc.n	800b234 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b226:	8afa      	ldrh	r2, [r7, #22]
 800b228:	88bb      	ldrh	r3, [r7, #4]
 800b22a:	3303      	adds	r3, #3
 800b22c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b230:	429a      	cmp	r2, r3
 800b232:	d201      	bcs.n	800b238 <pbuf_alloc+0x160>
        return NULL;
 800b234:	2300      	movs	r3, #0
 800b236:	e035      	b.n	800b2a4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b238:	8afb      	ldrh	r3, [r7, #22]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7ff f972 	bl	800a524 <mem_malloc>
 800b240:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	2b00      	cmp	r3, #0
 800b246:	d101      	bne.n	800b24c <pbuf_alloc+0x174>
        return NULL;
 800b248:	2300      	movs	r3, #0
 800b24a:	e02b      	b.n	800b2a4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b24c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b24e:	3310      	adds	r3, #16
 800b250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b252:	4413      	add	r3, r2
 800b254:	3303      	adds	r3, #3
 800b256:	f023 0303 	bic.w	r3, r3, #3
 800b25a:	4618      	mov	r0, r3
 800b25c:	88b9      	ldrh	r1, [r7, #4]
 800b25e:	88ba      	ldrh	r2, [r7, #4]
 800b260:	2300      	movs	r3, #0
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	887b      	ldrh	r3, [r7, #2]
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	460b      	mov	r3, r1
 800b26a:	4601      	mov	r1, r0
 800b26c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b26e:	f7ff ff09 	bl	800b084 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	f003 0303 	and.w	r3, r3, #3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d010      	beq.n	800b2a0 <pbuf_alloc+0x1c8>
 800b27e:	4b0b      	ldr	r3, [pc, #44]	; (800b2ac <pbuf_alloc+0x1d4>)
 800b280:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b284:	490d      	ldr	r1, [pc, #52]	; (800b2bc <pbuf_alloc+0x1e4>)
 800b286:	480b      	ldr	r0, [pc, #44]	; (800b2b4 <pbuf_alloc+0x1dc>)
 800b288:	f00d f91a 	bl	80184c0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b28c:	e008      	b.n	800b2a0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b28e:	4b07      	ldr	r3, [pc, #28]	; (800b2ac <pbuf_alloc+0x1d4>)
 800b290:	f240 1227 	movw	r2, #295	; 0x127
 800b294:	490a      	ldr	r1, [pc, #40]	; (800b2c0 <pbuf_alloc+0x1e8>)
 800b296:	4807      	ldr	r0, [pc, #28]	; (800b2b4 <pbuf_alloc+0x1dc>)
 800b298:	f00d f912 	bl	80184c0 <iprintf>
      return NULL;
 800b29c:	2300      	movs	r3, #0
 800b29e:	e001      	b.n	800b2a4 <pbuf_alloc+0x1cc>
      break;
 800b2a0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3728      	adds	r7, #40	; 0x28
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	0801c278 	.word	0x0801c278
 800b2b0:	0801c2a8 	.word	0x0801c2a8
 800b2b4:	0801c2d8 	.word	0x0801c2d8
 800b2b8:	0801c300 	.word	0x0801c300
 800b2bc:	0801c334 	.word	0x0801c334
 800b2c0:	0801c360 	.word	0x0801c360

0800b2c4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af02      	add	r7, sp, #8
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	807b      	strh	r3, [r7, #2]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b2d4:	883b      	ldrh	r3, [r7, #0]
 800b2d6:	2b41      	cmp	r3, #65	; 0x41
 800b2d8:	d009      	beq.n	800b2ee <pbuf_alloc_reference+0x2a>
 800b2da:	883b      	ldrh	r3, [r7, #0]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d006      	beq.n	800b2ee <pbuf_alloc_reference+0x2a>
 800b2e0:	4b0f      	ldr	r3, [pc, #60]	; (800b320 <pbuf_alloc_reference+0x5c>)
 800b2e2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b2e6:	490f      	ldr	r1, [pc, #60]	; (800b324 <pbuf_alloc_reference+0x60>)
 800b2e8:	480f      	ldr	r0, [pc, #60]	; (800b328 <pbuf_alloc_reference+0x64>)
 800b2ea:	f00d f8e9 	bl	80184c0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b2ee:	200b      	movs	r0, #11
 800b2f0:	f7ff fabc 	bl	800a86c <memp_malloc>
 800b2f4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d101      	bne.n	800b300 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	e00b      	b.n	800b318 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b300:	8879      	ldrh	r1, [r7, #2]
 800b302:	887a      	ldrh	r2, [r7, #2]
 800b304:	2300      	movs	r3, #0
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	883b      	ldrh	r3, [r7, #0]
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	460b      	mov	r3, r1
 800b30e:	6879      	ldr	r1, [r7, #4]
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f7ff feb7 	bl	800b084 <pbuf_init_alloced_pbuf>
  return p;
 800b316:	68fb      	ldr	r3, [r7, #12]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	0801c278 	.word	0x0801c278
 800b324:	0801c37c 	.word	0x0801c37c
 800b328:	0801c2d8 	.word	0x0801c2d8

0800b32c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af02      	add	r7, sp, #8
 800b332:	607b      	str	r3, [r7, #4]
 800b334:	4603      	mov	r3, r0
 800b336:	73fb      	strb	r3, [r7, #15]
 800b338:	460b      	mov	r3, r1
 800b33a:	81bb      	strh	r3, [r7, #12]
 800b33c:	4613      	mov	r3, r2
 800b33e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b340:	7bfb      	ldrb	r3, [r7, #15]
 800b342:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b344:	8a7b      	ldrh	r3, [r7, #18]
 800b346:	3303      	adds	r3, #3
 800b348:	f023 0203 	bic.w	r2, r3, #3
 800b34c:	89bb      	ldrh	r3, [r7, #12]
 800b34e:	441a      	add	r2, r3
 800b350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b352:	429a      	cmp	r2, r3
 800b354:	d901      	bls.n	800b35a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b356:	2300      	movs	r3, #0
 800b358:	e018      	b.n	800b38c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d007      	beq.n	800b370 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b360:	8a7b      	ldrh	r3, [r7, #18]
 800b362:	3303      	adds	r3, #3
 800b364:	f023 0303 	bic.w	r3, r3, #3
 800b368:	6a3a      	ldr	r2, [r7, #32]
 800b36a:	4413      	add	r3, r2
 800b36c:	617b      	str	r3, [r7, #20]
 800b36e:	e001      	b.n	800b374 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b370:	2300      	movs	r3, #0
 800b372:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	89b9      	ldrh	r1, [r7, #12]
 800b378:	89ba      	ldrh	r2, [r7, #12]
 800b37a:	2302      	movs	r3, #2
 800b37c:	9301      	str	r3, [sp, #4]
 800b37e:	897b      	ldrh	r3, [r7, #10]
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	460b      	mov	r3, r1
 800b384:	6979      	ldr	r1, [r7, #20]
 800b386:	f7ff fe7d 	bl	800b084 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b38a:	687b      	ldr	r3, [r7, #4]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d106      	bne.n	800b3b4 <pbuf_realloc+0x20>
 800b3a6:	4b3a      	ldr	r3, [pc, #232]	; (800b490 <pbuf_realloc+0xfc>)
 800b3a8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b3ac:	4939      	ldr	r1, [pc, #228]	; (800b494 <pbuf_realloc+0x100>)
 800b3ae:	483a      	ldr	r0, [pc, #232]	; (800b498 <pbuf_realloc+0x104>)
 800b3b0:	f00d f886 	bl	80184c0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	891b      	ldrh	r3, [r3, #8]
 800b3b8:	887a      	ldrh	r2, [r7, #2]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d263      	bcs.n	800b486 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	891a      	ldrh	r2, [r3, #8]
 800b3c2:	887b      	ldrh	r3, [r7, #2]
 800b3c4:	1ad3      	subs	r3, r2, r3
 800b3c6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b3c8:	887b      	ldrh	r3, [r7, #2]
 800b3ca:	817b      	strh	r3, [r7, #10]
  q = p;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b3d0:	e018      	b.n	800b404 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	895b      	ldrh	r3, [r3, #10]
 800b3d6:	897a      	ldrh	r2, [r7, #10]
 800b3d8:	1ad3      	subs	r3, r2, r3
 800b3da:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	891a      	ldrh	r2, [r3, #8]
 800b3e0:	893b      	ldrh	r3, [r7, #8]
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d106      	bne.n	800b404 <pbuf_realloc+0x70>
 800b3f6:	4b26      	ldr	r3, [pc, #152]	; (800b490 <pbuf_realloc+0xfc>)
 800b3f8:	f240 12af 	movw	r2, #431	; 0x1af
 800b3fc:	4927      	ldr	r1, [pc, #156]	; (800b49c <pbuf_realloc+0x108>)
 800b3fe:	4826      	ldr	r0, [pc, #152]	; (800b498 <pbuf_realloc+0x104>)
 800b400:	f00d f85e 	bl	80184c0 <iprintf>
  while (rem_len > q->len) {
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	895b      	ldrh	r3, [r3, #10]
 800b408:	897a      	ldrh	r2, [r7, #10]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d8e1      	bhi.n	800b3d2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	7b1b      	ldrb	r3, [r3, #12]
 800b412:	f003 030f 	and.w	r3, r3, #15
 800b416:	2b00      	cmp	r3, #0
 800b418:	d121      	bne.n	800b45e <pbuf_realloc+0xca>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	895b      	ldrh	r3, [r3, #10]
 800b41e:	897a      	ldrh	r2, [r7, #10]
 800b420:	429a      	cmp	r2, r3
 800b422:	d01c      	beq.n	800b45e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	7b5b      	ldrb	r3, [r3, #13]
 800b428:	f003 0302 	and.w	r3, r3, #2
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d116      	bne.n	800b45e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	685a      	ldr	r2, [r3, #4]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	1ad3      	subs	r3, r2, r3
 800b438:	b29a      	uxth	r2, r3
 800b43a:	897b      	ldrh	r3, [r7, #10]
 800b43c:	4413      	add	r3, r2
 800b43e:	b29b      	uxth	r3, r3
 800b440:	4619      	mov	r1, r3
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f7fe ff64 	bl	800a310 <mem_trim>
 800b448:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d106      	bne.n	800b45e <pbuf_realloc+0xca>
 800b450:	4b0f      	ldr	r3, [pc, #60]	; (800b490 <pbuf_realloc+0xfc>)
 800b452:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b456:	4912      	ldr	r1, [pc, #72]	; (800b4a0 <pbuf_realloc+0x10c>)
 800b458:	480f      	ldr	r0, [pc, #60]	; (800b498 <pbuf_realloc+0x104>)
 800b45a:	f00d f831 	bl	80184c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	897a      	ldrh	r2, [r7, #10]
 800b462:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	895a      	ldrh	r2, [r3, #10]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d004      	beq.n	800b47e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4618      	mov	r0, r3
 800b47a:	f000 f911 	bl	800b6a0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	601a      	str	r2, [r3, #0]
 800b484:	e000      	b.n	800b488 <pbuf_realloc+0xf4>
    return;
 800b486:	bf00      	nop

}
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	0801c278 	.word	0x0801c278
 800b494:	0801c390 	.word	0x0801c390
 800b498:	0801c2d8 	.word	0x0801c2d8
 800b49c:	0801c3a8 	.word	0x0801c3a8
 800b4a0:	0801c3c0 	.word	0x0801c3c0

0800b4a4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b086      	sub	sp, #24
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d106      	bne.n	800b4c6 <pbuf_add_header_impl+0x22>
 800b4b8:	4b2b      	ldr	r3, [pc, #172]	; (800b568 <pbuf_add_header_impl+0xc4>)
 800b4ba:	f240 12df 	movw	r2, #479	; 0x1df
 800b4be:	492b      	ldr	r1, [pc, #172]	; (800b56c <pbuf_add_header_impl+0xc8>)
 800b4c0:	482b      	ldr	r0, [pc, #172]	; (800b570 <pbuf_add_header_impl+0xcc>)
 800b4c2:	f00c fffd 	bl	80184c0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d003      	beq.n	800b4d4 <pbuf_add_header_impl+0x30>
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4d2:	d301      	bcc.n	800b4d8 <pbuf_add_header_impl+0x34>
    return 1;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e043      	b.n	800b560 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d101      	bne.n	800b4e2 <pbuf_add_header_impl+0x3e>
    return 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e03e      	b.n	800b560 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	891a      	ldrh	r2, [r3, #8]
 800b4ea:	8a7b      	ldrh	r3, [r7, #18]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	8a7a      	ldrh	r2, [r7, #18]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d901      	bls.n	800b4fa <pbuf_add_header_impl+0x56>
    return 1;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e032      	b.n	800b560 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	7b1b      	ldrb	r3, [r3, #12]
 800b4fe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b500:	8a3b      	ldrh	r3, [r7, #16]
 800b502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00c      	beq.n	800b524 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	685a      	ldr	r2, [r3, #4]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	425b      	negs	r3, r3
 800b512:	4413      	add	r3, r2
 800b514:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	3310      	adds	r3, #16
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d20d      	bcs.n	800b53c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b520:	2301      	movs	r3, #1
 800b522:	e01d      	b.n	800b560 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b524:	79fb      	ldrb	r3, [r7, #7]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d006      	beq.n	800b538 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	685a      	ldr	r2, [r3, #4]
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	425b      	negs	r3, r3
 800b532:	4413      	add	r3, r2
 800b534:	617b      	str	r3, [r7, #20]
 800b536:	e001      	b.n	800b53c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b538:	2301      	movs	r3, #1
 800b53a:	e011      	b.n	800b560 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	895a      	ldrh	r2, [r3, #10]
 800b546:	8a7b      	ldrh	r3, [r7, #18]
 800b548:	4413      	add	r3, r2
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	891a      	ldrh	r2, [r3, #8]
 800b554:	8a7b      	ldrh	r3, [r7, #18]
 800b556:	4413      	add	r3, r2
 800b558:	b29a      	uxth	r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	811a      	strh	r2, [r3, #8]


  return 0;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3718      	adds	r7, #24
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	0801c278 	.word	0x0801c278
 800b56c:	0801c3dc 	.word	0x0801c3dc
 800b570:	0801c2d8 	.word	0x0801c2d8

0800b574 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b57e:	2200      	movs	r2, #0
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7ff ff8e 	bl	800b4a4 <pbuf_add_header_impl>
 800b588:	4603      	mov	r3, r0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
	...

0800b594 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d106      	bne.n	800b5b2 <pbuf_remove_header+0x1e>
 800b5a4:	4b20      	ldr	r3, [pc, #128]	; (800b628 <pbuf_remove_header+0x94>)
 800b5a6:	f240 224b 	movw	r2, #587	; 0x24b
 800b5aa:	4920      	ldr	r1, [pc, #128]	; (800b62c <pbuf_remove_header+0x98>)
 800b5ac:	4820      	ldr	r0, [pc, #128]	; (800b630 <pbuf_remove_header+0x9c>)
 800b5ae:	f00c ff87 	bl	80184c0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d003      	beq.n	800b5c0 <pbuf_remove_header+0x2c>
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5be:	d301      	bcc.n	800b5c4 <pbuf_remove_header+0x30>
    return 1;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e02c      	b.n	800b61e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <pbuf_remove_header+0x3a>
    return 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e027      	b.n	800b61e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	895b      	ldrh	r3, [r3, #10]
 800b5d6:	89fa      	ldrh	r2, [r7, #14]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d908      	bls.n	800b5ee <pbuf_remove_header+0x5a>
 800b5dc:	4b12      	ldr	r3, [pc, #72]	; (800b628 <pbuf_remove_header+0x94>)
 800b5de:	f240 2255 	movw	r2, #597	; 0x255
 800b5e2:	4914      	ldr	r1, [pc, #80]	; (800b634 <pbuf_remove_header+0xa0>)
 800b5e4:	4812      	ldr	r0, [pc, #72]	; (800b630 <pbuf_remove_header+0x9c>)
 800b5e6:	f00c ff6b 	bl	80184c0 <iprintf>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e017      	b.n	800b61e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	685a      	ldr	r2, [r3, #4]
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	441a      	add	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	895a      	ldrh	r2, [r3, #10]
 800b604:	89fb      	ldrh	r3, [r7, #14]
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	b29a      	uxth	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	891a      	ldrh	r2, [r3, #8]
 800b612:	89fb      	ldrh	r3, [r7, #14]
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	b29a      	uxth	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	0801c278 	.word	0x0801c278
 800b62c:	0801c3dc 	.word	0x0801c3dc
 800b630:	0801c2d8 	.word	0x0801c2d8
 800b634:	0801c3e8 	.word	0x0801c3e8

0800b638 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	460b      	mov	r3, r1
 800b642:	807b      	strh	r3, [r7, #2]
 800b644:	4613      	mov	r3, r2
 800b646:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b648:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	da08      	bge.n	800b662 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b650:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b654:	425b      	negs	r3, r3
 800b656:	4619      	mov	r1, r3
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f7ff ff9b 	bl	800b594 <pbuf_remove_header>
 800b65e:	4603      	mov	r3, r0
 800b660:	e007      	b.n	800b672 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b662:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b666:	787a      	ldrb	r2, [r7, #1]
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff ff1a 	bl	800b4a4 <pbuf_add_header_impl>
 800b670:	4603      	mov	r3, r0
  }
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b082      	sub	sp, #8
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	460b      	mov	r3, r1
 800b684:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b686:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b68a:	2201      	movs	r2, #1
 800b68c:	4619      	mov	r1, r3
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f7ff ffd2 	bl	800b638 <pbuf_header_impl>
 800b694:	4603      	mov	r3, r0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
	...

0800b6a0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10b      	bne.n	800b6c6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d106      	bne.n	800b6c2 <pbuf_free+0x22>
 800b6b4:	4b3b      	ldr	r3, [pc, #236]	; (800b7a4 <pbuf_free+0x104>)
 800b6b6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b6ba:	493b      	ldr	r1, [pc, #236]	; (800b7a8 <pbuf_free+0x108>)
 800b6bc:	483b      	ldr	r0, [pc, #236]	; (800b7ac <pbuf_free+0x10c>)
 800b6be:	f00c feff 	bl	80184c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e069      	b.n	800b79a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b6ca:	e062      	b.n	800b792 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b6cc:	f008 ffd8 	bl	8014680 <sys_arch_protect>
 800b6d0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	7b9b      	ldrb	r3, [r3, #14]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <pbuf_free+0x48>
 800b6da:	4b32      	ldr	r3, [pc, #200]	; (800b7a4 <pbuf_free+0x104>)
 800b6dc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b6e0:	4933      	ldr	r1, [pc, #204]	; (800b7b0 <pbuf_free+0x110>)
 800b6e2:	4832      	ldr	r0, [pc, #200]	; (800b7ac <pbuf_free+0x10c>)
 800b6e4:	f00c feec 	bl	80184c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	7b9b      	ldrb	r3, [r3, #14]
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	b2da      	uxtb	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	739a      	strb	r2, [r3, #14]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	7b9b      	ldrb	r3, [r3, #14]
 800b6f8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b6fa:	69b8      	ldr	r0, [r7, #24]
 800b6fc:	f008 ffce 	bl	801469c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b700:	7dfb      	ldrb	r3, [r7, #23]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d143      	bne.n	800b78e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	7b1b      	ldrb	r3, [r3, #12]
 800b710:	f003 030f 	and.w	r3, r3, #15
 800b714:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	7b5b      	ldrb	r3, [r3, #13]
 800b71a:	f003 0302 	and.w	r3, r3, #2
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d011      	beq.n	800b746 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d106      	bne.n	800b73c <pbuf_free+0x9c>
 800b72e:	4b1d      	ldr	r3, [pc, #116]	; (800b7a4 <pbuf_free+0x104>)
 800b730:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b734:	491f      	ldr	r1, [pc, #124]	; (800b7b4 <pbuf_free+0x114>)
 800b736:	481d      	ldr	r0, [pc, #116]	; (800b7ac <pbuf_free+0x10c>)
 800b738:	f00c fec2 	bl	80184c0 <iprintf>
        pc->custom_free_function(p);
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	691b      	ldr	r3, [r3, #16]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	4798      	blx	r3
 800b744:	e01d      	b.n	800b782 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b746:	7bfb      	ldrb	r3, [r7, #15]
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d104      	bne.n	800b756 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b74c:	6879      	ldr	r1, [r7, #4]
 800b74e:	200c      	movs	r0, #12
 800b750:	f7ff f902 	bl	800a958 <memp_free>
 800b754:	e015      	b.n	800b782 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b756:	7bfb      	ldrb	r3, [r7, #15]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d104      	bne.n	800b766 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b75c:	6879      	ldr	r1, [r7, #4]
 800b75e:	200b      	movs	r0, #11
 800b760:	f7ff f8fa 	bl	800a958 <memp_free>
 800b764:	e00d      	b.n	800b782 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b766:	7bfb      	ldrb	r3, [r7, #15]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d103      	bne.n	800b774 <pbuf_free+0xd4>
          mem_free(p);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7fe fd3f 	bl	800a1f0 <mem_free>
 800b772:	e006      	b.n	800b782 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b774:	4b0b      	ldr	r3, [pc, #44]	; (800b7a4 <pbuf_free+0x104>)
 800b776:	f240 320f 	movw	r2, #783	; 0x30f
 800b77a:	490f      	ldr	r1, [pc, #60]	; (800b7b8 <pbuf_free+0x118>)
 800b77c:	480b      	ldr	r0, [pc, #44]	; (800b7ac <pbuf_free+0x10c>)
 800b77e:	f00c fe9f 	bl	80184c0 <iprintf>
        }
      }
      count++;
 800b782:	7ffb      	ldrb	r3, [r7, #31]
 800b784:	3301      	adds	r3, #1
 800b786:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	607b      	str	r3, [r7, #4]
 800b78c:	e001      	b.n	800b792 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d199      	bne.n	800b6cc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b798:	7ffb      	ldrb	r3, [r7, #31]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3720      	adds	r7, #32
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	0801c278 	.word	0x0801c278
 800b7a8:	0801c3dc 	.word	0x0801c3dc
 800b7ac:	0801c2d8 	.word	0x0801c2d8
 800b7b0:	0801c408 	.word	0x0801c408
 800b7b4:	0801c420 	.word	0x0801c420
 800b7b8:	0801c444 	.word	0x0801c444

0800b7bc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b7c8:	e005      	b.n	800b7d6 <pbuf_clen+0x1a>
    ++len;
 800b7ca:	89fb      	ldrh	r3, [r7, #14]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1f6      	bne.n	800b7ca <pbuf_clen+0xe>
  }
  return len;
 800b7dc:	89fb      	ldrh	r3, [r7, #14]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3714      	adds	r7, #20
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
	...

0800b7ec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d016      	beq.n	800b828 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b7fa:	f008 ff41 	bl	8014680 <sys_arch_protect>
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	7b9b      	ldrb	r3, [r3, #14]
 800b804:	3301      	adds	r3, #1
 800b806:	b2da      	uxtb	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	739a      	strb	r2, [r3, #14]
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f008 ff45 	bl	801469c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	7b9b      	ldrb	r3, [r3, #14]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d106      	bne.n	800b828 <pbuf_ref+0x3c>
 800b81a:	4b05      	ldr	r3, [pc, #20]	; (800b830 <pbuf_ref+0x44>)
 800b81c:	f240 3242 	movw	r2, #834	; 0x342
 800b820:	4904      	ldr	r1, [pc, #16]	; (800b834 <pbuf_ref+0x48>)
 800b822:	4805      	ldr	r0, [pc, #20]	; (800b838 <pbuf_ref+0x4c>)
 800b824:	f00c fe4c 	bl	80184c0 <iprintf>
  }
}
 800b828:	bf00      	nop
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	0801c278 	.word	0x0801c278
 800b834:	0801c458 	.word	0x0801c458
 800b838:	0801c2d8 	.word	0x0801c2d8

0800b83c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d002      	beq.n	800b852 <pbuf_cat+0x16>
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d107      	bne.n	800b862 <pbuf_cat+0x26>
 800b852:	4b20      	ldr	r3, [pc, #128]	; (800b8d4 <pbuf_cat+0x98>)
 800b854:	f240 3259 	movw	r2, #857	; 0x359
 800b858:	491f      	ldr	r1, [pc, #124]	; (800b8d8 <pbuf_cat+0x9c>)
 800b85a:	4820      	ldr	r0, [pc, #128]	; (800b8dc <pbuf_cat+0xa0>)
 800b85c:	f00c fe30 	bl	80184c0 <iprintf>
 800b860:	e034      	b.n	800b8cc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	60fb      	str	r3, [r7, #12]
 800b866:	e00a      	b.n	800b87e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	891a      	ldrh	r2, [r3, #8]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	891b      	ldrh	r3, [r3, #8]
 800b870:	4413      	add	r3, r2
 800b872:	b29a      	uxth	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	60fb      	str	r3, [r7, #12]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1f0      	bne.n	800b868 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	891a      	ldrh	r2, [r3, #8]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	895b      	ldrh	r3, [r3, #10]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d006      	beq.n	800b8a0 <pbuf_cat+0x64>
 800b892:	4b10      	ldr	r3, [pc, #64]	; (800b8d4 <pbuf_cat+0x98>)
 800b894:	f240 3262 	movw	r2, #866	; 0x362
 800b898:	4911      	ldr	r1, [pc, #68]	; (800b8e0 <pbuf_cat+0xa4>)
 800b89a:	4810      	ldr	r0, [pc, #64]	; (800b8dc <pbuf_cat+0xa0>)
 800b89c:	f00c fe10 	bl	80184c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d006      	beq.n	800b8b6 <pbuf_cat+0x7a>
 800b8a8:	4b0a      	ldr	r3, [pc, #40]	; (800b8d4 <pbuf_cat+0x98>)
 800b8aa:	f240 3263 	movw	r2, #867	; 0x363
 800b8ae:	490d      	ldr	r1, [pc, #52]	; (800b8e4 <pbuf_cat+0xa8>)
 800b8b0:	480a      	ldr	r0, [pc, #40]	; (800b8dc <pbuf_cat+0xa0>)
 800b8b2:	f00c fe05 	bl	80184c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	891a      	ldrh	r2, [r3, #8]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	891b      	ldrh	r3, [r3, #8]
 800b8be:	4413      	add	r3, r2
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	683a      	ldr	r2, [r7, #0]
 800b8ca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	0801c278 	.word	0x0801c278
 800b8d8:	0801c46c 	.word	0x0801c46c
 800b8dc:	0801c2d8 	.word	0x0801c2d8
 800b8e0:	0801c4a4 	.word	0x0801c4a4
 800b8e4:	0801c4d4 	.word	0x0801c4d4

0800b8e8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b8f2:	6839      	ldr	r1, [r7, #0]
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff ffa1 	bl	800b83c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b8fa:	6838      	ldr	r0, [r7, #0]
 800b8fc:	f7ff ff76 	bl	800b7ec <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b900:	bf00      	nop
 800b902:	3708      	adds	r7, #8
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b912:	2300      	movs	r3, #0
 800b914:	617b      	str	r3, [r7, #20]
 800b916:	2300      	movs	r3, #0
 800b918:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d008      	beq.n	800b932 <pbuf_copy+0x2a>
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d005      	beq.n	800b932 <pbuf_copy+0x2a>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	891a      	ldrh	r2, [r3, #8]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	891b      	ldrh	r3, [r3, #8]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d209      	bcs.n	800b946 <pbuf_copy+0x3e>
 800b932:	4b57      	ldr	r3, [pc, #348]	; (800ba90 <pbuf_copy+0x188>)
 800b934:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b938:	4956      	ldr	r1, [pc, #344]	; (800ba94 <pbuf_copy+0x18c>)
 800b93a:	4857      	ldr	r0, [pc, #348]	; (800ba98 <pbuf_copy+0x190>)
 800b93c:	f00c fdc0 	bl	80184c0 <iprintf>
 800b940:	f06f 030f 	mvn.w	r3, #15
 800b944:	e09f      	b.n	800ba86 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	895b      	ldrh	r3, [r3, #10]
 800b94a:	461a      	mov	r2, r3
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	1ad2      	subs	r2, r2, r3
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	895b      	ldrh	r3, [r3, #10]
 800b954:	4619      	mov	r1, r3
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	1acb      	subs	r3, r1, r3
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d306      	bcc.n	800b96c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	895b      	ldrh	r3, [r3, #10]
 800b962:	461a      	mov	r2, r3
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	60fb      	str	r3, [r7, #12]
 800b96a:	e005      	b.n	800b978 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	895b      	ldrh	r3, [r3, #10]
 800b970:	461a      	mov	r2, r3
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	18d0      	adds	r0, r2, r3
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	4413      	add	r3, r2
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	4619      	mov	r1, r3
 800b98c:	f00c fcbe 	bl	801830c <memcpy>
    offset_to += len;
 800b990:	697a      	ldr	r2, [r7, #20]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	4413      	add	r3, r2
 800b996:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	4413      	add	r3, r2
 800b99e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	895b      	ldrh	r3, [r3, #10]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d906      	bls.n	800b9ba <pbuf_copy+0xb2>
 800b9ac:	4b38      	ldr	r3, [pc, #224]	; (800ba90 <pbuf_copy+0x188>)
 800b9ae:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b9b2:	493a      	ldr	r1, [pc, #232]	; (800ba9c <pbuf_copy+0x194>)
 800b9b4:	4838      	ldr	r0, [pc, #224]	; (800ba98 <pbuf_copy+0x190>)
 800b9b6:	f00c fd83 	bl	80184c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	895b      	ldrh	r3, [r3, #10]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d906      	bls.n	800b9d4 <pbuf_copy+0xcc>
 800b9c6:	4b32      	ldr	r3, [pc, #200]	; (800ba90 <pbuf_copy+0x188>)
 800b9c8:	f240 32da 	movw	r2, #986	; 0x3da
 800b9cc:	4934      	ldr	r1, [pc, #208]	; (800baa0 <pbuf_copy+0x198>)
 800b9ce:	4832      	ldr	r0, [pc, #200]	; (800ba98 <pbuf_copy+0x190>)
 800b9d0:	f00c fd76 	bl	80184c0 <iprintf>
    if (offset_from >= p_from->len) {
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	895b      	ldrh	r3, [r3, #10]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d304      	bcc.n	800b9ea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	895b      	ldrh	r3, [r3, #10]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d114      	bne.n	800ba20 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10c      	bne.n	800ba20 <pbuf_copy+0x118>
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d009      	beq.n	800ba20 <pbuf_copy+0x118>
 800ba0c:	4b20      	ldr	r3, [pc, #128]	; (800ba90 <pbuf_copy+0x188>)
 800ba0e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ba12:	4924      	ldr	r1, [pc, #144]	; (800baa4 <pbuf_copy+0x19c>)
 800ba14:	4820      	ldr	r0, [pc, #128]	; (800ba98 <pbuf_copy+0x190>)
 800ba16:	f00c fd53 	bl	80184c0 <iprintf>
 800ba1a:	f06f 030f 	mvn.w	r3, #15
 800ba1e:	e032      	b.n	800ba86 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d013      	beq.n	800ba4e <pbuf_copy+0x146>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	895a      	ldrh	r2, [r3, #10]
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	891b      	ldrh	r3, [r3, #8]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d10d      	bne.n	800ba4e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d009      	beq.n	800ba4e <pbuf_copy+0x146>
 800ba3a:	4b15      	ldr	r3, [pc, #84]	; (800ba90 <pbuf_copy+0x188>)
 800ba3c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ba40:	4919      	ldr	r1, [pc, #100]	; (800baa8 <pbuf_copy+0x1a0>)
 800ba42:	4815      	ldr	r0, [pc, #84]	; (800ba98 <pbuf_copy+0x190>)
 800ba44:	f00c fd3c 	bl	80184c0 <iprintf>
 800ba48:	f06f 0305 	mvn.w	r3, #5
 800ba4c:	e01b      	b.n	800ba86 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d013      	beq.n	800ba7c <pbuf_copy+0x174>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	895a      	ldrh	r2, [r3, #10]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	891b      	ldrh	r3, [r3, #8]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d10d      	bne.n	800ba7c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d009      	beq.n	800ba7c <pbuf_copy+0x174>
 800ba68:	4b09      	ldr	r3, [pc, #36]	; (800ba90 <pbuf_copy+0x188>)
 800ba6a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ba6e:	490e      	ldr	r1, [pc, #56]	; (800baa8 <pbuf_copy+0x1a0>)
 800ba70:	4809      	ldr	r0, [pc, #36]	; (800ba98 <pbuf_copy+0x190>)
 800ba72:	f00c fd25 	bl	80184c0 <iprintf>
 800ba76:	f06f 0305 	mvn.w	r3, #5
 800ba7a:	e004      	b.n	800ba86 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f47f af61 	bne.w	800b946 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3718      	adds	r7, #24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	0801c278 	.word	0x0801c278
 800ba94:	0801c520 	.word	0x0801c520
 800ba98:	0801c2d8 	.word	0x0801c2d8
 800ba9c:	0801c550 	.word	0x0801c550
 800baa0:	0801c568 	.word	0x0801c568
 800baa4:	0801c584 	.word	0x0801c584
 800baa8:	0801c594 	.word	0x0801c594

0800baac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	4611      	mov	r1, r2
 800bab8:	461a      	mov	r2, r3
 800baba:	460b      	mov	r3, r1
 800babc:	80fb      	strh	r3, [r7, #6]
 800babe:	4613      	mov	r3, r2
 800bac0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bac2:	2300      	movs	r3, #0
 800bac4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bac6:	2300      	movs	r3, #0
 800bac8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d108      	bne.n	800bae2 <pbuf_copy_partial+0x36>
 800bad0:	4b2b      	ldr	r3, [pc, #172]	; (800bb80 <pbuf_copy_partial+0xd4>)
 800bad2:	f240 420a 	movw	r2, #1034	; 0x40a
 800bad6:	492b      	ldr	r1, [pc, #172]	; (800bb84 <pbuf_copy_partial+0xd8>)
 800bad8:	482b      	ldr	r0, [pc, #172]	; (800bb88 <pbuf_copy_partial+0xdc>)
 800bada:	f00c fcf1 	bl	80184c0 <iprintf>
 800bade:	2300      	movs	r3, #0
 800bae0:	e04a      	b.n	800bb78 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d108      	bne.n	800bafa <pbuf_copy_partial+0x4e>
 800bae8:	4b25      	ldr	r3, [pc, #148]	; (800bb80 <pbuf_copy_partial+0xd4>)
 800baea:	f240 420b 	movw	r2, #1035	; 0x40b
 800baee:	4927      	ldr	r1, [pc, #156]	; (800bb8c <pbuf_copy_partial+0xe0>)
 800baf0:	4825      	ldr	r0, [pc, #148]	; (800bb88 <pbuf_copy_partial+0xdc>)
 800baf2:	f00c fce5 	bl	80184c0 <iprintf>
 800baf6:	2300      	movs	r3, #0
 800baf8:	e03e      	b.n	800bb78 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	61fb      	str	r3, [r7, #28]
 800bafe:	e034      	b.n	800bb6a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bb00:	88bb      	ldrh	r3, [r7, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00a      	beq.n	800bb1c <pbuf_copy_partial+0x70>
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	895b      	ldrh	r3, [r3, #10]
 800bb0a:	88ba      	ldrh	r2, [r7, #4]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d305      	bcc.n	800bb1c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	895b      	ldrh	r3, [r3, #10]
 800bb14:	88ba      	ldrh	r2, [r7, #4]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	80bb      	strh	r3, [r7, #4]
 800bb1a:	e023      	b.n	800bb64 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	895a      	ldrh	r2, [r3, #10]
 800bb20:	88bb      	ldrh	r3, [r7, #4]
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bb26:	8b3a      	ldrh	r2, [r7, #24]
 800bb28:	88fb      	ldrh	r3, [r7, #6]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d901      	bls.n	800bb32 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bb2e:	88fb      	ldrh	r3, [r7, #6]
 800bb30:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bb32:	8b7b      	ldrh	r3, [r7, #26]
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	18d0      	adds	r0, r2, r3
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	88bb      	ldrh	r3, [r7, #4]
 800bb3e:	4413      	add	r3, r2
 800bb40:	8b3a      	ldrh	r2, [r7, #24]
 800bb42:	4619      	mov	r1, r3
 800bb44:	f00c fbe2 	bl	801830c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bb48:	8afa      	ldrh	r2, [r7, #22]
 800bb4a:	8b3b      	ldrh	r3, [r7, #24]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bb50:	8b7a      	ldrh	r2, [r7, #26]
 800bb52:	8b3b      	ldrh	r3, [r7, #24]
 800bb54:	4413      	add	r3, r2
 800bb56:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bb58:	88fa      	ldrh	r2, [r7, #6]
 800bb5a:	8b3b      	ldrh	r3, [r7, #24]
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bb60:	2300      	movs	r3, #0
 800bb62:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	61fb      	str	r3, [r7, #28]
 800bb6a:	88fb      	ldrh	r3, [r7, #6]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <pbuf_copy_partial+0xca>
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1c4      	bne.n	800bb00 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bb76:	8afb      	ldrh	r3, [r7, #22]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3720      	adds	r7, #32
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	0801c278 	.word	0x0801c278
 800bb84:	0801c5c0 	.word	0x0801c5c0
 800bb88:	0801c2d8 	.word	0x0801c2d8
 800bb8c:	0801c5e0 	.word	0x0801c5e0

0800bb90 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	4603      	mov	r3, r0
 800bb98:	603a      	str	r2, [r7, #0]
 800bb9a:	71fb      	strb	r3, [r7, #7]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	8919      	ldrh	r1, [r3, #8]
 800bba4:	88ba      	ldrh	r2, [r7, #4]
 800bba6:	79fb      	ldrb	r3, [r7, #7]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7ff fa95 	bl	800b0d8 <pbuf_alloc>
 800bbae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d101      	bne.n	800bbba <pbuf_clone+0x2a>
    return NULL;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	e011      	b.n	800bbde <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bbba:	6839      	ldr	r1, [r7, #0]
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f7ff fea3 	bl	800b908 <pbuf_copy>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bbc6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d006      	beq.n	800bbdc <pbuf_clone+0x4c>
 800bbce:	4b06      	ldr	r3, [pc, #24]	; (800bbe8 <pbuf_clone+0x58>)
 800bbd0:	f240 5224 	movw	r2, #1316	; 0x524
 800bbd4:	4905      	ldr	r1, [pc, #20]	; (800bbec <pbuf_clone+0x5c>)
 800bbd6:	4806      	ldr	r0, [pc, #24]	; (800bbf0 <pbuf_clone+0x60>)
 800bbd8:	f00c fc72 	bl	80184c0 <iprintf>
  return q;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	0801c278 	.word	0x0801c278
 800bbec:	0801c6ec 	.word	0x0801c6ec
 800bbf0:	0801c2d8 	.word	0x0801c2d8

0800bbf4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bbf8:	f00c fc7a 	bl	80184f0 <rand>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	4b01      	ldr	r3, [pc, #4]	; (800bc14 <tcp_init+0x20>)
 800bc0e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bc10:	bf00      	nop
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	24000028 	.word	0x24000028

0800bc18 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	7d1b      	ldrb	r3, [r3, #20]
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d105      	bne.n	800bc34 <tcp_free+0x1c>
 800bc28:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <tcp_free+0x2c>)
 800bc2a:	22d4      	movs	r2, #212	; 0xd4
 800bc2c:	4906      	ldr	r1, [pc, #24]	; (800bc48 <tcp_free+0x30>)
 800bc2e:	4807      	ldr	r0, [pc, #28]	; (800bc4c <tcp_free+0x34>)
 800bc30:	f00c fc46 	bl	80184c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bc34:	6879      	ldr	r1, [r7, #4]
 800bc36:	2001      	movs	r0, #1
 800bc38:	f7fe fe8e 	bl	800a958 <memp_free>
}
 800bc3c:	bf00      	nop
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	0801c778 	.word	0x0801c778
 800bc48:	0801c7a8 	.word	0x0801c7a8
 800bc4c:	0801c7bc 	.word	0x0801c7bc

0800bc50 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	7d1b      	ldrb	r3, [r3, #20]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d105      	bne.n	800bc6c <tcp_free_listen+0x1c>
 800bc60:	4b06      	ldr	r3, [pc, #24]	; (800bc7c <tcp_free_listen+0x2c>)
 800bc62:	22df      	movs	r2, #223	; 0xdf
 800bc64:	4906      	ldr	r1, [pc, #24]	; (800bc80 <tcp_free_listen+0x30>)
 800bc66:	4807      	ldr	r0, [pc, #28]	; (800bc84 <tcp_free_listen+0x34>)
 800bc68:	f00c fc2a 	bl	80184c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bc6c:	6879      	ldr	r1, [r7, #4]
 800bc6e:	2002      	movs	r0, #2
 800bc70:	f7fe fe72 	bl	800a958 <memp_free>
}
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	0801c778 	.word	0x0801c778
 800bc80:	0801c7e4 	.word	0x0801c7e4
 800bc84:	0801c7bc 	.word	0x0801c7bc

0800bc88 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bc8c:	f001 f800 	bl	800cc90 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bc90:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <tcp_tmr+0x28>)
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	3301      	adds	r3, #1
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	4b05      	ldr	r3, [pc, #20]	; (800bcb0 <tcp_tmr+0x28>)
 800bc9a:	701a      	strb	r2, [r3, #0]
 800bc9c:	4b04      	ldr	r3, [pc, #16]	; (800bcb0 <tcp_tmr+0x28>)
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	f003 0301 	and.w	r3, r3, #1
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d001      	beq.n	800bcac <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bca8:	f000 fcb2 	bl	800c610 <tcp_slowtmr>
  }
}
 800bcac:	bf00      	nop
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	2400b6b5 	.word	0x2400b6b5

0800bcb4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d105      	bne.n	800bcd0 <tcp_remove_listener+0x1c>
 800bcc4:	4b0d      	ldr	r3, [pc, #52]	; (800bcfc <tcp_remove_listener+0x48>)
 800bcc6:	22ff      	movs	r2, #255	; 0xff
 800bcc8:	490d      	ldr	r1, [pc, #52]	; (800bd00 <tcp_remove_listener+0x4c>)
 800bcca:	480e      	ldr	r0, [pc, #56]	; (800bd04 <tcp_remove_listener+0x50>)
 800bccc:	f00c fbf8 	bl	80184c0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	60fb      	str	r3, [r7, #12]
 800bcd4:	e00a      	b.n	800bcec <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d102      	bne.n	800bce6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	60fb      	str	r3, [r7, #12]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1f1      	bne.n	800bcd6 <tcp_remove_listener+0x22>
    }
  }
}
 800bcf2:	bf00      	nop
 800bcf4:	bf00      	nop
 800bcf6:	3710      	adds	r7, #16
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	0801c778 	.word	0x0801c778
 800bd00:	0801c800 	.word	0x0801c800
 800bd04:	0801c7bc 	.word	0x0801c7bc

0800bd08 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d106      	bne.n	800bd24 <tcp_listen_closed+0x1c>
 800bd16:	4b14      	ldr	r3, [pc, #80]	; (800bd68 <tcp_listen_closed+0x60>)
 800bd18:	f240 1211 	movw	r2, #273	; 0x111
 800bd1c:	4913      	ldr	r1, [pc, #76]	; (800bd6c <tcp_listen_closed+0x64>)
 800bd1e:	4814      	ldr	r0, [pc, #80]	; (800bd70 <tcp_listen_closed+0x68>)
 800bd20:	f00c fbce 	bl	80184c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	7d1b      	ldrb	r3, [r3, #20]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d006      	beq.n	800bd3a <tcp_listen_closed+0x32>
 800bd2c:	4b0e      	ldr	r3, [pc, #56]	; (800bd68 <tcp_listen_closed+0x60>)
 800bd2e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bd32:	4910      	ldr	r1, [pc, #64]	; (800bd74 <tcp_listen_closed+0x6c>)
 800bd34:	480e      	ldr	r0, [pc, #56]	; (800bd70 <tcp_listen_closed+0x68>)
 800bd36:	f00c fbc3 	bl	80184c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	60fb      	str	r3, [r7, #12]
 800bd3e:	e00b      	b.n	800bd58 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bd40:	4a0d      	ldr	r2, [pc, #52]	; (800bd78 <tcp_listen_closed+0x70>)
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	6879      	ldr	r1, [r7, #4]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7ff ffb1 	bl	800bcb4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	3301      	adds	r3, #1
 800bd56:	60fb      	str	r3, [r7, #12]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d9f0      	bls.n	800bd40 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bd5e:	bf00      	nop
 800bd60:	bf00      	nop
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	0801c778 	.word	0x0801c778
 800bd6c:	0801c828 	.word	0x0801c828
 800bd70:	0801c7bc 	.word	0x0801c7bc
 800bd74:	0801c834 	.word	0x0801c834
 800bd78:	0801ebfc 	.word	0x0801ebfc

0800bd7c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bd7c:	b5b0      	push	{r4, r5, r7, lr}
 800bd7e:	b088      	sub	sp, #32
 800bd80:	af04      	add	r7, sp, #16
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d106      	bne.n	800bd9c <tcp_close_shutdown+0x20>
 800bd8e:	4b63      	ldr	r3, [pc, #396]	; (800bf1c <tcp_close_shutdown+0x1a0>)
 800bd90:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bd94:	4962      	ldr	r1, [pc, #392]	; (800bf20 <tcp_close_shutdown+0x1a4>)
 800bd96:	4863      	ldr	r0, [pc, #396]	; (800bf24 <tcp_close_shutdown+0x1a8>)
 800bd98:	f00c fb92 	bl	80184c0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bd9c:	78fb      	ldrb	r3, [r7, #3]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d066      	beq.n	800be70 <tcp_close_shutdown+0xf4>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	7d1b      	ldrb	r3, [r3, #20]
 800bda6:	2b04      	cmp	r3, #4
 800bda8:	d003      	beq.n	800bdb2 <tcp_close_shutdown+0x36>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	7d1b      	ldrb	r3, [r3, #20]
 800bdae:	2b07      	cmp	r3, #7
 800bdb0:	d15e      	bne.n	800be70 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d104      	bne.n	800bdc4 <tcp_close_shutdown+0x48>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdbe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bdc2:	d055      	beq.n	800be70 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	8b5b      	ldrh	r3, [r3, #26]
 800bdc8:	f003 0310 	and.w	r3, r3, #16
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d106      	bne.n	800bdde <tcp_close_shutdown+0x62>
 800bdd0:	4b52      	ldr	r3, [pc, #328]	; (800bf1c <tcp_close_shutdown+0x1a0>)
 800bdd2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bdd6:	4954      	ldr	r1, [pc, #336]	; (800bf28 <tcp_close_shutdown+0x1ac>)
 800bdd8:	4852      	ldr	r0, [pc, #328]	; (800bf24 <tcp_close_shutdown+0x1a8>)
 800bdda:	f00c fb71 	bl	80184c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bde6:	687d      	ldr	r5, [r7, #4]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	3304      	adds	r3, #4
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	8ad2      	ldrh	r2, [r2, #22]
 800bdf0:	6879      	ldr	r1, [r7, #4]
 800bdf2:	8b09      	ldrh	r1, [r1, #24]
 800bdf4:	9102      	str	r1, [sp, #8]
 800bdf6:	9201      	str	r2, [sp, #4]
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	462b      	mov	r3, r5
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	4601      	mov	r1, r0
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f005 f849 	bl	8010e98 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f001 fa82 	bl	800d310 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800be0c:	4b47      	ldr	r3, [pc, #284]	; (800bf2c <tcp_close_shutdown+0x1b0>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	429a      	cmp	r2, r3
 800be14:	d105      	bne.n	800be22 <tcp_close_shutdown+0xa6>
 800be16:	4b45      	ldr	r3, [pc, #276]	; (800bf2c <tcp_close_shutdown+0x1b0>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	4a43      	ldr	r2, [pc, #268]	; (800bf2c <tcp_close_shutdown+0x1b0>)
 800be1e:	6013      	str	r3, [r2, #0]
 800be20:	e013      	b.n	800be4a <tcp_close_shutdown+0xce>
 800be22:	4b42      	ldr	r3, [pc, #264]	; (800bf2c <tcp_close_shutdown+0x1b0>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	60fb      	str	r3, [r7, #12]
 800be28:	e00c      	b.n	800be44 <tcp_close_shutdown+0xc8>
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	429a      	cmp	r2, r3
 800be32:	d104      	bne.n	800be3e <tcp_close_shutdown+0xc2>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	68da      	ldr	r2, [r3, #12]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	60da      	str	r2, [r3, #12]
 800be3c:	e005      	b.n	800be4a <tcp_close_shutdown+0xce>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	60fb      	str	r3, [r7, #12]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1ef      	bne.n	800be2a <tcp_close_shutdown+0xae>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	60da      	str	r2, [r3, #12]
 800be50:	4b37      	ldr	r3, [pc, #220]	; (800bf30 <tcp_close_shutdown+0x1b4>)
 800be52:	2201      	movs	r2, #1
 800be54:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800be56:	4b37      	ldr	r3, [pc, #220]	; (800bf34 <tcp_close_shutdown+0x1b8>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d102      	bne.n	800be66 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800be60:	f003 ff16 	bl	800fc90 <tcp_trigger_input_pcb_close>
 800be64:	e002      	b.n	800be6c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff fed6 	bl	800bc18 <tcp_free>
      }
      return ERR_OK;
 800be6c:	2300      	movs	r3, #0
 800be6e:	e050      	b.n	800bf12 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	7d1b      	ldrb	r3, [r3, #20]
 800be74:	2b02      	cmp	r3, #2
 800be76:	d03b      	beq.n	800bef0 <tcp_close_shutdown+0x174>
 800be78:	2b02      	cmp	r3, #2
 800be7a:	dc44      	bgt.n	800bf06 <tcp_close_shutdown+0x18a>
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <tcp_close_shutdown+0x10a>
 800be80:	2b01      	cmp	r3, #1
 800be82:	d02a      	beq.n	800beda <tcp_close_shutdown+0x15e>
 800be84:	e03f      	b.n	800bf06 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	8adb      	ldrh	r3, [r3, #22]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d021      	beq.n	800bed2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800be8e:	4b2a      	ldr	r3, [pc, #168]	; (800bf38 <tcp_close_shutdown+0x1bc>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	429a      	cmp	r2, r3
 800be96:	d105      	bne.n	800bea4 <tcp_close_shutdown+0x128>
 800be98:	4b27      	ldr	r3, [pc, #156]	; (800bf38 <tcp_close_shutdown+0x1bc>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	4a26      	ldr	r2, [pc, #152]	; (800bf38 <tcp_close_shutdown+0x1bc>)
 800bea0:	6013      	str	r3, [r2, #0]
 800bea2:	e013      	b.n	800becc <tcp_close_shutdown+0x150>
 800bea4:	4b24      	ldr	r3, [pc, #144]	; (800bf38 <tcp_close_shutdown+0x1bc>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	60bb      	str	r3, [r7, #8]
 800beaa:	e00c      	b.n	800bec6 <tcp_close_shutdown+0x14a>
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d104      	bne.n	800bec0 <tcp_close_shutdown+0x144>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	68da      	ldr	r2, [r3, #12]
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	60da      	str	r2, [r3, #12]
 800bebe:	e005      	b.n	800becc <tcp_close_shutdown+0x150>
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	60bb      	str	r3, [r7, #8]
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1ef      	bne.n	800beac <tcp_close_shutdown+0x130>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f7ff fea0 	bl	800bc18 <tcp_free>
      break;
 800bed8:	e01a      	b.n	800bf10 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f7ff ff14 	bl	800bd08 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bee0:	6879      	ldr	r1, [r7, #4]
 800bee2:	4816      	ldr	r0, [pc, #88]	; (800bf3c <tcp_close_shutdown+0x1c0>)
 800bee4:	f001 fa64 	bl	800d3b0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff feb1 	bl	800bc50 <tcp_free_listen>
      break;
 800beee:	e00f      	b.n	800bf10 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bef0:	6879      	ldr	r1, [r7, #4]
 800bef2:	480e      	ldr	r0, [pc, #56]	; (800bf2c <tcp_close_shutdown+0x1b0>)
 800bef4:	f001 fa5c 	bl	800d3b0 <tcp_pcb_remove>
 800bef8:	4b0d      	ldr	r3, [pc, #52]	; (800bf30 <tcp_close_shutdown+0x1b4>)
 800befa:	2201      	movs	r2, #1
 800befc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7ff fe8a 	bl	800bc18 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bf04:	e004      	b.n	800bf10 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f81a 	bl	800bf40 <tcp_close_shutdown_fin>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	e000      	b.n	800bf12 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bdb0      	pop	{r4, r5, r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	0801c778 	.word	0x0801c778
 800bf20:	0801c84c 	.word	0x0801c84c
 800bf24:	0801c7bc 	.word	0x0801c7bc
 800bf28:	0801c86c 	.word	0x0801c86c
 800bf2c:	2400ee40 	.word	0x2400ee40
 800bf30:	2400ee3c 	.word	0x2400ee3c
 800bf34:	2400ee54 	.word	0x2400ee54
 800bf38:	2400ee4c 	.word	0x2400ee4c
 800bf3c:	2400ee48 	.word	0x2400ee48

0800bf40 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d106      	bne.n	800bf5c <tcp_close_shutdown_fin+0x1c>
 800bf4e:	4b2e      	ldr	r3, [pc, #184]	; (800c008 <tcp_close_shutdown_fin+0xc8>)
 800bf50:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800bf54:	492d      	ldr	r1, [pc, #180]	; (800c00c <tcp_close_shutdown_fin+0xcc>)
 800bf56:	482e      	ldr	r0, [pc, #184]	; (800c010 <tcp_close_shutdown_fin+0xd0>)
 800bf58:	f00c fab2 	bl	80184c0 <iprintf>

  switch (pcb->state) {
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	7d1b      	ldrb	r3, [r3, #20]
 800bf60:	2b07      	cmp	r3, #7
 800bf62:	d020      	beq.n	800bfa6 <tcp_close_shutdown_fin+0x66>
 800bf64:	2b07      	cmp	r3, #7
 800bf66:	dc2b      	bgt.n	800bfc0 <tcp_close_shutdown_fin+0x80>
 800bf68:	2b03      	cmp	r3, #3
 800bf6a:	d002      	beq.n	800bf72 <tcp_close_shutdown_fin+0x32>
 800bf6c:	2b04      	cmp	r3, #4
 800bf6e:	d00d      	beq.n	800bf8c <tcp_close_shutdown_fin+0x4c>
 800bf70:	e026      	b.n	800bfc0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f004 f89e 	bl	80100b4 <tcp_send_fin>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bf7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d11f      	bne.n	800bfc4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2205      	movs	r2, #5
 800bf88:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bf8a:	e01b      	b.n	800bfc4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f004 f891 	bl	80100b4 <tcp_send_fin>
 800bf92:	4603      	mov	r3, r0
 800bf94:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bf96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d114      	bne.n	800bfc8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2205      	movs	r2, #5
 800bfa2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bfa4:	e010      	b.n	800bfc8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f004 f884 	bl	80100b4 <tcp_send_fin>
 800bfac:	4603      	mov	r3, r0
 800bfae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bfb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d109      	bne.n	800bfcc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2209      	movs	r2, #9
 800bfbc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bfbe:	e005      	b.n	800bfcc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	e01c      	b.n	800bffe <tcp_close_shutdown_fin+0xbe>
      break;
 800bfc4:	bf00      	nop
 800bfc6:	e002      	b.n	800bfce <tcp_close_shutdown_fin+0x8e>
      break;
 800bfc8:	bf00      	nop
 800bfca:	e000      	b.n	800bfce <tcp_close_shutdown_fin+0x8e>
      break;
 800bfcc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bfce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d103      	bne.n	800bfde <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f004 f9aa 	bl	8010330 <tcp_output>
 800bfdc:	e00d      	b.n	800bffa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bfde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfe6:	d108      	bne.n	800bffa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	8b5b      	ldrh	r3, [r3, #26]
 800bfec:	f043 0308 	orr.w	r3, r3, #8
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bff6:	2300      	movs	r3, #0
 800bff8:	e001      	b.n	800bffe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	0801c778 	.word	0x0801c778
 800c00c:	0801c828 	.word	0x0801c828
 800c010:	0801c7bc 	.word	0x0801c7bc

0800c014 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d109      	bne.n	800c036 <tcp_close+0x22>
 800c022:	4b0f      	ldr	r3, [pc, #60]	; (800c060 <tcp_close+0x4c>)
 800c024:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c028:	490e      	ldr	r1, [pc, #56]	; (800c064 <tcp_close+0x50>)
 800c02a:	480f      	ldr	r0, [pc, #60]	; (800c068 <tcp_close+0x54>)
 800c02c:	f00c fa48 	bl	80184c0 <iprintf>
 800c030:	f06f 030f 	mvn.w	r3, #15
 800c034:	e00f      	b.n	800c056 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	7d1b      	ldrb	r3, [r3, #20]
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d006      	beq.n	800c04c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	8b5b      	ldrh	r3, [r3, #26]
 800c042:	f043 0310 	orr.w	r3, r3, #16
 800c046:	b29a      	uxth	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c04c:	2101      	movs	r1, #1
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7ff fe94 	bl	800bd7c <tcp_close_shutdown>
 800c054:	4603      	mov	r3, r0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3708      	adds	r7, #8
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	0801c778 	.word	0x0801c778
 800c064:	0801c888 	.word	0x0801c888
 800c068:	0801c7bc 	.word	0x0801c7bc

0800c06c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b08e      	sub	sp, #56	; 0x38
 800c070:	af04      	add	r7, sp, #16
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d107      	bne.n	800c08c <tcp_abandon+0x20>
 800c07c:	4b52      	ldr	r3, [pc, #328]	; (800c1c8 <tcp_abandon+0x15c>)
 800c07e:	f240 223d 	movw	r2, #573	; 0x23d
 800c082:	4952      	ldr	r1, [pc, #328]	; (800c1cc <tcp_abandon+0x160>)
 800c084:	4852      	ldr	r0, [pc, #328]	; (800c1d0 <tcp_abandon+0x164>)
 800c086:	f00c fa1b 	bl	80184c0 <iprintf>
 800c08a:	e099      	b.n	800c1c0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	7d1b      	ldrb	r3, [r3, #20]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d106      	bne.n	800c0a2 <tcp_abandon+0x36>
 800c094:	4b4c      	ldr	r3, [pc, #304]	; (800c1c8 <tcp_abandon+0x15c>)
 800c096:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c09a:	494e      	ldr	r1, [pc, #312]	; (800c1d4 <tcp_abandon+0x168>)
 800c09c:	484c      	ldr	r0, [pc, #304]	; (800c1d0 <tcp_abandon+0x164>)
 800c09e:	f00c fa0f 	bl	80184c0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	7d1b      	ldrb	r3, [r3, #20]
 800c0a6:	2b0a      	cmp	r3, #10
 800c0a8:	d107      	bne.n	800c0ba <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c0aa:	6879      	ldr	r1, [r7, #4]
 800c0ac:	484a      	ldr	r0, [pc, #296]	; (800c1d8 <tcp_abandon+0x16c>)
 800c0ae:	f001 f97f 	bl	800d3b0 <tcp_pcb_remove>
    tcp_free(pcb);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7ff fdb0 	bl	800bc18 <tcp_free>
 800c0b8:	e082      	b.n	800c1c0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0c6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0cc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0d4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	7d1b      	ldrb	r3, [r3, #20]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d126      	bne.n	800c132 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	8adb      	ldrh	r3, [r3, #22]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d02e      	beq.n	800c14a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c0ec:	4b3b      	ldr	r3, [pc, #236]	; (800c1dc <tcp_abandon+0x170>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d105      	bne.n	800c102 <tcp_abandon+0x96>
 800c0f6:	4b39      	ldr	r3, [pc, #228]	; (800c1dc <tcp_abandon+0x170>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	4a37      	ldr	r2, [pc, #220]	; (800c1dc <tcp_abandon+0x170>)
 800c0fe:	6013      	str	r3, [r2, #0]
 800c100:	e013      	b.n	800c12a <tcp_abandon+0xbe>
 800c102:	4b36      	ldr	r3, [pc, #216]	; (800c1dc <tcp_abandon+0x170>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	61fb      	str	r3, [r7, #28]
 800c108:	e00c      	b.n	800c124 <tcp_abandon+0xb8>
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	68db      	ldr	r3, [r3, #12]
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	429a      	cmp	r2, r3
 800c112:	d104      	bne.n	800c11e <tcp_abandon+0xb2>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68da      	ldr	r2, [r3, #12]
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	60da      	str	r2, [r3, #12]
 800c11c:	e005      	b.n	800c12a <tcp_abandon+0xbe>
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	61fb      	str	r3, [r7, #28]
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1ef      	bne.n	800c10a <tcp_abandon+0x9e>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	60da      	str	r2, [r3, #12]
 800c130:	e00b      	b.n	800c14a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	8adb      	ldrh	r3, [r3, #22]
 800c13a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c13c:	6879      	ldr	r1, [r7, #4]
 800c13e:	4828      	ldr	r0, [pc, #160]	; (800c1e0 <tcp_abandon+0x174>)
 800c140:	f001 f936 	bl	800d3b0 <tcp_pcb_remove>
 800c144:	4b27      	ldr	r3, [pc, #156]	; (800c1e4 <tcp_abandon+0x178>)
 800c146:	2201      	movs	r2, #1
 800c148:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d004      	beq.n	800c15c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c156:	4618      	mov	r0, r3
 800c158:	f000 fe7a 	bl	800ce50 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c160:	2b00      	cmp	r3, #0
 800c162:	d004      	beq.n	800c16e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 fe71 	bl	800ce50 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c172:	2b00      	cmp	r3, #0
 800c174:	d004      	beq.n	800c180 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c17a:	4618      	mov	r0, r3
 800c17c:	f000 fe68 	bl	800ce50 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00e      	beq.n	800c1a4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c186:	6879      	ldr	r1, [r7, #4]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	3304      	adds	r3, #4
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	8b12      	ldrh	r2, [r2, #24]
 800c190:	9202      	str	r2, [sp, #8]
 800c192:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c194:	9201      	str	r2, [sp, #4]
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	460b      	mov	r3, r1
 800c19a:	697a      	ldr	r2, [r7, #20]
 800c19c:	69b9      	ldr	r1, [r7, #24]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f004 fe7a 	bl	8010e98 <tcp_rst>
    }
    last_state = pcb->state;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	7d1b      	ldrb	r3, [r3, #20]
 800c1a8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7ff fd34 	bl	800bc18 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d004      	beq.n	800c1c0 <tcp_abandon+0x154>
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	f06f 010c 	mvn.w	r1, #12
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	4798      	blx	r3
  }
}
 800c1c0:	3728      	adds	r7, #40	; 0x28
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	0801c778 	.word	0x0801c778
 800c1cc:	0801c8bc 	.word	0x0801c8bc
 800c1d0:	0801c7bc 	.word	0x0801c7bc
 800c1d4:	0801c8d8 	.word	0x0801c8d8
 800c1d8:	2400ee50 	.word	0x2400ee50
 800c1dc:	2400ee4c 	.word	0x2400ee4c
 800c1e0:	2400ee40 	.word	0x2400ee40
 800c1e4:	2400ee3c 	.word	0x2400ee3c

0800c1e8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c1f0:	2101      	movs	r1, #1
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7ff ff3a 	bl	800c06c <tcp_abandon>
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d106      	bne.n	800c21c <tcp_update_rcv_ann_wnd+0x1c>
 800c20e:	4b25      	ldr	r3, [pc, #148]	; (800c2a4 <tcp_update_rcv_ann_wnd+0xa4>)
 800c210:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c214:	4924      	ldr	r1, [pc, #144]	; (800c2a8 <tcp_update_rcv_ann_wnd+0xa8>)
 800c216:	4825      	ldr	r0, [pc, #148]	; (800c2ac <tcp_update_rcv_ann_wnd+0xac>)
 800c218:	f00c f952 	bl	80184c0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c224:	4413      	add	r3, r2
 800c226:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c230:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c234:	bf28      	it	cs
 800c236:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c23a:	b292      	uxth	r2, r2
 800c23c:	4413      	add	r3, r2
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	2b00      	cmp	r3, #0
 800c244:	db08      	blt.n	800c258 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	1ad3      	subs	r3, r2, r3
 800c256:	e020      	b.n	800c29a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	2b00      	cmp	r3, #0
 800c264:	dd03      	ble.n	800c26e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c26c:	e014      	b.n	800c298 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c280:	d306      	bcc.n	800c290 <tcp_update_rcv_ann_wnd+0x90>
 800c282:	4b08      	ldr	r3, [pc, #32]	; (800c2a4 <tcp_update_rcv_ann_wnd+0xa4>)
 800c284:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c288:	4909      	ldr	r1, [pc, #36]	; (800c2b0 <tcp_update_rcv_ann_wnd+0xb0>)
 800c28a:	4808      	ldr	r0, [pc, #32]	; (800c2ac <tcp_update_rcv_ann_wnd+0xac>)
 800c28c:	f00c f918 	bl	80184c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c298:	2300      	movs	r3, #0
  }
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	0801c778 	.word	0x0801c778
 800c2a8:	0801c9d4 	.word	0x0801c9d4
 800c2ac:	0801c7bc 	.word	0x0801c7bc
 800c2b0:	0801c9f8 	.word	0x0801c9f8

0800c2b4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d107      	bne.n	800c2d6 <tcp_recved+0x22>
 800c2c6:	4b1f      	ldr	r3, [pc, #124]	; (800c344 <tcp_recved+0x90>)
 800c2c8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c2cc:	491e      	ldr	r1, [pc, #120]	; (800c348 <tcp_recved+0x94>)
 800c2ce:	481f      	ldr	r0, [pc, #124]	; (800c34c <tcp_recved+0x98>)
 800c2d0:	f00c f8f6 	bl	80184c0 <iprintf>
 800c2d4:	e032      	b.n	800c33c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	7d1b      	ldrb	r3, [r3, #20]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d106      	bne.n	800c2ec <tcp_recved+0x38>
 800c2de:	4b19      	ldr	r3, [pc, #100]	; (800c344 <tcp_recved+0x90>)
 800c2e0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c2e4:	491a      	ldr	r1, [pc, #104]	; (800c350 <tcp_recved+0x9c>)
 800c2e6:	4819      	ldr	r0, [pc, #100]	; (800c34c <tcp_recved+0x98>)
 800c2e8:	f00c f8ea 	bl	80184c0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c2f0:	887b      	ldrh	r3, [r7, #2]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c2f6:	89fb      	ldrh	r3, [r7, #14]
 800c2f8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c2fc:	d804      	bhi.n	800c308 <tcp_recved+0x54>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c302:	89fa      	ldrh	r2, [r7, #14]
 800c304:	429a      	cmp	r2, r3
 800c306:	d204      	bcs.n	800c312 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c30e:	851a      	strh	r2, [r3, #40]	; 0x28
 800c310:	e002      	b.n	800c318 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	89fa      	ldrh	r2, [r7, #14]
 800c316:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f7ff ff71 	bl	800c200 <tcp_update_rcv_ann_wnd>
 800c31e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c326:	d309      	bcc.n	800c33c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	8b5b      	ldrh	r3, [r3, #26]
 800c32c:	f043 0302 	orr.w	r3, r3, #2
 800c330:	b29a      	uxth	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f003 fffa 	bl	8010330 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	0801c778 	.word	0x0801c778
 800c348:	0801ca14 	.word	0x0801ca14
 800c34c:	0801c7bc 	.word	0x0801c7bc
 800c350:	0801ca2c 	.word	0x0801ca2c

0800c354 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c35e:	4b1e      	ldr	r3, [pc, #120]	; (800c3d8 <tcp_new_port+0x84>)
 800c360:	881b      	ldrh	r3, [r3, #0]
 800c362:	3301      	adds	r3, #1
 800c364:	b29a      	uxth	r2, r3
 800c366:	4b1c      	ldr	r3, [pc, #112]	; (800c3d8 <tcp_new_port+0x84>)
 800c368:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c36a:	4b1b      	ldr	r3, [pc, #108]	; (800c3d8 <tcp_new_port+0x84>)
 800c36c:	881b      	ldrh	r3, [r3, #0]
 800c36e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c372:	4293      	cmp	r3, r2
 800c374:	d103      	bne.n	800c37e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c376:	4b18      	ldr	r3, [pc, #96]	; (800c3d8 <tcp_new_port+0x84>)
 800c378:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c37c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c37e:	2300      	movs	r3, #0
 800c380:	71fb      	strb	r3, [r7, #7]
 800c382:	e01e      	b.n	800c3c2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c384:	79fb      	ldrb	r3, [r7, #7]
 800c386:	4a15      	ldr	r2, [pc, #84]	; (800c3dc <tcp_new_port+0x88>)
 800c388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	603b      	str	r3, [r7, #0]
 800c390:	e011      	b.n	800c3b6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	8ada      	ldrh	r2, [r3, #22]
 800c396:	4b10      	ldr	r3, [pc, #64]	; (800c3d8 <tcp_new_port+0x84>)
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d108      	bne.n	800c3b0 <tcp_new_port+0x5c>
        n++;
 800c39e:	88bb      	ldrh	r3, [r7, #4]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c3a4:	88bb      	ldrh	r3, [r7, #4]
 800c3a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3aa:	d3d8      	bcc.n	800c35e <tcp_new_port+0xa>
          return 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	e00d      	b.n	800c3cc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	603b      	str	r3, [r7, #0]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1ea      	bne.n	800c392 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c3bc:	79fb      	ldrb	r3, [r7, #7]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	71fb      	strb	r3, [r7, #7]
 800c3c2:	79fb      	ldrb	r3, [r7, #7]
 800c3c4:	2b03      	cmp	r3, #3
 800c3c6:	d9dd      	bls.n	800c384 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c3c8:	4b03      	ldr	r3, [pc, #12]	; (800c3d8 <tcp_new_port+0x84>)
 800c3ca:	881b      	ldrh	r3, [r3, #0]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	24000028 	.word	0x24000028
 800c3dc:	0801ebfc 	.word	0x0801ebfc

0800c3e0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b08a      	sub	sp, #40	; 0x28
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	603b      	str	r3, [r7, #0]
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d109      	bne.n	800c40e <tcp_connect+0x2e>
 800c3fa:	4b7d      	ldr	r3, [pc, #500]	; (800c5f0 <tcp_connect+0x210>)
 800c3fc:	f240 4235 	movw	r2, #1077	; 0x435
 800c400:	497c      	ldr	r1, [pc, #496]	; (800c5f4 <tcp_connect+0x214>)
 800c402:	487d      	ldr	r0, [pc, #500]	; (800c5f8 <tcp_connect+0x218>)
 800c404:	f00c f85c 	bl	80184c0 <iprintf>
 800c408:	f06f 030f 	mvn.w	r3, #15
 800c40c:	e0ec      	b.n	800c5e8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d109      	bne.n	800c428 <tcp_connect+0x48>
 800c414:	4b76      	ldr	r3, [pc, #472]	; (800c5f0 <tcp_connect+0x210>)
 800c416:	f240 4236 	movw	r2, #1078	; 0x436
 800c41a:	4978      	ldr	r1, [pc, #480]	; (800c5fc <tcp_connect+0x21c>)
 800c41c:	4876      	ldr	r0, [pc, #472]	; (800c5f8 <tcp_connect+0x218>)
 800c41e:	f00c f84f 	bl	80184c0 <iprintf>
 800c422:	f06f 030f 	mvn.w	r3, #15
 800c426:	e0df      	b.n	800c5e8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	7d1b      	ldrb	r3, [r3, #20]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d009      	beq.n	800c444 <tcp_connect+0x64>
 800c430:	4b6f      	ldr	r3, [pc, #444]	; (800c5f0 <tcp_connect+0x210>)
 800c432:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800c436:	4972      	ldr	r1, [pc, #456]	; (800c600 <tcp_connect+0x220>)
 800c438:	486f      	ldr	r0, [pc, #444]	; (800c5f8 <tcp_connect+0x218>)
 800c43a:	f00c f841 	bl	80184c0 <iprintf>
 800c43e:	f06f 0309 	mvn.w	r3, #9
 800c442:	e0d1      	b.n	800c5e8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d002      	beq.n	800c450 <tcp_connect+0x70>
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	e000      	b.n	800c452 <tcp_connect+0x72>
 800c450:	2300      	movs	r3, #0
 800c452:	68fa      	ldr	r2, [r7, #12]
 800c454:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	88fa      	ldrh	r2, [r7, #6]
 800c45a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	7a1b      	ldrb	r3, [r3, #8]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d006      	beq.n	800c472 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	7a1b      	ldrb	r3, [r3, #8]
 800c468:	4618      	mov	r0, r3
 800c46a:	f7fe fd8b 	bl	800af84 <netif_get_by_index>
 800c46e:	6278      	str	r0, [r7, #36]	; 0x24
 800c470:	e005      	b.n	800c47e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	3304      	adds	r3, #4
 800c476:	4618      	mov	r0, r3
 800c478:	f006 fe48 	bl	801310c <ip4_route>
 800c47c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800c47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c480:	2b00      	cmp	r3, #0
 800c482:	d102      	bne.n	800c48a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800c484:	f06f 0303 	mvn.w	r3, #3
 800c488:	e0ae      	b.n	800c5e8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d003      	beq.n	800c498 <tcp_connect+0xb8>
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d111      	bne.n	800c4bc <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <tcp_connect+0xc4>
 800c49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	e000      	b.n	800c4a6 <tcp_connect+0xc6>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d102      	bne.n	800c4b4 <tcp_connect+0xd4>
      return ERR_RTE;
 800c4ae:	f06f 0303 	mvn.w	r3, #3
 800c4b2:	e099      	b.n	800c5e8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	8adb      	ldrh	r3, [r3, #22]
 800c4c0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	8adb      	ldrh	r3, [r3, #22]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d10c      	bne.n	800c4e4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800c4ca:	f7ff ff43 	bl	800c354 <tcp_new_port>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	8adb      	ldrh	r3, [r3, #22]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d102      	bne.n	800c4e4 <tcp_connect+0x104>
      return ERR_BUF;
 800c4de:	f06f 0301 	mvn.w	r3, #1
 800c4e2:	e081      	b.n	800c5e8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f000 fff7 	bl	800d4d8 <tcp_next_iss>
 800c4ea:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	697a      	ldr	r2, [r7, #20]
 800c4f6:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	1e5a      	subs	r2, r3, #1
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	1e5a      	subs	r2, r3, #1
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	1e5a      	subs	r2, r3, #1
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c516:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c52e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c538:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	3304      	adds	r3, #4
 800c542:	461a      	mov	r2, r3
 800c544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c546:	f000 ffed 	bl	800d524 <tcp_eff_send_mss_netif>
 800c54a:	4603      	mov	r3, r0
 800c54c:	461a      	mov	r2, r3
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2201      	movs	r2, #1
 800c556:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	683a      	ldr	r2, [r7, #0]
 800c55e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800c562:	2102      	movs	r1, #2
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	f003 fdf5 	bl	8010154 <tcp_enqueue_flags>
 800c56a:	4603      	mov	r3, r0
 800c56c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800c56e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d136      	bne.n	800c5e4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2202      	movs	r2, #2
 800c57a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800c57c:	8b7b      	ldrh	r3, [r7, #26]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d021      	beq.n	800c5c6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800c582:	4b20      	ldr	r3, [pc, #128]	; (800c604 <tcp_connect+0x224>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d105      	bne.n	800c598 <tcp_connect+0x1b8>
 800c58c:	4b1d      	ldr	r3, [pc, #116]	; (800c604 <tcp_connect+0x224>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	4a1c      	ldr	r2, [pc, #112]	; (800c604 <tcp_connect+0x224>)
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	e013      	b.n	800c5c0 <tcp_connect+0x1e0>
 800c598:	4b1a      	ldr	r3, [pc, #104]	; (800c604 <tcp_connect+0x224>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	623b      	str	r3, [r7, #32]
 800c59e:	e00c      	b.n	800c5ba <tcp_connect+0x1da>
 800c5a0:	6a3b      	ldr	r3, [r7, #32]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	68fa      	ldr	r2, [r7, #12]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d104      	bne.n	800c5b4 <tcp_connect+0x1d4>
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	68da      	ldr	r2, [r3, #12]
 800c5ae:	6a3b      	ldr	r3, [r7, #32]
 800c5b0:	60da      	str	r2, [r3, #12]
 800c5b2:	e005      	b.n	800c5c0 <tcp_connect+0x1e0>
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	623b      	str	r3, [r7, #32]
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1ef      	bne.n	800c5a0 <tcp_connect+0x1c0>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800c5c6:	4b10      	ldr	r3, [pc, #64]	; (800c608 <tcp_connect+0x228>)
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	60da      	str	r2, [r3, #12]
 800c5ce:	4a0e      	ldr	r2, [pc, #56]	; (800c608 <tcp_connect+0x228>)
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	6013      	str	r3, [r2, #0]
 800c5d4:	f004 fe22 	bl	801121c <tcp_timer_needed>
 800c5d8:	4b0c      	ldr	r3, [pc, #48]	; (800c60c <tcp_connect+0x22c>)
 800c5da:	2201      	movs	r2, #1
 800c5dc:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f003 fea6 	bl	8010330 <tcp_output>
  }
  return ret;
 800c5e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3728      	adds	r7, #40	; 0x28
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	0801c778 	.word	0x0801c778
 800c5f4:	0801ca54 	.word	0x0801ca54
 800c5f8:	0801c7bc 	.word	0x0801c7bc
 800c5fc:	0801ca70 	.word	0x0801ca70
 800c600:	0801ca8c 	.word	0x0801ca8c
 800c604:	2400ee4c 	.word	0x2400ee4c
 800c608:	2400ee40 	.word	0x2400ee40
 800c60c:	2400ee3c 	.word	0x2400ee3c

0800c610 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c610:	b5b0      	push	{r4, r5, r7, lr}
 800c612:	b090      	sub	sp, #64	; 0x40
 800c614:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c61c:	4b94      	ldr	r3, [pc, #592]	; (800c870 <tcp_slowtmr+0x260>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	3301      	adds	r3, #1
 800c622:	4a93      	ldr	r2, [pc, #588]	; (800c870 <tcp_slowtmr+0x260>)
 800c624:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c626:	4b93      	ldr	r3, [pc, #588]	; (800c874 <tcp_slowtmr+0x264>)
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	3301      	adds	r3, #1
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	4b91      	ldr	r3, [pc, #580]	; (800c874 <tcp_slowtmr+0x264>)
 800c630:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c632:	2300      	movs	r3, #0
 800c634:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c636:	4b90      	ldr	r3, [pc, #576]	; (800c878 <tcp_slowtmr+0x268>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c63c:	e29d      	b.n	800cb7a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c640:	7d1b      	ldrb	r3, [r3, #20]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d106      	bne.n	800c654 <tcp_slowtmr+0x44>
 800c646:	4b8d      	ldr	r3, [pc, #564]	; (800c87c <tcp_slowtmr+0x26c>)
 800c648:	f240 42be 	movw	r2, #1214	; 0x4be
 800c64c:	498c      	ldr	r1, [pc, #560]	; (800c880 <tcp_slowtmr+0x270>)
 800c64e:	488d      	ldr	r0, [pc, #564]	; (800c884 <tcp_slowtmr+0x274>)
 800c650:	f00b ff36 	bl	80184c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c656:	7d1b      	ldrb	r3, [r3, #20]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d106      	bne.n	800c66a <tcp_slowtmr+0x5a>
 800c65c:	4b87      	ldr	r3, [pc, #540]	; (800c87c <tcp_slowtmr+0x26c>)
 800c65e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c662:	4989      	ldr	r1, [pc, #548]	; (800c888 <tcp_slowtmr+0x278>)
 800c664:	4887      	ldr	r0, [pc, #540]	; (800c884 <tcp_slowtmr+0x274>)
 800c666:	f00b ff2b 	bl	80184c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66c:	7d1b      	ldrb	r3, [r3, #20]
 800c66e:	2b0a      	cmp	r3, #10
 800c670:	d106      	bne.n	800c680 <tcp_slowtmr+0x70>
 800c672:	4b82      	ldr	r3, [pc, #520]	; (800c87c <tcp_slowtmr+0x26c>)
 800c674:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c678:	4984      	ldr	r1, [pc, #528]	; (800c88c <tcp_slowtmr+0x27c>)
 800c67a:	4882      	ldr	r0, [pc, #520]	; (800c884 <tcp_slowtmr+0x274>)
 800c67c:	f00b ff20 	bl	80184c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c682:	7f9a      	ldrb	r2, [r3, #30]
 800c684:	4b7b      	ldr	r3, [pc, #492]	; (800c874 <tcp_slowtmr+0x264>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d105      	bne.n	800c698 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c696:	e270      	b.n	800cb7a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c698:	4b76      	ldr	r3, [pc, #472]	; (800c874 <tcp_slowtmr+0x264>)
 800c69a:	781a      	ldrb	r2, [r3, #0]
 800c69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ae:	7d1b      	ldrb	r3, [r3, #20]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d10a      	bne.n	800c6ca <tcp_slowtmr+0xba>
 800c6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6ba:	2b05      	cmp	r3, #5
 800c6bc:	d905      	bls.n	800c6ca <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c6be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6c8:	e11e      	b.n	800c908 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6d0:	2b0b      	cmp	r3, #11
 800c6d2:	d905      	bls.n	800c6e0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6d8:	3301      	adds	r3, #1
 800c6da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6de:	e113      	b.n	800c908 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d075      	beq.n	800c7d6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d006      	beq.n	800c700 <tcp_slowtmr+0xf0>
 800c6f2:	4b62      	ldr	r3, [pc, #392]	; (800c87c <tcp_slowtmr+0x26c>)
 800c6f4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c6f8:	4965      	ldr	r1, [pc, #404]	; (800c890 <tcp_slowtmr+0x280>)
 800c6fa:	4862      	ldr	r0, [pc, #392]	; (800c884 <tcp_slowtmr+0x274>)
 800c6fc:	f00b fee0 	bl	80184c0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c704:	2b00      	cmp	r3, #0
 800c706:	d106      	bne.n	800c716 <tcp_slowtmr+0x106>
 800c708:	4b5c      	ldr	r3, [pc, #368]	; (800c87c <tcp_slowtmr+0x26c>)
 800c70a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c70e:	4961      	ldr	r1, [pc, #388]	; (800c894 <tcp_slowtmr+0x284>)
 800c710:	485c      	ldr	r0, [pc, #368]	; (800c884 <tcp_slowtmr+0x274>)
 800c712:	f00b fed5 	bl	80184c0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c71c:	2b0b      	cmp	r3, #11
 800c71e:	d905      	bls.n	800c72c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c724:	3301      	adds	r3, #1
 800c726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c72a:	e0ed      	b.n	800c908 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c732:	3b01      	subs	r3, #1
 800c734:	4a58      	ldr	r2, [pc, #352]	; (800c898 <tcp_slowtmr+0x288>)
 800c736:	5cd3      	ldrb	r3, [r2, r3]
 800c738:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c740:	7c7a      	ldrb	r2, [r7, #17]
 800c742:	429a      	cmp	r2, r3
 800c744:	d907      	bls.n	800c756 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c748:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c74c:	3301      	adds	r3, #1
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c752:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c758:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c75c:	7c7a      	ldrb	r2, [r7, #17]
 800c75e:	429a      	cmp	r2, r3
 800c760:	f200 80d2 	bhi.w	800c908 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c764:	2301      	movs	r3, #1
 800c766:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d108      	bne.n	800c784 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c774:	f004 fc84 	bl	8011080 <tcp_zero_window_probe>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d014      	beq.n	800c7a8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c77e:	2300      	movs	r3, #0
 800c780:	623b      	str	r3, [r7, #32]
 800c782:	e011      	b.n	800c7a8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c786:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c78a:	4619      	mov	r1, r3
 800c78c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c78e:	f003 fb49 	bl	800fe24 <tcp_split_unsent_seg>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d107      	bne.n	800c7a8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c798:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c79a:	f003 fdc9 	bl	8010330 <tcp_output>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d101      	bne.n	800c7a8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c7a8:	6a3b      	ldr	r3, [r7, #32]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f000 80ac 	beq.w	800c908 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c7be:	2b06      	cmp	r3, #6
 800c7c0:	f200 80a2 	bhi.w	800c908 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	b2da      	uxtb	r2, r3
 800c7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c7d4:	e098      	b.n	800c908 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	db0f      	blt.n	800c800 <tcp_slowtmr+0x1f0>
 800c7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c7e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d008      	beq.n	800c800 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	b21a      	sxth	r2, r3
 800c7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c802:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c808:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c80c:	429a      	cmp	r2, r3
 800c80e:	db7b      	blt.n	800c908 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c812:	f004 f87f 	bl	8010914 <tcp_rexmit_rto_prepare>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d007      	beq.n	800c82c <tcp_slowtmr+0x21c>
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c820:	2b00      	cmp	r3, #0
 800c822:	d171      	bne.n	800c908 <tcp_slowtmr+0x2f8>
 800c824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d06d      	beq.n	800c908 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	7d1b      	ldrb	r3, [r3, #20]
 800c830:	2b02      	cmp	r3, #2
 800c832:	d03a      	beq.n	800c8aa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c836:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c83a:	2b0c      	cmp	r3, #12
 800c83c:	bf28      	it	cs
 800c83e:	230c      	movcs	r3, #12
 800c840:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c844:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c848:	10db      	asrs	r3, r3, #3
 800c84a:	b21b      	sxth	r3, r3
 800c84c:	461a      	mov	r2, r3
 800c84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c850:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c854:	4413      	add	r3, r2
 800c856:	7efa      	ldrb	r2, [r7, #27]
 800c858:	4910      	ldr	r1, [pc, #64]	; (800c89c <tcp_slowtmr+0x28c>)
 800c85a:	5c8a      	ldrb	r2, [r1, r2]
 800c85c:	4093      	lsls	r3, r2
 800c85e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c866:	4293      	cmp	r3, r2
 800c868:	dc1a      	bgt.n	800c8a0 <tcp_slowtmr+0x290>
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	b21a      	sxth	r2, r3
 800c86e:	e019      	b.n	800c8a4 <tcp_slowtmr+0x294>
 800c870:	2400ee44 	.word	0x2400ee44
 800c874:	2400b6b6 	.word	0x2400b6b6
 800c878:	2400ee40 	.word	0x2400ee40
 800c87c:	0801c778 	.word	0x0801c778
 800c880:	0801cabc 	.word	0x0801cabc
 800c884:	0801c7bc 	.word	0x0801c7bc
 800c888:	0801cae8 	.word	0x0801cae8
 800c88c:	0801cb14 	.word	0x0801cb14
 800c890:	0801cb44 	.word	0x0801cb44
 800c894:	0801cb78 	.word	0x0801cb78
 800c898:	0801ebf4 	.word	0x0801ebf4
 800c89c:	0801ebe4 	.word	0x0801ebe4
 800c8a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	bf28      	it	cs
 800c8c0:	4613      	movcs	r3, r2
 800c8c2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c8c4:	8a7b      	ldrh	r3, [r7, #18]
 800c8c6:	085b      	lsrs	r3, r3, #1
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8da:	005b      	lsls	r3, r3, #1
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d206      	bcs.n	800c8f0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8e6:	005b      	lsls	r3, r3, #1
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c902:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c904:	f004 f876 	bl	80109f4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90a:	7d1b      	ldrb	r3, [r3, #20]
 800c90c:	2b06      	cmp	r3, #6
 800c90e:	d111      	bne.n	800c934 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c912:	8b5b      	ldrh	r3, [r3, #26]
 800c914:	f003 0310 	and.w	r3, r3, #16
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00b      	beq.n	800c934 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c91c:	4b9c      	ldr	r3, [pc, #624]	; (800cb90 <tcp_slowtmr+0x580>)
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	6a1b      	ldr	r3, [r3, #32]
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	2b28      	cmp	r3, #40	; 0x28
 800c928:	d904      	bls.n	800c934 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c92a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c92e:	3301      	adds	r3, #1
 800c930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c936:	7a5b      	ldrb	r3, [r3, #9]
 800c938:	f003 0308 	and.w	r3, r3, #8
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d04a      	beq.n	800c9d6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c942:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c944:	2b04      	cmp	r3, #4
 800c946:	d003      	beq.n	800c950 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c94c:	2b07      	cmp	r3, #7
 800c94e:	d142      	bne.n	800c9d6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c950:	4b8f      	ldr	r3, [pc, #572]	; (800cb90 <tcp_slowtmr+0x580>)
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c956:	6a1b      	ldr	r3, [r3, #32]
 800c958:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c960:	4b8c      	ldr	r3, [pc, #560]	; (800cb94 <tcp_slowtmr+0x584>)
 800c962:	440b      	add	r3, r1
 800c964:	498c      	ldr	r1, [pc, #560]	; (800cb98 <tcp_slowtmr+0x588>)
 800c966:	fba1 1303 	umull	r1, r3, r1, r3
 800c96a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d90a      	bls.n	800c986 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c974:	3301      	adds	r3, #1
 800c976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c97a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c97e:	3301      	adds	r3, #1
 800c980:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c984:	e027      	b.n	800c9d6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c986:	4b82      	ldr	r3, [pc, #520]	; (800cb90 <tcp_slowtmr+0x580>)
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98c:	6a1b      	ldr	r3, [r3, #32]
 800c98e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c992:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c998:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c99c:	4618      	mov	r0, r3
 800c99e:	4b7f      	ldr	r3, [pc, #508]	; (800cb9c <tcp_slowtmr+0x58c>)
 800c9a0:	fb03 f300 	mul.w	r3, r3, r0
 800c9a4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c9a6:	497c      	ldr	r1, [pc, #496]	; (800cb98 <tcp_slowtmr+0x588>)
 800c9a8:	fba1 1303 	umull	r1, r3, r1, r3
 800c9ac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d911      	bls.n	800c9d6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c9b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9b4:	f004 fb24 	bl	8011000 <tcp_keepalive>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c9be:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d107      	bne.n	800c9d6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	b2da      	uxtb	r2, r3
 800c9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d011      	beq.n	800ca02 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c9de:	4b6c      	ldr	r3, [pc, #432]	; (800cb90 <tcp_slowtmr+0x580>)
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	1ad2      	subs	r2, r2, r3
 800c9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	005b      	lsls	r3, r3, #1
 800c9f4:	440b      	add	r3, r1
 800c9f6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d302      	bcc.n	800ca02 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c9fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9fe:	f000 fe3b 	bl	800d678 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ca02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca04:	7d1b      	ldrb	r3, [r3, #20]
 800ca06:	2b03      	cmp	r3, #3
 800ca08:	d10b      	bne.n	800ca22 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca0a:	4b61      	ldr	r3, [pc, #388]	; (800cb90 <tcp_slowtmr+0x580>)
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca10:	6a1b      	ldr	r3, [r3, #32]
 800ca12:	1ad3      	subs	r3, r2, r3
 800ca14:	2b28      	cmp	r3, #40	; 0x28
 800ca16:	d904      	bls.n	800ca22 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ca18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ca22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca24:	7d1b      	ldrb	r3, [r3, #20]
 800ca26:	2b09      	cmp	r3, #9
 800ca28:	d10b      	bne.n	800ca42 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ca2a:	4b59      	ldr	r3, [pc, #356]	; (800cb90 <tcp_slowtmr+0x580>)
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca30:	6a1b      	ldr	r3, [r3, #32]
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	2bf0      	cmp	r3, #240	; 0xf0
 800ca36:	d904      	bls.n	800ca42 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800ca38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ca42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d060      	beq.n	800cb0c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ca4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca50:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ca52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca54:	f000 fc5c 	bl	800d310 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d010      	beq.n	800ca80 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ca5e:	4b50      	ldr	r3, [pc, #320]	; (800cba0 <tcp_slowtmr+0x590>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d106      	bne.n	800ca76 <tcp_slowtmr+0x466>
 800ca68:	4b4e      	ldr	r3, [pc, #312]	; (800cba4 <tcp_slowtmr+0x594>)
 800ca6a:	f240 526d 	movw	r2, #1389	; 0x56d
 800ca6e:	494e      	ldr	r1, [pc, #312]	; (800cba8 <tcp_slowtmr+0x598>)
 800ca70:	484e      	ldr	r0, [pc, #312]	; (800cbac <tcp_slowtmr+0x59c>)
 800ca72:	f00b fd25 	bl	80184c0 <iprintf>
        prev->next = pcb->next;
 800ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca78:	68da      	ldr	r2, [r3, #12]
 800ca7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7c:	60da      	str	r2, [r3, #12]
 800ca7e:	e00f      	b.n	800caa0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ca80:	4b47      	ldr	r3, [pc, #284]	; (800cba0 <tcp_slowtmr+0x590>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d006      	beq.n	800ca98 <tcp_slowtmr+0x488>
 800ca8a:	4b46      	ldr	r3, [pc, #280]	; (800cba4 <tcp_slowtmr+0x594>)
 800ca8c:	f240 5271 	movw	r2, #1393	; 0x571
 800ca90:	4947      	ldr	r1, [pc, #284]	; (800cbb0 <tcp_slowtmr+0x5a0>)
 800ca92:	4846      	ldr	r0, [pc, #280]	; (800cbac <tcp_slowtmr+0x59c>)
 800ca94:	f00b fd14 	bl	80184c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ca98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	4a40      	ldr	r2, [pc, #256]	; (800cba0 <tcp_slowtmr+0x590>)
 800ca9e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800caa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d013      	beq.n	800cad0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800caa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caaa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800caac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cab0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab4:	3304      	adds	r3, #4
 800cab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cab8:	8ad2      	ldrh	r2, [r2, #22]
 800caba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cabc:	8b09      	ldrh	r1, [r1, #24]
 800cabe:	9102      	str	r1, [sp, #8]
 800cac0:	9201      	str	r2, [sp, #4]
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	462b      	mov	r3, r5
 800cac6:	4622      	mov	r2, r4
 800cac8:	4601      	mov	r1, r0
 800caca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cacc:	f004 f9e4 	bl	8010e98 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	7d1b      	ldrb	r3, [r3, #20]
 800cada:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cade:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cae6:	6838      	ldr	r0, [r7, #0]
 800cae8:	f7ff f896 	bl	800bc18 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800caec:	4b31      	ldr	r3, [pc, #196]	; (800cbb4 <tcp_slowtmr+0x5a4>)
 800caee:	2200      	movs	r2, #0
 800caf0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d004      	beq.n	800cb02 <tcp_slowtmr+0x4f2>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f06f 010c 	mvn.w	r1, #12
 800cafe:	68b8      	ldr	r0, [r7, #8]
 800cb00:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cb02:	4b2c      	ldr	r3, [pc, #176]	; (800cbb4 <tcp_slowtmr+0x5a4>)
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d037      	beq.n	800cb7a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800cb0a:	e592      	b.n	800c632 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb18:	7f1b      	ldrb	r3, [r3, #28]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	b2da      	uxtb	r2, r3
 800cb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb20:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb24:	7f1a      	ldrb	r2, [r3, #28]
 800cb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb28:	7f5b      	ldrb	r3, [r3, #29]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d325      	bcc.n	800cb7a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800cb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb30:	2200      	movs	r2, #0
 800cb32:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cb34:	4b1f      	ldr	r3, [pc, #124]	; (800cbb4 <tcp_slowtmr+0x5a4>)
 800cb36:	2200      	movs	r2, #0
 800cb38:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d00b      	beq.n	800cb5c <tcp_slowtmr+0x54c>
 800cb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb4c:	6912      	ldr	r2, [r2, #16]
 800cb4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb50:	4610      	mov	r0, r2
 800cb52:	4798      	blx	r3
 800cb54:	4603      	mov	r3, r0
 800cb56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cb5a:	e002      	b.n	800cb62 <tcp_slowtmr+0x552>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cb62:	4b14      	ldr	r3, [pc, #80]	; (800cbb4 <tcp_slowtmr+0x5a4>)
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d000      	beq.n	800cb6c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800cb6a:	e562      	b.n	800c632 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cb6c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d102      	bne.n	800cb7a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800cb74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb76:	f003 fbdb 	bl	8010330 <tcp_output>
  while (pcb != NULL) {
 800cb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f47f ad5e 	bne.w	800c63e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cb82:	2300      	movs	r3, #0
 800cb84:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cb86:	4b0c      	ldr	r3, [pc, #48]	; (800cbb8 <tcp_slowtmr+0x5a8>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cb8c:	e069      	b.n	800cc62 <tcp_slowtmr+0x652>
 800cb8e:	bf00      	nop
 800cb90:	2400ee44 	.word	0x2400ee44
 800cb94:	000a4cb8 	.word	0x000a4cb8
 800cb98:	10624dd3 	.word	0x10624dd3
 800cb9c:	000124f8 	.word	0x000124f8
 800cba0:	2400ee40 	.word	0x2400ee40
 800cba4:	0801c778 	.word	0x0801c778
 800cba8:	0801cbb0 	.word	0x0801cbb0
 800cbac:	0801c7bc 	.word	0x0801c7bc
 800cbb0:	0801cbdc 	.word	0x0801cbdc
 800cbb4:	2400ee3c 	.word	0x2400ee3c
 800cbb8:	2400ee50 	.word	0x2400ee50
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	7d1b      	ldrb	r3, [r3, #20]
 800cbc0:	2b0a      	cmp	r3, #10
 800cbc2:	d006      	beq.n	800cbd2 <tcp_slowtmr+0x5c2>
 800cbc4:	4b2b      	ldr	r3, [pc, #172]	; (800cc74 <tcp_slowtmr+0x664>)
 800cbc6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cbca:	492b      	ldr	r1, [pc, #172]	; (800cc78 <tcp_slowtmr+0x668>)
 800cbcc:	482b      	ldr	r0, [pc, #172]	; (800cc7c <tcp_slowtmr+0x66c>)
 800cbce:	f00b fc77 	bl	80184c0 <iprintf>
    pcb_remove = 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cbd8:	4b29      	ldr	r3, [pc, #164]	; (800cc80 <tcp_slowtmr+0x670>)
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbde:	6a1b      	ldr	r3, [r3, #32]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	2bf0      	cmp	r3, #240	; 0xf0
 800cbe4:	d904      	bls.n	800cbf0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cbe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbea:	3301      	adds	r3, #1
 800cbec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cbf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d02f      	beq.n	800cc58 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cbf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbfa:	f000 fb89 	bl	800d310 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d010      	beq.n	800cc26 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cc04:	4b1f      	ldr	r3, [pc, #124]	; (800cc84 <tcp_slowtmr+0x674>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d106      	bne.n	800cc1c <tcp_slowtmr+0x60c>
 800cc0e:	4b19      	ldr	r3, [pc, #100]	; (800cc74 <tcp_slowtmr+0x664>)
 800cc10:	f240 52af 	movw	r2, #1455	; 0x5af
 800cc14:	491c      	ldr	r1, [pc, #112]	; (800cc88 <tcp_slowtmr+0x678>)
 800cc16:	4819      	ldr	r0, [pc, #100]	; (800cc7c <tcp_slowtmr+0x66c>)
 800cc18:	f00b fc52 	bl	80184c0 <iprintf>
        prev->next = pcb->next;
 800cc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1e:	68da      	ldr	r2, [r3, #12]
 800cc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc22:	60da      	str	r2, [r3, #12]
 800cc24:	e00f      	b.n	800cc46 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cc26:	4b17      	ldr	r3, [pc, #92]	; (800cc84 <tcp_slowtmr+0x674>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d006      	beq.n	800cc3e <tcp_slowtmr+0x62e>
 800cc30:	4b10      	ldr	r3, [pc, #64]	; (800cc74 <tcp_slowtmr+0x664>)
 800cc32:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cc36:	4915      	ldr	r1, [pc, #84]	; (800cc8c <tcp_slowtmr+0x67c>)
 800cc38:	4810      	ldr	r0, [pc, #64]	; (800cc7c <tcp_slowtmr+0x66c>)
 800cc3a:	f00b fc41 	bl	80184c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	4a10      	ldr	r2, [pc, #64]	; (800cc84 <tcp_slowtmr+0x674>)
 800cc44:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc48:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cc50:	69f8      	ldr	r0, [r7, #28]
 800cc52:	f7fe ffe1 	bl	800bc18 <tcp_free>
 800cc56:	e004      	b.n	800cc62 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d1a9      	bne.n	800cbbc <tcp_slowtmr+0x5ac>
    }
  }
}
 800cc68:	bf00      	nop
 800cc6a:	bf00      	nop
 800cc6c:	3730      	adds	r7, #48	; 0x30
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bdb0      	pop	{r4, r5, r7, pc}
 800cc72:	bf00      	nop
 800cc74:	0801c778 	.word	0x0801c778
 800cc78:	0801cc08 	.word	0x0801cc08
 800cc7c:	0801c7bc 	.word	0x0801c7bc
 800cc80:	2400ee44 	.word	0x2400ee44
 800cc84:	2400ee50 	.word	0x2400ee50
 800cc88:	0801cc38 	.word	0x0801cc38
 800cc8c:	0801cc60 	.word	0x0801cc60

0800cc90 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cc96:	4b2d      	ldr	r3, [pc, #180]	; (800cd4c <tcp_fasttmr+0xbc>)
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	4b2b      	ldr	r3, [pc, #172]	; (800cd4c <tcp_fasttmr+0xbc>)
 800cca0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cca2:	4b2b      	ldr	r3, [pc, #172]	; (800cd50 <tcp_fasttmr+0xc0>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cca8:	e048      	b.n	800cd3c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	7f9a      	ldrb	r2, [r3, #30]
 800ccae:	4b27      	ldr	r3, [pc, #156]	; (800cd4c <tcp_fasttmr+0xbc>)
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d03f      	beq.n	800cd36 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ccb6:	4b25      	ldr	r3, [pc, #148]	; (800cd4c <tcp_fasttmr+0xbc>)
 800ccb8:	781a      	ldrb	r2, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	8b5b      	ldrh	r3, [r3, #26]
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d010      	beq.n	800ccec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	8b5b      	ldrh	r3, [r3, #26]
 800ccce:	f043 0302 	orr.w	r3, r3, #2
 800ccd2:	b29a      	uxth	r2, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f003 fb29 	bl	8010330 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	8b5b      	ldrh	r3, [r3, #26]
 800cce2:	f023 0303 	bic.w	r3, r3, #3
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	8b5b      	ldrh	r3, [r3, #26]
 800ccf0:	f003 0308 	and.w	r3, r3, #8
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d009      	beq.n	800cd0c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	8b5b      	ldrh	r3, [r3, #26]
 800ccfc:	f023 0308 	bic.w	r3, r3, #8
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f7ff f91a 	bl	800bf40 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00a      	beq.n	800cd30 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cd1a:	4b0e      	ldr	r3, [pc, #56]	; (800cd54 <tcp_fasttmr+0xc4>)
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f819 	bl	800cd58 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cd26:	4b0b      	ldr	r3, [pc, #44]	; (800cd54 <tcp_fasttmr+0xc4>)
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d000      	beq.n	800cd30 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cd2e:	e7b8      	b.n	800cca2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	607b      	str	r3, [r7, #4]
 800cd34:	e002      	b.n	800cd3c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1b3      	bne.n	800ccaa <tcp_fasttmr+0x1a>
    }
  }
}
 800cd42:	bf00      	nop
 800cd44:	bf00      	nop
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	2400b6b6 	.word	0x2400b6b6
 800cd50:	2400ee40 	.word	0x2400ee40
 800cd54:	2400ee3c 	.word	0x2400ee3c

0800cd58 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cd58:	b590      	push	{r4, r7, lr}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d109      	bne.n	800cd7a <tcp_process_refused_data+0x22>
 800cd66:	4b37      	ldr	r3, [pc, #220]	; (800ce44 <tcp_process_refused_data+0xec>)
 800cd68:	f240 6209 	movw	r2, #1545	; 0x609
 800cd6c:	4936      	ldr	r1, [pc, #216]	; (800ce48 <tcp_process_refused_data+0xf0>)
 800cd6e:	4837      	ldr	r0, [pc, #220]	; (800ce4c <tcp_process_refused_data+0xf4>)
 800cd70:	f00b fba6 	bl	80184c0 <iprintf>
 800cd74:	f06f 030f 	mvn.w	r3, #15
 800cd78:	e060      	b.n	800ce3c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd7e:	7b5b      	ldrb	r3, [r3, #13]
 800cd80:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd86:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00b      	beq.n	800cdb0 <tcp_process_refused_data+0x58>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6918      	ldr	r0, [r3, #16]
 800cda2:	2300      	movs	r3, #0
 800cda4:	68ba      	ldr	r2, [r7, #8]
 800cda6:	6879      	ldr	r1, [r7, #4]
 800cda8:	47a0      	blx	r4
 800cdaa:	4603      	mov	r3, r0
 800cdac:	73fb      	strb	r3, [r7, #15]
 800cdae:	e007      	b.n	800cdc0 <tcp_process_refused_data+0x68>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	6879      	ldr	r1, [r7, #4]
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	f000 f8a4 	bl	800cf04 <tcp_recv_null>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cdc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d12a      	bne.n	800ce1e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cdc8:	7bbb      	ldrb	r3, [r7, #14]
 800cdca:	f003 0320 	and.w	r3, r3, #32
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d033      	beq.n	800ce3a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdd6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cdda:	d005      	beq.n	800cde8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cde0:	3301      	adds	r3, #1
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00b      	beq.n	800ce0a <tcp_process_refused_data+0xb2>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6918      	ldr	r0, [r3, #16]
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	2200      	movs	r2, #0
 800ce00:	6879      	ldr	r1, [r7, #4]
 800ce02:	47a0      	blx	r4
 800ce04:	4603      	mov	r3, r0
 800ce06:	73fb      	strb	r3, [r7, #15]
 800ce08:	e001      	b.n	800ce0e <tcp_process_refused_data+0xb6>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ce0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce12:	f113 0f0d 	cmn.w	r3, #13
 800ce16:	d110      	bne.n	800ce3a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ce18:	f06f 030c 	mvn.w	r3, #12
 800ce1c:	e00e      	b.n	800ce3c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ce1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce22:	f113 0f0d 	cmn.w	r3, #13
 800ce26:	d102      	bne.n	800ce2e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ce28:	f06f 030c 	mvn.w	r3, #12
 800ce2c:	e006      	b.n	800ce3c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	68ba      	ldr	r2, [r7, #8]
 800ce32:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ce34:	f06f 0304 	mvn.w	r3, #4
 800ce38:	e000      	b.n	800ce3c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3714      	adds	r7, #20
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd90      	pop	{r4, r7, pc}
 800ce44:	0801c778 	.word	0x0801c778
 800ce48:	0801cc88 	.word	0x0801cc88
 800ce4c:	0801c7bc 	.word	0x0801c7bc

0800ce50 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ce58:	e007      	b.n	800ce6a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f000 f80a 	bl	800ce7a <tcp_seg_free>
    seg = next;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1f4      	bne.n	800ce5a <tcp_segs_free+0xa>
  }
}
 800ce70:	bf00      	nop
 800ce72:	bf00      	nop
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b082      	sub	sp, #8
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00c      	beq.n	800cea2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d004      	beq.n	800ce9a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fe fc03 	bl	800b6a0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ce9a:	6879      	ldr	r1, [r7, #4]
 800ce9c:	2003      	movs	r0, #3
 800ce9e:	f7fd fd5b 	bl	800a958 <memp_free>
  }
}
 800cea2:	bf00      	nop
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
	...

0800ceac <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d106      	bne.n	800cec8 <tcp_seg_copy+0x1c>
 800ceba:	4b0f      	ldr	r3, [pc, #60]	; (800cef8 <tcp_seg_copy+0x4c>)
 800cebc:	f240 6282 	movw	r2, #1666	; 0x682
 800cec0:	490e      	ldr	r1, [pc, #56]	; (800cefc <tcp_seg_copy+0x50>)
 800cec2:	480f      	ldr	r0, [pc, #60]	; (800cf00 <tcp_seg_copy+0x54>)
 800cec4:	f00b fafc 	bl	80184c0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cec8:	2003      	movs	r0, #3
 800ceca:	f7fd fccf 	bl	800a86c <memp_malloc>
 800cece:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d101      	bne.n	800ceda <tcp_seg_copy+0x2e>
    return NULL;
 800ced6:	2300      	movs	r3, #0
 800ced8:	e00a      	b.n	800cef0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ceda:	2210      	movs	r2, #16
 800cedc:	6879      	ldr	r1, [r7, #4]
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f00b fa14 	bl	801830c <memcpy>
  pbuf_ref(cseg->p);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fe fc7f 	bl	800b7ec <pbuf_ref>
  return cseg;
 800ceee:	68fb      	ldr	r3, [r7, #12]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	0801c778 	.word	0x0801c778
 800cefc:	0801cccc 	.word	0x0801cccc
 800cf00:	0801c7bc 	.word	0x0801c7bc

0800cf04 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	607a      	str	r2, [r7, #4]
 800cf10:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d109      	bne.n	800cf2c <tcp_recv_null+0x28>
 800cf18:	4b12      	ldr	r3, [pc, #72]	; (800cf64 <tcp_recv_null+0x60>)
 800cf1a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cf1e:	4912      	ldr	r1, [pc, #72]	; (800cf68 <tcp_recv_null+0x64>)
 800cf20:	4812      	ldr	r0, [pc, #72]	; (800cf6c <tcp_recv_null+0x68>)
 800cf22:	f00b facd 	bl	80184c0 <iprintf>
 800cf26:	f06f 030f 	mvn.w	r3, #15
 800cf2a:	e016      	b.n	800cf5a <tcp_recv_null+0x56>

  if (p != NULL) {
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d009      	beq.n	800cf46 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	891b      	ldrh	r3, [r3, #8]
 800cf36:	4619      	mov	r1, r3
 800cf38:	68b8      	ldr	r0, [r7, #8]
 800cf3a:	f7ff f9bb 	bl	800c2b4 <tcp_recved>
    pbuf_free(p);
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7fe fbae 	bl	800b6a0 <pbuf_free>
 800cf44:	e008      	b.n	800cf58 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cf46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d104      	bne.n	800cf58 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cf4e:	68b8      	ldr	r0, [r7, #8]
 800cf50:	f7ff f860 	bl	800c014 <tcp_close>
 800cf54:	4603      	mov	r3, r0
 800cf56:	e000      	b.n	800cf5a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	0801c778 	.word	0x0801c778
 800cf68:	0801cce8 	.word	0x0801cce8
 800cf6c:	0801c7bc 	.word	0x0801c7bc

0800cf70 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b086      	sub	sp, #24
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cf7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	db01      	blt.n	800cf86 <tcp_kill_prio+0x16>
 800cf82:	79fb      	ldrb	r3, [r7, #7]
 800cf84:	e000      	b.n	800cf88 <tcp_kill_prio+0x18>
 800cf86:	237f      	movs	r3, #127	; 0x7f
 800cf88:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cf8a:	7afb      	ldrb	r3, [r7, #11]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d034      	beq.n	800cffa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cf90:	7afb      	ldrb	r3, [r7, #11]
 800cf92:	3b01      	subs	r3, #1
 800cf94:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cf96:	2300      	movs	r3, #0
 800cf98:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf9e:	4b19      	ldr	r3, [pc, #100]	; (800d004 <tcp_kill_prio+0x94>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	617b      	str	r3, [r7, #20]
 800cfa4:	e01f      	b.n	800cfe6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	7d5b      	ldrb	r3, [r3, #21]
 800cfaa:	7afa      	ldrb	r2, [r7, #11]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d80c      	bhi.n	800cfca <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cfb4:	7afa      	ldrb	r2, [r7, #11]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d112      	bne.n	800cfe0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cfba:	4b13      	ldr	r3, [pc, #76]	; (800d008 <tcp_kill_prio+0x98>)
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	6a1b      	ldr	r3, [r3, #32]
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d80a      	bhi.n	800cfe0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cfca:	4b0f      	ldr	r3, [pc, #60]	; (800d008 <tcp_kill_prio+0x98>)
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	6a1b      	ldr	r3, [r3, #32]
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	7d5b      	ldrb	r3, [r3, #21]
 800cfde:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	617b      	str	r3, [r7, #20]
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1dc      	bne.n	800cfa6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d004      	beq.n	800cffc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cff2:	6938      	ldr	r0, [r7, #16]
 800cff4:	f7ff f8f8 	bl	800c1e8 <tcp_abort>
 800cff8:	e000      	b.n	800cffc <tcp_kill_prio+0x8c>
    return;
 800cffa:	bf00      	nop
  }
}
 800cffc:	3718      	adds	r7, #24
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	2400ee40 	.word	0x2400ee40
 800d008:	2400ee44 	.word	0x2400ee44

0800d00c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b086      	sub	sp, #24
 800d010:	af00      	add	r7, sp, #0
 800d012:	4603      	mov	r3, r0
 800d014:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d016:	79fb      	ldrb	r3, [r7, #7]
 800d018:	2b08      	cmp	r3, #8
 800d01a:	d009      	beq.n	800d030 <tcp_kill_state+0x24>
 800d01c:	79fb      	ldrb	r3, [r7, #7]
 800d01e:	2b09      	cmp	r3, #9
 800d020:	d006      	beq.n	800d030 <tcp_kill_state+0x24>
 800d022:	4b1a      	ldr	r3, [pc, #104]	; (800d08c <tcp_kill_state+0x80>)
 800d024:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d028:	4919      	ldr	r1, [pc, #100]	; (800d090 <tcp_kill_state+0x84>)
 800d02a:	481a      	ldr	r0, [pc, #104]	; (800d094 <tcp_kill_state+0x88>)
 800d02c:	f00b fa48 	bl	80184c0 <iprintf>

  inactivity = 0;
 800d030:	2300      	movs	r3, #0
 800d032:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d034:	2300      	movs	r3, #0
 800d036:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d038:	4b17      	ldr	r3, [pc, #92]	; (800d098 <tcp_kill_state+0x8c>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	617b      	str	r3, [r7, #20]
 800d03e:	e017      	b.n	800d070 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	7d1b      	ldrb	r3, [r3, #20]
 800d044:	79fa      	ldrb	r2, [r7, #7]
 800d046:	429a      	cmp	r2, r3
 800d048:	d10f      	bne.n	800d06a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d04a:	4b14      	ldr	r3, [pc, #80]	; (800d09c <tcp_kill_state+0x90>)
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	1ad3      	subs	r3, r2, r3
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	429a      	cmp	r2, r3
 800d058:	d807      	bhi.n	800d06a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d05a:	4b10      	ldr	r3, [pc, #64]	; (800d09c <tcp_kill_state+0x90>)
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	6a1b      	ldr	r3, [r3, #32]
 800d062:	1ad3      	subs	r3, r2, r3
 800d064:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	68db      	ldr	r3, [r3, #12]
 800d06e:	617b      	str	r3, [r7, #20]
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1e4      	bne.n	800d040 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d003      	beq.n	800d084 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d07c:	2100      	movs	r1, #0
 800d07e:	6938      	ldr	r0, [r7, #16]
 800d080:	f7fe fff4 	bl	800c06c <tcp_abandon>
  }
}
 800d084:	bf00      	nop
 800d086:	3718      	adds	r7, #24
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	0801c778 	.word	0x0801c778
 800d090:	0801cd04 	.word	0x0801cd04
 800d094:	0801c7bc 	.word	0x0801c7bc
 800d098:	2400ee40 	.word	0x2400ee40
 800d09c:	2400ee44 	.word	0x2400ee44

0800d0a0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0ae:	4b12      	ldr	r3, [pc, #72]	; (800d0f8 <tcp_kill_timewait+0x58>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	60fb      	str	r3, [r7, #12]
 800d0b4:	e012      	b.n	800d0dc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d0b6:	4b11      	ldr	r3, [pc, #68]	; (800d0fc <tcp_kill_timewait+0x5c>)
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6a1b      	ldr	r3, [r3, #32]
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d807      	bhi.n	800d0d6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d0c6:	4b0d      	ldr	r3, [pc, #52]	; (800d0fc <tcp_kill_timewait+0x5c>)
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	6a1b      	ldr	r3, [r3, #32]
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	60fb      	str	r3, [r7, #12]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1e9      	bne.n	800d0b6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d002      	beq.n	800d0ee <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d0e8:	68b8      	ldr	r0, [r7, #8]
 800d0ea:	f7ff f87d 	bl	800c1e8 <tcp_abort>
  }
}
 800d0ee:	bf00      	nop
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	2400ee50 	.word	0x2400ee50
 800d0fc:	2400ee44 	.word	0x2400ee44

0800d100 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d106:	4b10      	ldr	r3, [pc, #64]	; (800d148 <tcp_handle_closepend+0x48>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d10c:	e014      	b.n	800d138 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	8b5b      	ldrh	r3, [r3, #26]
 800d118:	f003 0308 	and.w	r3, r3, #8
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d009      	beq.n	800d134 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	8b5b      	ldrh	r3, [r3, #26]
 800d124:	f023 0308 	bic.w	r3, r3, #8
 800d128:	b29a      	uxth	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f7fe ff06 	bl	800bf40 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1e7      	bne.n	800d10e <tcp_handle_closepend+0xe>
  }
}
 800d13e:	bf00      	nop
 800d140:	bf00      	nop
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	2400ee40 	.word	0x2400ee40

0800d14c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	4603      	mov	r3, r0
 800d154:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d156:	2001      	movs	r0, #1
 800d158:	f7fd fb88 	bl	800a86c <memp_malloc>
 800d15c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d126      	bne.n	800d1b2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d164:	f7ff ffcc 	bl	800d100 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d168:	f7ff ff9a 	bl	800d0a0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d16c:	2001      	movs	r0, #1
 800d16e:	f7fd fb7d 	bl	800a86c <memp_malloc>
 800d172:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d11b      	bne.n	800d1b2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d17a:	2009      	movs	r0, #9
 800d17c:	f7ff ff46 	bl	800d00c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d180:	2001      	movs	r0, #1
 800d182:	f7fd fb73 	bl	800a86c <memp_malloc>
 800d186:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d111      	bne.n	800d1b2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d18e:	2008      	movs	r0, #8
 800d190:	f7ff ff3c 	bl	800d00c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d194:	2001      	movs	r0, #1
 800d196:	f7fd fb69 	bl	800a86c <memp_malloc>
 800d19a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d107      	bne.n	800d1b2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d1a2:	79fb      	ldrb	r3, [r7, #7]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7ff fee3 	bl	800cf70 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1aa:	2001      	movs	r0, #1
 800d1ac:	f7fd fb5e 	bl	800a86c <memp_malloc>
 800d1b0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d03f      	beq.n	800d238 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d1b8:	229c      	movs	r2, #156	; 0x9c
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f00b f8cd 	bl	801835c <memset>
    pcb->prio = prio;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	79fa      	ldrb	r2, [r7, #7]
 800d1c6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d1ce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d1d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	22ff      	movs	r2, #255	; 0xff
 800d1e6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d1ee:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2206      	movs	r2, #6
 800d1f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2206      	movs	r2, #6
 800d1fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d204:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2201      	movs	r2, #1
 800d20a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d20e:	4b0d      	ldr	r3, [pc, #52]	; (800d244 <tcp_alloc+0xf8>)
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d216:	4b0c      	ldr	r3, [pc, #48]	; (800d248 <tcp_alloc+0xfc>)
 800d218:	781a      	ldrb	r2, [r3, #0]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d224:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	4a08      	ldr	r2, [pc, #32]	; (800d24c <tcp_alloc+0x100>)
 800d22c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	4a07      	ldr	r2, [pc, #28]	; (800d250 <tcp_alloc+0x104>)
 800d234:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d238:	68fb      	ldr	r3, [r7, #12]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	2400ee44 	.word	0x2400ee44
 800d248:	2400b6b6 	.word	0x2400b6b6
 800d24c:	0800cf05 	.word	0x0800cf05
 800d250:	006ddd00 	.word	0x006ddd00

0800d254 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800d258:	2040      	movs	r0, #64	; 0x40
 800d25a:	f7ff ff77 	bl	800d14c <tcp_alloc>
 800d25e:	4603      	mov	r3, r0
}
 800d260:	4618      	mov	r0, r3
 800d262:	bd80      	pop	{r7, pc}

0800d264 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	611a      	str	r2, [r3, #16]
  }
}
 800d27a:	bf00      	nop
 800d27c:	370c      	adds	r7, #12
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
	...

0800d288 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00e      	beq.n	800d2b6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	7d1b      	ldrb	r3, [r3, #20]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d106      	bne.n	800d2ae <tcp_recv+0x26>
 800d2a0:	4b07      	ldr	r3, [pc, #28]	; (800d2c0 <tcp_recv+0x38>)
 800d2a2:	f240 72df 	movw	r2, #2015	; 0x7df
 800d2a6:	4907      	ldr	r1, [pc, #28]	; (800d2c4 <tcp_recv+0x3c>)
 800d2a8:	4807      	ldr	r0, [pc, #28]	; (800d2c8 <tcp_recv+0x40>)
 800d2aa:	f00b f909 	bl	80184c0 <iprintf>
    pcb->recv = recv;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	683a      	ldr	r2, [r7, #0]
 800d2b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d2b6:	bf00      	nop
 800d2b8:	3708      	adds	r7, #8
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	0801c778 	.word	0x0801c778
 800d2c4:	0801cd14 	.word	0x0801cd14
 800d2c8:	0801c7bc 	.word	0x0801c7bc

0800d2cc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d00e      	beq.n	800d2fa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	7d1b      	ldrb	r3, [r3, #20]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d106      	bne.n	800d2f2 <tcp_err+0x26>
 800d2e4:	4b07      	ldr	r3, [pc, #28]	; (800d304 <tcp_err+0x38>)
 800d2e6:	f640 020d 	movw	r2, #2061	; 0x80d
 800d2ea:	4907      	ldr	r1, [pc, #28]	; (800d308 <tcp_err+0x3c>)
 800d2ec:	4807      	ldr	r0, [pc, #28]	; (800d30c <tcp_err+0x40>)
 800d2ee:	f00b f8e7 	bl	80184c0 <iprintf>
    pcb->errf = err;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	683a      	ldr	r2, [r7, #0]
 800d2f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d2fa:	bf00      	nop
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	0801c778 	.word	0x0801c778
 800d308:	0801cd64 	.word	0x0801cd64
 800d30c:	0801c7bc 	.word	0x0801c7bc

0800d310 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d107      	bne.n	800d32e <tcp_pcb_purge+0x1e>
 800d31e:	4b21      	ldr	r3, [pc, #132]	; (800d3a4 <tcp_pcb_purge+0x94>)
 800d320:	f640 0251 	movw	r2, #2129	; 0x851
 800d324:	4920      	ldr	r1, [pc, #128]	; (800d3a8 <tcp_pcb_purge+0x98>)
 800d326:	4821      	ldr	r0, [pc, #132]	; (800d3ac <tcp_pcb_purge+0x9c>)
 800d328:	f00b f8ca 	bl	80184c0 <iprintf>
 800d32c:	e037      	b.n	800d39e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	7d1b      	ldrb	r3, [r3, #20]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d033      	beq.n	800d39e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d33a:	2b0a      	cmp	r3, #10
 800d33c:	d02f      	beq.n	800d39e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d342:	2b01      	cmp	r3, #1
 800d344:	d02b      	beq.n	800d39e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d007      	beq.n	800d35e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d352:	4618      	mov	r0, r3
 800d354:	f7fe f9a4 	bl	800b6a0 <pbuf_free>
      pcb->refused_data = NULL;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d362:	2b00      	cmp	r3, #0
 800d364:	d002      	beq.n	800d36c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f986 	bl	800d678 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d372:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d378:	4618      	mov	r0, r3
 800d37a:	f7ff fd69 	bl	800ce50 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff fd64 	bl	800ce50 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	66da      	str	r2, [r3, #108]	; 0x6c
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2200      	movs	r2, #0
 800d39a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	0801c778 	.word	0x0801c778
 800d3a8:	0801cdc4 	.word	0x0801cdc4
 800d3ac:	0801c7bc 	.word	0x0801c7bc

0800d3b0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d106      	bne.n	800d3ce <tcp_pcb_remove+0x1e>
 800d3c0:	4b3e      	ldr	r3, [pc, #248]	; (800d4bc <tcp_pcb_remove+0x10c>)
 800d3c2:	f640 0283 	movw	r2, #2179	; 0x883
 800d3c6:	493e      	ldr	r1, [pc, #248]	; (800d4c0 <tcp_pcb_remove+0x110>)
 800d3c8:	483e      	ldr	r0, [pc, #248]	; (800d4c4 <tcp_pcb_remove+0x114>)
 800d3ca:	f00b f879 	bl	80184c0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d106      	bne.n	800d3e2 <tcp_pcb_remove+0x32>
 800d3d4:	4b39      	ldr	r3, [pc, #228]	; (800d4bc <tcp_pcb_remove+0x10c>)
 800d3d6:	f640 0284 	movw	r2, #2180	; 0x884
 800d3da:	493b      	ldr	r1, [pc, #236]	; (800d4c8 <tcp_pcb_remove+0x118>)
 800d3dc:	4839      	ldr	r0, [pc, #228]	; (800d4c4 <tcp_pcb_remove+0x114>)
 800d3de:	f00b f86f 	bl	80184c0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	683a      	ldr	r2, [r7, #0]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d105      	bne.n	800d3f8 <tcp_pcb_remove+0x48>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	68da      	ldr	r2, [r3, #12]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	601a      	str	r2, [r3, #0]
 800d3f6:	e013      	b.n	800d420 <tcp_pcb_remove+0x70>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	60fb      	str	r3, [r7, #12]
 800d3fe:	e00c      	b.n	800d41a <tcp_pcb_remove+0x6a>
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	683a      	ldr	r2, [r7, #0]
 800d406:	429a      	cmp	r2, r3
 800d408:	d104      	bne.n	800d414 <tcp_pcb_remove+0x64>
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	68da      	ldr	r2, [r3, #12]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	60da      	str	r2, [r3, #12]
 800d412:	e005      	b.n	800d420 <tcp_pcb_remove+0x70>
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	60fb      	str	r3, [r7, #12]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1ef      	bne.n	800d400 <tcp_pcb_remove+0x50>
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	2200      	movs	r2, #0
 800d424:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d426:	6838      	ldr	r0, [r7, #0]
 800d428:	f7ff ff72 	bl	800d310 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	7d1b      	ldrb	r3, [r3, #20]
 800d430:	2b0a      	cmp	r3, #10
 800d432:	d013      	beq.n	800d45c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d00f      	beq.n	800d45c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	8b5b      	ldrh	r3, [r3, #26]
 800d440:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d444:	2b00      	cmp	r3, #0
 800d446:	d009      	beq.n	800d45c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	8b5b      	ldrh	r3, [r3, #26]
 800d44c:	f043 0302 	orr.w	r3, r3, #2
 800d450:	b29a      	uxth	r2, r3
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d456:	6838      	ldr	r0, [r7, #0]
 800d458:	f002 ff6a 	bl	8010330 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	7d1b      	ldrb	r3, [r3, #20]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d020      	beq.n	800d4a6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d006      	beq.n	800d47a <tcp_pcb_remove+0xca>
 800d46c:	4b13      	ldr	r3, [pc, #76]	; (800d4bc <tcp_pcb_remove+0x10c>)
 800d46e:	f640 0293 	movw	r2, #2195	; 0x893
 800d472:	4916      	ldr	r1, [pc, #88]	; (800d4cc <tcp_pcb_remove+0x11c>)
 800d474:	4813      	ldr	r0, [pc, #76]	; (800d4c4 <tcp_pcb_remove+0x114>)
 800d476:	f00b f823 	bl	80184c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d006      	beq.n	800d490 <tcp_pcb_remove+0xe0>
 800d482:	4b0e      	ldr	r3, [pc, #56]	; (800d4bc <tcp_pcb_remove+0x10c>)
 800d484:	f640 0294 	movw	r2, #2196	; 0x894
 800d488:	4911      	ldr	r1, [pc, #68]	; (800d4d0 <tcp_pcb_remove+0x120>)
 800d48a:	480e      	ldr	r0, [pc, #56]	; (800d4c4 <tcp_pcb_remove+0x114>)
 800d48c:	f00b f818 	bl	80184c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d494:	2b00      	cmp	r3, #0
 800d496:	d006      	beq.n	800d4a6 <tcp_pcb_remove+0xf6>
 800d498:	4b08      	ldr	r3, [pc, #32]	; (800d4bc <tcp_pcb_remove+0x10c>)
 800d49a:	f640 0296 	movw	r2, #2198	; 0x896
 800d49e:	490d      	ldr	r1, [pc, #52]	; (800d4d4 <tcp_pcb_remove+0x124>)
 800d4a0:	4808      	ldr	r0, [pc, #32]	; (800d4c4 <tcp_pcb_remove+0x114>)
 800d4a2:	f00b f80d 	bl	80184c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d4b2:	bf00      	nop
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	0801c778 	.word	0x0801c778
 800d4c0:	0801cde0 	.word	0x0801cde0
 800d4c4:	0801c7bc 	.word	0x0801c7bc
 800d4c8:	0801cdfc 	.word	0x0801cdfc
 800d4cc:	0801ce1c 	.word	0x0801ce1c
 800d4d0:	0801ce34 	.word	0x0801ce34
 800d4d4:	0801ce50 	.word	0x0801ce50

0800d4d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d106      	bne.n	800d4f4 <tcp_next_iss+0x1c>
 800d4e6:	4b0a      	ldr	r3, [pc, #40]	; (800d510 <tcp_next_iss+0x38>)
 800d4e8:	f640 02af 	movw	r2, #2223	; 0x8af
 800d4ec:	4909      	ldr	r1, [pc, #36]	; (800d514 <tcp_next_iss+0x3c>)
 800d4ee:	480a      	ldr	r0, [pc, #40]	; (800d518 <tcp_next_iss+0x40>)
 800d4f0:	f00a ffe6 	bl	80184c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d4f4:	4b09      	ldr	r3, [pc, #36]	; (800d51c <tcp_next_iss+0x44>)
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	4b09      	ldr	r3, [pc, #36]	; (800d520 <tcp_next_iss+0x48>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	4a07      	ldr	r2, [pc, #28]	; (800d51c <tcp_next_iss+0x44>)
 800d500:	6013      	str	r3, [r2, #0]
  return iss;
 800d502:	4b06      	ldr	r3, [pc, #24]	; (800d51c <tcp_next_iss+0x44>)
 800d504:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d506:	4618      	mov	r0, r3
 800d508:	3708      	adds	r7, #8
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	0801c778 	.word	0x0801c778
 800d514:	0801ce68 	.word	0x0801ce68
 800d518:	0801c7bc 	.word	0x0801c7bc
 800d51c:	2400002c 	.word	0x2400002c
 800d520:	2400ee44 	.word	0x2400ee44

0800d524 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b086      	sub	sp, #24
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4603      	mov	r3, r0
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	607a      	str	r2, [r7, #4]
 800d530:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d106      	bne.n	800d546 <tcp_eff_send_mss_netif+0x22>
 800d538:	4b14      	ldr	r3, [pc, #80]	; (800d58c <tcp_eff_send_mss_netif+0x68>)
 800d53a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d53e:	4914      	ldr	r1, [pc, #80]	; (800d590 <tcp_eff_send_mss_netif+0x6c>)
 800d540:	4814      	ldr	r0, [pc, #80]	; (800d594 <tcp_eff_send_mss_netif+0x70>)
 800d542:	f00a ffbd 	bl	80184c0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d101      	bne.n	800d550 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d54c:	89fb      	ldrh	r3, [r7, #14]
 800d54e:	e019      	b.n	800d584 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d554:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d556:	8afb      	ldrh	r3, [r7, #22]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d012      	beq.n	800d582 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d55c:	2328      	movs	r3, #40	; 0x28
 800d55e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d560:	8afa      	ldrh	r2, [r7, #22]
 800d562:	8abb      	ldrh	r3, [r7, #20]
 800d564:	429a      	cmp	r2, r3
 800d566:	d904      	bls.n	800d572 <tcp_eff_send_mss_netif+0x4e>
 800d568:	8afa      	ldrh	r2, [r7, #22]
 800d56a:	8abb      	ldrh	r3, [r7, #20]
 800d56c:	1ad3      	subs	r3, r2, r3
 800d56e:	b29b      	uxth	r3, r3
 800d570:	e000      	b.n	800d574 <tcp_eff_send_mss_netif+0x50>
 800d572:	2300      	movs	r3, #0
 800d574:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d576:	8a7a      	ldrh	r2, [r7, #18]
 800d578:	89fb      	ldrh	r3, [r7, #14]
 800d57a:	4293      	cmp	r3, r2
 800d57c:	bf28      	it	cs
 800d57e:	4613      	movcs	r3, r2
 800d580:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d582:	89fb      	ldrh	r3, [r7, #14]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3718      	adds	r7, #24
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	0801c778 	.word	0x0801c778
 800d590:	0801ce84 	.word	0x0801ce84
 800d594:	0801c7bc 	.word	0x0801c7bc

0800d598 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d119      	bne.n	800d5e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d5ac:	4b10      	ldr	r3, [pc, #64]	; (800d5f0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d5ae:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d5b2:	4910      	ldr	r1, [pc, #64]	; (800d5f4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d5b4:	4810      	ldr	r0, [pc, #64]	; (800d5f8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d5b6:	f00a ff83 	bl	80184c0 <iprintf>

  while (pcb != NULL) {
 800d5ba:	e011      	b.n	800d5e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d108      	bne.n	800d5da <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	f7fe fe0a 	bl	800c1e8 <tcp_abort>
      pcb = next;
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	60fb      	str	r3, [r7, #12]
 800d5d8:	e002      	b.n	800d5e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d1ea      	bne.n	800d5bc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d5e6:	bf00      	nop
 800d5e8:	bf00      	nop
 800d5ea:	3710      	adds	r7, #16
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	0801c778 	.word	0x0801c778
 800d5f4:	0801ceac 	.word	0x0801ceac
 800d5f8:	0801c7bc 	.word	0x0801c7bc

0800d5fc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d02a      	beq.n	800d662 <tcp_netif_ip_addr_changed+0x66>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d026      	beq.n	800d662 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d614:	4b15      	ldr	r3, [pc, #84]	; (800d66c <tcp_netif_ip_addr_changed+0x70>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4619      	mov	r1, r3
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f7ff ffbc 	bl	800d598 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d620:	4b13      	ldr	r3, [pc, #76]	; (800d670 <tcp_netif_ip_addr_changed+0x74>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4619      	mov	r1, r3
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7ff ffb6 	bl	800d598 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d017      	beq.n	800d662 <tcp_netif_ip_addr_changed+0x66>
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d013      	beq.n	800d662 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d63a:	4b0e      	ldr	r3, [pc, #56]	; (800d674 <tcp_netif_ip_addr_changed+0x78>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	60fb      	str	r3, [r7, #12]
 800d640:	e00c      	b.n	800d65c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d103      	bne.n	800d656 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	60fb      	str	r3, [r7, #12]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1ef      	bne.n	800d642 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d662:	bf00      	nop
 800d664:	3710      	adds	r7, #16
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	2400ee40 	.word	0x2400ee40
 800d670:	2400ee4c 	.word	0x2400ee4c
 800d674:	2400ee48 	.word	0x2400ee48

0800d678 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d684:	2b00      	cmp	r3, #0
 800d686:	d007      	beq.n	800d698 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7ff fbdf 	bl	800ce50 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2200      	movs	r2, #0
 800d696:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d698:	bf00      	nop
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d6a0:	b590      	push	{r4, r7, lr}
 800d6a2:	b08d      	sub	sp, #52	; 0x34
 800d6a4:	af04      	add	r7, sp, #16
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d105      	bne.n	800d6bc <tcp_input+0x1c>
 800d6b0:	4b9b      	ldr	r3, [pc, #620]	; (800d920 <tcp_input+0x280>)
 800d6b2:	2283      	movs	r2, #131	; 0x83
 800d6b4:	499b      	ldr	r1, [pc, #620]	; (800d924 <tcp_input+0x284>)
 800d6b6:	489c      	ldr	r0, [pc, #624]	; (800d928 <tcp_input+0x288>)
 800d6b8:	f00a ff02 	bl	80184c0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	4a9a      	ldr	r2, [pc, #616]	; (800d92c <tcp_input+0x28c>)
 800d6c2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	895b      	ldrh	r3, [r3, #10]
 800d6c8:	2b13      	cmp	r3, #19
 800d6ca:	f240 83c4 	bls.w	800de56 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d6ce:	4b98      	ldr	r3, [pc, #608]	; (800d930 <tcp_input+0x290>)
 800d6d0:	695b      	ldr	r3, [r3, #20]
 800d6d2:	4a97      	ldr	r2, [pc, #604]	; (800d930 <tcp_input+0x290>)
 800d6d4:	6812      	ldr	r2, [r2, #0]
 800d6d6:	4611      	mov	r1, r2
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f005 ffad 	bl	8013638 <ip4_addr_isbroadcast_u32>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	f040 83ba 	bne.w	800de5a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d6e6:	4b92      	ldr	r3, [pc, #584]	; (800d930 <tcp_input+0x290>)
 800d6e8:	695b      	ldr	r3, [r3, #20]
 800d6ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d6ee:	2be0      	cmp	r3, #224	; 0xe0
 800d6f0:	f000 83b3 	beq.w	800de5a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d6f4:	4b8d      	ldr	r3, [pc, #564]	; (800d92c <tcp_input+0x28c>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	899b      	ldrh	r3, [r3, #12]
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fc fbe1 	bl	8009ec4 <lwip_htons>
 800d702:	4603      	mov	r3, r0
 800d704:	0b1b      	lsrs	r3, r3, #12
 800d706:	b29b      	uxth	r3, r3
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d70e:	7cbb      	ldrb	r3, [r7, #18]
 800d710:	2b13      	cmp	r3, #19
 800d712:	f240 83a4 	bls.w	800de5e <tcp_input+0x7be>
 800d716:	7cbb      	ldrb	r3, [r7, #18]
 800d718:	b29a      	uxth	r2, r3
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	891b      	ldrh	r3, [r3, #8]
 800d71e:	429a      	cmp	r2, r3
 800d720:	f200 839d 	bhi.w	800de5e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d724:	7cbb      	ldrb	r3, [r7, #18]
 800d726:	b29b      	uxth	r3, r3
 800d728:	3b14      	subs	r3, #20
 800d72a:	b29a      	uxth	r2, r3
 800d72c:	4b81      	ldr	r3, [pc, #516]	; (800d934 <tcp_input+0x294>)
 800d72e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d730:	4b81      	ldr	r3, [pc, #516]	; (800d938 <tcp_input+0x298>)
 800d732:	2200      	movs	r2, #0
 800d734:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	895a      	ldrh	r2, [r3, #10]
 800d73a:	7cbb      	ldrb	r3, [r7, #18]
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	429a      	cmp	r2, r3
 800d740:	d309      	bcc.n	800d756 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d742:	4b7c      	ldr	r3, [pc, #496]	; (800d934 <tcp_input+0x294>)
 800d744:	881a      	ldrh	r2, [r3, #0]
 800d746:	4b7d      	ldr	r3, [pc, #500]	; (800d93c <tcp_input+0x29c>)
 800d748:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d74a:	7cbb      	ldrb	r3, [r7, #18]
 800d74c:	4619      	mov	r1, r3
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f7fd ff20 	bl	800b594 <pbuf_remove_header>
 800d754:	e04e      	b.n	800d7f4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d105      	bne.n	800d76a <tcp_input+0xca>
 800d75e:	4b70      	ldr	r3, [pc, #448]	; (800d920 <tcp_input+0x280>)
 800d760:	22c2      	movs	r2, #194	; 0xc2
 800d762:	4977      	ldr	r1, [pc, #476]	; (800d940 <tcp_input+0x2a0>)
 800d764:	4870      	ldr	r0, [pc, #448]	; (800d928 <tcp_input+0x288>)
 800d766:	f00a feab 	bl	80184c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d76a:	2114      	movs	r1, #20
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f7fd ff11 	bl	800b594 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	895a      	ldrh	r2, [r3, #10]
 800d776:	4b71      	ldr	r3, [pc, #452]	; (800d93c <tcp_input+0x29c>)
 800d778:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d77a:	4b6e      	ldr	r3, [pc, #440]	; (800d934 <tcp_input+0x294>)
 800d77c:	881a      	ldrh	r2, [r3, #0]
 800d77e:	4b6f      	ldr	r3, [pc, #444]	; (800d93c <tcp_input+0x29c>)
 800d780:	881b      	ldrh	r3, [r3, #0]
 800d782:	1ad3      	subs	r3, r2, r3
 800d784:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d786:	4b6d      	ldr	r3, [pc, #436]	; (800d93c <tcp_input+0x29c>)
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	4619      	mov	r1, r3
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f7fd ff01 	bl	800b594 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	895b      	ldrh	r3, [r3, #10]
 800d798:	8a3a      	ldrh	r2, [r7, #16]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	f200 8361 	bhi.w	800de62 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	4a64      	ldr	r2, [pc, #400]	; (800d938 <tcp_input+0x298>)
 800d7a8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	8a3a      	ldrh	r2, [r7, #16]
 800d7b0:	4611      	mov	r1, r2
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fd feee 	bl	800b594 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	891a      	ldrh	r2, [r3, #8]
 800d7bc:	8a3b      	ldrh	r3, [r7, #16]
 800d7be:	1ad3      	subs	r3, r2, r3
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	895b      	ldrh	r3, [r3, #10]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d005      	beq.n	800d7da <tcp_input+0x13a>
 800d7ce:	4b54      	ldr	r3, [pc, #336]	; (800d920 <tcp_input+0x280>)
 800d7d0:	22df      	movs	r2, #223	; 0xdf
 800d7d2:	495c      	ldr	r1, [pc, #368]	; (800d944 <tcp_input+0x2a4>)
 800d7d4:	4854      	ldr	r0, [pc, #336]	; (800d928 <tcp_input+0x288>)
 800d7d6:	f00a fe73 	bl	80184c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	891a      	ldrh	r2, [r3, #8]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	891b      	ldrh	r3, [r3, #8]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d005      	beq.n	800d7f4 <tcp_input+0x154>
 800d7e8:	4b4d      	ldr	r3, [pc, #308]	; (800d920 <tcp_input+0x280>)
 800d7ea:	22e0      	movs	r2, #224	; 0xe0
 800d7ec:	4956      	ldr	r1, [pc, #344]	; (800d948 <tcp_input+0x2a8>)
 800d7ee:	484e      	ldr	r0, [pc, #312]	; (800d928 <tcp_input+0x288>)
 800d7f0:	f00a fe66 	bl	80184c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d7f4:	4b4d      	ldr	r3, [pc, #308]	; (800d92c <tcp_input+0x28c>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	881b      	ldrh	r3, [r3, #0]
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	4a4b      	ldr	r2, [pc, #300]	; (800d92c <tcp_input+0x28c>)
 800d7fe:	6814      	ldr	r4, [r2, #0]
 800d800:	4618      	mov	r0, r3
 800d802:	f7fc fb5f 	bl	8009ec4 <lwip_htons>
 800d806:	4603      	mov	r3, r0
 800d808:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d80a:	4b48      	ldr	r3, [pc, #288]	; (800d92c <tcp_input+0x28c>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	885b      	ldrh	r3, [r3, #2]
 800d810:	b29b      	uxth	r3, r3
 800d812:	4a46      	ldr	r2, [pc, #280]	; (800d92c <tcp_input+0x28c>)
 800d814:	6814      	ldr	r4, [r2, #0]
 800d816:	4618      	mov	r0, r3
 800d818:	f7fc fb54 	bl	8009ec4 <lwip_htons>
 800d81c:	4603      	mov	r3, r0
 800d81e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d820:	4b42      	ldr	r3, [pc, #264]	; (800d92c <tcp_input+0x28c>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	4a41      	ldr	r2, [pc, #260]	; (800d92c <tcp_input+0x28c>)
 800d828:	6814      	ldr	r4, [r2, #0]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fc fb5f 	bl	8009eee <lwip_htonl>
 800d830:	4603      	mov	r3, r0
 800d832:	6063      	str	r3, [r4, #4]
 800d834:	6863      	ldr	r3, [r4, #4]
 800d836:	4a45      	ldr	r2, [pc, #276]	; (800d94c <tcp_input+0x2ac>)
 800d838:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d83a:	4b3c      	ldr	r3, [pc, #240]	; (800d92c <tcp_input+0x28c>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	4a3a      	ldr	r2, [pc, #232]	; (800d92c <tcp_input+0x28c>)
 800d842:	6814      	ldr	r4, [r2, #0]
 800d844:	4618      	mov	r0, r3
 800d846:	f7fc fb52 	bl	8009eee <lwip_htonl>
 800d84a:	4603      	mov	r3, r0
 800d84c:	60a3      	str	r3, [r4, #8]
 800d84e:	68a3      	ldr	r3, [r4, #8]
 800d850:	4a3f      	ldr	r2, [pc, #252]	; (800d950 <tcp_input+0x2b0>)
 800d852:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d854:	4b35      	ldr	r3, [pc, #212]	; (800d92c <tcp_input+0x28c>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	89db      	ldrh	r3, [r3, #14]
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	4a33      	ldr	r2, [pc, #204]	; (800d92c <tcp_input+0x28c>)
 800d85e:	6814      	ldr	r4, [r2, #0]
 800d860:	4618      	mov	r0, r3
 800d862:	f7fc fb2f 	bl	8009ec4 <lwip_htons>
 800d866:	4603      	mov	r3, r0
 800d868:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d86a:	4b30      	ldr	r3, [pc, #192]	; (800d92c <tcp_input+0x28c>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	899b      	ldrh	r3, [r3, #12]
 800d870:	b29b      	uxth	r3, r3
 800d872:	4618      	mov	r0, r3
 800d874:	f7fc fb26 	bl	8009ec4 <lwip_htons>
 800d878:	4603      	mov	r3, r0
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d880:	b2da      	uxtb	r2, r3
 800d882:	4b34      	ldr	r3, [pc, #208]	; (800d954 <tcp_input+0x2b4>)
 800d884:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	891a      	ldrh	r2, [r3, #8]
 800d88a:	4b33      	ldr	r3, [pc, #204]	; (800d958 <tcp_input+0x2b8>)
 800d88c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d88e:	4b31      	ldr	r3, [pc, #196]	; (800d954 <tcp_input+0x2b4>)
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	f003 0303 	and.w	r3, r3, #3
 800d896:	2b00      	cmp	r3, #0
 800d898:	d00c      	beq.n	800d8b4 <tcp_input+0x214>
    tcplen++;
 800d89a:	4b2f      	ldr	r3, [pc, #188]	; (800d958 <tcp_input+0x2b8>)
 800d89c:	881b      	ldrh	r3, [r3, #0]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	b29a      	uxth	r2, r3
 800d8a2:	4b2d      	ldr	r3, [pc, #180]	; (800d958 <tcp_input+0x2b8>)
 800d8a4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	891a      	ldrh	r2, [r3, #8]
 800d8aa:	4b2b      	ldr	r3, [pc, #172]	; (800d958 <tcp_input+0x2b8>)
 800d8ac:	881b      	ldrh	r3, [r3, #0]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	f200 82d9 	bhi.w	800de66 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8b8:	4b28      	ldr	r3, [pc, #160]	; (800d95c <tcp_input+0x2bc>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	61fb      	str	r3, [r7, #28]
 800d8be:	e09d      	b.n	800d9fc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	7d1b      	ldrb	r3, [r3, #20]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d105      	bne.n	800d8d4 <tcp_input+0x234>
 800d8c8:	4b15      	ldr	r3, [pc, #84]	; (800d920 <tcp_input+0x280>)
 800d8ca:	22fb      	movs	r2, #251	; 0xfb
 800d8cc:	4924      	ldr	r1, [pc, #144]	; (800d960 <tcp_input+0x2c0>)
 800d8ce:	4816      	ldr	r0, [pc, #88]	; (800d928 <tcp_input+0x288>)
 800d8d0:	f00a fdf6 	bl	80184c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	7d1b      	ldrb	r3, [r3, #20]
 800d8d8:	2b0a      	cmp	r3, #10
 800d8da:	d105      	bne.n	800d8e8 <tcp_input+0x248>
 800d8dc:	4b10      	ldr	r3, [pc, #64]	; (800d920 <tcp_input+0x280>)
 800d8de:	22fc      	movs	r2, #252	; 0xfc
 800d8e0:	4920      	ldr	r1, [pc, #128]	; (800d964 <tcp_input+0x2c4>)
 800d8e2:	4811      	ldr	r0, [pc, #68]	; (800d928 <tcp_input+0x288>)
 800d8e4:	f00a fdec 	bl	80184c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	7d1b      	ldrb	r3, [r3, #20]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d105      	bne.n	800d8fc <tcp_input+0x25c>
 800d8f0:	4b0b      	ldr	r3, [pc, #44]	; (800d920 <tcp_input+0x280>)
 800d8f2:	22fd      	movs	r2, #253	; 0xfd
 800d8f4:	491c      	ldr	r1, [pc, #112]	; (800d968 <tcp_input+0x2c8>)
 800d8f6:	480c      	ldr	r0, [pc, #48]	; (800d928 <tcp_input+0x288>)
 800d8f8:	f00a fde2 	bl	80184c0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	7a1b      	ldrb	r3, [r3, #8]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d033      	beq.n	800d96c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	7a1a      	ldrb	r2, [r3, #8]
 800d908:	4b09      	ldr	r3, [pc, #36]	; (800d930 <tcp_input+0x290>)
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d910:	3301      	adds	r3, #1
 800d912:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d914:	429a      	cmp	r2, r3
 800d916:	d029      	beq.n	800d96c <tcp_input+0x2cc>
      prev = pcb;
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	61bb      	str	r3, [r7, #24]
      continue;
 800d91c:	e06b      	b.n	800d9f6 <tcp_input+0x356>
 800d91e:	bf00      	nop
 800d920:	0801cee0 	.word	0x0801cee0
 800d924:	0801cf14 	.word	0x0801cf14
 800d928:	0801cf2c 	.word	0x0801cf2c
 800d92c:	2400b6c8 	.word	0x2400b6c8
 800d930:	2400bde0 	.word	0x2400bde0
 800d934:	2400b6cc 	.word	0x2400b6cc
 800d938:	2400b6d0 	.word	0x2400b6d0
 800d93c:	2400b6ce 	.word	0x2400b6ce
 800d940:	0801cf54 	.word	0x0801cf54
 800d944:	0801cf64 	.word	0x0801cf64
 800d948:	0801cf70 	.word	0x0801cf70
 800d94c:	2400b6d8 	.word	0x2400b6d8
 800d950:	2400b6dc 	.word	0x2400b6dc
 800d954:	2400b6e4 	.word	0x2400b6e4
 800d958:	2400b6e2 	.word	0x2400b6e2
 800d95c:	2400ee40 	.word	0x2400ee40
 800d960:	0801cf90 	.word	0x0801cf90
 800d964:	0801cfb8 	.word	0x0801cfb8
 800d968:	0801cfe4 	.word	0x0801cfe4
    }

    if (pcb->remote_port == tcphdr->src &&
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	8b1a      	ldrh	r2, [r3, #24]
 800d970:	4b94      	ldr	r3, [pc, #592]	; (800dbc4 <tcp_input+0x524>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	b29b      	uxth	r3, r3
 800d978:	429a      	cmp	r2, r3
 800d97a:	d13a      	bne.n	800d9f2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	8ada      	ldrh	r2, [r3, #22]
 800d980:	4b90      	ldr	r3, [pc, #576]	; (800dbc4 <tcp_input+0x524>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	885b      	ldrh	r3, [r3, #2]
 800d986:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d988:	429a      	cmp	r2, r3
 800d98a:	d132      	bne.n	800d9f2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	4b8d      	ldr	r3, [pc, #564]	; (800dbc8 <tcp_input+0x528>)
 800d992:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d994:	429a      	cmp	r2, r3
 800d996:	d12c      	bne.n	800d9f2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	4b8a      	ldr	r3, [pc, #552]	; (800dbc8 <tcp_input+0x528>)
 800d99e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d126      	bne.n	800d9f2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	69fa      	ldr	r2, [r7, #28]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d106      	bne.n	800d9bc <tcp_input+0x31c>
 800d9ae:	4b87      	ldr	r3, [pc, #540]	; (800dbcc <tcp_input+0x52c>)
 800d9b0:	f240 120d 	movw	r2, #269	; 0x10d
 800d9b4:	4986      	ldr	r1, [pc, #536]	; (800dbd0 <tcp_input+0x530>)
 800d9b6:	4887      	ldr	r0, [pc, #540]	; (800dbd4 <tcp_input+0x534>)
 800d9b8:	f00a fd82 	bl	80184c0 <iprintf>
      if (prev != NULL) {
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00a      	beq.n	800d9d8 <tcp_input+0x338>
        prev->next = pcb->next;
 800d9c2:	69fb      	ldr	r3, [r7, #28]
 800d9c4:	68da      	ldr	r2, [r3, #12]
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d9ca:	4b83      	ldr	r3, [pc, #524]	; (800dbd8 <tcp_input+0x538>)
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	69fb      	ldr	r3, [r7, #28]
 800d9d0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d9d2:	4a81      	ldr	r2, [pc, #516]	; (800dbd8 <tcp_input+0x538>)
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	69fa      	ldr	r2, [r7, #28]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d111      	bne.n	800da06 <tcp_input+0x366>
 800d9e2:	4b7a      	ldr	r3, [pc, #488]	; (800dbcc <tcp_input+0x52c>)
 800d9e4:	f240 1215 	movw	r2, #277	; 0x115
 800d9e8:	497c      	ldr	r1, [pc, #496]	; (800dbdc <tcp_input+0x53c>)
 800d9ea:	487a      	ldr	r0, [pc, #488]	; (800dbd4 <tcp_input+0x534>)
 800d9ec:	f00a fd68 	bl	80184c0 <iprintf>
      break;
 800d9f0:	e009      	b.n	800da06 <tcp_input+0x366>
    }
    prev = pcb;
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	61fb      	str	r3, [r7, #28]
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f47f af5e 	bne.w	800d8c0 <tcp_input+0x220>
 800da04:	e000      	b.n	800da08 <tcp_input+0x368>
      break;
 800da06:	bf00      	nop
  }

  if (pcb == NULL) {
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f040 8095 	bne.w	800db3a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da10:	4b73      	ldr	r3, [pc, #460]	; (800dbe0 <tcp_input+0x540>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	61fb      	str	r3, [r7, #28]
 800da16:	e03f      	b.n	800da98 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	7d1b      	ldrb	r3, [r3, #20]
 800da1c:	2b0a      	cmp	r3, #10
 800da1e:	d006      	beq.n	800da2e <tcp_input+0x38e>
 800da20:	4b6a      	ldr	r3, [pc, #424]	; (800dbcc <tcp_input+0x52c>)
 800da22:	f240 121f 	movw	r2, #287	; 0x11f
 800da26:	496f      	ldr	r1, [pc, #444]	; (800dbe4 <tcp_input+0x544>)
 800da28:	486a      	ldr	r0, [pc, #424]	; (800dbd4 <tcp_input+0x534>)
 800da2a:	f00a fd49 	bl	80184c0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	7a1b      	ldrb	r3, [r3, #8]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d009      	beq.n	800da4a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	7a1a      	ldrb	r2, [r3, #8]
 800da3a:	4b63      	ldr	r3, [pc, #396]	; (800dbc8 <tcp_input+0x528>)
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da42:	3301      	adds	r3, #1
 800da44:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da46:	429a      	cmp	r2, r3
 800da48:	d122      	bne.n	800da90 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	8b1a      	ldrh	r2, [r3, #24]
 800da4e:	4b5d      	ldr	r3, [pc, #372]	; (800dbc4 <tcp_input+0x524>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	881b      	ldrh	r3, [r3, #0]
 800da54:	b29b      	uxth	r3, r3
 800da56:	429a      	cmp	r2, r3
 800da58:	d11b      	bne.n	800da92 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	8ada      	ldrh	r2, [r3, #22]
 800da5e:	4b59      	ldr	r3, [pc, #356]	; (800dbc4 <tcp_input+0x524>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	885b      	ldrh	r3, [r3, #2]
 800da64:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800da66:	429a      	cmp	r2, r3
 800da68:	d113      	bne.n	800da92 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	685a      	ldr	r2, [r3, #4]
 800da6e:	4b56      	ldr	r3, [pc, #344]	; (800dbc8 <tcp_input+0x528>)
 800da70:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800da72:	429a      	cmp	r2, r3
 800da74:	d10d      	bne.n	800da92 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	4b53      	ldr	r3, [pc, #332]	; (800dbc8 <tcp_input+0x528>)
 800da7c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da7e:	429a      	cmp	r2, r3
 800da80:	d107      	bne.n	800da92 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800da82:	69f8      	ldr	r0, [r7, #28]
 800da84:	f000 fb54 	bl	800e130 <tcp_timewait_input>
        }
        pbuf_free(p);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7fd fe09 	bl	800b6a0 <pbuf_free>
        return;
 800da8e:	e1f0      	b.n	800de72 <tcp_input+0x7d2>
        continue;
 800da90:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	61fb      	str	r3, [r7, #28]
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1bc      	bne.n	800da18 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800daa2:	4b51      	ldr	r3, [pc, #324]	; (800dbe8 <tcp_input+0x548>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	617b      	str	r3, [r7, #20]
 800daa8:	e02a      	b.n	800db00 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	7a1b      	ldrb	r3, [r3, #8]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00c      	beq.n	800dacc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	7a1a      	ldrb	r2, [r3, #8]
 800dab6:	4b44      	ldr	r3, [pc, #272]	; (800dbc8 <tcp_input+0x528>)
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dabe:	3301      	adds	r3, #1
 800dac0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d002      	beq.n	800dacc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	61bb      	str	r3, [r7, #24]
        continue;
 800daca:	e016      	b.n	800dafa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	8ada      	ldrh	r2, [r3, #22]
 800dad0:	4b3c      	ldr	r3, [pc, #240]	; (800dbc4 <tcp_input+0x524>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	885b      	ldrh	r3, [r3, #2]
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	429a      	cmp	r2, r3
 800dada:	d10c      	bne.n	800daf6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	4b39      	ldr	r3, [pc, #228]	; (800dbc8 <tcp_input+0x528>)
 800dae2:	695b      	ldr	r3, [r3, #20]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d00f      	beq.n	800db08 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00d      	beq.n	800db0a <tcp_input+0x46a>
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d009      	beq.n	800db0a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	68db      	ldr	r3, [r3, #12]
 800dafe:	617b      	str	r3, [r7, #20]
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d1d1      	bne.n	800daaa <tcp_input+0x40a>
 800db06:	e000      	b.n	800db0a <tcp_input+0x46a>
            break;
 800db08:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d014      	beq.n	800db3a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00a      	beq.n	800db2c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	68da      	ldr	r2, [r3, #12]
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800db1e:	4b32      	ldr	r3, [pc, #200]	; (800dbe8 <tcp_input+0x548>)
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800db26:	4a30      	ldr	r2, [pc, #192]	; (800dbe8 <tcp_input+0x548>)
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800db2c:	6978      	ldr	r0, [r7, #20]
 800db2e:	f000 fa01 	bl	800df34 <tcp_listen_input>
      }
      pbuf_free(p);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7fd fdb4 	bl	800b6a0 <pbuf_free>
      return;
 800db38:	e19b      	b.n	800de72 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	f000 8160 	beq.w	800de02 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800db42:	4b2a      	ldr	r3, [pc, #168]	; (800dbec <tcp_input+0x54c>)
 800db44:	2200      	movs	r2, #0
 800db46:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	891a      	ldrh	r2, [r3, #8]
 800db4c:	4b27      	ldr	r3, [pc, #156]	; (800dbec <tcp_input+0x54c>)
 800db4e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800db50:	4a26      	ldr	r2, [pc, #152]	; (800dbec <tcp_input+0x54c>)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800db56:	4b1b      	ldr	r3, [pc, #108]	; (800dbc4 <tcp_input+0x524>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a24      	ldr	r2, [pc, #144]	; (800dbec <tcp_input+0x54c>)
 800db5c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800db5e:	4b24      	ldr	r3, [pc, #144]	; (800dbf0 <tcp_input+0x550>)
 800db60:	2200      	movs	r2, #0
 800db62:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800db64:	4b23      	ldr	r3, [pc, #140]	; (800dbf4 <tcp_input+0x554>)
 800db66:	2200      	movs	r2, #0
 800db68:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800db6a:	4b23      	ldr	r3, [pc, #140]	; (800dbf8 <tcp_input+0x558>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800db70:	4b22      	ldr	r3, [pc, #136]	; (800dbfc <tcp_input+0x55c>)
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	f003 0308 	and.w	r3, r3, #8
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d006      	beq.n	800db8a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	7b5b      	ldrb	r3, [r3, #13]
 800db80:	f043 0301 	orr.w	r3, r3, #1
 800db84:	b2da      	uxtb	r2, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d038      	beq.n	800dc04 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800db92:	69f8      	ldr	r0, [r7, #28]
 800db94:	f7ff f8e0 	bl	800cd58 <tcp_process_refused_data>
 800db98:	4603      	mov	r3, r0
 800db9a:	f113 0f0d 	cmn.w	r3, #13
 800db9e:	d007      	beq.n	800dbb0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d02d      	beq.n	800dc04 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dba8:	4b15      	ldr	r3, [pc, #84]	; (800dc00 <tcp_input+0x560>)
 800dbaa:	881b      	ldrh	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d029      	beq.n	800dc04 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f040 8104 	bne.w	800ddc2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dbba:	69f8      	ldr	r0, [r7, #28]
 800dbbc:	f003 f9be 	bl	8010f3c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dbc0:	e0ff      	b.n	800ddc2 <tcp_input+0x722>
 800dbc2:	bf00      	nop
 800dbc4:	2400b6c8 	.word	0x2400b6c8
 800dbc8:	2400bde0 	.word	0x2400bde0
 800dbcc:	0801cee0 	.word	0x0801cee0
 800dbd0:	0801d00c 	.word	0x0801d00c
 800dbd4:	0801cf2c 	.word	0x0801cf2c
 800dbd8:	2400ee40 	.word	0x2400ee40
 800dbdc:	0801d038 	.word	0x0801d038
 800dbe0:	2400ee50 	.word	0x2400ee50
 800dbe4:	0801d064 	.word	0x0801d064
 800dbe8:	2400ee48 	.word	0x2400ee48
 800dbec:	2400b6b8 	.word	0x2400b6b8
 800dbf0:	2400b6e8 	.word	0x2400b6e8
 800dbf4:	2400b6e5 	.word	0x2400b6e5
 800dbf8:	2400b6e0 	.word	0x2400b6e0
 800dbfc:	2400b6e4 	.word	0x2400b6e4
 800dc00:	2400b6e2 	.word	0x2400b6e2
      }
    }
    tcp_input_pcb = pcb;
 800dc04:	4a9c      	ldr	r2, [pc, #624]	; (800de78 <tcp_input+0x7d8>)
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dc0a:	69f8      	ldr	r0, [r7, #28]
 800dc0c:	f000 fb0a 	bl	800e224 <tcp_process>
 800dc10:	4603      	mov	r3, r0
 800dc12:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dc14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc18:	f113 0f0d 	cmn.w	r3, #13
 800dc1c:	f000 80d3 	beq.w	800ddc6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800dc20:	4b96      	ldr	r3, [pc, #600]	; (800de7c <tcp_input+0x7dc>)
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	f003 0308 	and.w	r3, r3, #8
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d015      	beq.n	800dc58 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d008      	beq.n	800dc48 <tcp_input+0x5a8>
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc3c:	69fa      	ldr	r2, [r7, #28]
 800dc3e:	6912      	ldr	r2, [r2, #16]
 800dc40:	f06f 010d 	mvn.w	r1, #13
 800dc44:	4610      	mov	r0, r2
 800dc46:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dc48:	69f9      	ldr	r1, [r7, #28]
 800dc4a:	488d      	ldr	r0, [pc, #564]	; (800de80 <tcp_input+0x7e0>)
 800dc4c:	f7ff fbb0 	bl	800d3b0 <tcp_pcb_remove>
        tcp_free(pcb);
 800dc50:	69f8      	ldr	r0, [r7, #28]
 800dc52:	f7fd ffe1 	bl	800bc18 <tcp_free>
 800dc56:	e0c1      	b.n	800dddc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dc5c:	4b89      	ldr	r3, [pc, #548]	; (800de84 <tcp_input+0x7e4>)
 800dc5e:	881b      	ldrh	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d01d      	beq.n	800dca0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dc64:	4b87      	ldr	r3, [pc, #540]	; (800de84 <tcp_input+0x7e4>)
 800dc66:	881b      	ldrh	r3, [r3, #0]
 800dc68:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00a      	beq.n	800dc8a <tcp_input+0x5ea>
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc7a:	69fa      	ldr	r2, [r7, #28]
 800dc7c:	6910      	ldr	r0, [r2, #16]
 800dc7e:	89fa      	ldrh	r2, [r7, #14]
 800dc80:	69f9      	ldr	r1, [r7, #28]
 800dc82:	4798      	blx	r3
 800dc84:	4603      	mov	r3, r0
 800dc86:	74fb      	strb	r3, [r7, #19]
 800dc88:	e001      	b.n	800dc8e <tcp_input+0x5ee>
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dc8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc92:	f113 0f0d 	cmn.w	r3, #13
 800dc96:	f000 8098 	beq.w	800ddca <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dc9a:	4b7a      	ldr	r3, [pc, #488]	; (800de84 <tcp_input+0x7e4>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dca0:	69f8      	ldr	r0, [r7, #28]
 800dca2:	f000 f907 	bl	800deb4 <tcp_input_delayed_close>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	f040 8090 	bne.w	800ddce <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dcae:	4b76      	ldr	r3, [pc, #472]	; (800de88 <tcp_input+0x7e8>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d041      	beq.n	800dd3a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d006      	beq.n	800dccc <tcp_input+0x62c>
 800dcbe:	4b73      	ldr	r3, [pc, #460]	; (800de8c <tcp_input+0x7ec>)
 800dcc0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dcc4:	4972      	ldr	r1, [pc, #456]	; (800de90 <tcp_input+0x7f0>)
 800dcc6:	4873      	ldr	r0, [pc, #460]	; (800de94 <tcp_input+0x7f4>)
 800dcc8:	f00a fbfa 	bl	80184c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	8b5b      	ldrh	r3, [r3, #26]
 800dcd0:	f003 0310 	and.w	r3, r3, #16
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d008      	beq.n	800dcea <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800dcd8:	4b6b      	ldr	r3, [pc, #428]	; (800de88 <tcp_input+0x7e8>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7fd fcdf 	bl	800b6a0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800dce2:	69f8      	ldr	r0, [r7, #28]
 800dce4:	f7fe fa80 	bl	800c1e8 <tcp_abort>
            goto aborted;
 800dce8:	e078      	b.n	800dddc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00c      	beq.n	800dd0e <tcp_input+0x66e>
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	6918      	ldr	r0, [r3, #16]
 800dcfe:	4b62      	ldr	r3, [pc, #392]	; (800de88 <tcp_input+0x7e8>)
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	2300      	movs	r3, #0
 800dd04:	69f9      	ldr	r1, [r7, #28]
 800dd06:	47a0      	blx	r4
 800dd08:	4603      	mov	r3, r0
 800dd0a:	74fb      	strb	r3, [r7, #19]
 800dd0c:	e008      	b.n	800dd20 <tcp_input+0x680>
 800dd0e:	4b5e      	ldr	r3, [pc, #376]	; (800de88 <tcp_input+0x7e8>)
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	2300      	movs	r3, #0
 800dd14:	69f9      	ldr	r1, [r7, #28]
 800dd16:	2000      	movs	r0, #0
 800dd18:	f7ff f8f4 	bl	800cf04 <tcp_recv_null>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800dd20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd24:	f113 0f0d 	cmn.w	r3, #13
 800dd28:	d053      	beq.n	800ddd2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dd2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d003      	beq.n	800dd3a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800dd32:	4b55      	ldr	r3, [pc, #340]	; (800de88 <tcp_input+0x7e8>)
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800dd3a:	4b50      	ldr	r3, [pc, #320]	; (800de7c <tcp_input+0x7dc>)
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	f003 0320 	and.w	r3, r3, #32
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d030      	beq.n	800dda8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d009      	beq.n	800dd62 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd52:	7b5a      	ldrb	r2, [r3, #13]
 800dd54:	69fb      	ldr	r3, [r7, #28]
 800dd56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd58:	f042 0220 	orr.w	r2, r2, #32
 800dd5c:	b2d2      	uxtb	r2, r2
 800dd5e:	735a      	strb	r2, [r3, #13]
 800dd60:	e022      	b.n	800dda8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dd62:	69fb      	ldr	r3, [r7, #28]
 800dd64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd66:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dd6a:	d005      	beq.n	800dd78 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd70:	3301      	adds	r3, #1
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00b      	beq.n	800dd9a <tcp_input+0x6fa>
 800dd82:	69fb      	ldr	r3, [r7, #28]
 800dd84:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	6918      	ldr	r0, [r3, #16]
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	2200      	movs	r2, #0
 800dd90:	69f9      	ldr	r1, [r7, #28]
 800dd92:	47a0      	blx	r4
 800dd94:	4603      	mov	r3, r0
 800dd96:	74fb      	strb	r3, [r7, #19]
 800dd98:	e001      	b.n	800dd9e <tcp_input+0x6fe>
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dd9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dda2:	f113 0f0d 	cmn.w	r3, #13
 800dda6:	d016      	beq.n	800ddd6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dda8:	4b33      	ldr	r3, [pc, #204]	; (800de78 <tcp_input+0x7d8>)
 800ddaa:	2200      	movs	r2, #0
 800ddac:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ddae:	69f8      	ldr	r0, [r7, #28]
 800ddb0:	f000 f880 	bl	800deb4 <tcp_input_delayed_close>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d10f      	bne.n	800ddda <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ddba:	69f8      	ldr	r0, [r7, #28]
 800ddbc:	f002 fab8 	bl	8010330 <tcp_output>
 800ddc0:	e00c      	b.n	800dddc <tcp_input+0x73c>
        goto aborted;
 800ddc2:	bf00      	nop
 800ddc4:	e00a      	b.n	800dddc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ddc6:	bf00      	nop
 800ddc8:	e008      	b.n	800dddc <tcp_input+0x73c>
              goto aborted;
 800ddca:	bf00      	nop
 800ddcc:	e006      	b.n	800dddc <tcp_input+0x73c>
          goto aborted;
 800ddce:	bf00      	nop
 800ddd0:	e004      	b.n	800dddc <tcp_input+0x73c>
            goto aborted;
 800ddd2:	bf00      	nop
 800ddd4:	e002      	b.n	800dddc <tcp_input+0x73c>
              goto aborted;
 800ddd6:	bf00      	nop
 800ddd8:	e000      	b.n	800dddc <tcp_input+0x73c>
          goto aborted;
 800ddda:	bf00      	nop
    tcp_input_pcb = NULL;
 800dddc:	4b26      	ldr	r3, [pc, #152]	; (800de78 <tcp_input+0x7d8>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800dde2:	4b29      	ldr	r3, [pc, #164]	; (800de88 <tcp_input+0x7e8>)
 800dde4:	2200      	movs	r2, #0
 800dde6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800dde8:	4b2b      	ldr	r3, [pc, #172]	; (800de98 <tcp_input+0x7f8>)
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d03f      	beq.n	800de70 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800ddf0:	4b29      	ldr	r3, [pc, #164]	; (800de98 <tcp_input+0x7f8>)
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fd fc53 	bl	800b6a0 <pbuf_free>
      inseg.p = NULL;
 800ddfa:	4b27      	ldr	r3, [pc, #156]	; (800de98 <tcp_input+0x7f8>)
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800de00:	e036      	b.n	800de70 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800de02:	4b26      	ldr	r3, [pc, #152]	; (800de9c <tcp_input+0x7fc>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	899b      	ldrh	r3, [r3, #12]
 800de08:	b29b      	uxth	r3, r3
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7fc f85a 	bl	8009ec4 <lwip_htons>
 800de10:	4603      	mov	r3, r0
 800de12:	b2db      	uxtb	r3, r3
 800de14:	f003 0304 	and.w	r3, r3, #4
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d118      	bne.n	800de4e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de1c:	4b20      	ldr	r3, [pc, #128]	; (800dea0 <tcp_input+0x800>)
 800de1e:	6819      	ldr	r1, [r3, #0]
 800de20:	4b20      	ldr	r3, [pc, #128]	; (800dea4 <tcp_input+0x804>)
 800de22:	881b      	ldrh	r3, [r3, #0]
 800de24:	461a      	mov	r2, r3
 800de26:	4b20      	ldr	r3, [pc, #128]	; (800dea8 <tcp_input+0x808>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de2c:	4b1b      	ldr	r3, [pc, #108]	; (800de9c <tcp_input+0x7fc>)
 800de2e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de30:	885b      	ldrh	r3, [r3, #2]
 800de32:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de34:	4a19      	ldr	r2, [pc, #100]	; (800de9c <tcp_input+0x7fc>)
 800de36:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de38:	8812      	ldrh	r2, [r2, #0]
 800de3a:	b292      	uxth	r2, r2
 800de3c:	9202      	str	r2, [sp, #8]
 800de3e:	9301      	str	r3, [sp, #4]
 800de40:	4b1a      	ldr	r3, [pc, #104]	; (800deac <tcp_input+0x80c>)
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	4b1a      	ldr	r3, [pc, #104]	; (800deb0 <tcp_input+0x810>)
 800de46:	4602      	mov	r2, r0
 800de48:	2000      	movs	r0, #0
 800de4a:	f003 f825 	bl	8010e98 <tcp_rst>
    pbuf_free(p);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7fd fc26 	bl	800b6a0 <pbuf_free>
  return;
 800de54:	e00c      	b.n	800de70 <tcp_input+0x7d0>
    goto dropped;
 800de56:	bf00      	nop
 800de58:	e006      	b.n	800de68 <tcp_input+0x7c8>
    goto dropped;
 800de5a:	bf00      	nop
 800de5c:	e004      	b.n	800de68 <tcp_input+0x7c8>
    goto dropped;
 800de5e:	bf00      	nop
 800de60:	e002      	b.n	800de68 <tcp_input+0x7c8>
      goto dropped;
 800de62:	bf00      	nop
 800de64:	e000      	b.n	800de68 <tcp_input+0x7c8>
      goto dropped;
 800de66:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7fd fc19 	bl	800b6a0 <pbuf_free>
 800de6e:	e000      	b.n	800de72 <tcp_input+0x7d2>
  return;
 800de70:	bf00      	nop
}
 800de72:	3724      	adds	r7, #36	; 0x24
 800de74:	46bd      	mov	sp, r7
 800de76:	bd90      	pop	{r4, r7, pc}
 800de78:	2400ee54 	.word	0x2400ee54
 800de7c:	2400b6e5 	.word	0x2400b6e5
 800de80:	2400ee40 	.word	0x2400ee40
 800de84:	2400b6e0 	.word	0x2400b6e0
 800de88:	2400b6e8 	.word	0x2400b6e8
 800de8c:	0801cee0 	.word	0x0801cee0
 800de90:	0801d094 	.word	0x0801d094
 800de94:	0801cf2c 	.word	0x0801cf2c
 800de98:	2400b6b8 	.word	0x2400b6b8
 800de9c:	2400b6c8 	.word	0x2400b6c8
 800dea0:	2400b6dc 	.word	0x2400b6dc
 800dea4:	2400b6e2 	.word	0x2400b6e2
 800dea8:	2400b6d8 	.word	0x2400b6d8
 800deac:	2400bdf0 	.word	0x2400bdf0
 800deb0:	2400bdf4 	.word	0x2400bdf4

0800deb4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <tcp_input_delayed_close+0x1c>
 800dec2:	4b17      	ldr	r3, [pc, #92]	; (800df20 <tcp_input_delayed_close+0x6c>)
 800dec4:	f240 225a 	movw	r2, #602	; 0x25a
 800dec8:	4916      	ldr	r1, [pc, #88]	; (800df24 <tcp_input_delayed_close+0x70>)
 800deca:	4817      	ldr	r0, [pc, #92]	; (800df28 <tcp_input_delayed_close+0x74>)
 800decc:	f00a faf8 	bl	80184c0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ded0:	4b16      	ldr	r3, [pc, #88]	; (800df2c <tcp_input_delayed_close+0x78>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	f003 0310 	and.w	r3, r3, #16
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d01c      	beq.n	800df16 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	8b5b      	ldrh	r3, [r3, #26]
 800dee0:	f003 0310 	and.w	r3, r3, #16
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10d      	bne.n	800df04 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800deee:	2b00      	cmp	r3, #0
 800def0:	d008      	beq.n	800df04 <tcp_input_delayed_close+0x50>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	6912      	ldr	r2, [r2, #16]
 800defc:	f06f 010e 	mvn.w	r1, #14
 800df00:	4610      	mov	r0, r2
 800df02:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800df04:	6879      	ldr	r1, [r7, #4]
 800df06:	480a      	ldr	r0, [pc, #40]	; (800df30 <tcp_input_delayed_close+0x7c>)
 800df08:	f7ff fa52 	bl	800d3b0 <tcp_pcb_remove>
    tcp_free(pcb);
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f7fd fe83 	bl	800bc18 <tcp_free>
    return 1;
 800df12:	2301      	movs	r3, #1
 800df14:	e000      	b.n	800df18 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800df16:	2300      	movs	r3, #0
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	0801cee0 	.word	0x0801cee0
 800df24:	0801d0b0 	.word	0x0801d0b0
 800df28:	0801cf2c 	.word	0x0801cf2c
 800df2c:	2400b6e5 	.word	0x2400b6e5
 800df30:	2400ee40 	.word	0x2400ee40

0800df34 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800df34:	b590      	push	{r4, r7, lr}
 800df36:	b08b      	sub	sp, #44	; 0x2c
 800df38:	af04      	add	r7, sp, #16
 800df3a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800df3c:	4b6f      	ldr	r3, [pc, #444]	; (800e0fc <tcp_listen_input+0x1c8>)
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	f003 0304 	and.w	r3, r3, #4
 800df44:	2b00      	cmp	r3, #0
 800df46:	f040 80d2 	bne.w	800e0ee <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d106      	bne.n	800df5e <tcp_listen_input+0x2a>
 800df50:	4b6b      	ldr	r3, [pc, #428]	; (800e100 <tcp_listen_input+0x1cc>)
 800df52:	f240 2281 	movw	r2, #641	; 0x281
 800df56:	496b      	ldr	r1, [pc, #428]	; (800e104 <tcp_listen_input+0x1d0>)
 800df58:	486b      	ldr	r0, [pc, #428]	; (800e108 <tcp_listen_input+0x1d4>)
 800df5a:	f00a fab1 	bl	80184c0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800df5e:	4b67      	ldr	r3, [pc, #412]	; (800e0fc <tcp_listen_input+0x1c8>)
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	f003 0310 	and.w	r3, r3, #16
 800df66:	2b00      	cmp	r3, #0
 800df68:	d019      	beq.n	800df9e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df6a:	4b68      	ldr	r3, [pc, #416]	; (800e10c <tcp_listen_input+0x1d8>)
 800df6c:	6819      	ldr	r1, [r3, #0]
 800df6e:	4b68      	ldr	r3, [pc, #416]	; (800e110 <tcp_listen_input+0x1dc>)
 800df70:	881b      	ldrh	r3, [r3, #0]
 800df72:	461a      	mov	r2, r3
 800df74:	4b67      	ldr	r3, [pc, #412]	; (800e114 <tcp_listen_input+0x1e0>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df7a:	4b67      	ldr	r3, [pc, #412]	; (800e118 <tcp_listen_input+0x1e4>)
 800df7c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df7e:	885b      	ldrh	r3, [r3, #2]
 800df80:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df82:	4a65      	ldr	r2, [pc, #404]	; (800e118 <tcp_listen_input+0x1e4>)
 800df84:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df86:	8812      	ldrh	r2, [r2, #0]
 800df88:	b292      	uxth	r2, r2
 800df8a:	9202      	str	r2, [sp, #8]
 800df8c:	9301      	str	r3, [sp, #4]
 800df8e:	4b63      	ldr	r3, [pc, #396]	; (800e11c <tcp_listen_input+0x1e8>)
 800df90:	9300      	str	r3, [sp, #0]
 800df92:	4b63      	ldr	r3, [pc, #396]	; (800e120 <tcp_listen_input+0x1ec>)
 800df94:	4602      	mov	r2, r0
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f002 ff7e 	bl	8010e98 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800df9c:	e0a9      	b.n	800e0f2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800df9e:	4b57      	ldr	r3, [pc, #348]	; (800e0fc <tcp_listen_input+0x1c8>)
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	f003 0302 	and.w	r3, r3, #2
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	f000 80a3 	beq.w	800e0f2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	7d5b      	ldrb	r3, [r3, #21]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7ff f8cb 	bl	800d14c <tcp_alloc>
 800dfb6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d111      	bne.n	800dfe2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	699b      	ldr	r3, [r3, #24]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d00a      	beq.n	800dfdc <tcp_listen_input+0xa8>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	699b      	ldr	r3, [r3, #24]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	6910      	ldr	r0, [r2, #16]
 800dfce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	4798      	blx	r3
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	73bb      	strb	r3, [r7, #14]
      return;
 800dfda:	e08b      	b.n	800e0f4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dfdc:	23f0      	movs	r3, #240	; 0xf0
 800dfde:	73bb      	strb	r3, [r7, #14]
      return;
 800dfe0:	e088      	b.n	800e0f4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800dfe2:	4b50      	ldr	r3, [pc, #320]	; (800e124 <tcp_listen_input+0x1f0>)
 800dfe4:	695a      	ldr	r2, [r3, #20]
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800dfea:	4b4e      	ldr	r3, [pc, #312]	; (800e124 <tcp_listen_input+0x1f0>)
 800dfec:	691a      	ldr	r2, [r3, #16]
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	8ada      	ldrh	r2, [r3, #22]
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800dffa:	4b47      	ldr	r3, [pc, #284]	; (800e118 <tcp_listen_input+0x1e4>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	881b      	ldrh	r3, [r3, #0]
 800e000:	b29a      	uxth	r2, r3
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	2203      	movs	r2, #3
 800e00a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e00c:	4b41      	ldr	r3, [pc, #260]	; (800e114 <tcp_listen_input+0x1e0>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	1c5a      	adds	r2, r3, #1
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e01e:	6978      	ldr	r0, [r7, #20]
 800e020:	f7ff fa5a 	bl	800d4d8 <tcp_next_iss>
 800e024:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	693a      	ldr	r2, [r7, #16]
 800e02a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	693a      	ldr	r2, [r7, #16]
 800e030:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	693a      	ldr	r2, [r7, #16]
 800e036:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	693a      	ldr	r2, [r7, #16]
 800e03c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e03e:	4b35      	ldr	r3, [pc, #212]	; (800e114 <tcp_listen_input+0x1e0>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	1e5a      	subs	r2, r3, #1
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	691a      	ldr	r2, [r3, #16]
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	7a5b      	ldrb	r3, [r3, #9]
 800e05a:	f003 030c 	and.w	r3, r3, #12
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	7a1a      	ldrb	r2, [r3, #8]
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e06c:	4b2e      	ldr	r3, [pc, #184]	; (800e128 <tcp_listen_input+0x1f4>)
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	60da      	str	r2, [r3, #12]
 800e074:	4a2c      	ldr	r2, [pc, #176]	; (800e128 <tcp_listen_input+0x1f4>)
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	6013      	str	r3, [r2, #0]
 800e07a:	f003 f8cf 	bl	801121c <tcp_timer_needed>
 800e07e:	4b2b      	ldr	r3, [pc, #172]	; (800e12c <tcp_listen_input+0x1f8>)
 800e080:	2201      	movs	r2, #1
 800e082:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e084:	6978      	ldr	r0, [r7, #20]
 800e086:	f001 fd8d 	bl	800fba4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e08a:	4b23      	ldr	r3, [pc, #140]	; (800e118 <tcp_listen_input+0x1e4>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	89db      	ldrh	r3, [r3, #14]
 800e090:	b29a      	uxth	r2, r3
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	3304      	adds	r3, #4
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f005 f82d 	bl	801310c <ip4_route>
 800e0b2:	4601      	mov	r1, r0
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	f7ff fa32 	bl	800d524 <tcp_eff_send_mss_netif>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e0c8:	2112      	movs	r1, #18
 800e0ca:	6978      	ldr	r0, [r7, #20]
 800e0cc:	f002 f842 	bl	8010154 <tcp_enqueue_flags>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e0d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d004      	beq.n	800e0e6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e0dc:	2100      	movs	r1, #0
 800e0de:	6978      	ldr	r0, [r7, #20]
 800e0e0:	f7fd ffc4 	bl	800c06c <tcp_abandon>
      return;
 800e0e4:	e006      	b.n	800e0f4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e0e6:	6978      	ldr	r0, [r7, #20]
 800e0e8:	f002 f922 	bl	8010330 <tcp_output>
  return;
 800e0ec:	e001      	b.n	800e0f2 <tcp_listen_input+0x1be>
    return;
 800e0ee:	bf00      	nop
 800e0f0:	e000      	b.n	800e0f4 <tcp_listen_input+0x1c0>
  return;
 800e0f2:	bf00      	nop
}
 800e0f4:	371c      	adds	r7, #28
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd90      	pop	{r4, r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	2400b6e4 	.word	0x2400b6e4
 800e100:	0801cee0 	.word	0x0801cee0
 800e104:	0801d0d8 	.word	0x0801d0d8
 800e108:	0801cf2c 	.word	0x0801cf2c
 800e10c:	2400b6dc 	.word	0x2400b6dc
 800e110:	2400b6e2 	.word	0x2400b6e2
 800e114:	2400b6d8 	.word	0x2400b6d8
 800e118:	2400b6c8 	.word	0x2400b6c8
 800e11c:	2400bdf0 	.word	0x2400bdf0
 800e120:	2400bdf4 	.word	0x2400bdf4
 800e124:	2400bde0 	.word	0x2400bde0
 800e128:	2400ee40 	.word	0x2400ee40
 800e12c:	2400ee3c 	.word	0x2400ee3c

0800e130 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af04      	add	r7, sp, #16
 800e136:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e138:	4b2f      	ldr	r3, [pc, #188]	; (800e1f8 <tcp_timewait_input+0xc8>)
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	f003 0304 	and.w	r3, r3, #4
 800e140:	2b00      	cmp	r3, #0
 800e142:	d153      	bne.n	800e1ec <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d106      	bne.n	800e158 <tcp_timewait_input+0x28>
 800e14a:	4b2c      	ldr	r3, [pc, #176]	; (800e1fc <tcp_timewait_input+0xcc>)
 800e14c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e150:	492b      	ldr	r1, [pc, #172]	; (800e200 <tcp_timewait_input+0xd0>)
 800e152:	482c      	ldr	r0, [pc, #176]	; (800e204 <tcp_timewait_input+0xd4>)
 800e154:	f00a f9b4 	bl	80184c0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e158:	4b27      	ldr	r3, [pc, #156]	; (800e1f8 <tcp_timewait_input+0xc8>)
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	f003 0302 	and.w	r3, r3, #2
 800e160:	2b00      	cmp	r3, #0
 800e162:	d02a      	beq.n	800e1ba <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e164:	4b28      	ldr	r3, [pc, #160]	; (800e208 <tcp_timewait_input+0xd8>)
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e16c:	1ad3      	subs	r3, r2, r3
 800e16e:	2b00      	cmp	r3, #0
 800e170:	db2d      	blt.n	800e1ce <tcp_timewait_input+0x9e>
 800e172:	4b25      	ldr	r3, [pc, #148]	; (800e208 <tcp_timewait_input+0xd8>)
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17a:	6879      	ldr	r1, [r7, #4]
 800e17c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e17e:	440b      	add	r3, r1
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	2b00      	cmp	r3, #0
 800e184:	dc23      	bgt.n	800e1ce <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e186:	4b21      	ldr	r3, [pc, #132]	; (800e20c <tcp_timewait_input+0xdc>)
 800e188:	6819      	ldr	r1, [r3, #0]
 800e18a:	4b21      	ldr	r3, [pc, #132]	; (800e210 <tcp_timewait_input+0xe0>)
 800e18c:	881b      	ldrh	r3, [r3, #0]
 800e18e:	461a      	mov	r2, r3
 800e190:	4b1d      	ldr	r3, [pc, #116]	; (800e208 <tcp_timewait_input+0xd8>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e196:	4b1f      	ldr	r3, [pc, #124]	; (800e214 <tcp_timewait_input+0xe4>)
 800e198:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e19a:	885b      	ldrh	r3, [r3, #2]
 800e19c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e19e:	4a1d      	ldr	r2, [pc, #116]	; (800e214 <tcp_timewait_input+0xe4>)
 800e1a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1a2:	8812      	ldrh	r2, [r2, #0]
 800e1a4:	b292      	uxth	r2, r2
 800e1a6:	9202      	str	r2, [sp, #8]
 800e1a8:	9301      	str	r3, [sp, #4]
 800e1aa:	4b1b      	ldr	r3, [pc, #108]	; (800e218 <tcp_timewait_input+0xe8>)
 800e1ac:	9300      	str	r3, [sp, #0]
 800e1ae:	4b1b      	ldr	r3, [pc, #108]	; (800e21c <tcp_timewait_input+0xec>)
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f002 fe70 	bl	8010e98 <tcp_rst>
      return;
 800e1b8:	e01b      	b.n	800e1f2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e1ba:	4b0f      	ldr	r3, [pc, #60]	; (800e1f8 <tcp_timewait_input+0xc8>)
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	f003 0301 	and.w	r3, r3, #1
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d003      	beq.n	800e1ce <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e1c6:	4b16      	ldr	r3, [pc, #88]	; (800e220 <tcp_timewait_input+0xf0>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e1ce:	4b10      	ldr	r3, [pc, #64]	; (800e210 <tcp_timewait_input+0xe0>)
 800e1d0:	881b      	ldrh	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00c      	beq.n	800e1f0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	8b5b      	ldrh	r3, [r3, #26]
 800e1da:	f043 0302 	orr.w	r3, r3, #2
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f002 f8a3 	bl	8010330 <tcp_output>
  }
  return;
 800e1ea:	e001      	b.n	800e1f0 <tcp_timewait_input+0xc0>
    return;
 800e1ec:	bf00      	nop
 800e1ee:	e000      	b.n	800e1f2 <tcp_timewait_input+0xc2>
  return;
 800e1f0:	bf00      	nop
}
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	2400b6e4 	.word	0x2400b6e4
 800e1fc:	0801cee0 	.word	0x0801cee0
 800e200:	0801d0f8 	.word	0x0801d0f8
 800e204:	0801cf2c 	.word	0x0801cf2c
 800e208:	2400b6d8 	.word	0x2400b6d8
 800e20c:	2400b6dc 	.word	0x2400b6dc
 800e210:	2400b6e2 	.word	0x2400b6e2
 800e214:	2400b6c8 	.word	0x2400b6c8
 800e218:	2400bdf0 	.word	0x2400bdf0
 800e21c:	2400bdf4 	.word	0x2400bdf4
 800e220:	2400ee44 	.word	0x2400ee44

0800e224 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e224:	b590      	push	{r4, r7, lr}
 800e226:	b08d      	sub	sp, #52	; 0x34
 800e228:	af04      	add	r7, sp, #16
 800e22a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e230:	2300      	movs	r3, #0
 800e232:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d106      	bne.n	800e248 <tcp_process+0x24>
 800e23a:	4ba5      	ldr	r3, [pc, #660]	; (800e4d0 <tcp_process+0x2ac>)
 800e23c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e240:	49a4      	ldr	r1, [pc, #656]	; (800e4d4 <tcp_process+0x2b0>)
 800e242:	48a5      	ldr	r0, [pc, #660]	; (800e4d8 <tcp_process+0x2b4>)
 800e244:	f00a f93c 	bl	80184c0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e248:	4ba4      	ldr	r3, [pc, #656]	; (800e4dc <tcp_process+0x2b8>)
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	f003 0304 	and.w	r3, r3, #4
 800e250:	2b00      	cmp	r3, #0
 800e252:	d04e      	beq.n	800e2f2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	7d1b      	ldrb	r3, [r3, #20]
 800e258:	2b02      	cmp	r3, #2
 800e25a:	d108      	bne.n	800e26e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e260:	4b9f      	ldr	r3, [pc, #636]	; (800e4e0 <tcp_process+0x2bc>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	429a      	cmp	r2, r3
 800e266:	d123      	bne.n	800e2b0 <tcp_process+0x8c>
        acceptable = 1;
 800e268:	2301      	movs	r3, #1
 800e26a:	76fb      	strb	r3, [r7, #27]
 800e26c:	e020      	b.n	800e2b0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e272:	4b9c      	ldr	r3, [pc, #624]	; (800e4e4 <tcp_process+0x2c0>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	429a      	cmp	r2, r3
 800e278:	d102      	bne.n	800e280 <tcp_process+0x5c>
        acceptable = 1;
 800e27a:	2301      	movs	r3, #1
 800e27c:	76fb      	strb	r3, [r7, #27]
 800e27e:	e017      	b.n	800e2b0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e280:	4b98      	ldr	r3, [pc, #608]	; (800e4e4 <tcp_process+0x2c0>)
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e288:	1ad3      	subs	r3, r2, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	db10      	blt.n	800e2b0 <tcp_process+0x8c>
 800e28e:	4b95      	ldr	r3, [pc, #596]	; (800e4e4 <tcp_process+0x2c0>)
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e296:	6879      	ldr	r1, [r7, #4]
 800e298:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e29a:	440b      	add	r3, r1
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	dc06      	bgt.n	800e2b0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	8b5b      	ldrh	r3, [r3, #26]
 800e2a6:	f043 0302 	orr.w	r3, r3, #2
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e2b0:	7efb      	ldrb	r3, [r7, #27]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d01b      	beq.n	800e2ee <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	7d1b      	ldrb	r3, [r3, #20]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d106      	bne.n	800e2cc <tcp_process+0xa8>
 800e2be:	4b84      	ldr	r3, [pc, #528]	; (800e4d0 <tcp_process+0x2ac>)
 800e2c0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e2c4:	4988      	ldr	r1, [pc, #544]	; (800e4e8 <tcp_process+0x2c4>)
 800e2c6:	4884      	ldr	r0, [pc, #528]	; (800e4d8 <tcp_process+0x2b4>)
 800e2c8:	f00a f8fa 	bl	80184c0 <iprintf>
      recv_flags |= TF_RESET;
 800e2cc:	4b87      	ldr	r3, [pc, #540]	; (800e4ec <tcp_process+0x2c8>)
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	f043 0308 	orr.w	r3, r3, #8
 800e2d4:	b2da      	uxtb	r2, r3
 800e2d6:	4b85      	ldr	r3, [pc, #532]	; (800e4ec <tcp_process+0x2c8>)
 800e2d8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	8b5b      	ldrh	r3, [r3, #26]
 800e2de:	f023 0301 	bic.w	r3, r3, #1
 800e2e2:	b29a      	uxth	r2, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e2e8:	f06f 030d 	mvn.w	r3, #13
 800e2ec:	e37a      	b.n	800e9e4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	e378      	b.n	800e9e4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e2f2:	4b7a      	ldr	r3, [pc, #488]	; (800e4dc <tcp_process+0x2b8>)
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	f003 0302 	and.w	r3, r3, #2
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d010      	beq.n	800e320 <tcp_process+0xfc>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	7d1b      	ldrb	r3, [r3, #20]
 800e302:	2b02      	cmp	r3, #2
 800e304:	d00c      	beq.n	800e320 <tcp_process+0xfc>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	7d1b      	ldrb	r3, [r3, #20]
 800e30a:	2b03      	cmp	r3, #3
 800e30c:	d008      	beq.n	800e320 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	8b5b      	ldrh	r3, [r3, #26]
 800e312:	f043 0302 	orr.w	r3, r3, #2
 800e316:	b29a      	uxth	r2, r3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e31c:	2300      	movs	r3, #0
 800e31e:	e361      	b.n	800e9e4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	8b5b      	ldrh	r3, [r3, #26]
 800e324:	f003 0310 	and.w	r3, r3, #16
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d103      	bne.n	800e334 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e32c:	4b70      	ldr	r3, [pc, #448]	; (800e4f0 <tcp_process+0x2cc>)
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2200      	movs	r2, #0
 800e340:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f001 fc2d 	bl	800fba4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	7d1b      	ldrb	r3, [r3, #20]
 800e34e:	3b02      	subs	r3, #2
 800e350:	2b07      	cmp	r3, #7
 800e352:	f200 8337 	bhi.w	800e9c4 <tcp_process+0x7a0>
 800e356:	a201      	add	r2, pc, #4	; (adr r2, 800e35c <tcp_process+0x138>)
 800e358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e35c:	0800e37d 	.word	0x0800e37d
 800e360:	0800e5ad 	.word	0x0800e5ad
 800e364:	0800e725 	.word	0x0800e725
 800e368:	0800e74f 	.word	0x0800e74f
 800e36c:	0800e873 	.word	0x0800e873
 800e370:	0800e725 	.word	0x0800e725
 800e374:	0800e8ff 	.word	0x0800e8ff
 800e378:	0800e98f 	.word	0x0800e98f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e37c:	4b57      	ldr	r3, [pc, #348]	; (800e4dc <tcp_process+0x2b8>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	f003 0310 	and.w	r3, r3, #16
 800e384:	2b00      	cmp	r3, #0
 800e386:	f000 80e4 	beq.w	800e552 <tcp_process+0x32e>
 800e38a:	4b54      	ldr	r3, [pc, #336]	; (800e4dc <tcp_process+0x2b8>)
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	f003 0302 	and.w	r3, r3, #2
 800e392:	2b00      	cmp	r3, #0
 800e394:	f000 80dd 	beq.w	800e552 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e39c:	1c5a      	adds	r2, r3, #1
 800e39e:	4b50      	ldr	r3, [pc, #320]	; (800e4e0 <tcp_process+0x2bc>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	f040 80d5 	bne.w	800e552 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e3a8:	4b4e      	ldr	r3, [pc, #312]	; (800e4e4 <tcp_process+0x2c0>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	1c5a      	adds	r2, r3, #1
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e3ba:	4b49      	ldr	r3, [pc, #292]	; (800e4e0 <tcp_process+0x2bc>)
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e3c2:	4b4c      	ldr	r3, [pc, #304]	; (800e4f4 <tcp_process+0x2d0>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	89db      	ldrh	r3, [r3, #14]
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e3dc:	4b41      	ldr	r3, [pc, #260]	; (800e4e4 <tcp_process+0x2c0>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	1e5a      	subs	r2, r3, #1
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2204      	movs	r2, #4
 800e3ea:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	3304      	adds	r3, #4
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f004 fe89 	bl	801310c <ip4_route>
 800e3fa:	4601      	mov	r1, r0
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	3304      	adds	r3, #4
 800e400:	461a      	mov	r2, r3
 800e402:	4620      	mov	r0, r4
 800e404:	f7ff f88e 	bl	800d524 <tcp_eff_send_mss_netif>
 800e408:	4603      	mov	r3, r0
 800e40a:	461a      	mov	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e414:	009a      	lsls	r2, r3, #2
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e41a:	005b      	lsls	r3, r3, #1
 800e41c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e420:	428b      	cmp	r3, r1
 800e422:	bf38      	it	cc
 800e424:	460b      	movcc	r3, r1
 800e426:	429a      	cmp	r2, r3
 800e428:	d204      	bcs.n	800e434 <tcp_process+0x210>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	b29b      	uxth	r3, r3
 800e432:	e00d      	b.n	800e450 <tcp_process+0x22c>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e438:	005b      	lsls	r3, r3, #1
 800e43a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e43e:	4293      	cmp	r3, r2
 800e440:	d904      	bls.n	800e44c <tcp_process+0x228>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e446:	005b      	lsls	r3, r3, #1
 800e448:	b29b      	uxth	r3, r3
 800e44a:	e001      	b.n	800e450 <tcp_process+0x22c>
 800e44c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d106      	bne.n	800e46e <tcp_process+0x24a>
 800e460:	4b1b      	ldr	r3, [pc, #108]	; (800e4d0 <tcp_process+0x2ac>)
 800e462:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e466:	4924      	ldr	r1, [pc, #144]	; (800e4f8 <tcp_process+0x2d4>)
 800e468:	481b      	ldr	r0, [pc, #108]	; (800e4d8 <tcp_process+0x2b4>)
 800e46a:	f00a f829 	bl	80184c0 <iprintf>
        --pcb->snd_queuelen;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e474:	3b01      	subs	r3, #1
 800e476:	b29a      	uxth	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e482:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e484:	69fb      	ldr	r3, [r7, #28]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d111      	bne.n	800e4ae <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e48e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d106      	bne.n	800e4a4 <tcp_process+0x280>
 800e496:	4b0e      	ldr	r3, [pc, #56]	; (800e4d0 <tcp_process+0x2ac>)
 800e498:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e49c:	4917      	ldr	r1, [pc, #92]	; (800e4fc <tcp_process+0x2d8>)
 800e49e:	480e      	ldr	r0, [pc, #56]	; (800e4d8 <tcp_process+0x2b4>)
 800e4a0:	f00a f80e 	bl	80184c0 <iprintf>
          pcb->unsent = rseg->next;
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	66da      	str	r2, [r3, #108]	; 0x6c
 800e4ac:	e003      	b.n	800e4b6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e4b6:	69f8      	ldr	r0, [r7, #28]
 800e4b8:	f7fe fcdf 	bl	800ce7a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d11d      	bne.n	800e500 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4ca:	861a      	strh	r2, [r3, #48]	; 0x30
 800e4cc:	e01f      	b.n	800e50e <tcp_process+0x2ea>
 800e4ce:	bf00      	nop
 800e4d0:	0801cee0 	.word	0x0801cee0
 800e4d4:	0801d118 	.word	0x0801d118
 800e4d8:	0801cf2c 	.word	0x0801cf2c
 800e4dc:	2400b6e4 	.word	0x2400b6e4
 800e4e0:	2400b6dc 	.word	0x2400b6dc
 800e4e4:	2400b6d8 	.word	0x2400b6d8
 800e4e8:	0801d134 	.word	0x0801d134
 800e4ec:	2400b6e5 	.word	0x2400b6e5
 800e4f0:	2400ee44 	.word	0x2400ee44
 800e4f4:	2400b6c8 	.word	0x2400b6c8
 800e4f8:	0801d154 	.word	0x0801d154
 800e4fc:	0801d16c 	.word	0x0801d16c
        } else {
          pcb->rtime = 0;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00a      	beq.n	800e52e <tcp_process+0x30a>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	6910      	ldr	r0, [r2, #16]
 800e522:	2200      	movs	r2, #0
 800e524:	6879      	ldr	r1, [r7, #4]
 800e526:	4798      	blx	r3
 800e528:	4603      	mov	r3, r0
 800e52a:	76bb      	strb	r3, [r7, #26]
 800e52c:	e001      	b.n	800e532 <tcp_process+0x30e>
 800e52e:	2300      	movs	r3, #0
 800e530:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e532:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e536:	f113 0f0d 	cmn.w	r3, #13
 800e53a:	d102      	bne.n	800e542 <tcp_process+0x31e>
          return ERR_ABRT;
 800e53c:	f06f 030c 	mvn.w	r3, #12
 800e540:	e250      	b.n	800e9e4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	8b5b      	ldrh	r3, [r3, #26]
 800e546:	f043 0302 	orr.w	r3, r3, #2
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e550:	e23a      	b.n	800e9c8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e552:	4b9d      	ldr	r3, [pc, #628]	; (800e7c8 <tcp_process+0x5a4>)
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	f003 0310 	and.w	r3, r3, #16
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f000 8234 	beq.w	800e9c8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e560:	4b9a      	ldr	r3, [pc, #616]	; (800e7cc <tcp_process+0x5a8>)
 800e562:	6819      	ldr	r1, [r3, #0]
 800e564:	4b9a      	ldr	r3, [pc, #616]	; (800e7d0 <tcp_process+0x5ac>)
 800e566:	881b      	ldrh	r3, [r3, #0]
 800e568:	461a      	mov	r2, r3
 800e56a:	4b9a      	ldr	r3, [pc, #616]	; (800e7d4 <tcp_process+0x5b0>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e570:	4b99      	ldr	r3, [pc, #612]	; (800e7d8 <tcp_process+0x5b4>)
 800e572:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e574:	885b      	ldrh	r3, [r3, #2]
 800e576:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e578:	4a97      	ldr	r2, [pc, #604]	; (800e7d8 <tcp_process+0x5b4>)
 800e57a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e57c:	8812      	ldrh	r2, [r2, #0]
 800e57e:	b292      	uxth	r2, r2
 800e580:	9202      	str	r2, [sp, #8]
 800e582:	9301      	str	r3, [sp, #4]
 800e584:	4b95      	ldr	r3, [pc, #596]	; (800e7dc <tcp_process+0x5b8>)
 800e586:	9300      	str	r3, [sp, #0]
 800e588:	4b95      	ldr	r3, [pc, #596]	; (800e7e0 <tcp_process+0x5bc>)
 800e58a:	4602      	mov	r2, r0
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f002 fc83 	bl	8010e98 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e598:	2b05      	cmp	r3, #5
 800e59a:	f200 8215 	bhi.w	800e9c8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f002 fa4d 	bl	8010a44 <tcp_rexmit_rto>
      break;
 800e5aa:	e20d      	b.n	800e9c8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e5ac:	4b86      	ldr	r3, [pc, #536]	; (800e7c8 <tcp_process+0x5a4>)
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	f003 0310 	and.w	r3, r3, #16
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f000 80a1 	beq.w	800e6fc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e5ba:	4b84      	ldr	r3, [pc, #528]	; (800e7cc <tcp_process+0x5a8>)
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	3b01      	subs	r3, #1
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	db7e      	blt.n	800e6c8 <tcp_process+0x4a4>
 800e5ca:	4b80      	ldr	r3, [pc, #512]	; (800e7cc <tcp_process+0x5a8>)
 800e5cc:	681a      	ldr	r2, [r3, #0]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5d2:	1ad3      	subs	r3, r2, r3
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	dc77      	bgt.n	800e6c8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2204      	movs	r2, #4
 800e5dc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d102      	bne.n	800e5ec <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e5e6:	23fa      	movs	r3, #250	; 0xfa
 800e5e8:	76bb      	strb	r3, [r7, #26]
 800e5ea:	e01d      	b.n	800e628 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5f0:	699b      	ldr	r3, [r3, #24]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d106      	bne.n	800e604 <tcp_process+0x3e0>
 800e5f6:	4b7b      	ldr	r3, [pc, #492]	; (800e7e4 <tcp_process+0x5c0>)
 800e5f8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e5fc:	497a      	ldr	r1, [pc, #488]	; (800e7e8 <tcp_process+0x5c4>)
 800e5fe:	487b      	ldr	r0, [pc, #492]	; (800e7ec <tcp_process+0x5c8>)
 800e600:	f009 ff5e 	bl	80184c0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e608:	699b      	ldr	r3, [r3, #24]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d00a      	beq.n	800e624 <tcp_process+0x400>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e612:	699b      	ldr	r3, [r3, #24]
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	6910      	ldr	r0, [r2, #16]
 800e618:	2200      	movs	r2, #0
 800e61a:	6879      	ldr	r1, [r7, #4]
 800e61c:	4798      	blx	r3
 800e61e:	4603      	mov	r3, r0
 800e620:	76bb      	strb	r3, [r7, #26]
 800e622:	e001      	b.n	800e628 <tcp_process+0x404>
 800e624:	23f0      	movs	r3, #240	; 0xf0
 800e626:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e628:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00a      	beq.n	800e646 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e630:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e634:	f113 0f0d 	cmn.w	r3, #13
 800e638:	d002      	beq.n	800e640 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f7fd fdd4 	bl	800c1e8 <tcp_abort>
            }
            return ERR_ABRT;
 800e640:	f06f 030c 	mvn.w	r3, #12
 800e644:	e1ce      	b.n	800e9e4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 fae0 	bl	800ec0c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e64c:	4b68      	ldr	r3, [pc, #416]	; (800e7f0 <tcp_process+0x5cc>)
 800e64e:	881b      	ldrh	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d005      	beq.n	800e660 <tcp_process+0x43c>
            recv_acked--;
 800e654:	4b66      	ldr	r3, [pc, #408]	; (800e7f0 <tcp_process+0x5cc>)
 800e656:	881b      	ldrh	r3, [r3, #0]
 800e658:	3b01      	subs	r3, #1
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	4b64      	ldr	r3, [pc, #400]	; (800e7f0 <tcp_process+0x5cc>)
 800e65e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e664:	009a      	lsls	r2, r3, #2
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e66a:	005b      	lsls	r3, r3, #1
 800e66c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e670:	428b      	cmp	r3, r1
 800e672:	bf38      	it	cc
 800e674:	460b      	movcc	r3, r1
 800e676:	429a      	cmp	r2, r3
 800e678:	d204      	bcs.n	800e684 <tcp_process+0x460>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	b29b      	uxth	r3, r3
 800e682:	e00d      	b.n	800e6a0 <tcp_process+0x47c>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e688:	005b      	lsls	r3, r3, #1
 800e68a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e68e:	4293      	cmp	r3, r2
 800e690:	d904      	bls.n	800e69c <tcp_process+0x478>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e696:	005b      	lsls	r3, r3, #1
 800e698:	b29b      	uxth	r3, r3
 800e69a:	e001      	b.n	800e6a0 <tcp_process+0x47c>
 800e69c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e6a6:	4b53      	ldr	r3, [pc, #332]	; (800e7f4 <tcp_process+0x5d0>)
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	f003 0320 	and.w	r3, r3, #32
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d037      	beq.n	800e722 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	8b5b      	ldrh	r3, [r3, #26]
 800e6b6:	f043 0302 	orr.w	r3, r3, #2
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2207      	movs	r2, #7
 800e6c4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e6c6:	e02c      	b.n	800e722 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6c8:	4b40      	ldr	r3, [pc, #256]	; (800e7cc <tcp_process+0x5a8>)
 800e6ca:	6819      	ldr	r1, [r3, #0]
 800e6cc:	4b40      	ldr	r3, [pc, #256]	; (800e7d0 <tcp_process+0x5ac>)
 800e6ce:	881b      	ldrh	r3, [r3, #0]
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	4b40      	ldr	r3, [pc, #256]	; (800e7d4 <tcp_process+0x5b0>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6d8:	4b3f      	ldr	r3, [pc, #252]	; (800e7d8 <tcp_process+0x5b4>)
 800e6da:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6dc:	885b      	ldrh	r3, [r3, #2]
 800e6de:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6e0:	4a3d      	ldr	r2, [pc, #244]	; (800e7d8 <tcp_process+0x5b4>)
 800e6e2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6e4:	8812      	ldrh	r2, [r2, #0]
 800e6e6:	b292      	uxth	r2, r2
 800e6e8:	9202      	str	r2, [sp, #8]
 800e6ea:	9301      	str	r3, [sp, #4]
 800e6ec:	4b3b      	ldr	r3, [pc, #236]	; (800e7dc <tcp_process+0x5b8>)
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	4b3b      	ldr	r3, [pc, #236]	; (800e7e0 <tcp_process+0x5bc>)
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f002 fbcf 	bl	8010e98 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e6fa:	e167      	b.n	800e9cc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e6fc:	4b32      	ldr	r3, [pc, #200]	; (800e7c8 <tcp_process+0x5a4>)
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	f003 0302 	and.w	r3, r3, #2
 800e704:	2b00      	cmp	r3, #0
 800e706:	f000 8161 	beq.w	800e9cc <tcp_process+0x7a8>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70e:	1e5a      	subs	r2, r3, #1
 800e710:	4b30      	ldr	r3, [pc, #192]	; (800e7d4 <tcp_process+0x5b0>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	429a      	cmp	r2, r3
 800e716:	f040 8159 	bne.w	800e9cc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f002 f9b4 	bl	8010a88 <tcp_rexmit>
      break;
 800e720:	e154      	b.n	800e9cc <tcp_process+0x7a8>
 800e722:	e153      	b.n	800e9cc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 fa71 	bl	800ec0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e72a:	4b32      	ldr	r3, [pc, #200]	; (800e7f4 <tcp_process+0x5d0>)
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	f003 0320 	and.w	r3, r3, #32
 800e732:	2b00      	cmp	r3, #0
 800e734:	f000 814c 	beq.w	800e9d0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	8b5b      	ldrh	r3, [r3, #26]
 800e73c:	f043 0302 	orr.w	r3, r3, #2
 800e740:	b29a      	uxth	r2, r3
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2207      	movs	r2, #7
 800e74a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e74c:	e140      	b.n	800e9d0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 fa5c 	bl	800ec0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e754:	4b27      	ldr	r3, [pc, #156]	; (800e7f4 <tcp_process+0x5d0>)
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	f003 0320 	and.w	r3, r3, #32
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d071      	beq.n	800e844 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e760:	4b19      	ldr	r3, [pc, #100]	; (800e7c8 <tcp_process+0x5a4>)
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	f003 0310 	and.w	r3, r3, #16
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d060      	beq.n	800e82e <tcp_process+0x60a>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e770:	4b16      	ldr	r3, [pc, #88]	; (800e7cc <tcp_process+0x5a8>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	429a      	cmp	r2, r3
 800e776:	d15a      	bne.n	800e82e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d156      	bne.n	800e82e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	8b5b      	ldrh	r3, [r3, #26]
 800e784:	f043 0302 	orr.w	r3, r3, #2
 800e788:	b29a      	uxth	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f7fe fdbe 	bl	800d310 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e794:	4b18      	ldr	r3, [pc, #96]	; (800e7f8 <tcp_process+0x5d4>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d105      	bne.n	800e7aa <tcp_process+0x586>
 800e79e:	4b16      	ldr	r3, [pc, #88]	; (800e7f8 <tcp_process+0x5d4>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	4a14      	ldr	r2, [pc, #80]	; (800e7f8 <tcp_process+0x5d4>)
 800e7a6:	6013      	str	r3, [r2, #0]
 800e7a8:	e02e      	b.n	800e808 <tcp_process+0x5e4>
 800e7aa:	4b13      	ldr	r3, [pc, #76]	; (800e7f8 <tcp_process+0x5d4>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	617b      	str	r3, [r7, #20]
 800e7b0:	e027      	b.n	800e802 <tcp_process+0x5de>
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d11f      	bne.n	800e7fc <tcp_process+0x5d8>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	68da      	ldr	r2, [r3, #12]
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	60da      	str	r2, [r3, #12]
 800e7c4:	e020      	b.n	800e808 <tcp_process+0x5e4>
 800e7c6:	bf00      	nop
 800e7c8:	2400b6e4 	.word	0x2400b6e4
 800e7cc:	2400b6dc 	.word	0x2400b6dc
 800e7d0:	2400b6e2 	.word	0x2400b6e2
 800e7d4:	2400b6d8 	.word	0x2400b6d8
 800e7d8:	2400b6c8 	.word	0x2400b6c8
 800e7dc:	2400bdf0 	.word	0x2400bdf0
 800e7e0:	2400bdf4 	.word	0x2400bdf4
 800e7e4:	0801cee0 	.word	0x0801cee0
 800e7e8:	0801d180 	.word	0x0801d180
 800e7ec:	0801cf2c 	.word	0x0801cf2c
 800e7f0:	2400b6e0 	.word	0x2400b6e0
 800e7f4:	2400b6e5 	.word	0x2400b6e5
 800e7f8:	2400ee40 	.word	0x2400ee40
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	617b      	str	r3, [r7, #20]
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d1d4      	bne.n	800e7b2 <tcp_process+0x58e>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	60da      	str	r2, [r3, #12]
 800e80e:	4b77      	ldr	r3, [pc, #476]	; (800e9ec <tcp_process+0x7c8>)
 800e810:	2201      	movs	r2, #1
 800e812:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	220a      	movs	r2, #10
 800e818:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e81a:	4b75      	ldr	r3, [pc, #468]	; (800e9f0 <tcp_process+0x7cc>)
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	60da      	str	r2, [r3, #12]
 800e822:	4a73      	ldr	r2, [pc, #460]	; (800e9f0 <tcp_process+0x7cc>)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6013      	str	r3, [r2, #0]
 800e828:	f002 fcf8 	bl	801121c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e82c:	e0d2      	b.n	800e9d4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	8b5b      	ldrh	r3, [r3, #26]
 800e832:	f043 0302 	orr.w	r3, r3, #2
 800e836:	b29a      	uxth	r2, r3
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2208      	movs	r2, #8
 800e840:	751a      	strb	r2, [r3, #20]
      break;
 800e842:	e0c7      	b.n	800e9d4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e844:	4b6b      	ldr	r3, [pc, #428]	; (800e9f4 <tcp_process+0x7d0>)
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	f003 0310 	and.w	r3, r3, #16
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f000 80c1 	beq.w	800e9d4 <tcp_process+0x7b0>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e856:	4b68      	ldr	r3, [pc, #416]	; (800e9f8 <tcp_process+0x7d4>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	f040 80ba 	bne.w	800e9d4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e864:	2b00      	cmp	r3, #0
 800e866:	f040 80b5 	bne.w	800e9d4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2206      	movs	r2, #6
 800e86e:	751a      	strb	r2, [r3, #20]
      break;
 800e870:	e0b0      	b.n	800e9d4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 f9ca 	bl	800ec0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e878:	4b60      	ldr	r3, [pc, #384]	; (800e9fc <tcp_process+0x7d8>)
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	f003 0320 	and.w	r3, r3, #32
 800e880:	2b00      	cmp	r3, #0
 800e882:	f000 80a9 	beq.w	800e9d8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	8b5b      	ldrh	r3, [r3, #26]
 800e88a:	f043 0302 	orr.w	r3, r3, #2
 800e88e:	b29a      	uxth	r2, r3
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7fe fd3b 	bl	800d310 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e89a:	4b59      	ldr	r3, [pc, #356]	; (800ea00 <tcp_process+0x7dc>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d105      	bne.n	800e8b0 <tcp_process+0x68c>
 800e8a4:	4b56      	ldr	r3, [pc, #344]	; (800ea00 <tcp_process+0x7dc>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	68db      	ldr	r3, [r3, #12]
 800e8aa:	4a55      	ldr	r2, [pc, #340]	; (800ea00 <tcp_process+0x7dc>)
 800e8ac:	6013      	str	r3, [r2, #0]
 800e8ae:	e013      	b.n	800e8d8 <tcp_process+0x6b4>
 800e8b0:	4b53      	ldr	r3, [pc, #332]	; (800ea00 <tcp_process+0x7dc>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	613b      	str	r3, [r7, #16]
 800e8b6:	e00c      	b.n	800e8d2 <tcp_process+0x6ae>
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d104      	bne.n	800e8cc <tcp_process+0x6a8>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	68da      	ldr	r2, [r3, #12]
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	60da      	str	r2, [r3, #12]
 800e8ca:	e005      	b.n	800e8d8 <tcp_process+0x6b4>
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	68db      	ldr	r3, [r3, #12]
 800e8d0:	613b      	str	r3, [r7, #16]
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d1ef      	bne.n	800e8b8 <tcp_process+0x694>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	60da      	str	r2, [r3, #12]
 800e8de:	4b43      	ldr	r3, [pc, #268]	; (800e9ec <tcp_process+0x7c8>)
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	220a      	movs	r2, #10
 800e8e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e8ea:	4b41      	ldr	r3, [pc, #260]	; (800e9f0 <tcp_process+0x7cc>)
 800e8ec:	681a      	ldr	r2, [r3, #0]
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	60da      	str	r2, [r3, #12]
 800e8f2:	4a3f      	ldr	r2, [pc, #252]	; (800e9f0 <tcp_process+0x7cc>)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6013      	str	r3, [r2, #0]
 800e8f8:	f002 fc90 	bl	801121c <tcp_timer_needed>
      }
      break;
 800e8fc:	e06c      	b.n	800e9d8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f000 f984 	bl	800ec0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e904:	4b3b      	ldr	r3, [pc, #236]	; (800e9f4 <tcp_process+0x7d0>)
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	f003 0310 	and.w	r3, r3, #16
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d065      	beq.n	800e9dc <tcp_process+0x7b8>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e914:	4b38      	ldr	r3, [pc, #224]	; (800e9f8 <tcp_process+0x7d4>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d15f      	bne.n	800e9dc <tcp_process+0x7b8>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e920:	2b00      	cmp	r3, #0
 800e922:	d15b      	bne.n	800e9dc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f7fe fcf3 	bl	800d310 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e92a:	4b35      	ldr	r3, [pc, #212]	; (800ea00 <tcp_process+0x7dc>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	429a      	cmp	r2, r3
 800e932:	d105      	bne.n	800e940 <tcp_process+0x71c>
 800e934:	4b32      	ldr	r3, [pc, #200]	; (800ea00 <tcp_process+0x7dc>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	4a31      	ldr	r2, [pc, #196]	; (800ea00 <tcp_process+0x7dc>)
 800e93c:	6013      	str	r3, [r2, #0]
 800e93e:	e013      	b.n	800e968 <tcp_process+0x744>
 800e940:	4b2f      	ldr	r3, [pc, #188]	; (800ea00 <tcp_process+0x7dc>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	60fb      	str	r3, [r7, #12]
 800e946:	e00c      	b.n	800e962 <tcp_process+0x73e>
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d104      	bne.n	800e95c <tcp_process+0x738>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	68da      	ldr	r2, [r3, #12]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	60da      	str	r2, [r3, #12]
 800e95a:	e005      	b.n	800e968 <tcp_process+0x744>
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	60fb      	str	r3, [r7, #12]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1ef      	bne.n	800e948 <tcp_process+0x724>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	60da      	str	r2, [r3, #12]
 800e96e:	4b1f      	ldr	r3, [pc, #124]	; (800e9ec <tcp_process+0x7c8>)
 800e970:	2201      	movs	r2, #1
 800e972:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	220a      	movs	r2, #10
 800e978:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e97a:	4b1d      	ldr	r3, [pc, #116]	; (800e9f0 <tcp_process+0x7cc>)
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	60da      	str	r2, [r3, #12]
 800e982:	4a1b      	ldr	r2, [pc, #108]	; (800e9f0 <tcp_process+0x7cc>)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6013      	str	r3, [r2, #0]
 800e988:	f002 fc48 	bl	801121c <tcp_timer_needed>
      }
      break;
 800e98c:	e026      	b.n	800e9dc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 f93c 	bl	800ec0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e994:	4b17      	ldr	r3, [pc, #92]	; (800e9f4 <tcp_process+0x7d0>)
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	f003 0310 	and.w	r3, r3, #16
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d01f      	beq.n	800e9e0 <tcp_process+0x7bc>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9a4:	4b14      	ldr	r3, [pc, #80]	; (800e9f8 <tcp_process+0x7d4>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d119      	bne.n	800e9e0 <tcp_process+0x7bc>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d115      	bne.n	800e9e0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e9b4:	4b11      	ldr	r3, [pc, #68]	; (800e9fc <tcp_process+0x7d8>)
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	f043 0310 	orr.w	r3, r3, #16
 800e9bc:	b2da      	uxtb	r2, r3
 800e9be:	4b0f      	ldr	r3, [pc, #60]	; (800e9fc <tcp_process+0x7d8>)
 800e9c0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e9c2:	e00d      	b.n	800e9e0 <tcp_process+0x7bc>
    default:
      break;
 800e9c4:	bf00      	nop
 800e9c6:	e00c      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9c8:	bf00      	nop
 800e9ca:	e00a      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9cc:	bf00      	nop
 800e9ce:	e008      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9d0:	bf00      	nop
 800e9d2:	e006      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9d4:	bf00      	nop
 800e9d6:	e004      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9d8:	bf00      	nop
 800e9da:	e002      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9dc:	bf00      	nop
 800e9de:	e000      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9e0:	bf00      	nop
  }
  return ERR_OK;
 800e9e2:	2300      	movs	r3, #0
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3724      	adds	r7, #36	; 0x24
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd90      	pop	{r4, r7, pc}
 800e9ec:	2400ee3c 	.word	0x2400ee3c
 800e9f0:	2400ee50 	.word	0x2400ee50
 800e9f4:	2400b6e4 	.word	0x2400b6e4
 800e9f8:	2400b6dc 	.word	0x2400b6dc
 800e9fc:	2400b6e5 	.word	0x2400b6e5
 800ea00:	2400ee40 	.word	0x2400ee40

0800ea04 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ea04:	b590      	push	{r4, r7, lr}
 800ea06:	b085      	sub	sp, #20
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d106      	bne.n	800ea22 <tcp_oos_insert_segment+0x1e>
 800ea14:	4b3b      	ldr	r3, [pc, #236]	; (800eb04 <tcp_oos_insert_segment+0x100>)
 800ea16:	f240 421f 	movw	r2, #1055	; 0x41f
 800ea1a:	493b      	ldr	r1, [pc, #236]	; (800eb08 <tcp_oos_insert_segment+0x104>)
 800ea1c:	483b      	ldr	r0, [pc, #236]	; (800eb0c <tcp_oos_insert_segment+0x108>)
 800ea1e:	f009 fd4f 	bl	80184c0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	899b      	ldrh	r3, [r3, #12]
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fb fa4a 	bl	8009ec4 <lwip_htons>
 800ea30:	4603      	mov	r3, r0
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	f003 0301 	and.w	r3, r3, #1
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d028      	beq.n	800ea8e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ea3c:	6838      	ldr	r0, [r7, #0]
 800ea3e:	f7fe fa07 	bl	800ce50 <tcp_segs_free>
    next = NULL;
 800ea42:	2300      	movs	r3, #0
 800ea44:	603b      	str	r3, [r7, #0]
 800ea46:	e056      	b.n	800eaf6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	899b      	ldrh	r3, [r3, #12]
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7fb fa37 	bl	8009ec4 <lwip_htons>
 800ea56:	4603      	mov	r3, r0
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	f003 0301 	and.w	r3, r3, #1
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00d      	beq.n	800ea7e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	899b      	ldrh	r3, [r3, #12]
 800ea68:	b29c      	uxth	r4, r3
 800ea6a:	2001      	movs	r0, #1
 800ea6c:	f7fb fa2a 	bl	8009ec4 <lwip_htons>
 800ea70:	4603      	mov	r3, r0
 800ea72:	461a      	mov	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	68db      	ldr	r3, [r3, #12]
 800ea78:	4322      	orrs	r2, r4
 800ea7a:	b292      	uxth	r2, r2
 800ea7c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f7fe f9f6 	bl	800ce7a <tcp_seg_free>
    while (next &&
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00e      	beq.n	800eab2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	891b      	ldrh	r3, [r3, #8]
 800ea98:	461a      	mov	r2, r3
 800ea9a:	4b1d      	ldr	r3, [pc, #116]	; (800eb10 <tcp_oos_insert_segment+0x10c>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	441a      	add	r2, r3
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	6839      	ldr	r1, [r7, #0]
 800eaa8:	8909      	ldrh	r1, [r1, #8]
 800eaaa:	440b      	add	r3, r1
 800eaac:	1ad3      	subs	r3, r2, r3
    while (next &&
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	daca      	bge.n	800ea48 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d01e      	beq.n	800eaf6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	891b      	ldrh	r3, [r3, #8]
 800eabc:	461a      	mov	r2, r3
 800eabe:	4b14      	ldr	r3, [pc, #80]	; (800eb10 <tcp_oos_insert_segment+0x10c>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	441a      	add	r2, r3
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	1ad3      	subs	r3, r2, r3
    if (next &&
 800eacc:	2b00      	cmp	r3, #0
 800eace:	dd12      	ble.n	800eaf6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	4b0d      	ldr	r3, [pc, #52]	; (800eb10 <tcp_oos_insert_segment+0x10c>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	b29b      	uxth	r3, r3
 800eade:	1ad3      	subs	r3, r2, r3
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	685a      	ldr	r2, [r3, #4]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	891b      	ldrh	r3, [r3, #8]
 800eaee:	4619      	mov	r1, r3
 800eaf0:	4610      	mov	r0, r2
 800eaf2:	f7fc fc4f 	bl	800b394 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	683a      	ldr	r2, [r7, #0]
 800eafa:	601a      	str	r2, [r3, #0]
}
 800eafc:	bf00      	nop
 800eafe:	3714      	adds	r7, #20
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd90      	pop	{r4, r7, pc}
 800eb04:	0801cee0 	.word	0x0801cee0
 800eb08:	0801d1a0 	.word	0x0801d1a0
 800eb0c:	0801cf2c 	.word	0x0801cf2c
 800eb10:	2400b6d8 	.word	0x2400b6d8

0800eb14 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800eb14:	b5b0      	push	{r4, r5, r7, lr}
 800eb16:	b086      	sub	sp, #24
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
 800eb20:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800eb22:	e03e      	b.n	800eba2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7fc fe42 	bl	800b7bc <pbuf_clen>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb42:	8a7a      	ldrh	r2, [r7, #18]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d906      	bls.n	800eb56 <tcp_free_acked_segments+0x42>
 800eb48:	4b2a      	ldr	r3, [pc, #168]	; (800ebf4 <tcp_free_acked_segments+0xe0>)
 800eb4a:	f240 4257 	movw	r2, #1111	; 0x457
 800eb4e:	492a      	ldr	r1, [pc, #168]	; (800ebf8 <tcp_free_acked_segments+0xe4>)
 800eb50:	482a      	ldr	r0, [pc, #168]	; (800ebfc <tcp_free_acked_segments+0xe8>)
 800eb52:	f009 fcb5 	bl	80184c0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800eb5c:	8a7b      	ldrh	r3, [r7, #18]
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	b29a      	uxth	r2, r3
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	891a      	ldrh	r2, [r3, #8]
 800eb6c:	4b24      	ldr	r3, [pc, #144]	; (800ec00 <tcp_free_acked_segments+0xec>)
 800eb6e:	881b      	ldrh	r3, [r3, #0]
 800eb70:	4413      	add	r3, r2
 800eb72:	b29a      	uxth	r2, r3
 800eb74:	4b22      	ldr	r3, [pc, #136]	; (800ec00 <tcp_free_acked_segments+0xec>)
 800eb76:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800eb78:	6978      	ldr	r0, [r7, #20]
 800eb7a:	f7fe f97e 	bl	800ce7a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00c      	beq.n	800eba2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d109      	bne.n	800eba2 <tcp_free_acked_segments+0x8e>
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d106      	bne.n	800eba2 <tcp_free_acked_segments+0x8e>
 800eb94:	4b17      	ldr	r3, [pc, #92]	; (800ebf4 <tcp_free_acked_segments+0xe0>)
 800eb96:	f240 4261 	movw	r2, #1121	; 0x461
 800eb9a:	491a      	ldr	r1, [pc, #104]	; (800ec04 <tcp_free_acked_segments+0xf0>)
 800eb9c:	4817      	ldr	r0, [pc, #92]	; (800ebfc <tcp_free_acked_segments+0xe8>)
 800eb9e:	f009 fc8f 	bl	80184c0 <iprintf>
  while (seg_list != NULL &&
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d020      	beq.n	800ebea <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7fb f99d 	bl	8009eee <lwip_htonl>
 800ebb4:	4604      	mov	r4, r0
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	891b      	ldrh	r3, [r3, #8]
 800ebba:	461d      	mov	r5, r3
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	899b      	ldrh	r3, [r3, #12]
 800ebc2:	b29b      	uxth	r3, r3
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fb f97d 	bl	8009ec4 <lwip_htons>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	f003 0303 	and.w	r3, r3, #3
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d001      	beq.n	800ebda <tcp_free_acked_segments+0xc6>
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	e000      	b.n	800ebdc <tcp_free_acked_segments+0xc8>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	442b      	add	r3, r5
 800ebde:	18e2      	adds	r2, r4, r3
 800ebe0:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <tcp_free_acked_segments+0xf4>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	dd9c      	ble.n	800eb24 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ebea:	68bb      	ldr	r3, [r7, #8]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3718      	adds	r7, #24
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bdb0      	pop	{r4, r5, r7, pc}
 800ebf4:	0801cee0 	.word	0x0801cee0
 800ebf8:	0801d1c8 	.word	0x0801d1c8
 800ebfc:	0801cf2c 	.word	0x0801cf2c
 800ec00:	2400b6e0 	.word	0x2400b6e0
 800ec04:	0801d1f0 	.word	0x0801d1f0
 800ec08:	2400b6dc 	.word	0x2400b6dc

0800ec0c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ec0c:	b5b0      	push	{r4, r5, r7, lr}
 800ec0e:	b094      	sub	sp, #80	; 0x50
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ec14:	2300      	movs	r3, #0
 800ec16:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d106      	bne.n	800ec2c <tcp_receive+0x20>
 800ec1e:	4ba6      	ldr	r3, [pc, #664]	; (800eeb8 <tcp_receive+0x2ac>)
 800ec20:	f240 427b 	movw	r2, #1147	; 0x47b
 800ec24:	49a5      	ldr	r1, [pc, #660]	; (800eebc <tcp_receive+0x2b0>)
 800ec26:	48a6      	ldr	r0, [pc, #664]	; (800eec0 <tcp_receive+0x2b4>)
 800ec28:	f009 fc4a 	bl	80184c0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	7d1b      	ldrb	r3, [r3, #20]
 800ec30:	2b03      	cmp	r3, #3
 800ec32:	d806      	bhi.n	800ec42 <tcp_receive+0x36>
 800ec34:	4ba0      	ldr	r3, [pc, #640]	; (800eeb8 <tcp_receive+0x2ac>)
 800ec36:	f240 427c 	movw	r2, #1148	; 0x47c
 800ec3a:	49a2      	ldr	r1, [pc, #648]	; (800eec4 <tcp_receive+0x2b8>)
 800ec3c:	48a0      	ldr	r0, [pc, #640]	; (800eec0 <tcp_receive+0x2b4>)
 800ec3e:	f009 fc3f 	bl	80184c0 <iprintf>

  if (flags & TCP_ACK) {
 800ec42:	4ba1      	ldr	r3, [pc, #644]	; (800eec8 <tcp_receive+0x2bc>)
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	f003 0310 	and.w	r3, r3, #16
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f000 8263 	beq.w	800f116 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec56:	461a      	mov	r2, r3
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec5c:	4413      	add	r3, r2
 800ec5e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec64:	4b99      	ldr	r3, [pc, #612]	; (800eecc <tcp_receive+0x2c0>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	db1b      	blt.n	800eca6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec72:	4b96      	ldr	r3, [pc, #600]	; (800eecc <tcp_receive+0x2c0>)
 800ec74:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d106      	bne.n	800ec88 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec7e:	4b94      	ldr	r3, [pc, #592]	; (800eed0 <tcp_receive+0x2c4>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	db0e      	blt.n	800eca6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec8c:	4b90      	ldr	r3, [pc, #576]	; (800eed0 <tcp_receive+0x2c4>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d125      	bne.n	800ece0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ec94:	4b8f      	ldr	r3, [pc, #572]	; (800eed4 <tcp_receive+0x2c8>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	89db      	ldrh	r3, [r3, #14]
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d91c      	bls.n	800ece0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800eca6:	4b8b      	ldr	r3, [pc, #556]	; (800eed4 <tcp_receive+0x2c8>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	89db      	ldrh	r3, [r3, #14]
 800ecac:	b29a      	uxth	r2, r3
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d205      	bcs.n	800ecd0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ecd0:	4b7e      	ldr	r3, [pc, #504]	; (800eecc <tcp_receive+0x2c0>)
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ecd8:	4b7d      	ldr	r3, [pc, #500]	; (800eed0 <tcp_receive+0x2c4>)
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ece0:	4b7b      	ldr	r3, [pc, #492]	; (800eed0 <tcp_receive+0x2c4>)
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ece8:	1ad3      	subs	r3, r2, r3
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	dc58      	bgt.n	800eda0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ecee:	4b7a      	ldr	r3, [pc, #488]	; (800eed8 <tcp_receive+0x2cc>)
 800ecf0:	881b      	ldrh	r3, [r3, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d14b      	bne.n	800ed8e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ed00:	4413      	add	r3, r2
 800ed02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d142      	bne.n	800ed8e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	db3d      	blt.n	800ed8e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed16:	4b6e      	ldr	r3, [pc, #440]	; (800eed0 <tcp_receive+0x2c4>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d137      	bne.n	800ed8e <tcp_receive+0x182>
              found_dupack = 1;
 800ed1e:	2301      	movs	r3, #1
 800ed20:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed28:	2bff      	cmp	r3, #255	; 0xff
 800ed2a:	d007      	beq.n	800ed3c <tcp_receive+0x130>
                ++pcb->dupacks;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed32:	3301      	adds	r3, #1
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed42:	2b03      	cmp	r3, #3
 800ed44:	d91b      	bls.n	800ed7e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed50:	4413      	add	r3, r2
 800ed52:	b29a      	uxth	r2, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d30a      	bcc.n	800ed74 <tcp_receive+0x168>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed68:	4413      	add	r3, r2
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ed72:	e004      	b.n	800ed7e <tcp_receive+0x172>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d902      	bls.n	800ed8e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f001 fee9 	bl	8010b60 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ed8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	f040 8160 	bne.w	800f056 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed9e:	e15a      	b.n	800f056 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eda0:	4b4b      	ldr	r3, [pc, #300]	; (800eed0 <tcp_receive+0x2c4>)
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	3b01      	subs	r3, #1
 800edac:	2b00      	cmp	r3, #0
 800edae:	f2c0 814d 	blt.w	800f04c <tcp_receive+0x440>
 800edb2:	4b47      	ldr	r3, [pc, #284]	; (800eed0 <tcp_receive+0x2c4>)
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f300 8145 	bgt.w	800f04c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	8b5b      	ldrh	r3, [r3, #26]
 800edc6:	f003 0304 	and.w	r3, r3, #4
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d010      	beq.n	800edf0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	8b5b      	ldrh	r3, [r3, #26]
 800edd2:	f023 0304 	bic.w	r3, r3, #4
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2200      	movs	r2, #0
 800edec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800edfe:	10db      	asrs	r3, r3, #3
 800ee00:	b21b      	sxth	r3, r3
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	4413      	add	r3, r2
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	b21a      	sxth	r2, r3
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ee18:	4b2d      	ldr	r3, [pc, #180]	; (800eed0 <tcp_receive+0x2c4>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	1ad3      	subs	r3, r2, r3
 800ee26:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ee30:	4b27      	ldr	r3, [pc, #156]	; (800eed0 <tcp_receive+0x2c4>)
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	7d1b      	ldrb	r3, [r3, #20]
 800ee3c:	2b03      	cmp	r3, #3
 800ee3e:	f240 8096 	bls.w	800ef6e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d244      	bcs.n	800eedc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	8b5b      	ldrh	r3, [r3, #26]
 800ee56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d001      	beq.n	800ee62 <tcp_receive+0x256>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	e000      	b.n	800ee64 <tcp_receive+0x258>
 800ee62:	2302      	movs	r3, #2
 800ee64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ee68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ee6c:	b29a      	uxth	r2, r3
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee72:	fb12 f303 	smulbb	r3, r2, r3
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	bf28      	it	cs
 800ee7e:	4613      	movcs	r3, r2
 800ee80:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ee8a:	4413      	add	r3, r2
 800ee8c:	b29a      	uxth	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d309      	bcc.n	800eeac <tcp_receive+0x2a0>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eea0:	4413      	add	r3, r2
 800eea2:	b29a      	uxth	r2, r3
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eeaa:	e060      	b.n	800ef6e <tcp_receive+0x362>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eeb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eeb6:	e05a      	b.n	800ef6e <tcp_receive+0x362>
 800eeb8:	0801cee0 	.word	0x0801cee0
 800eebc:	0801d210 	.word	0x0801d210
 800eec0:	0801cf2c 	.word	0x0801cf2c
 800eec4:	0801d22c 	.word	0x0801d22c
 800eec8:	2400b6e4 	.word	0x2400b6e4
 800eecc:	2400b6d8 	.word	0x2400b6d8
 800eed0:	2400b6dc 	.word	0x2400b6dc
 800eed4:	2400b6c8 	.word	0x2400b6c8
 800eed8:	2400b6e2 	.word	0x2400b6e2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eee2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eee4:	4413      	add	r3, r2
 800eee6:	b29a      	uxth	r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d309      	bcc.n	800ef06 <tcp_receive+0x2fa>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eef8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eefa:	4413      	add	r3, r2
 800eefc:	b29a      	uxth	r2, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ef04:	e004      	b.n	800ef10 <tcp_receive+0x304>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d326      	bcc.n	800ef6e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef2c:	1ad3      	subs	r3, r2, r3
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef40:	4413      	add	r3, r2
 800ef42:	b29a      	uxth	r2, r3
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d30a      	bcc.n	800ef64 <tcp_receive+0x358>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef58:	4413      	add	r3, r2
 800ef5a:	b29a      	uxth	r2, r3
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ef62:	e004      	b.n	800ef6e <tcp_receive+0x362>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef76:	4a98      	ldr	r2, [pc, #608]	; (800f1d8 <tcp_receive+0x5cc>)
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7ff fdcb 	bl	800eb14 <tcp_free_acked_segments>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef8c:	4a93      	ldr	r2, [pc, #588]	; (800f1dc <tcp_receive+0x5d0>)
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7ff fdc0 	bl	800eb14 <tcp_free_acked_segments>
 800ef94:	4602      	mov	r2, r0
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d104      	bne.n	800efac <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efa8:	861a      	strh	r2, [r3, #48]	; 0x30
 800efaa:	e002      	b.n	800efb2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2200      	movs	r2, #0
 800efb0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d103      	bne.n	800efc8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800efce:	4b84      	ldr	r3, [pc, #528]	; (800f1e0 <tcp_receive+0x5d4>)
 800efd0:	881b      	ldrh	r3, [r3, #0]
 800efd2:	4413      	add	r3, r2
 800efd4:	b29a      	uxth	r2, r3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	8b5b      	ldrh	r3, [r3, #26]
 800efe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d035      	beq.n	800f054 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efec:	2b00      	cmp	r3, #0
 800efee:	d118      	bne.n	800f022 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00c      	beq.n	800f012 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	4618      	mov	r0, r3
 800f006:	f7fa ff72 	bl	8009eee <lwip_htonl>
 800f00a:	4603      	mov	r3, r0
 800f00c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f00e:	2b00      	cmp	r3, #0
 800f010:	dc20      	bgt.n	800f054 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	8b5b      	ldrh	r3, [r3, #26]
 800f016:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f01a:	b29a      	uxth	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f020:	e018      	b.n	800f054 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f02a:	68db      	ldr	r3, [r3, #12]
 800f02c:	685b      	ldr	r3, [r3, #4]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7fa ff5d 	bl	8009eee <lwip_htonl>
 800f034:	4603      	mov	r3, r0
 800f036:	1ae3      	subs	r3, r4, r3
 800f038:	2b00      	cmp	r3, #0
 800f03a:	dc0b      	bgt.n	800f054 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	8b5b      	ldrh	r3, [r3, #26]
 800f040:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f044:	b29a      	uxth	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f04a:	e003      	b.n	800f054 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f001 ff75 	bl	8010f3c <tcp_send_empty_ack>
 800f052:	e000      	b.n	800f056 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f054:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d05b      	beq.n	800f116 <tcp_receive+0x50a>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f062:	4b60      	ldr	r3, [pc, #384]	; (800f1e4 <tcp_receive+0x5d8>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	1ad3      	subs	r3, r2, r3
 800f068:	2b00      	cmp	r3, #0
 800f06a:	da54      	bge.n	800f116 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f06c:	4b5e      	ldr	r3, [pc, #376]	; (800f1e8 <tcp_receive+0x5dc>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	b29a      	uxth	r2, r3
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f076:	b29b      	uxth	r3, r3
 800f078:	1ad3      	subs	r3, r2, r3
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f080:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f08a:	10db      	asrs	r3, r3, #3
 800f08c:	b21b      	sxth	r3, r3
 800f08e:	b29b      	uxth	r3, r3
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	b29b      	uxth	r3, r3
 800f094:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f0a4:	4413      	add	r3, r2
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	b21a      	sxth	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f0ae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	da05      	bge.n	800f0c2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f0b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f0ba:	425b      	negs	r3, r3
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f0c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0cc:	109b      	asrs	r3, r3, #2
 800f0ce:	b21b      	sxth	r3, r3
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	1ad3      	subs	r3, r2, r3
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f0e6:	4413      	add	r3, r2
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	b21a      	sxth	r2, r3
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0f6:	10db      	asrs	r3, r3, #3
 800f0f8:	b21b      	sxth	r3, r3
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f102:	b29b      	uxth	r3, r3
 800f104:	4413      	add	r3, r2
 800f106:	b29b      	uxth	r3, r3
 800f108:	b21a      	sxth	r2, r3
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2200      	movs	r2, #0
 800f114:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f116:	4b35      	ldr	r3, [pc, #212]	; (800f1ec <tcp_receive+0x5e0>)
 800f118:	881b      	ldrh	r3, [r3, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	f000 84e1 	beq.w	800fae2 <tcp_receive+0xed6>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	7d1b      	ldrb	r3, [r3, #20]
 800f124:	2b06      	cmp	r3, #6
 800f126:	f200 84dc 	bhi.w	800fae2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f12e:	4b30      	ldr	r3, [pc, #192]	; (800f1f0 <tcp_receive+0x5e4>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	1ad3      	subs	r3, r2, r3
 800f134:	3b01      	subs	r3, #1
 800f136:	2b00      	cmp	r3, #0
 800f138:	f2c0 808e 	blt.w	800f258 <tcp_receive+0x64c>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f140:	4b2a      	ldr	r3, [pc, #168]	; (800f1ec <tcp_receive+0x5e0>)
 800f142:	881b      	ldrh	r3, [r3, #0]
 800f144:	4619      	mov	r1, r3
 800f146:	4b2a      	ldr	r3, [pc, #168]	; (800f1f0 <tcp_receive+0x5e4>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	440b      	add	r3, r1
 800f14c:	1ad3      	subs	r3, r2, r3
 800f14e:	3301      	adds	r3, #1
 800f150:	2b00      	cmp	r3, #0
 800f152:	f300 8081 	bgt.w	800f258 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f156:	4b27      	ldr	r3, [pc, #156]	; (800f1f4 <tcp_receive+0x5e8>)
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f160:	4b23      	ldr	r3, [pc, #140]	; (800f1f0 <tcp_receive+0x5e4>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	1ad3      	subs	r3, r2, r3
 800f166:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f168:	4b22      	ldr	r3, [pc, #136]	; (800f1f4 <tcp_receive+0x5e8>)
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d106      	bne.n	800f17e <tcp_receive+0x572>
 800f170:	4b21      	ldr	r3, [pc, #132]	; (800f1f8 <tcp_receive+0x5ec>)
 800f172:	f240 5294 	movw	r2, #1428	; 0x594
 800f176:	4921      	ldr	r1, [pc, #132]	; (800f1fc <tcp_receive+0x5f0>)
 800f178:	4821      	ldr	r0, [pc, #132]	; (800f200 <tcp_receive+0x5f4>)
 800f17a:	f009 f9a1 	bl	80184c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f180:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f184:	4293      	cmp	r3, r2
 800f186:	d906      	bls.n	800f196 <tcp_receive+0x58a>
 800f188:	4b1b      	ldr	r3, [pc, #108]	; (800f1f8 <tcp_receive+0x5ec>)
 800f18a:	f240 5295 	movw	r2, #1429	; 0x595
 800f18e:	491d      	ldr	r1, [pc, #116]	; (800f204 <tcp_receive+0x5f8>)
 800f190:	481b      	ldr	r0, [pc, #108]	; (800f200 <tcp_receive+0x5f4>)
 800f192:	f009 f995 	bl	80184c0 <iprintf>
      off = (u16_t)off32;
 800f196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f198:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f19c:	4b15      	ldr	r3, [pc, #84]	; (800f1f4 <tcp_receive+0x5e8>)
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	891b      	ldrh	r3, [r3, #8]
 800f1a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d906      	bls.n	800f1b8 <tcp_receive+0x5ac>
 800f1aa:	4b13      	ldr	r3, [pc, #76]	; (800f1f8 <tcp_receive+0x5ec>)
 800f1ac:	f240 5297 	movw	r2, #1431	; 0x597
 800f1b0:	4915      	ldr	r1, [pc, #84]	; (800f208 <tcp_receive+0x5fc>)
 800f1b2:	4813      	ldr	r0, [pc, #76]	; (800f200 <tcp_receive+0x5f4>)
 800f1b4:	f009 f984 	bl	80184c0 <iprintf>
      inseg.len -= off;
 800f1b8:	4b0e      	ldr	r3, [pc, #56]	; (800f1f4 <tcp_receive+0x5e8>)
 800f1ba:	891a      	ldrh	r2, [r3, #8]
 800f1bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1c0:	1ad3      	subs	r3, r2, r3
 800f1c2:	b29a      	uxth	r2, r3
 800f1c4:	4b0b      	ldr	r3, [pc, #44]	; (800f1f4 <tcp_receive+0x5e8>)
 800f1c6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f1c8:	4b0a      	ldr	r3, [pc, #40]	; (800f1f4 <tcp_receive+0x5e8>)
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	891a      	ldrh	r2, [r3, #8]
 800f1ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1d2:	1ad3      	subs	r3, r2, r3
 800f1d4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f1d6:	e029      	b.n	800f22c <tcp_receive+0x620>
 800f1d8:	0801d248 	.word	0x0801d248
 800f1dc:	0801d250 	.word	0x0801d250
 800f1e0:	2400b6e0 	.word	0x2400b6e0
 800f1e4:	2400b6dc 	.word	0x2400b6dc
 800f1e8:	2400ee44 	.word	0x2400ee44
 800f1ec:	2400b6e2 	.word	0x2400b6e2
 800f1f0:	2400b6d8 	.word	0x2400b6d8
 800f1f4:	2400b6b8 	.word	0x2400b6b8
 800f1f8:	0801cee0 	.word	0x0801cee0
 800f1fc:	0801d258 	.word	0x0801d258
 800f200:	0801cf2c 	.word	0x0801cf2c
 800f204:	0801d268 	.word	0x0801d268
 800f208:	0801d278 	.word	0x0801d278
        off -= p->len;
 800f20c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f20e:	895b      	ldrh	r3, [r3, #10]
 800f210:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f214:	1ad3      	subs	r3, r2, r3
 800f216:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f21a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f21c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f21e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f222:	2200      	movs	r2, #0
 800f224:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f22c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f22e:	895b      	ldrh	r3, [r3, #10]
 800f230:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f234:	429a      	cmp	r2, r3
 800f236:	d8e9      	bhi.n	800f20c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f238:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f23c:	4619      	mov	r1, r3
 800f23e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f240:	f7fc f9a8 	bl	800b594 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f248:	4a91      	ldr	r2, [pc, #580]	; (800f490 <tcp_receive+0x884>)
 800f24a:	6013      	str	r3, [r2, #0]
 800f24c:	4b91      	ldr	r3, [pc, #580]	; (800f494 <tcp_receive+0x888>)
 800f24e:	68db      	ldr	r3, [r3, #12]
 800f250:	4a8f      	ldr	r2, [pc, #572]	; (800f490 <tcp_receive+0x884>)
 800f252:	6812      	ldr	r2, [r2, #0]
 800f254:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f256:	e00d      	b.n	800f274 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f258:	4b8d      	ldr	r3, [pc, #564]	; (800f490 <tcp_receive+0x884>)
 800f25a:	681a      	ldr	r2, [r3, #0]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f260:	1ad3      	subs	r3, r2, r3
 800f262:	2b00      	cmp	r3, #0
 800f264:	da06      	bge.n	800f274 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	8b5b      	ldrh	r3, [r3, #26]
 800f26a:	f043 0302 	orr.w	r3, r3, #2
 800f26e:	b29a      	uxth	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f274:	4b86      	ldr	r3, [pc, #536]	; (800f490 <tcp_receive+0x884>)
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27c:	1ad3      	subs	r3, r2, r3
 800f27e:	2b00      	cmp	r3, #0
 800f280:	f2c0 842a 	blt.w	800fad8 <tcp_receive+0xecc>
 800f284:	4b82      	ldr	r3, [pc, #520]	; (800f490 <tcp_receive+0x884>)
 800f286:	681a      	ldr	r2, [r3, #0]
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f28c:	6879      	ldr	r1, [r7, #4]
 800f28e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f290:	440b      	add	r3, r1
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	3301      	adds	r3, #1
 800f296:	2b00      	cmp	r3, #0
 800f298:	f300 841e 	bgt.w	800fad8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2a0:	4b7b      	ldr	r3, [pc, #492]	; (800f490 <tcp_receive+0x884>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	f040 829a 	bne.w	800f7de <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f2aa:	4b7a      	ldr	r3, [pc, #488]	; (800f494 <tcp_receive+0x888>)
 800f2ac:	891c      	ldrh	r4, [r3, #8]
 800f2ae:	4b79      	ldr	r3, [pc, #484]	; (800f494 <tcp_receive+0x888>)
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	899b      	ldrh	r3, [r3, #12]
 800f2b4:	b29b      	uxth	r3, r3
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7fa fe04 	bl	8009ec4 <lwip_htons>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	b2db      	uxtb	r3, r3
 800f2c0:	f003 0303 	and.w	r3, r3, #3
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d001      	beq.n	800f2cc <tcp_receive+0x6c0>
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e000      	b.n	800f2ce <tcp_receive+0x6c2>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	4423      	add	r3, r4
 800f2d0:	b29a      	uxth	r2, r3
 800f2d2:	4b71      	ldr	r3, [pc, #452]	; (800f498 <tcp_receive+0x88c>)
 800f2d4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f2da:	4b6f      	ldr	r3, [pc, #444]	; (800f498 <tcp_receive+0x88c>)
 800f2dc:	881b      	ldrh	r3, [r3, #0]
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d275      	bcs.n	800f3ce <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f2e2:	4b6c      	ldr	r3, [pc, #432]	; (800f494 <tcp_receive+0x888>)
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	899b      	ldrh	r3, [r3, #12]
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fa fdea 	bl	8009ec4 <lwip_htons>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	f003 0301 	and.w	r3, r3, #1
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d01f      	beq.n	800f33c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f2fc:	4b65      	ldr	r3, [pc, #404]	; (800f494 <tcp_receive+0x888>)
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	899b      	ldrh	r3, [r3, #12]
 800f302:	b29b      	uxth	r3, r3
 800f304:	b21b      	sxth	r3, r3
 800f306:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f30a:	b21c      	sxth	r4, r3
 800f30c:	4b61      	ldr	r3, [pc, #388]	; (800f494 <tcp_receive+0x888>)
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	899b      	ldrh	r3, [r3, #12]
 800f312:	b29b      	uxth	r3, r3
 800f314:	4618      	mov	r0, r3
 800f316:	f7fa fdd5 	bl	8009ec4 <lwip_htons>
 800f31a:	4603      	mov	r3, r0
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	b29b      	uxth	r3, r3
 800f320:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f324:	b29b      	uxth	r3, r3
 800f326:	4618      	mov	r0, r3
 800f328:	f7fa fdcc 	bl	8009ec4 <lwip_htons>
 800f32c:	4603      	mov	r3, r0
 800f32e:	b21b      	sxth	r3, r3
 800f330:	4323      	orrs	r3, r4
 800f332:	b21a      	sxth	r2, r3
 800f334:	4b57      	ldr	r3, [pc, #348]	; (800f494 <tcp_receive+0x888>)
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	b292      	uxth	r2, r2
 800f33a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f340:	4b54      	ldr	r3, [pc, #336]	; (800f494 <tcp_receive+0x888>)
 800f342:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f344:	4b53      	ldr	r3, [pc, #332]	; (800f494 <tcp_receive+0x888>)
 800f346:	68db      	ldr	r3, [r3, #12]
 800f348:	899b      	ldrh	r3, [r3, #12]
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7fa fdb9 	bl	8009ec4 <lwip_htons>
 800f352:	4603      	mov	r3, r0
 800f354:	b2db      	uxtb	r3, r3
 800f356:	f003 0302 	and.w	r3, r3, #2
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d005      	beq.n	800f36a <tcp_receive+0x75e>
            inseg.len -= 1;
 800f35e:	4b4d      	ldr	r3, [pc, #308]	; (800f494 <tcp_receive+0x888>)
 800f360:	891b      	ldrh	r3, [r3, #8]
 800f362:	3b01      	subs	r3, #1
 800f364:	b29a      	uxth	r2, r3
 800f366:	4b4b      	ldr	r3, [pc, #300]	; (800f494 <tcp_receive+0x888>)
 800f368:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f36a:	4b4a      	ldr	r3, [pc, #296]	; (800f494 <tcp_receive+0x888>)
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	4a49      	ldr	r2, [pc, #292]	; (800f494 <tcp_receive+0x888>)
 800f370:	8912      	ldrh	r2, [r2, #8]
 800f372:	4611      	mov	r1, r2
 800f374:	4618      	mov	r0, r3
 800f376:	f7fc f80d 	bl	800b394 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f37a:	4b46      	ldr	r3, [pc, #280]	; (800f494 <tcp_receive+0x888>)
 800f37c:	891c      	ldrh	r4, [r3, #8]
 800f37e:	4b45      	ldr	r3, [pc, #276]	; (800f494 <tcp_receive+0x888>)
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	899b      	ldrh	r3, [r3, #12]
 800f384:	b29b      	uxth	r3, r3
 800f386:	4618      	mov	r0, r3
 800f388:	f7fa fd9c 	bl	8009ec4 <lwip_htons>
 800f38c:	4603      	mov	r3, r0
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	f003 0303 	and.w	r3, r3, #3
 800f394:	2b00      	cmp	r3, #0
 800f396:	d001      	beq.n	800f39c <tcp_receive+0x790>
 800f398:	2301      	movs	r3, #1
 800f39a:	e000      	b.n	800f39e <tcp_receive+0x792>
 800f39c:	2300      	movs	r3, #0
 800f39e:	4423      	add	r3, r4
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	4b3d      	ldr	r3, [pc, #244]	; (800f498 <tcp_receive+0x88c>)
 800f3a4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f3a6:	4b3c      	ldr	r3, [pc, #240]	; (800f498 <tcp_receive+0x88c>)
 800f3a8:	881b      	ldrh	r3, [r3, #0]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	4b38      	ldr	r3, [pc, #224]	; (800f490 <tcp_receive+0x884>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	441a      	add	r2, r3
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b6:	6879      	ldr	r1, [r7, #4]
 800f3b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f3ba:	440b      	add	r3, r1
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d006      	beq.n	800f3ce <tcp_receive+0x7c2>
 800f3c0:	4b36      	ldr	r3, [pc, #216]	; (800f49c <tcp_receive+0x890>)
 800f3c2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f3c6:	4936      	ldr	r1, [pc, #216]	; (800f4a0 <tcp_receive+0x894>)
 800f3c8:	4836      	ldr	r0, [pc, #216]	; (800f4a4 <tcp_receive+0x898>)
 800f3ca:	f009 f879 	bl	80184c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	f000 80e7 	beq.w	800f5a6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f3d8:	4b2e      	ldr	r3, [pc, #184]	; (800f494 <tcp_receive+0x888>)
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	899b      	ldrh	r3, [r3, #12]
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fa fd6f 	bl	8009ec4 <lwip_htons>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	f003 0301 	and.w	r3, r3, #1
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d010      	beq.n	800f414 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f3f2:	e00a      	b.n	800f40a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3f8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f404:	68f8      	ldr	r0, [r7, #12]
 800f406:	f7fd fd38 	bl	800ce7a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d1f0      	bne.n	800f3f4 <tcp_receive+0x7e8>
 800f412:	e0c8      	b.n	800f5a6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f418:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f41a:	e052      	b.n	800f4c2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	899b      	ldrh	r3, [r3, #12]
 800f422:	b29b      	uxth	r3, r3
 800f424:	4618      	mov	r0, r3
 800f426:	f7fa fd4d 	bl	8009ec4 <lwip_htons>
 800f42a:	4603      	mov	r3, r0
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	f003 0301 	and.w	r3, r3, #1
 800f432:	2b00      	cmp	r3, #0
 800f434:	d03d      	beq.n	800f4b2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f436:	4b17      	ldr	r3, [pc, #92]	; (800f494 <tcp_receive+0x888>)
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	899b      	ldrh	r3, [r3, #12]
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fa fd40 	bl	8009ec4 <lwip_htons>
 800f444:	4603      	mov	r3, r0
 800f446:	b2db      	uxtb	r3, r3
 800f448:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d130      	bne.n	800f4b2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f450:	4b10      	ldr	r3, [pc, #64]	; (800f494 <tcp_receive+0x888>)
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	899b      	ldrh	r3, [r3, #12]
 800f456:	b29c      	uxth	r4, r3
 800f458:	2001      	movs	r0, #1
 800f45a:	f7fa fd33 	bl	8009ec4 <lwip_htons>
 800f45e:	4603      	mov	r3, r0
 800f460:	461a      	mov	r2, r3
 800f462:	4b0c      	ldr	r3, [pc, #48]	; (800f494 <tcp_receive+0x888>)
 800f464:	68db      	ldr	r3, [r3, #12]
 800f466:	4322      	orrs	r2, r4
 800f468:	b292      	uxth	r2, r2
 800f46a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f46c:	4b09      	ldr	r3, [pc, #36]	; (800f494 <tcp_receive+0x888>)
 800f46e:	891c      	ldrh	r4, [r3, #8]
 800f470:	4b08      	ldr	r3, [pc, #32]	; (800f494 <tcp_receive+0x888>)
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	899b      	ldrh	r3, [r3, #12]
 800f476:	b29b      	uxth	r3, r3
 800f478:	4618      	mov	r0, r3
 800f47a:	f7fa fd23 	bl	8009ec4 <lwip_htons>
 800f47e:	4603      	mov	r3, r0
 800f480:	b2db      	uxtb	r3, r3
 800f482:	f003 0303 	and.w	r3, r3, #3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d00e      	beq.n	800f4a8 <tcp_receive+0x89c>
 800f48a:	2301      	movs	r3, #1
 800f48c:	e00d      	b.n	800f4aa <tcp_receive+0x89e>
 800f48e:	bf00      	nop
 800f490:	2400b6d8 	.word	0x2400b6d8
 800f494:	2400b6b8 	.word	0x2400b6b8
 800f498:	2400b6e2 	.word	0x2400b6e2
 800f49c:	0801cee0 	.word	0x0801cee0
 800f4a0:	0801d288 	.word	0x0801d288
 800f4a4:	0801cf2c 	.word	0x0801cf2c
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	4423      	add	r3, r4
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	4b98      	ldr	r3, [pc, #608]	; (800f710 <tcp_receive+0xb04>)
 800f4b0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4b4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f4b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f4bc:	6938      	ldr	r0, [r7, #16]
 800f4be:	f7fd fcdc 	bl	800ce7a <tcp_seg_free>
            while (next &&
 800f4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d00e      	beq.n	800f4e6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f4c8:	4b91      	ldr	r3, [pc, #580]	; (800f710 <tcp_receive+0xb04>)
 800f4ca:	881b      	ldrh	r3, [r3, #0]
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	4b91      	ldr	r3, [pc, #580]	; (800f714 <tcp_receive+0xb08>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	441a      	add	r2, r3
 800f4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4d6:	68db      	ldr	r3, [r3, #12]
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f4dc:	8909      	ldrh	r1, [r1, #8]
 800f4de:	440b      	add	r3, r1
 800f4e0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	da9a      	bge.n	800f41c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f4e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d059      	beq.n	800f5a0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f4ec:	4b88      	ldr	r3, [pc, #544]	; (800f710 <tcp_receive+0xb04>)
 800f4ee:	881b      	ldrh	r3, [r3, #0]
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	4b88      	ldr	r3, [pc, #544]	; (800f714 <tcp_receive+0xb08>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	441a      	add	r2, r3
 800f4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f500:	2b00      	cmp	r3, #0
 800f502:	dd4d      	ble.n	800f5a0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	4b81      	ldr	r3, [pc, #516]	; (800f714 <tcp_receive+0xb08>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	b29b      	uxth	r3, r3
 800f512:	1ad3      	subs	r3, r2, r3
 800f514:	b29a      	uxth	r2, r3
 800f516:	4b80      	ldr	r3, [pc, #512]	; (800f718 <tcp_receive+0xb0c>)
 800f518:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f51a:	4b7f      	ldr	r3, [pc, #508]	; (800f718 <tcp_receive+0xb0c>)
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	899b      	ldrh	r3, [r3, #12]
 800f520:	b29b      	uxth	r3, r3
 800f522:	4618      	mov	r0, r3
 800f524:	f7fa fcce 	bl	8009ec4 <lwip_htons>
 800f528:	4603      	mov	r3, r0
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	f003 0302 	and.w	r3, r3, #2
 800f530:	2b00      	cmp	r3, #0
 800f532:	d005      	beq.n	800f540 <tcp_receive+0x934>
                inseg.len -= 1;
 800f534:	4b78      	ldr	r3, [pc, #480]	; (800f718 <tcp_receive+0xb0c>)
 800f536:	891b      	ldrh	r3, [r3, #8]
 800f538:	3b01      	subs	r3, #1
 800f53a:	b29a      	uxth	r2, r3
 800f53c:	4b76      	ldr	r3, [pc, #472]	; (800f718 <tcp_receive+0xb0c>)
 800f53e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f540:	4b75      	ldr	r3, [pc, #468]	; (800f718 <tcp_receive+0xb0c>)
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	4a74      	ldr	r2, [pc, #464]	; (800f718 <tcp_receive+0xb0c>)
 800f546:	8912      	ldrh	r2, [r2, #8]
 800f548:	4611      	mov	r1, r2
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7fb ff22 	bl	800b394 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f550:	4b71      	ldr	r3, [pc, #452]	; (800f718 <tcp_receive+0xb0c>)
 800f552:	891c      	ldrh	r4, [r3, #8]
 800f554:	4b70      	ldr	r3, [pc, #448]	; (800f718 <tcp_receive+0xb0c>)
 800f556:	68db      	ldr	r3, [r3, #12]
 800f558:	899b      	ldrh	r3, [r3, #12]
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7fa fcb1 	bl	8009ec4 <lwip_htons>
 800f562:	4603      	mov	r3, r0
 800f564:	b2db      	uxtb	r3, r3
 800f566:	f003 0303 	and.w	r3, r3, #3
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d001      	beq.n	800f572 <tcp_receive+0x966>
 800f56e:	2301      	movs	r3, #1
 800f570:	e000      	b.n	800f574 <tcp_receive+0x968>
 800f572:	2300      	movs	r3, #0
 800f574:	4423      	add	r3, r4
 800f576:	b29a      	uxth	r2, r3
 800f578:	4b65      	ldr	r3, [pc, #404]	; (800f710 <tcp_receive+0xb04>)
 800f57a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f57c:	4b64      	ldr	r3, [pc, #400]	; (800f710 <tcp_receive+0xb04>)
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	461a      	mov	r2, r3
 800f582:	4b64      	ldr	r3, [pc, #400]	; (800f714 <tcp_receive+0xb08>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	441a      	add	r2, r3
 800f588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d006      	beq.n	800f5a0 <tcp_receive+0x994>
 800f592:	4b62      	ldr	r3, [pc, #392]	; (800f71c <tcp_receive+0xb10>)
 800f594:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f598:	4961      	ldr	r1, [pc, #388]	; (800f720 <tcp_receive+0xb14>)
 800f59a:	4862      	ldr	r0, [pc, #392]	; (800f724 <tcp_receive+0xb18>)
 800f59c:	f008 ff90 	bl	80184c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f5a4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f5a6:	4b5a      	ldr	r3, [pc, #360]	; (800f710 <tcp_receive+0xb04>)
 800f5a8:	881b      	ldrh	r3, [r3, #0]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	4b59      	ldr	r3, [pc, #356]	; (800f714 <tcp_receive+0xb08>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	441a      	add	r2, r3
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5ba:	4b55      	ldr	r3, [pc, #340]	; (800f710 <tcp_receive+0xb04>)
 800f5bc:	881b      	ldrh	r3, [r3, #0]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d206      	bcs.n	800f5d0 <tcp_receive+0x9c4>
 800f5c2:	4b56      	ldr	r3, [pc, #344]	; (800f71c <tcp_receive+0xb10>)
 800f5c4:	f240 6207 	movw	r2, #1543	; 0x607
 800f5c8:	4957      	ldr	r1, [pc, #348]	; (800f728 <tcp_receive+0xb1c>)
 800f5ca:	4856      	ldr	r0, [pc, #344]	; (800f724 <tcp_receive+0xb18>)
 800f5cc:	f008 ff78 	bl	80184c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5d4:	4b4e      	ldr	r3, [pc, #312]	; (800f710 <tcp_receive+0xb04>)
 800f5d6:	881b      	ldrh	r3, [r3, #0]
 800f5d8:	1ad3      	subs	r3, r2, r3
 800f5da:	b29a      	uxth	r2, r3
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f7fc fe0d 	bl	800c200 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f5e6:	4b4c      	ldr	r3, [pc, #304]	; (800f718 <tcp_receive+0xb0c>)
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	891b      	ldrh	r3, [r3, #8]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d006      	beq.n	800f5fe <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f5f0:	4b49      	ldr	r3, [pc, #292]	; (800f718 <tcp_receive+0xb0c>)
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	4a4d      	ldr	r2, [pc, #308]	; (800f72c <tcp_receive+0xb20>)
 800f5f6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f5f8:	4b47      	ldr	r3, [pc, #284]	; (800f718 <tcp_receive+0xb0c>)
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f5fe:	4b46      	ldr	r3, [pc, #280]	; (800f718 <tcp_receive+0xb0c>)
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	899b      	ldrh	r3, [r3, #12]
 800f604:	b29b      	uxth	r3, r3
 800f606:	4618      	mov	r0, r3
 800f608:	f7fa fc5c 	bl	8009ec4 <lwip_htons>
 800f60c:	4603      	mov	r3, r0
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	f003 0301 	and.w	r3, r3, #1
 800f614:	2b00      	cmp	r3, #0
 800f616:	f000 80b8 	beq.w	800f78a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f61a:	4b45      	ldr	r3, [pc, #276]	; (800f730 <tcp_receive+0xb24>)
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	f043 0320 	orr.w	r3, r3, #32
 800f622:	b2da      	uxtb	r2, r3
 800f624:	4b42      	ldr	r3, [pc, #264]	; (800f730 <tcp_receive+0xb24>)
 800f626:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f628:	e0af      	b.n	800f78a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f62e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f634:	68db      	ldr	r3, [r3, #12]
 800f636:	685b      	ldr	r3, [r3, #4]
 800f638:	4a36      	ldr	r2, [pc, #216]	; (800f714 <tcp_receive+0xb08>)
 800f63a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	891b      	ldrh	r3, [r3, #8]
 800f640:	461c      	mov	r4, r3
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	899b      	ldrh	r3, [r3, #12]
 800f648:	b29b      	uxth	r3, r3
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7fa fc3a 	bl	8009ec4 <lwip_htons>
 800f650:	4603      	mov	r3, r0
 800f652:	b2db      	uxtb	r3, r3
 800f654:	f003 0303 	and.w	r3, r3, #3
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d001      	beq.n	800f660 <tcp_receive+0xa54>
 800f65c:	2301      	movs	r3, #1
 800f65e:	e000      	b.n	800f662 <tcp_receive+0xa56>
 800f660:	2300      	movs	r3, #0
 800f662:	191a      	adds	r2, r3, r4
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f668:	441a      	add	r2, r3
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f672:	461c      	mov	r4, r3
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	891b      	ldrh	r3, [r3, #8]
 800f678:	461d      	mov	r5, r3
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	899b      	ldrh	r3, [r3, #12]
 800f680:	b29b      	uxth	r3, r3
 800f682:	4618      	mov	r0, r3
 800f684:	f7fa fc1e 	bl	8009ec4 <lwip_htons>
 800f688:	4603      	mov	r3, r0
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	f003 0303 	and.w	r3, r3, #3
 800f690:	2b00      	cmp	r3, #0
 800f692:	d001      	beq.n	800f698 <tcp_receive+0xa8c>
 800f694:	2301      	movs	r3, #1
 800f696:	e000      	b.n	800f69a <tcp_receive+0xa8e>
 800f698:	2300      	movs	r3, #0
 800f69a:	442b      	add	r3, r5
 800f69c:	429c      	cmp	r4, r3
 800f69e:	d206      	bcs.n	800f6ae <tcp_receive+0xaa2>
 800f6a0:	4b1e      	ldr	r3, [pc, #120]	; (800f71c <tcp_receive+0xb10>)
 800f6a2:	f240 622b 	movw	r2, #1579	; 0x62b
 800f6a6:	4923      	ldr	r1, [pc, #140]	; (800f734 <tcp_receive+0xb28>)
 800f6a8:	481e      	ldr	r0, [pc, #120]	; (800f724 <tcp_receive+0xb18>)
 800f6aa:	f008 ff09 	bl	80184c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	891b      	ldrh	r3, [r3, #8]
 800f6b2:	461c      	mov	r4, r3
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	68db      	ldr	r3, [r3, #12]
 800f6b8:	899b      	ldrh	r3, [r3, #12]
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fa fc01 	bl	8009ec4 <lwip_htons>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	f003 0303 	and.w	r3, r3, #3
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d001      	beq.n	800f6d2 <tcp_receive+0xac6>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e000      	b.n	800f6d4 <tcp_receive+0xac8>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	1919      	adds	r1, r3, r4
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6da:	b28b      	uxth	r3, r1
 800f6dc:	1ad3      	subs	r3, r2, r3
 800f6de:	b29a      	uxth	r2, r3
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f7fc fd8b 	bl	800c200 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	685b      	ldr	r3, [r3, #4]
 800f6ee:	891b      	ldrh	r3, [r3, #8]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d028      	beq.n	800f746 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f6f4:	4b0d      	ldr	r3, [pc, #52]	; (800f72c <tcp_receive+0xb20>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d01d      	beq.n	800f738 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f6fc:	4b0b      	ldr	r3, [pc, #44]	; (800f72c <tcp_receive+0xb20>)
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	4619      	mov	r1, r3
 800f706:	4610      	mov	r0, r2
 800f708:	f7fc f898 	bl	800b83c <pbuf_cat>
 800f70c:	e018      	b.n	800f740 <tcp_receive+0xb34>
 800f70e:	bf00      	nop
 800f710:	2400b6e2 	.word	0x2400b6e2
 800f714:	2400b6d8 	.word	0x2400b6d8
 800f718:	2400b6b8 	.word	0x2400b6b8
 800f71c:	0801cee0 	.word	0x0801cee0
 800f720:	0801d2c0 	.word	0x0801d2c0
 800f724:	0801cf2c 	.word	0x0801cf2c
 800f728:	0801d2fc 	.word	0x0801d2fc
 800f72c:	2400b6e8 	.word	0x2400b6e8
 800f730:	2400b6e5 	.word	0x2400b6e5
 800f734:	0801d31c 	.word	0x0801d31c
            } else {
              recv_data = cseg->p;
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	4a70      	ldr	r2, [pc, #448]	; (800f900 <tcp_receive+0xcf4>)
 800f73e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	2200      	movs	r2, #0
 800f744:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	68db      	ldr	r3, [r3, #12]
 800f74a:	899b      	ldrh	r3, [r3, #12]
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	4618      	mov	r0, r3
 800f750:	f7fa fbb8 	bl	8009ec4 <lwip_htons>
 800f754:	4603      	mov	r3, r0
 800f756:	b2db      	uxtb	r3, r3
 800f758:	f003 0301 	and.w	r3, r3, #1
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00d      	beq.n	800f77c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f760:	4b68      	ldr	r3, [pc, #416]	; (800f904 <tcp_receive+0xcf8>)
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	f043 0320 	orr.w	r3, r3, #32
 800f768:	b2da      	uxtb	r2, r3
 800f76a:	4b66      	ldr	r3, [pc, #408]	; (800f904 <tcp_receive+0xcf8>)
 800f76c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	7d1b      	ldrb	r3, [r3, #20]
 800f772:	2b04      	cmp	r3, #4
 800f774:	d102      	bne.n	800f77c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2207      	movs	r2, #7
 800f77a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f784:	68b8      	ldr	r0, [r7, #8]
 800f786:	f7fd fb78 	bl	800ce7a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d008      	beq.n	800f7a4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	685a      	ldr	r2, [r3, #4]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	f43f af43 	beq.w	800f62a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	8b5b      	ldrh	r3, [r3, #26]
 800f7a8:	f003 0301 	and.w	r3, r3, #1
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d00e      	beq.n	800f7ce <tcp_receive+0xbc2>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	8b5b      	ldrh	r3, [r3, #26]
 800f7b4:	f023 0301 	bic.w	r3, r3, #1
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	835a      	strh	r2, [r3, #26]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	8b5b      	ldrh	r3, [r3, #26]
 800f7c2:	f043 0302 	orr.w	r3, r3, #2
 800f7c6:	b29a      	uxth	r2, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f7cc:	e188      	b.n	800fae0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	8b5b      	ldrh	r3, [r3, #26]
 800f7d2:	f043 0301 	orr.w	r3, r3, #1
 800f7d6:	b29a      	uxth	r2, r3
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f7dc:	e180      	b.n	800fae0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d106      	bne.n	800f7f4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f7e6:	4848      	ldr	r0, [pc, #288]	; (800f908 <tcp_receive+0xcfc>)
 800f7e8:	f7fd fb60 	bl	800ceac <tcp_seg_copy>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	675a      	str	r2, [r3, #116]	; 0x74
 800f7f2:	e16d      	b.n	800fad0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7fe:	e157      	b.n	800fab0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f802:	68db      	ldr	r3, [r3, #12]
 800f804:	685a      	ldr	r2, [r3, #4]
 800f806:	4b41      	ldr	r3, [pc, #260]	; (800f90c <tcp_receive+0xd00>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d11d      	bne.n	800f84a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f80e:	4b3e      	ldr	r3, [pc, #248]	; (800f908 <tcp_receive+0xcfc>)
 800f810:	891a      	ldrh	r2, [r3, #8]
 800f812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f814:	891b      	ldrh	r3, [r3, #8]
 800f816:	429a      	cmp	r2, r3
 800f818:	f240 814f 	bls.w	800faba <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f81c:	483a      	ldr	r0, [pc, #232]	; (800f908 <tcp_receive+0xcfc>)
 800f81e:	f7fd fb45 	bl	800ceac <tcp_seg_copy>
 800f822:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	2b00      	cmp	r3, #0
 800f828:	f000 8149 	beq.w	800fabe <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d003      	beq.n	800f83a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f834:	697a      	ldr	r2, [r7, #20]
 800f836:	601a      	str	r2, [r3, #0]
 800f838:	e002      	b.n	800f840 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	697a      	ldr	r2, [r7, #20]
 800f83e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f842:	6978      	ldr	r0, [r7, #20]
 800f844:	f7ff f8de 	bl	800ea04 <tcp_oos_insert_segment>
                }
                break;
 800f848:	e139      	b.n	800fabe <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d117      	bne.n	800f880 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f850:	4b2e      	ldr	r3, [pc, #184]	; (800f90c <tcp_receive+0xd00>)
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	1ad3      	subs	r3, r2, r3
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	da57      	bge.n	800f910 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f860:	4829      	ldr	r0, [pc, #164]	; (800f908 <tcp_receive+0xcfc>)
 800f862:	f7fd fb23 	bl	800ceac <tcp_seg_copy>
 800f866:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f868:	69bb      	ldr	r3, [r7, #24]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	f000 8129 	beq.w	800fac2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	69ba      	ldr	r2, [r7, #24]
 800f874:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f878:	69b8      	ldr	r0, [r7, #24]
 800f87a:	f7ff f8c3 	bl	800ea04 <tcp_oos_insert_segment>
                  }
                  break;
 800f87e:	e120      	b.n	800fac2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f880:	4b22      	ldr	r3, [pc, #136]	; (800f90c <tcp_receive+0xd00>)
 800f882:	681a      	ldr	r2, [r3, #0]
 800f884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	1ad3      	subs	r3, r2, r3
 800f88c:	3b01      	subs	r3, #1
 800f88e:	2b00      	cmp	r3, #0
 800f890:	db3e      	blt.n	800f910 <tcp_receive+0xd04>
 800f892:	4b1e      	ldr	r3, [pc, #120]	; (800f90c <tcp_receive+0xd00>)
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	1ad3      	subs	r3, r2, r3
 800f89e:	3301      	adds	r3, #1
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	dc35      	bgt.n	800f910 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f8a4:	4818      	ldr	r0, [pc, #96]	; (800f908 <tcp_receive+0xcfc>)
 800f8a6:	f7fd fb01 	bl	800ceac <tcp_seg_copy>
 800f8aa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	f000 8109 	beq.w	800fac6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8bc:	8912      	ldrh	r2, [r2, #8]
 800f8be:	441a      	add	r2, r3
 800f8c0:	4b12      	ldr	r3, [pc, #72]	; (800f90c <tcp_receive+0xd00>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	1ad3      	subs	r3, r2, r3
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	dd12      	ble.n	800f8f0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f8ca:	4b10      	ldr	r3, [pc, #64]	; (800f90c <tcp_receive+0xd00>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	b29a      	uxth	r2, r3
 800f8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8d2:	68db      	ldr	r3, [r3, #12]
 800f8d4:	685b      	ldr	r3, [r3, #4]
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	1ad3      	subs	r3, r2, r3
 800f8da:	b29a      	uxth	r2, r3
 800f8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8de:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e2:	685a      	ldr	r2, [r3, #4]
 800f8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e6:	891b      	ldrh	r3, [r3, #8]
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	4610      	mov	r0, r2
 800f8ec:	f7fb fd52 	bl	800b394 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f2:	69fa      	ldr	r2, [r7, #28]
 800f8f4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f8f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f8f8:	69f8      	ldr	r0, [r7, #28]
 800f8fa:	f7ff f883 	bl	800ea04 <tcp_oos_insert_segment>
                  }
                  break;
 800f8fe:	e0e2      	b.n	800fac6 <tcp_receive+0xeba>
 800f900:	2400b6e8 	.word	0x2400b6e8
 800f904:	2400b6e5 	.word	0x2400b6e5
 800f908:	2400b6b8 	.word	0x2400b6b8
 800f90c:	2400b6d8 	.word	0x2400b6d8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f912:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	f040 80c6 	bne.w	800faaa <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f91e:	4b80      	ldr	r3, [pc, #512]	; (800fb20 <tcp_receive+0xf14>)
 800f920:	681a      	ldr	r2, [r3, #0]
 800f922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f924:	68db      	ldr	r3, [r3, #12]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	f340 80bd 	ble.w	800faaa <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	899b      	ldrh	r3, [r3, #12]
 800f936:	b29b      	uxth	r3, r3
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fa fac3 	bl	8009ec4 <lwip_htons>
 800f93e:	4603      	mov	r3, r0
 800f940:	b2db      	uxtb	r3, r3
 800f942:	f003 0301 	and.w	r3, r3, #1
 800f946:	2b00      	cmp	r3, #0
 800f948:	f040 80bf 	bne.w	800faca <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f94c:	4875      	ldr	r0, [pc, #468]	; (800fb24 <tcp_receive+0xf18>)
 800f94e:	f7fd faad 	bl	800ceac <tcp_seg_copy>
 800f952:	4602      	mov	r2, r0
 800f954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f956:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	f000 80b6 	beq.w	800face <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f96a:	8912      	ldrh	r2, [r2, #8]
 800f96c:	441a      	add	r2, r3
 800f96e:	4b6c      	ldr	r3, [pc, #432]	; (800fb20 <tcp_receive+0xf14>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	1ad3      	subs	r3, r2, r3
 800f974:	2b00      	cmp	r3, #0
 800f976:	dd12      	ble.n	800f99e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f978:	4b69      	ldr	r3, [pc, #420]	; (800fb20 <tcp_receive+0xf14>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	b29a      	uxth	r2, r3
 800f97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	b29b      	uxth	r3, r3
 800f986:	1ad3      	subs	r3, r2, r3
 800f988:	b29a      	uxth	r2, r3
 800f98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f990:	685a      	ldr	r2, [r3, #4]
 800f992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f994:	891b      	ldrh	r3, [r3, #8]
 800f996:	4619      	mov	r1, r3
 800f998:	4610      	mov	r0, r2
 800f99a:	f7fb fcfb 	bl	800b394 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f99e:	4b62      	ldr	r3, [pc, #392]	; (800fb28 <tcp_receive+0xf1c>)
 800f9a0:	881b      	ldrh	r3, [r3, #0]
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	4b5e      	ldr	r3, [pc, #376]	; (800fb20 <tcp_receive+0xf14>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	441a      	add	r2, r3
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ae:	6879      	ldr	r1, [r7, #4]
 800f9b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9b2:	440b      	add	r3, r1
 800f9b4:	1ad3      	subs	r3, r2, r3
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	f340 8089 	ble.w	800face <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	68db      	ldr	r3, [r3, #12]
 800f9c2:	899b      	ldrh	r3, [r3, #12]
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7fa fa7c 	bl	8009ec4 <lwip_htons>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	f003 0301 	and.w	r3, r3, #1
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d022      	beq.n	800fa1e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	68db      	ldr	r3, [r3, #12]
 800f9de:	899b      	ldrh	r3, [r3, #12]
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	b21b      	sxth	r3, r3
 800f9e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f9e8:	b21c      	sxth	r4, r3
 800f9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	68db      	ldr	r3, [r3, #12]
 800f9f0:	899b      	ldrh	r3, [r3, #12]
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fa fa65 	bl	8009ec4 <lwip_htons>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fa fa5c 	bl	8009ec4 <lwip_htons>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	b21b      	sxth	r3, r3
 800fa10:	4323      	orrs	r3, r4
 800fa12:	b21a      	sxth	r2, r3
 800fa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	68db      	ldr	r3, [r3, #12]
 800fa1a:	b292      	uxth	r2, r2
 800fa1c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa22:	b29a      	uxth	r2, r3
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa28:	4413      	add	r3, r2
 800fa2a:	b299      	uxth	r1, r3
 800fa2c:	4b3c      	ldr	r3, [pc, #240]	; (800fb20 <tcp_receive+0xf14>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	b29a      	uxth	r2, r3
 800fa32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	1a8a      	subs	r2, r1, r2
 800fa38:	b292      	uxth	r2, r2
 800fa3a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	685a      	ldr	r2, [r3, #4]
 800fa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	891b      	ldrh	r3, [r3, #8]
 800fa48:	4619      	mov	r1, r3
 800fa4a:	4610      	mov	r0, r2
 800fa4c:	f7fb fca2 	bl	800b394 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	891c      	ldrh	r4, [r3, #8]
 800fa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	68db      	ldr	r3, [r3, #12]
 800fa5c:	899b      	ldrh	r3, [r3, #12]
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7fa fa2f 	bl	8009ec4 <lwip_htons>
 800fa66:	4603      	mov	r3, r0
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	f003 0303 	and.w	r3, r3, #3
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d001      	beq.n	800fa76 <tcp_receive+0xe6a>
 800fa72:	2301      	movs	r3, #1
 800fa74:	e000      	b.n	800fa78 <tcp_receive+0xe6c>
 800fa76:	2300      	movs	r3, #0
 800fa78:	4423      	add	r3, r4
 800fa7a:	b29a      	uxth	r2, r3
 800fa7c:	4b2a      	ldr	r3, [pc, #168]	; (800fb28 <tcp_receive+0xf1c>)
 800fa7e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fa80:	4b29      	ldr	r3, [pc, #164]	; (800fb28 <tcp_receive+0xf1c>)
 800fa82:	881b      	ldrh	r3, [r3, #0]
 800fa84:	461a      	mov	r2, r3
 800fa86:	4b26      	ldr	r3, [pc, #152]	; (800fb20 <tcp_receive+0xf14>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	441a      	add	r2, r3
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa90:	6879      	ldr	r1, [r7, #4]
 800fa92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa94:	440b      	add	r3, r1
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d019      	beq.n	800face <tcp_receive+0xec2>
 800fa9a:	4b24      	ldr	r3, [pc, #144]	; (800fb2c <tcp_receive+0xf20>)
 800fa9c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800faa0:	4923      	ldr	r1, [pc, #140]	; (800fb30 <tcp_receive+0xf24>)
 800faa2:	4824      	ldr	r0, [pc, #144]	; (800fb34 <tcp_receive+0xf28>)
 800faa4:	f008 fd0c 	bl	80184c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800faa8:	e011      	b.n	800face <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800faaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	63bb      	str	r3, [r7, #56]	; 0x38
 800fab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f47f aea4 	bne.w	800f800 <tcp_receive+0xbf4>
 800fab8:	e00a      	b.n	800fad0 <tcp_receive+0xec4>
                break;
 800faba:	bf00      	nop
 800fabc:	e008      	b.n	800fad0 <tcp_receive+0xec4>
                break;
 800fabe:	bf00      	nop
 800fac0:	e006      	b.n	800fad0 <tcp_receive+0xec4>
                  break;
 800fac2:	bf00      	nop
 800fac4:	e004      	b.n	800fad0 <tcp_receive+0xec4>
                  break;
 800fac6:	bf00      	nop
 800fac8:	e002      	b.n	800fad0 <tcp_receive+0xec4>
                  break;
 800faca:	bf00      	nop
 800facc:	e000      	b.n	800fad0 <tcp_receive+0xec4>
                break;
 800face:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f001 fa33 	bl	8010f3c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fad6:	e003      	b.n	800fae0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f001 fa2f 	bl	8010f3c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fade:	e01a      	b.n	800fb16 <tcp_receive+0xf0a>
 800fae0:	e019      	b.n	800fb16 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fae2:	4b0f      	ldr	r3, [pc, #60]	; (800fb20 <tcp_receive+0xf14>)
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faea:	1ad3      	subs	r3, r2, r3
 800faec:	2b00      	cmp	r3, #0
 800faee:	db0a      	blt.n	800fb06 <tcp_receive+0xefa>
 800faf0:	4b0b      	ldr	r3, [pc, #44]	; (800fb20 <tcp_receive+0xf14>)
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faf8:	6879      	ldr	r1, [r7, #4]
 800fafa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fafc:	440b      	add	r3, r1
 800fafe:	1ad3      	subs	r3, r2, r3
 800fb00:	3301      	adds	r3, #1
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	dd07      	ble.n	800fb16 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	8b5b      	ldrh	r3, [r3, #26]
 800fb0a:	f043 0302 	orr.w	r3, r3, #2
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fb14:	e7ff      	b.n	800fb16 <tcp_receive+0xf0a>
 800fb16:	bf00      	nop
 800fb18:	3750      	adds	r7, #80	; 0x50
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bdb0      	pop	{r4, r5, r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	2400b6d8 	.word	0x2400b6d8
 800fb24:	2400b6b8 	.word	0x2400b6b8
 800fb28:	2400b6e2 	.word	0x2400b6e2
 800fb2c:	0801cee0 	.word	0x0801cee0
 800fb30:	0801d288 	.word	0x0801d288
 800fb34:	0801cf2c 	.word	0x0801cf2c

0800fb38 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fb3e:	4b15      	ldr	r3, [pc, #84]	; (800fb94 <tcp_get_next_optbyte+0x5c>)
 800fb40:	881b      	ldrh	r3, [r3, #0]
 800fb42:	1c5a      	adds	r2, r3, #1
 800fb44:	b291      	uxth	r1, r2
 800fb46:	4a13      	ldr	r2, [pc, #76]	; (800fb94 <tcp_get_next_optbyte+0x5c>)
 800fb48:	8011      	strh	r1, [r2, #0]
 800fb4a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fb4c:	4b12      	ldr	r3, [pc, #72]	; (800fb98 <tcp_get_next_optbyte+0x60>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d004      	beq.n	800fb5e <tcp_get_next_optbyte+0x26>
 800fb54:	4b11      	ldr	r3, [pc, #68]	; (800fb9c <tcp_get_next_optbyte+0x64>)
 800fb56:	881b      	ldrh	r3, [r3, #0]
 800fb58:	88fa      	ldrh	r2, [r7, #6]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d208      	bcs.n	800fb70 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fb5e:	4b10      	ldr	r3, [pc, #64]	; (800fba0 <tcp_get_next_optbyte+0x68>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	3314      	adds	r3, #20
 800fb64:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fb66:	88fb      	ldrh	r3, [r7, #6]
 800fb68:	683a      	ldr	r2, [r7, #0]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	e00b      	b.n	800fb88 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fb70:	88fb      	ldrh	r3, [r7, #6]
 800fb72:	b2da      	uxtb	r2, r3
 800fb74:	4b09      	ldr	r3, [pc, #36]	; (800fb9c <tcp_get_next_optbyte+0x64>)
 800fb76:	881b      	ldrh	r3, [r3, #0]
 800fb78:	b2db      	uxtb	r3, r3
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fb7e:	4b06      	ldr	r3, [pc, #24]	; (800fb98 <tcp_get_next_optbyte+0x60>)
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	797b      	ldrb	r3, [r7, #5]
 800fb84:	4413      	add	r3, r2
 800fb86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	370c      	adds	r7, #12
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr
 800fb94:	2400b6d4 	.word	0x2400b6d4
 800fb98:	2400b6d0 	.word	0x2400b6d0
 800fb9c:	2400b6ce 	.word	0x2400b6ce
 800fba0:	2400b6c8 	.word	0x2400b6c8

0800fba4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d106      	bne.n	800fbc0 <tcp_parseopt+0x1c>
 800fbb2:	4b32      	ldr	r3, [pc, #200]	; (800fc7c <tcp_parseopt+0xd8>)
 800fbb4:	f240 727d 	movw	r2, #1917	; 0x77d
 800fbb8:	4931      	ldr	r1, [pc, #196]	; (800fc80 <tcp_parseopt+0xdc>)
 800fbba:	4832      	ldr	r0, [pc, #200]	; (800fc84 <tcp_parseopt+0xe0>)
 800fbbc:	f008 fc80 	bl	80184c0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fbc0:	4b31      	ldr	r3, [pc, #196]	; (800fc88 <tcp_parseopt+0xe4>)
 800fbc2:	881b      	ldrh	r3, [r3, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d055      	beq.n	800fc74 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fbc8:	4b30      	ldr	r3, [pc, #192]	; (800fc8c <tcp_parseopt+0xe8>)
 800fbca:	2200      	movs	r2, #0
 800fbcc:	801a      	strh	r2, [r3, #0]
 800fbce:	e045      	b.n	800fc5c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fbd0:	f7ff ffb2 	bl	800fb38 <tcp_get_next_optbyte>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fbd8:	7bfb      	ldrb	r3, [r7, #15]
 800fbda:	2b02      	cmp	r3, #2
 800fbdc:	d006      	beq.n	800fbec <tcp_parseopt+0x48>
 800fbde:	2b02      	cmp	r3, #2
 800fbe0:	dc2b      	bgt.n	800fc3a <tcp_parseopt+0x96>
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d041      	beq.n	800fc6a <tcp_parseopt+0xc6>
 800fbe6:	2b01      	cmp	r3, #1
 800fbe8:	d127      	bne.n	800fc3a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fbea:	e037      	b.n	800fc5c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fbec:	f7ff ffa4 	bl	800fb38 <tcp_get_next_optbyte>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	2b04      	cmp	r3, #4
 800fbf4:	d13b      	bne.n	800fc6e <tcp_parseopt+0xca>
 800fbf6:	4b25      	ldr	r3, [pc, #148]	; (800fc8c <tcp_parseopt+0xe8>)
 800fbf8:	881b      	ldrh	r3, [r3, #0]
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	4a22      	ldr	r2, [pc, #136]	; (800fc88 <tcp_parseopt+0xe4>)
 800fbfe:	8812      	ldrh	r2, [r2, #0]
 800fc00:	4293      	cmp	r3, r2
 800fc02:	da34      	bge.n	800fc6e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fc04:	f7ff ff98 	bl	800fb38 <tcp_get_next_optbyte>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	021b      	lsls	r3, r3, #8
 800fc0e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fc10:	f7ff ff92 	bl	800fb38 <tcp_get_next_optbyte>
 800fc14:	4603      	mov	r3, r0
 800fc16:	b29a      	uxth	r2, r3
 800fc18:	89bb      	ldrh	r3, [r7, #12]
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fc1e:	89bb      	ldrh	r3, [r7, #12]
 800fc20:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fc24:	d804      	bhi.n	800fc30 <tcp_parseopt+0x8c>
 800fc26:	89bb      	ldrh	r3, [r7, #12]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d001      	beq.n	800fc30 <tcp_parseopt+0x8c>
 800fc2c:	89ba      	ldrh	r2, [r7, #12]
 800fc2e:	e001      	b.n	800fc34 <tcp_parseopt+0x90>
 800fc30:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fc38:	e010      	b.n	800fc5c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fc3a:	f7ff ff7d 	bl	800fb38 <tcp_get_next_optbyte>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fc42:	7afb      	ldrb	r3, [r7, #11]
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d914      	bls.n	800fc72 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fc48:	7afb      	ldrb	r3, [r7, #11]
 800fc4a:	b29a      	uxth	r2, r3
 800fc4c:	4b0f      	ldr	r3, [pc, #60]	; (800fc8c <tcp_parseopt+0xe8>)
 800fc4e:	881b      	ldrh	r3, [r3, #0]
 800fc50:	4413      	add	r3, r2
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	3b02      	subs	r3, #2
 800fc56:	b29a      	uxth	r2, r3
 800fc58:	4b0c      	ldr	r3, [pc, #48]	; (800fc8c <tcp_parseopt+0xe8>)
 800fc5a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fc5c:	4b0b      	ldr	r3, [pc, #44]	; (800fc8c <tcp_parseopt+0xe8>)
 800fc5e:	881a      	ldrh	r2, [r3, #0]
 800fc60:	4b09      	ldr	r3, [pc, #36]	; (800fc88 <tcp_parseopt+0xe4>)
 800fc62:	881b      	ldrh	r3, [r3, #0]
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d3b3      	bcc.n	800fbd0 <tcp_parseopt+0x2c>
 800fc68:	e004      	b.n	800fc74 <tcp_parseopt+0xd0>
          return;
 800fc6a:	bf00      	nop
 800fc6c:	e002      	b.n	800fc74 <tcp_parseopt+0xd0>
            return;
 800fc6e:	bf00      	nop
 800fc70:	e000      	b.n	800fc74 <tcp_parseopt+0xd0>
            return;
 800fc72:	bf00      	nop
      }
    }
  }
}
 800fc74:	3710      	adds	r7, #16
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	0801cee0 	.word	0x0801cee0
 800fc80:	0801d344 	.word	0x0801d344
 800fc84:	0801cf2c 	.word	0x0801cf2c
 800fc88:	2400b6cc 	.word	0x2400b6cc
 800fc8c:	2400b6d4 	.word	0x2400b6d4

0800fc90 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fc90:	b480      	push	{r7}
 800fc92:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fc94:	4b05      	ldr	r3, [pc, #20]	; (800fcac <tcp_trigger_input_pcb_close+0x1c>)
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	f043 0310 	orr.w	r3, r3, #16
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	4b03      	ldr	r3, [pc, #12]	; (800fcac <tcp_trigger_input_pcb_close+0x1c>)
 800fca0:	701a      	strb	r2, [r3, #0]
}
 800fca2:	bf00      	nop
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	2400b6e5 	.word	0x2400b6e5

0800fcb0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	60f8      	str	r0, [r7, #12]
 800fcb8:	60b9      	str	r1, [r7, #8]
 800fcba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00a      	beq.n	800fcd8 <tcp_route+0x28>
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	7a1b      	ldrb	r3, [r3, #8]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d006      	beq.n	800fcd8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	7a1b      	ldrb	r3, [r3, #8]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fb f958 	bl	800af84 <netif_get_by_index>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	e003      	b.n	800fce0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f003 fa17 	bl	801310c <ip4_route>
 800fcde:	4603      	mov	r3, r0
  }
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3710      	adds	r7, #16
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fce8:	b590      	push	{r4, r7, lr}
 800fcea:	b087      	sub	sp, #28
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	603b      	str	r3, [r7, #0]
 800fcf4:	4613      	mov	r3, r2
 800fcf6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d105      	bne.n	800fd0a <tcp_create_segment+0x22>
 800fcfe:	4b44      	ldr	r3, [pc, #272]	; (800fe10 <tcp_create_segment+0x128>)
 800fd00:	22a3      	movs	r2, #163	; 0xa3
 800fd02:	4944      	ldr	r1, [pc, #272]	; (800fe14 <tcp_create_segment+0x12c>)
 800fd04:	4844      	ldr	r0, [pc, #272]	; (800fe18 <tcp_create_segment+0x130>)
 800fd06:	f008 fbdb 	bl	80184c0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d105      	bne.n	800fd1c <tcp_create_segment+0x34>
 800fd10:	4b3f      	ldr	r3, [pc, #252]	; (800fe10 <tcp_create_segment+0x128>)
 800fd12:	22a4      	movs	r2, #164	; 0xa4
 800fd14:	4941      	ldr	r1, [pc, #260]	; (800fe1c <tcp_create_segment+0x134>)
 800fd16:	4840      	ldr	r0, [pc, #256]	; (800fe18 <tcp_create_segment+0x130>)
 800fd18:	f008 fbd2 	bl	80184c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fd20:	009b      	lsls	r3, r3, #2
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	f003 0304 	and.w	r3, r3, #4
 800fd28:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fd2a:	2003      	movs	r0, #3
 800fd2c:	f7fa fd9e 	bl	800a86c <memp_malloc>
 800fd30:	6138      	str	r0, [r7, #16]
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d104      	bne.n	800fd42 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fd38:	68b8      	ldr	r0, [r7, #8]
 800fd3a:	f7fb fcb1 	bl	800b6a0 <pbuf_free>
    return NULL;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	e061      	b.n	800fe06 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fd48:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fd50:	693b      	ldr	r3, [r7, #16]
 800fd52:	68ba      	ldr	r2, [r7, #8]
 800fd54:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	891a      	ldrh	r2, [r3, #8]
 800fd5a:	7dfb      	ldrb	r3, [r7, #23]
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d205      	bcs.n	800fd6e <tcp_create_segment+0x86>
 800fd62:	4b2b      	ldr	r3, [pc, #172]	; (800fe10 <tcp_create_segment+0x128>)
 800fd64:	22b0      	movs	r2, #176	; 0xb0
 800fd66:	492e      	ldr	r1, [pc, #184]	; (800fe20 <tcp_create_segment+0x138>)
 800fd68:	482b      	ldr	r0, [pc, #172]	; (800fe18 <tcp_create_segment+0x130>)
 800fd6a:	f008 fba9 	bl	80184c0 <iprintf>
  seg->len = p->tot_len - optlen;
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	891a      	ldrh	r2, [r3, #8]
 800fd72:	7dfb      	ldrb	r3, [r7, #23]
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	1ad3      	subs	r3, r2, r3
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fd7e:	2114      	movs	r1, #20
 800fd80:	68b8      	ldr	r0, [r7, #8]
 800fd82:	f7fb fbf7 	bl	800b574 <pbuf_add_header>
 800fd86:	4603      	mov	r3, r0
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d004      	beq.n	800fd96 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fd8c:	6938      	ldr	r0, [r7, #16]
 800fd8e:	f7fd f874 	bl	800ce7a <tcp_seg_free>
    return NULL;
 800fd92:	2300      	movs	r3, #0
 800fd94:	e037      	b.n	800fe06 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	685a      	ldr	r2, [r3, #4]
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	8ada      	ldrh	r2, [r3, #22]
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	68dc      	ldr	r4, [r3, #12]
 800fda8:	4610      	mov	r0, r2
 800fdaa:	f7fa f88b 	bl	8009ec4 <lwip_htons>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	8b1a      	ldrh	r2, [r3, #24]
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	68dc      	ldr	r4, [r3, #12]
 800fdba:	4610      	mov	r0, r2
 800fdbc:	f7fa f882 	bl	8009ec4 <lwip_htons>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	68dc      	ldr	r4, [r3, #12]
 800fdc8:	6838      	ldr	r0, [r7, #0]
 800fdca:	f7fa f890 	bl	8009eee <lwip_htonl>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fdd2:	7dfb      	ldrb	r3, [r7, #23]
 800fdd4:	089b      	lsrs	r3, r3, #2
 800fdd6:	b2db      	uxtb	r3, r3
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	3305      	adds	r3, #5
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	031b      	lsls	r3, r3, #12
 800fde0:	b29a      	uxth	r2, r3
 800fde2:	79fb      	ldrb	r3, [r7, #7]
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	4313      	orrs	r3, r2
 800fde8:	b29a      	uxth	r2, r3
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	68dc      	ldr	r4, [r3, #12]
 800fdee:	4610      	mov	r0, r2
 800fdf0:	f7fa f868 	bl	8009ec4 <lwip_htons>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	749a      	strb	r2, [r3, #18]
 800fe00:	2200      	movs	r2, #0
 800fe02:	74da      	strb	r2, [r3, #19]
  return seg;
 800fe04:	693b      	ldr	r3, [r7, #16]
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	371c      	adds	r7, #28
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd90      	pop	{r4, r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	0801d360 	.word	0x0801d360
 800fe14:	0801d394 	.word	0x0801d394
 800fe18:	0801d3b4 	.word	0x0801d3b4
 800fe1c:	0801d3dc 	.word	0x0801d3dc
 800fe20:	0801d400 	.word	0x0801d400

0800fe24 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fe24:	b590      	push	{r4, r7, lr}
 800fe26:	b08b      	sub	sp, #44	; 0x2c
 800fe28:	af02      	add	r7, sp, #8
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fe30:	2300      	movs	r3, #0
 800fe32:	61fb      	str	r3, [r7, #28]
 800fe34:	2300      	movs	r3, #0
 800fe36:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d106      	bne.n	800fe50 <tcp_split_unsent_seg+0x2c>
 800fe42:	4b95      	ldr	r3, [pc, #596]	; (8010098 <tcp_split_unsent_seg+0x274>)
 800fe44:	f240 324b 	movw	r2, #843	; 0x34b
 800fe48:	4994      	ldr	r1, [pc, #592]	; (801009c <tcp_split_unsent_seg+0x278>)
 800fe4a:	4895      	ldr	r0, [pc, #596]	; (80100a0 <tcp_split_unsent_seg+0x27c>)
 800fe4c:	f008 fb38 	bl	80184c0 <iprintf>

  useg = pcb->unsent;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe54:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d102      	bne.n	800fe62 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fe5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe60:	e116      	b.n	8010090 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fe62:	887b      	ldrh	r3, [r7, #2]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d109      	bne.n	800fe7c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fe68:	4b8b      	ldr	r3, [pc, #556]	; (8010098 <tcp_split_unsent_seg+0x274>)
 800fe6a:	f240 3253 	movw	r2, #851	; 0x353
 800fe6e:	498d      	ldr	r1, [pc, #564]	; (80100a4 <tcp_split_unsent_seg+0x280>)
 800fe70:	488b      	ldr	r0, [pc, #556]	; (80100a0 <tcp_split_unsent_seg+0x27c>)
 800fe72:	f008 fb25 	bl	80184c0 <iprintf>
    return ERR_VAL;
 800fe76:	f06f 0305 	mvn.w	r3, #5
 800fe7a:	e109      	b.n	8010090 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	891b      	ldrh	r3, [r3, #8]
 800fe80:	887a      	ldrh	r2, [r7, #2]
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d301      	bcc.n	800fe8a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fe86:	2300      	movs	r3, #0
 800fe88:	e102      	b.n	8010090 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe8e:	887a      	ldrh	r2, [r7, #2]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d906      	bls.n	800fea2 <tcp_split_unsent_seg+0x7e>
 800fe94:	4b80      	ldr	r3, [pc, #512]	; (8010098 <tcp_split_unsent_seg+0x274>)
 800fe96:	f240 325b 	movw	r2, #859	; 0x35b
 800fe9a:	4983      	ldr	r1, [pc, #524]	; (80100a8 <tcp_split_unsent_seg+0x284>)
 800fe9c:	4880      	ldr	r0, [pc, #512]	; (80100a0 <tcp_split_unsent_seg+0x27c>)
 800fe9e:	f008 fb0f 	bl	80184c0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	891b      	ldrh	r3, [r3, #8]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d106      	bne.n	800feb8 <tcp_split_unsent_seg+0x94>
 800feaa:	4b7b      	ldr	r3, [pc, #492]	; (8010098 <tcp_split_unsent_seg+0x274>)
 800feac:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800feb0:	497e      	ldr	r1, [pc, #504]	; (80100ac <tcp_split_unsent_seg+0x288>)
 800feb2:	487b      	ldr	r0, [pc, #492]	; (80100a0 <tcp_split_unsent_seg+0x27c>)
 800feb4:	f008 fb04 	bl	80184c0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	7a9b      	ldrb	r3, [r3, #10]
 800febc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800febe:	7bfb      	ldrb	r3, [r7, #15]
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	b2db      	uxtb	r3, r3
 800fec4:	f003 0304 	and.w	r3, r3, #4
 800fec8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	891a      	ldrh	r2, [r3, #8]
 800fece:	887b      	ldrh	r3, [r7, #2]
 800fed0:	1ad3      	subs	r3, r2, r3
 800fed2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fed4:	7bbb      	ldrb	r3, [r7, #14]
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	89bb      	ldrh	r3, [r7, #12]
 800feda:	4413      	add	r3, r2
 800fedc:	b29b      	uxth	r3, r3
 800fede:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fee2:	4619      	mov	r1, r3
 800fee4:	2036      	movs	r0, #54	; 0x36
 800fee6:	f7fb f8f7 	bl	800b0d8 <pbuf_alloc>
 800feea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	f000 80b7 	beq.w	8010062 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	891a      	ldrh	r2, [r3, #8]
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	891b      	ldrh	r3, [r3, #8]
 800fefe:	1ad3      	subs	r3, r2, r3
 800ff00:	b29a      	uxth	r2, r3
 800ff02:	887b      	ldrh	r3, [r7, #2]
 800ff04:	4413      	add	r3, r2
 800ff06:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	6858      	ldr	r0, [r3, #4]
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	685a      	ldr	r2, [r3, #4]
 800ff10:	7bbb      	ldrb	r3, [r7, #14]
 800ff12:	18d1      	adds	r1, r2, r3
 800ff14:	897b      	ldrh	r3, [r7, #10]
 800ff16:	89ba      	ldrh	r2, [r7, #12]
 800ff18:	f7fb fdc8 	bl	800baac <pbuf_copy_partial>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	461a      	mov	r2, r3
 800ff20:	89bb      	ldrh	r3, [r7, #12]
 800ff22:	4293      	cmp	r3, r2
 800ff24:	f040 809f 	bne.w	8010066 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	899b      	ldrh	r3, [r3, #12]
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7f9 ffc7 	bl	8009ec4 <lwip_htons>
 800ff36:	4603      	mov	r3, r0
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff3e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ff40:	2300      	movs	r3, #0
 800ff42:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ff44:	7efb      	ldrb	r3, [r7, #27]
 800ff46:	f003 0308 	and.w	r3, r3, #8
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d007      	beq.n	800ff5e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ff4e:	7efb      	ldrb	r3, [r7, #27]
 800ff50:	f023 0308 	bic.w	r3, r3, #8
 800ff54:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ff56:	7ebb      	ldrb	r3, [r7, #26]
 800ff58:	f043 0308 	orr.w	r3, r3, #8
 800ff5c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ff5e:	7efb      	ldrb	r3, [r7, #27]
 800ff60:	f003 0301 	and.w	r3, r3, #1
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d007      	beq.n	800ff78 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ff68:	7efb      	ldrb	r3, [r7, #27]
 800ff6a:	f023 0301 	bic.w	r3, r3, #1
 800ff6e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ff70:	7ebb      	ldrb	r3, [r7, #26]
 800ff72:	f043 0301 	orr.w	r3, r3, #1
 800ff76:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7f9 ffb5 	bl	8009eee <lwip_htonl>
 800ff84:	4602      	mov	r2, r0
 800ff86:	887b      	ldrh	r3, [r7, #2]
 800ff88:	18d1      	adds	r1, r2, r3
 800ff8a:	7eba      	ldrb	r2, [r7, #26]
 800ff8c:	7bfb      	ldrb	r3, [r7, #15]
 800ff8e:	9300      	str	r3, [sp, #0]
 800ff90:	460b      	mov	r3, r1
 800ff92:	6939      	ldr	r1, [r7, #16]
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f7ff fea7 	bl	800fce8 <tcp_create_segment>
 800ff9a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d063      	beq.n	801006a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7fb fc08 	bl	800b7bc <pbuf_clen>
 800ffac:	4603      	mov	r3, r0
 800ffae:	461a      	mov	r2, r3
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffb6:	1a9b      	subs	r3, r3, r2
 800ffb8:	b29a      	uxth	r2, r3
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	6858      	ldr	r0, [r3, #4]
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	891a      	ldrh	r2, [r3, #8]
 800ffca:	89bb      	ldrh	r3, [r7, #12]
 800ffcc:	1ad3      	subs	r3, r2, r3
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	f7fb f9df 	bl	800b394 <pbuf_realloc>
  useg->len -= remainder;
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	891a      	ldrh	r2, [r3, #8]
 800ffda:	89bb      	ldrh	r3, [r7, #12]
 800ffdc:	1ad3      	subs	r3, r2, r3
 800ffde:	b29a      	uxth	r2, r3
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	899b      	ldrh	r3, [r3, #12]
 800ffea:	b29c      	uxth	r4, r3
 800ffec:	7efb      	ldrb	r3, [r7, #27]
 800ffee:	b29b      	uxth	r3, r3
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7f9 ff67 	bl	8009ec4 <lwip_htons>
 800fff6:	4603      	mov	r3, r0
 800fff8:	461a      	mov	r2, r3
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	68db      	ldr	r3, [r3, #12]
 800fffe:	4322      	orrs	r2, r4
 8010000:	b292      	uxth	r2, r2
 8010002:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	4618      	mov	r0, r3
 801000a:	f7fb fbd7 	bl	800b7bc <pbuf_clen>
 801000e:	4603      	mov	r3, r0
 8010010:	461a      	mov	r2, r3
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010018:	4413      	add	r3, r2
 801001a:	b29a      	uxth	r2, r3
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010022:	69fb      	ldr	r3, [r7, #28]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	4618      	mov	r0, r3
 8010028:	f7fb fbc8 	bl	800b7bc <pbuf_clen>
 801002c:	4603      	mov	r3, r0
 801002e:	461a      	mov	r2, r3
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010036:	4413      	add	r3, r2
 8010038:	b29a      	uxth	r2, r3
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	681a      	ldr	r2, [r3, #0]
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	69fa      	ldr	r2, [r7, #28]
 801004c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801004e:	69fb      	ldr	r3, [r7, #28]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d103      	bne.n	801005e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2200      	movs	r2, #0
 801005a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801005e:	2300      	movs	r3, #0
 8010060:	e016      	b.n	8010090 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010062:	bf00      	nop
 8010064:	e002      	b.n	801006c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010066:	bf00      	nop
 8010068:	e000      	b.n	801006c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801006a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d006      	beq.n	8010080 <tcp_split_unsent_seg+0x25c>
 8010072:	4b09      	ldr	r3, [pc, #36]	; (8010098 <tcp_split_unsent_seg+0x274>)
 8010074:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010078:	490d      	ldr	r1, [pc, #52]	; (80100b0 <tcp_split_unsent_seg+0x28c>)
 801007a:	4809      	ldr	r0, [pc, #36]	; (80100a0 <tcp_split_unsent_seg+0x27c>)
 801007c:	f008 fa20 	bl	80184c0 <iprintf>
  if (p != NULL) {
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d002      	beq.n	801008c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010086:	6938      	ldr	r0, [r7, #16]
 8010088:	f7fb fb0a 	bl	800b6a0 <pbuf_free>
  }

  return ERR_MEM;
 801008c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010090:	4618      	mov	r0, r3
 8010092:	3724      	adds	r7, #36	; 0x24
 8010094:	46bd      	mov	sp, r7
 8010096:	bd90      	pop	{r4, r7, pc}
 8010098:	0801d360 	.word	0x0801d360
 801009c:	0801d6f4 	.word	0x0801d6f4
 80100a0:	0801d3b4 	.word	0x0801d3b4
 80100a4:	0801d718 	.word	0x0801d718
 80100a8:	0801d73c 	.word	0x0801d73c
 80100ac:	0801d74c 	.word	0x0801d74c
 80100b0:	0801d75c 	.word	0x0801d75c

080100b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80100b4:	b590      	push	{r4, r7, lr}
 80100b6:	b085      	sub	sp, #20
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d106      	bne.n	80100d0 <tcp_send_fin+0x1c>
 80100c2:	4b21      	ldr	r3, [pc, #132]	; (8010148 <tcp_send_fin+0x94>)
 80100c4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80100c8:	4920      	ldr	r1, [pc, #128]	; (801014c <tcp_send_fin+0x98>)
 80100ca:	4821      	ldr	r0, [pc, #132]	; (8010150 <tcp_send_fin+0x9c>)
 80100cc:	f008 f9f8 	bl	80184c0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d02e      	beq.n	8010136 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100dc:	60fb      	str	r3, [r7, #12]
 80100de:	e002      	b.n	80100e6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d1f8      	bne.n	80100e0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	899b      	ldrh	r3, [r3, #12]
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7f9 fee4 	bl	8009ec4 <lwip_htons>
 80100fc:	4603      	mov	r3, r0
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	f003 0307 	and.w	r3, r3, #7
 8010104:	2b00      	cmp	r3, #0
 8010106:	d116      	bne.n	8010136 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	68db      	ldr	r3, [r3, #12]
 801010c:	899b      	ldrh	r3, [r3, #12]
 801010e:	b29c      	uxth	r4, r3
 8010110:	2001      	movs	r0, #1
 8010112:	f7f9 fed7 	bl	8009ec4 <lwip_htons>
 8010116:	4603      	mov	r3, r0
 8010118:	461a      	mov	r2, r3
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	4322      	orrs	r2, r4
 8010120:	b292      	uxth	r2, r2
 8010122:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	8b5b      	ldrh	r3, [r3, #26]
 8010128:	f043 0320 	orr.w	r3, r3, #32
 801012c:	b29a      	uxth	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010132:	2300      	movs	r3, #0
 8010134:	e004      	b.n	8010140 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010136:	2101      	movs	r1, #1
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 f80b 	bl	8010154 <tcp_enqueue_flags>
 801013e:	4603      	mov	r3, r0
}
 8010140:	4618      	mov	r0, r3
 8010142:	3714      	adds	r7, #20
 8010144:	46bd      	mov	sp, r7
 8010146:	bd90      	pop	{r4, r7, pc}
 8010148:	0801d360 	.word	0x0801d360
 801014c:	0801d768 	.word	0x0801d768
 8010150:	0801d3b4 	.word	0x0801d3b4

08010154 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b08a      	sub	sp, #40	; 0x28
 8010158:	af02      	add	r7, sp, #8
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	460b      	mov	r3, r1
 801015e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010160:	2300      	movs	r3, #0
 8010162:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010164:	2300      	movs	r3, #0
 8010166:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010168:	78fb      	ldrb	r3, [r7, #3]
 801016a:	f003 0303 	and.w	r3, r3, #3
 801016e:	2b00      	cmp	r3, #0
 8010170:	d106      	bne.n	8010180 <tcp_enqueue_flags+0x2c>
 8010172:	4b67      	ldr	r3, [pc, #412]	; (8010310 <tcp_enqueue_flags+0x1bc>)
 8010174:	f240 4211 	movw	r2, #1041	; 0x411
 8010178:	4966      	ldr	r1, [pc, #408]	; (8010314 <tcp_enqueue_flags+0x1c0>)
 801017a:	4867      	ldr	r0, [pc, #412]	; (8010318 <tcp_enqueue_flags+0x1c4>)
 801017c:	f008 f9a0 	bl	80184c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d106      	bne.n	8010194 <tcp_enqueue_flags+0x40>
 8010186:	4b62      	ldr	r3, [pc, #392]	; (8010310 <tcp_enqueue_flags+0x1bc>)
 8010188:	f240 4213 	movw	r2, #1043	; 0x413
 801018c:	4963      	ldr	r1, [pc, #396]	; (801031c <tcp_enqueue_flags+0x1c8>)
 801018e:	4862      	ldr	r0, [pc, #392]	; (8010318 <tcp_enqueue_flags+0x1c4>)
 8010190:	f008 f996 	bl	80184c0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010194:	78fb      	ldrb	r3, [r7, #3]
 8010196:	f003 0302 	and.w	r3, r3, #2
 801019a:	2b00      	cmp	r3, #0
 801019c:	d001      	beq.n	80101a2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801019e:	2301      	movs	r3, #1
 80101a0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80101a2:	7ffb      	ldrb	r3, [r7, #31]
 80101a4:	009b      	lsls	r3, r3, #2
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	f003 0304 	and.w	r3, r3, #4
 80101ac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80101ae:	7dfb      	ldrb	r3, [r7, #23]
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80101b6:	4619      	mov	r1, r3
 80101b8:	2036      	movs	r0, #54	; 0x36
 80101ba:	f7fa ff8d 	bl	800b0d8 <pbuf_alloc>
 80101be:	6138      	str	r0, [r7, #16]
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d109      	bne.n	80101da <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	8b5b      	ldrh	r3, [r3, #26]
 80101ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101ce:	b29a      	uxth	r2, r3
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80101d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101d8:	e095      	b.n	8010306 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	895a      	ldrh	r2, [r3, #10]
 80101de:	7dfb      	ldrb	r3, [r7, #23]
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d206      	bcs.n	80101f4 <tcp_enqueue_flags+0xa0>
 80101e6:	4b4a      	ldr	r3, [pc, #296]	; (8010310 <tcp_enqueue_flags+0x1bc>)
 80101e8:	f240 4239 	movw	r2, #1081	; 0x439
 80101ec:	494c      	ldr	r1, [pc, #304]	; (8010320 <tcp_enqueue_flags+0x1cc>)
 80101ee:	484a      	ldr	r0, [pc, #296]	; (8010318 <tcp_enqueue_flags+0x1c4>)
 80101f0:	f008 f966 	bl	80184c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80101f8:	78fa      	ldrb	r2, [r7, #3]
 80101fa:	7ffb      	ldrb	r3, [r7, #31]
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	460b      	mov	r3, r1
 8010200:	6939      	ldr	r1, [r7, #16]
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f7ff fd70 	bl	800fce8 <tcp_create_segment>
 8010208:	60f8      	str	r0, [r7, #12]
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d109      	bne.n	8010224 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	8b5b      	ldrh	r3, [r3, #26]
 8010214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010218:	b29a      	uxth	r2, r3
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801021e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010222:	e070      	b.n	8010306 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	f003 0303 	and.w	r3, r3, #3
 801022c:	2b00      	cmp	r3, #0
 801022e:	d006      	beq.n	801023e <tcp_enqueue_flags+0xea>
 8010230:	4b37      	ldr	r3, [pc, #220]	; (8010310 <tcp_enqueue_flags+0x1bc>)
 8010232:	f240 4242 	movw	r2, #1090	; 0x442
 8010236:	493b      	ldr	r1, [pc, #236]	; (8010324 <tcp_enqueue_flags+0x1d0>)
 8010238:	4837      	ldr	r0, [pc, #220]	; (8010318 <tcp_enqueue_flags+0x1c4>)
 801023a:	f008 f941 	bl	80184c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	891b      	ldrh	r3, [r3, #8]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d006      	beq.n	8010254 <tcp_enqueue_flags+0x100>
 8010246:	4b32      	ldr	r3, [pc, #200]	; (8010310 <tcp_enqueue_flags+0x1bc>)
 8010248:	f240 4243 	movw	r2, #1091	; 0x443
 801024c:	4936      	ldr	r1, [pc, #216]	; (8010328 <tcp_enqueue_flags+0x1d4>)
 801024e:	4832      	ldr	r0, [pc, #200]	; (8010318 <tcp_enqueue_flags+0x1c4>)
 8010250:	f008 f936 	bl	80184c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010258:	2b00      	cmp	r3, #0
 801025a:	d103      	bne.n	8010264 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	68fa      	ldr	r2, [r7, #12]
 8010260:	66da      	str	r2, [r3, #108]	; 0x6c
 8010262:	e00d      	b.n	8010280 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010268:	61bb      	str	r3, [r7, #24]
 801026a:	e002      	b.n	8010272 <tcp_enqueue_flags+0x11e>
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	61bb      	str	r3, [r7, #24]
 8010272:	69bb      	ldr	r3, [r7, #24]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d1f8      	bne.n	801026c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801027a:	69bb      	ldr	r3, [r7, #24]
 801027c:	68fa      	ldr	r2, [r7, #12]
 801027e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2200      	movs	r2, #0
 8010284:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010288:	78fb      	ldrb	r3, [r7, #3]
 801028a:	f003 0302 	and.w	r3, r3, #2
 801028e:	2b00      	cmp	r3, #0
 8010290:	d104      	bne.n	801029c <tcp_enqueue_flags+0x148>
 8010292:	78fb      	ldrb	r3, [r7, #3]
 8010294:	f003 0301 	and.w	r3, r3, #1
 8010298:	2b00      	cmp	r3, #0
 801029a:	d004      	beq.n	80102a6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80102a0:	1c5a      	adds	r2, r3, #1
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80102a6:	78fb      	ldrb	r3, [r7, #3]
 80102a8:	f003 0301 	and.w	r3, r3, #1
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d006      	beq.n	80102be <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	8b5b      	ldrh	r3, [r3, #26]
 80102b4:	f043 0320 	orr.w	r3, r3, #32
 80102b8:	b29a      	uxth	r2, r3
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7fb fa7a 	bl	800b7bc <pbuf_clen>
 80102c8:	4603      	mov	r3, r0
 80102ca:	461a      	mov	r2, r3
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102d2:	4413      	add	r3, r2
 80102d4:	b29a      	uxth	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d00e      	beq.n	8010304 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d10a      	bne.n	8010304 <tcp_enqueue_flags+0x1b0>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d106      	bne.n	8010304 <tcp_enqueue_flags+0x1b0>
 80102f6:	4b06      	ldr	r3, [pc, #24]	; (8010310 <tcp_enqueue_flags+0x1bc>)
 80102f8:	f240 4265 	movw	r2, #1125	; 0x465
 80102fc:	490b      	ldr	r1, [pc, #44]	; (801032c <tcp_enqueue_flags+0x1d8>)
 80102fe:	4806      	ldr	r0, [pc, #24]	; (8010318 <tcp_enqueue_flags+0x1c4>)
 8010300:	f008 f8de 	bl	80184c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010304:	2300      	movs	r3, #0
}
 8010306:	4618      	mov	r0, r3
 8010308:	3720      	adds	r7, #32
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	0801d360 	.word	0x0801d360
 8010314:	0801d784 	.word	0x0801d784
 8010318:	0801d3b4 	.word	0x0801d3b4
 801031c:	0801d7dc 	.word	0x0801d7dc
 8010320:	0801d7fc 	.word	0x0801d7fc
 8010324:	0801d838 	.word	0x0801d838
 8010328:	0801d850 	.word	0x0801d850
 801032c:	0801d87c 	.word	0x0801d87c

08010330 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010330:	b5b0      	push	{r4, r5, r7, lr}
 8010332:	b08a      	sub	sp, #40	; 0x28
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d106      	bne.n	801034c <tcp_output+0x1c>
 801033e:	4b9e      	ldr	r3, [pc, #632]	; (80105b8 <tcp_output+0x288>)
 8010340:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010344:	499d      	ldr	r1, [pc, #628]	; (80105bc <tcp_output+0x28c>)
 8010346:	489e      	ldr	r0, [pc, #632]	; (80105c0 <tcp_output+0x290>)
 8010348:	f008 f8ba 	bl	80184c0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	7d1b      	ldrb	r3, [r3, #20]
 8010350:	2b01      	cmp	r3, #1
 8010352:	d106      	bne.n	8010362 <tcp_output+0x32>
 8010354:	4b98      	ldr	r3, [pc, #608]	; (80105b8 <tcp_output+0x288>)
 8010356:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801035a:	499a      	ldr	r1, [pc, #616]	; (80105c4 <tcp_output+0x294>)
 801035c:	4898      	ldr	r0, [pc, #608]	; (80105c0 <tcp_output+0x290>)
 801035e:	f008 f8af 	bl	80184c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010362:	4b99      	ldr	r3, [pc, #612]	; (80105c8 <tcp_output+0x298>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	429a      	cmp	r2, r3
 801036a:	d101      	bne.n	8010370 <tcp_output+0x40>
    return ERR_OK;
 801036c:	2300      	movs	r3, #0
 801036e:	e1ce      	b.n	801070e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801037c:	4293      	cmp	r3, r2
 801037e:	bf28      	it	cs
 8010380:	4613      	movcs	r3, r2
 8010382:	b29b      	uxth	r3, r3
 8010384:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801038a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801038c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038e:	2b00      	cmp	r3, #0
 8010390:	d10b      	bne.n	80103aa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	8b5b      	ldrh	r3, [r3, #26]
 8010396:	f003 0302 	and.w	r3, r3, #2
 801039a:	2b00      	cmp	r3, #0
 801039c:	f000 81aa 	beq.w	80106f4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 fdcb 	bl	8010f3c <tcp_send_empty_ack>
 80103a6:	4603      	mov	r3, r0
 80103a8:	e1b1      	b.n	801070e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80103aa:	6879      	ldr	r1, [r7, #4]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	3304      	adds	r3, #4
 80103b0:	461a      	mov	r2, r3
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f7ff fc7c 	bl	800fcb0 <tcp_route>
 80103b8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d102      	bne.n	80103c6 <tcp_output+0x96>
    return ERR_RTE;
 80103c0:	f06f 0303 	mvn.w	r3, #3
 80103c4:	e1a3      	b.n	801070e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d003      	beq.n	80103d4 <tcp_output+0xa4>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d111      	bne.n	80103f8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d002      	beq.n	80103e0 <tcp_output+0xb0>
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	3304      	adds	r3, #4
 80103de:	e000      	b.n	80103e2 <tcp_output+0xb2>
 80103e0:	2300      	movs	r3, #0
 80103e2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d102      	bne.n	80103f0 <tcp_output+0xc0>
      return ERR_RTE;
 80103ea:	f06f 0303 	mvn.w	r3, #3
 80103ee:	e18e      	b.n	801070e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	681a      	ldr	r2, [r3, #0]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80103f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	685b      	ldr	r3, [r3, #4]
 80103fe:	4618      	mov	r0, r3
 8010400:	f7f9 fd75 	bl	8009eee <lwip_htonl>
 8010404:	4602      	mov	r2, r0
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801040a:	1ad3      	subs	r3, r2, r3
 801040c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801040e:	8912      	ldrh	r2, [r2, #8]
 8010410:	4413      	add	r3, r2
 8010412:	69ba      	ldr	r2, [r7, #24]
 8010414:	429a      	cmp	r2, r3
 8010416:	d227      	bcs.n	8010468 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801041e:	461a      	mov	r2, r3
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	4293      	cmp	r3, r2
 8010424:	d114      	bne.n	8010450 <tcp_output+0x120>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801042a:	2b00      	cmp	r3, #0
 801042c:	d110      	bne.n	8010450 <tcp_output+0x120>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010434:	2b00      	cmp	r3, #0
 8010436:	d10b      	bne.n	8010450 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2200      	movs	r2, #0
 801043c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2201      	movs	r2, #1
 8010444:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2200      	movs	r2, #0
 801044c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	8b5b      	ldrh	r3, [r3, #26]
 8010454:	f003 0302 	and.w	r3, r3, #2
 8010458:	2b00      	cmp	r3, #0
 801045a:	f000 814d 	beq.w	80106f8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 fd6c 	bl	8010f3c <tcp_send_empty_ack>
 8010464:	4603      	mov	r3, r0
 8010466:	e152      	b.n	801070e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2200      	movs	r2, #0
 801046c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010474:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010476:	6a3b      	ldr	r3, [r7, #32]
 8010478:	2b00      	cmp	r3, #0
 801047a:	f000 811c 	beq.w	80106b6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801047e:	e002      	b.n	8010486 <tcp_output+0x156>
 8010480:	6a3b      	ldr	r3, [r7, #32]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	623b      	str	r3, [r7, #32]
 8010486:	6a3b      	ldr	r3, [r7, #32]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d1f8      	bne.n	8010480 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801048e:	e112      	b.n	80106b6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010492:	68db      	ldr	r3, [r3, #12]
 8010494:	899b      	ldrh	r3, [r3, #12]
 8010496:	b29b      	uxth	r3, r3
 8010498:	4618      	mov	r0, r3
 801049a:	f7f9 fd13 	bl	8009ec4 <lwip_htons>
 801049e:	4603      	mov	r3, r0
 80104a0:	b2db      	uxtb	r3, r3
 80104a2:	f003 0304 	and.w	r3, r3, #4
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d006      	beq.n	80104b8 <tcp_output+0x188>
 80104aa:	4b43      	ldr	r3, [pc, #268]	; (80105b8 <tcp_output+0x288>)
 80104ac:	f240 5236 	movw	r2, #1334	; 0x536
 80104b0:	4946      	ldr	r1, [pc, #280]	; (80105cc <tcp_output+0x29c>)
 80104b2:	4843      	ldr	r0, [pc, #268]	; (80105c0 <tcp_output+0x290>)
 80104b4:	f008 f804 	bl	80184c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d01f      	beq.n	8010500 <tcp_output+0x1d0>
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	8b5b      	ldrh	r3, [r3, #26]
 80104c4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d119      	bne.n	8010500 <tcp_output+0x1d0>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d00b      	beq.n	80104ec <tcp_output+0x1bc>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d110      	bne.n	8010500 <tcp_output+0x1d0>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104e2:	891a      	ldrh	r2, [r3, #8]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d209      	bcs.n	8010500 <tcp_output+0x1d0>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d004      	beq.n	8010500 <tcp_output+0x1d0>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104fc:	2b08      	cmp	r3, #8
 80104fe:	d901      	bls.n	8010504 <tcp_output+0x1d4>
 8010500:	2301      	movs	r3, #1
 8010502:	e000      	b.n	8010506 <tcp_output+0x1d6>
 8010504:	2300      	movs	r3, #0
 8010506:	2b00      	cmp	r3, #0
 8010508:	d106      	bne.n	8010518 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	8b5b      	ldrh	r3, [r3, #26]
 801050e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010512:	2b00      	cmp	r3, #0
 8010514:	f000 80e4 	beq.w	80106e0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	7d1b      	ldrb	r3, [r3, #20]
 801051c:	2b02      	cmp	r3, #2
 801051e:	d00d      	beq.n	801053c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010522:	68db      	ldr	r3, [r3, #12]
 8010524:	899b      	ldrh	r3, [r3, #12]
 8010526:	b29c      	uxth	r4, r3
 8010528:	2010      	movs	r0, #16
 801052a:	f7f9 fccb 	bl	8009ec4 <lwip_htons>
 801052e:	4603      	mov	r3, r0
 8010530:	461a      	mov	r2, r3
 8010532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010534:	68db      	ldr	r3, [r3, #12]
 8010536:	4322      	orrs	r2, r4
 8010538:	b292      	uxth	r2, r2
 801053a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801053c:	697a      	ldr	r2, [r7, #20]
 801053e:	6879      	ldr	r1, [r7, #4]
 8010540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010542:	f000 f909 	bl	8010758 <tcp_output_segment>
 8010546:	4603      	mov	r3, r0
 8010548:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801054a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d009      	beq.n	8010566 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	8b5b      	ldrh	r3, [r3, #26]
 8010556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801055a:	b29a      	uxth	r2, r3
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	835a      	strh	r2, [r3, #26]
      return err;
 8010560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010564:	e0d3      	b.n	801070e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	7d1b      	ldrb	r3, [r3, #20]
 8010572:	2b02      	cmp	r3, #2
 8010574:	d006      	beq.n	8010584 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	8b5b      	ldrh	r3, [r3, #26]
 801057a:	f023 0303 	bic.w	r3, r3, #3
 801057e:	b29a      	uxth	r2, r3
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010586:	68db      	ldr	r3, [r3, #12]
 8010588:	685b      	ldr	r3, [r3, #4]
 801058a:	4618      	mov	r0, r3
 801058c:	f7f9 fcaf 	bl	8009eee <lwip_htonl>
 8010590:	4604      	mov	r4, r0
 8010592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010594:	891b      	ldrh	r3, [r3, #8]
 8010596:	461d      	mov	r5, r3
 8010598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059a:	68db      	ldr	r3, [r3, #12]
 801059c:	899b      	ldrh	r3, [r3, #12]
 801059e:	b29b      	uxth	r3, r3
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7f9 fc8f 	bl	8009ec4 <lwip_htons>
 80105a6:	4603      	mov	r3, r0
 80105a8:	b2db      	uxtb	r3, r3
 80105aa:	f003 0303 	and.w	r3, r3, #3
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d00e      	beq.n	80105d0 <tcp_output+0x2a0>
 80105b2:	2301      	movs	r3, #1
 80105b4:	e00d      	b.n	80105d2 <tcp_output+0x2a2>
 80105b6:	bf00      	nop
 80105b8:	0801d360 	.word	0x0801d360
 80105bc:	0801d8a4 	.word	0x0801d8a4
 80105c0:	0801d3b4 	.word	0x0801d3b4
 80105c4:	0801d8bc 	.word	0x0801d8bc
 80105c8:	2400ee54 	.word	0x2400ee54
 80105cc:	0801d8e4 	.word	0x0801d8e4
 80105d0:	2300      	movs	r3, #0
 80105d2:	442b      	add	r3, r5
 80105d4:	4423      	add	r3, r4
 80105d6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	1ad3      	subs	r3, r2, r3
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	da02      	bge.n	80105ea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	68ba      	ldr	r2, [r7, #8]
 80105e8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80105ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ec:	891b      	ldrh	r3, [r3, #8]
 80105ee:	461c      	mov	r4, r3
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	899b      	ldrh	r3, [r3, #12]
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7f9 fc63 	bl	8009ec4 <lwip_htons>
 80105fe:	4603      	mov	r3, r0
 8010600:	b2db      	uxtb	r3, r3
 8010602:	f003 0303 	and.w	r3, r3, #3
 8010606:	2b00      	cmp	r3, #0
 8010608:	d001      	beq.n	801060e <tcp_output+0x2de>
 801060a:	2301      	movs	r3, #1
 801060c:	e000      	b.n	8010610 <tcp_output+0x2e0>
 801060e:	2300      	movs	r3, #0
 8010610:	4423      	add	r3, r4
 8010612:	2b00      	cmp	r3, #0
 8010614:	d049      	beq.n	80106aa <tcp_output+0x37a>
      seg->next = NULL;
 8010616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010618:	2200      	movs	r2, #0
 801061a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010620:	2b00      	cmp	r3, #0
 8010622:	d105      	bne.n	8010630 <tcp_output+0x300>
        pcb->unacked = seg;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010628:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062c:	623b      	str	r3, [r7, #32]
 801062e:	e03f      	b.n	80106b0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	4618      	mov	r0, r3
 8010638:	f7f9 fc59 	bl	8009eee <lwip_htonl>
 801063c:	4604      	mov	r4, r0
 801063e:	6a3b      	ldr	r3, [r7, #32]
 8010640:	68db      	ldr	r3, [r3, #12]
 8010642:	685b      	ldr	r3, [r3, #4]
 8010644:	4618      	mov	r0, r3
 8010646:	f7f9 fc52 	bl	8009eee <lwip_htonl>
 801064a:	4603      	mov	r3, r0
 801064c:	1ae3      	subs	r3, r4, r3
 801064e:	2b00      	cmp	r3, #0
 8010650:	da24      	bge.n	801069c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	3370      	adds	r3, #112	; 0x70
 8010656:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010658:	e002      	b.n	8010660 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801065a:	69fb      	ldr	r3, [r7, #28]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010660:	69fb      	ldr	r3, [r7, #28]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d011      	beq.n	801068c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	68db      	ldr	r3, [r3, #12]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	4618      	mov	r0, r3
 8010672:	f7f9 fc3c 	bl	8009eee <lwip_htonl>
 8010676:	4604      	mov	r4, r0
 8010678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	4618      	mov	r0, r3
 8010680:	f7f9 fc35 	bl	8009eee <lwip_htonl>
 8010684:	4603      	mov	r3, r0
 8010686:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010688:	2b00      	cmp	r3, #0
 801068a:	dbe6      	blt.n	801065a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801068c:	69fb      	ldr	r3, [r7, #28]
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010692:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010694:	69fb      	ldr	r3, [r7, #28]
 8010696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010698:	601a      	str	r2, [r3, #0]
 801069a:	e009      	b.n	80106b0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801069c:	6a3b      	ldr	r3, [r7, #32]
 801069e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106a0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80106a2:	6a3b      	ldr	r3, [r7, #32]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	623b      	str	r3, [r7, #32]
 80106a8:	e002      	b.n	80106b0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80106aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106ac:	f7fc fbe5 	bl	800ce7a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80106b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d012      	beq.n	80106e2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80106bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7f9 fc13 	bl	8009eee <lwip_htonl>
 80106c8:	4602      	mov	r2, r0
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106ce:	1ad3      	subs	r3, r2, r3
 80106d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106d2:	8912      	ldrh	r2, [r2, #8]
 80106d4:	4413      	add	r3, r2
  while (seg != NULL &&
 80106d6:	69ba      	ldr	r2, [r7, #24]
 80106d8:	429a      	cmp	r2, r3
 80106da:	f4bf aed9 	bcs.w	8010490 <tcp_output+0x160>
 80106de:	e000      	b.n	80106e2 <tcp_output+0x3b2>
      break;
 80106e0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d108      	bne.n	80106fc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2200      	movs	r2, #0
 80106ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80106f2:	e004      	b.n	80106fe <tcp_output+0x3ce>
    goto output_done;
 80106f4:	bf00      	nop
 80106f6:	e002      	b.n	80106fe <tcp_output+0x3ce>
    goto output_done;
 80106f8:	bf00      	nop
 80106fa:	e000      	b.n	80106fe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80106fc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	8b5b      	ldrh	r3, [r3, #26]
 8010702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010706:	b29a      	uxth	r2, r3
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801070c:	2300      	movs	r3, #0
}
 801070e:	4618      	mov	r0, r3
 8010710:	3728      	adds	r7, #40	; 0x28
 8010712:	46bd      	mov	sp, r7
 8010714:	bdb0      	pop	{r4, r5, r7, pc}
 8010716:	bf00      	nop

08010718 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d106      	bne.n	8010734 <tcp_output_segment_busy+0x1c>
 8010726:	4b09      	ldr	r3, [pc, #36]	; (801074c <tcp_output_segment_busy+0x34>)
 8010728:	f240 529a 	movw	r2, #1434	; 0x59a
 801072c:	4908      	ldr	r1, [pc, #32]	; (8010750 <tcp_output_segment_busy+0x38>)
 801072e:	4809      	ldr	r0, [pc, #36]	; (8010754 <tcp_output_segment_busy+0x3c>)
 8010730:	f007 fec6 	bl	80184c0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	7b9b      	ldrb	r3, [r3, #14]
 801073a:	2b01      	cmp	r3, #1
 801073c:	d001      	beq.n	8010742 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801073e:	2301      	movs	r3, #1
 8010740:	e000      	b.n	8010744 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010742:	2300      	movs	r3, #0
}
 8010744:	4618      	mov	r0, r3
 8010746:	3708      	adds	r7, #8
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}
 801074c:	0801d360 	.word	0x0801d360
 8010750:	0801d8fc 	.word	0x0801d8fc
 8010754:	0801d3b4 	.word	0x0801d3b4

08010758 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010758:	b5b0      	push	{r4, r5, r7, lr}
 801075a:	b08c      	sub	sp, #48	; 0x30
 801075c:	af04      	add	r7, sp, #16
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d106      	bne.n	8010778 <tcp_output_segment+0x20>
 801076a:	4b63      	ldr	r3, [pc, #396]	; (80108f8 <tcp_output_segment+0x1a0>)
 801076c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010770:	4962      	ldr	r1, [pc, #392]	; (80108fc <tcp_output_segment+0x1a4>)
 8010772:	4863      	ldr	r0, [pc, #396]	; (8010900 <tcp_output_segment+0x1a8>)
 8010774:	f007 fea4 	bl	80184c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d106      	bne.n	801078c <tcp_output_segment+0x34>
 801077e:	4b5e      	ldr	r3, [pc, #376]	; (80108f8 <tcp_output_segment+0x1a0>)
 8010780:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010784:	495f      	ldr	r1, [pc, #380]	; (8010904 <tcp_output_segment+0x1ac>)
 8010786:	485e      	ldr	r0, [pc, #376]	; (8010900 <tcp_output_segment+0x1a8>)
 8010788:	f007 fe9a 	bl	80184c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d106      	bne.n	80107a0 <tcp_output_segment+0x48>
 8010792:	4b59      	ldr	r3, [pc, #356]	; (80108f8 <tcp_output_segment+0x1a0>)
 8010794:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010798:	495b      	ldr	r1, [pc, #364]	; (8010908 <tcp_output_segment+0x1b0>)
 801079a:	4859      	ldr	r0, [pc, #356]	; (8010900 <tcp_output_segment+0x1a8>)
 801079c:	f007 fe90 	bl	80184c0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80107a0:	68f8      	ldr	r0, [r7, #12]
 80107a2:	f7ff ffb9 	bl	8010718 <tcp_output_segment_busy>
 80107a6:	4603      	mov	r3, r0
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d001      	beq.n	80107b0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80107ac:	2300      	movs	r3, #0
 80107ae:	e09f      	b.n	80108f0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	68dc      	ldr	r4, [r3, #12]
 80107b8:	4610      	mov	r0, r2
 80107ba:	f7f9 fb98 	bl	8009eee <lwip_htonl>
 80107be:	4603      	mov	r3, r0
 80107c0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	68dc      	ldr	r4, [r3, #12]
 80107ca:	4610      	mov	r0, r2
 80107cc:	f7f9 fb7a 	bl	8009ec4 <lwip_htons>
 80107d0:	4603      	mov	r3, r0
 80107d2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d8:	68ba      	ldr	r2, [r7, #8]
 80107da:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80107dc:	441a      	add	r2, r3
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	68db      	ldr	r3, [r3, #12]
 80107e6:	3314      	adds	r3, #20
 80107e8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	7a9b      	ldrb	r3, [r3, #10]
 80107ee:	f003 0301 	and.w	r3, r3, #1
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d015      	beq.n	8010822 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	3304      	adds	r3, #4
 80107fa:	461a      	mov	r2, r3
 80107fc:	6879      	ldr	r1, [r7, #4]
 80107fe:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010802:	f7fc fe8f 	bl	800d524 <tcp_eff_send_mss_netif>
 8010806:	4603      	mov	r3, r0
 8010808:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801080a:	8b7b      	ldrh	r3, [r7, #26]
 801080c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010810:	4618      	mov	r0, r3
 8010812:	f7f9 fb6c 	bl	8009eee <lwip_htonl>
 8010816:	4602      	mov	r2, r0
 8010818:	69fb      	ldr	r3, [r7, #28]
 801081a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	3304      	adds	r3, #4
 8010820:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010828:	2b00      	cmp	r3, #0
 801082a:	da02      	bge.n	8010832 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	2200      	movs	r2, #0
 8010830:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010836:	2b00      	cmp	r3, #0
 8010838:	d10c      	bne.n	8010854 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801083a:	4b34      	ldr	r3, [pc, #208]	; (801090c <tcp_output_segment+0x1b4>)
 801083c:	681a      	ldr	r2, [r3, #0]
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	68db      	ldr	r3, [r3, #12]
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	4618      	mov	r0, r3
 801084a:	f7f9 fb50 	bl	8009eee <lwip_htonl>
 801084e:	4602      	mov	r2, r0
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	68da      	ldr	r2, [r3, #12]
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	1ad3      	subs	r3, r2, r3
 8010860:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	8959      	ldrh	r1, [r3, #10]
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	8b3a      	ldrh	r2, [r7, #24]
 801086e:	1a8a      	subs	r2, r1, r2
 8010870:	b292      	uxth	r2, r2
 8010872:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	8919      	ldrh	r1, [r3, #8]
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	8b3a      	ldrh	r2, [r7, #24]
 8010880:	1a8a      	subs	r2, r1, r2
 8010882:	b292      	uxth	r2, r2
 8010884:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	68fa      	ldr	r2, [r7, #12]
 801088c:	68d2      	ldr	r2, [r2, #12]
 801088e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	68db      	ldr	r3, [r3, #12]
 8010894:	2200      	movs	r2, #0
 8010896:	741a      	strb	r2, [r3, #16]
 8010898:	2200      	movs	r2, #0
 801089a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	68db      	ldr	r3, [r3, #12]
 80108a0:	f103 0214 	add.w	r2, r3, #20
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	7a9b      	ldrb	r3, [r3, #10]
 80108a8:	009b      	lsls	r3, r3, #2
 80108aa:	f003 0304 	and.w	r3, r3, #4
 80108ae:	4413      	add	r3, r2
 80108b0:	69fa      	ldr	r2, [r7, #28]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d006      	beq.n	80108c4 <tcp_output_segment+0x16c>
 80108b6:	4b10      	ldr	r3, [pc, #64]	; (80108f8 <tcp_output_segment+0x1a0>)
 80108b8:	f240 621c 	movw	r2, #1564	; 0x61c
 80108bc:	4914      	ldr	r1, [pc, #80]	; (8010910 <tcp_output_segment+0x1b8>)
 80108be:	4810      	ldr	r0, [pc, #64]	; (8010900 <tcp_output_segment+0x1a8>)
 80108c0:	f007 fdfe 	bl	80184c0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	6858      	ldr	r0, [r3, #4]
 80108c8:	68b9      	ldr	r1, [r7, #8]
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	1d1c      	adds	r4, r3, #4
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	7add      	ldrb	r5, [r3, #11]
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	7a9b      	ldrb	r3, [r3, #10]
 80108d6:	687a      	ldr	r2, [r7, #4]
 80108d8:	9202      	str	r2, [sp, #8]
 80108da:	2206      	movs	r2, #6
 80108dc:	9201      	str	r2, [sp, #4]
 80108de:	9300      	str	r3, [sp, #0]
 80108e0:	462b      	mov	r3, r5
 80108e2:	4622      	mov	r2, r4
 80108e4:	f002 fdd0 	bl	8013488 <ip4_output_if>
 80108e8:	4603      	mov	r3, r0
 80108ea:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80108ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3720      	adds	r7, #32
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bdb0      	pop	{r4, r5, r7, pc}
 80108f8:	0801d360 	.word	0x0801d360
 80108fc:	0801d924 	.word	0x0801d924
 8010900:	0801d3b4 	.word	0x0801d3b4
 8010904:	0801d944 	.word	0x0801d944
 8010908:	0801d964 	.word	0x0801d964
 801090c:	2400ee44 	.word	0x2400ee44
 8010910:	0801d988 	.word	0x0801d988

08010914 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010914:	b5b0      	push	{r4, r5, r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d106      	bne.n	8010930 <tcp_rexmit_rto_prepare+0x1c>
 8010922:	4b31      	ldr	r3, [pc, #196]	; (80109e8 <tcp_rexmit_rto_prepare+0xd4>)
 8010924:	f240 6263 	movw	r2, #1635	; 0x663
 8010928:	4930      	ldr	r1, [pc, #192]	; (80109ec <tcp_rexmit_rto_prepare+0xd8>)
 801092a:	4831      	ldr	r0, [pc, #196]	; (80109f0 <tcp_rexmit_rto_prepare+0xdc>)
 801092c:	f007 fdc8 	bl	80184c0 <iprintf>

  if (pcb->unacked == NULL) {
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010934:	2b00      	cmp	r3, #0
 8010936:	d102      	bne.n	801093e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010938:	f06f 0305 	mvn.w	r3, #5
 801093c:	e050      	b.n	80109e0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010942:	60fb      	str	r3, [r7, #12]
 8010944:	e00b      	b.n	801095e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010946:	68f8      	ldr	r0, [r7, #12]
 8010948:	f7ff fee6 	bl	8010718 <tcp_output_segment_busy>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d002      	beq.n	8010958 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010952:	f06f 0305 	mvn.w	r3, #5
 8010956:	e043      	b.n	80109e0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	60fb      	str	r3, [r7, #12]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d1ef      	bne.n	8010946 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010966:	68f8      	ldr	r0, [r7, #12]
 8010968:	f7ff fed6 	bl	8010718 <tcp_output_segment_busy>
 801096c:	4603      	mov	r3, r0
 801096e:	2b00      	cmp	r3, #0
 8010970:	d002      	beq.n	8010978 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010972:	f06f 0305 	mvn.w	r3, #5
 8010976:	e033      	b.n	80109e0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2200      	movs	r2, #0
 801098c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	8b5b      	ldrh	r3, [r3, #26]
 8010992:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010996:	b29a      	uxth	r2, r3
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	4618      	mov	r0, r3
 80109a4:	f7f9 faa3 	bl	8009eee <lwip_htonl>
 80109a8:	4604      	mov	r4, r0
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	891b      	ldrh	r3, [r3, #8]
 80109ae:	461d      	mov	r5, r3
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	68db      	ldr	r3, [r3, #12]
 80109b4:	899b      	ldrh	r3, [r3, #12]
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7f9 fa83 	bl	8009ec4 <lwip_htons>
 80109be:	4603      	mov	r3, r0
 80109c0:	b2db      	uxtb	r3, r3
 80109c2:	f003 0303 	and.w	r3, r3, #3
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d001      	beq.n	80109ce <tcp_rexmit_rto_prepare+0xba>
 80109ca:	2301      	movs	r3, #1
 80109cc:	e000      	b.n	80109d0 <tcp_rexmit_rto_prepare+0xbc>
 80109ce:	2300      	movs	r3, #0
 80109d0:	442b      	add	r3, r5
 80109d2:	18e2      	adds	r2, r4, r3
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2200      	movs	r2, #0
 80109dc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80109de:	2300      	movs	r3, #0
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3710      	adds	r7, #16
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bdb0      	pop	{r4, r5, r7, pc}
 80109e8:	0801d360 	.word	0x0801d360
 80109ec:	0801d99c 	.word	0x0801d99c
 80109f0:	0801d3b4 	.word	0x0801d3b4

080109f4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d106      	bne.n	8010a10 <tcp_rexmit_rto_commit+0x1c>
 8010a02:	4b0d      	ldr	r3, [pc, #52]	; (8010a38 <tcp_rexmit_rto_commit+0x44>)
 8010a04:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010a08:	490c      	ldr	r1, [pc, #48]	; (8010a3c <tcp_rexmit_rto_commit+0x48>)
 8010a0a:	480d      	ldr	r0, [pc, #52]	; (8010a40 <tcp_rexmit_rto_commit+0x4c>)
 8010a0c:	f007 fd58 	bl	80184c0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010a16:	2bff      	cmp	r3, #255	; 0xff
 8010a18:	d007      	beq.n	8010a2a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010a20:	3301      	adds	r3, #1
 8010a22:	b2da      	uxtb	r2, r3
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7ff fc80 	bl	8010330 <tcp_output>
}
 8010a30:	bf00      	nop
 8010a32:	3708      	adds	r7, #8
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	0801d360 	.word	0x0801d360
 8010a3c:	0801d9c0 	.word	0x0801d9c0
 8010a40:	0801d3b4 	.word	0x0801d3b4

08010a44 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d106      	bne.n	8010a60 <tcp_rexmit_rto+0x1c>
 8010a52:	4b0a      	ldr	r3, [pc, #40]	; (8010a7c <tcp_rexmit_rto+0x38>)
 8010a54:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010a58:	4909      	ldr	r1, [pc, #36]	; (8010a80 <tcp_rexmit_rto+0x3c>)
 8010a5a:	480a      	ldr	r0, [pc, #40]	; (8010a84 <tcp_rexmit_rto+0x40>)
 8010a5c:	f007 fd30 	bl	80184c0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f7ff ff57 	bl	8010914 <tcp_rexmit_rto_prepare>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d102      	bne.n	8010a72 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f7ff ffc1 	bl	80109f4 <tcp_rexmit_rto_commit>
  }
}
 8010a72:	bf00      	nop
 8010a74:	3708      	adds	r7, #8
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	0801d360 	.word	0x0801d360
 8010a80:	0801d9e4 	.word	0x0801d9e4
 8010a84:	0801d3b4 	.word	0x0801d3b4

08010a88 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010a88:	b590      	push	{r4, r7, lr}
 8010a8a:	b085      	sub	sp, #20
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d106      	bne.n	8010aa4 <tcp_rexmit+0x1c>
 8010a96:	4b2f      	ldr	r3, [pc, #188]	; (8010b54 <tcp_rexmit+0xcc>)
 8010a98:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010a9c:	492e      	ldr	r1, [pc, #184]	; (8010b58 <tcp_rexmit+0xd0>)
 8010a9e:	482f      	ldr	r0, [pc, #188]	; (8010b5c <tcp_rexmit+0xd4>)
 8010aa0:	f007 fd0e 	bl	80184c0 <iprintf>

  if (pcb->unacked == NULL) {
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d102      	bne.n	8010ab2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010aac:	f06f 0305 	mvn.w	r3, #5
 8010ab0:	e04c      	b.n	8010b4c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ab6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010ab8:	68b8      	ldr	r0, [r7, #8]
 8010aba:	f7ff fe2d 	bl	8010718 <tcp_output_segment_busy>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d002      	beq.n	8010aca <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010ac4:	f06f 0305 	mvn.w	r3, #5
 8010ac8:	e040      	b.n	8010b4c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	336c      	adds	r3, #108	; 0x6c
 8010ad6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010ad8:	e002      	b.n	8010ae0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d011      	beq.n	8010b0c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	68db      	ldr	r3, [r3, #12]
 8010aee:	685b      	ldr	r3, [r3, #4]
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7f9 f9fc 	bl	8009eee <lwip_htonl>
 8010af6:	4604      	mov	r4, r0
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7f9 f9f5 	bl	8009eee <lwip_htonl>
 8010b04:	4603      	mov	r3, r0
 8010b06:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	dbe6      	blt.n	8010ada <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	681a      	ldr	r2, [r3, #0]
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	68ba      	ldr	r2, [r7, #8]
 8010b18:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d103      	bne.n	8010b2a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2200      	movs	r2, #0
 8010b26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b30:	2bff      	cmp	r3, #255	; 0xff
 8010b32:	d007      	beq.n	8010b44 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	b2da      	uxtb	r2, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2200      	movs	r2, #0
 8010b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010b4a:	2300      	movs	r3, #0
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3714      	adds	r7, #20
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd90      	pop	{r4, r7, pc}
 8010b54:	0801d360 	.word	0x0801d360
 8010b58:	0801da00 	.word	0x0801da00
 8010b5c:	0801d3b4 	.word	0x0801d3b4

08010b60 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d106      	bne.n	8010b7c <tcp_rexmit_fast+0x1c>
 8010b6e:	4b2a      	ldr	r3, [pc, #168]	; (8010c18 <tcp_rexmit_fast+0xb8>)
 8010b70:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010b74:	4929      	ldr	r1, [pc, #164]	; (8010c1c <tcp_rexmit_fast+0xbc>)
 8010b76:	482a      	ldr	r0, [pc, #168]	; (8010c20 <tcp_rexmit_fast+0xc0>)
 8010b78:	f007 fca2 	bl	80184c0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d045      	beq.n	8010c10 <tcp_rexmit_fast+0xb0>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	8b5b      	ldrh	r3, [r3, #26]
 8010b88:	f003 0304 	and.w	r3, r3, #4
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d13f      	bne.n	8010c10 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f7ff ff79 	bl	8010a88 <tcp_rexmit>
 8010b96:	4603      	mov	r3, r0
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d139      	bne.n	8010c10 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ba8:	4293      	cmp	r3, r2
 8010baa:	bf28      	it	cs
 8010bac:	4613      	movcs	r3, r2
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	da00      	bge.n	8010bb6 <tcp_rexmit_fast+0x56>
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	105b      	asrs	r3, r3, #1
 8010bb8:	b29a      	uxth	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bcc:	005b      	lsls	r3, r3, #1
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d206      	bcs.n	8010be0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bd6:	005b      	lsls	r3, r3, #1
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bea:	4619      	mov	r1, r3
 8010bec:	0049      	lsls	r1, r1, #1
 8010bee:	440b      	add	r3, r1
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	4413      	add	r3, r2
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	8b5b      	ldrh	r3, [r3, #26]
 8010c00:	f043 0304 	orr.w	r3, r3, #4
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010c10:	bf00      	nop
 8010c12:	3708      	adds	r7, #8
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	0801d360 	.word	0x0801d360
 8010c1c:	0801da18 	.word	0x0801da18
 8010c20:	0801d3b4 	.word	0x0801d3b4

08010c24 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b086      	sub	sp, #24
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	60f8      	str	r0, [r7, #12]
 8010c2c:	607b      	str	r3, [r7, #4]
 8010c2e:	460b      	mov	r3, r1
 8010c30:	817b      	strh	r3, [r7, #10]
 8010c32:	4613      	mov	r3, r2
 8010c34:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010c36:	897a      	ldrh	r2, [r7, #10]
 8010c38:	893b      	ldrh	r3, [r7, #8]
 8010c3a:	4413      	add	r3, r2
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	3314      	adds	r3, #20
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c46:	4619      	mov	r1, r3
 8010c48:	2022      	movs	r0, #34	; 0x22
 8010c4a:	f7fa fa45 	bl	800b0d8 <pbuf_alloc>
 8010c4e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d04d      	beq.n	8010cf2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010c56:	897b      	ldrh	r3, [r7, #10]
 8010c58:	3313      	adds	r3, #19
 8010c5a:	697a      	ldr	r2, [r7, #20]
 8010c5c:	8952      	ldrh	r2, [r2, #10]
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	db06      	blt.n	8010c70 <tcp_output_alloc_header_common+0x4c>
 8010c62:	4b26      	ldr	r3, [pc, #152]	; (8010cfc <tcp_output_alloc_header_common+0xd8>)
 8010c64:	f240 7223 	movw	r2, #1827	; 0x723
 8010c68:	4925      	ldr	r1, [pc, #148]	; (8010d00 <tcp_output_alloc_header_common+0xdc>)
 8010c6a:	4826      	ldr	r0, [pc, #152]	; (8010d04 <tcp_output_alloc_header_common+0xe0>)
 8010c6c:	f007 fc28 	bl	80184c0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	685b      	ldr	r3, [r3, #4]
 8010c74:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010c76:	8c3b      	ldrh	r3, [r7, #32]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7f9 f923 	bl	8009ec4 <lwip_htons>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	461a      	mov	r2, r3
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010c86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7f9 f91b 	bl	8009ec4 <lwip_htons>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	461a      	mov	r2, r3
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	687a      	ldr	r2, [r7, #4]
 8010c9a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010c9c:	68f8      	ldr	r0, [r7, #12]
 8010c9e:	f7f9 f926 	bl	8009eee <lwip_htonl>
 8010ca2:	4602      	mov	r2, r0
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010ca8:	897b      	ldrh	r3, [r7, #10]
 8010caa:	089b      	lsrs	r3, r3, #2
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	3305      	adds	r3, #5
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	031b      	lsls	r3, r3, #12
 8010cb4:	b29a      	uxth	r2, r3
 8010cb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	4313      	orrs	r3, r2
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7f9 f8ff 	bl	8009ec4 <lwip_htons>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	461a      	mov	r2, r3
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010cce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7f9 f8f7 	bl	8009ec4 <lwip_htons>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	461a      	mov	r2, r3
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	741a      	strb	r2, [r3, #16]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010ce8:	693b      	ldr	r3, [r7, #16]
 8010cea:	2200      	movs	r2, #0
 8010cec:	749a      	strb	r2, [r3, #18]
 8010cee:	2200      	movs	r2, #0
 8010cf0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010cf2:	697b      	ldr	r3, [r7, #20]
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3718      	adds	r7, #24
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}
 8010cfc:	0801d360 	.word	0x0801d360
 8010d00:	0801da38 	.word	0x0801da38
 8010d04:	0801d3b4 	.word	0x0801d3b4

08010d08 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010d08:	b5b0      	push	{r4, r5, r7, lr}
 8010d0a:	b08a      	sub	sp, #40	; 0x28
 8010d0c:	af04      	add	r7, sp, #16
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	607b      	str	r3, [r7, #4]
 8010d12:	460b      	mov	r3, r1
 8010d14:	817b      	strh	r3, [r7, #10]
 8010d16:	4613      	mov	r3, r2
 8010d18:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d106      	bne.n	8010d2e <tcp_output_alloc_header+0x26>
 8010d20:	4b15      	ldr	r3, [pc, #84]	; (8010d78 <tcp_output_alloc_header+0x70>)
 8010d22:	f240 7242 	movw	r2, #1858	; 0x742
 8010d26:	4915      	ldr	r1, [pc, #84]	; (8010d7c <tcp_output_alloc_header+0x74>)
 8010d28:	4815      	ldr	r0, [pc, #84]	; (8010d80 <tcp_output_alloc_header+0x78>)
 8010d2a:	f007 fbc9 	bl	80184c0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	8adb      	ldrh	r3, [r3, #22]
 8010d36:	68fa      	ldr	r2, [r7, #12]
 8010d38:	8b12      	ldrh	r2, [r2, #24]
 8010d3a:	68f9      	ldr	r1, [r7, #12]
 8010d3c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010d3e:	893d      	ldrh	r5, [r7, #8]
 8010d40:	897c      	ldrh	r4, [r7, #10]
 8010d42:	9103      	str	r1, [sp, #12]
 8010d44:	2110      	movs	r1, #16
 8010d46:	9102      	str	r1, [sp, #8]
 8010d48:	9201      	str	r2, [sp, #4]
 8010d4a:	9300      	str	r3, [sp, #0]
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	462a      	mov	r2, r5
 8010d50:	4621      	mov	r1, r4
 8010d52:	f7ff ff67 	bl	8010c24 <tcp_output_alloc_header_common>
 8010d56:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d006      	beq.n	8010d6c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d62:	68fa      	ldr	r2, [r7, #12]
 8010d64:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010d66:	441a      	add	r2, r3
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010d6c:	697b      	ldr	r3, [r7, #20]
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3718      	adds	r7, #24
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bdb0      	pop	{r4, r5, r7, pc}
 8010d76:	bf00      	nop
 8010d78:	0801d360 	.word	0x0801d360
 8010d7c:	0801da68 	.word	0x0801da68
 8010d80:	0801d3b4 	.word	0x0801d3b4

08010d84 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b088      	sub	sp, #32
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	4611      	mov	r1, r2
 8010d90:	461a      	mov	r2, r3
 8010d92:	460b      	mov	r3, r1
 8010d94:	71fb      	strb	r3, [r7, #7]
 8010d96:	4613      	mov	r3, r2
 8010d98:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d106      	bne.n	8010db2 <tcp_output_fill_options+0x2e>
 8010da4:	4b13      	ldr	r3, [pc, #76]	; (8010df4 <tcp_output_fill_options+0x70>)
 8010da6:	f240 7256 	movw	r2, #1878	; 0x756
 8010daa:	4913      	ldr	r1, [pc, #76]	; (8010df8 <tcp_output_fill_options+0x74>)
 8010dac:	4813      	ldr	r0, [pc, #76]	; (8010dfc <tcp_output_fill_options+0x78>)
 8010dae:	f007 fb87 	bl	80184c0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010db8:	69bb      	ldr	r3, [r7, #24]
 8010dba:	3314      	adds	r3, #20
 8010dbc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010dbe:	69bb      	ldr	r3, [r7, #24]
 8010dc0:	f103 0214 	add.w	r2, r3, #20
 8010dc4:	8bfb      	ldrh	r3, [r7, #30]
 8010dc6:	009b      	lsls	r3, r3, #2
 8010dc8:	4619      	mov	r1, r3
 8010dca:	79fb      	ldrb	r3, [r7, #7]
 8010dcc:	009b      	lsls	r3, r3, #2
 8010dce:	f003 0304 	and.w	r3, r3, #4
 8010dd2:	440b      	add	r3, r1
 8010dd4:	4413      	add	r3, r2
 8010dd6:	697a      	ldr	r2, [r7, #20]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d006      	beq.n	8010dea <tcp_output_fill_options+0x66>
 8010ddc:	4b05      	ldr	r3, [pc, #20]	; (8010df4 <tcp_output_fill_options+0x70>)
 8010dde:	f240 7275 	movw	r2, #1909	; 0x775
 8010de2:	4907      	ldr	r1, [pc, #28]	; (8010e00 <tcp_output_fill_options+0x7c>)
 8010de4:	4805      	ldr	r0, [pc, #20]	; (8010dfc <tcp_output_fill_options+0x78>)
 8010de6:	f007 fb6b 	bl	80184c0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010dea:	bf00      	nop
 8010dec:	3720      	adds	r7, #32
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}
 8010df2:	bf00      	nop
 8010df4:	0801d360 	.word	0x0801d360
 8010df8:	0801da90 	.word	0x0801da90
 8010dfc:	0801d3b4 	.word	0x0801d3b4
 8010e00:	0801d988 	.word	0x0801d988

08010e04 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b08a      	sub	sp, #40	; 0x28
 8010e08:	af04      	add	r7, sp, #16
 8010e0a:	60f8      	str	r0, [r7, #12]
 8010e0c:	60b9      	str	r1, [r7, #8]
 8010e0e:	607a      	str	r2, [r7, #4]
 8010e10:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d106      	bne.n	8010e26 <tcp_output_control_segment+0x22>
 8010e18:	4b1c      	ldr	r3, [pc, #112]	; (8010e8c <tcp_output_control_segment+0x88>)
 8010e1a:	f240 7287 	movw	r2, #1927	; 0x787
 8010e1e:	491c      	ldr	r1, [pc, #112]	; (8010e90 <tcp_output_control_segment+0x8c>)
 8010e20:	481c      	ldr	r0, [pc, #112]	; (8010e94 <tcp_output_control_segment+0x90>)
 8010e22:	f007 fb4d 	bl	80184c0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010e26:	683a      	ldr	r2, [r7, #0]
 8010e28:	6879      	ldr	r1, [r7, #4]
 8010e2a:	68f8      	ldr	r0, [r7, #12]
 8010e2c:	f7fe ff40 	bl	800fcb0 <tcp_route>
 8010e30:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d102      	bne.n	8010e3e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010e38:	23fc      	movs	r3, #252	; 0xfc
 8010e3a:	75fb      	strb	r3, [r7, #23]
 8010e3c:	e01c      	b.n	8010e78 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d006      	beq.n	8010e52 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	7adb      	ldrb	r3, [r3, #11]
 8010e48:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	7a9b      	ldrb	r3, [r3, #10]
 8010e4e:	757b      	strb	r3, [r7, #21]
 8010e50:	e003      	b.n	8010e5a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010e52:	23ff      	movs	r3, #255	; 0xff
 8010e54:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010e56:	2300      	movs	r3, #0
 8010e58:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010e5a:	7dba      	ldrb	r2, [r7, #22]
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	9302      	str	r3, [sp, #8]
 8010e60:	2306      	movs	r3, #6
 8010e62:	9301      	str	r3, [sp, #4]
 8010e64:	7d7b      	ldrb	r3, [r7, #21]
 8010e66:	9300      	str	r3, [sp, #0]
 8010e68:	4613      	mov	r3, r2
 8010e6a:	683a      	ldr	r2, [r7, #0]
 8010e6c:	6879      	ldr	r1, [r7, #4]
 8010e6e:	68b8      	ldr	r0, [r7, #8]
 8010e70:	f002 fb0a 	bl	8013488 <ip4_output_if>
 8010e74:	4603      	mov	r3, r0
 8010e76:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010e78:	68b8      	ldr	r0, [r7, #8]
 8010e7a:	f7fa fc11 	bl	800b6a0 <pbuf_free>
  return err;
 8010e7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3718      	adds	r7, #24
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	0801d360 	.word	0x0801d360
 8010e90:	0801dab8 	.word	0x0801dab8
 8010e94:	0801d3b4 	.word	0x0801d3b4

08010e98 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010e98:	b590      	push	{r4, r7, lr}
 8010e9a:	b08b      	sub	sp, #44	; 0x2c
 8010e9c:	af04      	add	r7, sp, #16
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	60b9      	str	r1, [r7, #8]
 8010ea2:	607a      	str	r2, [r7, #4]
 8010ea4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d106      	bne.n	8010eba <tcp_rst+0x22>
 8010eac:	4b1f      	ldr	r3, [pc, #124]	; (8010f2c <tcp_rst+0x94>)
 8010eae:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010eb2:	491f      	ldr	r1, [pc, #124]	; (8010f30 <tcp_rst+0x98>)
 8010eb4:	481f      	ldr	r0, [pc, #124]	; (8010f34 <tcp_rst+0x9c>)
 8010eb6:	f007 fb03 	bl	80184c0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d106      	bne.n	8010ece <tcp_rst+0x36>
 8010ec0:	4b1a      	ldr	r3, [pc, #104]	; (8010f2c <tcp_rst+0x94>)
 8010ec2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010ec6:	491c      	ldr	r1, [pc, #112]	; (8010f38 <tcp_rst+0xa0>)
 8010ec8:	481a      	ldr	r0, [pc, #104]	; (8010f34 <tcp_rst+0x9c>)
 8010eca:	f007 faf9 	bl	80184c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010ece:	2300      	movs	r3, #0
 8010ed0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010ed2:	f246 0308 	movw	r3, #24584	; 0x6008
 8010ed6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010ed8:	7dfb      	ldrb	r3, [r7, #23]
 8010eda:	b29c      	uxth	r4, r3
 8010edc:	68b8      	ldr	r0, [r7, #8]
 8010ede:	f7f9 f806 	bl	8009eee <lwip_htonl>
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	8abb      	ldrh	r3, [r7, #20]
 8010ee6:	9303      	str	r3, [sp, #12]
 8010ee8:	2314      	movs	r3, #20
 8010eea:	9302      	str	r3, [sp, #8]
 8010eec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010eee:	9301      	str	r3, [sp, #4]
 8010ef0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010ef2:	9300      	str	r3, [sp, #0]
 8010ef4:	4613      	mov	r3, r2
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	4621      	mov	r1, r4
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f7ff fe92 	bl	8010c24 <tcp_output_alloc_header_common>
 8010f00:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d00c      	beq.n	8010f22 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010f08:	7dfb      	ldrb	r3, [r7, #23]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	6939      	ldr	r1, [r7, #16]
 8010f0e:	68f8      	ldr	r0, [r7, #12]
 8010f10:	f7ff ff38 	bl	8010d84 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f16:	683a      	ldr	r2, [r7, #0]
 8010f18:	6939      	ldr	r1, [r7, #16]
 8010f1a:	68f8      	ldr	r0, [r7, #12]
 8010f1c:	f7ff ff72 	bl	8010e04 <tcp_output_control_segment>
 8010f20:	e000      	b.n	8010f24 <tcp_rst+0x8c>
    return;
 8010f22:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010f24:	371c      	adds	r7, #28
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd90      	pop	{r4, r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	0801d360 	.word	0x0801d360
 8010f30:	0801dae4 	.word	0x0801dae4
 8010f34:	0801d3b4 	.word	0x0801d3b4
 8010f38:	0801db00 	.word	0x0801db00

08010f3c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010f3c:	b590      	push	{r4, r7, lr}
 8010f3e:	b087      	sub	sp, #28
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010f44:	2300      	movs	r3, #0
 8010f46:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d106      	bne.n	8010f60 <tcp_send_empty_ack+0x24>
 8010f52:	4b28      	ldr	r3, [pc, #160]	; (8010ff4 <tcp_send_empty_ack+0xb8>)
 8010f54:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010f58:	4927      	ldr	r1, [pc, #156]	; (8010ff8 <tcp_send_empty_ack+0xbc>)
 8010f5a:	4828      	ldr	r0, [pc, #160]	; (8010ffc <tcp_send_empty_ack+0xc0>)
 8010f5c:	f007 fab0 	bl	80184c0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010f60:	7dfb      	ldrb	r3, [r7, #23]
 8010f62:	009b      	lsls	r3, r3, #2
 8010f64:	b2db      	uxtb	r3, r3
 8010f66:	f003 0304 	and.w	r3, r3, #4
 8010f6a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010f6c:	7d7b      	ldrb	r3, [r7, #21]
 8010f6e:	b29c      	uxth	r4, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7f8 ffba 	bl	8009eee <lwip_htonl>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	4621      	mov	r1, r4
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f7ff fec1 	bl	8010d08 <tcp_output_alloc_header>
 8010f86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010f88:	693b      	ldr	r3, [r7, #16]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d109      	bne.n	8010fa2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	8b5b      	ldrh	r3, [r3, #26]
 8010f92:	f043 0303 	orr.w	r3, r3, #3
 8010f96:	b29a      	uxth	r2, r3
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010f9c:	f06f 0301 	mvn.w	r3, #1
 8010fa0:	e023      	b.n	8010fea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010fa2:	7dbb      	ldrb	r3, [r7, #22]
 8010fa4:	7dfa      	ldrb	r2, [r7, #23]
 8010fa6:	6939      	ldr	r1, [r7, #16]
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f7ff feeb 	bl	8010d84 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	3304      	adds	r3, #4
 8010fb4:	6939      	ldr	r1, [r7, #16]
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f7ff ff24 	bl	8010e04 <tcp_output_control_segment>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d007      	beq.n	8010fd8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	8b5b      	ldrh	r3, [r3, #26]
 8010fcc:	f043 0303 	orr.w	r3, r3, #3
 8010fd0:	b29a      	uxth	r2, r3
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	835a      	strh	r2, [r3, #26]
 8010fd6:	e006      	b.n	8010fe6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	8b5b      	ldrh	r3, [r3, #26]
 8010fdc:	f023 0303 	bic.w	r3, r3, #3
 8010fe0:	b29a      	uxth	r2, r3
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	371c      	adds	r7, #28
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd90      	pop	{r4, r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	0801d360 	.word	0x0801d360
 8010ff8:	0801db1c 	.word	0x0801db1c
 8010ffc:	0801d3b4 	.word	0x0801d3b4

08011000 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011000:	b590      	push	{r4, r7, lr}
 8011002:	b087      	sub	sp, #28
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011008:	2300      	movs	r3, #0
 801100a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d106      	bne.n	8011020 <tcp_keepalive+0x20>
 8011012:	4b18      	ldr	r3, [pc, #96]	; (8011074 <tcp_keepalive+0x74>)
 8011014:	f640 0224 	movw	r2, #2084	; 0x824
 8011018:	4917      	ldr	r1, [pc, #92]	; (8011078 <tcp_keepalive+0x78>)
 801101a:	4818      	ldr	r0, [pc, #96]	; (801107c <tcp_keepalive+0x7c>)
 801101c:	f007 fa50 	bl	80184c0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011020:	7dfb      	ldrb	r3, [r7, #23]
 8011022:	b29c      	uxth	r4, r3
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011028:	3b01      	subs	r3, #1
 801102a:	4618      	mov	r0, r3
 801102c:	f7f8 ff5f 	bl	8009eee <lwip_htonl>
 8011030:	4603      	mov	r3, r0
 8011032:	2200      	movs	r2, #0
 8011034:	4621      	mov	r1, r4
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f7ff fe66 	bl	8010d08 <tcp_output_alloc_header>
 801103c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d102      	bne.n	801104a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011048:	e010      	b.n	801106c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801104a:	7dfb      	ldrb	r3, [r7, #23]
 801104c:	2200      	movs	r2, #0
 801104e:	6939      	ldr	r1, [r7, #16]
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f7ff fe97 	bl	8010d84 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	3304      	adds	r3, #4
 801105c:	6939      	ldr	r1, [r7, #16]
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f7ff fed0 	bl	8010e04 <tcp_output_control_segment>
 8011064:	4603      	mov	r3, r0
 8011066:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011068:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801106c:	4618      	mov	r0, r3
 801106e:	371c      	adds	r7, #28
 8011070:	46bd      	mov	sp, r7
 8011072:	bd90      	pop	{r4, r7, pc}
 8011074:	0801d360 	.word	0x0801d360
 8011078:	0801db3c 	.word	0x0801db3c
 801107c:	0801d3b4 	.word	0x0801d3b4

08011080 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011080:	b590      	push	{r4, r7, lr}
 8011082:	b08b      	sub	sp, #44	; 0x2c
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011088:	2300      	movs	r3, #0
 801108a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d106      	bne.n	80110a2 <tcp_zero_window_probe+0x22>
 8011094:	4b4c      	ldr	r3, [pc, #304]	; (80111c8 <tcp_zero_window_probe+0x148>)
 8011096:	f640 024f 	movw	r2, #2127	; 0x84f
 801109a:	494c      	ldr	r1, [pc, #304]	; (80111cc <tcp_zero_window_probe+0x14c>)
 801109c:	484c      	ldr	r0, [pc, #304]	; (80111d0 <tcp_zero_window_probe+0x150>)
 801109e:	f007 fa0f 	bl	80184c0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110a6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80110a8:	6a3b      	ldr	r3, [r7, #32]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d101      	bne.n	80110b2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80110ae:	2300      	movs	r3, #0
 80110b0:	e086      	b.n	80111c0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80110b8:	2bff      	cmp	r3, #255	; 0xff
 80110ba:	d007      	beq.n	80110cc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80110c2:	3301      	adds	r3, #1
 80110c4:	b2da      	uxtb	r2, r3
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80110cc:	6a3b      	ldr	r3, [r7, #32]
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	899b      	ldrh	r3, [r3, #12]
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7f8 fef5 	bl	8009ec4 <lwip_htons>
 80110da:	4603      	mov	r3, r0
 80110dc:	b2db      	uxtb	r3, r3
 80110de:	f003 0301 	and.w	r3, r3, #1
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d005      	beq.n	80110f2 <tcp_zero_window_probe+0x72>
 80110e6:	6a3b      	ldr	r3, [r7, #32]
 80110e8:	891b      	ldrh	r3, [r3, #8]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d101      	bne.n	80110f2 <tcp_zero_window_probe+0x72>
 80110ee:	2301      	movs	r3, #1
 80110f0:	e000      	b.n	80110f4 <tcp_zero_window_probe+0x74>
 80110f2:	2300      	movs	r3, #0
 80110f4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80110f6:	7ffb      	ldrb	r3, [r7, #31]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	bf0c      	ite	eq
 80110fc:	2301      	moveq	r3, #1
 80110fe:	2300      	movne	r3, #0
 8011100:	b2db      	uxtb	r3, r3
 8011102:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011108:	b299      	uxth	r1, r3
 801110a:	6a3b      	ldr	r3, [r7, #32]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	8bba      	ldrh	r2, [r7, #28]
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f7ff fdf8 	bl	8010d08 <tcp_output_alloc_header>
 8011118:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801111a:	69bb      	ldr	r3, [r7, #24]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d102      	bne.n	8011126 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011124:	e04c      	b.n	80111c0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011126:	69bb      	ldr	r3, [r7, #24]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801112c:	7ffb      	ldrb	r3, [r7, #31]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d011      	beq.n	8011156 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	899b      	ldrh	r3, [r3, #12]
 8011136:	b29b      	uxth	r3, r3
 8011138:	b21b      	sxth	r3, r3
 801113a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801113e:	b21c      	sxth	r4, r3
 8011140:	2011      	movs	r0, #17
 8011142:	f7f8 febf 	bl	8009ec4 <lwip_htons>
 8011146:	4603      	mov	r3, r0
 8011148:	b21b      	sxth	r3, r3
 801114a:	4323      	orrs	r3, r4
 801114c:	b21b      	sxth	r3, r3
 801114e:	b29a      	uxth	r2, r3
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	819a      	strh	r2, [r3, #12]
 8011154:	e010      	b.n	8011178 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011156:	69bb      	ldr	r3, [r7, #24]
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	3314      	adds	r3, #20
 801115c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801115e:	6a3b      	ldr	r3, [r7, #32]
 8011160:	6858      	ldr	r0, [r3, #4]
 8011162:	6a3b      	ldr	r3, [r7, #32]
 8011164:	685b      	ldr	r3, [r3, #4]
 8011166:	891a      	ldrh	r2, [r3, #8]
 8011168:	6a3b      	ldr	r3, [r7, #32]
 801116a:	891b      	ldrh	r3, [r3, #8]
 801116c:	1ad3      	subs	r3, r2, r3
 801116e:	b29b      	uxth	r3, r3
 8011170:	2201      	movs	r2, #1
 8011172:	6939      	ldr	r1, [r7, #16]
 8011174:	f7fa fc9a 	bl	800baac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011178:	6a3b      	ldr	r3, [r7, #32]
 801117a:	68db      	ldr	r3, [r3, #12]
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	4618      	mov	r0, r3
 8011180:	f7f8 feb5 	bl	8009eee <lwip_htonl>
 8011184:	4603      	mov	r3, r0
 8011186:	3301      	adds	r3, #1
 8011188:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	1ad3      	subs	r3, r2, r3
 8011192:	2b00      	cmp	r3, #0
 8011194:	da02      	bge.n	801119c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	68fa      	ldr	r2, [r7, #12]
 801119a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801119c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111a0:	2200      	movs	r2, #0
 80111a2:	69b9      	ldr	r1, [r7, #24]
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f7ff fded 	bl	8010d84 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	3304      	adds	r3, #4
 80111b0:	69b9      	ldr	r1, [r7, #24]
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f7ff fe26 	bl	8010e04 <tcp_output_control_segment>
 80111b8:	4603      	mov	r3, r0
 80111ba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80111bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	372c      	adds	r7, #44	; 0x2c
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd90      	pop	{r4, r7, pc}
 80111c8:	0801d360 	.word	0x0801d360
 80111cc:	0801db58 	.word	0x0801db58
 80111d0:	0801d3b4 	.word	0x0801d3b4

080111d4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80111dc:	f7fa fd54 	bl	800bc88 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80111e0:	4b0a      	ldr	r3, [pc, #40]	; (801120c <tcpip_tcp_timer+0x38>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d103      	bne.n	80111f0 <tcpip_tcp_timer+0x1c>
 80111e8:	4b09      	ldr	r3, [pc, #36]	; (8011210 <tcpip_tcp_timer+0x3c>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d005      	beq.n	80111fc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80111f0:	2200      	movs	r2, #0
 80111f2:	4908      	ldr	r1, [pc, #32]	; (8011214 <tcpip_tcp_timer+0x40>)
 80111f4:	20fa      	movs	r0, #250	; 0xfa
 80111f6:	f000 f8f3 	bl	80113e0 <sys_timeout>
 80111fa:	e003      	b.n	8011204 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80111fc:	4b06      	ldr	r3, [pc, #24]	; (8011218 <tcpip_tcp_timer+0x44>)
 80111fe:	2200      	movs	r2, #0
 8011200:	601a      	str	r2, [r3, #0]
  }
}
 8011202:	bf00      	nop
 8011204:	bf00      	nop
 8011206:	3708      	adds	r7, #8
 8011208:	46bd      	mov	sp, r7
 801120a:	bd80      	pop	{r7, pc}
 801120c:	2400ee40 	.word	0x2400ee40
 8011210:	2400ee50 	.word	0x2400ee50
 8011214:	080111d5 	.word	0x080111d5
 8011218:	2400b6f4 	.word	0x2400b6f4

0801121c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011220:	4b0a      	ldr	r3, [pc, #40]	; (801124c <tcp_timer_needed+0x30>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d10f      	bne.n	8011248 <tcp_timer_needed+0x2c>
 8011228:	4b09      	ldr	r3, [pc, #36]	; (8011250 <tcp_timer_needed+0x34>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d103      	bne.n	8011238 <tcp_timer_needed+0x1c>
 8011230:	4b08      	ldr	r3, [pc, #32]	; (8011254 <tcp_timer_needed+0x38>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d007      	beq.n	8011248 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011238:	4b04      	ldr	r3, [pc, #16]	; (801124c <tcp_timer_needed+0x30>)
 801123a:	2201      	movs	r2, #1
 801123c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801123e:	2200      	movs	r2, #0
 8011240:	4905      	ldr	r1, [pc, #20]	; (8011258 <tcp_timer_needed+0x3c>)
 8011242:	20fa      	movs	r0, #250	; 0xfa
 8011244:	f000 f8cc 	bl	80113e0 <sys_timeout>
  }
}
 8011248:	bf00      	nop
 801124a:	bd80      	pop	{r7, pc}
 801124c:	2400b6f4 	.word	0x2400b6f4
 8011250:	2400ee40 	.word	0x2400ee40
 8011254:	2400ee50 	.word	0x2400ee50
 8011258:	080111d5 	.word	0x080111d5

0801125c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b086      	sub	sp, #24
 8011260:	af00      	add	r7, sp, #0
 8011262:	60f8      	str	r0, [r7, #12]
 8011264:	60b9      	str	r1, [r7, #8]
 8011266:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011268:	200a      	movs	r0, #10
 801126a:	f7f9 faff 	bl	800a86c <memp_malloc>
 801126e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d109      	bne.n	801128a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011276:	693b      	ldr	r3, [r7, #16]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d151      	bne.n	8011320 <sys_timeout_abs+0xc4>
 801127c:	4b2a      	ldr	r3, [pc, #168]	; (8011328 <sys_timeout_abs+0xcc>)
 801127e:	22be      	movs	r2, #190	; 0xbe
 8011280:	492a      	ldr	r1, [pc, #168]	; (801132c <sys_timeout_abs+0xd0>)
 8011282:	482b      	ldr	r0, [pc, #172]	; (8011330 <sys_timeout_abs+0xd4>)
 8011284:	f007 f91c 	bl	80184c0 <iprintf>
    return;
 8011288:	e04a      	b.n	8011320 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	2200      	movs	r2, #0
 801128e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011290:	693b      	ldr	r3, [r7, #16]
 8011292:	68ba      	ldr	r2, [r7, #8]
 8011294:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	687a      	ldr	r2, [r7, #4]
 801129a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801129c:	693b      	ldr	r3, [r7, #16]
 801129e:	68fa      	ldr	r2, [r7, #12]
 80112a0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80112a2:	4b24      	ldr	r3, [pc, #144]	; (8011334 <sys_timeout_abs+0xd8>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d103      	bne.n	80112b2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80112aa:	4a22      	ldr	r2, [pc, #136]	; (8011334 <sys_timeout_abs+0xd8>)
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	6013      	str	r3, [r2, #0]
    return;
 80112b0:	e037      	b.n	8011322 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	685a      	ldr	r2, [r3, #4]
 80112b6:	4b1f      	ldr	r3, [pc, #124]	; (8011334 <sys_timeout_abs+0xd8>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	1ad3      	subs	r3, r2, r3
 80112be:	0fdb      	lsrs	r3, r3, #31
 80112c0:	f003 0301 	and.w	r3, r3, #1
 80112c4:	b2db      	uxtb	r3, r3
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d007      	beq.n	80112da <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80112ca:	4b1a      	ldr	r3, [pc, #104]	; (8011334 <sys_timeout_abs+0xd8>)
 80112cc:	681a      	ldr	r2, [r3, #0]
 80112ce:	693b      	ldr	r3, [r7, #16]
 80112d0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80112d2:	4a18      	ldr	r2, [pc, #96]	; (8011334 <sys_timeout_abs+0xd8>)
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	6013      	str	r3, [r2, #0]
 80112d8:	e023      	b.n	8011322 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80112da:	4b16      	ldr	r3, [pc, #88]	; (8011334 <sys_timeout_abs+0xd8>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	617b      	str	r3, [r7, #20]
 80112e0:	e01a      	b.n	8011318 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d00b      	beq.n	8011302 <sys_timeout_abs+0xa6>
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	685a      	ldr	r2, [r3, #4]
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	1ad3      	subs	r3, r2, r3
 80112f6:	0fdb      	lsrs	r3, r3, #31
 80112f8:	f003 0301 	and.w	r3, r3, #1
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d007      	beq.n	8011312 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	681a      	ldr	r2, [r3, #0]
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	693a      	ldr	r2, [r7, #16]
 801130e:	601a      	str	r2, [r3, #0]
        break;
 8011310:	e007      	b.n	8011322 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011312:	697b      	ldr	r3, [r7, #20]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	617b      	str	r3, [r7, #20]
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d1e1      	bne.n	80112e2 <sys_timeout_abs+0x86>
 801131e:	e000      	b.n	8011322 <sys_timeout_abs+0xc6>
    return;
 8011320:	bf00      	nop
      }
    }
  }
}
 8011322:	3718      	adds	r7, #24
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	0801db7c 	.word	0x0801db7c
 801132c:	0801dbb0 	.word	0x0801dbb0
 8011330:	0801dbf0 	.word	0x0801dbf0
 8011334:	2400b6ec 	.word	0x2400b6ec

08011338 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b086      	sub	sp, #24
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	4798      	blx	r3

  now = sys_now();
 801134a:	f7f4 fced 	bl	8005d28 <sys_now>
 801134e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	4b0f      	ldr	r3, [pc, #60]	; (8011394 <lwip_cyclic_timer+0x5c>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	4413      	add	r3, r2
 801135a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801135c:	68fa      	ldr	r2, [r7, #12]
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	1ad3      	subs	r3, r2, r3
 8011362:	0fdb      	lsrs	r3, r3, #31
 8011364:	f003 0301 	and.w	r3, r3, #1
 8011368:	b2db      	uxtb	r3, r3
 801136a:	2b00      	cmp	r3, #0
 801136c:	d009      	beq.n	8011382 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	4413      	add	r3, r2
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	4907      	ldr	r1, [pc, #28]	; (8011398 <lwip_cyclic_timer+0x60>)
 801137a:	4618      	mov	r0, r3
 801137c:	f7ff ff6e 	bl	801125c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011380:	e004      	b.n	801138c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	4904      	ldr	r1, [pc, #16]	; (8011398 <lwip_cyclic_timer+0x60>)
 8011386:	68f8      	ldr	r0, [r7, #12]
 8011388:	f7ff ff68 	bl	801125c <sys_timeout_abs>
}
 801138c:	bf00      	nop
 801138e:	3718      	adds	r7, #24
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	2400b6f0 	.word	0x2400b6f0
 8011398:	08011339 	.word	0x08011339

0801139c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b082      	sub	sp, #8
 80113a0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80113a2:	2301      	movs	r3, #1
 80113a4:	607b      	str	r3, [r7, #4]
 80113a6:	e00e      	b.n	80113c6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80113a8:	4a0b      	ldr	r2, [pc, #44]	; (80113d8 <sys_timeouts_init+0x3c>)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	00db      	lsls	r3, r3, #3
 80113b4:	4a08      	ldr	r2, [pc, #32]	; (80113d8 <sys_timeouts_init+0x3c>)
 80113b6:	4413      	add	r3, r2
 80113b8:	461a      	mov	r2, r3
 80113ba:	4908      	ldr	r1, [pc, #32]	; (80113dc <sys_timeouts_init+0x40>)
 80113bc:	f000 f810 	bl	80113e0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	3301      	adds	r3, #1
 80113c4:	607b      	str	r3, [r7, #4]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2b02      	cmp	r3, #2
 80113ca:	d9ed      	bls.n	80113a8 <sys_timeouts_init+0xc>
  }
}
 80113cc:	bf00      	nop
 80113ce:	bf00      	nop
 80113d0:	3708      	adds	r7, #8
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}
 80113d6:	bf00      	nop
 80113d8:	0801ec0c 	.word	0x0801ec0c
 80113dc:	08011339 	.word	0x08011339

080113e0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b086      	sub	sp, #24
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	60f8      	str	r0, [r7, #12]
 80113e8:	60b9      	str	r1, [r7, #8]
 80113ea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113f2:	d306      	bcc.n	8011402 <sys_timeout+0x22>
 80113f4:	4b0a      	ldr	r3, [pc, #40]	; (8011420 <sys_timeout+0x40>)
 80113f6:	f240 1229 	movw	r2, #297	; 0x129
 80113fa:	490a      	ldr	r1, [pc, #40]	; (8011424 <sys_timeout+0x44>)
 80113fc:	480a      	ldr	r0, [pc, #40]	; (8011428 <sys_timeout+0x48>)
 80113fe:	f007 f85f 	bl	80184c0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011402:	f7f4 fc91 	bl	8005d28 <sys_now>
 8011406:	4602      	mov	r2, r0
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	4413      	add	r3, r2
 801140c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801140e:	687a      	ldr	r2, [r7, #4]
 8011410:	68b9      	ldr	r1, [r7, #8]
 8011412:	6978      	ldr	r0, [r7, #20]
 8011414:	f7ff ff22 	bl	801125c <sys_timeout_abs>
#endif
}
 8011418:	bf00      	nop
 801141a:	3718      	adds	r7, #24
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}
 8011420:	0801db7c 	.word	0x0801db7c
 8011424:	0801dc18 	.word	0x0801dc18
 8011428:	0801dbf0 	.word	0x0801dbf0

0801142c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011436:	4b19      	ldr	r3, [pc, #100]	; (801149c <sys_untimeout+0x70>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d029      	beq.n	8011492 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801143e:	4b17      	ldr	r3, [pc, #92]	; (801149c <sys_untimeout+0x70>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	60bb      	str	r3, [r7, #8]
 8011444:	2300      	movs	r3, #0
 8011446:	60fb      	str	r3, [r7, #12]
 8011448:	e01f      	b.n	801148a <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	689b      	ldr	r3, [r3, #8]
 801144e:	687a      	ldr	r2, [r7, #4]
 8011450:	429a      	cmp	r2, r3
 8011452:	d115      	bne.n	8011480 <sys_untimeout+0x54>
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	68db      	ldr	r3, [r3, #12]
 8011458:	683a      	ldr	r2, [r7, #0]
 801145a:	429a      	cmp	r2, r3
 801145c:	d110      	bne.n	8011480 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d104      	bne.n	801146e <sys_untimeout+0x42>
        next_timeout = t->next;
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4a0c      	ldr	r2, [pc, #48]	; (801149c <sys_untimeout+0x70>)
 801146a:	6013      	str	r3, [r2, #0]
 801146c:	e003      	b.n	8011476 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	681a      	ldr	r2, [r3, #0]
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8011476:	68b9      	ldr	r1, [r7, #8]
 8011478:	200a      	movs	r0, #10
 801147a:	f7f9 fa6d 	bl	800a958 <memp_free>
      return;
 801147e:	e009      	b.n	8011494 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	60fb      	str	r3, [r7, #12]
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	60bb      	str	r3, [r7, #8]
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d1dc      	bne.n	801144a <sys_untimeout+0x1e>
    }
  }
  return;
 8011490:	e000      	b.n	8011494 <sys_untimeout+0x68>
    return;
 8011492:	bf00      	nop
}
 8011494:	3710      	adds	r7, #16
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	2400b6ec 	.word	0x2400b6ec

080114a0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b084      	sub	sp, #16
 80114a4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80114a6:	f7f4 fc3f 	bl	8005d28 <sys_now>
 80114aa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80114ac:	4b17      	ldr	r3, [pc, #92]	; (801150c <sys_check_timeouts+0x6c>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d022      	beq.n	80114fe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	685b      	ldr	r3, [r3, #4]
 80114bc:	68fa      	ldr	r2, [r7, #12]
 80114be:	1ad3      	subs	r3, r2, r3
 80114c0:	0fdb      	lsrs	r3, r3, #31
 80114c2:	f003 0301 	and.w	r3, r3, #1
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d11a      	bne.n	8011502 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	4a0e      	ldr	r2, [pc, #56]	; (801150c <sys_check_timeouts+0x6c>)
 80114d2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	689b      	ldr	r3, [r3, #8]
 80114d8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	4a0a      	ldr	r2, [pc, #40]	; (8011510 <sys_check_timeouts+0x70>)
 80114e6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80114e8:	68b9      	ldr	r1, [r7, #8]
 80114ea:	200a      	movs	r0, #10
 80114ec:	f7f9 fa34 	bl	800a958 <memp_free>
    if (handler != NULL) {
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d0da      	beq.n	80114ac <sys_check_timeouts+0xc>
      handler(arg);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6838      	ldr	r0, [r7, #0]
 80114fa:	4798      	blx	r3
  do {
 80114fc:	e7d6      	b.n	80114ac <sys_check_timeouts+0xc>
      return;
 80114fe:	bf00      	nop
 8011500:	e000      	b.n	8011504 <sys_check_timeouts+0x64>
      return;
 8011502:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011504:	3710      	adds	r7, #16
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	2400b6ec 	.word	0x2400b6ec
 8011510:	2400b6f0 	.word	0x2400b6f0

08011514 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801151a:	4b16      	ldr	r3, [pc, #88]	; (8011574 <sys_timeouts_sleeptime+0x60>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d102      	bne.n	8011528 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011526:	e020      	b.n	801156a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011528:	f7f4 fbfe 	bl	8005d28 <sys_now>
 801152c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801152e:	4b11      	ldr	r3, [pc, #68]	; (8011574 <sys_timeouts_sleeptime+0x60>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	685a      	ldr	r2, [r3, #4]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	1ad3      	subs	r3, r2, r3
 8011538:	0fdb      	lsrs	r3, r3, #31
 801153a:	f003 0301 	and.w	r3, r3, #1
 801153e:	b2db      	uxtb	r3, r3
 8011540:	2b00      	cmp	r3, #0
 8011542:	d001      	beq.n	8011548 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011544:	2300      	movs	r3, #0
 8011546:	e010      	b.n	801156a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011548:	4b0a      	ldr	r3, [pc, #40]	; (8011574 <sys_timeouts_sleeptime+0x60>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	685a      	ldr	r2, [r3, #4]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	1ad3      	subs	r3, r2, r3
 8011552:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	2b00      	cmp	r3, #0
 8011558:	da06      	bge.n	8011568 <sys_timeouts_sleeptime+0x54>
 801155a:	4b07      	ldr	r3, [pc, #28]	; (8011578 <sys_timeouts_sleeptime+0x64>)
 801155c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011560:	4906      	ldr	r1, [pc, #24]	; (801157c <sys_timeouts_sleeptime+0x68>)
 8011562:	4807      	ldr	r0, [pc, #28]	; (8011580 <sys_timeouts_sleeptime+0x6c>)
 8011564:	f006 ffac 	bl	80184c0 <iprintf>
    return ret;
 8011568:	683b      	ldr	r3, [r7, #0]
  }
}
 801156a:	4618      	mov	r0, r3
 801156c:	3708      	adds	r7, #8
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}
 8011572:	bf00      	nop
 8011574:	2400b6ec 	.word	0x2400b6ec
 8011578:	0801db7c 	.word	0x0801db7c
 801157c:	0801dc50 	.word	0x0801dc50
 8011580:	0801dbf0 	.word	0x0801dbf0

08011584 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011588:	f006 ffb2 	bl	80184f0 <rand>
 801158c:	4603      	mov	r3, r0
 801158e:	b29b      	uxth	r3, r3
 8011590:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011594:	b29b      	uxth	r3, r3
 8011596:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801159a:	b29a      	uxth	r2, r3
 801159c:	4b01      	ldr	r3, [pc, #4]	; (80115a4 <udp_init+0x20>)
 801159e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80115a0:	bf00      	nop
 80115a2:	bd80      	pop	{r7, pc}
 80115a4:	24000030 	.word	0x24000030

080115a8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80115a8:	b480      	push	{r7}
 80115aa:	b083      	sub	sp, #12
 80115ac:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80115ae:	2300      	movs	r3, #0
 80115b0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80115b2:	4b17      	ldr	r3, [pc, #92]	; (8011610 <udp_new_port+0x68>)
 80115b4:	881b      	ldrh	r3, [r3, #0]
 80115b6:	1c5a      	adds	r2, r3, #1
 80115b8:	b291      	uxth	r1, r2
 80115ba:	4a15      	ldr	r2, [pc, #84]	; (8011610 <udp_new_port+0x68>)
 80115bc:	8011      	strh	r1, [r2, #0]
 80115be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d103      	bne.n	80115ce <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80115c6:	4b12      	ldr	r3, [pc, #72]	; (8011610 <udp_new_port+0x68>)
 80115c8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80115cc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80115ce:	4b11      	ldr	r3, [pc, #68]	; (8011614 <udp_new_port+0x6c>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	603b      	str	r3, [r7, #0]
 80115d4:	e011      	b.n	80115fa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	8a5a      	ldrh	r2, [r3, #18]
 80115da:	4b0d      	ldr	r3, [pc, #52]	; (8011610 <udp_new_port+0x68>)
 80115dc:	881b      	ldrh	r3, [r3, #0]
 80115de:	429a      	cmp	r2, r3
 80115e0:	d108      	bne.n	80115f4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80115e2:	88fb      	ldrh	r3, [r7, #6]
 80115e4:	3301      	adds	r3, #1
 80115e6:	80fb      	strh	r3, [r7, #6]
 80115e8:	88fb      	ldrh	r3, [r7, #6]
 80115ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80115ee:	d3e0      	bcc.n	80115b2 <udp_new_port+0xa>
        return 0;
 80115f0:	2300      	movs	r3, #0
 80115f2:	e007      	b.n	8011604 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	68db      	ldr	r3, [r3, #12]
 80115f8:	603b      	str	r3, [r7, #0]
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d1ea      	bne.n	80115d6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011600:	4b03      	ldr	r3, [pc, #12]	; (8011610 <udp_new_port+0x68>)
 8011602:	881b      	ldrh	r3, [r3, #0]
}
 8011604:	4618      	mov	r0, r3
 8011606:	370c      	adds	r7, #12
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr
 8011610:	24000030 	.word	0x24000030
 8011614:	2400ee58 	.word	0x2400ee58

08011618 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0
 801161e:	60f8      	str	r0, [r7, #12]
 8011620:	60b9      	str	r1, [r7, #8]
 8011622:	4613      	mov	r3, r2
 8011624:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d105      	bne.n	8011638 <udp_input_local_match+0x20>
 801162c:	4b27      	ldr	r3, [pc, #156]	; (80116cc <udp_input_local_match+0xb4>)
 801162e:	2287      	movs	r2, #135	; 0x87
 8011630:	4927      	ldr	r1, [pc, #156]	; (80116d0 <udp_input_local_match+0xb8>)
 8011632:	4828      	ldr	r0, [pc, #160]	; (80116d4 <udp_input_local_match+0xbc>)
 8011634:	f006 ff44 	bl	80184c0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d105      	bne.n	801164a <udp_input_local_match+0x32>
 801163e:	4b23      	ldr	r3, [pc, #140]	; (80116cc <udp_input_local_match+0xb4>)
 8011640:	2288      	movs	r2, #136	; 0x88
 8011642:	4925      	ldr	r1, [pc, #148]	; (80116d8 <udp_input_local_match+0xc0>)
 8011644:	4823      	ldr	r0, [pc, #140]	; (80116d4 <udp_input_local_match+0xbc>)
 8011646:	f006 ff3b 	bl	80184c0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	7a1b      	ldrb	r3, [r3, #8]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d00b      	beq.n	801166a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	7a1a      	ldrb	r2, [r3, #8]
 8011656:	4b21      	ldr	r3, [pc, #132]	; (80116dc <udp_input_local_match+0xc4>)
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801165e:	3301      	adds	r3, #1
 8011660:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011662:	429a      	cmp	r2, r3
 8011664:	d001      	beq.n	801166a <udp_input_local_match+0x52>
    return 0;
 8011666:	2300      	movs	r3, #0
 8011668:	e02b      	b.n	80116c2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801166a:	79fb      	ldrb	r3, [r7, #7]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d018      	beq.n	80116a2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d013      	beq.n	801169e <udp_input_local_match+0x86>
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d00f      	beq.n	801169e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801167e:	4b17      	ldr	r3, [pc, #92]	; (80116dc <udp_input_local_match+0xc4>)
 8011680:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011686:	d00a      	beq.n	801169e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	4b13      	ldr	r3, [pc, #76]	; (80116dc <udp_input_local_match+0xc4>)
 801168e:	695b      	ldr	r3, [r3, #20]
 8011690:	405a      	eors	r2, r3
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	3308      	adds	r3, #8
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801169a:	2b00      	cmp	r3, #0
 801169c:	d110      	bne.n	80116c0 <udp_input_local_match+0xa8>
          return 1;
 801169e:	2301      	movs	r3, #1
 80116a0:	e00f      	b.n	80116c2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d009      	beq.n	80116bc <udp_input_local_match+0xa4>
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d005      	beq.n	80116bc <udp_input_local_match+0xa4>
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	4b09      	ldr	r3, [pc, #36]	; (80116dc <udp_input_local_match+0xc4>)
 80116b6:	695b      	ldr	r3, [r3, #20]
 80116b8:	429a      	cmp	r2, r3
 80116ba:	d101      	bne.n	80116c0 <udp_input_local_match+0xa8>
        return 1;
 80116bc:	2301      	movs	r3, #1
 80116be:	e000      	b.n	80116c2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80116c0:	2300      	movs	r3, #0
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3710      	adds	r7, #16
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	0801dc64 	.word	0x0801dc64
 80116d0:	0801dc94 	.word	0x0801dc94
 80116d4:	0801dcb8 	.word	0x0801dcb8
 80116d8:	0801dce0 	.word	0x0801dce0
 80116dc:	2400bde0 	.word	0x2400bde0

080116e0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80116e0:	b590      	push	{r4, r7, lr}
 80116e2:	b08d      	sub	sp, #52	; 0x34
 80116e4:	af02      	add	r7, sp, #8
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80116ea:	2300      	movs	r3, #0
 80116ec:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d105      	bne.n	8011700 <udp_input+0x20>
 80116f4:	4b7c      	ldr	r3, [pc, #496]	; (80118e8 <udp_input+0x208>)
 80116f6:	22cf      	movs	r2, #207	; 0xcf
 80116f8:	497c      	ldr	r1, [pc, #496]	; (80118ec <udp_input+0x20c>)
 80116fa:	487d      	ldr	r0, [pc, #500]	; (80118f0 <udp_input+0x210>)
 80116fc:	f006 fee0 	bl	80184c0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d105      	bne.n	8011712 <udp_input+0x32>
 8011706:	4b78      	ldr	r3, [pc, #480]	; (80118e8 <udp_input+0x208>)
 8011708:	22d0      	movs	r2, #208	; 0xd0
 801170a:	497a      	ldr	r1, [pc, #488]	; (80118f4 <udp_input+0x214>)
 801170c:	4878      	ldr	r0, [pc, #480]	; (80118f0 <udp_input+0x210>)
 801170e:	f006 fed7 	bl	80184c0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	895b      	ldrh	r3, [r3, #10]
 8011716:	2b07      	cmp	r3, #7
 8011718:	d803      	bhi.n	8011722 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f7f9 ffc0 	bl	800b6a0 <pbuf_free>
    goto end;
 8011720:	e0de      	b.n	80118e0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011728:	4b73      	ldr	r3, [pc, #460]	; (80118f8 <udp_input+0x218>)
 801172a:	695b      	ldr	r3, [r3, #20]
 801172c:	4a72      	ldr	r2, [pc, #456]	; (80118f8 <udp_input+0x218>)
 801172e:	6812      	ldr	r2, [r2, #0]
 8011730:	4611      	mov	r1, r2
 8011732:	4618      	mov	r0, r3
 8011734:	f001 ff80 	bl	8013638 <ip4_addr_isbroadcast_u32>
 8011738:	4603      	mov	r3, r0
 801173a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	881b      	ldrh	r3, [r3, #0]
 8011740:	b29b      	uxth	r3, r3
 8011742:	4618      	mov	r0, r3
 8011744:	f7f8 fbbe 	bl	8009ec4 <lwip_htons>
 8011748:	4603      	mov	r3, r0
 801174a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	885b      	ldrh	r3, [r3, #2]
 8011750:	b29b      	uxth	r3, r3
 8011752:	4618      	mov	r0, r3
 8011754:	f7f8 fbb6 	bl	8009ec4 <lwip_htons>
 8011758:	4603      	mov	r3, r0
 801175a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801175c:	2300      	movs	r3, #0
 801175e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011760:	2300      	movs	r3, #0
 8011762:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011764:	2300      	movs	r3, #0
 8011766:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011768:	4b64      	ldr	r3, [pc, #400]	; (80118fc <udp_input+0x21c>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	627b      	str	r3, [r7, #36]	; 0x24
 801176e:	e054      	b.n	801181a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011772:	8a5b      	ldrh	r3, [r3, #18]
 8011774:	89fa      	ldrh	r2, [r7, #14]
 8011776:	429a      	cmp	r2, r3
 8011778:	d14a      	bne.n	8011810 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801177a:	7cfb      	ldrb	r3, [r7, #19]
 801177c:	461a      	mov	r2, r3
 801177e:	6839      	ldr	r1, [r7, #0]
 8011780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011782:	f7ff ff49 	bl	8011618 <udp_input_local_match>
 8011786:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011788:	2b00      	cmp	r3, #0
 801178a:	d041      	beq.n	8011810 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801178e:	7c1b      	ldrb	r3, [r3, #16]
 8011790:	f003 0304 	and.w	r3, r3, #4
 8011794:	2b00      	cmp	r3, #0
 8011796:	d11d      	bne.n	80117d4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011798:	69fb      	ldr	r3, [r7, #28]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d102      	bne.n	80117a4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a0:	61fb      	str	r3, [r7, #28]
 80117a2:	e017      	b.n	80117d4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80117a4:	7cfb      	ldrb	r3, [r7, #19]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d014      	beq.n	80117d4 <udp_input+0xf4>
 80117aa:	4b53      	ldr	r3, [pc, #332]	; (80118f8 <udp_input+0x218>)
 80117ac:	695b      	ldr	r3, [r3, #20]
 80117ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117b2:	d10f      	bne.n	80117d4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80117b4:	69fb      	ldr	r3, [r7, #28]
 80117b6:	681a      	ldr	r2, [r3, #0]
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	3304      	adds	r3, #4
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	429a      	cmp	r2, r3
 80117c0:	d008      	beq.n	80117d4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80117c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c4:	681a      	ldr	r2, [r3, #0]
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	3304      	adds	r3, #4
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	429a      	cmp	r2, r3
 80117ce:	d101      	bne.n	80117d4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80117d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80117d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d6:	8a9b      	ldrh	r3, [r3, #20]
 80117d8:	8a3a      	ldrh	r2, [r7, #16]
 80117da:	429a      	cmp	r2, r3
 80117dc:	d118      	bne.n	8011810 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80117de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d005      	beq.n	80117f2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80117e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e8:	685a      	ldr	r2, [r3, #4]
 80117ea:	4b43      	ldr	r3, [pc, #268]	; (80118f8 <udp_input+0x218>)
 80117ec:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d10e      	bne.n	8011810 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80117f2:	6a3b      	ldr	r3, [r7, #32]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d014      	beq.n	8011822 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80117f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fa:	68da      	ldr	r2, [r3, #12]
 80117fc:	6a3b      	ldr	r3, [r7, #32]
 80117fe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011800:	4b3e      	ldr	r3, [pc, #248]	; (80118fc <udp_input+0x21c>)
 8011802:	681a      	ldr	r2, [r3, #0]
 8011804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011806:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011808:	4a3c      	ldr	r2, [pc, #240]	; (80118fc <udp_input+0x21c>)
 801180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801180e:	e008      	b.n	8011822 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011812:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011816:	68db      	ldr	r3, [r3, #12]
 8011818:	627b      	str	r3, [r7, #36]	; 0x24
 801181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181c:	2b00      	cmp	r3, #0
 801181e:	d1a7      	bne.n	8011770 <udp_input+0x90>
 8011820:	e000      	b.n	8011824 <udp_input+0x144>
        break;
 8011822:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011826:	2b00      	cmp	r3, #0
 8011828:	d101      	bne.n	801182e <udp_input+0x14e>
    pcb = uncon_pcb;
 801182a:	69fb      	ldr	r3, [r7, #28]
 801182c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011830:	2b00      	cmp	r3, #0
 8011832:	d002      	beq.n	801183a <udp_input+0x15a>
    for_us = 1;
 8011834:	2301      	movs	r3, #1
 8011836:	76fb      	strb	r3, [r7, #27]
 8011838:	e00a      	b.n	8011850 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	3304      	adds	r3, #4
 801183e:	681a      	ldr	r2, [r3, #0]
 8011840:	4b2d      	ldr	r3, [pc, #180]	; (80118f8 <udp_input+0x218>)
 8011842:	695b      	ldr	r3, [r3, #20]
 8011844:	429a      	cmp	r2, r3
 8011846:	bf0c      	ite	eq
 8011848:	2301      	moveq	r3, #1
 801184a:	2300      	movne	r3, #0
 801184c:	b2db      	uxtb	r3, r3
 801184e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011850:	7efb      	ldrb	r3, [r7, #27]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d041      	beq.n	80118da <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011856:	2108      	movs	r1, #8
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f7f9 fe9b 	bl	800b594 <pbuf_remove_header>
 801185e:	4603      	mov	r3, r0
 8011860:	2b00      	cmp	r3, #0
 8011862:	d00a      	beq.n	801187a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011864:	4b20      	ldr	r3, [pc, #128]	; (80118e8 <udp_input+0x208>)
 8011866:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801186a:	4925      	ldr	r1, [pc, #148]	; (8011900 <udp_input+0x220>)
 801186c:	4820      	ldr	r0, [pc, #128]	; (80118f0 <udp_input+0x210>)
 801186e:	f006 fe27 	bl	80184c0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f7f9 ff14 	bl	800b6a0 <pbuf_free>
      goto end;
 8011878:	e032      	b.n	80118e0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187c:	2b00      	cmp	r3, #0
 801187e:	d012      	beq.n	80118a6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011882:	699b      	ldr	r3, [r3, #24]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d00a      	beq.n	801189e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188a:	699c      	ldr	r4, [r3, #24]
 801188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188e:	69d8      	ldr	r0, [r3, #28]
 8011890:	8a3b      	ldrh	r3, [r7, #16]
 8011892:	9300      	str	r3, [sp, #0]
 8011894:	4b1b      	ldr	r3, [pc, #108]	; (8011904 <udp_input+0x224>)
 8011896:	687a      	ldr	r2, [r7, #4]
 8011898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801189a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801189c:	e021      	b.n	80118e2 <udp_input+0x202>
        pbuf_free(p);
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f7f9 fefe 	bl	800b6a0 <pbuf_free>
        goto end;
 80118a4:	e01c      	b.n	80118e0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80118a6:	7cfb      	ldrb	r3, [r7, #19]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d112      	bne.n	80118d2 <udp_input+0x1f2>
 80118ac:	4b12      	ldr	r3, [pc, #72]	; (80118f8 <udp_input+0x218>)
 80118ae:	695b      	ldr	r3, [r3, #20]
 80118b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80118b4:	2be0      	cmp	r3, #224	; 0xe0
 80118b6:	d00c      	beq.n	80118d2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80118b8:	4b0f      	ldr	r3, [pc, #60]	; (80118f8 <udp_input+0x218>)
 80118ba:	899b      	ldrh	r3, [r3, #12]
 80118bc:	3308      	adds	r3, #8
 80118be:	b29b      	uxth	r3, r3
 80118c0:	b21b      	sxth	r3, r3
 80118c2:	4619      	mov	r1, r3
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f7f9 fed8 	bl	800b67a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80118ca:	2103      	movs	r1, #3
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f001 fb93 	bl	8012ff8 <icmp_dest_unreach>
      pbuf_free(p);
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f7f9 fee4 	bl	800b6a0 <pbuf_free>
  return;
 80118d8:	e003      	b.n	80118e2 <udp_input+0x202>
    pbuf_free(p);
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f7f9 fee0 	bl	800b6a0 <pbuf_free>
  return;
 80118e0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80118e2:	372c      	adds	r7, #44	; 0x2c
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd90      	pop	{r4, r7, pc}
 80118e8:	0801dc64 	.word	0x0801dc64
 80118ec:	0801dd08 	.word	0x0801dd08
 80118f0:	0801dcb8 	.word	0x0801dcb8
 80118f4:	0801dd20 	.word	0x0801dd20
 80118f8:	2400bde0 	.word	0x2400bde0
 80118fc:	2400ee58 	.word	0x2400ee58
 8011900:	0801dd3c 	.word	0x0801dd3c
 8011904:	2400bdf0 	.word	0x2400bdf0

08011908 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d109      	bne.n	801192c <udp_send+0x24>
 8011918:	4b11      	ldr	r3, [pc, #68]	; (8011960 <udp_send+0x58>)
 801191a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801191e:	4911      	ldr	r1, [pc, #68]	; (8011964 <udp_send+0x5c>)
 8011920:	4811      	ldr	r0, [pc, #68]	; (8011968 <udp_send+0x60>)
 8011922:	f006 fdcd 	bl	80184c0 <iprintf>
 8011926:	f06f 030f 	mvn.w	r3, #15
 801192a:	e015      	b.n	8011958 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d109      	bne.n	8011946 <udp_send+0x3e>
 8011932:	4b0b      	ldr	r3, [pc, #44]	; (8011960 <udp_send+0x58>)
 8011934:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8011938:	490c      	ldr	r1, [pc, #48]	; (801196c <udp_send+0x64>)
 801193a:	480b      	ldr	r0, [pc, #44]	; (8011968 <udp_send+0x60>)
 801193c:	f006 fdc0 	bl	80184c0 <iprintf>
 8011940:	f06f 030f 	mvn.w	r3, #15
 8011944:	e008      	b.n	8011958 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	1d1a      	adds	r2, r3, #4
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	8a9b      	ldrh	r3, [r3, #20]
 801194e:	6839      	ldr	r1, [r7, #0]
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	f000 f80d 	bl	8011970 <udp_sendto>
 8011956:	4603      	mov	r3, r0
}
 8011958:	4618      	mov	r0, r3
 801195a:	3708      	adds	r7, #8
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}
 8011960:	0801dc64 	.word	0x0801dc64
 8011964:	0801dd58 	.word	0x0801dd58
 8011968:	0801dcb8 	.word	0x0801dcb8
 801196c:	0801dd70 	.word	0x0801dd70

08011970 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b088      	sub	sp, #32
 8011974:	af02      	add	r7, sp, #8
 8011976:	60f8      	str	r0, [r7, #12]
 8011978:	60b9      	str	r1, [r7, #8]
 801197a:	607a      	str	r2, [r7, #4]
 801197c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d109      	bne.n	8011998 <udp_sendto+0x28>
 8011984:	4b23      	ldr	r3, [pc, #140]	; (8011a14 <udp_sendto+0xa4>)
 8011986:	f44f 7206 	mov.w	r2, #536	; 0x218
 801198a:	4923      	ldr	r1, [pc, #140]	; (8011a18 <udp_sendto+0xa8>)
 801198c:	4823      	ldr	r0, [pc, #140]	; (8011a1c <udp_sendto+0xac>)
 801198e:	f006 fd97 	bl	80184c0 <iprintf>
 8011992:	f06f 030f 	mvn.w	r3, #15
 8011996:	e038      	b.n	8011a0a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d109      	bne.n	80119b2 <udp_sendto+0x42>
 801199e:	4b1d      	ldr	r3, [pc, #116]	; (8011a14 <udp_sendto+0xa4>)
 80119a0:	f240 2219 	movw	r2, #537	; 0x219
 80119a4:	491e      	ldr	r1, [pc, #120]	; (8011a20 <udp_sendto+0xb0>)
 80119a6:	481d      	ldr	r0, [pc, #116]	; (8011a1c <udp_sendto+0xac>)
 80119a8:	f006 fd8a 	bl	80184c0 <iprintf>
 80119ac:	f06f 030f 	mvn.w	r3, #15
 80119b0:	e02b      	b.n	8011a0a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d109      	bne.n	80119cc <udp_sendto+0x5c>
 80119b8:	4b16      	ldr	r3, [pc, #88]	; (8011a14 <udp_sendto+0xa4>)
 80119ba:	f240 221a 	movw	r2, #538	; 0x21a
 80119be:	4919      	ldr	r1, [pc, #100]	; (8011a24 <udp_sendto+0xb4>)
 80119c0:	4816      	ldr	r0, [pc, #88]	; (8011a1c <udp_sendto+0xac>)
 80119c2:	f006 fd7d 	bl	80184c0 <iprintf>
 80119c6:	f06f 030f 	mvn.w	r3, #15
 80119ca:	e01e      	b.n	8011a0a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	7a1b      	ldrb	r3, [r3, #8]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d006      	beq.n	80119e2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	7a1b      	ldrb	r3, [r3, #8]
 80119d8:	4618      	mov	r0, r3
 80119da:	f7f9 fad3 	bl	800af84 <netif_get_by_index>
 80119de:	6178      	str	r0, [r7, #20]
 80119e0:	e003      	b.n	80119ea <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f001 fb92 	bl	801310c <ip4_route>
 80119e8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d102      	bne.n	80119f6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80119f0:	f06f 0303 	mvn.w	r3, #3
 80119f4:	e009      	b.n	8011a0a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80119f6:	887a      	ldrh	r2, [r7, #2]
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	9300      	str	r3, [sp, #0]
 80119fc:	4613      	mov	r3, r2
 80119fe:	687a      	ldr	r2, [r7, #4]
 8011a00:	68b9      	ldr	r1, [r7, #8]
 8011a02:	68f8      	ldr	r0, [r7, #12]
 8011a04:	f000 f810 	bl	8011a28 <udp_sendto_if>
 8011a08:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3718      	adds	r7, #24
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
 8011a12:	bf00      	nop
 8011a14:	0801dc64 	.word	0x0801dc64
 8011a18:	0801dd88 	.word	0x0801dd88
 8011a1c:	0801dcb8 	.word	0x0801dcb8
 8011a20:	0801dda0 	.word	0x0801dda0
 8011a24:	0801ddbc 	.word	0x0801ddbc

08011a28 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b088      	sub	sp, #32
 8011a2c:	af02      	add	r7, sp, #8
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	60b9      	str	r1, [r7, #8]
 8011a32:	607a      	str	r2, [r7, #4]
 8011a34:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d109      	bne.n	8011a50 <udp_sendto_if+0x28>
 8011a3c:	4b2e      	ldr	r3, [pc, #184]	; (8011af8 <udp_sendto_if+0xd0>)
 8011a3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a42:	492e      	ldr	r1, [pc, #184]	; (8011afc <udp_sendto_if+0xd4>)
 8011a44:	482e      	ldr	r0, [pc, #184]	; (8011b00 <udp_sendto_if+0xd8>)
 8011a46:	f006 fd3b 	bl	80184c0 <iprintf>
 8011a4a:	f06f 030f 	mvn.w	r3, #15
 8011a4e:	e04f      	b.n	8011af0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d109      	bne.n	8011a6a <udp_sendto_if+0x42>
 8011a56:	4b28      	ldr	r3, [pc, #160]	; (8011af8 <udp_sendto_if+0xd0>)
 8011a58:	f240 2281 	movw	r2, #641	; 0x281
 8011a5c:	4929      	ldr	r1, [pc, #164]	; (8011b04 <udp_sendto_if+0xdc>)
 8011a5e:	4828      	ldr	r0, [pc, #160]	; (8011b00 <udp_sendto_if+0xd8>)
 8011a60:	f006 fd2e 	bl	80184c0 <iprintf>
 8011a64:	f06f 030f 	mvn.w	r3, #15
 8011a68:	e042      	b.n	8011af0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d109      	bne.n	8011a84 <udp_sendto_if+0x5c>
 8011a70:	4b21      	ldr	r3, [pc, #132]	; (8011af8 <udp_sendto_if+0xd0>)
 8011a72:	f240 2282 	movw	r2, #642	; 0x282
 8011a76:	4924      	ldr	r1, [pc, #144]	; (8011b08 <udp_sendto_if+0xe0>)
 8011a78:	4821      	ldr	r0, [pc, #132]	; (8011b00 <udp_sendto_if+0xd8>)
 8011a7a:	f006 fd21 	bl	80184c0 <iprintf>
 8011a7e:	f06f 030f 	mvn.w	r3, #15
 8011a82:	e035      	b.n	8011af0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011a84:	6a3b      	ldr	r3, [r7, #32]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d109      	bne.n	8011a9e <udp_sendto_if+0x76>
 8011a8a:	4b1b      	ldr	r3, [pc, #108]	; (8011af8 <udp_sendto_if+0xd0>)
 8011a8c:	f240 2283 	movw	r2, #643	; 0x283
 8011a90:	491e      	ldr	r1, [pc, #120]	; (8011b0c <udp_sendto_if+0xe4>)
 8011a92:	481b      	ldr	r0, [pc, #108]	; (8011b00 <udp_sendto_if+0xd8>)
 8011a94:	f006 fd14 	bl	80184c0 <iprintf>
 8011a98:	f06f 030f 	mvn.w	r3, #15
 8011a9c:	e028      	b.n	8011af0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d009      	beq.n	8011ab8 <udp_sendto_if+0x90>
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d005      	beq.n	8011ab8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011ab4:	2be0      	cmp	r3, #224	; 0xe0
 8011ab6:	d103      	bne.n	8011ac0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011ab8:	6a3b      	ldr	r3, [r7, #32]
 8011aba:	3304      	adds	r3, #4
 8011abc:	617b      	str	r3, [r7, #20]
 8011abe:	e00b      	b.n	8011ad8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	681a      	ldr	r2, [r3, #0]
 8011ac4:	6a3b      	ldr	r3, [r7, #32]
 8011ac6:	3304      	adds	r3, #4
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d002      	beq.n	8011ad4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011ace:	f06f 0303 	mvn.w	r3, #3
 8011ad2:	e00d      	b.n	8011af0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011ad8:	887a      	ldrh	r2, [r7, #2]
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	9301      	str	r3, [sp, #4]
 8011ade:	6a3b      	ldr	r3, [r7, #32]
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	4613      	mov	r3, r2
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	68b9      	ldr	r1, [r7, #8]
 8011ae8:	68f8      	ldr	r0, [r7, #12]
 8011aea:	f000 f811 	bl	8011b10 <udp_sendto_if_src>
 8011aee:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3718      	adds	r7, #24
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}
 8011af8:	0801dc64 	.word	0x0801dc64
 8011afc:	0801ddd8 	.word	0x0801ddd8
 8011b00:	0801dcb8 	.word	0x0801dcb8
 8011b04:	0801ddf4 	.word	0x0801ddf4
 8011b08:	0801de10 	.word	0x0801de10
 8011b0c:	0801de30 	.word	0x0801de30

08011b10 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b08c      	sub	sp, #48	; 0x30
 8011b14:	af04      	add	r7, sp, #16
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	60b9      	str	r1, [r7, #8]
 8011b1a:	607a      	str	r2, [r7, #4]
 8011b1c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d109      	bne.n	8011b38 <udp_sendto_if_src+0x28>
 8011b24:	4b65      	ldr	r3, [pc, #404]	; (8011cbc <udp_sendto_if_src+0x1ac>)
 8011b26:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011b2a:	4965      	ldr	r1, [pc, #404]	; (8011cc0 <udp_sendto_if_src+0x1b0>)
 8011b2c:	4865      	ldr	r0, [pc, #404]	; (8011cc4 <udp_sendto_if_src+0x1b4>)
 8011b2e:	f006 fcc7 	bl	80184c0 <iprintf>
 8011b32:	f06f 030f 	mvn.w	r3, #15
 8011b36:	e0bc      	b.n	8011cb2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d109      	bne.n	8011b52 <udp_sendto_if_src+0x42>
 8011b3e:	4b5f      	ldr	r3, [pc, #380]	; (8011cbc <udp_sendto_if_src+0x1ac>)
 8011b40:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011b44:	4960      	ldr	r1, [pc, #384]	; (8011cc8 <udp_sendto_if_src+0x1b8>)
 8011b46:	485f      	ldr	r0, [pc, #380]	; (8011cc4 <udp_sendto_if_src+0x1b4>)
 8011b48:	f006 fcba 	bl	80184c0 <iprintf>
 8011b4c:	f06f 030f 	mvn.w	r3, #15
 8011b50:	e0af      	b.n	8011cb2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d109      	bne.n	8011b6c <udp_sendto_if_src+0x5c>
 8011b58:	4b58      	ldr	r3, [pc, #352]	; (8011cbc <udp_sendto_if_src+0x1ac>)
 8011b5a:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011b5e:	495b      	ldr	r1, [pc, #364]	; (8011ccc <udp_sendto_if_src+0x1bc>)
 8011b60:	4858      	ldr	r0, [pc, #352]	; (8011cc4 <udp_sendto_if_src+0x1b4>)
 8011b62:	f006 fcad 	bl	80184c0 <iprintf>
 8011b66:	f06f 030f 	mvn.w	r3, #15
 8011b6a:	e0a2      	b.n	8011cb2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d109      	bne.n	8011b86 <udp_sendto_if_src+0x76>
 8011b72:	4b52      	ldr	r3, [pc, #328]	; (8011cbc <udp_sendto_if_src+0x1ac>)
 8011b74:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011b78:	4955      	ldr	r1, [pc, #340]	; (8011cd0 <udp_sendto_if_src+0x1c0>)
 8011b7a:	4852      	ldr	r0, [pc, #328]	; (8011cc4 <udp_sendto_if_src+0x1b4>)
 8011b7c:	f006 fca0 	bl	80184c0 <iprintf>
 8011b80:	f06f 030f 	mvn.w	r3, #15
 8011b84:	e095      	b.n	8011cb2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d109      	bne.n	8011ba0 <udp_sendto_if_src+0x90>
 8011b8c:	4b4b      	ldr	r3, [pc, #300]	; (8011cbc <udp_sendto_if_src+0x1ac>)
 8011b8e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011b92:	4950      	ldr	r1, [pc, #320]	; (8011cd4 <udp_sendto_if_src+0x1c4>)
 8011b94:	484b      	ldr	r0, [pc, #300]	; (8011cc4 <udp_sendto_if_src+0x1b4>)
 8011b96:	f006 fc93 	bl	80184c0 <iprintf>
 8011b9a:	f06f 030f 	mvn.w	r3, #15
 8011b9e:	e088      	b.n	8011cb2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	8a5b      	ldrh	r3, [r3, #18]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d10f      	bne.n	8011bc8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011ba8:	68f9      	ldr	r1, [r7, #12]
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	8a5b      	ldrh	r3, [r3, #18]
 8011bae:	461a      	mov	r2, r3
 8011bb0:	68f8      	ldr	r0, [r7, #12]
 8011bb2:	f000 f893 	bl	8011cdc <udp_bind>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011bba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d002      	beq.n	8011bc8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011bc2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011bc6:	e074      	b.n	8011cb2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	891b      	ldrh	r3, [r3, #8]
 8011bcc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011bd0:	4293      	cmp	r3, r2
 8011bd2:	d902      	bls.n	8011bda <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011bd8:	e06b      	b.n	8011cb2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011bda:	2108      	movs	r1, #8
 8011bdc:	68b8      	ldr	r0, [r7, #8]
 8011bde:	f7f9 fcc9 	bl	800b574 <pbuf_add_header>
 8011be2:	4603      	mov	r3, r0
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d015      	beq.n	8011c14 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011be8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bec:	2108      	movs	r1, #8
 8011bee:	2022      	movs	r0, #34	; 0x22
 8011bf0:	f7f9 fa72 	bl	800b0d8 <pbuf_alloc>
 8011bf4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011bf6:	69fb      	ldr	r3, [r7, #28]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d102      	bne.n	8011c02 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c00:	e057      	b.n	8011cb2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	891b      	ldrh	r3, [r3, #8]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d006      	beq.n	8011c18 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011c0a:	68b9      	ldr	r1, [r7, #8]
 8011c0c:	69f8      	ldr	r0, [r7, #28]
 8011c0e:	f7f9 fe6b 	bl	800b8e8 <pbuf_chain>
 8011c12:	e001      	b.n	8011c18 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011c18:	69fb      	ldr	r3, [r7, #28]
 8011c1a:	895b      	ldrh	r3, [r3, #10]
 8011c1c:	2b07      	cmp	r3, #7
 8011c1e:	d806      	bhi.n	8011c2e <udp_sendto_if_src+0x11e>
 8011c20:	4b26      	ldr	r3, [pc, #152]	; (8011cbc <udp_sendto_if_src+0x1ac>)
 8011c22:	f240 320d 	movw	r2, #781	; 0x30d
 8011c26:	492c      	ldr	r1, [pc, #176]	; (8011cd8 <udp_sendto_if_src+0x1c8>)
 8011c28:	4826      	ldr	r0, [pc, #152]	; (8011cc4 <udp_sendto_if_src+0x1b4>)
 8011c2a:	f006 fc49 	bl	80184c0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011c2e:	69fb      	ldr	r3, [r7, #28]
 8011c30:	685b      	ldr	r3, [r3, #4]
 8011c32:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	8a5b      	ldrh	r3, [r3, #18]
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f7f8 f943 	bl	8009ec4 <lwip_htons>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	461a      	mov	r2, r3
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011c46:	887b      	ldrh	r3, [r7, #2]
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7f8 f93b 	bl	8009ec4 <lwip_htons>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	461a      	mov	r2, r3
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	719a      	strb	r2, [r3, #6]
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011c60:	69fb      	ldr	r3, [r7, #28]
 8011c62:	891b      	ldrh	r3, [r3, #8]
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7f8 f92d 	bl	8009ec4 <lwip_htons>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011c72:	2311      	movs	r3, #17
 8011c74:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	7adb      	ldrb	r3, [r3, #11]
 8011c7a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	7a9b      	ldrb	r3, [r3, #10]
 8011c80:	7cb9      	ldrb	r1, [r7, #18]
 8011c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c84:	9202      	str	r2, [sp, #8]
 8011c86:	7cfa      	ldrb	r2, [r7, #19]
 8011c88:	9201      	str	r2, [sp, #4]
 8011c8a:	9300      	str	r3, [sp, #0]
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	687a      	ldr	r2, [r7, #4]
 8011c90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c92:	69f8      	ldr	r0, [r7, #28]
 8011c94:	f001 fc22 	bl	80134dc <ip4_output_if_src>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011c9c:	69fa      	ldr	r2, [r7, #28]
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d004      	beq.n	8011cae <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011ca4:	69f8      	ldr	r0, [r7, #28]
 8011ca6:	f7f9 fcfb 	bl	800b6a0 <pbuf_free>
    q = NULL;
 8011caa:	2300      	movs	r3, #0
 8011cac:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011cae:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3720      	adds	r7, #32
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	0801dc64 	.word	0x0801dc64
 8011cc0:	0801de50 	.word	0x0801de50
 8011cc4:	0801dcb8 	.word	0x0801dcb8
 8011cc8:	0801de70 	.word	0x0801de70
 8011ccc:	0801de90 	.word	0x0801de90
 8011cd0:	0801deb4 	.word	0x0801deb4
 8011cd4:	0801ded8 	.word	0x0801ded8
 8011cd8:	0801defc 	.word	0x0801defc

08011cdc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b086      	sub	sp, #24
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	4613      	mov	r3, r2
 8011ce8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d101      	bne.n	8011cf4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011cf0:	4b39      	ldr	r3, [pc, #228]	; (8011dd8 <udp_bind+0xfc>)
 8011cf2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d109      	bne.n	8011d0e <udp_bind+0x32>
 8011cfa:	4b38      	ldr	r3, [pc, #224]	; (8011ddc <udp_bind+0x100>)
 8011cfc:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011d00:	4937      	ldr	r1, [pc, #220]	; (8011de0 <udp_bind+0x104>)
 8011d02:	4838      	ldr	r0, [pc, #224]	; (8011de4 <udp_bind+0x108>)
 8011d04:	f006 fbdc 	bl	80184c0 <iprintf>
 8011d08:	f06f 030f 	mvn.w	r3, #15
 8011d0c:	e060      	b.n	8011dd0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d12:	4b35      	ldr	r3, [pc, #212]	; (8011de8 <udp_bind+0x10c>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	617b      	str	r3, [r7, #20]
 8011d18:	e009      	b.n	8011d2e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011d1a:	68fa      	ldr	r2, [r7, #12]
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d102      	bne.n	8011d28 <udp_bind+0x4c>
      rebind = 1;
 8011d22:	2301      	movs	r3, #1
 8011d24:	74fb      	strb	r3, [r7, #19]
      break;
 8011d26:	e005      	b.n	8011d34 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	617b      	str	r3, [r7, #20]
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d1f2      	bne.n	8011d1a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011d34:	88fb      	ldrh	r3, [r7, #6]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d109      	bne.n	8011d4e <udp_bind+0x72>
    port = udp_new_port();
 8011d3a:	f7ff fc35 	bl	80115a8 <udp_new_port>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011d42:	88fb      	ldrh	r3, [r7, #6]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d12c      	bne.n	8011da2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011d48:	f06f 0307 	mvn.w	r3, #7
 8011d4c:	e040      	b.n	8011dd0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d4e:	4b26      	ldr	r3, [pc, #152]	; (8011de8 <udp_bind+0x10c>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	617b      	str	r3, [r7, #20]
 8011d54:	e022      	b.n	8011d9c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011d56:	68fa      	ldr	r2, [r7, #12]
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d01b      	beq.n	8011d96 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	8a5b      	ldrh	r3, [r3, #18]
 8011d62:	88fa      	ldrh	r2, [r7, #6]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d116      	bne.n	8011d96 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011d68:	697b      	ldr	r3, [r7, #20]
 8011d6a:	681a      	ldr	r2, [r3, #0]
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d00d      	beq.n	8011d90 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d00a      	beq.n	8011d90 <udp_bind+0xb4>
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d006      	beq.n	8011d90 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011d82:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d003      	beq.n	8011d90 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011d88:	697b      	ldr	r3, [r7, #20]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d102      	bne.n	8011d96 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011d90:	f06f 0307 	mvn.w	r3, #7
 8011d94:	e01c      	b.n	8011dd0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	68db      	ldr	r3, [r3, #12]
 8011d9a:	617b      	str	r3, [r7, #20]
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d1d9      	bne.n	8011d56 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d002      	beq.n	8011dae <udp_bind+0xd2>
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	e000      	b.n	8011db0 <udp_bind+0xd4>
 8011dae:	2300      	movs	r3, #0
 8011db0:	68fa      	ldr	r2, [r7, #12]
 8011db2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	88fa      	ldrh	r2, [r7, #6]
 8011db8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011dba:	7cfb      	ldrb	r3, [r7, #19]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d106      	bne.n	8011dce <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011dc0:	4b09      	ldr	r3, [pc, #36]	; (8011de8 <udp_bind+0x10c>)
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011dc8:	4a07      	ldr	r2, [pc, #28]	; (8011de8 <udp_bind+0x10c>)
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011dce:	2300      	movs	r3, #0
}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	3718      	adds	r7, #24
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}
 8011dd8:	0801ec24 	.word	0x0801ec24
 8011ddc:	0801dc64 	.word	0x0801dc64
 8011de0:	0801df2c 	.word	0x0801df2c
 8011de4:	0801dcb8 	.word	0x0801dcb8
 8011de8:	2400ee58 	.word	0x2400ee58

08011dec <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b086      	sub	sp, #24
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	4613      	mov	r3, r2
 8011df8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d109      	bne.n	8011e14 <udp_connect+0x28>
 8011e00:	4b2c      	ldr	r3, [pc, #176]	; (8011eb4 <udp_connect+0xc8>)
 8011e02:	f240 4235 	movw	r2, #1077	; 0x435
 8011e06:	492c      	ldr	r1, [pc, #176]	; (8011eb8 <udp_connect+0xcc>)
 8011e08:	482c      	ldr	r0, [pc, #176]	; (8011ebc <udp_connect+0xd0>)
 8011e0a:	f006 fb59 	bl	80184c0 <iprintf>
 8011e0e:	f06f 030f 	mvn.w	r3, #15
 8011e12:	e04b      	b.n	8011eac <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d109      	bne.n	8011e2e <udp_connect+0x42>
 8011e1a:	4b26      	ldr	r3, [pc, #152]	; (8011eb4 <udp_connect+0xc8>)
 8011e1c:	f240 4236 	movw	r2, #1078	; 0x436
 8011e20:	4927      	ldr	r1, [pc, #156]	; (8011ec0 <udp_connect+0xd4>)
 8011e22:	4826      	ldr	r0, [pc, #152]	; (8011ebc <udp_connect+0xd0>)
 8011e24:	f006 fb4c 	bl	80184c0 <iprintf>
 8011e28:	f06f 030f 	mvn.w	r3, #15
 8011e2c:	e03e      	b.n	8011eac <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	8a5b      	ldrh	r3, [r3, #18]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d10f      	bne.n	8011e56 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011e36:	68f9      	ldr	r1, [r7, #12]
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	8a5b      	ldrh	r3, [r3, #18]
 8011e3c:	461a      	mov	r2, r3
 8011e3e:	68f8      	ldr	r0, [r7, #12]
 8011e40:	f7ff ff4c 	bl	8011cdc <udp_bind>
 8011e44:	4603      	mov	r3, r0
 8011e46:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011e48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d002      	beq.n	8011e56 <udp_connect+0x6a>
      return err;
 8011e50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e54:	e02a      	b.n	8011eac <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d002      	beq.n	8011e62 <udp_connect+0x76>
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	e000      	b.n	8011e64 <udp_connect+0x78>
 8011e62:	2300      	movs	r3, #0
 8011e64:	68fa      	ldr	r2, [r7, #12]
 8011e66:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	88fa      	ldrh	r2, [r7, #6]
 8011e6c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	7c1b      	ldrb	r3, [r3, #16]
 8011e72:	f043 0304 	orr.w	r3, r3, #4
 8011e76:	b2da      	uxtb	r2, r3
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011e7c:	4b11      	ldr	r3, [pc, #68]	; (8011ec4 <udp_connect+0xd8>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	617b      	str	r3, [r7, #20]
 8011e82:	e008      	b.n	8011e96 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011e84:	68fa      	ldr	r2, [r7, #12]
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d101      	bne.n	8011e90 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	e00d      	b.n	8011eac <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011e90:	697b      	ldr	r3, [r7, #20]
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	617b      	str	r3, [r7, #20]
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d1f3      	bne.n	8011e84 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011e9c:	4b09      	ldr	r3, [pc, #36]	; (8011ec4 <udp_connect+0xd8>)
 8011e9e:	681a      	ldr	r2, [r3, #0]
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011ea4:	4a07      	ldr	r2, [pc, #28]	; (8011ec4 <udp_connect+0xd8>)
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011eaa:	2300      	movs	r3, #0
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3718      	adds	r7, #24
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	0801dc64 	.word	0x0801dc64
 8011eb8:	0801df44 	.word	0x0801df44
 8011ebc:	0801dcb8 	.word	0x0801dcb8
 8011ec0:	0801df60 	.word	0x0801df60
 8011ec4:	2400ee58 	.word	0x2400ee58

08011ec8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b082      	sub	sp, #8
 8011ecc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011ece:	2000      	movs	r0, #0
 8011ed0:	f7f8 fccc 	bl	800a86c <memp_malloc>
 8011ed4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d007      	beq.n	8011eec <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011edc:	2220      	movs	r2, #32
 8011ede:	2100      	movs	r1, #0
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f006 fa3b 	bl	801835c <memset>
    pcb->ttl = UDP_TTL;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	22ff      	movs	r2, #255	; 0xff
 8011eea:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011eec:	687b      	ldr	r3, [r7, #4]
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3708      	adds	r7, #8
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
	...

08011ef8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b085      	sub	sp, #20
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d01e      	beq.n	8011f46 <udp_netif_ip_addr_changed+0x4e>
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d01a      	beq.n	8011f46 <udp_netif_ip_addr_changed+0x4e>
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d017      	beq.n	8011f46 <udp_netif_ip_addr_changed+0x4e>
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d013      	beq.n	8011f46 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011f1e:	4b0d      	ldr	r3, [pc, #52]	; (8011f54 <udp_netif_ip_addr_changed+0x5c>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	60fb      	str	r3, [r7, #12]
 8011f24:	e00c      	b.n	8011f40 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	681a      	ldr	r2, [r3, #0]
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d103      	bne.n	8011f3a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	681a      	ldr	r2, [r3, #0]
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	60fb      	str	r3, [r7, #12]
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d1ef      	bne.n	8011f26 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011f46:	bf00      	nop
 8011f48:	3714      	adds	r7, #20
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	2400ee58 	.word	0x2400ee58

08011f58 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011f60:	4915      	ldr	r1, [pc, #84]	; (8011fb8 <etharp_free_entry+0x60>)
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	4613      	mov	r3, r2
 8011f66:	005b      	lsls	r3, r3, #1
 8011f68:	4413      	add	r3, r2
 8011f6a:	00db      	lsls	r3, r3, #3
 8011f6c:	440b      	add	r3, r1
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d013      	beq.n	8011f9c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011f74:	4910      	ldr	r1, [pc, #64]	; (8011fb8 <etharp_free_entry+0x60>)
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	4613      	mov	r3, r2
 8011f7a:	005b      	lsls	r3, r3, #1
 8011f7c:	4413      	add	r3, r2
 8011f7e:	00db      	lsls	r3, r3, #3
 8011f80:	440b      	add	r3, r1
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7f9 fb8b 	bl	800b6a0 <pbuf_free>
    arp_table[i].q = NULL;
 8011f8a:	490b      	ldr	r1, [pc, #44]	; (8011fb8 <etharp_free_entry+0x60>)
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	4613      	mov	r3, r2
 8011f90:	005b      	lsls	r3, r3, #1
 8011f92:	4413      	add	r3, r2
 8011f94:	00db      	lsls	r3, r3, #3
 8011f96:	440b      	add	r3, r1
 8011f98:	2200      	movs	r2, #0
 8011f9a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011f9c:	4906      	ldr	r1, [pc, #24]	; (8011fb8 <etharp_free_entry+0x60>)
 8011f9e:	687a      	ldr	r2, [r7, #4]
 8011fa0:	4613      	mov	r3, r2
 8011fa2:	005b      	lsls	r3, r3, #1
 8011fa4:	4413      	add	r3, r2
 8011fa6:	00db      	lsls	r3, r3, #3
 8011fa8:	440b      	add	r3, r1
 8011faa:	3314      	adds	r3, #20
 8011fac:	2200      	movs	r2, #0
 8011fae:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011fb0:	bf00      	nop
 8011fb2:	3708      	adds	r7, #8
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	2400b6f8 	.word	0x2400b6f8

08011fbc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b082      	sub	sp, #8
 8011fc0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	607b      	str	r3, [r7, #4]
 8011fc6:	e096      	b.n	80120f6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011fc8:	494f      	ldr	r1, [pc, #316]	; (8012108 <etharp_tmr+0x14c>)
 8011fca:	687a      	ldr	r2, [r7, #4]
 8011fcc:	4613      	mov	r3, r2
 8011fce:	005b      	lsls	r3, r3, #1
 8011fd0:	4413      	add	r3, r2
 8011fd2:	00db      	lsls	r3, r3, #3
 8011fd4:	440b      	add	r3, r1
 8011fd6:	3314      	adds	r3, #20
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011fdc:	78fb      	ldrb	r3, [r7, #3]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	f000 8086 	beq.w	80120f0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011fe4:	4948      	ldr	r1, [pc, #288]	; (8012108 <etharp_tmr+0x14c>)
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	4613      	mov	r3, r2
 8011fea:	005b      	lsls	r3, r3, #1
 8011fec:	4413      	add	r3, r2
 8011fee:	00db      	lsls	r3, r3, #3
 8011ff0:	440b      	add	r3, r1
 8011ff2:	3312      	adds	r3, #18
 8011ff4:	881b      	ldrh	r3, [r3, #0]
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	b298      	uxth	r0, r3
 8011ffa:	4943      	ldr	r1, [pc, #268]	; (8012108 <etharp_tmr+0x14c>)
 8011ffc:	687a      	ldr	r2, [r7, #4]
 8011ffe:	4613      	mov	r3, r2
 8012000:	005b      	lsls	r3, r3, #1
 8012002:	4413      	add	r3, r2
 8012004:	00db      	lsls	r3, r3, #3
 8012006:	440b      	add	r3, r1
 8012008:	3312      	adds	r3, #18
 801200a:	4602      	mov	r2, r0
 801200c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801200e:	493e      	ldr	r1, [pc, #248]	; (8012108 <etharp_tmr+0x14c>)
 8012010:	687a      	ldr	r2, [r7, #4]
 8012012:	4613      	mov	r3, r2
 8012014:	005b      	lsls	r3, r3, #1
 8012016:	4413      	add	r3, r2
 8012018:	00db      	lsls	r3, r3, #3
 801201a:	440b      	add	r3, r1
 801201c:	3312      	adds	r3, #18
 801201e:	881b      	ldrh	r3, [r3, #0]
 8012020:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012024:	d215      	bcs.n	8012052 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012026:	4938      	ldr	r1, [pc, #224]	; (8012108 <etharp_tmr+0x14c>)
 8012028:	687a      	ldr	r2, [r7, #4]
 801202a:	4613      	mov	r3, r2
 801202c:	005b      	lsls	r3, r3, #1
 801202e:	4413      	add	r3, r2
 8012030:	00db      	lsls	r3, r3, #3
 8012032:	440b      	add	r3, r1
 8012034:	3314      	adds	r3, #20
 8012036:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012038:	2b01      	cmp	r3, #1
 801203a:	d10e      	bne.n	801205a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801203c:	4932      	ldr	r1, [pc, #200]	; (8012108 <etharp_tmr+0x14c>)
 801203e:	687a      	ldr	r2, [r7, #4]
 8012040:	4613      	mov	r3, r2
 8012042:	005b      	lsls	r3, r3, #1
 8012044:	4413      	add	r3, r2
 8012046:	00db      	lsls	r3, r3, #3
 8012048:	440b      	add	r3, r1
 801204a:	3312      	adds	r3, #18
 801204c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801204e:	2b04      	cmp	r3, #4
 8012050:	d903      	bls.n	801205a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f7ff ff80 	bl	8011f58 <etharp_free_entry>
 8012058:	e04a      	b.n	80120f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801205a:	492b      	ldr	r1, [pc, #172]	; (8012108 <etharp_tmr+0x14c>)
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	4613      	mov	r3, r2
 8012060:	005b      	lsls	r3, r3, #1
 8012062:	4413      	add	r3, r2
 8012064:	00db      	lsls	r3, r3, #3
 8012066:	440b      	add	r3, r1
 8012068:	3314      	adds	r3, #20
 801206a:	781b      	ldrb	r3, [r3, #0]
 801206c:	2b03      	cmp	r3, #3
 801206e:	d10a      	bne.n	8012086 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012070:	4925      	ldr	r1, [pc, #148]	; (8012108 <etharp_tmr+0x14c>)
 8012072:	687a      	ldr	r2, [r7, #4]
 8012074:	4613      	mov	r3, r2
 8012076:	005b      	lsls	r3, r3, #1
 8012078:	4413      	add	r3, r2
 801207a:	00db      	lsls	r3, r3, #3
 801207c:	440b      	add	r3, r1
 801207e:	3314      	adds	r3, #20
 8012080:	2204      	movs	r2, #4
 8012082:	701a      	strb	r2, [r3, #0]
 8012084:	e034      	b.n	80120f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012086:	4920      	ldr	r1, [pc, #128]	; (8012108 <etharp_tmr+0x14c>)
 8012088:	687a      	ldr	r2, [r7, #4]
 801208a:	4613      	mov	r3, r2
 801208c:	005b      	lsls	r3, r3, #1
 801208e:	4413      	add	r3, r2
 8012090:	00db      	lsls	r3, r3, #3
 8012092:	440b      	add	r3, r1
 8012094:	3314      	adds	r3, #20
 8012096:	781b      	ldrb	r3, [r3, #0]
 8012098:	2b04      	cmp	r3, #4
 801209a:	d10a      	bne.n	80120b2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801209c:	491a      	ldr	r1, [pc, #104]	; (8012108 <etharp_tmr+0x14c>)
 801209e:	687a      	ldr	r2, [r7, #4]
 80120a0:	4613      	mov	r3, r2
 80120a2:	005b      	lsls	r3, r3, #1
 80120a4:	4413      	add	r3, r2
 80120a6:	00db      	lsls	r3, r3, #3
 80120a8:	440b      	add	r3, r1
 80120aa:	3314      	adds	r3, #20
 80120ac:	2202      	movs	r2, #2
 80120ae:	701a      	strb	r2, [r3, #0]
 80120b0:	e01e      	b.n	80120f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80120b2:	4915      	ldr	r1, [pc, #84]	; (8012108 <etharp_tmr+0x14c>)
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	4613      	mov	r3, r2
 80120b8:	005b      	lsls	r3, r3, #1
 80120ba:	4413      	add	r3, r2
 80120bc:	00db      	lsls	r3, r3, #3
 80120be:	440b      	add	r3, r1
 80120c0:	3314      	adds	r3, #20
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	2b01      	cmp	r3, #1
 80120c6:	d113      	bne.n	80120f0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80120c8:	490f      	ldr	r1, [pc, #60]	; (8012108 <etharp_tmr+0x14c>)
 80120ca:	687a      	ldr	r2, [r7, #4]
 80120cc:	4613      	mov	r3, r2
 80120ce:	005b      	lsls	r3, r3, #1
 80120d0:	4413      	add	r3, r2
 80120d2:	00db      	lsls	r3, r3, #3
 80120d4:	440b      	add	r3, r1
 80120d6:	3308      	adds	r3, #8
 80120d8:	6818      	ldr	r0, [r3, #0]
 80120da:	687a      	ldr	r2, [r7, #4]
 80120dc:	4613      	mov	r3, r2
 80120de:	005b      	lsls	r3, r3, #1
 80120e0:	4413      	add	r3, r2
 80120e2:	00db      	lsls	r3, r3, #3
 80120e4:	4a08      	ldr	r2, [pc, #32]	; (8012108 <etharp_tmr+0x14c>)
 80120e6:	4413      	add	r3, r2
 80120e8:	3304      	adds	r3, #4
 80120ea:	4619      	mov	r1, r3
 80120ec:	f000 fe6e 	bl	8012dcc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	3301      	adds	r3, #1
 80120f4:	607b      	str	r3, [r7, #4]
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2b09      	cmp	r3, #9
 80120fa:	f77f af65 	ble.w	8011fc8 <etharp_tmr+0xc>
      }
    }
  }
}
 80120fe:	bf00      	nop
 8012100:	bf00      	nop
 8012102:	3708      	adds	r7, #8
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}
 8012108:	2400b6f8 	.word	0x2400b6f8

0801210c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b08a      	sub	sp, #40	; 0x28
 8012110:	af00      	add	r7, sp, #0
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	460b      	mov	r3, r1
 8012116:	607a      	str	r2, [r7, #4]
 8012118:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801211a:	230a      	movs	r3, #10
 801211c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801211e:	230a      	movs	r3, #10
 8012120:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012122:	230a      	movs	r3, #10
 8012124:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012126:	2300      	movs	r3, #0
 8012128:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801212a:	230a      	movs	r3, #10
 801212c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801212e:	2300      	movs	r3, #0
 8012130:	83bb      	strh	r3, [r7, #28]
 8012132:	2300      	movs	r3, #0
 8012134:	837b      	strh	r3, [r7, #26]
 8012136:	2300      	movs	r3, #0
 8012138:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801213a:	2300      	movs	r3, #0
 801213c:	843b      	strh	r3, [r7, #32]
 801213e:	e0ae      	b.n	801229e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012140:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012144:	49a6      	ldr	r1, [pc, #664]	; (80123e0 <etharp_find_entry+0x2d4>)
 8012146:	4613      	mov	r3, r2
 8012148:	005b      	lsls	r3, r3, #1
 801214a:	4413      	add	r3, r2
 801214c:	00db      	lsls	r3, r3, #3
 801214e:	440b      	add	r3, r1
 8012150:	3314      	adds	r3, #20
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012156:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801215a:	2b0a      	cmp	r3, #10
 801215c:	d105      	bne.n	801216a <etharp_find_entry+0x5e>
 801215e:	7dfb      	ldrb	r3, [r7, #23]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d102      	bne.n	801216a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012164:	8c3b      	ldrh	r3, [r7, #32]
 8012166:	847b      	strh	r3, [r7, #34]	; 0x22
 8012168:	e095      	b.n	8012296 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801216a:	7dfb      	ldrb	r3, [r7, #23]
 801216c:	2b00      	cmp	r3, #0
 801216e:	f000 8092 	beq.w	8012296 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012172:	7dfb      	ldrb	r3, [r7, #23]
 8012174:	2b01      	cmp	r3, #1
 8012176:	d009      	beq.n	801218c <etharp_find_entry+0x80>
 8012178:	7dfb      	ldrb	r3, [r7, #23]
 801217a:	2b01      	cmp	r3, #1
 801217c:	d806      	bhi.n	801218c <etharp_find_entry+0x80>
 801217e:	4b99      	ldr	r3, [pc, #612]	; (80123e4 <etharp_find_entry+0x2d8>)
 8012180:	f240 1223 	movw	r2, #291	; 0x123
 8012184:	4998      	ldr	r1, [pc, #608]	; (80123e8 <etharp_find_entry+0x2dc>)
 8012186:	4899      	ldr	r0, [pc, #612]	; (80123ec <etharp_find_entry+0x2e0>)
 8012188:	f006 f99a 	bl	80184c0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d020      	beq.n	80121d4 <etharp_find_entry+0xc8>
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	6819      	ldr	r1, [r3, #0]
 8012196:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801219a:	4891      	ldr	r0, [pc, #580]	; (80123e0 <etharp_find_entry+0x2d4>)
 801219c:	4613      	mov	r3, r2
 801219e:	005b      	lsls	r3, r3, #1
 80121a0:	4413      	add	r3, r2
 80121a2:	00db      	lsls	r3, r3, #3
 80121a4:	4403      	add	r3, r0
 80121a6:	3304      	adds	r3, #4
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	4299      	cmp	r1, r3
 80121ac:	d112      	bne.n	80121d4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d00c      	beq.n	80121ce <etharp_find_entry+0xc2>
 80121b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121b8:	4989      	ldr	r1, [pc, #548]	; (80123e0 <etharp_find_entry+0x2d4>)
 80121ba:	4613      	mov	r3, r2
 80121bc:	005b      	lsls	r3, r3, #1
 80121be:	4413      	add	r3, r2
 80121c0:	00db      	lsls	r3, r3, #3
 80121c2:	440b      	add	r3, r1
 80121c4:	3308      	adds	r3, #8
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	687a      	ldr	r2, [r7, #4]
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d102      	bne.n	80121d4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80121ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80121d2:	e100      	b.n	80123d6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80121d4:	7dfb      	ldrb	r3, [r7, #23]
 80121d6:	2b01      	cmp	r3, #1
 80121d8:	d140      	bne.n	801225c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80121da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121de:	4980      	ldr	r1, [pc, #512]	; (80123e0 <etharp_find_entry+0x2d4>)
 80121e0:	4613      	mov	r3, r2
 80121e2:	005b      	lsls	r3, r3, #1
 80121e4:	4413      	add	r3, r2
 80121e6:	00db      	lsls	r3, r3, #3
 80121e8:	440b      	add	r3, r1
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d01a      	beq.n	8012226 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80121f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121f4:	497a      	ldr	r1, [pc, #488]	; (80123e0 <etharp_find_entry+0x2d4>)
 80121f6:	4613      	mov	r3, r2
 80121f8:	005b      	lsls	r3, r3, #1
 80121fa:	4413      	add	r3, r2
 80121fc:	00db      	lsls	r3, r3, #3
 80121fe:	440b      	add	r3, r1
 8012200:	3312      	adds	r3, #18
 8012202:	881b      	ldrh	r3, [r3, #0]
 8012204:	8bba      	ldrh	r2, [r7, #28]
 8012206:	429a      	cmp	r2, r3
 8012208:	d845      	bhi.n	8012296 <etharp_find_entry+0x18a>
            old_queue = i;
 801220a:	8c3b      	ldrh	r3, [r7, #32]
 801220c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801220e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012212:	4973      	ldr	r1, [pc, #460]	; (80123e0 <etharp_find_entry+0x2d4>)
 8012214:	4613      	mov	r3, r2
 8012216:	005b      	lsls	r3, r3, #1
 8012218:	4413      	add	r3, r2
 801221a:	00db      	lsls	r3, r3, #3
 801221c:	440b      	add	r3, r1
 801221e:	3312      	adds	r3, #18
 8012220:	881b      	ldrh	r3, [r3, #0]
 8012222:	83bb      	strh	r3, [r7, #28]
 8012224:	e037      	b.n	8012296 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012226:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801222a:	496d      	ldr	r1, [pc, #436]	; (80123e0 <etharp_find_entry+0x2d4>)
 801222c:	4613      	mov	r3, r2
 801222e:	005b      	lsls	r3, r3, #1
 8012230:	4413      	add	r3, r2
 8012232:	00db      	lsls	r3, r3, #3
 8012234:	440b      	add	r3, r1
 8012236:	3312      	adds	r3, #18
 8012238:	881b      	ldrh	r3, [r3, #0]
 801223a:	8b7a      	ldrh	r2, [r7, #26]
 801223c:	429a      	cmp	r2, r3
 801223e:	d82a      	bhi.n	8012296 <etharp_find_entry+0x18a>
            old_pending = i;
 8012240:	8c3b      	ldrh	r3, [r7, #32]
 8012242:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012244:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012248:	4965      	ldr	r1, [pc, #404]	; (80123e0 <etharp_find_entry+0x2d4>)
 801224a:	4613      	mov	r3, r2
 801224c:	005b      	lsls	r3, r3, #1
 801224e:	4413      	add	r3, r2
 8012250:	00db      	lsls	r3, r3, #3
 8012252:	440b      	add	r3, r1
 8012254:	3312      	adds	r3, #18
 8012256:	881b      	ldrh	r3, [r3, #0]
 8012258:	837b      	strh	r3, [r7, #26]
 801225a:	e01c      	b.n	8012296 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801225c:	7dfb      	ldrb	r3, [r7, #23]
 801225e:	2b01      	cmp	r3, #1
 8012260:	d919      	bls.n	8012296 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012262:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012266:	495e      	ldr	r1, [pc, #376]	; (80123e0 <etharp_find_entry+0x2d4>)
 8012268:	4613      	mov	r3, r2
 801226a:	005b      	lsls	r3, r3, #1
 801226c:	4413      	add	r3, r2
 801226e:	00db      	lsls	r3, r3, #3
 8012270:	440b      	add	r3, r1
 8012272:	3312      	adds	r3, #18
 8012274:	881b      	ldrh	r3, [r3, #0]
 8012276:	8b3a      	ldrh	r2, [r7, #24]
 8012278:	429a      	cmp	r2, r3
 801227a:	d80c      	bhi.n	8012296 <etharp_find_entry+0x18a>
            old_stable = i;
 801227c:	8c3b      	ldrh	r3, [r7, #32]
 801227e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012280:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012284:	4956      	ldr	r1, [pc, #344]	; (80123e0 <etharp_find_entry+0x2d4>)
 8012286:	4613      	mov	r3, r2
 8012288:	005b      	lsls	r3, r3, #1
 801228a:	4413      	add	r3, r2
 801228c:	00db      	lsls	r3, r3, #3
 801228e:	440b      	add	r3, r1
 8012290:	3312      	adds	r3, #18
 8012292:	881b      	ldrh	r3, [r3, #0]
 8012294:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012296:	8c3b      	ldrh	r3, [r7, #32]
 8012298:	3301      	adds	r3, #1
 801229a:	b29b      	uxth	r3, r3
 801229c:	843b      	strh	r3, [r7, #32]
 801229e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122a2:	2b09      	cmp	r3, #9
 80122a4:	f77f af4c 	ble.w	8012140 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80122a8:	7afb      	ldrb	r3, [r7, #11]
 80122aa:	f003 0302 	and.w	r3, r3, #2
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d108      	bne.n	80122c4 <etharp_find_entry+0x1b8>
 80122b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80122b6:	2b0a      	cmp	r3, #10
 80122b8:	d107      	bne.n	80122ca <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80122ba:	7afb      	ldrb	r3, [r7, #11]
 80122bc:	f003 0301 	and.w	r3, r3, #1
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d102      	bne.n	80122ca <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80122c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122c8:	e085      	b.n	80123d6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80122ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80122ce:	2b09      	cmp	r3, #9
 80122d0:	dc02      	bgt.n	80122d8 <etharp_find_entry+0x1cc>
    i = empty;
 80122d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80122d4:	843b      	strh	r3, [r7, #32]
 80122d6:	e039      	b.n	801234c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80122d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80122dc:	2b09      	cmp	r3, #9
 80122de:	dc14      	bgt.n	801230a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80122e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122e2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80122e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122e8:	493d      	ldr	r1, [pc, #244]	; (80123e0 <etharp_find_entry+0x2d4>)
 80122ea:	4613      	mov	r3, r2
 80122ec:	005b      	lsls	r3, r3, #1
 80122ee:	4413      	add	r3, r2
 80122f0:	00db      	lsls	r3, r3, #3
 80122f2:	440b      	add	r3, r1
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d018      	beq.n	801232c <etharp_find_entry+0x220>
 80122fa:	4b3a      	ldr	r3, [pc, #232]	; (80123e4 <etharp_find_entry+0x2d8>)
 80122fc:	f240 126d 	movw	r2, #365	; 0x16d
 8012300:	493b      	ldr	r1, [pc, #236]	; (80123f0 <etharp_find_entry+0x2e4>)
 8012302:	483a      	ldr	r0, [pc, #232]	; (80123ec <etharp_find_entry+0x2e0>)
 8012304:	f006 f8dc 	bl	80184c0 <iprintf>
 8012308:	e010      	b.n	801232c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801230a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801230e:	2b09      	cmp	r3, #9
 8012310:	dc02      	bgt.n	8012318 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012314:	843b      	strh	r3, [r7, #32]
 8012316:	e009      	b.n	801232c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012318:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801231c:	2b09      	cmp	r3, #9
 801231e:	dc02      	bgt.n	8012326 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012320:	8bfb      	ldrh	r3, [r7, #30]
 8012322:	843b      	strh	r3, [r7, #32]
 8012324:	e002      	b.n	801232c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801232a:	e054      	b.n	80123d6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801232c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012330:	2b09      	cmp	r3, #9
 8012332:	dd06      	ble.n	8012342 <etharp_find_entry+0x236>
 8012334:	4b2b      	ldr	r3, [pc, #172]	; (80123e4 <etharp_find_entry+0x2d8>)
 8012336:	f240 127f 	movw	r2, #383	; 0x17f
 801233a:	492e      	ldr	r1, [pc, #184]	; (80123f4 <etharp_find_entry+0x2e8>)
 801233c:	482b      	ldr	r0, [pc, #172]	; (80123ec <etharp_find_entry+0x2e0>)
 801233e:	f006 f8bf 	bl	80184c0 <iprintf>
    etharp_free_entry(i);
 8012342:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012346:	4618      	mov	r0, r3
 8012348:	f7ff fe06 	bl	8011f58 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801234c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012350:	2b09      	cmp	r3, #9
 8012352:	dd06      	ble.n	8012362 <etharp_find_entry+0x256>
 8012354:	4b23      	ldr	r3, [pc, #140]	; (80123e4 <etharp_find_entry+0x2d8>)
 8012356:	f240 1283 	movw	r2, #387	; 0x183
 801235a:	4926      	ldr	r1, [pc, #152]	; (80123f4 <etharp_find_entry+0x2e8>)
 801235c:	4823      	ldr	r0, [pc, #140]	; (80123ec <etharp_find_entry+0x2e0>)
 801235e:	f006 f8af 	bl	80184c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012362:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012366:	491e      	ldr	r1, [pc, #120]	; (80123e0 <etharp_find_entry+0x2d4>)
 8012368:	4613      	mov	r3, r2
 801236a:	005b      	lsls	r3, r3, #1
 801236c:	4413      	add	r3, r2
 801236e:	00db      	lsls	r3, r3, #3
 8012370:	440b      	add	r3, r1
 8012372:	3314      	adds	r3, #20
 8012374:	781b      	ldrb	r3, [r3, #0]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d006      	beq.n	8012388 <etharp_find_entry+0x27c>
 801237a:	4b1a      	ldr	r3, [pc, #104]	; (80123e4 <etharp_find_entry+0x2d8>)
 801237c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012380:	491d      	ldr	r1, [pc, #116]	; (80123f8 <etharp_find_entry+0x2ec>)
 8012382:	481a      	ldr	r0, [pc, #104]	; (80123ec <etharp_find_entry+0x2e0>)
 8012384:	f006 f89c 	bl	80184c0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d00b      	beq.n	80123a6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801238e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	6819      	ldr	r1, [r3, #0]
 8012396:	4812      	ldr	r0, [pc, #72]	; (80123e0 <etharp_find_entry+0x2d4>)
 8012398:	4613      	mov	r3, r2
 801239a:	005b      	lsls	r3, r3, #1
 801239c:	4413      	add	r3, r2
 801239e:	00db      	lsls	r3, r3, #3
 80123a0:	4403      	add	r3, r0
 80123a2:	3304      	adds	r3, #4
 80123a4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80123a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123aa:	490d      	ldr	r1, [pc, #52]	; (80123e0 <etharp_find_entry+0x2d4>)
 80123ac:	4613      	mov	r3, r2
 80123ae:	005b      	lsls	r3, r3, #1
 80123b0:	4413      	add	r3, r2
 80123b2:	00db      	lsls	r3, r3, #3
 80123b4:	440b      	add	r3, r1
 80123b6:	3312      	adds	r3, #18
 80123b8:	2200      	movs	r2, #0
 80123ba:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80123bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123c0:	4907      	ldr	r1, [pc, #28]	; (80123e0 <etharp_find_entry+0x2d4>)
 80123c2:	4613      	mov	r3, r2
 80123c4:	005b      	lsls	r3, r3, #1
 80123c6:	4413      	add	r3, r2
 80123c8:	00db      	lsls	r3, r3, #3
 80123ca:	440b      	add	r3, r1
 80123cc:	3308      	adds	r3, #8
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80123d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3728      	adds	r7, #40	; 0x28
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop
 80123e0:	2400b6f8 	.word	0x2400b6f8
 80123e4:	0801dfc8 	.word	0x0801dfc8
 80123e8:	0801e000 	.word	0x0801e000
 80123ec:	0801e040 	.word	0x0801e040
 80123f0:	0801e068 	.word	0x0801e068
 80123f4:	0801e080 	.word	0x0801e080
 80123f8:	0801e094 	.word	0x0801e094

080123fc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b088      	sub	sp, #32
 8012400:	af02      	add	r7, sp, #8
 8012402:	60f8      	str	r0, [r7, #12]
 8012404:	60b9      	str	r1, [r7, #8]
 8012406:	607a      	str	r2, [r7, #4]
 8012408:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012410:	2b06      	cmp	r3, #6
 8012412:	d006      	beq.n	8012422 <etharp_update_arp_entry+0x26>
 8012414:	4b48      	ldr	r3, [pc, #288]	; (8012538 <etharp_update_arp_entry+0x13c>)
 8012416:	f240 12a9 	movw	r2, #425	; 0x1a9
 801241a:	4948      	ldr	r1, [pc, #288]	; (801253c <etharp_update_arp_entry+0x140>)
 801241c:	4848      	ldr	r0, [pc, #288]	; (8012540 <etharp_update_arp_entry+0x144>)
 801241e:	f006 f84f 	bl	80184c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d012      	beq.n	801244e <etharp_update_arp_entry+0x52>
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d00e      	beq.n	801244e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	68f9      	ldr	r1, [r7, #12]
 8012436:	4618      	mov	r0, r3
 8012438:	f001 f8fe 	bl	8013638 <ip4_addr_isbroadcast_u32>
 801243c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801243e:	2b00      	cmp	r3, #0
 8012440:	d105      	bne.n	801244e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801244a:	2be0      	cmp	r3, #224	; 0xe0
 801244c:	d102      	bne.n	8012454 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801244e:	f06f 030f 	mvn.w	r3, #15
 8012452:	e06c      	b.n	801252e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012454:	78fb      	ldrb	r3, [r7, #3]
 8012456:	68fa      	ldr	r2, [r7, #12]
 8012458:	4619      	mov	r1, r3
 801245a:	68b8      	ldr	r0, [r7, #8]
 801245c:	f7ff fe56 	bl	801210c <etharp_find_entry>
 8012460:	4603      	mov	r3, r0
 8012462:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012464:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012468:	2b00      	cmp	r3, #0
 801246a:	da02      	bge.n	8012472 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801246c:	8afb      	ldrh	r3, [r7, #22]
 801246e:	b25b      	sxtb	r3, r3
 8012470:	e05d      	b.n	801252e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012472:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012476:	4933      	ldr	r1, [pc, #204]	; (8012544 <etharp_update_arp_entry+0x148>)
 8012478:	4613      	mov	r3, r2
 801247a:	005b      	lsls	r3, r3, #1
 801247c:	4413      	add	r3, r2
 801247e:	00db      	lsls	r3, r3, #3
 8012480:	440b      	add	r3, r1
 8012482:	3314      	adds	r3, #20
 8012484:	2202      	movs	r2, #2
 8012486:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012488:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801248c:	492d      	ldr	r1, [pc, #180]	; (8012544 <etharp_update_arp_entry+0x148>)
 801248e:	4613      	mov	r3, r2
 8012490:	005b      	lsls	r3, r3, #1
 8012492:	4413      	add	r3, r2
 8012494:	00db      	lsls	r3, r3, #3
 8012496:	440b      	add	r3, r1
 8012498:	3308      	adds	r3, #8
 801249a:	68fa      	ldr	r2, [r7, #12]
 801249c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801249e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124a2:	4613      	mov	r3, r2
 80124a4:	005b      	lsls	r3, r3, #1
 80124a6:	4413      	add	r3, r2
 80124a8:	00db      	lsls	r3, r3, #3
 80124aa:	3308      	adds	r3, #8
 80124ac:	4a25      	ldr	r2, [pc, #148]	; (8012544 <etharp_update_arp_entry+0x148>)
 80124ae:	4413      	add	r3, r2
 80124b0:	3304      	adds	r3, #4
 80124b2:	2206      	movs	r2, #6
 80124b4:	6879      	ldr	r1, [r7, #4]
 80124b6:	4618      	mov	r0, r3
 80124b8:	f005 ff28 	bl	801830c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80124bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124c0:	4920      	ldr	r1, [pc, #128]	; (8012544 <etharp_update_arp_entry+0x148>)
 80124c2:	4613      	mov	r3, r2
 80124c4:	005b      	lsls	r3, r3, #1
 80124c6:	4413      	add	r3, r2
 80124c8:	00db      	lsls	r3, r3, #3
 80124ca:	440b      	add	r3, r1
 80124cc:	3312      	adds	r3, #18
 80124ce:	2200      	movs	r2, #0
 80124d0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80124d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124d6:	491b      	ldr	r1, [pc, #108]	; (8012544 <etharp_update_arp_entry+0x148>)
 80124d8:	4613      	mov	r3, r2
 80124da:	005b      	lsls	r3, r3, #1
 80124dc:	4413      	add	r3, r2
 80124de:	00db      	lsls	r3, r3, #3
 80124e0:	440b      	add	r3, r1
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d021      	beq.n	801252c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80124e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124ec:	4915      	ldr	r1, [pc, #84]	; (8012544 <etharp_update_arp_entry+0x148>)
 80124ee:	4613      	mov	r3, r2
 80124f0:	005b      	lsls	r3, r3, #1
 80124f2:	4413      	add	r3, r2
 80124f4:	00db      	lsls	r3, r3, #3
 80124f6:	440b      	add	r3, r1
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80124fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012500:	4910      	ldr	r1, [pc, #64]	; (8012544 <etharp_update_arp_entry+0x148>)
 8012502:	4613      	mov	r3, r2
 8012504:	005b      	lsls	r3, r3, #1
 8012506:	4413      	add	r3, r2
 8012508:	00db      	lsls	r3, r3, #3
 801250a:	440b      	add	r3, r1
 801250c:	2200      	movs	r2, #0
 801250e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012516:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801251a:	9300      	str	r3, [sp, #0]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6939      	ldr	r1, [r7, #16]
 8012520:	68f8      	ldr	r0, [r7, #12]
 8012522:	f001 ff91 	bl	8014448 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012526:	6938      	ldr	r0, [r7, #16]
 8012528:	f7f9 f8ba 	bl	800b6a0 <pbuf_free>
  }
  return ERR_OK;
 801252c:	2300      	movs	r3, #0
}
 801252e:	4618      	mov	r0, r3
 8012530:	3718      	adds	r7, #24
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}
 8012536:	bf00      	nop
 8012538:	0801dfc8 	.word	0x0801dfc8
 801253c:	0801e0c0 	.word	0x0801e0c0
 8012540:	0801e040 	.word	0x0801e040
 8012544:	2400b6f8 	.word	0x2400b6f8

08012548 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012550:	2300      	movs	r3, #0
 8012552:	60fb      	str	r3, [r7, #12]
 8012554:	e01e      	b.n	8012594 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012556:	4913      	ldr	r1, [pc, #76]	; (80125a4 <etharp_cleanup_netif+0x5c>)
 8012558:	68fa      	ldr	r2, [r7, #12]
 801255a:	4613      	mov	r3, r2
 801255c:	005b      	lsls	r3, r3, #1
 801255e:	4413      	add	r3, r2
 8012560:	00db      	lsls	r3, r3, #3
 8012562:	440b      	add	r3, r1
 8012564:	3314      	adds	r3, #20
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801256a:	7afb      	ldrb	r3, [r7, #11]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d00e      	beq.n	801258e <etharp_cleanup_netif+0x46>
 8012570:	490c      	ldr	r1, [pc, #48]	; (80125a4 <etharp_cleanup_netif+0x5c>)
 8012572:	68fa      	ldr	r2, [r7, #12]
 8012574:	4613      	mov	r3, r2
 8012576:	005b      	lsls	r3, r3, #1
 8012578:	4413      	add	r3, r2
 801257a:	00db      	lsls	r3, r3, #3
 801257c:	440b      	add	r3, r1
 801257e:	3308      	adds	r3, #8
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	429a      	cmp	r2, r3
 8012586:	d102      	bne.n	801258e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012588:	68f8      	ldr	r0, [r7, #12]
 801258a:	f7ff fce5 	bl	8011f58 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	3301      	adds	r3, #1
 8012592:	60fb      	str	r3, [r7, #12]
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	2b09      	cmp	r3, #9
 8012598:	dddd      	ble.n	8012556 <etharp_cleanup_netif+0xe>
    }
  }
}
 801259a:	bf00      	nop
 801259c:	bf00      	nop
 801259e:	3710      	adds	r7, #16
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}
 80125a4:	2400b6f8 	.word	0x2400b6f8

080125a8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80125a8:	b5b0      	push	{r4, r5, r7, lr}
 80125aa:	b08a      	sub	sp, #40	; 0x28
 80125ac:	af04      	add	r7, sp, #16
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d107      	bne.n	80125c8 <etharp_input+0x20>
 80125b8:	4b3d      	ldr	r3, [pc, #244]	; (80126b0 <etharp_input+0x108>)
 80125ba:	f240 228a 	movw	r2, #650	; 0x28a
 80125be:	493d      	ldr	r1, [pc, #244]	; (80126b4 <etharp_input+0x10c>)
 80125c0:	483d      	ldr	r0, [pc, #244]	; (80126b8 <etharp_input+0x110>)
 80125c2:	f005 ff7d 	bl	80184c0 <iprintf>
 80125c6:	e06f      	b.n	80126a8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	685b      	ldr	r3, [r3, #4]
 80125cc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	881b      	ldrh	r3, [r3, #0]
 80125d2:	b29b      	uxth	r3, r3
 80125d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125d8:	d10c      	bne.n	80125f4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80125de:	2b06      	cmp	r3, #6
 80125e0:	d108      	bne.n	80125f4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80125e2:	693b      	ldr	r3, [r7, #16]
 80125e4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80125e6:	2b04      	cmp	r3, #4
 80125e8:	d104      	bne.n	80125f4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80125ea:	693b      	ldr	r3, [r7, #16]
 80125ec:	885b      	ldrh	r3, [r3, #2]
 80125ee:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80125f0:	2b08      	cmp	r3, #8
 80125f2:	d003      	beq.n	80125fc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f7f9 f853 	bl	800b6a0 <pbuf_free>
    return;
 80125fa:	e055      	b.n	80126a8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	330e      	adds	r3, #14
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	3318      	adds	r3, #24
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	3304      	adds	r3, #4
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d102      	bne.n	801261c <etharp_input+0x74>
    for_us = 0;
 8012616:	2300      	movs	r3, #0
 8012618:	75fb      	strb	r3, [r7, #23]
 801261a:	e009      	b.n	8012630 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801261c:	68ba      	ldr	r2, [r7, #8]
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	3304      	adds	r3, #4
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	429a      	cmp	r2, r3
 8012626:	bf0c      	ite	eq
 8012628:	2301      	moveq	r3, #1
 801262a:	2300      	movne	r3, #0
 801262c:	b2db      	uxtb	r3, r3
 801262e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012630:	693b      	ldr	r3, [r7, #16]
 8012632:	f103 0208 	add.w	r2, r3, #8
 8012636:	7dfb      	ldrb	r3, [r7, #23]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d001      	beq.n	8012640 <etharp_input+0x98>
 801263c:	2301      	movs	r3, #1
 801263e:	e000      	b.n	8012642 <etharp_input+0x9a>
 8012640:	2302      	movs	r3, #2
 8012642:	f107 010c 	add.w	r1, r7, #12
 8012646:	6838      	ldr	r0, [r7, #0]
 8012648:	f7ff fed8 	bl	80123fc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801264c:	693b      	ldr	r3, [r7, #16]
 801264e:	88db      	ldrh	r3, [r3, #6]
 8012650:	b29b      	uxth	r3, r3
 8012652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012656:	d003      	beq.n	8012660 <etharp_input+0xb8>
 8012658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801265c:	d01e      	beq.n	801269c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801265e:	e020      	b.n	80126a2 <etharp_input+0xfa>
      if (for_us) {
 8012660:	7dfb      	ldrb	r3, [r7, #23]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d01c      	beq.n	80126a0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801266c:	693b      	ldr	r3, [r7, #16]
 801266e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801267c:	693a      	ldr	r2, [r7, #16]
 801267e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012680:	2102      	movs	r1, #2
 8012682:	9103      	str	r1, [sp, #12]
 8012684:	f107 010c 	add.w	r1, r7, #12
 8012688:	9102      	str	r1, [sp, #8]
 801268a:	9201      	str	r2, [sp, #4]
 801268c:	9300      	str	r3, [sp, #0]
 801268e:	462b      	mov	r3, r5
 8012690:	4622      	mov	r2, r4
 8012692:	4601      	mov	r1, r0
 8012694:	6838      	ldr	r0, [r7, #0]
 8012696:	f000 faeb 	bl	8012c70 <etharp_raw>
      break;
 801269a:	e001      	b.n	80126a0 <etharp_input+0xf8>
      break;
 801269c:	bf00      	nop
 801269e:	e000      	b.n	80126a2 <etharp_input+0xfa>
      break;
 80126a0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f7f8 fffc 	bl	800b6a0 <pbuf_free>
}
 80126a8:	3718      	adds	r7, #24
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bdb0      	pop	{r4, r5, r7, pc}
 80126ae:	bf00      	nop
 80126b0:	0801dfc8 	.word	0x0801dfc8
 80126b4:	0801e118 	.word	0x0801e118
 80126b8:	0801e040 	.word	0x0801e040

080126bc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b086      	sub	sp, #24
 80126c0:	af02      	add	r7, sp, #8
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	60b9      	str	r1, [r7, #8]
 80126c6:	4613      	mov	r3, r2
 80126c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80126ca:	79fa      	ldrb	r2, [r7, #7]
 80126cc:	4944      	ldr	r1, [pc, #272]	; (80127e0 <etharp_output_to_arp_index+0x124>)
 80126ce:	4613      	mov	r3, r2
 80126d0:	005b      	lsls	r3, r3, #1
 80126d2:	4413      	add	r3, r2
 80126d4:	00db      	lsls	r3, r3, #3
 80126d6:	440b      	add	r3, r1
 80126d8:	3314      	adds	r3, #20
 80126da:	781b      	ldrb	r3, [r3, #0]
 80126dc:	2b01      	cmp	r3, #1
 80126de:	d806      	bhi.n	80126ee <etharp_output_to_arp_index+0x32>
 80126e0:	4b40      	ldr	r3, [pc, #256]	; (80127e4 <etharp_output_to_arp_index+0x128>)
 80126e2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80126e6:	4940      	ldr	r1, [pc, #256]	; (80127e8 <etharp_output_to_arp_index+0x12c>)
 80126e8:	4840      	ldr	r0, [pc, #256]	; (80127ec <etharp_output_to_arp_index+0x130>)
 80126ea:	f005 fee9 	bl	80184c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80126ee:	79fa      	ldrb	r2, [r7, #7]
 80126f0:	493b      	ldr	r1, [pc, #236]	; (80127e0 <etharp_output_to_arp_index+0x124>)
 80126f2:	4613      	mov	r3, r2
 80126f4:	005b      	lsls	r3, r3, #1
 80126f6:	4413      	add	r3, r2
 80126f8:	00db      	lsls	r3, r3, #3
 80126fa:	440b      	add	r3, r1
 80126fc:	3314      	adds	r3, #20
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	2b02      	cmp	r3, #2
 8012702:	d153      	bne.n	80127ac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012704:	79fa      	ldrb	r2, [r7, #7]
 8012706:	4936      	ldr	r1, [pc, #216]	; (80127e0 <etharp_output_to_arp_index+0x124>)
 8012708:	4613      	mov	r3, r2
 801270a:	005b      	lsls	r3, r3, #1
 801270c:	4413      	add	r3, r2
 801270e:	00db      	lsls	r3, r3, #3
 8012710:	440b      	add	r3, r1
 8012712:	3312      	adds	r3, #18
 8012714:	881b      	ldrh	r3, [r3, #0]
 8012716:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801271a:	d919      	bls.n	8012750 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801271c:	79fa      	ldrb	r2, [r7, #7]
 801271e:	4613      	mov	r3, r2
 8012720:	005b      	lsls	r3, r3, #1
 8012722:	4413      	add	r3, r2
 8012724:	00db      	lsls	r3, r3, #3
 8012726:	4a2e      	ldr	r2, [pc, #184]	; (80127e0 <etharp_output_to_arp_index+0x124>)
 8012728:	4413      	add	r3, r2
 801272a:	3304      	adds	r3, #4
 801272c:	4619      	mov	r1, r3
 801272e:	68f8      	ldr	r0, [r7, #12]
 8012730:	f000 fb4c 	bl	8012dcc <etharp_request>
 8012734:	4603      	mov	r3, r0
 8012736:	2b00      	cmp	r3, #0
 8012738:	d138      	bne.n	80127ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801273a:	79fa      	ldrb	r2, [r7, #7]
 801273c:	4928      	ldr	r1, [pc, #160]	; (80127e0 <etharp_output_to_arp_index+0x124>)
 801273e:	4613      	mov	r3, r2
 8012740:	005b      	lsls	r3, r3, #1
 8012742:	4413      	add	r3, r2
 8012744:	00db      	lsls	r3, r3, #3
 8012746:	440b      	add	r3, r1
 8012748:	3314      	adds	r3, #20
 801274a:	2203      	movs	r2, #3
 801274c:	701a      	strb	r2, [r3, #0]
 801274e:	e02d      	b.n	80127ac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012750:	79fa      	ldrb	r2, [r7, #7]
 8012752:	4923      	ldr	r1, [pc, #140]	; (80127e0 <etharp_output_to_arp_index+0x124>)
 8012754:	4613      	mov	r3, r2
 8012756:	005b      	lsls	r3, r3, #1
 8012758:	4413      	add	r3, r2
 801275a:	00db      	lsls	r3, r3, #3
 801275c:	440b      	add	r3, r1
 801275e:	3312      	adds	r3, #18
 8012760:	881b      	ldrh	r3, [r3, #0]
 8012762:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012766:	d321      	bcc.n	80127ac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012768:	79fa      	ldrb	r2, [r7, #7]
 801276a:	4613      	mov	r3, r2
 801276c:	005b      	lsls	r3, r3, #1
 801276e:	4413      	add	r3, r2
 8012770:	00db      	lsls	r3, r3, #3
 8012772:	4a1b      	ldr	r2, [pc, #108]	; (80127e0 <etharp_output_to_arp_index+0x124>)
 8012774:	4413      	add	r3, r2
 8012776:	1d19      	adds	r1, r3, #4
 8012778:	79fa      	ldrb	r2, [r7, #7]
 801277a:	4613      	mov	r3, r2
 801277c:	005b      	lsls	r3, r3, #1
 801277e:	4413      	add	r3, r2
 8012780:	00db      	lsls	r3, r3, #3
 8012782:	3308      	adds	r3, #8
 8012784:	4a16      	ldr	r2, [pc, #88]	; (80127e0 <etharp_output_to_arp_index+0x124>)
 8012786:	4413      	add	r3, r2
 8012788:	3304      	adds	r3, #4
 801278a:	461a      	mov	r2, r3
 801278c:	68f8      	ldr	r0, [r7, #12]
 801278e:	f000 fafb 	bl	8012d88 <etharp_request_dst>
 8012792:	4603      	mov	r3, r0
 8012794:	2b00      	cmp	r3, #0
 8012796:	d109      	bne.n	80127ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012798:	79fa      	ldrb	r2, [r7, #7]
 801279a:	4911      	ldr	r1, [pc, #68]	; (80127e0 <etharp_output_to_arp_index+0x124>)
 801279c:	4613      	mov	r3, r2
 801279e:	005b      	lsls	r3, r3, #1
 80127a0:	4413      	add	r3, r2
 80127a2:	00db      	lsls	r3, r3, #3
 80127a4:	440b      	add	r3, r1
 80127a6:	3314      	adds	r3, #20
 80127a8:	2203      	movs	r2, #3
 80127aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80127b2:	79fa      	ldrb	r2, [r7, #7]
 80127b4:	4613      	mov	r3, r2
 80127b6:	005b      	lsls	r3, r3, #1
 80127b8:	4413      	add	r3, r2
 80127ba:	00db      	lsls	r3, r3, #3
 80127bc:	3308      	adds	r3, #8
 80127be:	4a08      	ldr	r2, [pc, #32]	; (80127e0 <etharp_output_to_arp_index+0x124>)
 80127c0:	4413      	add	r3, r2
 80127c2:	3304      	adds	r3, #4
 80127c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80127c8:	9200      	str	r2, [sp, #0]
 80127ca:	460a      	mov	r2, r1
 80127cc:	68b9      	ldr	r1, [r7, #8]
 80127ce:	68f8      	ldr	r0, [r7, #12]
 80127d0:	f001 fe3a 	bl	8014448 <ethernet_output>
 80127d4:	4603      	mov	r3, r0
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3710      	adds	r7, #16
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop
 80127e0:	2400b6f8 	.word	0x2400b6f8
 80127e4:	0801dfc8 	.word	0x0801dfc8
 80127e8:	0801e138 	.word	0x0801e138
 80127ec:	0801e040 	.word	0x0801e040

080127f0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b08a      	sub	sp, #40	; 0x28
 80127f4:	af02      	add	r7, sp, #8
 80127f6:	60f8      	str	r0, [r7, #12]
 80127f8:	60b9      	str	r1, [r7, #8]
 80127fa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d106      	bne.n	8012814 <etharp_output+0x24>
 8012806:	4b73      	ldr	r3, [pc, #460]	; (80129d4 <etharp_output+0x1e4>)
 8012808:	f240 321e 	movw	r2, #798	; 0x31e
 801280c:	4972      	ldr	r1, [pc, #456]	; (80129d8 <etharp_output+0x1e8>)
 801280e:	4873      	ldr	r0, [pc, #460]	; (80129dc <etharp_output+0x1ec>)
 8012810:	f005 fe56 	bl	80184c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d106      	bne.n	8012828 <etharp_output+0x38>
 801281a:	4b6e      	ldr	r3, [pc, #440]	; (80129d4 <etharp_output+0x1e4>)
 801281c:	f240 321f 	movw	r2, #799	; 0x31f
 8012820:	496f      	ldr	r1, [pc, #444]	; (80129e0 <etharp_output+0x1f0>)
 8012822:	486e      	ldr	r0, [pc, #440]	; (80129dc <etharp_output+0x1ec>)
 8012824:	f005 fe4c 	bl	80184c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d106      	bne.n	801283c <etharp_output+0x4c>
 801282e:	4b69      	ldr	r3, [pc, #420]	; (80129d4 <etharp_output+0x1e4>)
 8012830:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012834:	496b      	ldr	r1, [pc, #428]	; (80129e4 <etharp_output+0x1f4>)
 8012836:	4869      	ldr	r0, [pc, #420]	; (80129dc <etharp_output+0x1ec>)
 8012838:	f005 fe42 	bl	80184c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	68f9      	ldr	r1, [r7, #12]
 8012842:	4618      	mov	r0, r3
 8012844:	f000 fef8 	bl	8013638 <ip4_addr_isbroadcast_u32>
 8012848:	4603      	mov	r3, r0
 801284a:	2b00      	cmp	r3, #0
 801284c:	d002      	beq.n	8012854 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801284e:	4b66      	ldr	r3, [pc, #408]	; (80129e8 <etharp_output+0x1f8>)
 8012850:	61fb      	str	r3, [r7, #28]
 8012852:	e0af      	b.n	80129b4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801285c:	2be0      	cmp	r3, #224	; 0xe0
 801285e:	d118      	bne.n	8012892 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012860:	2301      	movs	r3, #1
 8012862:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012864:	2300      	movs	r3, #0
 8012866:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012868:	235e      	movs	r3, #94	; 0x5e
 801286a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	3301      	adds	r3, #1
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012876:	b2db      	uxtb	r3, r3
 8012878:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	3302      	adds	r3, #2
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	3303      	adds	r3, #3
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801288a:	f107 0310 	add.w	r3, r7, #16
 801288e:	61fb      	str	r3, [r7, #28]
 8012890:	e090      	b.n	80129b4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681a      	ldr	r2, [r3, #0]
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	3304      	adds	r3, #4
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	405a      	eors	r2, r3
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	3308      	adds	r3, #8
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	4013      	ands	r3, r2
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d012      	beq.n	80128d0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80128b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80128b4:	4293      	cmp	r3, r2
 80128b6:	d00b      	beq.n	80128d0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	330c      	adds	r3, #12
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d003      	beq.n	80128ca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	330c      	adds	r3, #12
 80128c6:	61bb      	str	r3, [r7, #24]
 80128c8:	e002      	b.n	80128d0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80128ca:	f06f 0303 	mvn.w	r3, #3
 80128ce:	e07d      	b.n	80129cc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80128d0:	4b46      	ldr	r3, [pc, #280]	; (80129ec <etharp_output+0x1fc>)
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	4619      	mov	r1, r3
 80128d6:	4a46      	ldr	r2, [pc, #280]	; (80129f0 <etharp_output+0x200>)
 80128d8:	460b      	mov	r3, r1
 80128da:	005b      	lsls	r3, r3, #1
 80128dc:	440b      	add	r3, r1
 80128de:	00db      	lsls	r3, r3, #3
 80128e0:	4413      	add	r3, r2
 80128e2:	3314      	adds	r3, #20
 80128e4:	781b      	ldrb	r3, [r3, #0]
 80128e6:	2b01      	cmp	r3, #1
 80128e8:	d925      	bls.n	8012936 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80128ea:	4b40      	ldr	r3, [pc, #256]	; (80129ec <etharp_output+0x1fc>)
 80128ec:	781b      	ldrb	r3, [r3, #0]
 80128ee:	4619      	mov	r1, r3
 80128f0:	4a3f      	ldr	r2, [pc, #252]	; (80129f0 <etharp_output+0x200>)
 80128f2:	460b      	mov	r3, r1
 80128f4:	005b      	lsls	r3, r3, #1
 80128f6:	440b      	add	r3, r1
 80128f8:	00db      	lsls	r3, r3, #3
 80128fa:	4413      	add	r3, r2
 80128fc:	3308      	adds	r3, #8
 80128fe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012900:	68fa      	ldr	r2, [r7, #12]
 8012902:	429a      	cmp	r2, r3
 8012904:	d117      	bne.n	8012936 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012906:	69bb      	ldr	r3, [r7, #24]
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	4b38      	ldr	r3, [pc, #224]	; (80129ec <etharp_output+0x1fc>)
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	4618      	mov	r0, r3
 8012910:	4937      	ldr	r1, [pc, #220]	; (80129f0 <etharp_output+0x200>)
 8012912:	4603      	mov	r3, r0
 8012914:	005b      	lsls	r3, r3, #1
 8012916:	4403      	add	r3, r0
 8012918:	00db      	lsls	r3, r3, #3
 801291a:	440b      	add	r3, r1
 801291c:	3304      	adds	r3, #4
 801291e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012920:	429a      	cmp	r2, r3
 8012922:	d108      	bne.n	8012936 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012924:	4b31      	ldr	r3, [pc, #196]	; (80129ec <etharp_output+0x1fc>)
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	461a      	mov	r2, r3
 801292a:	68b9      	ldr	r1, [r7, #8]
 801292c:	68f8      	ldr	r0, [r7, #12]
 801292e:	f7ff fec5 	bl	80126bc <etharp_output_to_arp_index>
 8012932:	4603      	mov	r3, r0
 8012934:	e04a      	b.n	80129cc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012936:	2300      	movs	r3, #0
 8012938:	75fb      	strb	r3, [r7, #23]
 801293a:	e031      	b.n	80129a0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801293c:	7dfa      	ldrb	r2, [r7, #23]
 801293e:	492c      	ldr	r1, [pc, #176]	; (80129f0 <etharp_output+0x200>)
 8012940:	4613      	mov	r3, r2
 8012942:	005b      	lsls	r3, r3, #1
 8012944:	4413      	add	r3, r2
 8012946:	00db      	lsls	r3, r3, #3
 8012948:	440b      	add	r3, r1
 801294a:	3314      	adds	r3, #20
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	2b01      	cmp	r3, #1
 8012950:	d923      	bls.n	801299a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012952:	7dfa      	ldrb	r2, [r7, #23]
 8012954:	4926      	ldr	r1, [pc, #152]	; (80129f0 <etharp_output+0x200>)
 8012956:	4613      	mov	r3, r2
 8012958:	005b      	lsls	r3, r3, #1
 801295a:	4413      	add	r3, r2
 801295c:	00db      	lsls	r3, r3, #3
 801295e:	440b      	add	r3, r1
 8012960:	3308      	adds	r3, #8
 8012962:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012964:	68fa      	ldr	r2, [r7, #12]
 8012966:	429a      	cmp	r2, r3
 8012968:	d117      	bne.n	801299a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801296a:	69bb      	ldr	r3, [r7, #24]
 801296c:	6819      	ldr	r1, [r3, #0]
 801296e:	7dfa      	ldrb	r2, [r7, #23]
 8012970:	481f      	ldr	r0, [pc, #124]	; (80129f0 <etharp_output+0x200>)
 8012972:	4613      	mov	r3, r2
 8012974:	005b      	lsls	r3, r3, #1
 8012976:	4413      	add	r3, r2
 8012978:	00db      	lsls	r3, r3, #3
 801297a:	4403      	add	r3, r0
 801297c:	3304      	adds	r3, #4
 801297e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012980:	4299      	cmp	r1, r3
 8012982:	d10a      	bne.n	801299a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012984:	4a19      	ldr	r2, [pc, #100]	; (80129ec <etharp_output+0x1fc>)
 8012986:	7dfb      	ldrb	r3, [r7, #23]
 8012988:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801298a:	7dfb      	ldrb	r3, [r7, #23]
 801298c:	461a      	mov	r2, r3
 801298e:	68b9      	ldr	r1, [r7, #8]
 8012990:	68f8      	ldr	r0, [r7, #12]
 8012992:	f7ff fe93 	bl	80126bc <etharp_output_to_arp_index>
 8012996:	4603      	mov	r3, r0
 8012998:	e018      	b.n	80129cc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801299a:	7dfb      	ldrb	r3, [r7, #23]
 801299c:	3301      	adds	r3, #1
 801299e:	75fb      	strb	r3, [r7, #23]
 80129a0:	7dfb      	ldrb	r3, [r7, #23]
 80129a2:	2b09      	cmp	r3, #9
 80129a4:	d9ca      	bls.n	801293c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80129a6:	68ba      	ldr	r2, [r7, #8]
 80129a8:	69b9      	ldr	r1, [r7, #24]
 80129aa:	68f8      	ldr	r0, [r7, #12]
 80129ac:	f000 f822 	bl	80129f4 <etharp_query>
 80129b0:	4603      	mov	r3, r0
 80129b2:	e00b      	b.n	80129cc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80129ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80129be:	9300      	str	r3, [sp, #0]
 80129c0:	69fb      	ldr	r3, [r7, #28]
 80129c2:	68b9      	ldr	r1, [r7, #8]
 80129c4:	68f8      	ldr	r0, [r7, #12]
 80129c6:	f001 fd3f 	bl	8014448 <ethernet_output>
 80129ca:	4603      	mov	r3, r0
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3720      	adds	r7, #32
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}
 80129d4:	0801dfc8 	.word	0x0801dfc8
 80129d8:	0801e118 	.word	0x0801e118
 80129dc:	0801e040 	.word	0x0801e040
 80129e0:	0801e168 	.word	0x0801e168
 80129e4:	0801e108 	.word	0x0801e108
 80129e8:	0801ec28 	.word	0x0801ec28
 80129ec:	2400b7e8 	.word	0x2400b7e8
 80129f0:	2400b6f8 	.word	0x2400b6f8

080129f4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b08c      	sub	sp, #48	; 0x30
 80129f8:	af02      	add	r7, sp, #8
 80129fa:	60f8      	str	r0, [r7, #12]
 80129fc:	60b9      	str	r1, [r7, #8]
 80129fe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	3326      	adds	r3, #38	; 0x26
 8012a04:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012a06:	23ff      	movs	r3, #255	; 0xff
 8012a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	68f9      	ldr	r1, [r7, #12]
 8012a16:	4618      	mov	r0, r3
 8012a18:	f000 fe0e 	bl	8013638 <ip4_addr_isbroadcast_u32>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d10c      	bne.n	8012a3c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a2a:	2be0      	cmp	r3, #224	; 0xe0
 8012a2c:	d006      	beq.n	8012a3c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d003      	beq.n	8012a3c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d102      	bne.n	8012a42 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012a3c:	f06f 030f 	mvn.w	r3, #15
 8012a40:	e101      	b.n	8012c46 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012a42:	68fa      	ldr	r2, [r7, #12]
 8012a44:	2101      	movs	r1, #1
 8012a46:	68b8      	ldr	r0, [r7, #8]
 8012a48:	f7ff fb60 	bl	801210c <etharp_find_entry>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012a50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	da02      	bge.n	8012a5e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012a58:	8a7b      	ldrh	r3, [r7, #18]
 8012a5a:	b25b      	sxtb	r3, r3
 8012a5c:	e0f3      	b.n	8012c46 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012a5e:	8a7b      	ldrh	r3, [r7, #18]
 8012a60:	2b7e      	cmp	r3, #126	; 0x7e
 8012a62:	d906      	bls.n	8012a72 <etharp_query+0x7e>
 8012a64:	4b7a      	ldr	r3, [pc, #488]	; (8012c50 <etharp_query+0x25c>)
 8012a66:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012a6a:	497a      	ldr	r1, [pc, #488]	; (8012c54 <etharp_query+0x260>)
 8012a6c:	487a      	ldr	r0, [pc, #488]	; (8012c58 <etharp_query+0x264>)
 8012a6e:	f005 fd27 	bl	80184c0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012a72:	8a7b      	ldrh	r3, [r7, #18]
 8012a74:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012a76:	7c7a      	ldrb	r2, [r7, #17]
 8012a78:	4978      	ldr	r1, [pc, #480]	; (8012c5c <etharp_query+0x268>)
 8012a7a:	4613      	mov	r3, r2
 8012a7c:	005b      	lsls	r3, r3, #1
 8012a7e:	4413      	add	r3, r2
 8012a80:	00db      	lsls	r3, r3, #3
 8012a82:	440b      	add	r3, r1
 8012a84:	3314      	adds	r3, #20
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d115      	bne.n	8012ab8 <etharp_query+0xc4>
    is_new_entry = 1;
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012a90:	7c7a      	ldrb	r2, [r7, #17]
 8012a92:	4972      	ldr	r1, [pc, #456]	; (8012c5c <etharp_query+0x268>)
 8012a94:	4613      	mov	r3, r2
 8012a96:	005b      	lsls	r3, r3, #1
 8012a98:	4413      	add	r3, r2
 8012a9a:	00db      	lsls	r3, r3, #3
 8012a9c:	440b      	add	r3, r1
 8012a9e:	3314      	adds	r3, #20
 8012aa0:	2201      	movs	r2, #1
 8012aa2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012aa4:	7c7a      	ldrb	r2, [r7, #17]
 8012aa6:	496d      	ldr	r1, [pc, #436]	; (8012c5c <etharp_query+0x268>)
 8012aa8:	4613      	mov	r3, r2
 8012aaa:	005b      	lsls	r3, r3, #1
 8012aac:	4413      	add	r3, r2
 8012aae:	00db      	lsls	r3, r3, #3
 8012ab0:	440b      	add	r3, r1
 8012ab2:	3308      	adds	r3, #8
 8012ab4:	68fa      	ldr	r2, [r7, #12]
 8012ab6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012ab8:	7c7a      	ldrb	r2, [r7, #17]
 8012aba:	4968      	ldr	r1, [pc, #416]	; (8012c5c <etharp_query+0x268>)
 8012abc:	4613      	mov	r3, r2
 8012abe:	005b      	lsls	r3, r3, #1
 8012ac0:	4413      	add	r3, r2
 8012ac2:	00db      	lsls	r3, r3, #3
 8012ac4:	440b      	add	r3, r1
 8012ac6:	3314      	adds	r3, #20
 8012ac8:	781b      	ldrb	r3, [r3, #0]
 8012aca:	2b01      	cmp	r3, #1
 8012acc:	d011      	beq.n	8012af2 <etharp_query+0xfe>
 8012ace:	7c7a      	ldrb	r2, [r7, #17]
 8012ad0:	4962      	ldr	r1, [pc, #392]	; (8012c5c <etharp_query+0x268>)
 8012ad2:	4613      	mov	r3, r2
 8012ad4:	005b      	lsls	r3, r3, #1
 8012ad6:	4413      	add	r3, r2
 8012ad8:	00db      	lsls	r3, r3, #3
 8012ada:	440b      	add	r3, r1
 8012adc:	3314      	adds	r3, #20
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	2b01      	cmp	r3, #1
 8012ae2:	d806      	bhi.n	8012af2 <etharp_query+0xfe>
 8012ae4:	4b5a      	ldr	r3, [pc, #360]	; (8012c50 <etharp_query+0x25c>)
 8012ae6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012aea:	495d      	ldr	r1, [pc, #372]	; (8012c60 <etharp_query+0x26c>)
 8012aec:	485a      	ldr	r0, [pc, #360]	; (8012c58 <etharp_query+0x264>)
 8012aee:	f005 fce7 	bl	80184c0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012af2:	6a3b      	ldr	r3, [r7, #32]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d102      	bne.n	8012afe <etharp_query+0x10a>
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d10c      	bne.n	8012b18 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012afe:	68b9      	ldr	r1, [r7, #8]
 8012b00:	68f8      	ldr	r0, [r7, #12]
 8012b02:	f000 f963 	bl	8012dcc <etharp_request>
 8012b06:	4603      	mov	r3, r0
 8012b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d102      	bne.n	8012b18 <etharp_query+0x124>
      return result;
 8012b12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012b16:	e096      	b.n	8012c46 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d106      	bne.n	8012b2c <etharp_query+0x138>
 8012b1e:	4b4c      	ldr	r3, [pc, #304]	; (8012c50 <etharp_query+0x25c>)
 8012b20:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012b24:	494f      	ldr	r1, [pc, #316]	; (8012c64 <etharp_query+0x270>)
 8012b26:	484c      	ldr	r0, [pc, #304]	; (8012c58 <etharp_query+0x264>)
 8012b28:	f005 fcca 	bl	80184c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012b2c:	7c7a      	ldrb	r2, [r7, #17]
 8012b2e:	494b      	ldr	r1, [pc, #300]	; (8012c5c <etharp_query+0x268>)
 8012b30:	4613      	mov	r3, r2
 8012b32:	005b      	lsls	r3, r3, #1
 8012b34:	4413      	add	r3, r2
 8012b36:	00db      	lsls	r3, r3, #3
 8012b38:	440b      	add	r3, r1
 8012b3a:	3314      	adds	r3, #20
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	2b01      	cmp	r3, #1
 8012b40:	d917      	bls.n	8012b72 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012b42:	4a49      	ldr	r2, [pc, #292]	; (8012c68 <etharp_query+0x274>)
 8012b44:	7c7b      	ldrb	r3, [r7, #17]
 8012b46:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012b48:	7c7a      	ldrb	r2, [r7, #17]
 8012b4a:	4613      	mov	r3, r2
 8012b4c:	005b      	lsls	r3, r3, #1
 8012b4e:	4413      	add	r3, r2
 8012b50:	00db      	lsls	r3, r3, #3
 8012b52:	3308      	adds	r3, #8
 8012b54:	4a41      	ldr	r2, [pc, #260]	; (8012c5c <etharp_query+0x268>)
 8012b56:	4413      	add	r3, r2
 8012b58:	3304      	adds	r3, #4
 8012b5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012b5e:	9200      	str	r2, [sp, #0]
 8012b60:	697a      	ldr	r2, [r7, #20]
 8012b62:	6879      	ldr	r1, [r7, #4]
 8012b64:	68f8      	ldr	r0, [r7, #12]
 8012b66:	f001 fc6f 	bl	8014448 <ethernet_output>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012b70:	e067      	b.n	8012c42 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012b72:	7c7a      	ldrb	r2, [r7, #17]
 8012b74:	4939      	ldr	r1, [pc, #228]	; (8012c5c <etharp_query+0x268>)
 8012b76:	4613      	mov	r3, r2
 8012b78:	005b      	lsls	r3, r3, #1
 8012b7a:	4413      	add	r3, r2
 8012b7c:	00db      	lsls	r3, r3, #3
 8012b7e:	440b      	add	r3, r1
 8012b80:	3314      	adds	r3, #20
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	2b01      	cmp	r3, #1
 8012b86:	d15c      	bne.n	8012c42 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012b90:	e01c      	b.n	8012bcc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012b92:	69fb      	ldr	r3, [r7, #28]
 8012b94:	895a      	ldrh	r2, [r3, #10]
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	891b      	ldrh	r3, [r3, #8]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d10a      	bne.n	8012bb4 <etharp_query+0x1c0>
 8012b9e:	69fb      	ldr	r3, [r7, #28]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d006      	beq.n	8012bb4 <etharp_query+0x1c0>
 8012ba6:	4b2a      	ldr	r3, [pc, #168]	; (8012c50 <etharp_query+0x25c>)
 8012ba8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012bac:	492f      	ldr	r1, [pc, #188]	; (8012c6c <etharp_query+0x278>)
 8012bae:	482a      	ldr	r0, [pc, #168]	; (8012c58 <etharp_query+0x264>)
 8012bb0:	f005 fc86 	bl	80184c0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012bb4:	69fb      	ldr	r3, [r7, #28]
 8012bb6:	7b1b      	ldrb	r3, [r3, #12]
 8012bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d002      	beq.n	8012bc6 <etharp_query+0x1d2>
        copy_needed = 1;
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	61bb      	str	r3, [r7, #24]
        break;
 8012bc4:	e005      	b.n	8012bd2 <etharp_query+0x1de>
      }
      p = p->next;
 8012bc6:	69fb      	ldr	r3, [r7, #28]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012bcc:	69fb      	ldr	r3, [r7, #28]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d1df      	bne.n	8012b92 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012bd2:	69bb      	ldr	r3, [r7, #24]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d007      	beq.n	8012be8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012bde:	200e      	movs	r0, #14
 8012be0:	f7f8 ffd6 	bl	800bb90 <pbuf_clone>
 8012be4:	61f8      	str	r0, [r7, #28]
 8012be6:	e004      	b.n	8012bf2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012bec:	69f8      	ldr	r0, [r7, #28]
 8012bee:	f7f8 fdfd 	bl	800b7ec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012bf2:	69fb      	ldr	r3, [r7, #28]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d021      	beq.n	8012c3c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012bf8:	7c7a      	ldrb	r2, [r7, #17]
 8012bfa:	4918      	ldr	r1, [pc, #96]	; (8012c5c <etharp_query+0x268>)
 8012bfc:	4613      	mov	r3, r2
 8012bfe:	005b      	lsls	r3, r3, #1
 8012c00:	4413      	add	r3, r2
 8012c02:	00db      	lsls	r3, r3, #3
 8012c04:	440b      	add	r3, r1
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d00a      	beq.n	8012c22 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012c0c:	7c7a      	ldrb	r2, [r7, #17]
 8012c0e:	4913      	ldr	r1, [pc, #76]	; (8012c5c <etharp_query+0x268>)
 8012c10:	4613      	mov	r3, r2
 8012c12:	005b      	lsls	r3, r3, #1
 8012c14:	4413      	add	r3, r2
 8012c16:	00db      	lsls	r3, r3, #3
 8012c18:	440b      	add	r3, r1
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7f8 fd3f 	bl	800b6a0 <pbuf_free>
      }
      arp_table[i].q = p;
 8012c22:	7c7a      	ldrb	r2, [r7, #17]
 8012c24:	490d      	ldr	r1, [pc, #52]	; (8012c5c <etharp_query+0x268>)
 8012c26:	4613      	mov	r3, r2
 8012c28:	005b      	lsls	r3, r3, #1
 8012c2a:	4413      	add	r3, r2
 8012c2c:	00db      	lsls	r3, r3, #3
 8012c2e:	440b      	add	r3, r1
 8012c30:	69fa      	ldr	r2, [r7, #28]
 8012c32:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012c34:	2300      	movs	r3, #0
 8012c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012c3a:	e002      	b.n	8012c42 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012c3c:	23ff      	movs	r3, #255	; 0xff
 8012c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012c42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3728      	adds	r7, #40	; 0x28
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}
 8012c4e:	bf00      	nop
 8012c50:	0801dfc8 	.word	0x0801dfc8
 8012c54:	0801e174 	.word	0x0801e174
 8012c58:	0801e040 	.word	0x0801e040
 8012c5c:	2400b6f8 	.word	0x2400b6f8
 8012c60:	0801e184 	.word	0x0801e184
 8012c64:	0801e168 	.word	0x0801e168
 8012c68:	2400b7e8 	.word	0x2400b7e8
 8012c6c:	0801e1ac 	.word	0x0801e1ac

08012c70 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b08a      	sub	sp, #40	; 0x28
 8012c74:	af02      	add	r7, sp, #8
 8012c76:	60f8      	str	r0, [r7, #12]
 8012c78:	60b9      	str	r1, [r7, #8]
 8012c7a:	607a      	str	r2, [r7, #4]
 8012c7c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d106      	bne.n	8012c96 <etharp_raw+0x26>
 8012c88:	4b3a      	ldr	r3, [pc, #232]	; (8012d74 <etharp_raw+0x104>)
 8012c8a:	f240 4257 	movw	r2, #1111	; 0x457
 8012c8e:	493a      	ldr	r1, [pc, #232]	; (8012d78 <etharp_raw+0x108>)
 8012c90:	483a      	ldr	r0, [pc, #232]	; (8012d7c <etharp_raw+0x10c>)
 8012c92:	f005 fc15 	bl	80184c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012c96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c9a:	211c      	movs	r1, #28
 8012c9c:	200e      	movs	r0, #14
 8012c9e:	f7f8 fa1b 	bl	800b0d8 <pbuf_alloc>
 8012ca2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012ca4:	69bb      	ldr	r3, [r7, #24]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d102      	bne.n	8012cb0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cae:	e05d      	b.n	8012d6c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012cb0:	69bb      	ldr	r3, [r7, #24]
 8012cb2:	895b      	ldrh	r3, [r3, #10]
 8012cb4:	2b1b      	cmp	r3, #27
 8012cb6:	d806      	bhi.n	8012cc6 <etharp_raw+0x56>
 8012cb8:	4b2e      	ldr	r3, [pc, #184]	; (8012d74 <etharp_raw+0x104>)
 8012cba:	f240 4262 	movw	r2, #1122	; 0x462
 8012cbe:	4930      	ldr	r1, [pc, #192]	; (8012d80 <etharp_raw+0x110>)
 8012cc0:	482e      	ldr	r0, [pc, #184]	; (8012d7c <etharp_raw+0x10c>)
 8012cc2:	f005 fbfd 	bl	80184c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012cc6:	69bb      	ldr	r3, [r7, #24]
 8012cc8:	685b      	ldr	r3, [r3, #4]
 8012cca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012ccc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7f7 f8f8 	bl	8009ec4 <lwip_htons>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012ce2:	2b06      	cmp	r3, #6
 8012ce4:	d006      	beq.n	8012cf4 <etharp_raw+0x84>
 8012ce6:	4b23      	ldr	r3, [pc, #140]	; (8012d74 <etharp_raw+0x104>)
 8012ce8:	f240 4269 	movw	r2, #1129	; 0x469
 8012cec:	4925      	ldr	r1, [pc, #148]	; (8012d84 <etharp_raw+0x114>)
 8012cee:	4823      	ldr	r0, [pc, #140]	; (8012d7c <etharp_raw+0x10c>)
 8012cf0:	f005 fbe6 	bl	80184c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012cf4:	697b      	ldr	r3, [r7, #20]
 8012cf6:	3308      	adds	r3, #8
 8012cf8:	2206      	movs	r2, #6
 8012cfa:	6839      	ldr	r1, [r7, #0]
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f005 fb05 	bl	801830c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	3312      	adds	r3, #18
 8012d06:	2206      	movs	r2, #6
 8012d08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f005 fafe 	bl	801830c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	330e      	adds	r3, #14
 8012d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d16:	6812      	ldr	r2, [r2, #0]
 8012d18:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	3318      	adds	r3, #24
 8012d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d20:	6812      	ldr	r2, [r2, #0]
 8012d22:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	2200      	movs	r2, #0
 8012d28:	701a      	strb	r2, [r3, #0]
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	f042 0201 	orr.w	r2, r2, #1
 8012d30:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	2200      	movs	r2, #0
 8012d36:	f042 0208 	orr.w	r2, r2, #8
 8012d3a:	709a      	strb	r2, [r3, #2]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	2206      	movs	r2, #6
 8012d44:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	2204      	movs	r2, #4
 8012d4a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012d4c:	f640 0306 	movw	r3, #2054	; 0x806
 8012d50:	9300      	str	r3, [sp, #0]
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	68ba      	ldr	r2, [r7, #8]
 8012d56:	69b9      	ldr	r1, [r7, #24]
 8012d58:	68f8      	ldr	r0, [r7, #12]
 8012d5a:	f001 fb75 	bl	8014448 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012d5e:	69b8      	ldr	r0, [r7, #24]
 8012d60:	f7f8 fc9e 	bl	800b6a0 <pbuf_free>
  p = NULL;
 8012d64:	2300      	movs	r3, #0
 8012d66:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012d68:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3720      	adds	r7, #32
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}
 8012d74:	0801dfc8 	.word	0x0801dfc8
 8012d78:	0801e118 	.word	0x0801e118
 8012d7c:	0801e040 	.word	0x0801e040
 8012d80:	0801e1c8 	.word	0x0801e1c8
 8012d84:	0801e1fc 	.word	0x0801e1fc

08012d88 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b088      	sub	sp, #32
 8012d8c:	af04      	add	r7, sp, #16
 8012d8e:	60f8      	str	r0, [r7, #12]
 8012d90:	60b9      	str	r1, [r7, #8]
 8012d92:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012da4:	2201      	movs	r2, #1
 8012da6:	9203      	str	r2, [sp, #12]
 8012da8:	68ba      	ldr	r2, [r7, #8]
 8012daa:	9202      	str	r2, [sp, #8]
 8012dac:	4a06      	ldr	r2, [pc, #24]	; (8012dc8 <etharp_request_dst+0x40>)
 8012dae:	9201      	str	r2, [sp, #4]
 8012db0:	9300      	str	r3, [sp, #0]
 8012db2:	4603      	mov	r3, r0
 8012db4:	687a      	ldr	r2, [r7, #4]
 8012db6:	68f8      	ldr	r0, [r7, #12]
 8012db8:	f7ff ff5a 	bl	8012c70 <etharp_raw>
 8012dbc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	3710      	adds	r7, #16
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}
 8012dc6:	bf00      	nop
 8012dc8:	0801ec30 	.word	0x0801ec30

08012dcc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b082      	sub	sp, #8
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012dd6:	4a05      	ldr	r2, [pc, #20]	; (8012dec <etharp_request+0x20>)
 8012dd8:	6839      	ldr	r1, [r7, #0]
 8012dda:	6878      	ldr	r0, [r7, #4]
 8012ddc:	f7ff ffd4 	bl	8012d88 <etharp_request_dst>
 8012de0:	4603      	mov	r3, r0
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	3708      	adds	r7, #8
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}
 8012dea:	bf00      	nop
 8012dec:	0801ec28 	.word	0x0801ec28

08012df0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b08e      	sub	sp, #56	; 0x38
 8012df4:	af04      	add	r7, sp, #16
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012dfa:	4b79      	ldr	r3, [pc, #484]	; (8012fe0 <icmp_input+0x1f0>)
 8012dfc:	689b      	ldr	r3, [r3, #8]
 8012dfe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	f003 030f 	and.w	r3, r3, #15
 8012e08:	b2db      	uxtb	r3, r3
 8012e0a:	009b      	lsls	r3, r3, #2
 8012e0c:	b2db      	uxtb	r3, r3
 8012e0e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012e10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e12:	2b13      	cmp	r3, #19
 8012e14:	f240 80cd 	bls.w	8012fb2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	895b      	ldrh	r3, [r3, #10]
 8012e1c:	2b03      	cmp	r3, #3
 8012e1e:	f240 80ca 	bls.w	8012fb6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012e2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	f000 80b7 	beq.w	8012fa4 <icmp_input+0x1b4>
 8012e36:	2b08      	cmp	r3, #8
 8012e38:	f040 80b7 	bne.w	8012faa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012e3c:	4b69      	ldr	r3, [pc, #420]	; (8012fe4 <icmp_input+0x1f4>)
 8012e3e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012e40:	4b67      	ldr	r3, [pc, #412]	; (8012fe0 <icmp_input+0x1f0>)
 8012e42:	695b      	ldr	r3, [r3, #20]
 8012e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012e48:	2be0      	cmp	r3, #224	; 0xe0
 8012e4a:	f000 80bb 	beq.w	8012fc4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012e4e:	4b64      	ldr	r3, [pc, #400]	; (8012fe0 <icmp_input+0x1f0>)
 8012e50:	695b      	ldr	r3, [r3, #20]
 8012e52:	4a63      	ldr	r2, [pc, #396]	; (8012fe0 <icmp_input+0x1f0>)
 8012e54:	6812      	ldr	r2, [r2, #0]
 8012e56:	4611      	mov	r1, r2
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f000 fbed 	bl	8013638 <ip4_addr_isbroadcast_u32>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	f040 80b1 	bne.w	8012fc8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	891b      	ldrh	r3, [r3, #8]
 8012e6a:	2b07      	cmp	r3, #7
 8012e6c:	f240 80a5 	bls.w	8012fba <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012e70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e72:	330e      	adds	r3, #14
 8012e74:	4619      	mov	r1, r3
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f7f8 fb7c 	bl	800b574 <pbuf_add_header>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d04b      	beq.n	8012f1a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	891a      	ldrh	r2, [r3, #8]
 8012e86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e88:	4413      	add	r3, r2
 8012e8a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	891b      	ldrh	r3, [r3, #8]
 8012e90:	8b7a      	ldrh	r2, [r7, #26]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	f0c0 809a 	bcc.w	8012fcc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012e98:	8b7b      	ldrh	r3, [r7, #26]
 8012e9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	200e      	movs	r0, #14
 8012ea2:	f7f8 f919 	bl	800b0d8 <pbuf_alloc>
 8012ea6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	f000 8090 	beq.w	8012fd0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012eb0:	697b      	ldr	r3, [r7, #20]
 8012eb2:	895b      	ldrh	r3, [r3, #10]
 8012eb4:	461a      	mov	r2, r3
 8012eb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012eb8:	3308      	adds	r3, #8
 8012eba:	429a      	cmp	r2, r3
 8012ebc:	d203      	bcs.n	8012ec6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012ebe:	6978      	ldr	r0, [r7, #20]
 8012ec0:	f7f8 fbee 	bl	800b6a0 <pbuf_free>
          goto icmperr;
 8012ec4:	e085      	b.n	8012fd2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	685b      	ldr	r3, [r3, #4]
 8012eca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f005 fa1c 	bl	801830c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012ed4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	6978      	ldr	r0, [r7, #20]
 8012eda:	f7f8 fb5b 	bl	800b594 <pbuf_remove_header>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d009      	beq.n	8012ef8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012ee4:	4b40      	ldr	r3, [pc, #256]	; (8012fe8 <icmp_input+0x1f8>)
 8012ee6:	22b6      	movs	r2, #182	; 0xb6
 8012ee8:	4940      	ldr	r1, [pc, #256]	; (8012fec <icmp_input+0x1fc>)
 8012eea:	4841      	ldr	r0, [pc, #260]	; (8012ff0 <icmp_input+0x200>)
 8012eec:	f005 fae8 	bl	80184c0 <iprintf>
          pbuf_free(r);
 8012ef0:	6978      	ldr	r0, [r7, #20]
 8012ef2:	f7f8 fbd5 	bl	800b6a0 <pbuf_free>
          goto icmperr;
 8012ef6:	e06c      	b.n	8012fd2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012ef8:	6879      	ldr	r1, [r7, #4]
 8012efa:	6978      	ldr	r0, [r7, #20]
 8012efc:	f7f8 fd04 	bl	800b908 <pbuf_copy>
 8012f00:	4603      	mov	r3, r0
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d003      	beq.n	8012f0e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012f06:	6978      	ldr	r0, [r7, #20]
 8012f08:	f7f8 fbca 	bl	800b6a0 <pbuf_free>
          goto icmperr;
 8012f0c:	e061      	b.n	8012fd2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f7f8 fbc6 	bl	800b6a0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	607b      	str	r3, [r7, #4]
 8012f18:	e00f      	b.n	8012f3a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012f1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f1c:	330e      	adds	r3, #14
 8012f1e:	4619      	mov	r1, r3
 8012f20:	6878      	ldr	r0, [r7, #4]
 8012f22:	f7f8 fb37 	bl	800b594 <pbuf_remove_header>
 8012f26:	4603      	mov	r3, r0
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d006      	beq.n	8012f3a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012f2c:	4b2e      	ldr	r3, [pc, #184]	; (8012fe8 <icmp_input+0x1f8>)
 8012f2e:	22c7      	movs	r2, #199	; 0xc7
 8012f30:	4930      	ldr	r1, [pc, #192]	; (8012ff4 <icmp_input+0x204>)
 8012f32:	482f      	ldr	r0, [pc, #188]	; (8012ff0 <icmp_input+0x200>)
 8012f34:	f005 fac4 	bl	80184c0 <iprintf>
          goto icmperr;
 8012f38:	e04b      	b.n	8012fd2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	685b      	ldr	r3, [r3, #4]
 8012f3e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012f40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f42:	4619      	mov	r1, r3
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f7f8 fb15 	bl	800b574 <pbuf_add_header>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d12b      	bne.n	8012fa8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	681a      	ldr	r2, [r3, #0]
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012f5e:	4b20      	ldr	r3, [pc, #128]	; (8012fe0 <icmp_input+0x1f0>)
 8012f60:	691a      	ldr	r2, [r3, #16]
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012f66:	693b      	ldr	r3, [r7, #16]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	709a      	strb	r2, [r3, #2]
 8012f72:	2200      	movs	r2, #0
 8012f74:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	22ff      	movs	r2, #255	; 0xff
 8012f7a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	729a      	strb	r2, [r3, #10]
 8012f82:	2200      	movs	r2, #0
 8012f84:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	9302      	str	r3, [sp, #8]
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	9301      	str	r3, [sp, #4]
 8012f8e:	2300      	movs	r3, #0
 8012f90:	9300      	str	r3, [sp, #0]
 8012f92:	23ff      	movs	r3, #255	; 0xff
 8012f94:	2200      	movs	r2, #0
 8012f96:	69f9      	ldr	r1, [r7, #28]
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f000 fa75 	bl	8013488 <ip4_output_if>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012fa2:	e001      	b.n	8012fa8 <icmp_input+0x1b8>
      break;
 8012fa4:	bf00      	nop
 8012fa6:	e000      	b.n	8012faa <icmp_input+0x1ba>
      break;
 8012fa8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f7f8 fb78 	bl	800b6a0 <pbuf_free>
  return;
 8012fb0:	e013      	b.n	8012fda <icmp_input+0x1ea>
    goto lenerr;
 8012fb2:	bf00      	nop
 8012fb4:	e002      	b.n	8012fbc <icmp_input+0x1cc>
    goto lenerr;
 8012fb6:	bf00      	nop
 8012fb8:	e000      	b.n	8012fbc <icmp_input+0x1cc>
        goto lenerr;
 8012fba:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f7f8 fb6f 	bl	800b6a0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012fc2:	e00a      	b.n	8012fda <icmp_input+0x1ea>
        goto icmperr;
 8012fc4:	bf00      	nop
 8012fc6:	e004      	b.n	8012fd2 <icmp_input+0x1e2>
        goto icmperr;
 8012fc8:	bf00      	nop
 8012fca:	e002      	b.n	8012fd2 <icmp_input+0x1e2>
          goto icmperr;
 8012fcc:	bf00      	nop
 8012fce:	e000      	b.n	8012fd2 <icmp_input+0x1e2>
          goto icmperr;
 8012fd0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7f8 fb64 	bl	800b6a0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012fd8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012fda:	3728      	adds	r7, #40	; 0x28
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	2400bde0 	.word	0x2400bde0
 8012fe4:	2400bdf4 	.word	0x2400bdf4
 8012fe8:	0801e240 	.word	0x0801e240
 8012fec:	0801e278 	.word	0x0801e278
 8012ff0:	0801e2b0 	.word	0x0801e2b0
 8012ff4:	0801e2d8 	.word	0x0801e2d8

08012ff8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b082      	sub	sp, #8
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	460b      	mov	r3, r1
 8013002:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013004:	78fb      	ldrb	r3, [r7, #3]
 8013006:	461a      	mov	r2, r3
 8013008:	2103      	movs	r1, #3
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	f000 f814 	bl	8013038 <icmp_send_response>
}
 8013010:	bf00      	nop
 8013012:	3708      	adds	r7, #8
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}

08013018 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b082      	sub	sp, #8
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	460b      	mov	r3, r1
 8013022:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013024:	78fb      	ldrb	r3, [r7, #3]
 8013026:	461a      	mov	r2, r3
 8013028:	210b      	movs	r1, #11
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f000 f804 	bl	8013038 <icmp_send_response>
}
 8013030:	bf00      	nop
 8013032:	3708      	adds	r7, #8
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}

08013038 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b08c      	sub	sp, #48	; 0x30
 801303c:	af04      	add	r7, sp, #16
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	460b      	mov	r3, r1
 8013042:	70fb      	strb	r3, [r7, #3]
 8013044:	4613      	mov	r3, r2
 8013046:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013048:	f44f 7220 	mov.w	r2, #640	; 0x280
 801304c:	2124      	movs	r1, #36	; 0x24
 801304e:	2022      	movs	r0, #34	; 0x22
 8013050:	f7f8 f842 	bl	800b0d8 <pbuf_alloc>
 8013054:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013056:	69fb      	ldr	r3, [r7, #28]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d04c      	beq.n	80130f6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	895b      	ldrh	r3, [r3, #10]
 8013060:	2b23      	cmp	r3, #35	; 0x23
 8013062:	d806      	bhi.n	8013072 <icmp_send_response+0x3a>
 8013064:	4b26      	ldr	r3, [pc, #152]	; (8013100 <icmp_send_response+0xc8>)
 8013066:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801306a:	4926      	ldr	r1, [pc, #152]	; (8013104 <icmp_send_response+0xcc>)
 801306c:	4826      	ldr	r0, [pc, #152]	; (8013108 <icmp_send_response+0xd0>)
 801306e:	f005 fa27 	bl	80184c0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013078:	69fb      	ldr	r3, [r7, #28]
 801307a:	685b      	ldr	r3, [r3, #4]
 801307c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	78fa      	ldrb	r2, [r7, #3]
 8013082:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	78ba      	ldrb	r2, [r7, #2]
 8013088:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801308a:	697b      	ldr	r3, [r7, #20]
 801308c:	2200      	movs	r2, #0
 801308e:	711a      	strb	r2, [r3, #4]
 8013090:	2200      	movs	r2, #0
 8013092:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	2200      	movs	r2, #0
 8013098:	719a      	strb	r2, [r3, #6]
 801309a:	2200      	movs	r2, #0
 801309c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801309e:	69fb      	ldr	r3, [r7, #28]
 80130a0:	685b      	ldr	r3, [r3, #4]
 80130a2:	f103 0008 	add.w	r0, r3, #8
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	685b      	ldr	r3, [r3, #4]
 80130aa:	221c      	movs	r2, #28
 80130ac:	4619      	mov	r1, r3
 80130ae:	f005 f92d 	bl	801830c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80130b2:	69bb      	ldr	r3, [r7, #24]
 80130b4:	68db      	ldr	r3, [r3, #12]
 80130b6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80130b8:	f107 030c 	add.w	r3, r7, #12
 80130bc:	4618      	mov	r0, r3
 80130be:	f000 f825 	bl	801310c <ip4_route>
 80130c2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d011      	beq.n	80130ee <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	2200      	movs	r2, #0
 80130ce:	709a      	strb	r2, [r3, #2]
 80130d0:	2200      	movs	r2, #0
 80130d2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80130d4:	f107 020c 	add.w	r2, r7, #12
 80130d8:	693b      	ldr	r3, [r7, #16]
 80130da:	9302      	str	r3, [sp, #8]
 80130dc:	2301      	movs	r3, #1
 80130de:	9301      	str	r3, [sp, #4]
 80130e0:	2300      	movs	r3, #0
 80130e2:	9300      	str	r3, [sp, #0]
 80130e4:	23ff      	movs	r3, #255	; 0xff
 80130e6:	2100      	movs	r1, #0
 80130e8:	69f8      	ldr	r0, [r7, #28]
 80130ea:	f000 f9cd 	bl	8013488 <ip4_output_if>
  }
  pbuf_free(q);
 80130ee:	69f8      	ldr	r0, [r7, #28]
 80130f0:	f7f8 fad6 	bl	800b6a0 <pbuf_free>
 80130f4:	e000      	b.n	80130f8 <icmp_send_response+0xc0>
    return;
 80130f6:	bf00      	nop
}
 80130f8:	3720      	adds	r7, #32
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	0801e240 	.word	0x0801e240
 8013104:	0801e30c 	.word	0x0801e30c
 8013108:	0801e2b0 	.word	0x0801e2b0

0801310c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801310c:	b480      	push	{r7}
 801310e:	b085      	sub	sp, #20
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013114:	4b33      	ldr	r3, [pc, #204]	; (80131e4 <ip4_route+0xd8>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	60fb      	str	r3, [r7, #12]
 801311a:	e036      	b.n	801318a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013122:	f003 0301 	and.w	r3, r3, #1
 8013126:	b2db      	uxtb	r3, r3
 8013128:	2b00      	cmp	r3, #0
 801312a:	d02b      	beq.n	8013184 <ip4_route+0x78>
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013132:	089b      	lsrs	r3, r3, #2
 8013134:	f003 0301 	and.w	r3, r3, #1
 8013138:	b2db      	uxtb	r3, r3
 801313a:	2b00      	cmp	r3, #0
 801313c:	d022      	beq.n	8013184 <ip4_route+0x78>
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	3304      	adds	r3, #4
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d01d      	beq.n	8013184 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	681a      	ldr	r2, [r3, #0]
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	3304      	adds	r3, #4
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	405a      	eors	r2, r3
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	3308      	adds	r3, #8
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	4013      	ands	r3, r2
 801315c:	2b00      	cmp	r3, #0
 801315e:	d101      	bne.n	8013164 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	e038      	b.n	80131d6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801316a:	f003 0302 	and.w	r3, r3, #2
 801316e:	2b00      	cmp	r3, #0
 8013170:	d108      	bne.n	8013184 <ip4_route+0x78>
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681a      	ldr	r2, [r3, #0]
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	330c      	adds	r3, #12
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	429a      	cmp	r2, r3
 801317e:	d101      	bne.n	8013184 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	e028      	b.n	80131d6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	60fb      	str	r3, [r7, #12]
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d1c5      	bne.n	801311c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013190:	4b15      	ldr	r3, [pc, #84]	; (80131e8 <ip4_route+0xdc>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d01a      	beq.n	80131ce <ip4_route+0xc2>
 8013198:	4b13      	ldr	r3, [pc, #76]	; (80131e8 <ip4_route+0xdc>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131a0:	f003 0301 	and.w	r3, r3, #1
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d012      	beq.n	80131ce <ip4_route+0xc2>
 80131a8:	4b0f      	ldr	r3, [pc, #60]	; (80131e8 <ip4_route+0xdc>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131b0:	f003 0304 	and.w	r3, r3, #4
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d00a      	beq.n	80131ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80131b8:	4b0b      	ldr	r3, [pc, #44]	; (80131e8 <ip4_route+0xdc>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	3304      	adds	r3, #4
 80131be:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d004      	beq.n	80131ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	b2db      	uxtb	r3, r3
 80131ca:	2b7f      	cmp	r3, #127	; 0x7f
 80131cc:	d101      	bne.n	80131d2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80131ce:	2300      	movs	r3, #0
 80131d0:	e001      	b.n	80131d6 <ip4_route+0xca>
  }

  return netif_default;
 80131d2:	4b05      	ldr	r3, [pc, #20]	; (80131e8 <ip4_route+0xdc>)
 80131d4:	681b      	ldr	r3, [r3, #0]
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3714      	adds	r7, #20
 80131da:	46bd      	mov	sp, r7
 80131dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e0:	4770      	bx	lr
 80131e2:	bf00      	nop
 80131e4:	2400ee30 	.word	0x2400ee30
 80131e8:	2400ee34 	.word	0x2400ee34

080131ec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b082      	sub	sp, #8
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131fa:	f003 0301 	and.w	r3, r3, #1
 80131fe:	b2db      	uxtb	r3, r3
 8013200:	2b00      	cmp	r3, #0
 8013202:	d016      	beq.n	8013232 <ip4_input_accept+0x46>
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	3304      	adds	r3, #4
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d011      	beq.n	8013232 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801320e:	4b0b      	ldr	r3, [pc, #44]	; (801323c <ip4_input_accept+0x50>)
 8013210:	695a      	ldr	r2, [r3, #20]
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	3304      	adds	r3, #4
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	429a      	cmp	r2, r3
 801321a:	d008      	beq.n	801322e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801321c:	4b07      	ldr	r3, [pc, #28]	; (801323c <ip4_input_accept+0x50>)
 801321e:	695b      	ldr	r3, [r3, #20]
 8013220:	6879      	ldr	r1, [r7, #4]
 8013222:	4618      	mov	r0, r3
 8013224:	f000 fa08 	bl	8013638 <ip4_addr_isbroadcast_u32>
 8013228:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801322a:	2b00      	cmp	r3, #0
 801322c:	d001      	beq.n	8013232 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801322e:	2301      	movs	r3, #1
 8013230:	e000      	b.n	8013234 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013232:	2300      	movs	r3, #0
}
 8013234:	4618      	mov	r0, r3
 8013236:	3708      	adds	r7, #8
 8013238:	46bd      	mov	sp, r7
 801323a:	bd80      	pop	{r7, pc}
 801323c:	2400bde0 	.word	0x2400bde0

08013240 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b086      	sub	sp, #24
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
 8013248:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	781b      	ldrb	r3, [r3, #0]
 8013254:	091b      	lsrs	r3, r3, #4
 8013256:	b2db      	uxtb	r3, r3
 8013258:	2b04      	cmp	r3, #4
 801325a:	d004      	beq.n	8013266 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f7f8 fa1f 	bl	800b6a0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013262:	2300      	movs	r3, #0
 8013264:	e107      	b.n	8013476 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013266:	697b      	ldr	r3, [r7, #20]
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	f003 030f 	and.w	r3, r3, #15
 801326e:	b2db      	uxtb	r3, r3
 8013270:	009b      	lsls	r3, r3, #2
 8013272:	b2db      	uxtb	r3, r3
 8013274:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	885b      	ldrh	r3, [r3, #2]
 801327a:	b29b      	uxth	r3, r3
 801327c:	4618      	mov	r0, r3
 801327e:	f7f6 fe21 	bl	8009ec4 <lwip_htons>
 8013282:	4603      	mov	r3, r0
 8013284:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	891b      	ldrh	r3, [r3, #8]
 801328a:	89ba      	ldrh	r2, [r7, #12]
 801328c:	429a      	cmp	r2, r3
 801328e:	d204      	bcs.n	801329a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013290:	89bb      	ldrh	r3, [r7, #12]
 8013292:	4619      	mov	r1, r3
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f7f8 f87d 	bl	800b394 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	895b      	ldrh	r3, [r3, #10]
 801329e:	89fa      	ldrh	r2, [r7, #14]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d807      	bhi.n	80132b4 <ip4_input+0x74>
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	891b      	ldrh	r3, [r3, #8]
 80132a8:	89ba      	ldrh	r2, [r7, #12]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d802      	bhi.n	80132b4 <ip4_input+0x74>
 80132ae:	89fb      	ldrh	r3, [r7, #14]
 80132b0:	2b13      	cmp	r3, #19
 80132b2:	d804      	bhi.n	80132be <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f7f8 f9f3 	bl	800b6a0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80132ba:	2300      	movs	r3, #0
 80132bc:	e0db      	b.n	8013476 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	691b      	ldr	r3, [r3, #16]
 80132c2:	4a6f      	ldr	r2, [pc, #444]	; (8013480 <ip4_input+0x240>)
 80132c4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	68db      	ldr	r3, [r3, #12]
 80132ca:	4a6d      	ldr	r2, [pc, #436]	; (8013480 <ip4_input+0x240>)
 80132cc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80132ce:	4b6c      	ldr	r3, [pc, #432]	; (8013480 <ip4_input+0x240>)
 80132d0:	695b      	ldr	r3, [r3, #20]
 80132d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80132d6:	2be0      	cmp	r3, #224	; 0xe0
 80132d8:	d112      	bne.n	8013300 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132e0:	f003 0301 	and.w	r3, r3, #1
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d007      	beq.n	80132fa <ip4_input+0xba>
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	3304      	adds	r3, #4
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d002      	beq.n	80132fa <ip4_input+0xba>
      netif = inp;
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	613b      	str	r3, [r7, #16]
 80132f8:	e02a      	b.n	8013350 <ip4_input+0x110>
    } else {
      netif = NULL;
 80132fa:	2300      	movs	r3, #0
 80132fc:	613b      	str	r3, [r7, #16]
 80132fe:	e027      	b.n	8013350 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013300:	6838      	ldr	r0, [r7, #0]
 8013302:	f7ff ff73 	bl	80131ec <ip4_input_accept>
 8013306:	4603      	mov	r3, r0
 8013308:	2b00      	cmp	r3, #0
 801330a:	d002      	beq.n	8013312 <ip4_input+0xd2>
      netif = inp;
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	613b      	str	r3, [r7, #16]
 8013310:	e01e      	b.n	8013350 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013312:	2300      	movs	r3, #0
 8013314:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013316:	4b5a      	ldr	r3, [pc, #360]	; (8013480 <ip4_input+0x240>)
 8013318:	695b      	ldr	r3, [r3, #20]
 801331a:	b2db      	uxtb	r3, r3
 801331c:	2b7f      	cmp	r3, #127	; 0x7f
 801331e:	d017      	beq.n	8013350 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013320:	4b58      	ldr	r3, [pc, #352]	; (8013484 <ip4_input+0x244>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	613b      	str	r3, [r7, #16]
 8013326:	e00e      	b.n	8013346 <ip4_input+0x106>
          if (netif == inp) {
 8013328:	693a      	ldr	r2, [r7, #16]
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	429a      	cmp	r2, r3
 801332e:	d006      	beq.n	801333e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013330:	6938      	ldr	r0, [r7, #16]
 8013332:	f7ff ff5b 	bl	80131ec <ip4_input_accept>
 8013336:	4603      	mov	r3, r0
 8013338:	2b00      	cmp	r3, #0
 801333a:	d108      	bne.n	801334e <ip4_input+0x10e>
 801333c:	e000      	b.n	8013340 <ip4_input+0x100>
            continue;
 801333e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013340:	693b      	ldr	r3, [r7, #16]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	613b      	str	r3, [r7, #16]
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d1ed      	bne.n	8013328 <ip4_input+0xe8>
 801334c:	e000      	b.n	8013350 <ip4_input+0x110>
            break;
 801334e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013350:	4b4b      	ldr	r3, [pc, #300]	; (8013480 <ip4_input+0x240>)
 8013352:	691b      	ldr	r3, [r3, #16]
 8013354:	6839      	ldr	r1, [r7, #0]
 8013356:	4618      	mov	r0, r3
 8013358:	f000 f96e 	bl	8013638 <ip4_addr_isbroadcast_u32>
 801335c:	4603      	mov	r3, r0
 801335e:	2b00      	cmp	r3, #0
 8013360:	d105      	bne.n	801336e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013362:	4b47      	ldr	r3, [pc, #284]	; (8013480 <ip4_input+0x240>)
 8013364:	691b      	ldr	r3, [r3, #16]
 8013366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801336a:	2be0      	cmp	r3, #224	; 0xe0
 801336c:	d104      	bne.n	8013378 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f7f8 f996 	bl	800b6a0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013374:	2300      	movs	r3, #0
 8013376:	e07e      	b.n	8013476 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d104      	bne.n	8013388 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f7f8 f98e 	bl	800b6a0 <pbuf_free>
    return ERR_OK;
 8013384:	2300      	movs	r3, #0
 8013386:	e076      	b.n	8013476 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013388:	697b      	ldr	r3, [r7, #20]
 801338a:	88db      	ldrh	r3, [r3, #6]
 801338c:	b29b      	uxth	r3, r3
 801338e:	461a      	mov	r2, r3
 8013390:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013394:	4013      	ands	r3, r2
 8013396:	2b00      	cmp	r3, #0
 8013398:	d00b      	beq.n	80133b2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f000 fc92 	bl	8013cc4 <ip4_reass>
 80133a0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d101      	bne.n	80133ac <ip4_input+0x16c>
      return ERR_OK;
 80133a8:	2300      	movs	r3, #0
 80133aa:	e064      	b.n	8013476 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	685b      	ldr	r3, [r3, #4]
 80133b0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80133b2:	4a33      	ldr	r2, [pc, #204]	; (8013480 <ip4_input+0x240>)
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80133b8:	4a31      	ldr	r2, [pc, #196]	; (8013480 <ip4_input+0x240>)
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80133be:	4a30      	ldr	r2, [pc, #192]	; (8013480 <ip4_input+0x240>)
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	f003 030f 	and.w	r3, r3, #15
 80133cc:	b2db      	uxtb	r3, r3
 80133ce:	009b      	lsls	r3, r3, #2
 80133d0:	b2db      	uxtb	r3, r3
 80133d2:	b29a      	uxth	r2, r3
 80133d4:	4b2a      	ldr	r3, [pc, #168]	; (8013480 <ip4_input+0x240>)
 80133d6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80133d8:	89fb      	ldrh	r3, [r7, #14]
 80133da:	4619      	mov	r1, r3
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7f8 f8d9 	bl	800b594 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	7a5b      	ldrb	r3, [r3, #9]
 80133e6:	2b11      	cmp	r3, #17
 80133e8:	d006      	beq.n	80133f8 <ip4_input+0x1b8>
 80133ea:	2b11      	cmp	r3, #17
 80133ec:	dc13      	bgt.n	8013416 <ip4_input+0x1d6>
 80133ee:	2b01      	cmp	r3, #1
 80133f0:	d00c      	beq.n	801340c <ip4_input+0x1cc>
 80133f2:	2b06      	cmp	r3, #6
 80133f4:	d005      	beq.n	8013402 <ip4_input+0x1c2>
 80133f6:	e00e      	b.n	8013416 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80133f8:	6839      	ldr	r1, [r7, #0]
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f7fe f970 	bl	80116e0 <udp_input>
        break;
 8013400:	e026      	b.n	8013450 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013402:	6839      	ldr	r1, [r7, #0]
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f7fa f94b 	bl	800d6a0 <tcp_input>
        break;
 801340a:	e021      	b.n	8013450 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801340c:	6839      	ldr	r1, [r7, #0]
 801340e:	6878      	ldr	r0, [r7, #4]
 8013410:	f7ff fcee 	bl	8012df0 <icmp_input>
        break;
 8013414:	e01c      	b.n	8013450 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013416:	4b1a      	ldr	r3, [pc, #104]	; (8013480 <ip4_input+0x240>)
 8013418:	695b      	ldr	r3, [r3, #20]
 801341a:	6939      	ldr	r1, [r7, #16]
 801341c:	4618      	mov	r0, r3
 801341e:	f000 f90b 	bl	8013638 <ip4_addr_isbroadcast_u32>
 8013422:	4603      	mov	r3, r0
 8013424:	2b00      	cmp	r3, #0
 8013426:	d10f      	bne.n	8013448 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013428:	4b15      	ldr	r3, [pc, #84]	; (8013480 <ip4_input+0x240>)
 801342a:	695b      	ldr	r3, [r3, #20]
 801342c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013430:	2be0      	cmp	r3, #224	; 0xe0
 8013432:	d009      	beq.n	8013448 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013434:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013438:	4619      	mov	r1, r3
 801343a:	6878      	ldr	r0, [r7, #4]
 801343c:	f7f8 f91d 	bl	800b67a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013440:	2102      	movs	r1, #2
 8013442:	6878      	ldr	r0, [r7, #4]
 8013444:	f7ff fdd8 	bl	8012ff8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f7f8 f929 	bl	800b6a0 <pbuf_free>
        break;
 801344e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013450:	4b0b      	ldr	r3, [pc, #44]	; (8013480 <ip4_input+0x240>)
 8013452:	2200      	movs	r2, #0
 8013454:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013456:	4b0a      	ldr	r3, [pc, #40]	; (8013480 <ip4_input+0x240>)
 8013458:	2200      	movs	r2, #0
 801345a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801345c:	4b08      	ldr	r3, [pc, #32]	; (8013480 <ip4_input+0x240>)
 801345e:	2200      	movs	r2, #0
 8013460:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013462:	4b07      	ldr	r3, [pc, #28]	; (8013480 <ip4_input+0x240>)
 8013464:	2200      	movs	r2, #0
 8013466:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013468:	4b05      	ldr	r3, [pc, #20]	; (8013480 <ip4_input+0x240>)
 801346a:	2200      	movs	r2, #0
 801346c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801346e:	4b04      	ldr	r3, [pc, #16]	; (8013480 <ip4_input+0x240>)
 8013470:	2200      	movs	r2, #0
 8013472:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013474:	2300      	movs	r3, #0
}
 8013476:	4618      	mov	r0, r3
 8013478:	3718      	adds	r7, #24
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}
 801347e:	bf00      	nop
 8013480:	2400bde0 	.word	0x2400bde0
 8013484:	2400ee30 	.word	0x2400ee30

08013488 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b08a      	sub	sp, #40	; 0x28
 801348c:	af04      	add	r7, sp, #16
 801348e:	60f8      	str	r0, [r7, #12]
 8013490:	60b9      	str	r1, [r7, #8]
 8013492:	607a      	str	r2, [r7, #4]
 8013494:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d009      	beq.n	80134b4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d003      	beq.n	80134ae <ip4_output_if+0x26>
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d102      	bne.n	80134b4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80134ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b0:	3304      	adds	r3, #4
 80134b2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80134b4:	78fa      	ldrb	r2, [r7, #3]
 80134b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b8:	9302      	str	r3, [sp, #8]
 80134ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80134be:	9301      	str	r3, [sp, #4]
 80134c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80134c4:	9300      	str	r3, [sp, #0]
 80134c6:	4613      	mov	r3, r2
 80134c8:	687a      	ldr	r2, [r7, #4]
 80134ca:	6979      	ldr	r1, [r7, #20]
 80134cc:	68f8      	ldr	r0, [r7, #12]
 80134ce:	f000 f805 	bl	80134dc <ip4_output_if_src>
 80134d2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	3718      	adds	r7, #24
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}

080134dc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b088      	sub	sp, #32
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	60f8      	str	r0, [r7, #12]
 80134e4:	60b9      	str	r1, [r7, #8]
 80134e6:	607a      	str	r2, [r7, #4]
 80134e8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	7b9b      	ldrb	r3, [r3, #14]
 80134ee:	2b01      	cmp	r3, #1
 80134f0:	d006      	beq.n	8013500 <ip4_output_if_src+0x24>
 80134f2:	4b4b      	ldr	r3, [pc, #300]	; (8013620 <ip4_output_if_src+0x144>)
 80134f4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80134f8:	494a      	ldr	r1, [pc, #296]	; (8013624 <ip4_output_if_src+0x148>)
 80134fa:	484b      	ldr	r0, [pc, #300]	; (8013628 <ip4_output_if_src+0x14c>)
 80134fc:	f004 ffe0 	bl	80184c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d060      	beq.n	80135c8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013506:	2314      	movs	r3, #20
 8013508:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801350a:	2114      	movs	r1, #20
 801350c:	68f8      	ldr	r0, [r7, #12]
 801350e:	f7f8 f831 	bl	800b574 <pbuf_add_header>
 8013512:	4603      	mov	r3, r0
 8013514:	2b00      	cmp	r3, #0
 8013516:	d002      	beq.n	801351e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013518:	f06f 0301 	mvn.w	r3, #1
 801351c:	e07c      	b.n	8013618 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	685b      	ldr	r3, [r3, #4]
 8013522:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	895b      	ldrh	r3, [r3, #10]
 8013528:	2b13      	cmp	r3, #19
 801352a:	d806      	bhi.n	801353a <ip4_output_if_src+0x5e>
 801352c:	4b3c      	ldr	r3, [pc, #240]	; (8013620 <ip4_output_if_src+0x144>)
 801352e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013532:	493e      	ldr	r1, [pc, #248]	; (801362c <ip4_output_if_src+0x150>)
 8013534:	483c      	ldr	r0, [pc, #240]	; (8013628 <ip4_output_if_src+0x14c>)
 8013536:	f004 ffc3 	bl	80184c0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801353a:	69fb      	ldr	r3, [r7, #28]
 801353c:	78fa      	ldrb	r2, [r7, #3]
 801353e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013540:	69fb      	ldr	r3, [r7, #28]
 8013542:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013546:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681a      	ldr	r2, [r3, #0]
 801354c:	69fb      	ldr	r3, [r7, #28]
 801354e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013550:	8b7b      	ldrh	r3, [r7, #26]
 8013552:	089b      	lsrs	r3, r3, #2
 8013554:	b29b      	uxth	r3, r3
 8013556:	b2db      	uxtb	r3, r3
 8013558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801355c:	b2da      	uxtb	r2, r3
 801355e:	69fb      	ldr	r3, [r7, #28]
 8013560:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013562:	69fb      	ldr	r3, [r7, #28]
 8013564:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013568:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	891b      	ldrh	r3, [r3, #8]
 801356e:	4618      	mov	r0, r3
 8013570:	f7f6 fca8 	bl	8009ec4 <lwip_htons>
 8013574:	4603      	mov	r3, r0
 8013576:	461a      	mov	r2, r3
 8013578:	69fb      	ldr	r3, [r7, #28]
 801357a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	2200      	movs	r2, #0
 8013580:	719a      	strb	r2, [r3, #6]
 8013582:	2200      	movs	r2, #0
 8013584:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013586:	4b2a      	ldr	r3, [pc, #168]	; (8013630 <ip4_output_if_src+0x154>)
 8013588:	881b      	ldrh	r3, [r3, #0]
 801358a:	4618      	mov	r0, r3
 801358c:	f7f6 fc9a 	bl	8009ec4 <lwip_htons>
 8013590:	4603      	mov	r3, r0
 8013592:	461a      	mov	r2, r3
 8013594:	69fb      	ldr	r3, [r7, #28]
 8013596:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013598:	4b25      	ldr	r3, [pc, #148]	; (8013630 <ip4_output_if_src+0x154>)
 801359a:	881b      	ldrh	r3, [r3, #0]
 801359c:	3301      	adds	r3, #1
 801359e:	b29a      	uxth	r2, r3
 80135a0:	4b23      	ldr	r3, [pc, #140]	; (8013630 <ip4_output_if_src+0x154>)
 80135a2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d104      	bne.n	80135b4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80135aa:	4b22      	ldr	r3, [pc, #136]	; (8013634 <ip4_output_if_src+0x158>)
 80135ac:	681a      	ldr	r2, [r3, #0]
 80135ae:	69fb      	ldr	r3, [r7, #28]
 80135b0:	60da      	str	r2, [r3, #12]
 80135b2:	e003      	b.n	80135bc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	681a      	ldr	r2, [r3, #0]
 80135b8:	69fb      	ldr	r3, [r7, #28]
 80135ba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80135bc:	69fb      	ldr	r3, [r7, #28]
 80135be:	2200      	movs	r2, #0
 80135c0:	729a      	strb	r2, [r3, #10]
 80135c2:	2200      	movs	r2, #0
 80135c4:	72da      	strb	r2, [r3, #11]
 80135c6:	e00f      	b.n	80135e8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	895b      	ldrh	r3, [r3, #10]
 80135cc:	2b13      	cmp	r3, #19
 80135ce:	d802      	bhi.n	80135d6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80135d0:	f06f 0301 	mvn.w	r3, #1
 80135d4:	e020      	b.n	8013618 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	685b      	ldr	r3, [r3, #4]
 80135da:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80135dc:	69fb      	ldr	r3, [r7, #28]
 80135de:	691b      	ldr	r3, [r3, #16]
 80135e0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80135e2:	f107 0314 	add.w	r3, r7, #20
 80135e6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80135e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d00c      	beq.n	801360a <ip4_output_if_src+0x12e>
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	891a      	ldrh	r2, [r3, #8]
 80135f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d906      	bls.n	801360a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80135fc:	687a      	ldr	r2, [r7, #4]
 80135fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013600:	68f8      	ldr	r0, [r7, #12]
 8013602:	f000 fd4d 	bl	80140a0 <ip4_frag>
 8013606:	4603      	mov	r3, r0
 8013608:	e006      	b.n	8013618 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801360c:	695b      	ldr	r3, [r3, #20]
 801360e:	687a      	ldr	r2, [r7, #4]
 8013610:	68f9      	ldr	r1, [r7, #12]
 8013612:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013614:	4798      	blx	r3
 8013616:	4603      	mov	r3, r0
}
 8013618:	4618      	mov	r0, r3
 801361a:	3720      	adds	r7, #32
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}
 8013620:	0801e338 	.word	0x0801e338
 8013624:	0801e36c 	.word	0x0801e36c
 8013628:	0801e378 	.word	0x0801e378
 801362c:	0801e3a0 	.word	0x0801e3a0
 8013630:	2400b7ea 	.word	0x2400b7ea
 8013634:	0801ec24 	.word	0x0801ec24

08013638 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013638:	b480      	push	{r7}
 801363a:	b085      	sub	sp, #20
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
 8013640:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801364c:	d002      	beq.n	8013654 <ip4_addr_isbroadcast_u32+0x1c>
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d101      	bne.n	8013658 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013654:	2301      	movs	r3, #1
 8013656:	e02a      	b.n	80136ae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801365e:	f003 0302 	and.w	r3, r3, #2
 8013662:	2b00      	cmp	r3, #0
 8013664:	d101      	bne.n	801366a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013666:	2300      	movs	r3, #0
 8013668:	e021      	b.n	80136ae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	3304      	adds	r3, #4
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	687a      	ldr	r2, [r7, #4]
 8013672:	429a      	cmp	r2, r3
 8013674:	d101      	bne.n	801367a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013676:	2300      	movs	r3, #0
 8013678:	e019      	b.n	80136ae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801367a:	68fa      	ldr	r2, [r7, #12]
 801367c:	683b      	ldr	r3, [r7, #0]
 801367e:	3304      	adds	r3, #4
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	405a      	eors	r2, r3
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	3308      	adds	r3, #8
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	4013      	ands	r3, r2
 801368c:	2b00      	cmp	r3, #0
 801368e:	d10d      	bne.n	80136ac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	3308      	adds	r3, #8
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	43da      	mvns	r2, r3
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	3308      	adds	r3, #8
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80136a4:	429a      	cmp	r2, r3
 80136a6:	d101      	bne.n	80136ac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80136a8:	2301      	movs	r3, #1
 80136aa:	e000      	b.n	80136ae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80136ac:	2300      	movs	r3, #0
  }
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3714      	adds	r7, #20
 80136b2:	46bd      	mov	sp, r7
 80136b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b8:	4770      	bx	lr
	...

080136bc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80136c2:	2300      	movs	r3, #0
 80136c4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80136c6:	4b12      	ldr	r3, [pc, #72]	; (8013710 <ip_reass_tmr+0x54>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80136cc:	e018      	b.n	8013700 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	7fdb      	ldrb	r3, [r3, #31]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d00b      	beq.n	80136ee <ip_reass_tmr+0x32>
      r->timer--;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	7fdb      	ldrb	r3, [r3, #31]
 80136da:	3b01      	subs	r3, #1
 80136dc:	b2da      	uxtb	r2, r3
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	60fb      	str	r3, [r7, #12]
 80136ec:	e008      	b.n	8013700 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80136f8:	68b9      	ldr	r1, [r7, #8]
 80136fa:	6878      	ldr	r0, [r7, #4]
 80136fc:	f000 f80a 	bl	8013714 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d1e3      	bne.n	80136ce <ip_reass_tmr+0x12>
    }
  }
}
 8013706:	bf00      	nop
 8013708:	bf00      	nop
 801370a:	3710      	adds	r7, #16
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	2400b7ec 	.word	0x2400b7ec

08013714 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b088      	sub	sp, #32
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801371e:	2300      	movs	r3, #0
 8013720:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013722:	683a      	ldr	r2, [r7, #0]
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	429a      	cmp	r2, r3
 8013728:	d105      	bne.n	8013736 <ip_reass_free_complete_datagram+0x22>
 801372a:	4b45      	ldr	r3, [pc, #276]	; (8013840 <ip_reass_free_complete_datagram+0x12c>)
 801372c:	22ab      	movs	r2, #171	; 0xab
 801372e:	4945      	ldr	r1, [pc, #276]	; (8013844 <ip_reass_free_complete_datagram+0x130>)
 8013730:	4845      	ldr	r0, [pc, #276]	; (8013848 <ip_reass_free_complete_datagram+0x134>)
 8013732:	f004 fec5 	bl	80184c0 <iprintf>
  if (prev != NULL) {
 8013736:	683b      	ldr	r3, [r7, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d00a      	beq.n	8013752 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801373c:	683b      	ldr	r3, [r7, #0]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	687a      	ldr	r2, [r7, #4]
 8013742:	429a      	cmp	r2, r3
 8013744:	d005      	beq.n	8013752 <ip_reass_free_complete_datagram+0x3e>
 8013746:	4b3e      	ldr	r3, [pc, #248]	; (8013840 <ip_reass_free_complete_datagram+0x12c>)
 8013748:	22ad      	movs	r2, #173	; 0xad
 801374a:	4940      	ldr	r1, [pc, #256]	; (801384c <ip_reass_free_complete_datagram+0x138>)
 801374c:	483e      	ldr	r0, [pc, #248]	; (8013848 <ip_reass_free_complete_datagram+0x134>)
 801374e:	f004 feb7 	bl	80184c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	685b      	ldr	r3, [r3, #4]
 8013756:	685b      	ldr	r3, [r3, #4]
 8013758:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	889b      	ldrh	r3, [r3, #4]
 801375e:	b29b      	uxth	r3, r3
 8013760:	2b00      	cmp	r3, #0
 8013762:	d12a      	bne.n	80137ba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	681a      	ldr	r2, [r3, #0]
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013772:	69bb      	ldr	r3, [r7, #24]
 8013774:	6858      	ldr	r0, [r3, #4]
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	3308      	adds	r3, #8
 801377a:	2214      	movs	r2, #20
 801377c:	4619      	mov	r1, r3
 801377e:	f004 fdc5 	bl	801830c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013782:	2101      	movs	r1, #1
 8013784:	69b8      	ldr	r0, [r7, #24]
 8013786:	f7ff fc47 	bl	8013018 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801378a:	69b8      	ldr	r0, [r7, #24]
 801378c:	f7f8 f816 	bl	800b7bc <pbuf_clen>
 8013790:	4603      	mov	r3, r0
 8013792:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013794:	8bfa      	ldrh	r2, [r7, #30]
 8013796:	8a7b      	ldrh	r3, [r7, #18]
 8013798:	4413      	add	r3, r2
 801379a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801379e:	db05      	blt.n	80137ac <ip_reass_free_complete_datagram+0x98>
 80137a0:	4b27      	ldr	r3, [pc, #156]	; (8013840 <ip_reass_free_complete_datagram+0x12c>)
 80137a2:	22bc      	movs	r2, #188	; 0xbc
 80137a4:	492a      	ldr	r1, [pc, #168]	; (8013850 <ip_reass_free_complete_datagram+0x13c>)
 80137a6:	4828      	ldr	r0, [pc, #160]	; (8013848 <ip_reass_free_complete_datagram+0x134>)
 80137a8:	f004 fe8a 	bl	80184c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80137ac:	8bfa      	ldrh	r2, [r7, #30]
 80137ae:	8a7b      	ldrh	r3, [r7, #18]
 80137b0:	4413      	add	r3, r2
 80137b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80137b4:	69b8      	ldr	r0, [r7, #24]
 80137b6:	f7f7 ff73 	bl	800b6a0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80137c0:	e01f      	b.n	8013802 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80137c2:	69bb      	ldr	r3, [r7, #24]
 80137c4:	685b      	ldr	r3, [r3, #4]
 80137c6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80137c8:	69bb      	ldr	r3, [r7, #24]
 80137ca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80137d2:	68f8      	ldr	r0, [r7, #12]
 80137d4:	f7f7 fff2 	bl	800b7bc <pbuf_clen>
 80137d8:	4603      	mov	r3, r0
 80137da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80137dc:	8bfa      	ldrh	r2, [r7, #30]
 80137de:	8a7b      	ldrh	r3, [r7, #18]
 80137e0:	4413      	add	r3, r2
 80137e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80137e6:	db05      	blt.n	80137f4 <ip_reass_free_complete_datagram+0xe0>
 80137e8:	4b15      	ldr	r3, [pc, #84]	; (8013840 <ip_reass_free_complete_datagram+0x12c>)
 80137ea:	22cc      	movs	r2, #204	; 0xcc
 80137ec:	4918      	ldr	r1, [pc, #96]	; (8013850 <ip_reass_free_complete_datagram+0x13c>)
 80137ee:	4816      	ldr	r0, [pc, #88]	; (8013848 <ip_reass_free_complete_datagram+0x134>)
 80137f0:	f004 fe66 	bl	80184c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80137f4:	8bfa      	ldrh	r2, [r7, #30]
 80137f6:	8a7b      	ldrh	r3, [r7, #18]
 80137f8:	4413      	add	r3, r2
 80137fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80137fc:	68f8      	ldr	r0, [r7, #12]
 80137fe:	f7f7 ff4f 	bl	800b6a0 <pbuf_free>
  while (p != NULL) {
 8013802:	69bb      	ldr	r3, [r7, #24]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d1dc      	bne.n	80137c2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013808:	6839      	ldr	r1, [r7, #0]
 801380a:	6878      	ldr	r0, [r7, #4]
 801380c:	f000 f8c2 	bl	8013994 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013810:	4b10      	ldr	r3, [pc, #64]	; (8013854 <ip_reass_free_complete_datagram+0x140>)
 8013812:	881b      	ldrh	r3, [r3, #0]
 8013814:	8bfa      	ldrh	r2, [r7, #30]
 8013816:	429a      	cmp	r2, r3
 8013818:	d905      	bls.n	8013826 <ip_reass_free_complete_datagram+0x112>
 801381a:	4b09      	ldr	r3, [pc, #36]	; (8013840 <ip_reass_free_complete_datagram+0x12c>)
 801381c:	22d2      	movs	r2, #210	; 0xd2
 801381e:	490e      	ldr	r1, [pc, #56]	; (8013858 <ip_reass_free_complete_datagram+0x144>)
 8013820:	4809      	ldr	r0, [pc, #36]	; (8013848 <ip_reass_free_complete_datagram+0x134>)
 8013822:	f004 fe4d 	bl	80184c0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013826:	4b0b      	ldr	r3, [pc, #44]	; (8013854 <ip_reass_free_complete_datagram+0x140>)
 8013828:	881a      	ldrh	r2, [r3, #0]
 801382a:	8bfb      	ldrh	r3, [r7, #30]
 801382c:	1ad3      	subs	r3, r2, r3
 801382e:	b29a      	uxth	r2, r3
 8013830:	4b08      	ldr	r3, [pc, #32]	; (8013854 <ip_reass_free_complete_datagram+0x140>)
 8013832:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013834:	8bfb      	ldrh	r3, [r7, #30]
}
 8013836:	4618      	mov	r0, r3
 8013838:	3720      	adds	r7, #32
 801383a:	46bd      	mov	sp, r7
 801383c:	bd80      	pop	{r7, pc}
 801383e:	bf00      	nop
 8013840:	0801e3d0 	.word	0x0801e3d0
 8013844:	0801e40c 	.word	0x0801e40c
 8013848:	0801e418 	.word	0x0801e418
 801384c:	0801e440 	.word	0x0801e440
 8013850:	0801e454 	.word	0x0801e454
 8013854:	2400b7f0 	.word	0x2400b7f0
 8013858:	0801e474 	.word	0x0801e474

0801385c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b08a      	sub	sp, #40	; 0x28
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013866:	2300      	movs	r3, #0
 8013868:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801386a:	2300      	movs	r3, #0
 801386c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801386e:	2300      	movs	r3, #0
 8013870:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013872:	2300      	movs	r3, #0
 8013874:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013876:	2300      	movs	r3, #0
 8013878:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801387a:	4b28      	ldr	r3, [pc, #160]	; (801391c <ip_reass_remove_oldest_datagram+0xc0>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013880:	e030      	b.n	80138e4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013884:	695a      	ldr	r2, [r3, #20]
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	68db      	ldr	r3, [r3, #12]
 801388a:	429a      	cmp	r2, r3
 801388c:	d10c      	bne.n	80138a8 <ip_reass_remove_oldest_datagram+0x4c>
 801388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013890:	699a      	ldr	r2, [r3, #24]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	691b      	ldr	r3, [r3, #16]
 8013896:	429a      	cmp	r2, r3
 8013898:	d106      	bne.n	80138a8 <ip_reass_remove_oldest_datagram+0x4c>
 801389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389c:	899a      	ldrh	r2, [r3, #12]
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	889b      	ldrh	r3, [r3, #4]
 80138a2:	b29b      	uxth	r3, r3
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d014      	beq.n	80138d2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	3301      	adds	r3, #1
 80138ac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80138ae:	6a3b      	ldr	r3, [r7, #32]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d104      	bne.n	80138be <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80138b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80138b8:	69fb      	ldr	r3, [r7, #28]
 80138ba:	61bb      	str	r3, [r7, #24]
 80138bc:	e009      	b.n	80138d2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80138be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c0:	7fda      	ldrb	r2, [r3, #31]
 80138c2:	6a3b      	ldr	r3, [r7, #32]
 80138c4:	7fdb      	ldrb	r3, [r3, #31]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d803      	bhi.n	80138d2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80138ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138cc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80138ce:	69fb      	ldr	r3, [r7, #28]
 80138d0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80138d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d001      	beq.n	80138de <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80138da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138dc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80138de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80138e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d1cb      	bne.n	8013882 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80138ea:	6a3b      	ldr	r3, [r7, #32]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d008      	beq.n	8013902 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80138f0:	69b9      	ldr	r1, [r7, #24]
 80138f2:	6a38      	ldr	r0, [r7, #32]
 80138f4:	f7ff ff0e 	bl	8013714 <ip_reass_free_complete_datagram>
 80138f8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80138fa:	697a      	ldr	r2, [r7, #20]
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	4413      	add	r3, r2
 8013900:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013902:	697a      	ldr	r2, [r7, #20]
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	429a      	cmp	r2, r3
 8013908:	da02      	bge.n	8013910 <ip_reass_remove_oldest_datagram+0xb4>
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	2b01      	cmp	r3, #1
 801390e:	dcac      	bgt.n	801386a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013910:	697b      	ldr	r3, [r7, #20]
}
 8013912:	4618      	mov	r0, r3
 8013914:	3728      	adds	r7, #40	; 0x28
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}
 801391a:	bf00      	nop
 801391c:	2400b7ec 	.word	0x2400b7ec

08013920 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b084      	sub	sp, #16
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
 8013928:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801392a:	2004      	movs	r0, #4
 801392c:	f7f6 ff9e 	bl	800a86c <memp_malloc>
 8013930:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d110      	bne.n	801395a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013938:	6839      	ldr	r1, [r7, #0]
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	f7ff ff8e 	bl	801385c <ip_reass_remove_oldest_datagram>
 8013940:	4602      	mov	r2, r0
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	4293      	cmp	r3, r2
 8013946:	dc03      	bgt.n	8013950 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013948:	2004      	movs	r0, #4
 801394a:	f7f6 ff8f 	bl	800a86c <memp_malloc>
 801394e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d101      	bne.n	801395a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013956:	2300      	movs	r3, #0
 8013958:	e016      	b.n	8013988 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801395a:	2220      	movs	r2, #32
 801395c:	2100      	movs	r1, #0
 801395e:	68f8      	ldr	r0, [r7, #12]
 8013960:	f004 fcfc 	bl	801835c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	220f      	movs	r2, #15
 8013968:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801396a:	4b09      	ldr	r3, [pc, #36]	; (8013990 <ip_reass_enqueue_new_datagram+0x70>)
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013972:	4a07      	ldr	r2, [pc, #28]	; (8013990 <ip_reass_enqueue_new_datagram+0x70>)
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	3308      	adds	r3, #8
 801397c:	2214      	movs	r2, #20
 801397e:	6879      	ldr	r1, [r7, #4]
 8013980:	4618      	mov	r0, r3
 8013982:	f004 fcc3 	bl	801830c <memcpy>
  return ipr;
 8013986:	68fb      	ldr	r3, [r7, #12]
}
 8013988:	4618      	mov	r0, r3
 801398a:	3710      	adds	r7, #16
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}
 8013990:	2400b7ec 	.word	0x2400b7ec

08013994 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b082      	sub	sp, #8
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801399e:	4b10      	ldr	r3, [pc, #64]	; (80139e0 <ip_reass_dequeue_datagram+0x4c>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	687a      	ldr	r2, [r7, #4]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d104      	bne.n	80139b2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	4a0c      	ldr	r2, [pc, #48]	; (80139e0 <ip_reass_dequeue_datagram+0x4c>)
 80139ae:	6013      	str	r3, [r2, #0]
 80139b0:	e00d      	b.n	80139ce <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d106      	bne.n	80139c6 <ip_reass_dequeue_datagram+0x32>
 80139b8:	4b0a      	ldr	r3, [pc, #40]	; (80139e4 <ip_reass_dequeue_datagram+0x50>)
 80139ba:	f240 1245 	movw	r2, #325	; 0x145
 80139be:	490a      	ldr	r1, [pc, #40]	; (80139e8 <ip_reass_dequeue_datagram+0x54>)
 80139c0:	480a      	ldr	r0, [pc, #40]	; (80139ec <ip_reass_dequeue_datagram+0x58>)
 80139c2:	f004 fd7d 	bl	80184c0 <iprintf>
    prev->next = ipr->next;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	681a      	ldr	r2, [r3, #0]
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80139ce:	6879      	ldr	r1, [r7, #4]
 80139d0:	2004      	movs	r0, #4
 80139d2:	f7f6 ffc1 	bl	800a958 <memp_free>
}
 80139d6:	bf00      	nop
 80139d8:	3708      	adds	r7, #8
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}
 80139de:	bf00      	nop
 80139e0:	2400b7ec 	.word	0x2400b7ec
 80139e4:	0801e3d0 	.word	0x0801e3d0
 80139e8:	0801e498 	.word	0x0801e498
 80139ec:	0801e418 	.word	0x0801e418

080139f0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b08c      	sub	sp, #48	; 0x30
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	60f8      	str	r0, [r7, #12]
 80139f8:	60b9      	str	r1, [r7, #8]
 80139fa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80139fc:	2300      	movs	r3, #0
 80139fe:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013a00:	2301      	movs	r3, #1
 8013a02:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	685b      	ldr	r3, [r3, #4]
 8013a08:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	885b      	ldrh	r3, [r3, #2]
 8013a0e:	b29b      	uxth	r3, r3
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7f6 fa57 	bl	8009ec4 <lwip_htons>
 8013a16:	4603      	mov	r3, r0
 8013a18:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013a1a:	69fb      	ldr	r3, [r7, #28]
 8013a1c:	781b      	ldrb	r3, [r3, #0]
 8013a1e:	f003 030f 	and.w	r3, r3, #15
 8013a22:	b2db      	uxtb	r3, r3
 8013a24:	009b      	lsls	r3, r3, #2
 8013a26:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013a28:	7e7b      	ldrb	r3, [r7, #25]
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	8b7a      	ldrh	r2, [r7, #26]
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d202      	bcs.n	8013a38 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a36:	e135      	b.n	8013ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013a38:	7e7b      	ldrb	r3, [r7, #25]
 8013a3a:	b29b      	uxth	r3, r3
 8013a3c:	8b7a      	ldrh	r2, [r7, #26]
 8013a3e:	1ad3      	subs	r3, r2, r3
 8013a40:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013a42:	69fb      	ldr	r3, [r7, #28]
 8013a44:	88db      	ldrh	r3, [r3, #6]
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f7f6 fa3b 	bl	8009ec4 <lwip_htons>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a54:	b29b      	uxth	r3, r3
 8013a56:	00db      	lsls	r3, r3, #3
 8013a58:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	685b      	ldr	r3, [r3, #4]
 8013a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a62:	2200      	movs	r2, #0
 8013a64:	701a      	strb	r2, [r3, #0]
 8013a66:	2200      	movs	r2, #0
 8013a68:	705a      	strb	r2, [r3, #1]
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	709a      	strb	r2, [r3, #2]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a74:	8afa      	ldrh	r2, [r7, #22]
 8013a76:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013a78:	8afa      	ldrh	r2, [r7, #22]
 8013a7a:	8b7b      	ldrh	r3, [r7, #26]
 8013a7c:	4413      	add	r3, r2
 8013a7e:	b29a      	uxth	r2, r3
 8013a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a82:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a86:	88db      	ldrh	r3, [r3, #6]
 8013a88:	b29b      	uxth	r3, r3
 8013a8a:	8afa      	ldrh	r2, [r7, #22]
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	d902      	bls.n	8013a96 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a94:	e106      	b.n	8013ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	685b      	ldr	r3, [r3, #4]
 8013a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8013a9c:	e068      	b.n	8013b70 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa0:	685b      	ldr	r3, [r3, #4]
 8013aa2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aa6:	889b      	ldrh	r3, [r3, #4]
 8013aa8:	b29a      	uxth	r2, r3
 8013aaa:	693b      	ldr	r3, [r7, #16]
 8013aac:	889b      	ldrh	r3, [r3, #4]
 8013aae:	b29b      	uxth	r3, r3
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	d235      	bcs.n	8013b20 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ab8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d020      	beq.n	8013b02 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac2:	889b      	ldrh	r3, [r3, #4]
 8013ac4:	b29a      	uxth	r2, r3
 8013ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac8:	88db      	ldrh	r3, [r3, #6]
 8013aca:	b29b      	uxth	r3, r3
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d307      	bcc.n	8013ae0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad2:	88db      	ldrh	r3, [r3, #6]
 8013ad4:	b29a      	uxth	r2, r3
 8013ad6:	693b      	ldr	r3, [r7, #16]
 8013ad8:	889b      	ldrh	r3, [r3, #4]
 8013ada:	b29b      	uxth	r3, r3
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d902      	bls.n	8013ae6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ae4:	e0de      	b.n	8013ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae8:	68ba      	ldr	r2, [r7, #8]
 8013aea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aee:	88db      	ldrh	r3, [r3, #6]
 8013af0:	b29a      	uxth	r2, r3
 8013af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af4:	889b      	ldrh	r3, [r3, #4]
 8013af6:	b29b      	uxth	r3, r3
 8013af8:	429a      	cmp	r2, r3
 8013afa:	d03d      	beq.n	8013b78 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013afc:	2300      	movs	r3, #0
 8013afe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013b00:	e03a      	b.n	8013b78 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b04:	88db      	ldrh	r3, [r3, #6]
 8013b06:	b29a      	uxth	r2, r3
 8013b08:	693b      	ldr	r3, [r7, #16]
 8013b0a:	889b      	ldrh	r3, [r3, #4]
 8013b0c:	b29b      	uxth	r3, r3
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d902      	bls.n	8013b18 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b16:	e0c5      	b.n	8013ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	68ba      	ldr	r2, [r7, #8]
 8013b1c:	605a      	str	r2, [r3, #4]
      break;
 8013b1e:	e02b      	b.n	8013b78 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b22:	889b      	ldrh	r3, [r3, #4]
 8013b24:	b29a      	uxth	r2, r3
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	889b      	ldrh	r3, [r3, #4]
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d102      	bne.n	8013b36 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b34:	e0b6      	b.n	8013ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b38:	889b      	ldrh	r3, [r3, #4]
 8013b3a:	b29a      	uxth	r2, r3
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	88db      	ldrh	r3, [r3, #6]
 8013b40:	b29b      	uxth	r3, r3
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d202      	bcs.n	8013b4c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b4a:	e0ab      	b.n	8013ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d009      	beq.n	8013b66 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b54:	88db      	ldrh	r3, [r3, #6]
 8013b56:	b29a      	uxth	r2, r3
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	889b      	ldrh	r3, [r3, #4]
 8013b5c:	b29b      	uxth	r3, r3
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d001      	beq.n	8013b66 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013b62:	2300      	movs	r3, #0
 8013b64:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013b6c:	693b      	ldr	r3, [r7, #16]
 8013b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d193      	bne.n	8013a9e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013b76:	e000      	b.n	8013b7a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013b78:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d12d      	bne.n	8013bdc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d01c      	beq.n	8013bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b88:	88db      	ldrh	r3, [r3, #6]
 8013b8a:	b29a      	uxth	r2, r3
 8013b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b8e:	889b      	ldrh	r3, [r3, #4]
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d906      	bls.n	8013ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013b96:	4b45      	ldr	r3, [pc, #276]	; (8013cac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013b98:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013b9c:	4944      	ldr	r1, [pc, #272]	; (8013cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013b9e:	4845      	ldr	r0, [pc, #276]	; (8013cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013ba0:	f004 fc8e 	bl	80184c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba6:	68ba      	ldr	r2, [r7, #8]
 8013ba8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bac:	88db      	ldrh	r3, [r3, #6]
 8013bae:	b29a      	uxth	r2, r3
 8013bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb2:	889b      	ldrh	r3, [r3, #4]
 8013bb4:	b29b      	uxth	r3, r3
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d010      	beq.n	8013bdc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	623b      	str	r3, [r7, #32]
 8013bbe:	e00d      	b.n	8013bdc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	685b      	ldr	r3, [r3, #4]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d006      	beq.n	8013bd6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013bc8:	4b38      	ldr	r3, [pc, #224]	; (8013cac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013bca:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013bce:	493a      	ldr	r1, [pc, #232]	; (8013cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013bd0:	4838      	ldr	r0, [pc, #224]	; (8013cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013bd2:	f004 fc75 	bl	80184c0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	68ba      	ldr	r2, [r7, #8]
 8013bda:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d105      	bne.n	8013bee <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	7f9b      	ldrb	r3, [r3, #30]
 8013be6:	f003 0301 	and.w	r3, r3, #1
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d059      	beq.n	8013ca2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013bee:	6a3b      	ldr	r3, [r7, #32]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d04f      	beq.n	8013c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	685b      	ldr	r3, [r3, #4]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d006      	beq.n	8013c0a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	889b      	ldrh	r3, [r3, #4]
 8013c04:	b29b      	uxth	r3, r3
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d002      	beq.n	8013c10 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	623b      	str	r3, [r7, #32]
 8013c0e:	e041      	b.n	8013c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c12:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013c1a:	e012      	b.n	8013c42 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1e:	685b      	ldr	r3, [r3, #4]
 8013c20:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c24:	88db      	ldrh	r3, [r3, #6]
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c2a:	889b      	ldrh	r3, [r3, #4]
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d002      	beq.n	8013c38 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013c32:	2300      	movs	r3, #0
 8013c34:	623b      	str	r3, [r7, #32]
            break;
 8013c36:	e007      	b.n	8013c48 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c3a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d1e9      	bne.n	8013c1c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013c48:	6a3b      	ldr	r3, [r7, #32]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d022      	beq.n	8013c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d106      	bne.n	8013c64 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013c56:	4b15      	ldr	r3, [pc, #84]	; (8013cac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c58:	f240 12df 	movw	r2, #479	; 0x1df
 8013c5c:	4917      	ldr	r1, [pc, #92]	; (8013cbc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013c5e:	4815      	ldr	r0, [pc, #84]	; (8013cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c60:	f004 fc2e 	bl	80184c0 <iprintf>
          LWIP_ASSERT("sanity check",
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	685b      	ldr	r3, [r3, #4]
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c6c:	429a      	cmp	r2, r3
 8013c6e:	d106      	bne.n	8013c7e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013c70:	4b0e      	ldr	r3, [pc, #56]	; (8013cac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c72:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013c76:	4911      	ldr	r1, [pc, #68]	; (8013cbc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013c78:	480e      	ldr	r0, [pc, #56]	; (8013cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c7a:	f004 fc21 	bl	80184c0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d006      	beq.n	8013c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013c86:	4b09      	ldr	r3, [pc, #36]	; (8013cac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c88:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013c8c:	490c      	ldr	r1, [pc, #48]	; (8013cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013c8e:	4809      	ldr	r0, [pc, #36]	; (8013cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c90:	f004 fc16 	bl	80184c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013c94:	6a3b      	ldr	r3, [r7, #32]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	bf14      	ite	ne
 8013c9a:	2301      	movne	r3, #1
 8013c9c:	2300      	moveq	r3, #0
 8013c9e:	b2db      	uxtb	r3, r3
 8013ca0:	e000      	b.n	8013ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013ca2:	2300      	movs	r3, #0
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3730      	adds	r7, #48	; 0x30
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	0801e3d0 	.word	0x0801e3d0
 8013cb0:	0801e4b4 	.word	0x0801e4b4
 8013cb4:	0801e418 	.word	0x0801e418
 8013cb8:	0801e4d4 	.word	0x0801e4d4
 8013cbc:	0801e50c 	.word	0x0801e50c
 8013cc0:	0801e51c 	.word	0x0801e51c

08013cc4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b08e      	sub	sp, #56	; 0x38
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	685b      	ldr	r3, [r3, #4]
 8013cd0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	f003 030f 	and.w	r3, r3, #15
 8013cda:	b2db      	uxtb	r3, r3
 8013cdc:	009b      	lsls	r3, r3, #2
 8013cde:	b2db      	uxtb	r3, r3
 8013ce0:	2b14      	cmp	r3, #20
 8013ce2:	f040 8167 	bne.w	8013fb4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce8:	88db      	ldrh	r3, [r3, #6]
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7f6 f8e9 	bl	8009ec4 <lwip_htons>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013cf8:	b29b      	uxth	r3, r3
 8013cfa:	00db      	lsls	r3, r3, #3
 8013cfc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d00:	885b      	ldrh	r3, [r3, #2]
 8013d02:	b29b      	uxth	r3, r3
 8013d04:	4618      	mov	r0, r3
 8013d06:	f7f6 f8dd 	bl	8009ec4 <lwip_htons>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	f003 030f 	and.w	r3, r3, #15
 8013d16:	b2db      	uxtb	r3, r3
 8013d18:	009b      	lsls	r3, r3, #2
 8013d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013d22:	b29b      	uxth	r3, r3
 8013d24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013d26:	429a      	cmp	r2, r3
 8013d28:	f0c0 8146 	bcc.w	8013fb8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013d30:	b29b      	uxth	r3, r3
 8013d32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013d34:	1ad3      	subs	r3, r2, r3
 8013d36:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f7f7 fd3f 	bl	800b7bc <pbuf_clen>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013d42:	4b9f      	ldr	r3, [pc, #636]	; (8013fc0 <ip4_reass+0x2fc>)
 8013d44:	881b      	ldrh	r3, [r3, #0]
 8013d46:	461a      	mov	r2, r3
 8013d48:	8c3b      	ldrh	r3, [r7, #32]
 8013d4a:	4413      	add	r3, r2
 8013d4c:	2b0a      	cmp	r3, #10
 8013d4e:	dd10      	ble.n	8013d72 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013d50:	8c3b      	ldrh	r3, [r7, #32]
 8013d52:	4619      	mov	r1, r3
 8013d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d56:	f7ff fd81 	bl	801385c <ip_reass_remove_oldest_datagram>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	f000 812d 	beq.w	8013fbc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013d62:	4b97      	ldr	r3, [pc, #604]	; (8013fc0 <ip4_reass+0x2fc>)
 8013d64:	881b      	ldrh	r3, [r3, #0]
 8013d66:	461a      	mov	r2, r3
 8013d68:	8c3b      	ldrh	r3, [r7, #32]
 8013d6a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013d6c:	2b0a      	cmp	r3, #10
 8013d6e:	f300 8125 	bgt.w	8013fbc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013d72:	4b94      	ldr	r3, [pc, #592]	; (8013fc4 <ip4_reass+0x300>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	633b      	str	r3, [r7, #48]	; 0x30
 8013d78:	e015      	b.n	8013da6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d7c:	695a      	ldr	r2, [r3, #20]
 8013d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d80:	68db      	ldr	r3, [r3, #12]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d10c      	bne.n	8013da0 <ip4_reass+0xdc>
 8013d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d88:	699a      	ldr	r2, [r3, #24]
 8013d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d8c:	691b      	ldr	r3, [r3, #16]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d106      	bne.n	8013da0 <ip4_reass+0xdc>
 8013d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d94:	899a      	ldrh	r2, [r3, #12]
 8013d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d98:	889b      	ldrh	r3, [r3, #4]
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d006      	beq.n	8013dae <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	633b      	str	r3, [r7, #48]	; 0x30
 8013da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d1e6      	bne.n	8013d7a <ip4_reass+0xb6>
 8013dac:	e000      	b.n	8013db0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013dae:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d109      	bne.n	8013dca <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013db6:	8c3b      	ldrh	r3, [r7, #32]
 8013db8:	4619      	mov	r1, r3
 8013dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013dbc:	f7ff fdb0 	bl	8013920 <ip_reass_enqueue_new_datagram>
 8013dc0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d11c      	bne.n	8013e02 <ip4_reass+0x13e>
      goto nullreturn;
 8013dc8:	e109      	b.n	8013fde <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dcc:	88db      	ldrh	r3, [r3, #6]
 8013dce:	b29b      	uxth	r3, r3
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7f6 f877 	bl	8009ec4 <lwip_htons>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d110      	bne.n	8013e02 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de2:	89db      	ldrh	r3, [r3, #14]
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7f6 f86d 	bl	8009ec4 <lwip_htons>
 8013dea:	4603      	mov	r3, r0
 8013dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d006      	beq.n	8013e02 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df6:	3308      	adds	r3, #8
 8013df8:	2214      	movs	r2, #20
 8013dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f004 fa85 	bl	801830c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e04:	88db      	ldrh	r3, [r3, #6]
 8013e06:	b29b      	uxth	r3, r3
 8013e08:	f003 0320 	and.w	r3, r3, #32
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	bf0c      	ite	eq
 8013e10:	2301      	moveq	r3, #1
 8013e12:	2300      	movne	r3, #0
 8013e14:	b2db      	uxtb	r3, r3
 8013e16:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013e18:	69fb      	ldr	r3, [r7, #28]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d00e      	beq.n	8013e3c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013e1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013e20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e22:	4413      	add	r3, r2
 8013e24:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013e26:	8b7a      	ldrh	r2, [r7, #26]
 8013e28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013e2a:	429a      	cmp	r2, r3
 8013e2c:	f0c0 80a0 	bcc.w	8013f70 <ip4_reass+0x2ac>
 8013e30:	8b7b      	ldrh	r3, [r7, #26]
 8013e32:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013e36:	4293      	cmp	r3, r2
 8013e38:	f200 809a 	bhi.w	8013f70 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013e3c:	69fa      	ldr	r2, [r7, #28]
 8013e3e:	6879      	ldr	r1, [r7, #4]
 8013e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e42:	f7ff fdd5 	bl	80139f0 <ip_reass_chain_frag_into_datagram_and_validate>
 8013e46:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013e48:	697b      	ldr	r3, [r7, #20]
 8013e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e4e:	f000 8091 	beq.w	8013f74 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013e52:	4b5b      	ldr	r3, [pc, #364]	; (8013fc0 <ip4_reass+0x2fc>)
 8013e54:	881a      	ldrh	r2, [r3, #0]
 8013e56:	8c3b      	ldrh	r3, [r7, #32]
 8013e58:	4413      	add	r3, r2
 8013e5a:	b29a      	uxth	r2, r3
 8013e5c:	4b58      	ldr	r3, [pc, #352]	; (8013fc0 <ip4_reass+0x2fc>)
 8013e5e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013e60:	69fb      	ldr	r3, [r7, #28]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d00d      	beq.n	8013e82 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013e66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013e68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e6a:	4413      	add	r3, r2
 8013e6c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e70:	8a7a      	ldrh	r2, [r7, #18]
 8013e72:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e76:	7f9b      	ldrb	r3, [r3, #30]
 8013e78:	f043 0301 	orr.w	r3, r3, #1
 8013e7c:	b2da      	uxtb	r2, r3
 8013e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e80:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013e82:	697b      	ldr	r3, [r7, #20]
 8013e84:	2b01      	cmp	r3, #1
 8013e86:	d171      	bne.n	8013f6c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e8a:	8b9b      	ldrh	r3, [r3, #28]
 8013e8c:	3314      	adds	r3, #20
 8013e8e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e92:	685b      	ldr	r3, [r3, #4]
 8013e94:	685b      	ldr	r3, [r3, #4]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e9c:	685b      	ldr	r3, [r3, #4]
 8013e9e:	685b      	ldr	r3, [r3, #4]
 8013ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea4:	3308      	adds	r3, #8
 8013ea6:	2214      	movs	r2, #20
 8013ea8:	4619      	mov	r1, r3
 8013eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013eac:	f004 fa2e 	bl	801830c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013eb0:	8a3b      	ldrh	r3, [r7, #16]
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7f6 f806 	bl	8009ec4 <lwip_htons>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	461a      	mov	r2, r3
 8013ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ebe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	719a      	strb	r2, [r3, #6]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ecc:	2200      	movs	r2, #0
 8013ece:	729a      	strb	r2, [r3, #10]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed6:	685b      	ldr	r3, [r3, #4]
 8013ed8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013eda:	e00d      	b.n	8013ef8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ede:	685b      	ldr	r3, [r3, #4]
 8013ee0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013ee2:	2114      	movs	r1, #20
 8013ee4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013ee6:	f7f7 fb55 	bl	800b594 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013eea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f7f7 fca5 	bl	800b83c <pbuf_cat>
      r = iprh->next_pbuf;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d1ee      	bne.n	8013edc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013efe:	4b31      	ldr	r3, [pc, #196]	; (8013fc4 <ip4_reass+0x300>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d102      	bne.n	8013f0e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f0c:	e010      	b.n	8013f30 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013f0e:	4b2d      	ldr	r3, [pc, #180]	; (8013fc4 <ip4_reass+0x300>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f14:	e007      	b.n	8013f26 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	d006      	beq.n	8013f2e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d1f4      	bne.n	8013f16 <ip4_reass+0x252>
 8013f2c:	e000      	b.n	8013f30 <ip4_reass+0x26c>
          break;
 8013f2e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013f30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f34:	f7ff fd2e 	bl	8013994 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f7f7 fc3f 	bl	800b7bc <pbuf_clen>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013f42:	4b1f      	ldr	r3, [pc, #124]	; (8013fc0 <ip4_reass+0x2fc>)
 8013f44:	881b      	ldrh	r3, [r3, #0]
 8013f46:	8c3a      	ldrh	r2, [r7, #32]
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d906      	bls.n	8013f5a <ip4_reass+0x296>
 8013f4c:	4b1e      	ldr	r3, [pc, #120]	; (8013fc8 <ip4_reass+0x304>)
 8013f4e:	f240 229b 	movw	r2, #667	; 0x29b
 8013f52:	491e      	ldr	r1, [pc, #120]	; (8013fcc <ip4_reass+0x308>)
 8013f54:	481e      	ldr	r0, [pc, #120]	; (8013fd0 <ip4_reass+0x30c>)
 8013f56:	f004 fab3 	bl	80184c0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013f5a:	4b19      	ldr	r3, [pc, #100]	; (8013fc0 <ip4_reass+0x2fc>)
 8013f5c:	881a      	ldrh	r2, [r3, #0]
 8013f5e:	8c3b      	ldrh	r3, [r7, #32]
 8013f60:	1ad3      	subs	r3, r2, r3
 8013f62:	b29a      	uxth	r2, r3
 8013f64:	4b16      	ldr	r3, [pc, #88]	; (8013fc0 <ip4_reass+0x2fc>)
 8013f66:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	e03c      	b.n	8013fe6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	e03a      	b.n	8013fe6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8013f70:	bf00      	nop
 8013f72:	e000      	b.n	8013f76 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013f74:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d106      	bne.n	8013f8a <ip4_reass+0x2c6>
 8013f7c:	4b12      	ldr	r3, [pc, #72]	; (8013fc8 <ip4_reass+0x304>)
 8013f7e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013f82:	4914      	ldr	r1, [pc, #80]	; (8013fd4 <ip4_reass+0x310>)
 8013f84:	4812      	ldr	r0, [pc, #72]	; (8013fd0 <ip4_reass+0x30c>)
 8013f86:	f004 fa9b 	bl	80184c0 <iprintf>
  if (ipr->p == NULL) {
 8013f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d124      	bne.n	8013fdc <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013f92:	4b0c      	ldr	r3, [pc, #48]	; (8013fc4 <ip4_reass+0x300>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d006      	beq.n	8013faa <ip4_reass+0x2e6>
 8013f9c:	4b0a      	ldr	r3, [pc, #40]	; (8013fc8 <ip4_reass+0x304>)
 8013f9e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013fa2:	490d      	ldr	r1, [pc, #52]	; (8013fd8 <ip4_reass+0x314>)
 8013fa4:	480a      	ldr	r0, [pc, #40]	; (8013fd0 <ip4_reass+0x30c>)
 8013fa6:	f004 fa8b 	bl	80184c0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013faa:	2100      	movs	r1, #0
 8013fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fae:	f7ff fcf1 	bl	8013994 <ip_reass_dequeue_datagram>
 8013fb2:	e014      	b.n	8013fde <ip4_reass+0x31a>
    goto nullreturn;
 8013fb4:	bf00      	nop
 8013fb6:	e012      	b.n	8013fde <ip4_reass+0x31a>
    goto nullreturn;
 8013fb8:	bf00      	nop
 8013fba:	e010      	b.n	8013fde <ip4_reass+0x31a>
      goto nullreturn;
 8013fbc:	bf00      	nop
 8013fbe:	e00e      	b.n	8013fde <ip4_reass+0x31a>
 8013fc0:	2400b7f0 	.word	0x2400b7f0
 8013fc4:	2400b7ec 	.word	0x2400b7ec
 8013fc8:	0801e3d0 	.word	0x0801e3d0
 8013fcc:	0801e540 	.word	0x0801e540
 8013fd0:	0801e418 	.word	0x0801e418
 8013fd4:	0801e55c 	.word	0x0801e55c
 8013fd8:	0801e568 	.word	0x0801e568
  }

nullreturn:
 8013fdc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f7f7 fb5e 	bl	800b6a0 <pbuf_free>
  return NULL;
 8013fe4:	2300      	movs	r3, #0
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3738      	adds	r7, #56	; 0x38
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
 8013fee:	bf00      	nop

08013ff0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013ff4:	2005      	movs	r0, #5
 8013ff6:	f7f6 fc39 	bl	800a86c <memp_malloc>
 8013ffa:	4603      	mov	r3, r0
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	bd80      	pop	{r7, pc}

08014000 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d106      	bne.n	801401c <ip_frag_free_pbuf_custom_ref+0x1c>
 801400e:	4b07      	ldr	r3, [pc, #28]	; (801402c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014010:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014014:	4906      	ldr	r1, [pc, #24]	; (8014030 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014016:	4807      	ldr	r0, [pc, #28]	; (8014034 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014018:	f004 fa52 	bl	80184c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801401c:	6879      	ldr	r1, [r7, #4]
 801401e:	2005      	movs	r0, #5
 8014020:	f7f6 fc9a 	bl	800a958 <memp_free>
}
 8014024:	bf00      	nop
 8014026:	3708      	adds	r7, #8
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	0801e3d0 	.word	0x0801e3d0
 8014030:	0801e588 	.word	0x0801e588
 8014034:	0801e418 	.word	0x0801e418

08014038 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b084      	sub	sp, #16
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d106      	bne.n	8014058 <ipfrag_free_pbuf_custom+0x20>
 801404a:	4b11      	ldr	r3, [pc, #68]	; (8014090 <ipfrag_free_pbuf_custom+0x58>)
 801404c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014050:	4910      	ldr	r1, [pc, #64]	; (8014094 <ipfrag_free_pbuf_custom+0x5c>)
 8014052:	4811      	ldr	r0, [pc, #68]	; (8014098 <ipfrag_free_pbuf_custom+0x60>)
 8014054:	f004 fa34 	bl	80184c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014058:	68fa      	ldr	r2, [r7, #12]
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	429a      	cmp	r2, r3
 801405e:	d006      	beq.n	801406e <ipfrag_free_pbuf_custom+0x36>
 8014060:	4b0b      	ldr	r3, [pc, #44]	; (8014090 <ipfrag_free_pbuf_custom+0x58>)
 8014062:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014066:	490d      	ldr	r1, [pc, #52]	; (801409c <ipfrag_free_pbuf_custom+0x64>)
 8014068:	480b      	ldr	r0, [pc, #44]	; (8014098 <ipfrag_free_pbuf_custom+0x60>)
 801406a:	f004 fa29 	bl	80184c0 <iprintf>
  if (pcr->original != NULL) {
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	695b      	ldr	r3, [r3, #20]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d004      	beq.n	8014080 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	695b      	ldr	r3, [r3, #20]
 801407a:	4618      	mov	r0, r3
 801407c:	f7f7 fb10 	bl	800b6a0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014080:	68f8      	ldr	r0, [r7, #12]
 8014082:	f7ff ffbd 	bl	8014000 <ip_frag_free_pbuf_custom_ref>
}
 8014086:	bf00      	nop
 8014088:	3710      	adds	r7, #16
 801408a:	46bd      	mov	sp, r7
 801408c:	bd80      	pop	{r7, pc}
 801408e:	bf00      	nop
 8014090:	0801e3d0 	.word	0x0801e3d0
 8014094:	0801e594 	.word	0x0801e594
 8014098:	0801e418 	.word	0x0801e418
 801409c:	0801e5a0 	.word	0x0801e5a0

080140a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b094      	sub	sp, #80	; 0x50
 80140a4:	af02      	add	r7, sp, #8
 80140a6:	60f8      	str	r0, [r7, #12]
 80140a8:	60b9      	str	r1, [r7, #8]
 80140aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80140ac:	2300      	movs	r3, #0
 80140ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80140b6:	3b14      	subs	r3, #20
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	da00      	bge.n	80140be <ip4_frag+0x1e>
 80140bc:	3307      	adds	r3, #7
 80140be:	10db      	asrs	r3, r3, #3
 80140c0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80140c2:	2314      	movs	r3, #20
 80140c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	685b      	ldr	r3, [r3, #4]
 80140ca:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80140cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80140d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140d2:	781b      	ldrb	r3, [r3, #0]
 80140d4:	f003 030f 	and.w	r3, r3, #15
 80140d8:	b2db      	uxtb	r3, r3
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	b2db      	uxtb	r3, r3
 80140de:	2b14      	cmp	r3, #20
 80140e0:	d002      	beq.n	80140e8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80140e2:	f06f 0305 	mvn.w	r3, #5
 80140e6:	e110      	b.n	801430a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	895b      	ldrh	r3, [r3, #10]
 80140ec:	2b13      	cmp	r3, #19
 80140ee:	d809      	bhi.n	8014104 <ip4_frag+0x64>
 80140f0:	4b88      	ldr	r3, [pc, #544]	; (8014314 <ip4_frag+0x274>)
 80140f2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80140f6:	4988      	ldr	r1, [pc, #544]	; (8014318 <ip4_frag+0x278>)
 80140f8:	4888      	ldr	r0, [pc, #544]	; (801431c <ip4_frag+0x27c>)
 80140fa:	f004 f9e1 	bl	80184c0 <iprintf>
 80140fe:	f06f 0305 	mvn.w	r3, #5
 8014102:	e102      	b.n	801430a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014106:	88db      	ldrh	r3, [r3, #6]
 8014108:	b29b      	uxth	r3, r3
 801410a:	4618      	mov	r0, r3
 801410c:	f7f5 feda 	bl	8009ec4 <lwip_htons>
 8014110:	4603      	mov	r3, r0
 8014112:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014114:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014116:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801411a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801411e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014124:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	891b      	ldrh	r3, [r3, #8]
 801412a:	3b14      	subs	r3, #20
 801412c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014130:	e0e1      	b.n	80142f6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014132:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014134:	00db      	lsls	r3, r3, #3
 8014136:	b29b      	uxth	r3, r3
 8014138:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801413c:	4293      	cmp	r3, r2
 801413e:	bf28      	it	cs
 8014140:	4613      	movcs	r3, r2
 8014142:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014144:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014148:	2114      	movs	r1, #20
 801414a:	200e      	movs	r0, #14
 801414c:	f7f6 ffc4 	bl	800b0d8 <pbuf_alloc>
 8014150:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014154:	2b00      	cmp	r3, #0
 8014156:	f000 80d5 	beq.w	8014304 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415c:	895b      	ldrh	r3, [r3, #10]
 801415e:	2b13      	cmp	r3, #19
 8014160:	d806      	bhi.n	8014170 <ip4_frag+0xd0>
 8014162:	4b6c      	ldr	r3, [pc, #432]	; (8014314 <ip4_frag+0x274>)
 8014164:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014168:	496d      	ldr	r1, [pc, #436]	; (8014320 <ip4_frag+0x280>)
 801416a:	486c      	ldr	r0, [pc, #432]	; (801431c <ip4_frag+0x27c>)
 801416c:	f004 f9a8 	bl	80184c0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	2214      	movs	r2, #20
 8014176:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014178:	4618      	mov	r0, r3
 801417a:	f004 f8c7 	bl	801830c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014184:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014186:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801418a:	e064      	b.n	8014256 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	895a      	ldrh	r2, [r3, #10]
 8014190:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014192:	1ad3      	subs	r3, r2, r3
 8014194:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	895b      	ldrh	r3, [r3, #10]
 801419a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801419c:	429a      	cmp	r2, r3
 801419e:	d906      	bls.n	80141ae <ip4_frag+0x10e>
 80141a0:	4b5c      	ldr	r3, [pc, #368]	; (8014314 <ip4_frag+0x274>)
 80141a2:	f240 322d 	movw	r2, #813	; 0x32d
 80141a6:	495f      	ldr	r1, [pc, #380]	; (8014324 <ip4_frag+0x284>)
 80141a8:	485c      	ldr	r0, [pc, #368]	; (801431c <ip4_frag+0x27c>)
 80141aa:	f004 f989 	bl	80184c0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80141ae:	8bfa      	ldrh	r2, [r7, #30]
 80141b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80141b4:	4293      	cmp	r3, r2
 80141b6:	bf28      	it	cs
 80141b8:	4613      	movcs	r3, r2
 80141ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80141be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d105      	bne.n	80141d2 <ip4_frag+0x132>
        poff = 0;
 80141c6:	2300      	movs	r3, #0
 80141c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	60fb      	str	r3, [r7, #12]
        continue;
 80141d0:	e041      	b.n	8014256 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80141d2:	f7ff ff0d 	bl	8013ff0 <ip_frag_alloc_pbuf_custom_ref>
 80141d6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80141d8:	69bb      	ldr	r3, [r7, #24]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d103      	bne.n	80141e6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80141de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141e0:	f7f7 fa5e 	bl	800b6a0 <pbuf_free>
        goto memerr;
 80141e4:	e08f      	b.n	8014306 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80141e6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80141ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80141ee:	4413      	add	r3, r2
 80141f0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80141f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80141f8:	9201      	str	r2, [sp, #4]
 80141fa:	9300      	str	r3, [sp, #0]
 80141fc:	4603      	mov	r3, r0
 80141fe:	2241      	movs	r2, #65	; 0x41
 8014200:	2000      	movs	r0, #0
 8014202:	f7f7 f893 	bl	800b32c <pbuf_alloced_custom>
 8014206:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d106      	bne.n	801421c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801420e:	69b8      	ldr	r0, [r7, #24]
 8014210:	f7ff fef6 	bl	8014000 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014216:	f7f7 fa43 	bl	800b6a0 <pbuf_free>
        goto memerr;
 801421a:	e074      	b.n	8014306 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801421c:	68f8      	ldr	r0, [r7, #12]
 801421e:	f7f7 fae5 	bl	800b7ec <pbuf_ref>
      pcr->original = p;
 8014222:	69bb      	ldr	r3, [r7, #24]
 8014224:	68fa      	ldr	r2, [r7, #12]
 8014226:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014228:	69bb      	ldr	r3, [r7, #24]
 801422a:	4a3f      	ldr	r2, [pc, #252]	; (8014328 <ip4_frag+0x288>)
 801422c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801422e:	6979      	ldr	r1, [r7, #20]
 8014230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014232:	f7f7 fb03 	bl	800b83c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014236:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801423a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801423e:	1ad3      	subs	r3, r2, r3
 8014240:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014244:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014248:	2b00      	cmp	r3, #0
 801424a:	d004      	beq.n	8014256 <ip4_frag+0x1b6>
        poff = 0;
 801424c:	2300      	movs	r3, #0
 801424e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014256:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801425a:	2b00      	cmp	r3, #0
 801425c:	d196      	bne.n	801418c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801425e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014260:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014264:	4413      	add	r3, r2
 8014266:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801426c:	f1a3 0213 	sub.w	r2, r3, #19
 8014270:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014274:	429a      	cmp	r2, r3
 8014276:	bfcc      	ite	gt
 8014278:	2301      	movgt	r3, #1
 801427a:	2300      	movle	r3, #0
 801427c:	b2db      	uxtb	r3, r3
 801427e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014280:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014284:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014288:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801428a:	6a3b      	ldr	r3, [r7, #32]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d002      	beq.n	8014296 <ip4_frag+0x1f6>
 8014290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014292:	2b00      	cmp	r3, #0
 8014294:	d003      	beq.n	801429e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014296:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014298:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801429c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801429e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7f5 fe0f 	bl	8009ec4 <lwip_htons>
 80142a6:	4603      	mov	r3, r0
 80142a8:	461a      	mov	r2, r3
 80142aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80142ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80142b0:	3314      	adds	r3, #20
 80142b2:	b29b      	uxth	r3, r3
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7f5 fe05 	bl	8009ec4 <lwip_htons>
 80142ba:	4603      	mov	r3, r0
 80142bc:	461a      	mov	r2, r3
 80142be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80142c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c4:	2200      	movs	r2, #0
 80142c6:	729a      	strb	r2, [r3, #10]
 80142c8:	2200      	movs	r2, #0
 80142ca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	695b      	ldr	r3, [r3, #20]
 80142d0:	687a      	ldr	r2, [r7, #4]
 80142d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80142d4:	68b8      	ldr	r0, [r7, #8]
 80142d6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80142d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142da:	f7f7 f9e1 	bl	800b6a0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80142de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80142e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80142e4:	1ad3      	subs	r3, r2, r3
 80142e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80142ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80142ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80142f0:	4413      	add	r3, r2
 80142f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80142f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	f47f af19 	bne.w	8014132 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014300:	2300      	movs	r3, #0
 8014302:	e002      	b.n	801430a <ip4_frag+0x26a>
      goto memerr;
 8014304:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801430a:	4618      	mov	r0, r3
 801430c:	3748      	adds	r7, #72	; 0x48
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}
 8014312:	bf00      	nop
 8014314:	0801e3d0 	.word	0x0801e3d0
 8014318:	0801e5ac 	.word	0x0801e5ac
 801431c:	0801e418 	.word	0x0801e418
 8014320:	0801e5c8 	.word	0x0801e5c8
 8014324:	0801e5e8 	.word	0x0801e5e8
 8014328:	08014039 	.word	0x08014039

0801432c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b086      	sub	sp, #24
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
 8014334:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014336:	230e      	movs	r3, #14
 8014338:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	895b      	ldrh	r3, [r3, #10]
 801433e:	2b0e      	cmp	r3, #14
 8014340:	d96e      	bls.n	8014420 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	7bdb      	ldrb	r3, [r3, #15]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d106      	bne.n	8014358 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801434a:	683b      	ldr	r3, [r7, #0]
 801434c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014350:	3301      	adds	r3, #1
 8014352:	b2da      	uxtb	r2, r3
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	685b      	ldr	r3, [r3, #4]
 801435c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	7b1a      	ldrb	r2, [r3, #12]
 8014362:	7b5b      	ldrb	r3, [r3, #13]
 8014364:	021b      	lsls	r3, r3, #8
 8014366:	4313      	orrs	r3, r2
 8014368:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801436a:	693b      	ldr	r3, [r7, #16]
 801436c:	781b      	ldrb	r3, [r3, #0]
 801436e:	f003 0301 	and.w	r3, r3, #1
 8014372:	2b00      	cmp	r3, #0
 8014374:	d023      	beq.n	80143be <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014376:	693b      	ldr	r3, [r7, #16]
 8014378:	781b      	ldrb	r3, [r3, #0]
 801437a:	2b01      	cmp	r3, #1
 801437c:	d10f      	bne.n	801439e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801437e:	693b      	ldr	r3, [r7, #16]
 8014380:	785b      	ldrb	r3, [r3, #1]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d11b      	bne.n	80143be <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801438a:	2b5e      	cmp	r3, #94	; 0x5e
 801438c:	d117      	bne.n	80143be <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	7b5b      	ldrb	r3, [r3, #13]
 8014392:	f043 0310 	orr.w	r3, r3, #16
 8014396:	b2da      	uxtb	r2, r3
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	735a      	strb	r2, [r3, #13]
 801439c:	e00f      	b.n	80143be <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801439e:	693b      	ldr	r3, [r7, #16]
 80143a0:	2206      	movs	r2, #6
 80143a2:	4928      	ldr	r1, [pc, #160]	; (8014444 <ethernet_input+0x118>)
 80143a4:	4618      	mov	r0, r3
 80143a6:	f003 ffa3 	bl	80182f0 <memcmp>
 80143aa:	4603      	mov	r3, r0
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d106      	bne.n	80143be <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	7b5b      	ldrb	r3, [r3, #13]
 80143b4:	f043 0308 	orr.w	r3, r3, #8
 80143b8:	b2da      	uxtb	r2, r3
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80143be:	89fb      	ldrh	r3, [r7, #14]
 80143c0:	2b08      	cmp	r3, #8
 80143c2:	d003      	beq.n	80143cc <ethernet_input+0xa0>
 80143c4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80143c8:	d014      	beq.n	80143f4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80143ca:	e032      	b.n	8014432 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80143cc:	683b      	ldr	r3, [r7, #0]
 80143ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143d2:	f003 0308 	and.w	r3, r3, #8
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d024      	beq.n	8014424 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80143da:	8afb      	ldrh	r3, [r7, #22]
 80143dc:	4619      	mov	r1, r3
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f7f7 f8d8 	bl	800b594 <pbuf_remove_header>
 80143e4:	4603      	mov	r3, r0
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d11e      	bne.n	8014428 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80143ea:	6839      	ldr	r1, [r7, #0]
 80143ec:	6878      	ldr	r0, [r7, #4]
 80143ee:	f7fe ff27 	bl	8013240 <ip4_input>
      break;
 80143f2:	e013      	b.n	801441c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143fa:	f003 0308 	and.w	r3, r3, #8
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d014      	beq.n	801442c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014402:	8afb      	ldrh	r3, [r7, #22]
 8014404:	4619      	mov	r1, r3
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f7f7 f8c4 	bl	800b594 <pbuf_remove_header>
 801440c:	4603      	mov	r3, r0
 801440e:	2b00      	cmp	r3, #0
 8014410:	d10e      	bne.n	8014430 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014412:	6839      	ldr	r1, [r7, #0]
 8014414:	6878      	ldr	r0, [r7, #4]
 8014416:	f7fe f8c7 	bl	80125a8 <etharp_input>
      break;
 801441a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801441c:	2300      	movs	r3, #0
 801441e:	e00c      	b.n	801443a <ethernet_input+0x10e>
    goto free_and_return;
 8014420:	bf00      	nop
 8014422:	e006      	b.n	8014432 <ethernet_input+0x106>
        goto free_and_return;
 8014424:	bf00      	nop
 8014426:	e004      	b.n	8014432 <ethernet_input+0x106>
        goto free_and_return;
 8014428:	bf00      	nop
 801442a:	e002      	b.n	8014432 <ethernet_input+0x106>
        goto free_and_return;
 801442c:	bf00      	nop
 801442e:	e000      	b.n	8014432 <ethernet_input+0x106>
        goto free_and_return;
 8014430:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014432:	6878      	ldr	r0, [r7, #4]
 8014434:	f7f7 f934 	bl	800b6a0 <pbuf_free>
  return ERR_OK;
 8014438:	2300      	movs	r3, #0
}
 801443a:	4618      	mov	r0, r3
 801443c:	3718      	adds	r7, #24
 801443e:	46bd      	mov	sp, r7
 8014440:	bd80      	pop	{r7, pc}
 8014442:	bf00      	nop
 8014444:	0801ec28 	.word	0x0801ec28

08014448 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014448:	b580      	push	{r7, lr}
 801444a:	b086      	sub	sp, #24
 801444c:	af00      	add	r7, sp, #0
 801444e:	60f8      	str	r0, [r7, #12]
 8014450:	60b9      	str	r1, [r7, #8]
 8014452:	607a      	str	r2, [r7, #4]
 8014454:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014456:	8c3b      	ldrh	r3, [r7, #32]
 8014458:	4618      	mov	r0, r3
 801445a:	f7f5 fd33 	bl	8009ec4 <lwip_htons>
 801445e:	4603      	mov	r3, r0
 8014460:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014462:	210e      	movs	r1, #14
 8014464:	68b8      	ldr	r0, [r7, #8]
 8014466:	f7f7 f885 	bl	800b574 <pbuf_add_header>
 801446a:	4603      	mov	r3, r0
 801446c:	2b00      	cmp	r3, #0
 801446e:	d125      	bne.n	80144bc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014470:	68bb      	ldr	r3, [r7, #8]
 8014472:	685b      	ldr	r3, [r3, #4]
 8014474:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	8afa      	ldrh	r2, [r7, #22]
 801447a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801447c:	693b      	ldr	r3, [r7, #16]
 801447e:	2206      	movs	r2, #6
 8014480:	6839      	ldr	r1, [r7, #0]
 8014482:	4618      	mov	r0, r3
 8014484:	f003 ff42 	bl	801830c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014488:	693b      	ldr	r3, [r7, #16]
 801448a:	3306      	adds	r3, #6
 801448c:	2206      	movs	r2, #6
 801448e:	6879      	ldr	r1, [r7, #4]
 8014490:	4618      	mov	r0, r3
 8014492:	f003 ff3b 	bl	801830c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801449c:	2b06      	cmp	r3, #6
 801449e:	d006      	beq.n	80144ae <ethernet_output+0x66>
 80144a0:	4b0a      	ldr	r3, [pc, #40]	; (80144cc <ethernet_output+0x84>)
 80144a2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80144a6:	490a      	ldr	r1, [pc, #40]	; (80144d0 <ethernet_output+0x88>)
 80144a8:	480a      	ldr	r0, [pc, #40]	; (80144d4 <ethernet_output+0x8c>)
 80144aa:	f004 f809 	bl	80184c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	699b      	ldr	r3, [r3, #24]
 80144b2:	68b9      	ldr	r1, [r7, #8]
 80144b4:	68f8      	ldr	r0, [r7, #12]
 80144b6:	4798      	blx	r3
 80144b8:	4603      	mov	r3, r0
 80144ba:	e002      	b.n	80144c2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80144bc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80144be:	f06f 0301 	mvn.w	r3, #1
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	3718      	adds	r7, #24
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bd80      	pop	{r7, pc}
 80144ca:	bf00      	nop
 80144cc:	0801e5f8 	.word	0x0801e5f8
 80144d0:	0801e630 	.word	0x0801e630
 80144d4:	0801e664 	.word	0x0801e664

080144d8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	2200      	movs	r2, #0
 80144e6:	2104      	movs	r1, #4
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7f2 f877 	bl	80065dc <osMessageQueueNew>
 80144ee:	4602      	mov	r2, r0
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d102      	bne.n	8014502 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80144fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014500:	e000      	b.n	8014504 <sys_mbox_new+0x2c>

  return ERR_OK;
 8014502:	2300      	movs	r3, #0
}
 8014504:	4618      	mov	r0, r3
 8014506:	3708      	adds	r7, #8
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}

0801450c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b084      	sub	sp, #16
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
 8014514:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	6818      	ldr	r0, [r3, #0]
 801451a:	4639      	mov	r1, r7
 801451c:	2300      	movs	r3, #0
 801451e:	2200      	movs	r2, #0
 8014520:	f7f2 f8d0 	bl	80066c4 <osMessageQueuePut>
 8014524:	4603      	mov	r3, r0
 8014526:	2b00      	cmp	r3, #0
 8014528:	d102      	bne.n	8014530 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801452a:	2300      	movs	r3, #0
 801452c:	73fb      	strb	r3, [r7, #15]
 801452e:	e001      	b.n	8014534 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014530:	23ff      	movs	r3, #255	; 0xff
 8014532:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014534:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014538:	4618      	mov	r0, r3
 801453a:	3710      	adds	r7, #16
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}

08014540 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b086      	sub	sp, #24
 8014544:	af00      	add	r7, sp, #0
 8014546:	60f8      	str	r0, [r7, #12]
 8014548:	60b9      	str	r1, [r7, #8]
 801454a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801454c:	f7f1 fd56 	bl	8005ffc <osKernelGetTickCount>
 8014550:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d013      	beq.n	8014580 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	6818      	ldr	r0, [r3, #0]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2200      	movs	r2, #0
 8014560:	68b9      	ldr	r1, [r7, #8]
 8014562:	f7f2 f90f 	bl	8006784 <osMessageQueueGet>
 8014566:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d105      	bne.n	801457a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801456e:	f7f1 fd45 	bl	8005ffc <osKernelGetTickCount>
 8014572:	4602      	mov	r2, r0
 8014574:	697b      	ldr	r3, [r7, #20]
 8014576:	1ad3      	subs	r3, r2, r3
 8014578:	e00f      	b.n	801459a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801457a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801457e:	e00c      	b.n	801459a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	6818      	ldr	r0, [r3, #0]
 8014584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014588:	2200      	movs	r2, #0
 801458a:	68b9      	ldr	r1, [r7, #8]
 801458c:	f7f2 f8fa 	bl	8006784 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8014590:	f7f1 fd34 	bl	8005ffc <osKernelGetTickCount>
 8014594:	4602      	mov	r2, r0
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801459a:	4618      	mov	r0, r3
 801459c:	3718      	adds	r7, #24
 801459e:	46bd      	mov	sp, r7
 80145a0:	bd80      	pop	{r7, pc}

080145a2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80145a2:	b480      	push	{r7}
 80145a4:	b083      	sub	sp, #12
 80145a6:	af00      	add	r7, sp, #0
 80145a8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d101      	bne.n	80145b6 <sys_mbox_valid+0x14>
    return 0;
 80145b2:	2300      	movs	r3, #0
 80145b4:	e000      	b.n	80145b8 <sys_mbox_valid+0x16>
  else
    return 1;
 80145b6:	2301      	movs	r3, #1
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	370c      	adds	r7, #12
 80145bc:	46bd      	mov	sp, r7
 80145be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c2:	4770      	bx	lr

080145c4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80145c8:	2000      	movs	r0, #0
 80145ca:	f7f1 fdda 	bl	8006182 <osMutexNew>
 80145ce:	4603      	mov	r3, r0
 80145d0:	4a01      	ldr	r2, [pc, #4]	; (80145d8 <sys_init+0x14>)
 80145d2:	6013      	str	r3, [r2, #0]
#endif
}
 80145d4:	bf00      	nop
 80145d6:	bd80      	pop	{r7, pc}
 80145d8:	2400ee60 	.word	0x2400ee60

080145dc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80145e4:	2000      	movs	r0, #0
 80145e6:	f7f1 fdcc 	bl	8006182 <osMutexNew>
 80145ea:	4602      	mov	r2, r0
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d102      	bne.n	80145fe <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80145f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145fc:	e000      	b.n	8014600 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80145fe:	2300      	movs	r3, #0
}
 8014600:	4618      	mov	r0, r3
 8014602:	3708      	adds	r7, #8
 8014604:	46bd      	mov	sp, r7
 8014606:	bd80      	pop	{r7, pc}

08014608 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014618:	4618      	mov	r0, r3
 801461a:	f7f1 fe38 	bl	800628e <osMutexAcquire>
#endif
}
 801461e:	bf00      	nop
 8014620:	3708      	adds	r7, #8
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}

08014626 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014626:	b580      	push	{r7, lr}
 8014628:	b082      	sub	sp, #8
 801462a:	af00      	add	r7, sp, #0
 801462c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	4618      	mov	r0, r3
 8014634:	f7f1 fe76 	bl	8006324 <osMutexRelease>
}
 8014638:	bf00      	nop
 801463a:	3708      	adds	r7, #8
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}

08014640 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b08e      	sub	sp, #56	; 0x38
 8014644:	af00      	add	r7, sp, #0
 8014646:	60f8      	str	r0, [r7, #12]
 8014648:	60b9      	str	r1, [r7, #8]
 801464a:	607a      	str	r2, [r7, #4]
 801464c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801464e:	f107 0314 	add.w	r3, r7, #20
 8014652:	2224      	movs	r2, #36	; 0x24
 8014654:	2100      	movs	r1, #0
 8014656:	4618      	mov	r0, r3
 8014658:	f003 fe80 	bl	801835c <memset>
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	617b      	str	r3, [r7, #20]
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	62bb      	str	r3, [r7, #40]	; 0x28
 8014664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014666:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8014668:	f107 0314 	add.w	r3, r7, #20
 801466c:	461a      	mov	r2, r3
 801466e:	6879      	ldr	r1, [r7, #4]
 8014670:	68b8      	ldr	r0, [r7, #8]
 8014672:	f7f1 fcd8 	bl	8006026 <osThreadNew>
 8014676:	4603      	mov	r3, r0
#endif
}
 8014678:	4618      	mov	r0, r3
 801467a:	3738      	adds	r7, #56	; 0x38
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}

08014680 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8014684:	4b04      	ldr	r3, [pc, #16]	; (8014698 <sys_arch_protect+0x18>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801468c:	4618      	mov	r0, r3
 801468e:	f7f1 fdfe 	bl	800628e <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8014692:	2301      	movs	r3, #1
}
 8014694:	4618      	mov	r0, r3
 8014696:	bd80      	pop	{r7, pc}
 8014698:	2400ee60 	.word	0x2400ee60

0801469c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b082      	sub	sp, #8
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80146a4:	4b04      	ldr	r3, [pc, #16]	; (80146b8 <sys_arch_unprotect+0x1c>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7f1 fe3b 	bl	8006324 <osMutexRelease>
}
 80146ae:	bf00      	nop
 80146b0:	3708      	adds	r7, #8
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}
 80146b6:	bf00      	nop
 80146b8:	2400ee60 	.word	0x2400ee60

080146bc <main_client_connection_close>:
char TCPMainBuffer[MAX_LEN_TCP_MESSAGE];
char *ptrMainBuffer=TCPMainBuffer;

struct tcp_pcb *main_pcb;
int ReadyMainConnect = 0;
void main_client_connection_close(struct tcp_pcb *tpcb) {
 80146bc:	b580      	push	{r7, lr}
 80146be:	b082      	sub	sp, #8
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
	/* remove callbacks */
	tcp_arg(tpcb, NULL);
 80146c4:	2100      	movs	r1, #0
 80146c6:	6878      	ldr	r0, [r7, #4]
 80146c8:	f7f8 fdcc 	bl	800d264 <tcp_arg>
	tcp_recv(tpcb, NULL);
 80146cc:	2100      	movs	r1, #0
 80146ce:	6878      	ldr	r0, [r7, #4]
 80146d0:	f7f8 fdda 	bl	800d288 <tcp_recv>
	tcp_err(tpcb, NULL);
 80146d4:	2100      	movs	r1, #0
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f7f8 fdf8 	bl	800d2cc <tcp_err>
	/* close tcp connection */
	tcp_close(tpcb);
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f7f7 fc99 	bl	800c014 <tcp_close>
	ReadyMainConnect = 0;
 80146e2:	4b03      	ldr	r3, [pc, #12]	; (80146f0 <main_client_connection_close+0x34>)
 80146e4:	2200      	movs	r2, #0
 80146e6:	601a      	str	r2, [r3, #0]
}
 80146e8:	bf00      	nop
 80146ea:	3708      	adds	r7, #8
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}
 80146f0:	2400b7f4 	.word	0x2400b7f4

080146f4 <main_server_error>:
//Callback на ошибки сервера
void main_server_error(void *arg, err_t err) {
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	460b      	mov	r3, r1
 80146fe:	70fb      	strb	r3, [r7, #3]
	LWIP_UNUSED_ARG(err);
	Debug_Message(LOG_FATAL, "Ошибка сервера");
 8014700:	4906      	ldr	r1, [pc, #24]	; (801471c <main_server_error+0x28>)
 8014702:	2000      	movs	r0, #0
 8014704:	f7ec fd56 	bl	80011b4 <Debug_Message>
	main_client_connection_close(main_pcb);
 8014708:	4b05      	ldr	r3, [pc, #20]	; (8014720 <main_server_error+0x2c>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	4618      	mov	r0, r3
 801470e:	f7ff ffd5 	bl	80146bc <main_client_connection_close>

}
 8014712:	bf00      	nop
 8014714:	3708      	adds	r7, #8
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}
 801471a:	bf00      	nop
 801471c:	0801e68c 	.word	0x0801e68c
 8014720:	2400ee64 	.word	0x2400ee64

08014724 <main_client_recv>:
//Callback на прием от TCP
err_t main_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p,
		err_t err) {
 8014724:	b580      	push	{r7, lr}
 8014726:	b084      	sub	sp, #16
 8014728:	af00      	add	r7, sp, #0
 801472a:	60f8      	str	r0, [r7, #12]
 801472c:	60b9      	str	r1, [r7, #8]
 801472e:	607a      	str	r2, [r7, #4]
 8014730:	70fb      	strb	r3, [r7, #3]
	err_t ret_err;

	/* Если передали пустой фрейм то это keepalive */
	if (p == NULL) {
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d101      	bne.n	801473c <main_client_recv+0x18>
		return ERR_OK;
 8014738:	2300      	movs	r3, #0
 801473a:	e05a      	b.n	80147f2 <main_client_recv+0xce>
	}
	/* else : a non empty frame was received from server but for some reason err != ERR_OK */
	if (err != ERR_OK) {
 801473c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d008      	beq.n	8014756 <main_client_recv+0x32>
		/* free received pbuf*/
		if (p != NULL) {
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d002      	beq.n	8014750 <main_client_recv+0x2c>
			pbuf_free(p);
 801474a:	6878      	ldr	r0, [r7, #4]
 801474c:	f7f6 ffa8 	bl	800b6a0 <pbuf_free>
		}
		return err;
 8014750:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014754:	e04d      	b.n	80147f2 <main_client_recv+0xce>
	}
	if((ptrMainBuffer+p->len)>(&TCPMainBuffer+MAX_LEN_TCP_MESSAGE-1)) {
 8014756:	4b29      	ldr	r3, [pc, #164]	; (80147fc <main_client_recv+0xd8>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	8952      	ldrh	r2, [r2, #10]
 801475e:	4413      	add	r3, r2
 8014760:	4a27      	ldr	r2, [pc, #156]	; (8014800 <main_client_recv+0xdc>)
 8014762:	4293      	cmp	r3, r2
 8014764:	d904      	bls.n	8014770 <main_client_recv+0x4c>
		Debug_Message(LOG_FATAL, "Нужно увеличить длину строки TCP");
 8014766:	4927      	ldr	r1, [pc, #156]	; (8014804 <main_client_recv+0xe0>)
 8014768:	2000      	movs	r0, #0
 801476a:	f7ec fd23 	bl	80011b4 <Debug_Message>
 801476e:	e013      	b.n	8014798 <main_client_recv+0x74>
	}else {
		memcpy(ptrMainBuffer,p->payload,p->len);
 8014770:	4b22      	ldr	r3, [pc, #136]	; (80147fc <main_client_recv+0xd8>)
 8014772:	6818      	ldr	r0, [r3, #0]
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	6859      	ldr	r1, [r3, #4]
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	895b      	ldrh	r3, [r3, #10]
 801477c:	461a      	mov	r2, r3
 801477e:	f003 fdc5 	bl	801830c <memcpy>
		ptrMainBuffer+=p->len;
 8014782:	4b1e      	ldr	r3, [pc, #120]	; (80147fc <main_client_recv+0xd8>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	8952      	ldrh	r2, [r2, #10]
 801478a:	4413      	add	r3, r2
 801478c:	4a1b      	ldr	r2, [pc, #108]	; (80147fc <main_client_recv+0xd8>)
 801478e:	6013      	str	r3, [r2, #0]
		*ptrMainBuffer=0;
 8014790:	4b1a      	ldr	r3, [pc, #104]	; (80147fc <main_client_recv+0xd8>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	2200      	movs	r2, #0
 8014796:	701a      	strb	r2, [r3, #0]
	}
	if (p->len >2) {
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	895b      	ldrh	r3, [r3, #10]
 801479c:	2b02      	cmp	r3, #2
 801479e:	d91e      	bls.n	80147de <main_client_recv+0xba>
		if(*(ptrMainBuffer-2)=='\n'&& *(ptrMainBuffer-1)=='\r') {
 80147a0:	4b16      	ldr	r3, [pc, #88]	; (80147fc <main_client_recv+0xd8>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	3b02      	subs	r3, #2
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	2b0a      	cmp	r3, #10
 80147aa:	d118      	bne.n	80147de <main_client_recv+0xba>
 80147ac:	4b13      	ldr	r3, [pc, #76]	; (80147fc <main_client_recv+0xd8>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	3b01      	subs	r3, #1
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	2b0d      	cmp	r3, #13
 80147b6:	d112      	bne.n	80147de <main_client_recv+0xba>
			// Передача строки завершена
			*(ptrMainBuffer-2)=0;
 80147b8:	4b10      	ldr	r3, [pc, #64]	; (80147fc <main_client_recv+0xd8>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	3b02      	subs	r3, #2
 80147be:	2200      	movs	r2, #0
 80147c0:	701a      	strb	r2, [r3, #0]
			ptrMainBuffer=TCPMainBuffer;
 80147c2:	4b0e      	ldr	r3, [pc, #56]	; (80147fc <main_client_recv+0xd8>)
 80147c4:	4a10      	ldr	r2, [pc, #64]	; (8014808 <main_client_recv+0xe4>)
 80147c6:	601a      	str	r2, [r3, #0]
			tcp_recved(tpcb, p->tot_len);
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	891b      	ldrh	r3, [r3, #8]
 80147cc:	4619      	mov	r1, r3
 80147ce:	68b8      	ldr	r0, [r7, #8]
 80147d0:	f7f7 fd70 	bl	800c2b4 <tcp_recved>
			pbuf_free(p);
 80147d4:	6878      	ldr	r0, [r7, #4]
 80147d6:	f7f6 ff63 	bl	800b6a0 <pbuf_free>
//			mainRecieve();
			return ERR_OK;
 80147da:	2300      	movs	r3, #0
 80147dc:	e009      	b.n	80147f2 <main_client_recv+0xce>
		}
	}
	tcp_recved(tpcb, p->tot_len);
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	891b      	ldrh	r3, [r3, #8]
 80147e2:	4619      	mov	r1, r3
 80147e4:	68b8      	ldr	r0, [r7, #8]
 80147e6:	f7f7 fd65 	bl	800c2b4 <tcp_recved>
	pbuf_free(p);
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f7f6 ff58 	bl	800b6a0 <pbuf_free>

	/* Acknowledge data reception */
	return ERR_OK;
 80147f0:	2300      	movs	r3, #0
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	3710      	adds	r7, #16
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}
 80147fa:	bf00      	nop
 80147fc:	24000034 	.word	0x24000034
 8014800:	2440e684 	.word	0x2440e684
 8014804:	0801e6a8 	.word	0x0801e6a8
 8014808:	2400ee84 	.word	0x2400ee84

0801480c <main_client_connected>:

//Callback на соединение с сервером
err_t main_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err) {
 801480c:	b580      	push	{r7, lr}
 801480e:	b084      	sub	sp, #16
 8014810:	af00      	add	r7, sp, #0
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	60b9      	str	r1, [r7, #8]
 8014816:	4613      	mov	r3, r2
 8014818:	71fb      	strb	r3, [r7, #7]
	if (err == ERR_OK) {
 801481a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d114      	bne.n	801484c <main_client_connected+0x40>
		tcp_arg(tpcb, NULL);
 8014822:	2100      	movs	r1, #0
 8014824:	68b8      	ldr	r0, [r7, #8]
 8014826:	f7f8 fd1d 	bl	800d264 <tcp_arg>
		/* initialize LwIP tcp_recv callback function */
		tcp_recv(tpcb, main_client_recv);
 801482a:	490f      	ldr	r1, [pc, #60]	; (8014868 <main_client_connected+0x5c>)
 801482c:	68b8      	ldr	r0, [r7, #8]
 801482e:	f7f8 fd2b 	bl	800d288 <tcp_recv>
		tcp_err(tpcb, main_server_error);
 8014832:	490e      	ldr	r1, [pc, #56]	; (801486c <main_client_connected+0x60>)
 8014834:	68b8      	ldr	r0, [r7, #8]
 8014836:	f7f8 fd49 	bl	800d2cc <tcp_err>
		ReadyMainConnect = 1;
 801483a:	4b0d      	ldr	r3, [pc, #52]	; (8014870 <main_client_connected+0x64>)
 801483c:	2201      	movs	r2, #1
 801483e:	601a      	str	r2, [r3, #0]
		Debug_Message(LOG_INFO, "Подключение по основному каналу успешно");
 8014840:	490c      	ldr	r1, [pc, #48]	; (8014874 <main_client_connected+0x68>)
 8014842:	2009      	movs	r0, #9
 8014844:	f7ec fcb6 	bl	80011b4 <Debug_Message>
		return ERR_OK;
 8014848:	2300      	movs	r3, #0
 801484a:	e008      	b.n	801485e <main_client_connected+0x52>
	} else {
		/* close connection */
		Debug_Message(LOG_ERROR, "Подключение по основному каналу нет ответа");
 801484c:	490a      	ldr	r1, [pc, #40]	; (8014878 <main_client_connected+0x6c>)
 801484e:	2001      	movs	r0, #1
 8014850:	f7ec fcb0 	bl	80011b4 <Debug_Message>
		main_client_connection_close(tpcb);
 8014854:	68b8      	ldr	r0, [r7, #8]
 8014856:	f7ff ff31 	bl	80146bc <main_client_connection_close>
	}
	return err;
 801485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801485e:	4618      	mov	r0, r3
 8014860:	3710      	adds	r7, #16
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}
 8014866:	bf00      	nop
 8014868:	08014725 	.word	0x08014725
 801486c:	080146f5 	.word	0x080146f5
 8014870:	2400b7f4 	.word	0x2400b7f4
 8014874:	0801e6e4 	.word	0x0801e6e4
 8014878:	0801e730 	.word	0x0801e730

0801487c <TCPMainLoop>:
void TCPMainLoop(void) {
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
	TCPMainReadSetup();
 8014882:	f000 f82f 	bl	80148e4 <TCPMainReadSetup>
	main_pcb = tcp_new();
 8014886:	f7f8 fce5 	bl	800d254 <tcp_new>
 801488a:	4603      	mov	r3, r0
 801488c:	461a      	mov	r2, r3
 801488e:	4b10      	ldr	r3, [pc, #64]	; (80148d0 <TCPMainLoop+0x54>)
 8014890:	601a      	str	r2, [r3, #0]
	err_t err;
	if (main_pcb != NULL) {
 8014892:	4b0f      	ldr	r3, [pc, #60]	; (80148d0 <TCPMainLoop+0x54>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d00a      	beq.n	80148b0 <TCPMainLoop+0x34>
		/* connect to destination address/port */
		err=tcp_connect(main_pcb, &TCPMainSetup.ipAddr, TCPMainSetup.port,
 801489a:	4b0d      	ldr	r3, [pc, #52]	; (80148d0 <TCPMainLoop+0x54>)
 801489c:	6818      	ldr	r0, [r3, #0]
 801489e:	4b0d      	ldr	r3, [pc, #52]	; (80148d4 <TCPMainLoop+0x58>)
 80148a0:	695a      	ldr	r2, [r3, #20]
 80148a2:	4b0d      	ldr	r3, [pc, #52]	; (80148d8 <TCPMainLoop+0x5c>)
 80148a4:	490b      	ldr	r1, [pc, #44]	; (80148d4 <TCPMainLoop+0x58>)
 80148a6:	f7f7 fd9b 	bl	800c3e0 <tcp_connect>
 80148aa:	4603      	mov	r3, r0
 80148ac:	71fb      	strb	r3, [r7, #7]

	} else {
		Debug_Message(LOG_FATAL, "Нет памяти для TCP");
		return;
	}
	while (!ReadyMainConnect) {
 80148ae:	e007      	b.n	80148c0 <TCPMainLoop+0x44>
		Debug_Message(LOG_FATAL, "Нет памяти для TCP");
 80148b0:	490a      	ldr	r1, [pc, #40]	; (80148dc <TCPMainLoop+0x60>)
 80148b2:	2000      	movs	r0, #0
 80148b4:	f7ec fc7e 	bl	80011b4 <Debug_Message>
		return;
 80148b8:	e006      	b.n	80148c8 <TCPMainLoop+0x4c>
		osDelay(100);
 80148ba:	2064      	movs	r0, #100	; 0x64
 80148bc:	f7f1 fc46 	bl	800614c <osDelay>
	while (!ReadyMainConnect) {
 80148c0:	4b07      	ldr	r3, [pc, #28]	; (80148e0 <TCPMainLoop+0x64>)
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d0f8      	beq.n	80148ba <TCPMainLoop+0x3e>
	}

}
 80148c8:	3708      	adds	r7, #8
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop
 80148d0:	2400ee64 	.word	0x2400ee64
 80148d4:	2400ee68 	.word	0x2400ee68
 80148d8:	0801480d 	.word	0x0801480d
 80148dc:	0801e780 	.word	0x0801e780
 80148e0:	2400b7f4 	.word	0x2400b7f4

080148e4 <TCPMainReadSetup>:

void TCPMainReadSetup(void) {
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b084      	sub	sp, #16
 80148e8:	af02      	add	r7, sp, #8
	JSON_Value *root = ShareGetJson("tcpmain");
 80148ea:	4843      	ldr	r0, [pc, #268]	; (80149f8 <TCPMainReadSetup+0x114>)
 80148ec:	f003 f9aa 	bl	8017c44 <ShareGetJson>
 80148f0:	4603      	mov	r3, r0
 80148f2:	607b      	str	r3, [r7, #4]
	JSON_Object *object = json_value_get_object(root);
 80148f4:	6878      	ldr	r0, [r7, #4]
 80148f6:	f002 fd89 	bl	801740c <json_value_get_object>
 80148fa:	6038      	str	r0, [r7, #0]
	TCPMainSetup.port = (int) json_object_get_number(object, "port");
 80148fc:	493f      	ldr	r1, [pc, #252]	; (80149fc <TCPMainReadSetup+0x118>)
 80148fe:	6838      	ldr	r0, [r7, #0]
 8014900:	f002 fcc9 	bl	8017296 <json_object_get_number>
 8014904:	eeb0 7b40 	vmov.f64	d7, d0
 8014908:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801490c:	ee17 2a90 	vmov	r2, s15
 8014910:	4b3b      	ldr	r3, [pc, #236]	; (8014a00 <TCPMainReadSetup+0x11c>)
 8014912:	615a      	str	r2, [r3, #20]
	TCPMainSetup.timeout = (int) json_object_get_number(object, "timeout");
 8014914:	493b      	ldr	r1, [pc, #236]	; (8014a04 <TCPMainReadSetup+0x120>)
 8014916:	6838      	ldr	r0, [r7, #0]
 8014918:	f002 fcbd 	bl	8017296 <json_object_get_number>
 801491c:	eeb0 7b40 	vmov.f64	d7, d0
 8014920:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014924:	ee17 2a90 	vmov	r2, s15
 8014928:	4b35      	ldr	r3, [pc, #212]	; (8014a00 <TCPMainReadSetup+0x11c>)
 801492a:	619a      	str	r2, [r3, #24]
	sscanf(json_object_get_string(object, "ip"), "%d.%d.%d.%d",
 801492c:	4936      	ldr	r1, [pc, #216]	; (8014a08 <TCPMainReadSetup+0x124>)
 801492e:	6838      	ldr	r0, [r7, #0]
 8014930:	f002 fc9f 	bl	8017272 <json_object_get_string>
 8014934:	4b35      	ldr	r3, [pc, #212]	; (8014a0c <TCPMainReadSetup+0x128>)
 8014936:	9301      	str	r3, [sp, #4]
 8014938:	4b35      	ldr	r3, [pc, #212]	; (8014a10 <TCPMainReadSetup+0x12c>)
 801493a:	9300      	str	r3, [sp, #0]
 801493c:	4b35      	ldr	r3, [pc, #212]	; (8014a14 <TCPMainReadSetup+0x130>)
 801493e:	4a36      	ldr	r2, [pc, #216]	; (8014a18 <TCPMainReadSetup+0x134>)
 8014940:	4936      	ldr	r1, [pc, #216]	; (8014a1c <TCPMainReadSetup+0x138>)
 8014942:	f003 feaf 	bl	80186a4 <siscanf>
			&TCPMainSetup.adr1, &TCPMainSetup.adr2, &TCPMainSetup.adr3,
			&TCPMainSetup.adr4);
	IP_ADDR4(&TCPMainSetup.ipAddr, TCPMainSetup.adr1, TCPMainSetup.adr2,
 8014946:	4b2e      	ldr	r3, [pc, #184]	; (8014a00 <TCPMainReadSetup+0x11c>)
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	061a      	lsls	r2, r3, #24
 801494c:	4b2c      	ldr	r3, [pc, #176]	; (8014a00 <TCPMainReadSetup+0x11c>)
 801494e:	689b      	ldr	r3, [r3, #8]
 8014950:	041b      	lsls	r3, r3, #16
 8014952:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014956:	431a      	orrs	r2, r3
 8014958:	4b29      	ldr	r3, [pc, #164]	; (8014a00 <TCPMainReadSetup+0x11c>)
 801495a:	68db      	ldr	r3, [r3, #12]
 801495c:	021b      	lsls	r3, r3, #8
 801495e:	b29b      	uxth	r3, r3
 8014960:	431a      	orrs	r2, r3
 8014962:	4b27      	ldr	r3, [pc, #156]	; (8014a00 <TCPMainReadSetup+0x11c>)
 8014964:	691b      	ldr	r3, [r3, #16]
 8014966:	b2db      	uxtb	r3, r3
 8014968:	4313      	orrs	r3, r2
 801496a:	061a      	lsls	r2, r3, #24
 801496c:	4b24      	ldr	r3, [pc, #144]	; (8014a00 <TCPMainReadSetup+0x11c>)
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	0619      	lsls	r1, r3, #24
 8014972:	4b23      	ldr	r3, [pc, #140]	; (8014a00 <TCPMainReadSetup+0x11c>)
 8014974:	689b      	ldr	r3, [r3, #8]
 8014976:	041b      	lsls	r3, r3, #16
 8014978:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801497c:	4319      	orrs	r1, r3
 801497e:	4b20      	ldr	r3, [pc, #128]	; (8014a00 <TCPMainReadSetup+0x11c>)
 8014980:	68db      	ldr	r3, [r3, #12]
 8014982:	021b      	lsls	r3, r3, #8
 8014984:	b29b      	uxth	r3, r3
 8014986:	4319      	orrs	r1, r3
 8014988:	4b1d      	ldr	r3, [pc, #116]	; (8014a00 <TCPMainReadSetup+0x11c>)
 801498a:	691b      	ldr	r3, [r3, #16]
 801498c:	b2db      	uxtb	r3, r3
 801498e:	430b      	orrs	r3, r1
 8014990:	021b      	lsls	r3, r3, #8
 8014992:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014996:	431a      	orrs	r2, r3
 8014998:	4b19      	ldr	r3, [pc, #100]	; (8014a00 <TCPMainReadSetup+0x11c>)
 801499a:	685b      	ldr	r3, [r3, #4]
 801499c:	0619      	lsls	r1, r3, #24
 801499e:	4b18      	ldr	r3, [pc, #96]	; (8014a00 <TCPMainReadSetup+0x11c>)
 80149a0:	689b      	ldr	r3, [r3, #8]
 80149a2:	041b      	lsls	r3, r3, #16
 80149a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80149a8:	4319      	orrs	r1, r3
 80149aa:	4b15      	ldr	r3, [pc, #84]	; (8014a00 <TCPMainReadSetup+0x11c>)
 80149ac:	68db      	ldr	r3, [r3, #12]
 80149ae:	021b      	lsls	r3, r3, #8
 80149b0:	b29b      	uxth	r3, r3
 80149b2:	4319      	orrs	r1, r3
 80149b4:	4b12      	ldr	r3, [pc, #72]	; (8014a00 <TCPMainReadSetup+0x11c>)
 80149b6:	691b      	ldr	r3, [r3, #16]
 80149b8:	b2db      	uxtb	r3, r3
 80149ba:	430b      	orrs	r3, r1
 80149bc:	0a1b      	lsrs	r3, r3, #8
 80149be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80149c2:	431a      	orrs	r2, r3
 80149c4:	4b0e      	ldr	r3, [pc, #56]	; (8014a00 <TCPMainReadSetup+0x11c>)
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	0619      	lsls	r1, r3, #24
 80149ca:	4b0d      	ldr	r3, [pc, #52]	; (8014a00 <TCPMainReadSetup+0x11c>)
 80149cc:	689b      	ldr	r3, [r3, #8]
 80149ce:	041b      	lsls	r3, r3, #16
 80149d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80149d4:	4319      	orrs	r1, r3
 80149d6:	4b0a      	ldr	r3, [pc, #40]	; (8014a00 <TCPMainReadSetup+0x11c>)
 80149d8:	68db      	ldr	r3, [r3, #12]
 80149da:	021b      	lsls	r3, r3, #8
 80149dc:	b29b      	uxth	r3, r3
 80149de:	4319      	orrs	r1, r3
 80149e0:	4b07      	ldr	r3, [pc, #28]	; (8014a00 <TCPMainReadSetup+0x11c>)
 80149e2:	691b      	ldr	r3, [r3, #16]
 80149e4:	b2db      	uxtb	r3, r3
 80149e6:	430b      	orrs	r3, r1
 80149e8:	0e1b      	lsrs	r3, r3, #24
 80149ea:	4313      	orrs	r3, r2
 80149ec:	4a04      	ldr	r2, [pc, #16]	; (8014a00 <TCPMainReadSetup+0x11c>)
 80149ee:	6013      	str	r3, [r2, #0]
			TCPMainSetup.adr3, TCPMainSetup.adr4);
}
 80149f0:	bf00      	nop
 80149f2:	3708      	adds	r7, #8
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	0801e7a0 	.word	0x0801e7a0
 80149fc:	0801e7a8 	.word	0x0801e7a8
 8014a00:	2400ee68 	.word	0x2400ee68
 8014a04:	0801e7b0 	.word	0x0801e7b0
 8014a08:	0801e7b8 	.word	0x0801e7b8
 8014a0c:	2400ee78 	.word	0x2400ee78
 8014a10:	2400ee74 	.word	0x2400ee74
 8014a14:	2400ee70 	.word	0x2400ee70
 8014a18:	2400ee6c 	.word	0x2400ee6c
 8014a1c:	0801e7bc 	.word	0x0801e7bc

08014a20 <parson_strndup>:
		escaped = PARSON_FALSE;
		string++;
	}
}

static char* parson_strndup(const char *string, size_t n) {
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b084      	sub	sp, #16
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
 8014a28:	6039      	str	r1, [r7, #0]
	/* We expect the caller has validated that 'n' fits within the input buffer. */
	char *output_string = (char*) parson_malloc(n + 1);
 8014a2a:	4b0d      	ldr	r3, [pc, #52]	; (8014a60 <parson_strndup+0x40>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	683a      	ldr	r2, [r7, #0]
 8014a30:	3201      	adds	r2, #1
 8014a32:	4610      	mov	r0, r2
 8014a34:	4798      	blx	r3
 8014a36:	60f8      	str	r0, [r7, #12]
	if (!output_string) {
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d101      	bne.n	8014a42 <parson_strndup+0x22>
		return NULL;
 8014a3e:	2300      	movs	r3, #0
 8014a40:	e00a      	b.n	8014a58 <parson_strndup+0x38>
	}
	output_string[n] = '\0';
 8014a42:	68fa      	ldr	r2, [r7, #12]
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	4413      	add	r3, r2
 8014a48:	2200      	movs	r2, #0
 8014a4a:	701a      	strb	r2, [r3, #0]
	memcpy(output_string, string, n);
 8014a4c:	683a      	ldr	r2, [r7, #0]
 8014a4e:	6879      	ldr	r1, [r7, #4]
 8014a50:	68f8      	ldr	r0, [r7, #12]
 8014a52:	f003 fc5b 	bl	801830c <memcpy>
	return output_string;
 8014a56:	68fb      	ldr	r3, [r7, #12]
}
 8014a58:	4618      	mov	r0, r3
 8014a5a:	3710      	adds	r7, #16
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}
 8014a60:	24000038 	.word	0x24000038

08014a64 <parson_strdup>:

static char* parson_strdup(const char *string) {
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
	return parson_strndup(string, strlen(string));
 8014a6c:	6878      	ldr	r0, [r7, #4]
 8014a6e:	f7eb fc41 	bl	80002f4 <strlen>
 8014a72:	4603      	mov	r3, r0
 8014a74:	4619      	mov	r1, r3
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f7ff ffd2 	bl	8014a20 <parson_strndup>
 8014a7c:	4603      	mov	r3, r0
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3708      	adds	r7, #8
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}

08014a86 <hex_char_to_int>:

static int hex_char_to_int(char c) {
 8014a86:	b480      	push	{r7}
 8014a88:	b083      	sub	sp, #12
 8014a8a:	af00      	add	r7, sp, #0
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 8014a90:	79fb      	ldrb	r3, [r7, #7]
 8014a92:	2b2f      	cmp	r3, #47	; 0x2f
 8014a94:	d905      	bls.n	8014aa2 <hex_char_to_int+0x1c>
 8014a96:	79fb      	ldrb	r3, [r7, #7]
 8014a98:	2b39      	cmp	r3, #57	; 0x39
 8014a9a:	d802      	bhi.n	8014aa2 <hex_char_to_int+0x1c>
		return c - '0';
 8014a9c:	79fb      	ldrb	r3, [r7, #7]
 8014a9e:	3b30      	subs	r3, #48	; 0x30
 8014aa0:	e013      	b.n	8014aca <hex_char_to_int+0x44>
	} else if (c >= 'a' && c <= 'f') {
 8014aa2:	79fb      	ldrb	r3, [r7, #7]
 8014aa4:	2b60      	cmp	r3, #96	; 0x60
 8014aa6:	d905      	bls.n	8014ab4 <hex_char_to_int+0x2e>
 8014aa8:	79fb      	ldrb	r3, [r7, #7]
 8014aaa:	2b66      	cmp	r3, #102	; 0x66
 8014aac:	d802      	bhi.n	8014ab4 <hex_char_to_int+0x2e>
		return c - 'a' + 10;
 8014aae:	79fb      	ldrb	r3, [r7, #7]
 8014ab0:	3b57      	subs	r3, #87	; 0x57
 8014ab2:	e00a      	b.n	8014aca <hex_char_to_int+0x44>
	} else if (c >= 'A' && c <= 'F') {
 8014ab4:	79fb      	ldrb	r3, [r7, #7]
 8014ab6:	2b40      	cmp	r3, #64	; 0x40
 8014ab8:	d905      	bls.n	8014ac6 <hex_char_to_int+0x40>
 8014aba:	79fb      	ldrb	r3, [r7, #7]
 8014abc:	2b46      	cmp	r3, #70	; 0x46
 8014abe:	d802      	bhi.n	8014ac6 <hex_char_to_int+0x40>
		return c - 'A' + 10;
 8014ac0:	79fb      	ldrb	r3, [r7, #7]
 8014ac2:	3b37      	subs	r3, #55	; 0x37
 8014ac4:	e001      	b.n	8014aca <hex_char_to_int+0x44>
	}
	return -1;
 8014ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	370c      	adds	r7, #12
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad4:	4770      	bx	lr

08014ad6 <parse_utf16_hex>:

static JSON_Status parse_utf16_hex(const char *s, unsigned int *result) {
 8014ad6:	b580      	push	{r7, lr}
 8014ad8:	b086      	sub	sp, #24
 8014ada:	af00      	add	r7, sp, #0
 8014adc:	6078      	str	r0, [r7, #4]
 8014ade:	6039      	str	r1, [r7, #0]
	int x1, x2, x3, x4;
	if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d00e      	beq.n	8014b06 <parse_utf16_hex+0x30>
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	3301      	adds	r3, #1
 8014aec:	781b      	ldrb	r3, [r3, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d009      	beq.n	8014b06 <parse_utf16_hex+0x30>
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	3302      	adds	r3, #2
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d004      	beq.n	8014b06 <parse_utf16_hex+0x30>
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	3303      	adds	r3, #3
 8014b00:	781b      	ldrb	r3, [r3, #0]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d102      	bne.n	8014b0c <parse_utf16_hex+0x36>
		return JSONFailure;
 8014b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b0a:	e03b      	b.n	8014b84 <parse_utf16_hex+0xae>
	}
	x1 = hex_char_to_int(s[0]);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	781b      	ldrb	r3, [r3, #0]
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7ff ffb8 	bl	8014a86 <hex_char_to_int>
 8014b16:	6178      	str	r0, [r7, #20]
	x2 = hex_char_to_int(s[1]);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7ff ffb1 	bl	8014a86 <hex_char_to_int>
 8014b24:	6138      	str	r0, [r7, #16]
	x3 = hex_char_to_int(s[2]);
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	3302      	adds	r3, #2
 8014b2a:	781b      	ldrb	r3, [r3, #0]
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f7ff ffaa 	bl	8014a86 <hex_char_to_int>
 8014b32:	60f8      	str	r0, [r7, #12]
	x4 = hex_char_to_int(s[3]);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	3303      	adds	r3, #3
 8014b38:	781b      	ldrb	r3, [r3, #0]
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7ff ffa3 	bl	8014a86 <hex_char_to_int>
 8014b40:	60b8      	str	r0, [r7, #8]
	if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b48:	d00b      	beq.n	8014b62 <parse_utf16_hex+0x8c>
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b50:	d007      	beq.n	8014b62 <parse_utf16_hex+0x8c>
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b58:	d003      	beq.n	8014b62 <parse_utf16_hex+0x8c>
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b60:	d102      	bne.n	8014b68 <parse_utf16_hex+0x92>
		return JSONFailure;
 8014b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b66:	e00d      	b.n	8014b84 <parse_utf16_hex+0xae>
	}
	*result = (unsigned int) ((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	031a      	lsls	r2, r3, #12
 8014b6c:	693b      	ldr	r3, [r7, #16]
 8014b6e:	021b      	lsls	r3, r3, #8
 8014b70:	431a      	orrs	r2, r3
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	011b      	lsls	r3, r3, #4
 8014b76:	431a      	orrs	r2, r3
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	4313      	orrs	r3, r2
 8014b7c:	461a      	mov	r2, r3
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	601a      	str	r2, [r3, #0]
	return JSONSuccess;
 8014b82:	2300      	movs	r3, #0
}
 8014b84:	4618      	mov	r0, r3
 8014b86:	3718      	adds	r7, #24
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}

08014b8c <num_bytes_in_utf8_sequence>:

static int num_bytes_in_utf8_sequence(unsigned char c) {
 8014b8c:	b480      	push	{r7}
 8014b8e:	b083      	sub	sp, #12
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	4603      	mov	r3, r0
 8014b94:	71fb      	strb	r3, [r7, #7]
	if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 8014b96:	79fb      	ldrb	r3, [r7, #7]
 8014b98:	2bc0      	cmp	r3, #192	; 0xc0
 8014b9a:	d00a      	beq.n	8014bb2 <num_bytes_in_utf8_sequence+0x26>
 8014b9c:	79fb      	ldrb	r3, [r7, #7]
 8014b9e:	2bc1      	cmp	r3, #193	; 0xc1
 8014ba0:	d007      	beq.n	8014bb2 <num_bytes_in_utf8_sequence+0x26>
 8014ba2:	79fb      	ldrb	r3, [r7, #7]
 8014ba4:	2bf4      	cmp	r3, #244	; 0xf4
 8014ba6:	d804      	bhi.n	8014bb2 <num_bytes_in_utf8_sequence+0x26>
 8014ba8:	79fb      	ldrb	r3, [r7, #7]
 8014baa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014bae:	2b80      	cmp	r3, #128	; 0x80
 8014bb0:	d101      	bne.n	8014bb6 <num_bytes_in_utf8_sequence+0x2a>
		return 0;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	e01b      	b.n	8014bee <num_bytes_in_utf8_sequence+0x62>
	} else if ((c & 0x80) == 0) { /* 0xxxxxxx */
 8014bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	db01      	blt.n	8014bc2 <num_bytes_in_utf8_sequence+0x36>
		return 1;
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	e015      	b.n	8014bee <num_bytes_in_utf8_sequence+0x62>
	} else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 8014bc2:	79fb      	ldrb	r3, [r7, #7]
 8014bc4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8014bc8:	2bc0      	cmp	r3, #192	; 0xc0
 8014bca:	d101      	bne.n	8014bd0 <num_bytes_in_utf8_sequence+0x44>
		return 2;
 8014bcc:	2302      	movs	r3, #2
 8014bce:	e00e      	b.n	8014bee <num_bytes_in_utf8_sequence+0x62>
	} else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 8014bd0:	79fb      	ldrb	r3, [r7, #7]
 8014bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014bd6:	2be0      	cmp	r3, #224	; 0xe0
 8014bd8:	d101      	bne.n	8014bde <num_bytes_in_utf8_sequence+0x52>
		return 3;
 8014bda:	2303      	movs	r3, #3
 8014bdc:	e007      	b.n	8014bee <num_bytes_in_utf8_sequence+0x62>
	} else if ((c & 0xF8) == 0xF0) { /* 11110xxx */
 8014bde:	79fb      	ldrb	r3, [r7, #7]
 8014be0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8014be4:	2bf0      	cmp	r3, #240	; 0xf0
 8014be6:	d101      	bne.n	8014bec <num_bytes_in_utf8_sequence+0x60>
		return 4;
 8014be8:	2304      	movs	r3, #4
 8014bea:	e000      	b.n	8014bee <num_bytes_in_utf8_sequence+0x62>
	}
	return 0; /* won't happen */
 8014bec:	2300      	movs	r3, #0
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	370c      	adds	r7, #12
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf8:	4770      	bx	lr

08014bfa <verify_utf8_sequence>:

static JSON_Status verify_utf8_sequence(const unsigned char *string, int *len) {
 8014bfa:	b580      	push	{r7, lr}
 8014bfc:	b084      	sub	sp, #16
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	6078      	str	r0, [r7, #4]
 8014c02:	6039      	str	r1, [r7, #0]
	unsigned int cp = 0;
 8014c04:	2300      	movs	r3, #0
 8014c06:	60fb      	str	r3, [r7, #12]
	*len = num_bytes_in_utf8_sequence(string[0]);
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7ff ffbd 	bl	8014b8c <num_bytes_in_utf8_sequence>
 8014c12:	4602      	mov	r2, r0
 8014c14:	683b      	ldr	r3, [r7, #0]
 8014c16:	601a      	str	r2, [r3, #0]

	if (*len == 1) {
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	2b01      	cmp	r3, #1
 8014c1e:	d103      	bne.n	8014c28 <verify_utf8_sequence+0x2e>
		cp = string[0];
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	781b      	ldrb	r3, [r3, #0]
 8014c24:	60fb      	str	r3, [r7, #12]
 8014c26:	e080      	b.n	8014d2a <verify_utf8_sequence+0x130>
	} else if (*len == 2 && IS_CONT(string[1])) {
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	2b02      	cmp	r3, #2
 8014c2e:	d115      	bne.n	8014c5c <verify_utf8_sequence+0x62>
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	3301      	adds	r3, #1
 8014c34:	781b      	ldrb	r3, [r3, #0]
 8014c36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014c3a:	2b80      	cmp	r3, #128	; 0x80
 8014c3c:	d10e      	bne.n	8014c5c <verify_utf8_sequence+0x62>
		cp = string[0] & 0x1F;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	781b      	ldrb	r3, [r3, #0]
 8014c42:	f003 031f 	and.w	r3, r3, #31
 8014c46:	60fb      	str	r3, [r7, #12]
		cp = (cp << 6) | (string[1] & 0x3F);
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	019a      	lsls	r2, r3, #6
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	3301      	adds	r3, #1
 8014c50:	781b      	ldrb	r3, [r3, #0]
 8014c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014c56:	4313      	orrs	r3, r2
 8014c58:	60fb      	str	r3, [r7, #12]
 8014c5a:	e066      	b.n	8014d2a <verify_utf8_sequence+0x130>
	} else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 8014c5c:	683b      	ldr	r3, [r7, #0]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	2b03      	cmp	r3, #3
 8014c62:	d125      	bne.n	8014cb0 <verify_utf8_sequence+0xb6>
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	3301      	adds	r3, #1
 8014c68:	781b      	ldrb	r3, [r3, #0]
 8014c6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014c6e:	2b80      	cmp	r3, #128	; 0x80
 8014c70:	d11e      	bne.n	8014cb0 <verify_utf8_sequence+0xb6>
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	3302      	adds	r3, #2
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014c7c:	2b80      	cmp	r3, #128	; 0x80
 8014c7e:	d117      	bne.n	8014cb0 <verify_utf8_sequence+0xb6>
		cp = ((unsigned char) string[0]) & 0xF;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	781b      	ldrb	r3, [r3, #0]
 8014c84:	f003 030f 	and.w	r3, r3, #15
 8014c88:	60fb      	str	r3, [r7, #12]
		cp = (cp << 6) | (string[1] & 0x3F);
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	019a      	lsls	r2, r3, #6
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	3301      	adds	r3, #1
 8014c92:	781b      	ldrb	r3, [r3, #0]
 8014c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014c98:	4313      	orrs	r3, r2
 8014c9a:	60fb      	str	r3, [r7, #12]
		cp = (cp << 6) | (string[2] & 0x3F);
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	019a      	lsls	r2, r3, #6
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	3302      	adds	r3, #2
 8014ca4:	781b      	ldrb	r3, [r3, #0]
 8014ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014caa:	4313      	orrs	r3, r2
 8014cac:	60fb      	str	r3, [r7, #12]
 8014cae:	e03c      	b.n	8014d2a <verify_utf8_sequence+0x130>
	} else if (*len
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	2b04      	cmp	r3, #4
 8014cb6:	d135      	bne.n	8014d24 <verify_utf8_sequence+0x12a>
			== 4&& IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	3301      	adds	r3, #1
 8014cbc:	781b      	ldrb	r3, [r3, #0]
 8014cbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014cc2:	2b80      	cmp	r3, #128	; 0x80
 8014cc4:	d12e      	bne.n	8014d24 <verify_utf8_sequence+0x12a>
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	3302      	adds	r3, #2
 8014cca:	781b      	ldrb	r3, [r3, #0]
 8014ccc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014cd0:	2b80      	cmp	r3, #128	; 0x80
 8014cd2:	d127      	bne.n	8014d24 <verify_utf8_sequence+0x12a>
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	3303      	adds	r3, #3
 8014cd8:	781b      	ldrb	r3, [r3, #0]
 8014cda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014cde:	2b80      	cmp	r3, #128	; 0x80
 8014ce0:	d120      	bne.n	8014d24 <verify_utf8_sequence+0x12a>
		cp = string[0] & 0x7;
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	781b      	ldrb	r3, [r3, #0]
 8014ce6:	f003 0307 	and.w	r3, r3, #7
 8014cea:	60fb      	str	r3, [r7, #12]
		cp = (cp << 6) | (string[1] & 0x3F);
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	019a      	lsls	r2, r3, #6
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	3301      	adds	r3, #1
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014cfa:	4313      	orrs	r3, r2
 8014cfc:	60fb      	str	r3, [r7, #12]
		cp = (cp << 6) | (string[2] & 0x3F);
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	019a      	lsls	r2, r3, #6
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	3302      	adds	r3, #2
 8014d06:	781b      	ldrb	r3, [r3, #0]
 8014d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014d0c:	4313      	orrs	r3, r2
 8014d0e:	60fb      	str	r3, [r7, #12]
		cp = (cp << 6) | (string[3] & 0x3F);
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	019a      	lsls	r2, r3, #6
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	3303      	adds	r3, #3
 8014d18:	781b      	ldrb	r3, [r3, #0]
 8014d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014d1e:	4313      	orrs	r3, r2
 8014d20:	60fb      	str	r3, [r7, #12]
 8014d22:	e002      	b.n	8014d2a <verify_utf8_sequence+0x130>
	} else {
		return JSONFailure;
 8014d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d28:	e02c      	b.n	8014d84 <verify_utf8_sequence+0x18a>
	}

	/* overlong encodings */
	if ((cp < 0x80 && *len > 1) || (cp < 0x800 && *len > 2)
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8014d2e:	d803      	bhi.n	8014d38 <verify_utf8_sequence+0x13e>
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	2b01      	cmp	r3, #1
 8014d36:	dc0f      	bgt.n	8014d58 <verify_utf8_sequence+0x15e>
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014d3e:	d203      	bcs.n	8014d48 <verify_utf8_sequence+0x14e>
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	2b02      	cmp	r3, #2
 8014d46:	dc07      	bgt.n	8014d58 <verify_utf8_sequence+0x15e>
			|| (cp < 0x10000 && *len > 3)) {
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d4e:	d206      	bcs.n	8014d5e <verify_utf8_sequence+0x164>
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	2b03      	cmp	r3, #3
 8014d56:	dd02      	ble.n	8014d5e <verify_utf8_sequence+0x164>
		return JSONFailure;
 8014d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d5c:	e012      	b.n	8014d84 <verify_utf8_sequence+0x18a>
	}

	/* invalid unicode */
	if (cp > 0x10FFFF) {
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8014d64:	d302      	bcc.n	8014d6c <verify_utf8_sequence+0x172>
		return JSONFailure;
 8014d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d6a:	e00b      	b.n	8014d84 <verify_utf8_sequence+0x18a>
	}

	/* surrogate halves */
	if (cp >= 0xD800 && cp <= 0xDFFF) {
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8014d72:	d306      	bcc.n	8014d82 <verify_utf8_sequence+0x188>
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8014d7a:	d202      	bcs.n	8014d82 <verify_utf8_sequence+0x188>
		return JSONFailure;
 8014d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d80:	e000      	b.n	8014d84 <verify_utf8_sequence+0x18a>
	}

	return JSONSuccess;
 8014d82:	2300      	movs	r3, #0
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	3710      	adds	r7, #16
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}

08014d8c <is_valid_utf8>:

static int is_valid_utf8(const char *string, size_t string_len) {
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	6039      	str	r1, [r7, #0]
	int len = 0;
 8014d96:	2300      	movs	r3, #0
 8014d98:	60bb      	str	r3, [r7, #8]
	const char *string_end = string + string_len;
 8014d9a:	687a      	ldr	r2, [r7, #4]
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	4413      	add	r3, r2
 8014da0:	60fb      	str	r3, [r7, #12]
	while (string < string_end) {
 8014da2:	e00f      	b.n	8014dc4 <is_valid_utf8+0x38>
		if (verify_utf8_sequence((const unsigned char*) string, &len)
 8014da4:	f107 0308 	add.w	r3, r7, #8
 8014da8:	4619      	mov	r1, r3
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f7ff ff25 	bl	8014bfa <verify_utf8_sequence>
 8014db0:	4603      	mov	r3, r0
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d001      	beq.n	8014dba <is_valid_utf8+0x2e>
				!= JSONSuccess) {
			return PARSON_FALSE;
 8014db6:	2300      	movs	r3, #0
 8014db8:	e009      	b.n	8014dce <is_valid_utf8+0x42>
		}
		string += len;
 8014dba:	68bb      	ldr	r3, [r7, #8]
 8014dbc:	461a      	mov	r2, r3
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	4413      	add	r3, r2
 8014dc2:	607b      	str	r3, [r7, #4]
	while (string < string_end) {
 8014dc4:	687a      	ldr	r2, [r7, #4]
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	d3eb      	bcc.n	8014da4 <is_valid_utf8+0x18>
	}
	return PARSON_TRUE;
 8014dcc:	2301      	movs	r3, #1
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3710      	adds	r7, #16
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
	...

08014dd8 <is_decimal>:

static parson_bool_t is_decimal(const char *string, size_t length) {
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b082      	sub	sp, #8
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	6039      	str	r1, [r7, #0]
	if (length > 1 && string[0] == '0' && string[1] != '.') {
 8014de2:	683b      	ldr	r3, [r7, #0]
 8014de4:	2b01      	cmp	r3, #1
 8014de6:	d90a      	bls.n	8014dfe <is_decimal+0x26>
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	781b      	ldrb	r3, [r3, #0]
 8014dec:	2b30      	cmp	r3, #48	; 0x30
 8014dee:	d106      	bne.n	8014dfe <is_decimal+0x26>
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	3301      	adds	r3, #1
 8014df4:	781b      	ldrb	r3, [r3, #0]
 8014df6:	2b2e      	cmp	r3, #46	; 0x2e
 8014df8:	d001      	beq.n	8014dfe <is_decimal+0x26>
		return PARSON_FALSE;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	e024      	b.n	8014e48 <is_decimal+0x70>
	}
	if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	2b02      	cmp	r3, #2
 8014e02:	d91b      	bls.n	8014e3c <is_decimal+0x64>
 8014e04:	2202      	movs	r2, #2
 8014e06:	4912      	ldr	r1, [pc, #72]	; (8014e50 <is_decimal+0x78>)
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f003 fcc9 	bl	80187a0 <strncmp>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d113      	bne.n	8014e3c <is_decimal+0x64>
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	3302      	adds	r3, #2
 8014e18:	781b      	ldrb	r3, [r3, #0]
 8014e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8014e1c:	d00e      	beq.n	8014e3c <is_decimal+0x64>
		return PARSON_FALSE;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	e012      	b.n	8014e48 <is_decimal+0x70>
	}
	while (length--) {
		if (strchr("xX", string[length])) {
 8014e22:	687a      	ldr	r2, [r7, #4]
 8014e24:	683b      	ldr	r3, [r7, #0]
 8014e26:	4413      	add	r3, r2
 8014e28:	781b      	ldrb	r3, [r3, #0]
 8014e2a:	4619      	mov	r1, r3
 8014e2c:	4809      	ldr	r0, [pc, #36]	; (8014e54 <is_decimal+0x7c>)
 8014e2e:	f003 fcaa 	bl	8018786 <strchr>
 8014e32:	4603      	mov	r3, r0
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d001      	beq.n	8014e3c <is_decimal+0x64>
			return PARSON_FALSE;
 8014e38:	2300      	movs	r3, #0
 8014e3a:	e005      	b.n	8014e48 <is_decimal+0x70>
	while (length--) {
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	1e5a      	subs	r2, r3, #1
 8014e40:	603a      	str	r2, [r7, #0]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d1ed      	bne.n	8014e22 <is_decimal+0x4a>
		}
	}
	return PARSON_TRUE;
 8014e46:	2301      	movs	r3, #1
}
 8014e48:	4618      	mov	r0, r3
 8014e4a:	3708      	adds	r7, #8
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}
 8014e50:	0801e7cc 	.word	0x0801e7cc
 8014e54:	0801e7d0 	.word	0x0801e7d0

08014e58 <hash_string>:

static unsigned long hash_string(const char *string, size_t n) {
 8014e58:	b480      	push	{r7}
 8014e5a:	b087      	sub	sp, #28
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
 8014e60:	6039      	str	r1, [r7, #0]
#ifdef PARSON_FORCE_HASH_COLLISIONS
    (void)string;
    (void)n;
    return 0;
#else
	unsigned long hash = 5381;
 8014e62:	f241 5305 	movw	r3, #5381	; 0x1505
 8014e66:	617b      	str	r3, [r7, #20]
	unsigned char c;
	size_t i = 0;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < n; i++) {
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	613b      	str	r3, [r7, #16]
 8014e70:	e011      	b.n	8014e96 <hash_string+0x3e>
		c = string[i];
 8014e72:	687a      	ldr	r2, [r7, #4]
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	4413      	add	r3, r2
 8014e78:	781b      	ldrb	r3, [r3, #0]
 8014e7a:	73fb      	strb	r3, [r7, #15]
		if (c == '\0') {
 8014e7c:	7bfb      	ldrb	r3, [r7, #15]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d00e      	beq.n	8014ea0 <hash_string+0x48>
			break;
		}
		hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 8014e82:	697b      	ldr	r3, [r7, #20]
 8014e84:	015a      	lsls	r2, r3, #5
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	441a      	add	r2, r3
 8014e8a:	7bfb      	ldrb	r3, [r7, #15]
 8014e8c:	4413      	add	r3, r2
 8014e8e:	617b      	str	r3, [r7, #20]
	for (i = 0; i < n; i++) {
 8014e90:	693b      	ldr	r3, [r7, #16]
 8014e92:	3301      	adds	r3, #1
 8014e94:	613b      	str	r3, [r7, #16]
 8014e96:	693a      	ldr	r2, [r7, #16]
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	d3e9      	bcc.n	8014e72 <hash_string+0x1a>
 8014e9e:	e000      	b.n	8014ea2 <hash_string+0x4a>
			break;
 8014ea0:	bf00      	nop
	}
	return hash;
 8014ea2:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	371c      	adds	r7, #28
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eae:	4770      	bx	lr

08014eb0 <json_object_make>:

/* JSON Object */
static JSON_Object* json_object_make(JSON_Value *wrapping_value) {
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b084      	sub	sp, #16
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
	JSON_Status res = JSONFailure;
 8014eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ebc:	60fb      	str	r3, [r7, #12]
	JSON_Object *new_obj = (JSON_Object*) parson_malloc(sizeof(JSON_Object));
 8014ebe:	4b10      	ldr	r3, [pc, #64]	; (8014f00 <json_object_make+0x50>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	2024      	movs	r0, #36	; 0x24
 8014ec4:	4798      	blx	r3
 8014ec6:	60b8      	str	r0, [r7, #8]
	if (new_obj == NULL) {
 8014ec8:	68bb      	ldr	r3, [r7, #8]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d101      	bne.n	8014ed2 <json_object_make+0x22>
		return NULL;
 8014ece:	2300      	movs	r3, #0
 8014ed0:	e011      	b.n	8014ef6 <json_object_make+0x46>
	}
	new_obj->wrapping_value = wrapping_value;
 8014ed2:	68bb      	ldr	r3, [r7, #8]
 8014ed4:	687a      	ldr	r2, [r7, #4]
 8014ed6:	601a      	str	r2, [r3, #0]
	res = json_object_init(new_obj, 0);
 8014ed8:	2100      	movs	r1, #0
 8014eda:	68b8      	ldr	r0, [r7, #8]
 8014edc:	f000 f814 	bl	8014f08 <json_object_init>
 8014ee0:	60f8      	str	r0, [r7, #12]
	if (res != JSONSuccess) {
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d005      	beq.n	8014ef4 <json_object_make+0x44>
		parson_free(new_obj);
 8014ee8:	4b06      	ldr	r3, [pc, #24]	; (8014f04 <json_object_make+0x54>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	68b8      	ldr	r0, [r7, #8]
 8014eee:	4798      	blx	r3
		return NULL;
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	e000      	b.n	8014ef6 <json_object_make+0x46>
	}
	return new_obj;
 8014ef4:	68bb      	ldr	r3, [r7, #8]
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3710      	adds	r7, #16
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}
 8014efe:	bf00      	nop
 8014f00:	24000038 	.word	0x24000038
 8014f04:	2400003c 	.word	0x2400003c

08014f08 <json_object_init>:

static JSON_Status json_object_init(JSON_Object *object, size_t capacity) {
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b084      	sub	sp, #16
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	6039      	str	r1, [r7, #0]
	unsigned int i = 0;
 8014f12:	2300      	movs	r3, #0
 8014f14:	60fb      	str	r3, [r7, #12]

	object->cells = NULL;
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	2200      	movs	r2, #0
 8014f1a:	605a      	str	r2, [r3, #4]
	object->names = NULL;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2200      	movs	r2, #0
 8014f20:	60da      	str	r2, [r3, #12]
	object->values = NULL;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	2200      	movs	r2, #0
 8014f26:	611a      	str	r2, [r3, #16]
	object->cell_ixs = NULL;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	615a      	str	r2, [r3, #20]
	object->hashes = NULL;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	2200      	movs	r2, #0
 8014f32:	609a      	str	r2, [r3, #8]

	object->count = 0;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2200      	movs	r2, #0
 8014f38:	619a      	str	r2, [r3, #24]
	object->cell_capacity = capacity;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	683a      	ldr	r2, [r7, #0]
 8014f3e:	621a      	str	r2, [r3, #32]
	object->item_capacity = (unsigned int) (capacity * 0.7f);
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	ee07 3a90 	vmov	s15, r3
 8014f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f4a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8015068 <json_object_init+0x160>
 8014f4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014f56:	ee17 2a90 	vmov	r2, s15
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	61da      	str	r2, [r3, #28]

	if (capacity == 0) {
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d101      	bne.n	8014f68 <json_object_init+0x60>
		return JSONSuccess;
 8014f64:	2300      	movs	r3, #0
 8014f66:	e07b      	b.n	8015060 <json_object_init+0x158>
	}

	object->cells = (size_t*) parson_malloc(
 8014f68:	4b40      	ldr	r3, [pc, #256]	; (801506c <json_object_init+0x164>)
 8014f6a:	681b      	ldr	r3, [r3, #0]
			object->cell_capacity * sizeof(*object->cells));
 8014f6c:	687a      	ldr	r2, [r7, #4]
 8014f6e:	6a12      	ldr	r2, [r2, #32]
	object->cells = (size_t*) parson_malloc(
 8014f70:	0092      	lsls	r2, r2, #2
 8014f72:	4610      	mov	r0, r2
 8014f74:	4798      	blx	r3
 8014f76:	4602      	mov	r2, r0
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	605a      	str	r2, [r3, #4]
	object->names = (char**) parson_malloc(
 8014f7c:	4b3b      	ldr	r3, [pc, #236]	; (801506c <json_object_init+0x164>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
			object->item_capacity * sizeof(*object->names));
 8014f80:	687a      	ldr	r2, [r7, #4]
 8014f82:	69d2      	ldr	r2, [r2, #28]
	object->names = (char**) parson_malloc(
 8014f84:	0092      	lsls	r2, r2, #2
 8014f86:	4610      	mov	r0, r2
 8014f88:	4798      	blx	r3
 8014f8a:	4602      	mov	r2, r0
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	60da      	str	r2, [r3, #12]
	object->values = (JSON_Value**) parson_malloc(
 8014f90:	4b36      	ldr	r3, [pc, #216]	; (801506c <json_object_init+0x164>)
 8014f92:	681b      	ldr	r3, [r3, #0]
			object->item_capacity * sizeof(*object->values));
 8014f94:	687a      	ldr	r2, [r7, #4]
 8014f96:	69d2      	ldr	r2, [r2, #28]
	object->values = (JSON_Value**) parson_malloc(
 8014f98:	0092      	lsls	r2, r2, #2
 8014f9a:	4610      	mov	r0, r2
 8014f9c:	4798      	blx	r3
 8014f9e:	4602      	mov	r2, r0
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	611a      	str	r2, [r3, #16]
	object->cell_ixs = (size_t*) parson_malloc(
 8014fa4:	4b31      	ldr	r3, [pc, #196]	; (801506c <json_object_init+0x164>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
			object->item_capacity * sizeof(*object->cell_ixs));
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	69d2      	ldr	r2, [r2, #28]
	object->cell_ixs = (size_t*) parson_malloc(
 8014fac:	0092      	lsls	r2, r2, #2
 8014fae:	4610      	mov	r0, r2
 8014fb0:	4798      	blx	r3
 8014fb2:	4602      	mov	r2, r0
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	615a      	str	r2, [r3, #20]
	object->hashes = (unsigned long*) parson_malloc(
 8014fb8:	4b2c      	ldr	r3, [pc, #176]	; (801506c <json_object_init+0x164>)
 8014fba:	681b      	ldr	r3, [r3, #0]
			object->item_capacity * sizeof(*object->hashes));
 8014fbc:	687a      	ldr	r2, [r7, #4]
 8014fbe:	69d2      	ldr	r2, [r2, #28]
	object->hashes = (unsigned long*) parson_malloc(
 8014fc0:	0092      	lsls	r2, r2, #2
 8014fc2:	4610      	mov	r0, r2
 8014fc4:	4798      	blx	r3
 8014fc6:	4602      	mov	r2, r0
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	609a      	str	r2, [r3, #8]
	if (object->cells == NULL || object->names == NULL || object->values == NULL
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	685b      	ldr	r3, [r3, #4]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d024      	beq.n	801501e <json_object_init+0x116>
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	68db      	ldr	r3, [r3, #12]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d020      	beq.n	801501e <json_object_init+0x116>
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	691b      	ldr	r3, [r3, #16]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d01c      	beq.n	801501e <json_object_init+0x116>
			|| object->cell_ixs == NULL || object->hashes == NULL) {
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	695b      	ldr	r3, [r3, #20]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d018      	beq.n	801501e <json_object_init+0x116>
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	689b      	ldr	r3, [r3, #8]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d014      	beq.n	801501e <json_object_init+0x116>
		goto error;
	}
	for (i = 0; i < object->cell_capacity; i++) {
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	60fb      	str	r3, [r7, #12]
 8014ff8:	e00a      	b.n	8015010 <json_object_init+0x108>
		object->cells[i] = OBJECT_INVALID_IX;
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	685a      	ldr	r2, [r3, #4]
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	009b      	lsls	r3, r3, #2
 8015002:	4413      	add	r3, r2
 8015004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015008:	601a      	str	r2, [r3, #0]
	for (i = 0; i < object->cell_capacity; i++) {
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	3301      	adds	r3, #1
 801500e:	60fb      	str	r3, [r7, #12]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	6a1b      	ldr	r3, [r3, #32]
 8015014:	68fa      	ldr	r2, [r7, #12]
 8015016:	429a      	cmp	r2, r3
 8015018:	d3ef      	bcc.n	8014ffa <json_object_init+0xf2>
	}
	return JSONSuccess;
 801501a:	2300      	movs	r3, #0
 801501c:	e020      	b.n	8015060 <json_object_init+0x158>
		goto error;
 801501e:	bf00      	nop
	error: parson_free(object->cells);
 8015020:	4b13      	ldr	r3, [pc, #76]	; (8015070 <json_object_init+0x168>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	687a      	ldr	r2, [r7, #4]
 8015026:	6852      	ldr	r2, [r2, #4]
 8015028:	4610      	mov	r0, r2
 801502a:	4798      	blx	r3
	parson_free(object->names);
 801502c:	4b10      	ldr	r3, [pc, #64]	; (8015070 <json_object_init+0x168>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	687a      	ldr	r2, [r7, #4]
 8015032:	68d2      	ldr	r2, [r2, #12]
 8015034:	4610      	mov	r0, r2
 8015036:	4798      	blx	r3
	parson_free(object->values);
 8015038:	4b0d      	ldr	r3, [pc, #52]	; (8015070 <json_object_init+0x168>)
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	687a      	ldr	r2, [r7, #4]
 801503e:	6912      	ldr	r2, [r2, #16]
 8015040:	4610      	mov	r0, r2
 8015042:	4798      	blx	r3
	parson_free(object->cell_ixs);
 8015044:	4b0a      	ldr	r3, [pc, #40]	; (8015070 <json_object_init+0x168>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	687a      	ldr	r2, [r7, #4]
 801504a:	6952      	ldr	r2, [r2, #20]
 801504c:	4610      	mov	r0, r2
 801504e:	4798      	blx	r3
	parson_free(object->hashes);
 8015050:	4b07      	ldr	r3, [pc, #28]	; (8015070 <json_object_init+0x168>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	687a      	ldr	r2, [r7, #4]
 8015056:	6892      	ldr	r2, [r2, #8]
 8015058:	4610      	mov	r0, r2
 801505a:	4798      	blx	r3
	return JSONFailure;
 801505c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015060:	4618      	mov	r0, r3
 8015062:	3710      	adds	r7, #16
 8015064:	46bd      	mov	sp, r7
 8015066:	bd80      	pop	{r7, pc}
 8015068:	3f333333 	.word	0x3f333333
 801506c:	24000038 	.word	0x24000038
 8015070:	2400003c 	.word	0x2400003c

08015074 <json_object_deinit>:

static void json_object_deinit(JSON_Object *object, parson_bool_t free_keys,
		parson_bool_t free_values) {
 8015074:	b580      	push	{r7, lr}
 8015076:	b086      	sub	sp, #24
 8015078:	af00      	add	r7, sp, #0
 801507a:	60f8      	str	r0, [r7, #12]
 801507c:	60b9      	str	r1, [r7, #8]
 801507e:	607a      	str	r2, [r7, #4]
	unsigned int i = 0;
 8015080:	2300      	movs	r3, #0
 8015082:	617b      	str	r3, [r7, #20]
	for (i = 0; i < object->count; i++) {
 8015084:	2300      	movs	r3, #0
 8015086:	617b      	str	r3, [r7, #20]
 8015088:	e01b      	b.n	80150c2 <json_object_deinit+0x4e>
		if (free_keys) {
 801508a:	68bb      	ldr	r3, [r7, #8]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d009      	beq.n	80150a4 <json_object_deinit+0x30>
			parson_free(object->names[i]);
 8015090:	4b2b      	ldr	r3, [pc, #172]	; (8015140 <json_object_deinit+0xcc>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	68fa      	ldr	r2, [r7, #12]
 8015096:	68d1      	ldr	r1, [r2, #12]
 8015098:	697a      	ldr	r2, [r7, #20]
 801509a:	0092      	lsls	r2, r2, #2
 801509c:	440a      	add	r2, r1
 801509e:	6812      	ldr	r2, [r2, #0]
 80150a0:	4610      	mov	r0, r2
 80150a2:	4798      	blx	r3
		}
		if (free_values) {
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d008      	beq.n	80150bc <json_object_deinit+0x48>
			json_value_free(object->values[i]);
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	691a      	ldr	r2, [r3, #16]
 80150ae:	697b      	ldr	r3, [r7, #20]
 80150b0:	009b      	lsls	r3, r3, #2
 80150b2:	4413      	add	r3, r2
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	4618      	mov	r0, r3
 80150b8:	f002 fa30 	bl	801751c <json_value_free>
	for (i = 0; i < object->count; i++) {
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	3301      	adds	r3, #1
 80150c0:	617b      	str	r3, [r7, #20]
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	699b      	ldr	r3, [r3, #24]
 80150c6:	697a      	ldr	r2, [r7, #20]
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d3de      	bcc.n	801508a <json_object_deinit+0x16>
		}
	}

	object->count = 0;
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	2200      	movs	r2, #0
 80150d0:	619a      	str	r2, [r3, #24]
	object->item_capacity = 0;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	2200      	movs	r2, #0
 80150d6:	61da      	str	r2, [r3, #28]
	object->cell_capacity = 0;
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	2200      	movs	r2, #0
 80150dc:	621a      	str	r2, [r3, #32]

	parson_free(object->cells);
 80150de:	4b18      	ldr	r3, [pc, #96]	; (8015140 <json_object_deinit+0xcc>)
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	68fa      	ldr	r2, [r7, #12]
 80150e4:	6852      	ldr	r2, [r2, #4]
 80150e6:	4610      	mov	r0, r2
 80150e8:	4798      	blx	r3
	parson_free(object->names);
 80150ea:	4b15      	ldr	r3, [pc, #84]	; (8015140 <json_object_deinit+0xcc>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	68fa      	ldr	r2, [r7, #12]
 80150f0:	68d2      	ldr	r2, [r2, #12]
 80150f2:	4610      	mov	r0, r2
 80150f4:	4798      	blx	r3
	parson_free(object->values);
 80150f6:	4b12      	ldr	r3, [pc, #72]	; (8015140 <json_object_deinit+0xcc>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	68fa      	ldr	r2, [r7, #12]
 80150fc:	6912      	ldr	r2, [r2, #16]
 80150fe:	4610      	mov	r0, r2
 8015100:	4798      	blx	r3
	parson_free(object->cell_ixs);
 8015102:	4b0f      	ldr	r3, [pc, #60]	; (8015140 <json_object_deinit+0xcc>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	68fa      	ldr	r2, [r7, #12]
 8015108:	6952      	ldr	r2, [r2, #20]
 801510a:	4610      	mov	r0, r2
 801510c:	4798      	blx	r3
	parson_free(object->hashes);
 801510e:	4b0c      	ldr	r3, [pc, #48]	; (8015140 <json_object_deinit+0xcc>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	68fa      	ldr	r2, [r7, #12]
 8015114:	6892      	ldr	r2, [r2, #8]
 8015116:	4610      	mov	r0, r2
 8015118:	4798      	blx	r3

	object->cells = NULL;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	2200      	movs	r2, #0
 801511e:	605a      	str	r2, [r3, #4]
	object->names = NULL;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	2200      	movs	r2, #0
 8015124:	60da      	str	r2, [r3, #12]
	object->values = NULL;
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	2200      	movs	r2, #0
 801512a:	611a      	str	r2, [r3, #16]
	object->cell_ixs = NULL;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	2200      	movs	r2, #0
 8015130:	615a      	str	r2, [r3, #20]
	object->hashes = NULL;
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	2200      	movs	r2, #0
 8015136:	609a      	str	r2, [r3, #8]
}
 8015138:	bf00      	nop
 801513a:	3718      	adds	r7, #24
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}
 8015140:	2400003c 	.word	0x2400003c

08015144 <json_object_grow_and_rehash>:

static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {
 8015144:	b5b0      	push	{r4, r5, r7, lr}
 8015146:	b092      	sub	sp, #72	; 0x48
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
	JSON_Value *wrapping_value = NULL;
 801514c:	2300      	movs	r3, #0
 801514e:	643b      	str	r3, [r7, #64]	; 0x40
	JSON_Object new_object;
	char *key = NULL;
 8015150:	2300      	movs	r3, #0
 8015152:	63fb      	str	r3, [r7, #60]	; 0x3c
	JSON_Value *value = NULL;
 8015154:	2300      	movs	r3, #0
 8015156:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned int i = 0;
 8015158:	2300      	movs	r3, #0
 801515a:	647b      	str	r3, [r7, #68]	; 0x44
	size_t new_capacity = MAX(object->cell_capacity * 2, STARTING_CAPACITY);
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	6a1b      	ldr	r3, [r3, #32]
 8015160:	005b      	lsls	r3, r3, #1
 8015162:	2b10      	cmp	r3, #16
 8015164:	bf38      	it	cc
 8015166:	2310      	movcc	r3, #16
 8015168:	637b      	str	r3, [r7, #52]	; 0x34
	JSON_Status res = json_object_init(&new_object, new_capacity);
 801516a:	f107 030c 	add.w	r3, r7, #12
 801516e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015170:	4618      	mov	r0, r3
 8015172:	f7ff fec9 	bl	8014f08 <json_object_init>
 8015176:	6338      	str	r0, [r7, #48]	; 0x30
	if (res != JSONSuccess) {
 8015178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801517a:	2b00      	cmp	r3, #0
 801517c:	d002      	beq.n	8015184 <json_object_grow_and_rehash+0x40>
		return JSONFailure;
 801517e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015182:	e046      	b.n	8015212 <json_object_grow_and_rehash+0xce>
	}

	wrapping_value = json_object_get_wrapping_value(object);
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f002 f8e1 	bl	801734c <json_object_get_wrapping_value>
 801518a:	6438      	str	r0, [r7, #64]	; 0x40
	new_object.wrapping_value = wrapping_value;
 801518c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801518e:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < object->count; i++) {
 8015190:	2300      	movs	r3, #0
 8015192:	647b      	str	r3, [r7, #68]	; 0x44
 8015194:	e028      	b.n	80151e8 <json_object_grow_and_rehash+0xa4>
		key = object->names[i];
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	68da      	ldr	r2, [r3, #12]
 801519a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801519c:	009b      	lsls	r3, r3, #2
 801519e:	4413      	add	r3, r2
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	63fb      	str	r3, [r7, #60]	; 0x3c
		value = object->values[i];
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	691a      	ldr	r2, [r3, #16]
 80151a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151aa:	009b      	lsls	r3, r3, #2
 80151ac:	4413      	add	r3, r2
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	63bb      	str	r3, [r7, #56]	; 0x38
		res = json_object_add(&new_object, key, value);
 80151b2:	f107 030c 	add.w	r3, r7, #12
 80151b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80151b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80151ba:	4618      	mov	r0, r3
 80151bc:	f000 f897 	bl	80152ee <json_object_add>
 80151c0:	6338      	str	r0, [r7, #48]	; 0x30
		if (res != JSONSuccess) {
 80151c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d009      	beq.n	80151dc <json_object_grow_and_rehash+0x98>
			json_object_deinit(&new_object, PARSON_FALSE, PARSON_FALSE);
 80151c8:	f107 030c 	add.w	r3, r7, #12
 80151cc:	2200      	movs	r2, #0
 80151ce:	2100      	movs	r1, #0
 80151d0:	4618      	mov	r0, r3
 80151d2:	f7ff ff4f 	bl	8015074 <json_object_deinit>
			return JSONFailure;
 80151d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151da:	e01a      	b.n	8015212 <json_object_grow_and_rehash+0xce>
		}
		value->parent = wrapping_value;
 80151dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80151e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < object->count; i++) {
 80151e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151e4:	3301      	adds	r3, #1
 80151e6:	647b      	str	r3, [r7, #68]	; 0x44
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	699b      	ldr	r3, [r3, #24]
 80151ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80151ee:	429a      	cmp	r2, r3
 80151f0:	d3d1      	bcc.n	8015196 <json_object_grow_and_rehash+0x52>
	}
	json_object_deinit(object, PARSON_FALSE, PARSON_FALSE);
 80151f2:	2200      	movs	r2, #0
 80151f4:	2100      	movs	r1, #0
 80151f6:	6878      	ldr	r0, [r7, #4]
 80151f8:	f7ff ff3c 	bl	8015074 <json_object_deinit>
	*object = new_object;
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	461d      	mov	r5, r3
 8015200:	f107 040c 	add.w	r4, r7, #12
 8015204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801520a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801520c:	6823      	ldr	r3, [r4, #0]
 801520e:	602b      	str	r3, [r5, #0]
	return JSONSuccess;
 8015210:	2300      	movs	r3, #0
}
 8015212:	4618      	mov	r0, r3
 8015214:	3748      	adds	r7, #72	; 0x48
 8015216:	46bd      	mov	sp, r7
 8015218:	bdb0      	pop	{r4, r5, r7, pc}

0801521a <json_object_get_cell_ix>:

static size_t json_object_get_cell_ix(const JSON_Object *object,
		const char *key, size_t key_len, unsigned long hash,
		parson_bool_t *out_found) {
 801521a:	b580      	push	{r7, lr}
 801521c:	b08c      	sub	sp, #48	; 0x30
 801521e:	af00      	add	r7, sp, #0
 8015220:	60f8      	str	r0, [r7, #12]
 8015222:	60b9      	str	r1, [r7, #8]
 8015224:	607a      	str	r2, [r7, #4]
 8015226:	603b      	str	r3, [r7, #0]
	size_t cell_ix = hash & (object->cell_capacity - 1);
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	6a1b      	ldr	r3, [r3, #32]
 801522c:	3b01      	subs	r3, #1
 801522e:	683a      	ldr	r2, [r7, #0]
 8015230:	4013      	ands	r3, r2
 8015232:	62bb      	str	r3, [r7, #40]	; 0x28
	size_t cell = 0;
 8015234:	2300      	movs	r3, #0
 8015236:	627b      	str	r3, [r7, #36]	; 0x24
	size_t ix = 0;
 8015238:	2300      	movs	r3, #0
 801523a:	623b      	str	r3, [r7, #32]
	unsigned int i = 0;
 801523c:	2300      	movs	r3, #0
 801523e:	62fb      	str	r3, [r7, #44]	; 0x2c
	unsigned long hash_to_check = 0;
 8015240:	2300      	movs	r3, #0
 8015242:	61fb      	str	r3, [r7, #28]
	const char *key_to_check = NULL;
 8015244:	2300      	movs	r3, #0
 8015246:	61bb      	str	r3, [r7, #24]
	size_t key_to_check_len = 0;
 8015248:	2300      	movs	r3, #0
 801524a:	617b      	str	r3, [r7, #20]

	*out_found = PARSON_FALSE;
 801524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801524e:	2200      	movs	r2, #0
 8015250:	601a      	str	r2, [r3, #0]

	for (i = 0; i < object->cell_capacity; i++) {
 8015252:	2300      	movs	r3, #0
 8015254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015256:	e03f      	b.n	80152d8 <json_object_get_cell_ix+0xbe>
		ix = (cell_ix + i) & (object->cell_capacity - 1);
 8015258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801525c:	441a      	add	r2, r3
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	6a1b      	ldr	r3, [r3, #32]
 8015262:	3b01      	subs	r3, #1
 8015264:	4013      	ands	r3, r2
 8015266:	623b      	str	r3, [r7, #32]
		cell = object->cells[ix];
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	685a      	ldr	r2, [r3, #4]
 801526c:	6a3b      	ldr	r3, [r7, #32]
 801526e:	009b      	lsls	r3, r3, #2
 8015270:	4413      	add	r3, r2
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	627b      	str	r3, [r7, #36]	; 0x24
		if (cell == OBJECT_INVALID_IX) {
 8015276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801527c:	d101      	bne.n	8015282 <json_object_get_cell_ix+0x68>
			return ix;
 801527e:	6a3b      	ldr	r3, [r7, #32]
 8015280:	e031      	b.n	80152e6 <json_object_get_cell_ix+0xcc>
		}
		hash_to_check = object->hashes[cell];
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	689a      	ldr	r2, [r3, #8]
 8015286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015288:	009b      	lsls	r3, r3, #2
 801528a:	4413      	add	r3, r2
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	61fb      	str	r3, [r7, #28]
		if (hash != hash_to_check) {
 8015290:	683a      	ldr	r2, [r7, #0]
 8015292:	69fb      	ldr	r3, [r7, #28]
 8015294:	429a      	cmp	r2, r3
 8015296:	d11b      	bne.n	80152d0 <json_object_get_cell_ix+0xb6>
			continue;
		}
		key_to_check = object->names[cell];
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	68da      	ldr	r2, [r3, #12]
 801529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801529e:	009b      	lsls	r3, r3, #2
 80152a0:	4413      	add	r3, r2
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	61bb      	str	r3, [r7, #24]
		key_to_check_len = strlen(key_to_check);
 80152a6:	69b8      	ldr	r0, [r7, #24]
 80152a8:	f7eb f824 	bl	80002f4 <strlen>
 80152ac:	6178      	str	r0, [r7, #20]
		if (key_to_check_len == key_len
 80152ae:	697a      	ldr	r2, [r7, #20]
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	429a      	cmp	r2, r3
 80152b4:	d10d      	bne.n	80152d2 <json_object_get_cell_ix+0xb8>
				&& strncmp(key, key_to_check, key_len) == 0) {
 80152b6:	687a      	ldr	r2, [r7, #4]
 80152b8:	69b9      	ldr	r1, [r7, #24]
 80152ba:	68b8      	ldr	r0, [r7, #8]
 80152bc:	f003 fa70 	bl	80187a0 <strncmp>
 80152c0:	4603      	mov	r3, r0
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d105      	bne.n	80152d2 <json_object_get_cell_ix+0xb8>
			*out_found = PARSON_TRUE;
 80152c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152c8:	2201      	movs	r2, #1
 80152ca:	601a      	str	r2, [r3, #0]
			return ix;
 80152cc:	6a3b      	ldr	r3, [r7, #32]
 80152ce:	e00a      	b.n	80152e6 <json_object_get_cell_ix+0xcc>
			continue;
 80152d0:	bf00      	nop
	for (i = 0; i < object->cell_capacity; i++) {
 80152d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152d4:	3301      	adds	r3, #1
 80152d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	6a1b      	ldr	r3, [r3, #32]
 80152dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152de:	429a      	cmp	r2, r3
 80152e0:	d3ba      	bcc.n	8015258 <json_object_get_cell_ix+0x3e>
		}
	}
	return OBJECT_INVALID_IX;
 80152e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	3730      	adds	r7, #48	; 0x30
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd80      	pop	{r7, pc}

080152ee <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, char *name,
		JSON_Value *value) {
 80152ee:	b580      	push	{r7, lr}
 80152f0:	b08a      	sub	sp, #40	; 0x28
 80152f2:	af02      	add	r7, sp, #8
 80152f4:	60f8      	str	r0, [r7, #12]
 80152f6:	60b9      	str	r1, [r7, #8]
 80152f8:	607a      	str	r2, [r7, #4]
	unsigned long hash = 0;
 80152fa:	2300      	movs	r3, #0
 80152fc:	61bb      	str	r3, [r7, #24]
	parson_bool_t found = PARSON_FALSE;
 80152fe:	2300      	movs	r3, #0
 8015300:	613b      	str	r3, [r7, #16]
	size_t cell_ix = 0;
 8015302:	2300      	movs	r3, #0
 8015304:	61fb      	str	r3, [r7, #28]
	JSON_Status res = JSONFailure;
 8015306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801530a:	617b      	str	r3, [r7, #20]

	if (!object || !name || !value) {
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d005      	beq.n	801531e <json_object_add+0x30>
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d002      	beq.n	801531e <json_object_add+0x30>
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d102      	bne.n	8015324 <json_object_add+0x36>
		return JSONFailure;
 801531e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015322:	e06e      	b.n	8015402 <json_object_add+0x114>
	}

	hash = hash_string(name, strlen(name));
 8015324:	68b8      	ldr	r0, [r7, #8]
 8015326:	f7ea ffe5 	bl	80002f4 <strlen>
 801532a:	4603      	mov	r3, r0
 801532c:	4619      	mov	r1, r3
 801532e:	68b8      	ldr	r0, [r7, #8]
 8015330:	f7ff fd92 	bl	8014e58 <hash_string>
 8015334:	61b8      	str	r0, [r7, #24]
	found = PARSON_FALSE;
 8015336:	2300      	movs	r3, #0
 8015338:	613b      	str	r3, [r7, #16]
	cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 801533a:	68b8      	ldr	r0, [r7, #8]
 801533c:	f7ea ffda 	bl	80002f4 <strlen>
 8015340:	4602      	mov	r2, r0
 8015342:	f107 0310 	add.w	r3, r7, #16
 8015346:	9300      	str	r3, [sp, #0]
 8015348:	69bb      	ldr	r3, [r7, #24]
 801534a:	68b9      	ldr	r1, [r7, #8]
 801534c:	68f8      	ldr	r0, [r7, #12]
 801534e:	f7ff ff64 	bl	801521a <json_object_get_cell_ix>
 8015352:	61f8      	str	r0, [r7, #28]
	if (found) {
 8015354:	693b      	ldr	r3, [r7, #16]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d002      	beq.n	8015360 <json_object_add+0x72>
		return JSONFailure;
 801535a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801535e:	e050      	b.n	8015402 <json_object_add+0x114>
	}

	if (object->count >= object->item_capacity) {
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	699a      	ldr	r2, [r3, #24]
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	69db      	ldr	r3, [r3, #28]
 8015368:	429a      	cmp	r2, r3
 801536a:	d316      	bcc.n	801539a <json_object_add+0xac>
		res = json_object_grow_and_rehash(object);
 801536c:	68f8      	ldr	r0, [r7, #12]
 801536e:	f7ff fee9 	bl	8015144 <json_object_grow_and_rehash>
 8015372:	6178      	str	r0, [r7, #20]
		if (res != JSONSuccess) {
 8015374:	697b      	ldr	r3, [r7, #20]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d002      	beq.n	8015380 <json_object_add+0x92>
			return JSONFailure;
 801537a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801537e:	e040      	b.n	8015402 <json_object_add+0x114>
		}
		cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash,
 8015380:	68b8      	ldr	r0, [r7, #8]
 8015382:	f7ea ffb7 	bl	80002f4 <strlen>
 8015386:	4602      	mov	r2, r0
 8015388:	f107 0310 	add.w	r3, r7, #16
 801538c:	9300      	str	r3, [sp, #0]
 801538e:	69bb      	ldr	r3, [r7, #24]
 8015390:	68b9      	ldr	r1, [r7, #8]
 8015392:	68f8      	ldr	r0, [r7, #12]
 8015394:	f7ff ff41 	bl	801521a <json_object_get_cell_ix>
 8015398:	61f8      	str	r0, [r7, #28]
				&found);
	}

	object->names[object->count] = name;
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	68da      	ldr	r2, [r3, #12]
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	699b      	ldr	r3, [r3, #24]
 80153a2:	009b      	lsls	r3, r3, #2
 80153a4:	4413      	add	r3, r2
 80153a6:	68ba      	ldr	r2, [r7, #8]
 80153a8:	601a      	str	r2, [r3, #0]
	object->cells[cell_ix] = object->count;
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	685a      	ldr	r2, [r3, #4]
 80153ae:	69fb      	ldr	r3, [r7, #28]
 80153b0:	009b      	lsls	r3, r3, #2
 80153b2:	4413      	add	r3, r2
 80153b4:	68fa      	ldr	r2, [r7, #12]
 80153b6:	6992      	ldr	r2, [r2, #24]
 80153b8:	601a      	str	r2, [r3, #0]
	object->values[object->count] = value;
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	691a      	ldr	r2, [r3, #16]
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	699b      	ldr	r3, [r3, #24]
 80153c2:	009b      	lsls	r3, r3, #2
 80153c4:	4413      	add	r3, r2
 80153c6:	687a      	ldr	r2, [r7, #4]
 80153c8:	601a      	str	r2, [r3, #0]
	object->cell_ixs[object->count] = cell_ix;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	695a      	ldr	r2, [r3, #20]
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	699b      	ldr	r3, [r3, #24]
 80153d2:	009b      	lsls	r3, r3, #2
 80153d4:	4413      	add	r3, r2
 80153d6:	69fa      	ldr	r2, [r7, #28]
 80153d8:	601a      	str	r2, [r3, #0]
	object->hashes[object->count] = hash;
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	689a      	ldr	r2, [r3, #8]
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	699b      	ldr	r3, [r3, #24]
 80153e2:	009b      	lsls	r3, r3, #2
 80153e4:	4413      	add	r3, r2
 80153e6:	69ba      	ldr	r2, [r7, #24]
 80153e8:	601a      	str	r2, [r3, #0]
	object->count++;
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	699b      	ldr	r3, [r3, #24]
 80153ee:	1c5a      	adds	r2, r3, #1
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	619a      	str	r2, [r3, #24]
	value->parent = json_object_get_wrapping_value(object);
 80153f4:	68f8      	ldr	r0, [r7, #12]
 80153f6:	f001 ffa9 	bl	801734c <json_object_get_wrapping_value>
 80153fa:	4602      	mov	r2, r0
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	601a      	str	r2, [r3, #0]

	return JSONSuccess;
 8015400:	2300      	movs	r3, #0
}
 8015402:	4618      	mov	r0, r3
 8015404:	3720      	adds	r7, #32
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}

0801540a <json_object_getn_value>:

static JSON_Value* json_object_getn_value(const JSON_Object *object,
		const char *name, size_t name_len) {
 801540a:	b580      	push	{r7, lr}
 801540c:	b08a      	sub	sp, #40	; 0x28
 801540e:	af02      	add	r7, sp, #8
 8015410:	60f8      	str	r0, [r7, #12]
 8015412:	60b9      	str	r1, [r7, #8]
 8015414:	607a      	str	r2, [r7, #4]
	unsigned long hash = 0;
 8015416:	2300      	movs	r3, #0
 8015418:	61fb      	str	r3, [r7, #28]
	parson_bool_t found = PARSON_FALSE;
 801541a:	2300      	movs	r3, #0
 801541c:	613b      	str	r3, [r7, #16]
	unsigned long cell_ix = 0;
 801541e:	2300      	movs	r3, #0
 8015420:	61bb      	str	r3, [r7, #24]
	size_t item_ix = 0;
 8015422:	2300      	movs	r3, #0
 8015424:	617b      	str	r3, [r7, #20]
	if (!object || !name) {
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d002      	beq.n	8015432 <json_object_getn_value+0x28>
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d101      	bne.n	8015436 <json_object_getn_value+0x2c>
		return NULL;
 8015432:	2300      	movs	r3, #0
 8015434:	e022      	b.n	801547c <json_object_getn_value+0x72>
	}
	hash = hash_string(name, name_len);
 8015436:	6879      	ldr	r1, [r7, #4]
 8015438:	68b8      	ldr	r0, [r7, #8]
 801543a:	f7ff fd0d 	bl	8014e58 <hash_string>
 801543e:	61f8      	str	r0, [r7, #28]
	found = PARSON_FALSE;
 8015440:	2300      	movs	r3, #0
 8015442:	613b      	str	r3, [r7, #16]
	cell_ix = json_object_get_cell_ix(object, name, name_len, hash, &found);
 8015444:	f107 0310 	add.w	r3, r7, #16
 8015448:	9300      	str	r3, [sp, #0]
 801544a:	69fb      	ldr	r3, [r7, #28]
 801544c:	687a      	ldr	r2, [r7, #4]
 801544e:	68b9      	ldr	r1, [r7, #8]
 8015450:	68f8      	ldr	r0, [r7, #12]
 8015452:	f7ff fee2 	bl	801521a <json_object_get_cell_ix>
 8015456:	61b8      	str	r0, [r7, #24]
	if (!found) {
 8015458:	693b      	ldr	r3, [r7, #16]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d101      	bne.n	8015462 <json_object_getn_value+0x58>
		return NULL;
 801545e:	2300      	movs	r3, #0
 8015460:	e00c      	b.n	801547c <json_object_getn_value+0x72>
	}
	item_ix = object->cells[cell_ix];
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	685a      	ldr	r2, [r3, #4]
 8015466:	69bb      	ldr	r3, [r7, #24]
 8015468:	009b      	lsls	r3, r3, #2
 801546a:	4413      	add	r3, r2
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	617b      	str	r3, [r7, #20]
	return object->values[item_ix];
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	691a      	ldr	r2, [r3, #16]
 8015474:	697b      	ldr	r3, [r7, #20]
 8015476:	009b      	lsls	r3, r3, #2
 8015478:	4413      	add	r3, r2
 801547a:	681b      	ldr	r3, [r3, #0]
}
 801547c:	4618      	mov	r0, r3
 801547e:	3720      	adds	r7, #32
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}

08015484 <json_object_free>:
	}
	temp_object = json_value_get_object(temp_value);
	return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
}

static void json_object_free(JSON_Object *object) {
 8015484:	b580      	push	{r7, lr}
 8015486:	b082      	sub	sp, #8
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
	json_object_deinit(object, PARSON_TRUE, PARSON_TRUE);
 801548c:	2201      	movs	r2, #1
 801548e:	2101      	movs	r1, #1
 8015490:	6878      	ldr	r0, [r7, #4]
 8015492:	f7ff fdef 	bl	8015074 <json_object_deinit>
	parson_free(object);
 8015496:	4b04      	ldr	r3, [pc, #16]	; (80154a8 <json_object_free+0x24>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	6878      	ldr	r0, [r7, #4]
 801549c:	4798      	blx	r3
}
 801549e:	bf00      	nop
 80154a0:	3708      	adds	r7, #8
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bd80      	pop	{r7, pc}
 80154a6:	bf00      	nop
 80154a8:	2400003c 	.word	0x2400003c

080154ac <json_array_make>:

/* JSON Array */
static JSON_Array* json_array_make(JSON_Value *wrapping_value) {
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b084      	sub	sp, #16
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
	JSON_Array *new_array = (JSON_Array*) parson_malloc(sizeof(JSON_Array));
 80154b4:	4b0d      	ldr	r3, [pc, #52]	; (80154ec <json_array_make+0x40>)
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	2010      	movs	r0, #16
 80154ba:	4798      	blx	r3
 80154bc:	60f8      	str	r0, [r7, #12]
	if (new_array == NULL) {
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d101      	bne.n	80154c8 <json_array_make+0x1c>
		return NULL;
 80154c4:	2300      	movs	r3, #0
 80154c6:	e00c      	b.n	80154e2 <json_array_make+0x36>
	}
	new_array->wrapping_value = wrapping_value;
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	687a      	ldr	r2, [r7, #4]
 80154cc:	601a      	str	r2, [r3, #0]
	new_array->items = (JSON_Value**) NULL;
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	2200      	movs	r2, #0
 80154d2:	605a      	str	r2, [r3, #4]
	new_array->capacity = 0;
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	2200      	movs	r2, #0
 80154d8:	60da      	str	r2, [r3, #12]
	new_array->count = 0;
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	2200      	movs	r2, #0
 80154de:	609a      	str	r2, [r3, #8]
	return new_array;
 80154e0:	68fb      	ldr	r3, [r7, #12]
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	3710      	adds	r7, #16
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}
 80154ea:	bf00      	nop
 80154ec:	24000038 	.word	0x24000038

080154f0 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b084      	sub	sp, #16
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
 80154f8:	6039      	str	r1, [r7, #0]
	if (array->count >= array->capacity) {
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	689a      	ldr	r2, [r3, #8]
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	68db      	ldr	r3, [r3, #12]
 8015502:	429a      	cmp	r2, r3
 8015504:	d310      	bcc.n	8015528 <json_array_add+0x38>
		size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	68db      	ldr	r3, [r3, #12]
 801550a:	005b      	lsls	r3, r3, #1
 801550c:	2b10      	cmp	r3, #16
 801550e:	bf38      	it	cc
 8015510:	2310      	movcc	r3, #16
 8015512:	60fb      	str	r3, [r7, #12]
		if (json_array_resize(array, new_capacity) != JSONSuccess) {
 8015514:	68f9      	ldr	r1, [r7, #12]
 8015516:	6878      	ldr	r0, [r7, #4]
 8015518:	f000 f81e 	bl	8015558 <json_array_resize>
 801551c:	4603      	mov	r3, r0
 801551e:	2b00      	cmp	r3, #0
 8015520:	d002      	beq.n	8015528 <json_array_add+0x38>
			return JSONFailure;
 8015522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015526:	e013      	b.n	8015550 <json_array_add+0x60>
		}
	}
	value->parent = json_array_get_wrapping_value(array);
 8015528:	6878      	ldr	r0, [r7, #4]
 801552a:	f001 ff4c 	bl	80173c6 <json_array_get_wrapping_value>
 801552e:	4602      	mov	r2, r0
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	601a      	str	r2, [r3, #0]
	array->items[array->count] = value;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	685a      	ldr	r2, [r3, #4]
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	689b      	ldr	r3, [r3, #8]
 801553c:	009b      	lsls	r3, r3, #2
 801553e:	4413      	add	r3, r2
 8015540:	683a      	ldr	r2, [r7, #0]
 8015542:	601a      	str	r2, [r3, #0]
	array->count++;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	689b      	ldr	r3, [r3, #8]
 8015548:	1c5a      	adds	r2, r3, #1
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	609a      	str	r2, [r3, #8]
	return JSONSuccess;
 801554e:	2300      	movs	r3, #0
}
 8015550:	4618      	mov	r0, r3
 8015552:	3710      	adds	r7, #16
 8015554:	46bd      	mov	sp, r7
 8015556:	bd80      	pop	{r7, pc}

08015558 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 8015558:	b580      	push	{r7, lr}
 801555a:	b084      	sub	sp, #16
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	6039      	str	r1, [r7, #0]
	JSON_Value **new_items = NULL;
 8015562:	2300      	movs	r3, #0
 8015564:	60fb      	str	r3, [r7, #12]
	if (new_capacity == 0) {
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d102      	bne.n	8015572 <json_array_resize+0x1a>
		return JSONFailure;
 801556c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015570:	e02a      	b.n	80155c8 <json_array_resize+0x70>
	}
	new_items = (JSON_Value**) parson_malloc(
 8015572:	4b17      	ldr	r3, [pc, #92]	; (80155d0 <json_array_resize+0x78>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	683a      	ldr	r2, [r7, #0]
 8015578:	0092      	lsls	r2, r2, #2
 801557a:	4610      	mov	r0, r2
 801557c:	4798      	blx	r3
 801557e:	60f8      	str	r0, [r7, #12]
			new_capacity * sizeof(JSON_Value*));
	if (new_items == NULL) {
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d102      	bne.n	801558c <json_array_resize+0x34>
		return JSONFailure;
 8015586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801558a:	e01d      	b.n	80155c8 <json_array_resize+0x70>
	}
	if (array->items != NULL && array->count > 0) {
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	685b      	ldr	r3, [r3, #4]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d00c      	beq.n	80155ae <json_array_resize+0x56>
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	689b      	ldr	r3, [r3, #8]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d008      	beq.n	80155ae <json_array_resize+0x56>
		memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6859      	ldr	r1, [r3, #4]
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	689b      	ldr	r3, [r3, #8]
 80155a4:	009b      	lsls	r3, r3, #2
 80155a6:	461a      	mov	r2, r3
 80155a8:	68f8      	ldr	r0, [r7, #12]
 80155aa:	f002 feaf 	bl	801830c <memcpy>
	}
	parson_free(array->items);
 80155ae:	4b09      	ldr	r3, [pc, #36]	; (80155d4 <json_array_resize+0x7c>)
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	6852      	ldr	r2, [r2, #4]
 80155b6:	4610      	mov	r0, r2
 80155b8:	4798      	blx	r3
	array->items = new_items;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	68fa      	ldr	r2, [r7, #12]
 80155be:	605a      	str	r2, [r3, #4]
	array->capacity = new_capacity;
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	683a      	ldr	r2, [r7, #0]
 80155c4:	60da      	str	r2, [r3, #12]
	return JSONSuccess;
 80155c6:	2300      	movs	r3, #0
}
 80155c8:	4618      	mov	r0, r3
 80155ca:	3710      	adds	r7, #16
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bd80      	pop	{r7, pc}
 80155d0:	24000038 	.word	0x24000038
 80155d4:	2400003c 	.word	0x2400003c

080155d8 <json_array_free>:

static void json_array_free(JSON_Array *array) {
 80155d8:	b580      	push	{r7, lr}
 80155da:	b084      	sub	sp, #16
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
	size_t i;
	for (i = 0; i < array->count; i++) {
 80155e0:	2300      	movs	r3, #0
 80155e2:	60fb      	str	r3, [r7, #12]
 80155e4:	e00b      	b.n	80155fe <json_array_free+0x26>
		json_value_free(array->items[i]);
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	685a      	ldr	r2, [r3, #4]
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	009b      	lsls	r3, r3, #2
 80155ee:	4413      	add	r3, r2
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	4618      	mov	r0, r3
 80155f4:	f001 ff92 	bl	801751c <json_value_free>
	for (i = 0; i < array->count; i++) {
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	3301      	adds	r3, #1
 80155fc:	60fb      	str	r3, [r7, #12]
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	689b      	ldr	r3, [r3, #8]
 8015602:	68fa      	ldr	r2, [r7, #12]
 8015604:	429a      	cmp	r2, r3
 8015606:	d3ee      	bcc.n	80155e6 <json_array_free+0xe>
	}
	parson_free(array->items);
 8015608:	4b06      	ldr	r3, [pc, #24]	; (8015624 <json_array_free+0x4c>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	687a      	ldr	r2, [r7, #4]
 801560e:	6852      	ldr	r2, [r2, #4]
 8015610:	4610      	mov	r0, r2
 8015612:	4798      	blx	r3
	parson_free(array);
 8015614:	4b03      	ldr	r3, [pc, #12]	; (8015624 <json_array_free+0x4c>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	4798      	blx	r3
}
 801561c:	bf00      	nop
 801561e:	3710      	adds	r7, #16
 8015620:	46bd      	mov	sp, r7
 8015622:	bd80      	pop	{r7, pc}
 8015624:	2400003c 	.word	0x2400003c

08015628 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value* json_value_init_string_no_copy(char *string, size_t length) {
 8015628:	b580      	push	{r7, lr}
 801562a:	b084      	sub	sp, #16
 801562c:	af00      	add	r7, sp, #0
 801562e:	6078      	str	r0, [r7, #4]
 8015630:	6039      	str	r1, [r7, #0]
	JSON_Value *new_value = (JSON_Value*) parson_malloc(sizeof(JSON_Value));
 8015632:	4b0d      	ldr	r3, [pc, #52]	; (8015668 <json_value_init_string_no_copy+0x40>)
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	2010      	movs	r0, #16
 8015638:	4798      	blx	r3
 801563a:	60f8      	str	r0, [r7, #12]
	if (!new_value) {
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d101      	bne.n	8015646 <json_value_init_string_no_copy+0x1e>
		return NULL;
 8015642:	2300      	movs	r3, #0
 8015644:	e00c      	b.n	8015660 <json_value_init_string_no_copy+0x38>
	}
	new_value->parent = NULL;
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	2200      	movs	r2, #0
 801564a:	601a      	str	r2, [r3, #0]
	new_value->type = JSONString;
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	2202      	movs	r2, #2
 8015650:	605a      	str	r2, [r3, #4]
	new_value->value.string.chars = string;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	687a      	ldr	r2, [r7, #4]
 8015656:	609a      	str	r2, [r3, #8]
	new_value->value.string.length = length;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	683a      	ldr	r2, [r7, #0]
 801565c:	60da      	str	r2, [r3, #12]
	return new_value;
 801565e:	68fb      	ldr	r3, [r7, #12]
}
 8015660:	4618      	mov	r0, r3
 8015662:	3710      	adds	r7, #16
 8015664:	46bd      	mov	sp, r7
 8015666:	bd80      	pop	{r7, pc}
 8015668:	24000038 	.word	0x24000038

0801566c <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 801566c:	b480      	push	{r7}
 801566e:	b083      	sub	sp, #12
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
	if (**string != '\"') {
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	2b22      	cmp	r3, #34	; 0x22
 801567c:	d002      	beq.n	8015684 <skip_quotes+0x18>
		return JSONFailure;
 801567e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015682:	e02f      	b.n	80156e4 <skip_quotes+0x78>
	}
	SKIP_CHAR(string);
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	1c5a      	adds	r2, r3, #1
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	601a      	str	r2, [r3, #0]
	while (**string != '\"') {
 801568e:	e01e      	b.n	80156ce <skip_quotes+0x62>
		if (**string == '\0') {
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	781b      	ldrb	r3, [r3, #0]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d102      	bne.n	80156a0 <skip_quotes+0x34>
			return JSONFailure;
 801569a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801569e:	e021      	b.n	80156e4 <skip_quotes+0x78>
		} else if (**string == '\\') {
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	781b      	ldrb	r3, [r3, #0]
 80156a6:	2b5c      	cmp	r3, #92	; 0x5c
 80156a8:	d10c      	bne.n	80156c4 <skip_quotes+0x58>
			SKIP_CHAR(string);
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	1c5a      	adds	r2, r3, #1
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	601a      	str	r2, [r3, #0]
			if (**string == '\0') {
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	781b      	ldrb	r3, [r3, #0]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d102      	bne.n	80156c4 <skip_quotes+0x58>
				return JSONFailure;
 80156be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80156c2:	e00f      	b.n	80156e4 <skip_quotes+0x78>
			}
		}
		SKIP_CHAR(string);
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	1c5a      	adds	r2, r3, #1
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	601a      	str	r2, [r3, #0]
	while (**string != '\"') {
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	781b      	ldrb	r3, [r3, #0]
 80156d4:	2b22      	cmp	r3, #34	; 0x22
 80156d6:	d1db      	bne.n	8015690 <skip_quotes+0x24>
	}
	SKIP_CHAR(string);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	1c5a      	adds	r2, r3, #1
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	601a      	str	r2, [r3, #0]
	return JSONSuccess;
 80156e2:	2300      	movs	r3, #0
}
 80156e4:	4618      	mov	r0, r3
 80156e6:	370c      	adds	r7, #12
 80156e8:	46bd      	mov	sp, r7
 80156ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ee:	4770      	bx	lr

080156f0 <parse_utf16>:

static JSON_Status parse_utf16(const char **unprocessed, char **processed) {
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b088      	sub	sp, #32
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
 80156f8:	6039      	str	r1, [r7, #0]
	unsigned int cp, lead, trail;
	char *processed_ptr = *processed;
 80156fa:	683b      	ldr	r3, [r7, #0]
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	61fb      	str	r3, [r7, #28]
	const char *unprocessed_ptr = *unprocessed;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	61bb      	str	r3, [r7, #24]
	JSON_Status status = JSONFailure;
 8015706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801570a:	617b      	str	r3, [r7, #20]
	unprocessed_ptr++; /* skips u */
 801570c:	69bb      	ldr	r3, [r7, #24]
 801570e:	3301      	adds	r3, #1
 8015710:	61bb      	str	r3, [r7, #24]
	status = parse_utf16_hex(unprocessed_ptr, &cp);
 8015712:	f107 030c 	add.w	r3, r7, #12
 8015716:	4619      	mov	r1, r3
 8015718:	69b8      	ldr	r0, [r7, #24]
 801571a:	f7ff f9dc 	bl	8014ad6 <parse_utf16_hex>
 801571e:	6178      	str	r0, [r7, #20]
	if (status != JSONSuccess) {
 8015720:	697b      	ldr	r3, [r7, #20]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d002      	beq.n	801572c <parse_utf16+0x3c>
		return JSONFailure;
 8015726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801572a:	e0ce      	b.n	80158ca <parse_utf16+0x1da>
	}
	if (cp < 0x80) {
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	2b7f      	cmp	r3, #127	; 0x7f
 8015730:	d804      	bhi.n	801573c <parse_utf16+0x4c>
		processed_ptr[0] = (char) cp; /* 0xxxxxxx */
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	b2da      	uxtb	r2, r3
 8015736:	69fb      	ldr	r3, [r7, #28]
 8015738:	701a      	strb	r2, [r3, #0]
 801573a:	e0bc      	b.n	80158b6 <parse_utf16+0x1c6>
	} else if (cp < 0x800) {
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015742:	d219      	bcs.n	8015778 <parse_utf16+0x88>
		processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	099b      	lsrs	r3, r3, #6
 8015748:	b2db      	uxtb	r3, r3
 801574a:	f003 031f 	and.w	r3, r3, #31
 801574e:	b2db      	uxtb	r3, r3
 8015750:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8015754:	b2da      	uxtb	r2, r3
 8015756:	69fb      	ldr	r3, [r7, #28]
 8015758:	701a      	strb	r2, [r3, #0]
		processed_ptr[1] = ((cp) & 0x3F) | 0x80; /* 10xxxxxx */
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	b2db      	uxtb	r3, r3
 801575e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015762:	b2da      	uxtb	r2, r3
 8015764:	69fb      	ldr	r3, [r7, #28]
 8015766:	3301      	adds	r3, #1
 8015768:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801576c:	b2d2      	uxtb	r2, r2
 801576e:	701a      	strb	r2, [r3, #0]
		processed_ptr += 1;
 8015770:	69fb      	ldr	r3, [r7, #28]
 8015772:	3301      	adds	r3, #1
 8015774:	61fb      	str	r3, [r7, #28]
 8015776:	e09e      	b.n	80158b6 <parse_utf16+0x1c6>
	} else if (cp < 0xD800 || cp > 0xDFFF) {
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801577e:	d303      	bcc.n	8015788 <parse_utf16+0x98>
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8015786:	d325      	bcc.n	80157d4 <parse_utf16+0xe4>
		processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	0b1b      	lsrs	r3, r3, #12
 801578c:	b2db      	uxtb	r3, r3
 801578e:	f003 030f 	and.w	r3, r3, #15
 8015792:	b2db      	uxtb	r3, r3
 8015794:	f063 031f 	orn	r3, r3, #31
 8015798:	b2da      	uxtb	r2, r3
 801579a:	69fb      	ldr	r3, [r7, #28]
 801579c:	701a      	strb	r2, [r3, #0]
		processed_ptr[1] = ((cp >> 6) & 0x3F) | 0x80; /* 10xxxxxx */
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	099b      	lsrs	r3, r3, #6
 80157a2:	b2db      	uxtb	r3, r3
 80157a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80157a8:	b2da      	uxtb	r2, r3
 80157aa:	69fb      	ldr	r3, [r7, #28]
 80157ac:	3301      	adds	r3, #1
 80157ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80157b2:	b2d2      	uxtb	r2, r2
 80157b4:	701a      	strb	r2, [r3, #0]
		processed_ptr[2] = ((cp) & 0x3F) | 0x80; /* 10xxxxxx */
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	b2db      	uxtb	r3, r3
 80157ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80157be:	b2da      	uxtb	r2, r3
 80157c0:	69fb      	ldr	r3, [r7, #28]
 80157c2:	3302      	adds	r3, #2
 80157c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80157c8:	b2d2      	uxtb	r2, r2
 80157ca:	701a      	strb	r2, [r3, #0]
		processed_ptr += 2;
 80157cc:	69fb      	ldr	r3, [r7, #28]
 80157ce:	3302      	adds	r3, #2
 80157d0:	61fb      	str	r3, [r7, #28]
 80157d2:	e070      	b.n	80158b6 <parse_utf16+0x1c6>
	} else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80157da:	d369      	bcc.n	80158b0 <parse_utf16+0x1c0>
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80157e2:	d265      	bcs.n	80158b0 <parse_utf16+0x1c0>
		lead = cp;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	613b      	str	r3, [r7, #16]
		unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 80157e8:	69bb      	ldr	r3, [r7, #24]
 80157ea:	3304      	adds	r3, #4
 80157ec:	61bb      	str	r3, [r7, #24]
		if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 80157ee:	69bb      	ldr	r3, [r7, #24]
 80157f0:	1c5a      	adds	r2, r3, #1
 80157f2:	61ba      	str	r2, [r7, #24]
 80157f4:	781b      	ldrb	r3, [r3, #0]
 80157f6:	2b5c      	cmp	r3, #92	; 0x5c
 80157f8:	d105      	bne.n	8015806 <parse_utf16+0x116>
 80157fa:	69bb      	ldr	r3, [r7, #24]
 80157fc:	1c5a      	adds	r2, r3, #1
 80157fe:	61ba      	str	r2, [r7, #24]
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	2b75      	cmp	r3, #117	; 0x75
 8015804:	d002      	beq.n	801580c <parse_utf16+0x11c>
			return JSONFailure;
 8015806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801580a:	e05e      	b.n	80158ca <parse_utf16+0x1da>
		}
		status = parse_utf16_hex(unprocessed_ptr, &trail);
 801580c:	f107 0308 	add.w	r3, r7, #8
 8015810:	4619      	mov	r1, r3
 8015812:	69b8      	ldr	r0, [r7, #24]
 8015814:	f7ff f95f 	bl	8014ad6 <parse_utf16_hex>
 8015818:	6178      	str	r0, [r7, #20]
		if (status != JSONSuccess || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 801581a:	697b      	ldr	r3, [r7, #20]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d107      	bne.n	8015830 <parse_utf16+0x140>
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8015826:	d303      	bcc.n	8015830 <parse_utf16+0x140>
 8015828:	68bb      	ldr	r3, [r7, #8]
 801582a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801582e:	d302      	bcc.n	8015836 <parse_utf16+0x146>
			return JSONFailure;
 8015830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015834:	e049      	b.n	80158ca <parse_utf16+0x1da>
		}
		cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF))
 8015836:	693b      	ldr	r3, [r7, #16]
 8015838:	029a      	lsls	r2, r3, #10
 801583a:	4b26      	ldr	r3, [pc, #152]	; (80158d4 <parse_utf16+0x1e4>)
 801583c:	4013      	ands	r3, r2
 801583e:	68ba      	ldr	r2, [r7, #8]
 8015840:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8015844:	4313      	orrs	r3, r2
				+ 0x010000;
 8015846:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
		cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF))
 801584a:	60fb      	str	r3, [r7, #12]
		processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	0c9b      	lsrs	r3, r3, #18
 8015850:	b2db      	uxtb	r3, r3
 8015852:	f003 0307 	and.w	r3, r3, #7
 8015856:	b2db      	uxtb	r3, r3
 8015858:	f063 030f 	orn	r3, r3, #15
 801585c:	b2da      	uxtb	r2, r3
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	701a      	strb	r2, [r3, #0]
		processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	0b1b      	lsrs	r3, r3, #12
 8015866:	b2db      	uxtb	r3, r3
 8015868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801586c:	b2da      	uxtb	r2, r3
 801586e:	69fb      	ldr	r3, [r7, #28]
 8015870:	3301      	adds	r3, #1
 8015872:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015876:	b2d2      	uxtb	r2, r2
 8015878:	701a      	strb	r2, [r3, #0]
		processed_ptr[2] = (((cp >> 6) & 0x3F) | 0x80); /* 10xxxxxx */
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	099b      	lsrs	r3, r3, #6
 801587e:	b2db      	uxtb	r3, r3
 8015880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015884:	b2da      	uxtb	r2, r3
 8015886:	69fb      	ldr	r3, [r7, #28]
 8015888:	3302      	adds	r3, #2
 801588a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801588e:	b2d2      	uxtb	r2, r2
 8015890:	701a      	strb	r2, [r3, #0]
		processed_ptr[3] = (((cp) & 0x3F) | 0x80); /* 10xxxxxx */
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	b2db      	uxtb	r3, r3
 8015896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801589a:	b2da      	uxtb	r2, r3
 801589c:	69fb      	ldr	r3, [r7, #28]
 801589e:	3303      	adds	r3, #3
 80158a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80158a4:	b2d2      	uxtb	r2, r2
 80158a6:	701a      	strb	r2, [r3, #0]
		processed_ptr += 3;
 80158a8:	69fb      	ldr	r3, [r7, #28]
 80158aa:	3303      	adds	r3, #3
 80158ac:	61fb      	str	r3, [r7, #28]
 80158ae:	e002      	b.n	80158b6 <parse_utf16+0x1c6>
	} else { /* trail surrogate before lead surrogate */
		return JSONFailure;
 80158b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80158b4:	e009      	b.n	80158ca <parse_utf16+0x1da>
	}
	unprocessed_ptr += 3;
 80158b6:	69bb      	ldr	r3, [r7, #24]
 80158b8:	3303      	adds	r3, #3
 80158ba:	61bb      	str	r3, [r7, #24]
	*processed = processed_ptr;
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	69fa      	ldr	r2, [r7, #28]
 80158c0:	601a      	str	r2, [r3, #0]
	*unprocessed = unprocessed_ptr;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	69ba      	ldr	r2, [r7, #24]
 80158c6:	601a      	str	r2, [r3, #0]
	return JSONSuccess;
 80158c8:	2300      	movs	r3, #0
}
 80158ca:	4618      	mov	r0, r3
 80158cc:	3720      	adds	r7, #32
 80158ce:	46bd      	mov	sp, r7
 80158d0:	bd80      	pop	{r7, pc}
 80158d2:	bf00      	nop
 80158d4:	000ffc00 	.word	0x000ffc00

080158d8 <process_string>:

/* Copies and processes passed string up to supplied length.
 Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t input_len,
		size_t *output_len) {
 80158d8:	b580      	push	{r7, lr}
 80158da:	b08a      	sub	sp, #40	; 0x28
 80158dc:	af00      	add	r7, sp, #0
 80158de:	60f8      	str	r0, [r7, #12]
 80158e0:	60b9      	str	r1, [r7, #8]
 80158e2:	607a      	str	r2, [r7, #4]
	const char *input_ptr = input;
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	617b      	str	r3, [r7, #20]
	size_t initial_size = (input_len + 1) * sizeof(char);
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	3301      	adds	r3, #1
 80158ec:	627b      	str	r3, [r7, #36]	; 0x24
	size_t final_size = 0;
 80158ee:	2300      	movs	r3, #0
 80158f0:	623b      	str	r3, [r7, #32]
	char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 80158f2:	2300      	movs	r3, #0
 80158f4:	61fb      	str	r3, [r7, #28]
 80158f6:	2300      	movs	r3, #0
 80158f8:	613b      	str	r3, [r7, #16]
 80158fa:	2300      	movs	r3, #0
 80158fc:	61bb      	str	r3, [r7, #24]
	output = (char*) parson_malloc(initial_size);
 80158fe:	4b69      	ldr	r3, [pc, #420]	; (8015aa4 <process_string+0x1cc>)
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015904:	4798      	blx	r3
 8015906:	61f8      	str	r0, [r7, #28]
	if (output == NULL) {
 8015908:	69fb      	ldr	r3, [r7, #28]
 801590a:	2b00      	cmp	r3, #0
 801590c:	f000 80b9 	beq.w	8015a82 <process_string+0x1aa>
		goto error;
	}
	output_ptr = output;
 8015910:	69fb      	ldr	r3, [r7, #28]
 8015912:	613b      	str	r3, [r7, #16]
	while ((*input_ptr != '\0') && (size_t) (input_ptr - input) < input_len) {
 8015914:	e08a      	b.n	8015a2c <process_string+0x154>
		if (*input_ptr == '\\') {
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	2b5c      	cmp	r3, #92	; 0x5c
 801591c:	d176      	bne.n	8015a0c <process_string+0x134>
			input_ptr++;
 801591e:	697b      	ldr	r3, [r7, #20]
 8015920:	3301      	adds	r3, #1
 8015922:	617b      	str	r3, [r7, #20]
			switch (*input_ptr) {
 8015924:	697b      	ldr	r3, [r7, #20]
 8015926:	781b      	ldrb	r3, [r3, #0]
 8015928:	2b75      	cmp	r3, #117	; 0x75
 801592a:	f300 80ac 	bgt.w	8015a86 <process_string+0x1ae>
 801592e:	2b5c      	cmp	r3, #92	; 0x5c
 8015930:	da04      	bge.n	801593c <process_string+0x64>
 8015932:	2b22      	cmp	r3, #34	; 0x22
 8015934:	d03e      	beq.n	80159b4 <process_string+0xdc>
 8015936:	2b2f      	cmp	r3, #47	; 0x2f
 8015938:	d044      	beq.n	80159c4 <process_string+0xec>
				if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
					goto error;
				}
				break;
			default:
				goto error;
 801593a:	e0a4      	b.n	8015a86 <process_string+0x1ae>
 801593c:	3b5c      	subs	r3, #92	; 0x5c
 801593e:	2b19      	cmp	r3, #25
 8015940:	f200 80a1 	bhi.w	8015a86 <process_string+0x1ae>
 8015944:	a201      	add	r2, pc, #4	; (adr r2, 801594c <process_string+0x74>)
 8015946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801594a:	bf00      	nop
 801594c:	080159bd 	.word	0x080159bd
 8015950:	08015a87 	.word	0x08015a87
 8015954:	08015a87 	.word	0x08015a87
 8015958:	08015a87 	.word	0x08015a87
 801595c:	08015a87 	.word	0x08015a87
 8015960:	08015a87 	.word	0x08015a87
 8015964:	080159cd 	.word	0x080159cd
 8015968:	08015a87 	.word	0x08015a87
 801596c:	08015a87 	.word	0x08015a87
 8015970:	08015a87 	.word	0x08015a87
 8015974:	080159d5 	.word	0x080159d5
 8015978:	08015a87 	.word	0x08015a87
 801597c:	08015a87 	.word	0x08015a87
 8015980:	08015a87 	.word	0x08015a87
 8015984:	08015a87 	.word	0x08015a87
 8015988:	08015a87 	.word	0x08015a87
 801598c:	08015a87 	.word	0x08015a87
 8015990:	08015a87 	.word	0x08015a87
 8015994:	080159dd 	.word	0x080159dd
 8015998:	08015a87 	.word	0x08015a87
 801599c:	08015a87 	.word	0x08015a87
 80159a0:	08015a87 	.word	0x08015a87
 80159a4:	080159e5 	.word	0x080159e5
 80159a8:	08015a87 	.word	0x08015a87
 80159ac:	080159ed 	.word	0x080159ed
 80159b0:	080159f5 	.word	0x080159f5
				*output_ptr = '\"';
 80159b4:	693b      	ldr	r3, [r7, #16]
 80159b6:	2222      	movs	r2, #34	; 0x22
 80159b8:	701a      	strb	r2, [r3, #0]
				break;
 80159ba:	e031      	b.n	8015a20 <process_string+0x148>
				*output_ptr = '\\';
 80159bc:	693b      	ldr	r3, [r7, #16]
 80159be:	225c      	movs	r2, #92	; 0x5c
 80159c0:	701a      	strb	r2, [r3, #0]
				break;
 80159c2:	e02d      	b.n	8015a20 <process_string+0x148>
				*output_ptr = '/';
 80159c4:	693b      	ldr	r3, [r7, #16]
 80159c6:	222f      	movs	r2, #47	; 0x2f
 80159c8:	701a      	strb	r2, [r3, #0]
				break;
 80159ca:	e029      	b.n	8015a20 <process_string+0x148>
				*output_ptr = '\b';
 80159cc:	693b      	ldr	r3, [r7, #16]
 80159ce:	2208      	movs	r2, #8
 80159d0:	701a      	strb	r2, [r3, #0]
				break;
 80159d2:	e025      	b.n	8015a20 <process_string+0x148>
				*output_ptr = '\f';
 80159d4:	693b      	ldr	r3, [r7, #16]
 80159d6:	220c      	movs	r2, #12
 80159d8:	701a      	strb	r2, [r3, #0]
				break;
 80159da:	e021      	b.n	8015a20 <process_string+0x148>
				*output_ptr = '\n';
 80159dc:	693b      	ldr	r3, [r7, #16]
 80159de:	220a      	movs	r2, #10
 80159e0:	701a      	strb	r2, [r3, #0]
				break;
 80159e2:	e01d      	b.n	8015a20 <process_string+0x148>
				*output_ptr = '\r';
 80159e4:	693b      	ldr	r3, [r7, #16]
 80159e6:	220d      	movs	r2, #13
 80159e8:	701a      	strb	r2, [r3, #0]
				break;
 80159ea:	e019      	b.n	8015a20 <process_string+0x148>
				*output_ptr = '\t';
 80159ec:	693b      	ldr	r3, [r7, #16]
 80159ee:	2209      	movs	r2, #9
 80159f0:	701a      	strb	r2, [r3, #0]
				break;
 80159f2:	e015      	b.n	8015a20 <process_string+0x148>
				if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
 80159f4:	f107 0210 	add.w	r2, r7, #16
 80159f8:	f107 0314 	add.w	r3, r7, #20
 80159fc:	4611      	mov	r1, r2
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7ff fe76 	bl	80156f0 <parse_utf16>
 8015a04:	4603      	mov	r3, r0
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d009      	beq.n	8015a1e <process_string+0x146>
					goto error;
 8015a0a:	e041      	b.n	8015a90 <process_string+0x1b8>
			}
		} else if ((unsigned char) *input_ptr < 0x20) {
 8015a0c:	697b      	ldr	r3, [r7, #20]
 8015a0e:	781b      	ldrb	r3, [r3, #0]
 8015a10:	2b1f      	cmp	r3, #31
 8015a12:	d93a      	bls.n	8015a8a <process_string+0x1b2>
			goto error;
			/* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
		} else {
			*output_ptr = *input_ptr;
 8015a14:	697a      	ldr	r2, [r7, #20]
 8015a16:	693b      	ldr	r3, [r7, #16]
 8015a18:	7812      	ldrb	r2, [r2, #0]
 8015a1a:	701a      	strb	r2, [r3, #0]
 8015a1c:	e000      	b.n	8015a20 <process_string+0x148>
				break;
 8015a1e:	bf00      	nop
		}
		output_ptr++;
 8015a20:	693b      	ldr	r3, [r7, #16]
 8015a22:	3301      	adds	r3, #1
 8015a24:	613b      	str	r3, [r7, #16]
		input_ptr++;
 8015a26:	697b      	ldr	r3, [r7, #20]
 8015a28:	3301      	adds	r3, #1
 8015a2a:	617b      	str	r3, [r7, #20]
	while ((*input_ptr != '\0') && (size_t) (input_ptr - input) < input_len) {
 8015a2c:	697b      	ldr	r3, [r7, #20]
 8015a2e:	781b      	ldrb	r3, [r3, #0]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d007      	beq.n	8015a44 <process_string+0x16c>
 8015a34:	697a      	ldr	r2, [r7, #20]
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	1ad3      	subs	r3, r2, r3
 8015a3a:	461a      	mov	r2, r3
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	4293      	cmp	r3, r2
 8015a40:	f63f af69 	bhi.w	8015916 <process_string+0x3e>
	}
	*output_ptr = '\0';
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	2200      	movs	r2, #0
 8015a48:	701a      	strb	r2, [r3, #0]
	/* resize to new length */
	final_size = (size_t) (output_ptr - output) + 1;
 8015a4a:	693a      	ldr	r2, [r7, #16]
 8015a4c:	69fb      	ldr	r3, [r7, #28]
 8015a4e:	1ad3      	subs	r3, r2, r3
 8015a50:	3301      	adds	r3, #1
 8015a52:	623b      	str	r3, [r7, #32]
	/* todo: don't resize if final_size == initial_size */
	resized_output = (char*) parson_malloc(final_size);
 8015a54:	4b13      	ldr	r3, [pc, #76]	; (8015aa4 <process_string+0x1cc>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	6a38      	ldr	r0, [r7, #32]
 8015a5a:	4798      	blx	r3
 8015a5c:	61b8      	str	r0, [r7, #24]
	if (resized_output == NULL) {
 8015a5e:	69bb      	ldr	r3, [r7, #24]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d014      	beq.n	8015a8e <process_string+0x1b6>
		goto error;
	}
	memcpy(resized_output, output, final_size);
 8015a64:	6a3a      	ldr	r2, [r7, #32]
 8015a66:	69f9      	ldr	r1, [r7, #28]
 8015a68:	69b8      	ldr	r0, [r7, #24]
 8015a6a:	f002 fc4f 	bl	801830c <memcpy>
	*output_len = final_size - 1;
 8015a6e:	6a3b      	ldr	r3, [r7, #32]
 8015a70:	1e5a      	subs	r2, r3, #1
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	601a      	str	r2, [r3, #0]
	parson_free(output);
 8015a76:	4b0c      	ldr	r3, [pc, #48]	; (8015aa8 <process_string+0x1d0>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	69f8      	ldr	r0, [r7, #28]
 8015a7c:	4798      	blx	r3
	return resized_output;
 8015a7e:	69bb      	ldr	r3, [r7, #24]
 8015a80:	e00b      	b.n	8015a9a <process_string+0x1c2>
		goto error;
 8015a82:	bf00      	nop
 8015a84:	e004      	b.n	8015a90 <process_string+0x1b8>
				goto error;
 8015a86:	bf00      	nop
 8015a88:	e002      	b.n	8015a90 <process_string+0x1b8>
			goto error;
 8015a8a:	bf00      	nop
 8015a8c:	e000      	b.n	8015a90 <process_string+0x1b8>
		goto error;
 8015a8e:	bf00      	nop
	error: parson_free(output);
 8015a90:	4b05      	ldr	r3, [pc, #20]	; (8015aa8 <process_string+0x1d0>)
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	69f8      	ldr	r0, [r7, #28]
 8015a96:	4798      	blx	r3
	return NULL;
 8015a98:	2300      	movs	r3, #0
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3728      	adds	r7, #40	; 0x28
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}
 8015aa2:	bf00      	nop
 8015aa4:	24000038 	.word	0x24000038
 8015aa8:	2400003c 	.word	0x2400003c

08015aac <get_quoted_string>:

/* Return processed contents of a string between quotes and
 skips passed argument to a matching quote. */
static char* get_quoted_string(const char **string, size_t *output_string_len) {
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b086      	sub	sp, #24
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
 8015ab4:	6039      	str	r1, [r7, #0]
	const char *string_start = *string;
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	617b      	str	r3, [r7, #20]
	size_t input_string_len = 0;
 8015abc:	2300      	movs	r3, #0
 8015abe:	613b      	str	r3, [r7, #16]
	JSON_Status status = skip_quotes(string);
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	f7ff fdd3 	bl	801566c <skip_quotes>
 8015ac6:	60f8      	str	r0, [r7, #12]
	if (status != JSONSuccess) {
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d001      	beq.n	8015ad2 <get_quoted_string+0x26>
		return NULL;
 8015ace:	2300      	movs	r3, #0
 8015ad0:	e00d      	b.n	8015aee <get_quoted_string+0x42>
	}
	input_string_len = *string - string_start - 2; /* length without quotes */
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	681a      	ldr	r2, [r3, #0]
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	1ad3      	subs	r3, r2, r3
 8015ada:	3b02      	subs	r3, #2
 8015adc:	613b      	str	r3, [r7, #16]
	return process_string(string_start + 1, input_string_len, output_string_len);
 8015ade:	697b      	ldr	r3, [r7, #20]
 8015ae0:	3301      	adds	r3, #1
 8015ae2:	683a      	ldr	r2, [r7, #0]
 8015ae4:	6939      	ldr	r1, [r7, #16]
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f7ff fef6 	bl	80158d8 <process_string>
 8015aec:	4603      	mov	r3, r0
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3718      	adds	r7, #24
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}
	...

08015af8 <parse_value>:

static JSON_Value* parse_value(const char **string, size_t nesting) {
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b082      	sub	sp, #8
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
 8015b00:	6039      	str	r1, [r7, #0]
	if (nesting > MAX_NESTING) {
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015b08:	d906      	bls.n	8015b18 <parse_value+0x20>
		return NULL;
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	e08d      	b.n	8015c2a <parse_value+0x132>
	}
	SKIP_WHITESPACES(string);
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	1c5a      	adds	r2, r3, #1
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	601a      	str	r2, [r3, #0]
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	781b      	ldrb	r3, [r3, #0]
 8015b1e:	3301      	adds	r3, #1
 8015b20:	4a44      	ldr	r2, [pc, #272]	; (8015c34 <parse_value+0x13c>)
 8015b22:	4413      	add	r3, r2
 8015b24:	781b      	ldrb	r3, [r3, #0]
 8015b26:	f003 0308 	and.w	r3, r3, #8
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d1ef      	bne.n	8015b0e <parse_value+0x16>
	switch (**string) {
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	2b7b      	cmp	r3, #123	; 0x7b
 8015b36:	dc77      	bgt.n	8015c28 <parse_value+0x130>
 8015b38:	2b5b      	cmp	r3, #91	; 0x5b
 8015b3a:	da08      	bge.n	8015b4e <parse_value+0x56>
 8015b3c:	2b39      	cmp	r3, #57	; 0x39
 8015b3e:	dc73      	bgt.n	8015c28 <parse_value+0x130>
 8015b40:	2b30      	cmp	r3, #48	; 0x30
 8015b42:	da67      	bge.n	8015c14 <parse_value+0x11c>
 8015b44:	2b22      	cmp	r3, #34	; 0x22
 8015b46:	d05b      	beq.n	8015c00 <parse_value+0x108>
 8015b48:	2b2d      	cmp	r3, #45	; 0x2d
 8015b4a:	d063      	beq.n	8015c14 <parse_value+0x11c>
 8015b4c:	e06c      	b.n	8015c28 <parse_value+0x130>
 8015b4e:	3b5b      	subs	r3, #91	; 0x5b
 8015b50:	2b20      	cmp	r3, #32
 8015b52:	d869      	bhi.n	8015c28 <parse_value+0x130>
 8015b54:	a201      	add	r2, pc, #4	; (adr r2, 8015b5c <parse_value+0x64>)
 8015b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b5a:	bf00      	nop
 8015b5c:	08015bf1 	.word	0x08015bf1
 8015b60:	08015c29 	.word	0x08015c29
 8015b64:	08015c29 	.word	0x08015c29
 8015b68:	08015c29 	.word	0x08015c29
 8015b6c:	08015c29 	.word	0x08015c29
 8015b70:	08015c29 	.word	0x08015c29
 8015b74:	08015c29 	.word	0x08015c29
 8015b78:	08015c29 	.word	0x08015c29
 8015b7c:	08015c29 	.word	0x08015c29
 8015b80:	08015c29 	.word	0x08015c29
 8015b84:	08015c29 	.word	0x08015c29
 8015b88:	08015c0b 	.word	0x08015c0b
 8015b8c:	08015c29 	.word	0x08015c29
 8015b90:	08015c29 	.word	0x08015c29
 8015b94:	08015c29 	.word	0x08015c29
 8015b98:	08015c29 	.word	0x08015c29
 8015b9c:	08015c29 	.word	0x08015c29
 8015ba0:	08015c29 	.word	0x08015c29
 8015ba4:	08015c29 	.word	0x08015c29
 8015ba8:	08015c1f 	.word	0x08015c1f
 8015bac:	08015c29 	.word	0x08015c29
 8015bb0:	08015c29 	.word	0x08015c29
 8015bb4:	08015c29 	.word	0x08015c29
 8015bb8:	08015c29 	.word	0x08015c29
 8015bbc:	08015c29 	.word	0x08015c29
 8015bc0:	08015c0b 	.word	0x08015c0b
 8015bc4:	08015c29 	.word	0x08015c29
 8015bc8:	08015c29 	.word	0x08015c29
 8015bcc:	08015c29 	.word	0x08015c29
 8015bd0:	08015c29 	.word	0x08015c29
 8015bd4:	08015c29 	.word	0x08015c29
 8015bd8:	08015c29 	.word	0x08015c29
 8015bdc:	08015be1 	.word	0x08015be1
	case '{':
		return parse_object_value(string, nesting + 1);
 8015be0:	683b      	ldr	r3, [r7, #0]
 8015be2:	3301      	adds	r3, #1
 8015be4:	4619      	mov	r1, r3
 8015be6:	6878      	ldr	r0, [r7, #4]
 8015be8:	f000 f826 	bl	8015c38 <parse_object_value>
 8015bec:	4603      	mov	r3, r0
 8015bee:	e01c      	b.n	8015c2a <parse_value+0x132>
	case '[':
		return parse_array_value(string, nesting + 1);
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	3301      	adds	r3, #1
 8015bf4:	4619      	mov	r1, r3
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	f000 f92e 	bl	8015e58 <parse_array_value>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	e014      	b.n	8015c2a <parse_value+0x132>
	case '\"':
		return parse_string_value(string);
 8015c00:	6878      	ldr	r0, [r7, #4]
 8015c02:	f000 f9ed 	bl	8015fe0 <parse_string_value>
 8015c06:	4603      	mov	r3, r0
 8015c08:	e00f      	b.n	8015c2a <parse_value+0x132>
	case 'f':
	case 't':
		return parse_boolean_value(string);
 8015c0a:	6878      	ldr	r0, [r7, #4]
 8015c0c:	f000 fa12 	bl	8016034 <parse_boolean_value>
 8015c10:	4603      	mov	r3, r0
 8015c12:	e00a      	b.n	8015c2a <parse_value+0x132>
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
		return parse_number_value(string);
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f000 fa4b 	bl	80160b0 <parse_number_value>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	e005      	b.n	8015c2a <parse_value+0x132>
	case 'n':
		return parse_null_value(string);
 8015c1e:	6878      	ldr	r0, [r7, #4]
 8015c20:	f000 faa4 	bl	801616c <parse_null_value>
 8015c24:	4603      	mov	r3, r0
 8015c26:	e000      	b.n	8015c2a <parse_value+0x132>
	default:
		return NULL;
 8015c28:	2300      	movs	r3, #0
	}
}
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	3708      	adds	r7, #8
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	bd80      	pop	{r7, pc}
 8015c32:	bf00      	nop
 8015c34:	0801ec36 	.word	0x0801ec36

08015c38 <parse_object_value>:

static JSON_Value* parse_object_value(const char **string, size_t nesting) {
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b088      	sub	sp, #32
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
 8015c40:	6039      	str	r1, [r7, #0]
	JSON_Status status = JSONFailure;
 8015c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c46:	61fb      	str	r3, [r7, #28]
	JSON_Value *output_value = NULL, *new_value = NULL;
 8015c48:	2300      	movs	r3, #0
 8015c4a:	61bb      	str	r3, [r7, #24]
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	617b      	str	r3, [r7, #20]
	JSON_Object *output_object = NULL;
 8015c50:	2300      	movs	r3, #0
 8015c52:	613b      	str	r3, [r7, #16]
	char *new_key = NULL;
 8015c54:	2300      	movs	r3, #0
 8015c56:	60fb      	str	r3, [r7, #12]

	output_value = json_value_init_object();
 8015c58:	f001 fc8e 	bl	8017578 <json_value_init_object>
 8015c5c:	61b8      	str	r0, [r7, #24]
	if (output_value == NULL) {
 8015c5e:	69bb      	ldr	r3, [r7, #24]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d101      	bne.n	8015c68 <parse_object_value+0x30>
		return NULL;
 8015c64:	2300      	movs	r3, #0
 8015c66:	e0ee      	b.n	8015e46 <parse_object_value+0x20e>
	}
	if (**string != '{') {
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	781b      	ldrb	r3, [r3, #0]
 8015c6e:	2b7b      	cmp	r3, #123	; 0x7b
 8015c70:	d004      	beq.n	8015c7c <parse_object_value+0x44>
		json_value_free(output_value);
 8015c72:	69b8      	ldr	r0, [r7, #24]
 8015c74:	f001 fc52 	bl	801751c <json_value_free>
		return NULL;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	e0e4      	b.n	8015e46 <parse_object_value+0x20e>
	}
	output_object = json_value_get_object(output_value);
 8015c7c:	69b8      	ldr	r0, [r7, #24]
 8015c7e:	f001 fbc5 	bl	801740c <json_value_get_object>
 8015c82:	6138      	str	r0, [r7, #16]
	SKIP_CHAR(string);
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	1c5a      	adds	r2, r3, #1
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	601a      	str	r2, [r3, #0]
	SKIP_WHITESPACES(string);
 8015c8e:	e004      	b.n	8015c9a <parse_object_value+0x62>
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	1c5a      	adds	r2, r3, #1
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	601a      	str	r2, [r3, #0]
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	781b      	ldrb	r3, [r3, #0]
 8015ca0:	3301      	adds	r3, #1
 8015ca2:	4a6b      	ldr	r2, [pc, #428]	; (8015e50 <parse_object_value+0x218>)
 8015ca4:	4413      	add	r3, r2
 8015ca6:	781b      	ldrb	r3, [r3, #0]
 8015ca8:	f003 0308 	and.w	r3, r3, #8
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d1ef      	bne.n	8015c90 <parse_object_value+0x58>
	if (**string == '}') { /* empty object */
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	781b      	ldrb	r3, [r3, #0]
 8015cb6:	2b7d      	cmp	r3, #125	; 0x7d
 8015cb8:	f040 809c 	bne.w	8015df4 <parse_object_value+0x1bc>
		SKIP_CHAR(string);
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	1c5a      	adds	r2, r3, #1
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	601a      	str	r2, [r3, #0]
		return output_value;
 8015cc6:	69bb      	ldr	r3, [r7, #24]
 8015cc8:	e0bd      	b.n	8015e46 <parse_object_value+0x20e>
	}
	while (**string != '\0') {
		size_t key_len = 0;
 8015cca:	2300      	movs	r3, #0
 8015ccc:	60bb      	str	r3, [r7, #8]
		new_key = get_quoted_string(string, &key_len);
 8015cce:	f107 0308 	add.w	r3, r7, #8
 8015cd2:	4619      	mov	r1, r3
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f7ff fee9 	bl	8015aac <get_quoted_string>
 8015cda:	60f8      	str	r0, [r7, #12]
		/* We do not support key names with embedded \0 chars */
		if (!new_key) {
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d104      	bne.n	8015cec <parse_object_value+0xb4>
			json_value_free(output_value);
 8015ce2:	69b8      	ldr	r0, [r7, #24]
 8015ce4:	f001 fc1a 	bl	801751c <json_value_free>
			return NULL;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	e0ac      	b.n	8015e46 <parse_object_value+0x20e>
		}
		if (key_len != strlen(new_key)) {
 8015cec:	68f8      	ldr	r0, [r7, #12]
 8015cee:	f7ea fb01 	bl	80002f4 <strlen>
 8015cf2:	4602      	mov	r2, r0
 8015cf4:	68bb      	ldr	r3, [r7, #8]
 8015cf6:	429a      	cmp	r2, r3
 8015cf8:	d00d      	beq.n	8015d16 <parse_object_value+0xde>
			parson_free(new_key);
 8015cfa:	4b56      	ldr	r3, [pc, #344]	; (8015e54 <parse_object_value+0x21c>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	68f8      	ldr	r0, [r7, #12]
 8015d00:	4798      	blx	r3
			json_value_free(output_value);
 8015d02:	69b8      	ldr	r0, [r7, #24]
 8015d04:	f001 fc0a 	bl	801751c <json_value_free>
			return NULL;
 8015d08:	2300      	movs	r3, #0
 8015d0a:	e09c      	b.n	8015e46 <parse_object_value+0x20e>
		}
		SKIP_WHITESPACES(string);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	1c5a      	adds	r2, r3, #1
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	601a      	str	r2, [r3, #0]
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	781b      	ldrb	r3, [r3, #0]
 8015d1c:	3301      	adds	r3, #1
 8015d1e:	4a4c      	ldr	r2, [pc, #304]	; (8015e50 <parse_object_value+0x218>)
 8015d20:	4413      	add	r3, r2
 8015d22:	781b      	ldrb	r3, [r3, #0]
 8015d24:	f003 0308 	and.w	r3, r3, #8
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d1ef      	bne.n	8015d0c <parse_object_value+0xd4>
		if (**string != ':') {
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	781b      	ldrb	r3, [r3, #0]
 8015d32:	2b3a      	cmp	r3, #58	; 0x3a
 8015d34:	d008      	beq.n	8015d48 <parse_object_value+0x110>
			parson_free(new_key);
 8015d36:	4b47      	ldr	r3, [pc, #284]	; (8015e54 <parse_object_value+0x21c>)
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	68f8      	ldr	r0, [r7, #12]
 8015d3c:	4798      	blx	r3
			json_value_free(output_value);
 8015d3e:	69b8      	ldr	r0, [r7, #24]
 8015d40:	f001 fbec 	bl	801751c <json_value_free>
			return NULL;
 8015d44:	2300      	movs	r3, #0
 8015d46:	e07e      	b.n	8015e46 <parse_object_value+0x20e>
		}
		SKIP_CHAR(string);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	1c5a      	adds	r2, r3, #1
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	601a      	str	r2, [r3, #0]
		new_value = parse_value(string, nesting);
 8015d52:	6839      	ldr	r1, [r7, #0]
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f7ff fecf 	bl	8015af8 <parse_value>
 8015d5a:	6178      	str	r0, [r7, #20]
		if (new_value == NULL) {
 8015d5c:	697b      	ldr	r3, [r7, #20]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d108      	bne.n	8015d74 <parse_object_value+0x13c>
			parson_free(new_key);
 8015d62:	4b3c      	ldr	r3, [pc, #240]	; (8015e54 <parse_object_value+0x21c>)
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	68f8      	ldr	r0, [r7, #12]
 8015d68:	4798      	blx	r3
			json_value_free(output_value);
 8015d6a:	69b8      	ldr	r0, [r7, #24]
 8015d6c:	f001 fbd6 	bl	801751c <json_value_free>
			return NULL;
 8015d70:	2300      	movs	r3, #0
 8015d72:	e068      	b.n	8015e46 <parse_object_value+0x20e>
		}
		status = json_object_add(output_object, new_key, new_value);
 8015d74:	697a      	ldr	r2, [r7, #20]
 8015d76:	68f9      	ldr	r1, [r7, #12]
 8015d78:	6938      	ldr	r0, [r7, #16]
 8015d7a:	f7ff fab8 	bl	80152ee <json_object_add>
 8015d7e:	61f8      	str	r0, [r7, #28]
		if (status != JSONSuccess) {
 8015d80:	69fb      	ldr	r3, [r7, #28]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d010      	beq.n	8015da8 <parse_object_value+0x170>
			parson_free(new_key);
 8015d86:	4b33      	ldr	r3, [pc, #204]	; (8015e54 <parse_object_value+0x21c>)
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	68f8      	ldr	r0, [r7, #12]
 8015d8c:	4798      	blx	r3
			json_value_free(new_value);
 8015d8e:	6978      	ldr	r0, [r7, #20]
 8015d90:	f001 fbc4 	bl	801751c <json_value_free>
			json_value_free(output_value);
 8015d94:	69b8      	ldr	r0, [r7, #24]
 8015d96:	f001 fbc1 	bl	801751c <json_value_free>
			return NULL;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	e053      	b.n	8015e46 <parse_object_value+0x20e>
		}
		SKIP_WHITESPACES(string);
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	1c5a      	adds	r2, r3, #1
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	601a      	str	r2, [r3, #0]
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	781b      	ldrb	r3, [r3, #0]
 8015dae:	3301      	adds	r3, #1
 8015db0:	4a27      	ldr	r2, [pc, #156]	; (8015e50 <parse_object_value+0x218>)
 8015db2:	4413      	add	r3, r2
 8015db4:	781b      	ldrb	r3, [r3, #0]
 8015db6:	f003 0308 	and.w	r3, r3, #8
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d1ef      	bne.n	8015d9e <parse_object_value+0x166>
		if (**string != ',') {
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	781b      	ldrb	r3, [r3, #0]
 8015dc4:	2b2c      	cmp	r3, #44	; 0x2c
 8015dc6:	d11c      	bne.n	8015e02 <parse_object_value+0x1ca>
			break;
		}
		SKIP_CHAR(string);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	1c5a      	adds	r2, r3, #1
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	601a      	str	r2, [r3, #0]
		SKIP_WHITESPACES(string);
 8015dd2:	e004      	b.n	8015dde <parse_object_value+0x1a6>
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	1c5a      	adds	r2, r3, #1
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	601a      	str	r2, [r3, #0]
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	781b      	ldrb	r3, [r3, #0]
 8015de4:	3301      	adds	r3, #1
 8015de6:	4a1a      	ldr	r2, [pc, #104]	; (8015e50 <parse_object_value+0x218>)
 8015de8:	4413      	add	r3, r2
 8015dea:	781b      	ldrb	r3, [r3, #0]
 8015dec:	f003 0308 	and.w	r3, r3, #8
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d1ef      	bne.n	8015dd4 <parse_object_value+0x19c>
	while (**string != '\0') {
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	781b      	ldrb	r3, [r3, #0]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	f47f af65 	bne.w	8015cca <parse_object_value+0x92>
 8015e00:	e006      	b.n	8015e10 <parse_object_value+0x1d8>
			break;
 8015e02:	bf00      	nop
	}
	SKIP_WHITESPACES(string);
 8015e04:	e004      	b.n	8015e10 <parse_object_value+0x1d8>
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	1c5a      	adds	r2, r3, #1
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	601a      	str	r2, [r3, #0]
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	3301      	adds	r3, #1
 8015e18:	4a0d      	ldr	r2, [pc, #52]	; (8015e50 <parse_object_value+0x218>)
 8015e1a:	4413      	add	r3, r2
 8015e1c:	781b      	ldrb	r3, [r3, #0]
 8015e1e:	f003 0308 	and.w	r3, r3, #8
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d1ef      	bne.n	8015e06 <parse_object_value+0x1ce>
	if (**string != '}') {
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	781b      	ldrb	r3, [r3, #0]
 8015e2c:	2b7d      	cmp	r3, #125	; 0x7d
 8015e2e:	d004      	beq.n	8015e3a <parse_object_value+0x202>
		json_value_free(output_value);
 8015e30:	69b8      	ldr	r0, [r7, #24]
 8015e32:	f001 fb73 	bl	801751c <json_value_free>
		return NULL;
 8015e36:	2300      	movs	r3, #0
 8015e38:	e005      	b.n	8015e46 <parse_object_value+0x20e>
	}
	SKIP_CHAR(string);
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	1c5a      	adds	r2, r3, #1
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	601a      	str	r2, [r3, #0]
	return output_value;
 8015e44:	69bb      	ldr	r3, [r7, #24]
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	3720      	adds	r7, #32
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
 8015e4e:	bf00      	nop
 8015e50:	0801ec36 	.word	0x0801ec36
 8015e54:	2400003c 	.word	0x2400003c

08015e58 <parse_array_value>:

static JSON_Value* parse_array_value(const char **string, size_t nesting) {
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b086      	sub	sp, #24
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
 8015e60:	6039      	str	r1, [r7, #0]
	JSON_Value *output_value = NULL, *new_array_value = NULL;
 8015e62:	2300      	movs	r3, #0
 8015e64:	617b      	str	r3, [r7, #20]
 8015e66:	2300      	movs	r3, #0
 8015e68:	613b      	str	r3, [r7, #16]
	JSON_Array *output_array = NULL;
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	60fb      	str	r3, [r7, #12]
	output_value = json_value_init_array();
 8015e6e:	f001 fbaf 	bl	80175d0 <json_value_init_array>
 8015e72:	6178      	str	r0, [r7, #20]
	if (output_value == NULL) {
 8015e74:	697b      	ldr	r3, [r7, #20]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d101      	bne.n	8015e7e <parse_array_value+0x26>
		return NULL;
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	e0a9      	b.n	8015fd2 <parse_array_value+0x17a>
	}
	if (**string != '[') {
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	781b      	ldrb	r3, [r3, #0]
 8015e84:	2b5b      	cmp	r3, #91	; 0x5b
 8015e86:	d004      	beq.n	8015e92 <parse_array_value+0x3a>
		json_value_free(output_value);
 8015e88:	6978      	ldr	r0, [r7, #20]
 8015e8a:	f001 fb47 	bl	801751c <json_value_free>
		return NULL;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	e09f      	b.n	8015fd2 <parse_array_value+0x17a>
	}
	output_array = json_value_get_array(output_value);
 8015e92:	6978      	ldr	r0, [r7, #20]
 8015e94:	f001 facc 	bl	8017430 <json_value_get_array>
 8015e98:	60f8      	str	r0, [r7, #12]
	SKIP_CHAR(string);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	1c5a      	adds	r2, r3, #1
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	601a      	str	r2, [r3, #0]
	SKIP_WHITESPACES(string);
 8015ea4:	e004      	b.n	8015eb0 <parse_array_value+0x58>
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	1c5a      	adds	r2, r3, #1
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	601a      	str	r2, [r3, #0]
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	781b      	ldrb	r3, [r3, #0]
 8015eb6:	3301      	adds	r3, #1
 8015eb8:	4a48      	ldr	r2, [pc, #288]	; (8015fdc <parse_array_value+0x184>)
 8015eba:	4413      	add	r3, r2
 8015ebc:	781b      	ldrb	r3, [r3, #0]
 8015ebe:	f003 0308 	and.w	r3, r3, #8
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d1ef      	bne.n	8015ea6 <parse_array_value+0x4e>
	if (**string == ']') { /* empty array */
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	781b      	ldrb	r3, [r3, #0]
 8015ecc:	2b5d      	cmp	r3, #93	; 0x5d
 8015ece:	d14d      	bne.n	8015f6c <parse_array_value+0x114>
		SKIP_CHAR(string);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	1c5a      	adds	r2, r3, #1
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	601a      	str	r2, [r3, #0]
		return output_value;
 8015eda:	697b      	ldr	r3, [r7, #20]
 8015edc:	e079      	b.n	8015fd2 <parse_array_value+0x17a>
	}
	while (**string != '\0') {
		new_array_value = parse_value(string, nesting);
 8015ede:	6839      	ldr	r1, [r7, #0]
 8015ee0:	6878      	ldr	r0, [r7, #4]
 8015ee2:	f7ff fe09 	bl	8015af8 <parse_value>
 8015ee6:	6138      	str	r0, [r7, #16]
		if (new_array_value == NULL) {
 8015ee8:	693b      	ldr	r3, [r7, #16]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d104      	bne.n	8015ef8 <parse_array_value+0xa0>
			json_value_free(output_value);
 8015eee:	6978      	ldr	r0, [r7, #20]
 8015ef0:	f001 fb14 	bl	801751c <json_value_free>
			return NULL;
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	e06c      	b.n	8015fd2 <parse_array_value+0x17a>
		}
		if (json_array_add(output_array, new_array_value) != JSONSuccess) {
 8015ef8:	6939      	ldr	r1, [r7, #16]
 8015efa:	68f8      	ldr	r0, [r7, #12]
 8015efc:	f7ff faf8 	bl	80154f0 <json_array_add>
 8015f00:	4603      	mov	r3, r0
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d00c      	beq.n	8015f20 <parse_array_value+0xc8>
			json_value_free(new_array_value);
 8015f06:	6938      	ldr	r0, [r7, #16]
 8015f08:	f001 fb08 	bl	801751c <json_value_free>
			json_value_free(output_value);
 8015f0c:	6978      	ldr	r0, [r7, #20]
 8015f0e:	f001 fb05 	bl	801751c <json_value_free>
			return NULL;
 8015f12:	2300      	movs	r3, #0
 8015f14:	e05d      	b.n	8015fd2 <parse_array_value+0x17a>
		}
		SKIP_WHITESPACES(string);
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	1c5a      	adds	r2, r3, #1
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	601a      	str	r2, [r3, #0]
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	781b      	ldrb	r3, [r3, #0]
 8015f26:	3301      	adds	r3, #1
 8015f28:	4a2c      	ldr	r2, [pc, #176]	; (8015fdc <parse_array_value+0x184>)
 8015f2a:	4413      	add	r3, r2
 8015f2c:	781b      	ldrb	r3, [r3, #0]
 8015f2e:	f003 0308 	and.w	r3, r3, #8
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d1ef      	bne.n	8015f16 <parse_array_value+0xbe>
		if (**string != ',') {
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	781b      	ldrb	r3, [r3, #0]
 8015f3c:	2b2c      	cmp	r3, #44	; 0x2c
 8015f3e:	d11b      	bne.n	8015f78 <parse_array_value+0x120>
			break;
		}
		SKIP_CHAR(string);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	1c5a      	adds	r2, r3, #1
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	601a      	str	r2, [r3, #0]
		SKIP_WHITESPACES(string);
 8015f4a:	e004      	b.n	8015f56 <parse_array_value+0xfe>
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	1c5a      	adds	r2, r3, #1
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	601a      	str	r2, [r3, #0]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	781b      	ldrb	r3, [r3, #0]
 8015f5c:	3301      	adds	r3, #1
 8015f5e:	4a1f      	ldr	r2, [pc, #124]	; (8015fdc <parse_array_value+0x184>)
 8015f60:	4413      	add	r3, r2
 8015f62:	781b      	ldrb	r3, [r3, #0]
 8015f64:	f003 0308 	and.w	r3, r3, #8
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d1ef      	bne.n	8015f4c <parse_array_value+0xf4>
	while (**string != '\0') {
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	781b      	ldrb	r3, [r3, #0]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d1b3      	bne.n	8015ede <parse_array_value+0x86>
 8015f76:	e006      	b.n	8015f86 <parse_array_value+0x12e>
			break;
 8015f78:	bf00      	nop
	}
	SKIP_WHITESPACES(string);
 8015f7a:	e004      	b.n	8015f86 <parse_array_value+0x12e>
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	1c5a      	adds	r2, r3, #1
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	601a      	str	r2, [r3, #0]
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	3301      	adds	r3, #1
 8015f8e:	4a13      	ldr	r2, [pc, #76]	; (8015fdc <parse_array_value+0x184>)
 8015f90:	4413      	add	r3, r2
 8015f92:	781b      	ldrb	r3, [r3, #0]
 8015f94:	f003 0308 	and.w	r3, r3, #8
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d1ef      	bne.n	8015f7c <parse_array_value+0x124>
	if (**string != ']'
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	2b5d      	cmp	r3, #93	; 0x5d
 8015fa4:	d10a      	bne.n	8015fbc <parse_array_value+0x164>
			|| /* Trim array after parsing is over */
			json_array_resize(output_array, json_array_get_count(output_array))
 8015fa6:	68f8      	ldr	r0, [r7, #12]
 8015fa8:	f001 f9fc 	bl	80173a4 <json_array_get_count>
 8015fac:	4603      	mov	r3, r0
 8015fae:	4619      	mov	r1, r3
 8015fb0:	68f8      	ldr	r0, [r7, #12]
 8015fb2:	f7ff fad1 	bl	8015558 <json_array_resize>
 8015fb6:	4603      	mov	r3, r0
			|| /* Trim array after parsing is over */
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d004      	beq.n	8015fc6 <parse_array_value+0x16e>
					!= JSONSuccess) {
		json_value_free(output_value);
 8015fbc:	6978      	ldr	r0, [r7, #20]
 8015fbe:	f001 faad 	bl	801751c <json_value_free>
		return NULL;
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	e005      	b.n	8015fd2 <parse_array_value+0x17a>
	}
	SKIP_CHAR(string);
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	1c5a      	adds	r2, r3, #1
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	601a      	str	r2, [r3, #0]
	return output_value;
 8015fd0:	697b      	ldr	r3, [r7, #20]
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3718      	adds	r7, #24
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}
 8015fda:	bf00      	nop
 8015fdc:	0801ec36 	.word	0x0801ec36

08015fe0 <parse_string_value>:

static JSON_Value* parse_string_value(const char **string) {
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b086      	sub	sp, #24
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
	JSON_Value *value = NULL;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	617b      	str	r3, [r7, #20]
	size_t new_string_len = 0;
 8015fec:	2300      	movs	r3, #0
 8015fee:	60fb      	str	r3, [r7, #12]
	char *new_string = get_quoted_string(string, &new_string_len);
 8015ff0:	f107 030c 	add.w	r3, r7, #12
 8015ff4:	4619      	mov	r1, r3
 8015ff6:	6878      	ldr	r0, [r7, #4]
 8015ff8:	f7ff fd58 	bl	8015aac <get_quoted_string>
 8015ffc:	6138      	str	r0, [r7, #16]
	if (new_string == NULL) {
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d101      	bne.n	8016008 <parse_string_value+0x28>
		return NULL;
 8016004:	2300      	movs	r3, #0
 8016006:	e00f      	b.n	8016028 <parse_string_value+0x48>
	}
	value = json_value_init_string_no_copy(new_string, new_string_len);
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	4619      	mov	r1, r3
 801600c:	6938      	ldr	r0, [r7, #16]
 801600e:	f7ff fb0b 	bl	8015628 <json_value_init_string_no_copy>
 8016012:	6178      	str	r0, [r7, #20]
	if (value == NULL) {
 8016014:	697b      	ldr	r3, [r7, #20]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d105      	bne.n	8016026 <parse_string_value+0x46>
		parson_free(new_string);
 801601a:	4b05      	ldr	r3, [pc, #20]	; (8016030 <parse_string_value+0x50>)
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	6938      	ldr	r0, [r7, #16]
 8016020:	4798      	blx	r3
		return NULL;
 8016022:	2300      	movs	r3, #0
 8016024:	e000      	b.n	8016028 <parse_string_value+0x48>
	}
	return value;
 8016026:	697b      	ldr	r3, [r7, #20]
}
 8016028:	4618      	mov	r0, r3
 801602a:	3718      	adds	r7, #24
 801602c:	46bd      	mov	sp, r7
 801602e:	bd80      	pop	{r7, pc}
 8016030:	2400003c 	.word	0x2400003c

08016034 <parse_boolean_value>:

static JSON_Value* parse_boolean_value(const char **string) {
 8016034:	b580      	push	{r7, lr}
 8016036:	b084      	sub	sp, #16
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
	size_t true_token_size = SIZEOF_TOKEN("true");
 801603c:	2304      	movs	r3, #4
 801603e:	60fb      	str	r3, [r7, #12]
	size_t false_token_size = SIZEOF_TOKEN("false");
 8016040:	2305      	movs	r3, #5
 8016042:	60bb      	str	r3, [r7, #8]
	if (strncmp("true", *string, true_token_size) == 0) {
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	68fa      	ldr	r2, [r7, #12]
 801604a:	4619      	mov	r1, r3
 801604c:	4815      	ldr	r0, [pc, #84]	; (80160a4 <parse_boolean_value+0x70>)
 801604e:	f002 fba7 	bl	80187a0 <strncmp>
 8016052:	4603      	mov	r3, r0
 8016054:	2b00      	cmp	r3, #0
 8016056:	d10a      	bne.n	801606e <parse_boolean_value+0x3a>
		*string += true_token_size;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	681a      	ldr	r2, [r3, #0]
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	441a      	add	r2, r3
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	601a      	str	r2, [r3, #0]
		return json_value_init_boolean(1);
 8016064:	2001      	movs	r0, #1
 8016066:	f001 fb6d 	bl	8017744 <json_value_init_boolean>
 801606a:	4603      	mov	r3, r0
 801606c:	e015      	b.n	801609a <parse_boolean_value+0x66>
	} else if (strncmp("false", *string, false_token_size) == 0) {
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	68ba      	ldr	r2, [r7, #8]
 8016074:	4619      	mov	r1, r3
 8016076:	480c      	ldr	r0, [pc, #48]	; (80160a8 <parse_boolean_value+0x74>)
 8016078:	f002 fb92 	bl	80187a0 <strncmp>
 801607c:	4603      	mov	r3, r0
 801607e:	2b00      	cmp	r3, #0
 8016080:	d10a      	bne.n	8016098 <parse_boolean_value+0x64>
		*string += false_token_size;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	681a      	ldr	r2, [r3, #0]
 8016086:	68bb      	ldr	r3, [r7, #8]
 8016088:	441a      	add	r2, r3
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	601a      	str	r2, [r3, #0]
		return json_value_init_boolean(0);
 801608e:	2000      	movs	r0, #0
 8016090:	f001 fb58 	bl	8017744 <json_value_init_boolean>
 8016094:	4603      	mov	r3, r0
 8016096:	e000      	b.n	801609a <parse_boolean_value+0x66>
	}
	return NULL;
 8016098:	2300      	movs	r3, #0
}
 801609a:	4618      	mov	r0, r3
 801609c:	3710      	adds	r7, #16
 801609e:	46bd      	mov	sp, r7
 80160a0:	bd80      	pop	{r7, pc}
 80160a2:	bf00      	nop
 80160a4:	0801e7d4 	.word	0x0801e7d4
 80160a8:	0801e7dc 	.word	0x0801e7dc
 80160ac:	00000000 	.word	0x00000000

080160b0 <parse_number_value>:

static JSON_Value* parse_number_value(const char **string) {
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b086      	sub	sp, #24
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
	char *end;
	double number = 0;
 80160b8:	f04f 0200 	mov.w	r2, #0
 80160bc:	f04f 0300 	mov.w	r3, #0
 80160c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	errno = 0;
 80160c4:	4b28      	ldr	r3, [pc, #160]	; (8016168 <parse_number_value+0xb8>)
 80160c6:	2200      	movs	r2, #0
 80160c8:	601a      	str	r2, [r3, #0]
	number = strtod(*string, &end);
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	f107 020c 	add.w	r2, r7, #12
 80160d2:	4611      	mov	r1, r2
 80160d4:	4618      	mov	r0, r3
 80160d6:	f003 f965 	bl	80193a4 <strtod>
 80160da:	ed87 0b04 	vstr	d0, [r7, #16]
	if (errno == ERANGE && (number <= -HUGE_VAL || number >= HUGE_VAL)) {
 80160de:	4b22      	ldr	r3, [pc, #136]	; (8016168 <parse_number_value+0xb8>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	2b22      	cmp	r3, #34	; 0x22
 80160e4:	d113      	bne.n	801610e <parse_number_value+0x5e>
 80160e6:	ed97 7b04 	vldr	d7, [r7, #16]
 80160ea:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8016158 <parse_number_value+0xa8>
 80160ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80160f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160f6:	d408      	bmi.n	801610a <parse_number_value+0x5a>
 80160f8:	ed97 7b04 	vldr	d7, [r7, #16]
 80160fc:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8016160 <parse_number_value+0xb0>
 8016100:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016108:	dd01      	ble.n	801610e <parse_number_value+0x5e>
		return NULL;
 801610a:	2300      	movs	r3, #0
 801610c:	e01d      	b.n	801614a <parse_number_value+0x9a>
	}
	if ((errno && errno != ERANGE) || !is_decimal(*string, end - *string)) {
 801610e:	4b16      	ldr	r3, [pc, #88]	; (8016168 <parse_number_value+0xb8>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d003      	beq.n	801611e <parse_number_value+0x6e>
 8016116:	4b14      	ldr	r3, [pc, #80]	; (8016168 <parse_number_value+0xb8>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	2b22      	cmp	r3, #34	; 0x22
 801611c:	d10b      	bne.n	8016136 <parse_number_value+0x86>
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	6818      	ldr	r0, [r3, #0]
 8016122:	68fa      	ldr	r2, [r7, #12]
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	1ad3      	subs	r3, r2, r3
 801612a:	4619      	mov	r1, r3
 801612c:	f7fe fe54 	bl	8014dd8 <is_decimal>
 8016130:	4603      	mov	r3, r0
 8016132:	2b00      	cmp	r3, #0
 8016134:	d101      	bne.n	801613a <parse_number_value+0x8a>
		return NULL;
 8016136:	2300      	movs	r3, #0
 8016138:	e007      	b.n	801614a <parse_number_value+0x9a>
	}
	*string = end;
 801613a:	68fa      	ldr	r2, [r7, #12]
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	601a      	str	r2, [r3, #0]
	return json_value_init_number(number);
 8016140:	ed97 0b04 	vldr	d0, [r7, #16]
 8016144:	f001 fab8 	bl	80176b8 <json_value_init_number>
 8016148:	4603      	mov	r3, r0
}
 801614a:	4618      	mov	r0, r3
 801614c:	3718      	adds	r7, #24
 801614e:	46bd      	mov	sp, r7
 8016150:	bd80      	pop	{r7, pc}
 8016152:	bf00      	nop
 8016154:	f3af 8000 	nop.w
 8016158:	ffffffff 	.word	0xffffffff
 801615c:	ffefffff 	.word	0xffefffff
 8016160:	ffffffff 	.word	0xffffffff
 8016164:	7fefffff 	.word	0x7fefffff
 8016168:	2400ee5c 	.word	0x2400ee5c

0801616c <parse_null_value>:

static JSON_Value* parse_null_value(const char **string) {
 801616c:	b580      	push	{r7, lr}
 801616e:	b084      	sub	sp, #16
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
	size_t token_size = SIZEOF_TOKEN("null");
 8016174:	2304      	movs	r3, #4
 8016176:	60fb      	str	r3, [r7, #12]
	if (strncmp("null", *string, token_size) == 0) {
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	68fa      	ldr	r2, [r7, #12]
 801617e:	4619      	mov	r1, r3
 8016180:	480a      	ldr	r0, [pc, #40]	; (80161ac <parse_null_value+0x40>)
 8016182:	f002 fb0d 	bl	80187a0 <strncmp>
 8016186:	4603      	mov	r3, r0
 8016188:	2b00      	cmp	r3, #0
 801618a:	d109      	bne.n	80161a0 <parse_null_value+0x34>
		*string += token_size;
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681a      	ldr	r2, [r3, #0]
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	441a      	add	r2, r3
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	601a      	str	r2, [r3, #0]
		return json_value_init_null();
 8016198:	f001 faf8 	bl	801778c <json_value_init_null>
 801619c:	4603      	mov	r3, r0
 801619e:	e000      	b.n	80161a2 <parse_null_value+0x36>
	}
	return NULL;
 80161a0:	2300      	movs	r3, #0
}
 80161a2:	4618      	mov	r0, r3
 80161a4:	3710      	adds	r7, #16
 80161a6:	46bd      	mov	sp, r7
 80161a8:	bd80      	pop	{r7, pc}
 80161aa:	bf00      	nop
 80161ac:	0801e7e4 	.word	0x0801e7e4

080161b0 <json_serialize_to_buffer_r>:
                                  if (written < 0) { return -1; }\
                                  if (buf != NULL) { buf += written; }\
                                  written_total += written; } while(0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf,
		int level, parson_bool_t is_pretty, char *num_buf) {
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b092      	sub	sp, #72	; 0x48
 80161b4:	af02      	add	r7, sp, #8
 80161b6:	60f8      	str	r0, [r7, #12]
 80161b8:	60b9      	str	r1, [r7, #8]
 80161ba:	607a      	str	r2, [r7, #4]
 80161bc:	603b      	str	r3, [r7, #0]
	const char *key = NULL, *string = NULL;
 80161be:	2300      	movs	r3, #0
 80161c0:	637b      	str	r3, [r7, #52]	; 0x34
 80161c2:	2300      	movs	r3, #0
 80161c4:	633b      	str	r3, [r7, #48]	; 0x30
	JSON_Value *temp_value = NULL;
 80161c6:	2300      	movs	r3, #0
 80161c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	JSON_Array *array = NULL;
 80161ca:	2300      	movs	r3, #0
 80161cc:	62bb      	str	r3, [r7, #40]	; 0x28
	JSON_Object *object = NULL;
 80161ce:	2300      	movs	r3, #0
 80161d0:	627b      	str	r3, [r7, #36]	; 0x24
	size_t i = 0, count = 0;
 80161d2:	2300      	movs	r3, #0
 80161d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80161d6:	2300      	movs	r3, #0
 80161d8:	623b      	str	r3, [r7, #32]
	double num = 0.0;
 80161da:	f04f 0200 	mov.w	r2, #0
 80161de:	f04f 0300 	mov.w	r3, #0
 80161e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int written = -1, written_total = 0;
 80161e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80161ea:	617b      	str	r3, [r7, #20]
 80161ec:	2300      	movs	r3, #0
 80161ee:	63bb      	str	r3, [r7, #56]	; 0x38
	size_t len = 0;
 80161f0:	2300      	movs	r3, #0
 80161f2:	613b      	str	r3, [r7, #16]

	switch (json_value_get_type(value)) {
 80161f4:	68f8      	ldr	r0, [r7, #12]
 80161f6:	f001 f8f7 	bl	80173e8 <json_value_get_type>
 80161fa:	4603      	mov	r3, r0
 80161fc:	3301      	adds	r3, #1
 80161fe:	2b07      	cmp	r3, #7
 8016200:	f200 82f2 	bhi.w	80167e8 <json_serialize_to_buffer_r+0x638>
 8016204:	a201      	add	r2, pc, #4	; (adr r2, 801620c <json_serialize_to_buffer_r+0x5c>)
 8016206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801620a:	bf00      	nop
 801620c:	080167e3 	.word	0x080167e3
 8016210:	080167e9 	.word	0x080167e9
 8016214:	080167b3 	.word	0x080167b3
 8016218:	0801668b 	.word	0x0801668b
 801621c:	08016743 	.word	0x08016743
 8016220:	080163fb 	.word	0x080163fb
 8016224:	0801622d 	.word	0x0801622d
 8016228:	080166d9 	.word	0x080166d9
	case JSONArray:
		array = json_value_get_array(value);
 801622c:	68f8      	ldr	r0, [r7, #12]
 801622e:	f001 f8ff 	bl	8017430 <json_value_get_array>
 8016232:	62b8      	str	r0, [r7, #40]	; 0x28
		count = json_array_get_count(array);
 8016234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016236:	f001 f8b5 	bl	80173a4 <json_array_get_count>
 801623a:	6238      	str	r0, [r7, #32]
		APPEND_STRING("[");
 801623c:	499b      	ldr	r1, [pc, #620]	; (80164ac <json_serialize_to_buffer_r+0x2fc>)
 801623e:	68b8      	ldr	r0, [r7, #8]
 8016240:	f000 ffbe 	bl	80171c0 <append_string>
 8016244:	6178      	str	r0, [r7, #20]
 8016246:	697b      	ldr	r3, [r7, #20]
 8016248:	2b00      	cmp	r3, #0
 801624a:	da02      	bge.n	8016252 <json_serialize_to_buffer_r+0xa2>
 801624c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016250:	e2cc      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 8016252:	68bb      	ldr	r3, [r7, #8]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d003      	beq.n	8016260 <json_serialize_to_buffer_r+0xb0>
 8016258:	697b      	ldr	r3, [r7, #20]
 801625a:	68ba      	ldr	r2, [r7, #8]
 801625c:	4413      	add	r3, r2
 801625e:	60bb      	str	r3, [r7, #8]
 8016260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016262:	697b      	ldr	r3, [r7, #20]
 8016264:	4413      	add	r3, r2
 8016266:	63bb      	str	r3, [r7, #56]	; 0x38
		if (count > 0 && is_pretty) {
 8016268:	6a3b      	ldr	r3, [r7, #32]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d018      	beq.n	80162a0 <json_serialize_to_buffer_r+0xf0>
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d015      	beq.n	80162a0 <json_serialize_to_buffer_r+0xf0>
			APPEND_STRING("\n");
 8016274:	498e      	ldr	r1, [pc, #568]	; (80164b0 <json_serialize_to_buffer_r+0x300>)
 8016276:	68b8      	ldr	r0, [r7, #8]
 8016278:	f000 ffa2 	bl	80171c0 <append_string>
 801627c:	6178      	str	r0, [r7, #20]
 801627e:	697b      	ldr	r3, [r7, #20]
 8016280:	2b00      	cmp	r3, #0
 8016282:	da02      	bge.n	801628a <json_serialize_to_buffer_r+0xda>
 8016284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016288:	e2b0      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d003      	beq.n	8016298 <json_serialize_to_buffer_r+0xe8>
 8016290:	697b      	ldr	r3, [r7, #20]
 8016292:	68ba      	ldr	r2, [r7, #8]
 8016294:	4413      	add	r3, r2
 8016296:	60bb      	str	r3, [r7, #8]
 8016298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	4413      	add	r3, r2
 801629e:	63bb      	str	r3, [r7, #56]	; 0x38
		}
		for (i = 0; i < count; i++) {
 80162a0:	2300      	movs	r3, #0
 80162a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80162a4:	e071      	b.n	801638a <json_serialize_to_buffer_r+0x1da>
			if (is_pretty) {
 80162a6:	683b      	ldr	r3, [r7, #0]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d017      	beq.n	80162dc <json_serialize_to_buffer_r+0x12c>
				APPEND_INDENT(level + 1);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	3301      	adds	r3, #1
 80162b0:	4619      	mov	r1, r3
 80162b2:	68b8      	ldr	r0, [r7, #8]
 80162b4:	f000 ff52 	bl	801715c <append_indent>
 80162b8:	6178      	str	r0, [r7, #20]
 80162ba:	697b      	ldr	r3, [r7, #20]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	da02      	bge.n	80162c6 <json_serialize_to_buffer_r+0x116>
 80162c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162c4:	e292      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 80162c6:	68bb      	ldr	r3, [r7, #8]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d003      	beq.n	80162d4 <json_serialize_to_buffer_r+0x124>
 80162cc:	697b      	ldr	r3, [r7, #20]
 80162ce:	68ba      	ldr	r2, [r7, #8]
 80162d0:	4413      	add	r3, r2
 80162d2:	60bb      	str	r3, [r7, #8]
 80162d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80162d6:	697b      	ldr	r3, [r7, #20]
 80162d8:	4413      	add	r3, r2
 80162da:	63bb      	str	r3, [r7, #56]	; 0x38
			}
			temp_value = json_array_get_value(array, i);
 80162dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80162de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80162e0:	f001 f845 	bl	801736e <json_array_get_value>
 80162e4:	62f8      	str	r0, [r7, #44]	; 0x2c
			written = json_serialize_to_buffer_r(temp_value, buf, level + 1,
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	1c5a      	adds	r2, r3, #1
 80162ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80162ec:	9300      	str	r3, [sp, #0]
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	68b9      	ldr	r1, [r7, #8]
 80162f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162f4:	f7ff ff5c 	bl	80161b0 <json_serialize_to_buffer_r>
 80162f8:	6178      	str	r0, [r7, #20]
					is_pretty, num_buf);
			if (written < 0) {
 80162fa:	697b      	ldr	r3, [r7, #20]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	da02      	bge.n	8016306 <json_serialize_to_buffer_r+0x156>
				return -1;
 8016300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016304:	e272      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
			}
			if (buf != NULL) {
 8016306:	68bb      	ldr	r3, [r7, #8]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d003      	beq.n	8016314 <json_serialize_to_buffer_r+0x164>
				buf += written;
 801630c:	697b      	ldr	r3, [r7, #20]
 801630e:	68ba      	ldr	r2, [r7, #8]
 8016310:	4413      	add	r3, r2
 8016312:	60bb      	str	r3, [r7, #8]
			}
			written_total += written;
 8016314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016316:	697b      	ldr	r3, [r7, #20]
 8016318:	4413      	add	r3, r2
 801631a:	63bb      	str	r3, [r7, #56]	; 0x38
			if (i < (count - 1)) {
 801631c:	6a3b      	ldr	r3, [r7, #32]
 801631e:	3b01      	subs	r3, #1
 8016320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016322:	429a      	cmp	r2, r3
 8016324:	d215      	bcs.n	8016352 <json_serialize_to_buffer_r+0x1a2>
				APPEND_STRING(",");
 8016326:	4963      	ldr	r1, [pc, #396]	; (80164b4 <json_serialize_to_buffer_r+0x304>)
 8016328:	68b8      	ldr	r0, [r7, #8]
 801632a:	f000 ff49 	bl	80171c0 <append_string>
 801632e:	6178      	str	r0, [r7, #20]
 8016330:	697b      	ldr	r3, [r7, #20]
 8016332:	2b00      	cmp	r3, #0
 8016334:	da02      	bge.n	801633c <json_serialize_to_buffer_r+0x18c>
 8016336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801633a:	e257      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d003      	beq.n	801634a <json_serialize_to_buffer_r+0x19a>
 8016342:	697b      	ldr	r3, [r7, #20]
 8016344:	68ba      	ldr	r2, [r7, #8]
 8016346:	4413      	add	r3, r2
 8016348:	60bb      	str	r3, [r7, #8]
 801634a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801634c:	697b      	ldr	r3, [r7, #20]
 801634e:	4413      	add	r3, r2
 8016350:	63bb      	str	r3, [r7, #56]	; 0x38
			}
			if (is_pretty) {
 8016352:	683b      	ldr	r3, [r7, #0]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d015      	beq.n	8016384 <json_serialize_to_buffer_r+0x1d4>
				APPEND_STRING("\n");
 8016358:	4955      	ldr	r1, [pc, #340]	; (80164b0 <json_serialize_to_buffer_r+0x300>)
 801635a:	68b8      	ldr	r0, [r7, #8]
 801635c:	f000 ff30 	bl	80171c0 <append_string>
 8016360:	6178      	str	r0, [r7, #20]
 8016362:	697b      	ldr	r3, [r7, #20]
 8016364:	2b00      	cmp	r3, #0
 8016366:	da02      	bge.n	801636e <json_serialize_to_buffer_r+0x1be>
 8016368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801636c:	e23e      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 801636e:	68bb      	ldr	r3, [r7, #8]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d003      	beq.n	801637c <json_serialize_to_buffer_r+0x1cc>
 8016374:	697b      	ldr	r3, [r7, #20]
 8016376:	68ba      	ldr	r2, [r7, #8]
 8016378:	4413      	add	r3, r2
 801637a:	60bb      	str	r3, [r7, #8]
 801637c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801637e:	697b      	ldr	r3, [r7, #20]
 8016380:	4413      	add	r3, r2
 8016382:	63bb      	str	r3, [r7, #56]	; 0x38
		for (i = 0; i < count; i++) {
 8016384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016386:	3301      	adds	r3, #1
 8016388:	63fb      	str	r3, [r7, #60]	; 0x3c
 801638a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801638c:	6a3b      	ldr	r3, [r7, #32]
 801638e:	429a      	cmp	r2, r3
 8016390:	d389      	bcc.n	80162a6 <json_serialize_to_buffer_r+0xf6>
			}
		}
		if (count > 0 && is_pretty) {
 8016392:	6a3b      	ldr	r3, [r7, #32]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d018      	beq.n	80163ca <json_serialize_to_buffer_r+0x21a>
 8016398:	683b      	ldr	r3, [r7, #0]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d015      	beq.n	80163ca <json_serialize_to_buffer_r+0x21a>
			APPEND_INDENT(level);
 801639e:	6879      	ldr	r1, [r7, #4]
 80163a0:	68b8      	ldr	r0, [r7, #8]
 80163a2:	f000 fedb 	bl	801715c <append_indent>
 80163a6:	6178      	str	r0, [r7, #20]
 80163a8:	697b      	ldr	r3, [r7, #20]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	da02      	bge.n	80163b4 <json_serialize_to_buffer_r+0x204>
 80163ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163b2:	e21b      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d003      	beq.n	80163c2 <json_serialize_to_buffer_r+0x212>
 80163ba:	697b      	ldr	r3, [r7, #20]
 80163bc:	68ba      	ldr	r2, [r7, #8]
 80163be:	4413      	add	r3, r2
 80163c0:	60bb      	str	r3, [r7, #8]
 80163c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80163c4:	697b      	ldr	r3, [r7, #20]
 80163c6:	4413      	add	r3, r2
 80163c8:	63bb      	str	r3, [r7, #56]	; 0x38
		}
		APPEND_STRING("]");
 80163ca:	493b      	ldr	r1, [pc, #236]	; (80164b8 <json_serialize_to_buffer_r+0x308>)
 80163cc:	68b8      	ldr	r0, [r7, #8]
 80163ce:	f000 fef7 	bl	80171c0 <append_string>
 80163d2:	6178      	str	r0, [r7, #20]
 80163d4:	697b      	ldr	r3, [r7, #20]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	da02      	bge.n	80163e0 <json_serialize_to_buffer_r+0x230>
 80163da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163de:	e205      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 80163e0:	68bb      	ldr	r3, [r7, #8]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d003      	beq.n	80163ee <json_serialize_to_buffer_r+0x23e>
 80163e6:	697b      	ldr	r3, [r7, #20]
 80163e8:	68ba      	ldr	r2, [r7, #8]
 80163ea:	4413      	add	r3, r2
 80163ec:	60bb      	str	r3, [r7, #8]
 80163ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80163f0:	697b      	ldr	r3, [r7, #20]
 80163f2:	4413      	add	r3, r2
 80163f4:	63bb      	str	r3, [r7, #56]	; 0x38
		return written_total;
 80163f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163f8:	e1f8      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
	case JSONObject:
		object = json_value_get_object(value);
 80163fa:	68f8      	ldr	r0, [r7, #12]
 80163fc:	f001 f806 	bl	801740c <json_value_get_object>
 8016400:	6278      	str	r0, [r7, #36]	; 0x24
		count = json_object_get_count(object);
 8016402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016404:	f000 ff5b 	bl	80172be <json_object_get_count>
 8016408:	6238      	str	r0, [r7, #32]
		APPEND_STRING("{");
 801640a:	492c      	ldr	r1, [pc, #176]	; (80164bc <json_serialize_to_buffer_r+0x30c>)
 801640c:	68b8      	ldr	r0, [r7, #8]
 801640e:	f000 fed7 	bl	80171c0 <append_string>
 8016412:	6178      	str	r0, [r7, #20]
 8016414:	697b      	ldr	r3, [r7, #20]
 8016416:	2b00      	cmp	r3, #0
 8016418:	da02      	bge.n	8016420 <json_serialize_to_buffer_r+0x270>
 801641a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801641e:	e1e5      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d003      	beq.n	801642e <json_serialize_to_buffer_r+0x27e>
 8016426:	697b      	ldr	r3, [r7, #20]
 8016428:	68ba      	ldr	r2, [r7, #8]
 801642a:	4413      	add	r3, r2
 801642c:	60bb      	str	r3, [r7, #8]
 801642e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016430:	697b      	ldr	r3, [r7, #20]
 8016432:	4413      	add	r3, r2
 8016434:	63bb      	str	r3, [r7, #56]	; 0x38
		if (count > 0 && is_pretty) {
 8016436:	6a3b      	ldr	r3, [r7, #32]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d018      	beq.n	801646e <json_serialize_to_buffer_r+0x2be>
 801643c:	683b      	ldr	r3, [r7, #0]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d015      	beq.n	801646e <json_serialize_to_buffer_r+0x2be>
			APPEND_STRING("\n");
 8016442:	491b      	ldr	r1, [pc, #108]	; (80164b0 <json_serialize_to_buffer_r+0x300>)
 8016444:	68b8      	ldr	r0, [r7, #8]
 8016446:	f000 febb 	bl	80171c0 <append_string>
 801644a:	6178      	str	r0, [r7, #20]
 801644c:	697b      	ldr	r3, [r7, #20]
 801644e:	2b00      	cmp	r3, #0
 8016450:	da02      	bge.n	8016458 <json_serialize_to_buffer_r+0x2a8>
 8016452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016456:	e1c9      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 8016458:	68bb      	ldr	r3, [r7, #8]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d003      	beq.n	8016466 <json_serialize_to_buffer_r+0x2b6>
 801645e:	697b      	ldr	r3, [r7, #20]
 8016460:	68ba      	ldr	r2, [r7, #8]
 8016462:	4413      	add	r3, r2
 8016464:	60bb      	str	r3, [r7, #8]
 8016466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016468:	697b      	ldr	r3, [r7, #20]
 801646a:	4413      	add	r3, r2
 801646c:	63bb      	str	r3, [r7, #56]	; 0x38
		}
		for (i = 0; i < count; i++) {
 801646e:	2300      	movs	r3, #0
 8016470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016472:	e0d1      	b.n	8016618 <json_serialize_to_buffer_r+0x468>
			key = json_object_get_name(object, i);
 8016474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016478:	f000 ff32 	bl	80172e0 <json_object_get_name>
 801647c:	6378      	str	r0, [r7, #52]	; 0x34
			if (key == NULL) {
 801647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016480:	2b00      	cmp	r3, #0
 8016482:	d102      	bne.n	801648a <json_serialize_to_buffer_r+0x2da>
				return -1;
 8016484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016488:	e1b0      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
			}
			if (is_pretty) {
 801648a:	683b      	ldr	r3, [r7, #0]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d022      	beq.n	80164d6 <json_serialize_to_buffer_r+0x326>
				APPEND_INDENT(level + 1);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	3301      	adds	r3, #1
 8016494:	4619      	mov	r1, r3
 8016496:	68b8      	ldr	r0, [r7, #8]
 8016498:	f000 fe60 	bl	801715c <append_indent>
 801649c:	6178      	str	r0, [r7, #20]
 801649e:	697b      	ldr	r3, [r7, #20]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	da0d      	bge.n	80164c0 <json_serialize_to_buffer_r+0x310>
 80164a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80164a8:	e1a0      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 80164aa:	bf00      	nop
 80164ac:	0801e7ec 	.word	0x0801e7ec
 80164b0:	0801e7f0 	.word	0x0801e7f0
 80164b4:	0801e7f4 	.word	0x0801e7f4
 80164b8:	0801e7f8 	.word	0x0801e7f8
 80164bc:	0801e7fc 	.word	0x0801e7fc
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d003      	beq.n	80164ce <json_serialize_to_buffer_r+0x31e>
 80164c6:	697b      	ldr	r3, [r7, #20]
 80164c8:	68ba      	ldr	r2, [r7, #8]
 80164ca:	4413      	add	r3, r2
 80164cc:	60bb      	str	r3, [r7, #8]
 80164ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80164d0:	697b      	ldr	r3, [r7, #20]
 80164d2:	4413      	add	r3, r2
 80164d4:	63bb      	str	r3, [r7, #56]	; 0x38
			}
			/* We do not support key names with embedded \0 chars */
			written = json_serialize_string(key, strlen(key), buf);
 80164d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80164d8:	f7e9 ff0c 	bl	80002f4 <strlen>
 80164dc:	4603      	mov	r3, r0
 80164de:	68ba      	ldr	r2, [r7, #8]
 80164e0:	4619      	mov	r1, r3
 80164e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80164e4:	f000 f988 	bl	80167f8 <json_serialize_string>
 80164e8:	6178      	str	r0, [r7, #20]
			if (written < 0) {
 80164ea:	697b      	ldr	r3, [r7, #20]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	da02      	bge.n	80164f6 <json_serialize_to_buffer_r+0x346>
				return -1;
 80164f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80164f4:	e17a      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
			}
			if (buf != NULL) {
 80164f6:	68bb      	ldr	r3, [r7, #8]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d003      	beq.n	8016504 <json_serialize_to_buffer_r+0x354>
				buf += written;
 80164fc:	697b      	ldr	r3, [r7, #20]
 80164fe:	68ba      	ldr	r2, [r7, #8]
 8016500:	4413      	add	r3, r2
 8016502:	60bb      	str	r3, [r7, #8]
			}
			written_total += written;
 8016504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016506:	697b      	ldr	r3, [r7, #20]
 8016508:	4413      	add	r3, r2
 801650a:	63bb      	str	r3, [r7, #56]	; 0x38
			APPEND_STRING(":");
 801650c:	499a      	ldr	r1, [pc, #616]	; (8016778 <json_serialize_to_buffer_r+0x5c8>)
 801650e:	68b8      	ldr	r0, [r7, #8]
 8016510:	f000 fe56 	bl	80171c0 <append_string>
 8016514:	6178      	str	r0, [r7, #20]
 8016516:	697b      	ldr	r3, [r7, #20]
 8016518:	2b00      	cmp	r3, #0
 801651a:	da02      	bge.n	8016522 <json_serialize_to_buffer_r+0x372>
 801651c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016520:	e164      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 8016522:	68bb      	ldr	r3, [r7, #8]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d003      	beq.n	8016530 <json_serialize_to_buffer_r+0x380>
 8016528:	697b      	ldr	r3, [r7, #20]
 801652a:	68ba      	ldr	r2, [r7, #8]
 801652c:	4413      	add	r3, r2
 801652e:	60bb      	str	r3, [r7, #8]
 8016530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016532:	697b      	ldr	r3, [r7, #20]
 8016534:	4413      	add	r3, r2
 8016536:	63bb      	str	r3, [r7, #56]	; 0x38
			if (is_pretty) {
 8016538:	683b      	ldr	r3, [r7, #0]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d015      	beq.n	801656a <json_serialize_to_buffer_r+0x3ba>
				APPEND_STRING(" ");
 801653e:	498f      	ldr	r1, [pc, #572]	; (801677c <json_serialize_to_buffer_r+0x5cc>)
 8016540:	68b8      	ldr	r0, [r7, #8]
 8016542:	f000 fe3d 	bl	80171c0 <append_string>
 8016546:	6178      	str	r0, [r7, #20]
 8016548:	697b      	ldr	r3, [r7, #20]
 801654a:	2b00      	cmp	r3, #0
 801654c:	da02      	bge.n	8016554 <json_serialize_to_buffer_r+0x3a4>
 801654e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016552:	e14b      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 8016554:	68bb      	ldr	r3, [r7, #8]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d003      	beq.n	8016562 <json_serialize_to_buffer_r+0x3b2>
 801655a:	697b      	ldr	r3, [r7, #20]
 801655c:	68ba      	ldr	r2, [r7, #8]
 801655e:	4413      	add	r3, r2
 8016560:	60bb      	str	r3, [r7, #8]
 8016562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016564:	697b      	ldr	r3, [r7, #20]
 8016566:	4413      	add	r3, r2
 8016568:	63bb      	str	r3, [r7, #56]	; 0x38
			}
			temp_value = json_object_get_value_at(object, i);
 801656a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801656c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801656e:	f000 fed2 	bl	8017316 <json_object_get_value_at>
 8016572:	62f8      	str	r0, [r7, #44]	; 0x2c
			written = json_serialize_to_buffer_r(temp_value, buf, level + 1,
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	1c5a      	adds	r2, r3, #1
 8016578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801657a:	9300      	str	r3, [sp, #0]
 801657c:	683b      	ldr	r3, [r7, #0]
 801657e:	68b9      	ldr	r1, [r7, #8]
 8016580:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016582:	f7ff fe15 	bl	80161b0 <json_serialize_to_buffer_r>
 8016586:	6178      	str	r0, [r7, #20]
					is_pretty, num_buf);
			if (written < 0) {
 8016588:	697b      	ldr	r3, [r7, #20]
 801658a:	2b00      	cmp	r3, #0
 801658c:	da02      	bge.n	8016594 <json_serialize_to_buffer_r+0x3e4>
				return -1;
 801658e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016592:	e12b      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
			}
			if (buf != NULL) {
 8016594:	68bb      	ldr	r3, [r7, #8]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d003      	beq.n	80165a2 <json_serialize_to_buffer_r+0x3f2>
				buf += written;
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	68ba      	ldr	r2, [r7, #8]
 801659e:	4413      	add	r3, r2
 80165a0:	60bb      	str	r3, [r7, #8]
			}
			written_total += written;
 80165a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80165a4:	697b      	ldr	r3, [r7, #20]
 80165a6:	4413      	add	r3, r2
 80165a8:	63bb      	str	r3, [r7, #56]	; 0x38
			if (i < (count - 1)) {
 80165aa:	6a3b      	ldr	r3, [r7, #32]
 80165ac:	3b01      	subs	r3, #1
 80165ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d215      	bcs.n	80165e0 <json_serialize_to_buffer_r+0x430>
				APPEND_STRING(",");
 80165b4:	4972      	ldr	r1, [pc, #456]	; (8016780 <json_serialize_to_buffer_r+0x5d0>)
 80165b6:	68b8      	ldr	r0, [r7, #8]
 80165b8:	f000 fe02 	bl	80171c0 <append_string>
 80165bc:	6178      	str	r0, [r7, #20]
 80165be:	697b      	ldr	r3, [r7, #20]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	da02      	bge.n	80165ca <json_serialize_to_buffer_r+0x41a>
 80165c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165c8:	e110      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 80165ca:	68bb      	ldr	r3, [r7, #8]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d003      	beq.n	80165d8 <json_serialize_to_buffer_r+0x428>
 80165d0:	697b      	ldr	r3, [r7, #20]
 80165d2:	68ba      	ldr	r2, [r7, #8]
 80165d4:	4413      	add	r3, r2
 80165d6:	60bb      	str	r3, [r7, #8]
 80165d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80165da:	697b      	ldr	r3, [r7, #20]
 80165dc:	4413      	add	r3, r2
 80165de:	63bb      	str	r3, [r7, #56]	; 0x38
			}
			if (is_pretty) {
 80165e0:	683b      	ldr	r3, [r7, #0]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d015      	beq.n	8016612 <json_serialize_to_buffer_r+0x462>
				APPEND_STRING("\n");
 80165e6:	4967      	ldr	r1, [pc, #412]	; (8016784 <json_serialize_to_buffer_r+0x5d4>)
 80165e8:	68b8      	ldr	r0, [r7, #8]
 80165ea:	f000 fde9 	bl	80171c0 <append_string>
 80165ee:	6178      	str	r0, [r7, #20]
 80165f0:	697b      	ldr	r3, [r7, #20]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	da02      	bge.n	80165fc <json_serialize_to_buffer_r+0x44c>
 80165f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165fa:	e0f7      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d003      	beq.n	801660a <json_serialize_to_buffer_r+0x45a>
 8016602:	697b      	ldr	r3, [r7, #20]
 8016604:	68ba      	ldr	r2, [r7, #8]
 8016606:	4413      	add	r3, r2
 8016608:	60bb      	str	r3, [r7, #8]
 801660a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801660c:	697b      	ldr	r3, [r7, #20]
 801660e:	4413      	add	r3, r2
 8016610:	63bb      	str	r3, [r7, #56]	; 0x38
		for (i = 0; i < count; i++) {
 8016612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016614:	3301      	adds	r3, #1
 8016616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801661a:	6a3b      	ldr	r3, [r7, #32]
 801661c:	429a      	cmp	r2, r3
 801661e:	f4ff af29 	bcc.w	8016474 <json_serialize_to_buffer_r+0x2c4>
			}
		}
		if (count > 0 && is_pretty) {
 8016622:	6a3b      	ldr	r3, [r7, #32]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d018      	beq.n	801665a <json_serialize_to_buffer_r+0x4aa>
 8016628:	683b      	ldr	r3, [r7, #0]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d015      	beq.n	801665a <json_serialize_to_buffer_r+0x4aa>
			APPEND_INDENT(level);
 801662e:	6879      	ldr	r1, [r7, #4]
 8016630:	68b8      	ldr	r0, [r7, #8]
 8016632:	f000 fd93 	bl	801715c <append_indent>
 8016636:	6178      	str	r0, [r7, #20]
 8016638:	697b      	ldr	r3, [r7, #20]
 801663a:	2b00      	cmp	r3, #0
 801663c:	da02      	bge.n	8016644 <json_serialize_to_buffer_r+0x494>
 801663e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016642:	e0d3      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 8016644:	68bb      	ldr	r3, [r7, #8]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d003      	beq.n	8016652 <json_serialize_to_buffer_r+0x4a2>
 801664a:	697b      	ldr	r3, [r7, #20]
 801664c:	68ba      	ldr	r2, [r7, #8]
 801664e:	4413      	add	r3, r2
 8016650:	60bb      	str	r3, [r7, #8]
 8016652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016654:	697b      	ldr	r3, [r7, #20]
 8016656:	4413      	add	r3, r2
 8016658:	63bb      	str	r3, [r7, #56]	; 0x38
		}
		APPEND_STRING("}");
 801665a:	494b      	ldr	r1, [pc, #300]	; (8016788 <json_serialize_to_buffer_r+0x5d8>)
 801665c:	68b8      	ldr	r0, [r7, #8]
 801665e:	f000 fdaf 	bl	80171c0 <append_string>
 8016662:	6178      	str	r0, [r7, #20]
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	2b00      	cmp	r3, #0
 8016668:	da02      	bge.n	8016670 <json_serialize_to_buffer_r+0x4c0>
 801666a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801666e:	e0bd      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d003      	beq.n	801667e <json_serialize_to_buffer_r+0x4ce>
 8016676:	697b      	ldr	r3, [r7, #20]
 8016678:	68ba      	ldr	r2, [r7, #8]
 801667a:	4413      	add	r3, r2
 801667c:	60bb      	str	r3, [r7, #8]
 801667e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016680:	697b      	ldr	r3, [r7, #20]
 8016682:	4413      	add	r3, r2
 8016684:	63bb      	str	r3, [r7, #56]	; 0x38
		return written_total;
 8016686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016688:	e0b0      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
	case JSONString:
		string = json_value_get_string(value);
 801668a:	68f8      	ldr	r0, [r7, #12]
 801668c:	f000 fef4 	bl	8017478 <json_value_get_string>
 8016690:	6338      	str	r0, [r7, #48]	; 0x30
		if (string == NULL) {
 8016692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016694:	2b00      	cmp	r3, #0
 8016696:	d102      	bne.n	801669e <json_serialize_to_buffer_r+0x4ee>
			return -1;
 8016698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801669c:	e0a6      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
		}
		len = json_value_get_string_len(value);
 801669e:	68f8      	ldr	r0, [r7, #12]
 80166a0:	f000 fefd 	bl	801749e <json_value_get_string_len>
 80166a4:	6138      	str	r0, [r7, #16]
		written = json_serialize_string(string, len, buf);
 80166a6:	68ba      	ldr	r2, [r7, #8]
 80166a8:	6939      	ldr	r1, [r7, #16]
 80166aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166ac:	f000 f8a4 	bl	80167f8 <json_serialize_string>
 80166b0:	6178      	str	r0, [r7, #20]
		if (written < 0) {
 80166b2:	697b      	ldr	r3, [r7, #20]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	da02      	bge.n	80166be <json_serialize_to_buffer_r+0x50e>
			return -1;
 80166b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166bc:	e096      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
		}
		if (buf != NULL) {
 80166be:	68bb      	ldr	r3, [r7, #8]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d003      	beq.n	80166cc <json_serialize_to_buffer_r+0x51c>
			buf += written;
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	68ba      	ldr	r2, [r7, #8]
 80166c8:	4413      	add	r3, r2
 80166ca:	60bb      	str	r3, [r7, #8]
		}
		written_total += written;
 80166cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166ce:	697b      	ldr	r3, [r7, #20]
 80166d0:	4413      	add	r3, r2
 80166d2:	63bb      	str	r3, [r7, #56]	; 0x38
		return written_total;
 80166d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166d6:	e089      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
	case JSONBoolean:
		if (json_value_get_boolean(value)) {
 80166d8:	68f8      	ldr	r0, [r7, #12]
 80166da:	f000 ff0c 	bl	80174f6 <json_value_get_boolean>
 80166de:	4603      	mov	r3, r0
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d016      	beq.n	8016712 <json_serialize_to_buffer_r+0x562>
			APPEND_STRING("true");
 80166e4:	4929      	ldr	r1, [pc, #164]	; (801678c <json_serialize_to_buffer_r+0x5dc>)
 80166e6:	68b8      	ldr	r0, [r7, #8]
 80166e8:	f000 fd6a 	bl	80171c0 <append_string>
 80166ec:	6178      	str	r0, [r7, #20]
 80166ee:	697b      	ldr	r3, [r7, #20]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	da02      	bge.n	80166fa <json_serialize_to_buffer_r+0x54a>
 80166f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166f8:	e078      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 80166fa:	68bb      	ldr	r3, [r7, #8]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d003      	beq.n	8016708 <json_serialize_to_buffer_r+0x558>
 8016700:	697b      	ldr	r3, [r7, #20]
 8016702:	68ba      	ldr	r2, [r7, #8]
 8016704:	4413      	add	r3, r2
 8016706:	60bb      	str	r3, [r7, #8]
 8016708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801670a:	697b      	ldr	r3, [r7, #20]
 801670c:	4413      	add	r3, r2
 801670e:	63bb      	str	r3, [r7, #56]	; 0x38
 8016710:	e015      	b.n	801673e <json_serialize_to_buffer_r+0x58e>
		} else {
			APPEND_STRING("false");
 8016712:	491f      	ldr	r1, [pc, #124]	; (8016790 <json_serialize_to_buffer_r+0x5e0>)
 8016714:	68b8      	ldr	r0, [r7, #8]
 8016716:	f000 fd53 	bl	80171c0 <append_string>
 801671a:	6178      	str	r0, [r7, #20]
 801671c:	697b      	ldr	r3, [r7, #20]
 801671e:	2b00      	cmp	r3, #0
 8016720:	da02      	bge.n	8016728 <json_serialize_to_buffer_r+0x578>
 8016722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016726:	e061      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 8016728:	68bb      	ldr	r3, [r7, #8]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d003      	beq.n	8016736 <json_serialize_to_buffer_r+0x586>
 801672e:	697b      	ldr	r3, [r7, #20]
 8016730:	68ba      	ldr	r2, [r7, #8]
 8016732:	4413      	add	r3, r2
 8016734:	60bb      	str	r3, [r7, #8]
 8016736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016738:	697b      	ldr	r3, [r7, #20]
 801673a:	4413      	add	r3, r2
 801673c:	63bb      	str	r3, [r7, #56]	; 0x38
		}
		return written_total;
 801673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016740:	e054      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
	case JSONNumber:
		num = json_value_get_number(value);
 8016742:	68f8      	ldr	r0, [r7, #12]
 8016744:	f000 febe 	bl	80174c4 <json_value_get_number>
 8016748:	ed87 0b06 	vstr	d0, [r7, #24]
		if (buf != NULL) {
 801674c:	68bb      	ldr	r3, [r7, #8]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d001      	beq.n	8016756 <json_serialize_to_buffer_r+0x5a6>
			num_buf = buf;
 8016752:	68bb      	ldr	r3, [r7, #8]
 8016754:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		written = sprintf(num_buf, FLOAT_FORMAT, (int) num);
 8016756:	ed97 7b06 	vldr	d7, [r7, #24]
 801675a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801675e:	ee17 2a90 	vmov	r2, s15
 8016762:	490c      	ldr	r1, [pc, #48]	; (8016794 <json_serialize_to_buffer_r+0x5e4>)
 8016764:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8016766:	f001 ff7d 	bl	8018664 <siprintf>
 801676a:	6178      	str	r0, [r7, #20]
		if (written < 0) {
 801676c:	697b      	ldr	r3, [r7, #20]
 801676e:	2b00      	cmp	r3, #0
 8016770:	da12      	bge.n	8016798 <json_serialize_to_buffer_r+0x5e8>
			return -1;
 8016772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016776:	e039      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 8016778:	0801e800 	.word	0x0801e800
 801677c:	0801e804 	.word	0x0801e804
 8016780:	0801e7f4 	.word	0x0801e7f4
 8016784:	0801e7f0 	.word	0x0801e7f0
 8016788:	0801e808 	.word	0x0801e808
 801678c:	0801e7d4 	.word	0x0801e7d4
 8016790:	0801e7dc 	.word	0x0801e7dc
 8016794:	0801e80c 	.word	0x0801e80c
		}
		if (buf != NULL) {
 8016798:	68bb      	ldr	r3, [r7, #8]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d003      	beq.n	80167a6 <json_serialize_to_buffer_r+0x5f6>
			buf += written;
 801679e:	697b      	ldr	r3, [r7, #20]
 80167a0:	68ba      	ldr	r2, [r7, #8]
 80167a2:	4413      	add	r3, r2
 80167a4:	60bb      	str	r3, [r7, #8]
		}
		written_total += written;
 80167a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80167a8:	697b      	ldr	r3, [r7, #20]
 80167aa:	4413      	add	r3, r2
 80167ac:	63bb      	str	r3, [r7, #56]	; 0x38
		return written_total;
 80167ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167b0:	e01c      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
	case JSONNull:
		APPEND_STRING("null");
 80167b2:	4910      	ldr	r1, [pc, #64]	; (80167f4 <json_serialize_to_buffer_r+0x644>)
 80167b4:	68b8      	ldr	r0, [r7, #8]
 80167b6:	f000 fd03 	bl	80171c0 <append_string>
 80167ba:	6178      	str	r0, [r7, #20]
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	da02      	bge.n	80167c8 <json_serialize_to_buffer_r+0x618>
 80167c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80167c6:	e011      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
 80167c8:	68bb      	ldr	r3, [r7, #8]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d003      	beq.n	80167d6 <json_serialize_to_buffer_r+0x626>
 80167ce:	697b      	ldr	r3, [r7, #20]
 80167d0:	68ba      	ldr	r2, [r7, #8]
 80167d2:	4413      	add	r3, r2
 80167d4:	60bb      	str	r3, [r7, #8]
 80167d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80167d8:	697b      	ldr	r3, [r7, #20]
 80167da:	4413      	add	r3, r2
 80167dc:	63bb      	str	r3, [r7, #56]	; 0x38
		return written_total;
 80167de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167e0:	e004      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
	case JSONError:
		return -1;
 80167e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80167e6:	e001      	b.n	80167ec <json_serialize_to_buffer_r+0x63c>
	default:
		return -1;
 80167e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 80167ec:	4618      	mov	r0, r3
 80167ee:	3740      	adds	r7, #64	; 0x40
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}
 80167f4:	0801e7e4 	.word	0x0801e7e4

080167f8 <json_serialize_string>:

static int json_serialize_string(const char *string, size_t len, char *buf) {
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b088      	sub	sp, #32
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	60f8      	str	r0, [r7, #12]
 8016800:	60b9      	str	r1, [r7, #8]
 8016802:	607a      	str	r2, [r7, #4]
	size_t i = 0;
 8016804:	2300      	movs	r3, #0
 8016806:	61fb      	str	r3, [r7, #28]
	char c = '\0';
 8016808:	2300      	movs	r3, #0
 801680a:	75fb      	strb	r3, [r7, #23]
	int written = -1, written_total = 0;
 801680c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016810:	613b      	str	r3, [r7, #16]
 8016812:	2300      	movs	r3, #0
 8016814:	61bb      	str	r3, [r7, #24]
	APPEND_STRING("\"");
 8016816:	49bb      	ldr	r1, [pc, #748]	; (8016b04 <json_serialize_string+0x30c>)
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	f000 fcd1 	bl	80171c0 <append_string>
 801681e:	6138      	str	r0, [r7, #16]
 8016820:	693b      	ldr	r3, [r7, #16]
 8016822:	2b00      	cmp	r3, #0
 8016824:	da03      	bge.n	801682e <json_serialize_string+0x36>
 8016826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801682a:	f000 bc88 	b.w	801713e <json_serialize_string+0x946>
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d003      	beq.n	801683c <json_serialize_string+0x44>
 8016834:	693b      	ldr	r3, [r7, #16]
 8016836:	687a      	ldr	r2, [r7, #4]
 8016838:	4413      	add	r3, r2
 801683a:	607b      	str	r3, [r7, #4]
 801683c:	69ba      	ldr	r2, [r7, #24]
 801683e:	693b      	ldr	r3, [r7, #16]
 8016840:	4413      	add	r3, r2
 8016842:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < len; i++) {
 8016844:	2300      	movs	r3, #0
 8016846:	61fb      	str	r3, [r7, #28]
 8016848:	f000 bc5d 	b.w	8017106 <json_serialize_string+0x90e>
		c = string[i];
 801684c:	68fa      	ldr	r2, [r7, #12]
 801684e:	69fb      	ldr	r3, [r7, #28]
 8016850:	4413      	add	r3, r2
 8016852:	781b      	ldrb	r3, [r3, #0]
 8016854:	75fb      	strb	r3, [r7, #23]
		switch (c) {
 8016856:	7dfb      	ldrb	r3, [r7, #23]
 8016858:	2b5c      	cmp	r3, #92	; 0x5c
 801685a:	f200 8444 	bhi.w	80170e6 <json_serialize_string+0x8ee>
 801685e:	a201      	add	r2, pc, #4	; (adr r2, 8016864 <json_serialize_string+0x6c>)
 8016860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016864:	08016b3d 	.word	0x08016b3d
 8016868:	08016b6b 	.word	0x08016b6b
 801686c:	08016b99 	.word	0x08016b99
 8016870:	08016bc7 	.word	0x08016bc7
 8016874:	08016bf5 	.word	0x08016bf5
 8016878:	08016c23 	.word	0x08016c23
 801687c:	08016c51 	.word	0x08016c51
 8016880:	08016c7f 	.word	0x08016c7f
 8016884:	08016a35 	.word	0x08016a35
 8016888:	08016aed 	.word	0x08016aed
 801688c:	08016a91 	.word	0x08016a91
 8016890:	08016cad 	.word	0x08016cad
 8016894:	08016a63 	.word	0x08016a63
 8016898:	08016abf 	.word	0x08016abf
 801689c:	08016cdb 	.word	0x08016cdb
 80168a0:	08016d09 	.word	0x08016d09
 80168a4:	08016d37 	.word	0x08016d37
 80168a8:	08016d65 	.word	0x08016d65
 80168ac:	08016dc9 	.word	0x08016dc9
 80168b0:	08016df7 	.word	0x08016df7
 80168b4:	08016e25 	.word	0x08016e25
 80168b8:	08016e53 	.word	0x08016e53
 80168bc:	08016e81 	.word	0x08016e81
 80168c0:	08016eaf 	.word	0x08016eaf
 80168c4:	08016edd 	.word	0x08016edd
 80168c8:	08016f0b 	.word	0x08016f0b
 80168cc:	08016f39 	.word	0x08016f39
 80168d0:	08016f67 	.word	0x08016f67
 80168d4:	08016f95 	.word	0x08016f95
 80168d8:	08016fc3 	.word	0x08016fc3
 80168dc:	08016ff1 	.word	0x08016ff1
 80168e0:	08017055 	.word	0x08017055
 80168e4:	080170e7 	.word	0x080170e7
 80168e8:	080170e7 	.word	0x080170e7
 80168ec:	080169d9 	.word	0x080169d9
 80168f0:	080170e7 	.word	0x080170e7
 80168f4:	080170e7 	.word	0x080170e7
 80168f8:	080170e7 	.word	0x080170e7
 80168fc:	080170e7 	.word	0x080170e7
 8016900:	080170e7 	.word	0x080170e7
 8016904:	080170e7 	.word	0x080170e7
 8016908:	080170e7 	.word	0x080170e7
 801690c:	080170e7 	.word	0x080170e7
 8016910:	080170e7 	.word	0x080170e7
 8016914:	080170e7 	.word	0x080170e7
 8016918:	080170e7 	.word	0x080170e7
 801691c:	080170e7 	.word	0x080170e7
 8016920:	08017083 	.word	0x08017083
 8016924:	080170e7 	.word	0x080170e7
 8016928:	080170e7 	.word	0x080170e7
 801692c:	080170e7 	.word	0x080170e7
 8016930:	080170e7 	.word	0x080170e7
 8016934:	080170e7 	.word	0x080170e7
 8016938:	080170e7 	.word	0x080170e7
 801693c:	080170e7 	.word	0x080170e7
 8016940:	080170e7 	.word	0x080170e7
 8016944:	080170e7 	.word	0x080170e7
 8016948:	080170e7 	.word	0x080170e7
 801694c:	080170e7 	.word	0x080170e7
 8016950:	080170e7 	.word	0x080170e7
 8016954:	080170e7 	.word	0x080170e7
 8016958:	080170e7 	.word	0x080170e7
 801695c:	080170e7 	.word	0x080170e7
 8016960:	080170e7 	.word	0x080170e7
 8016964:	080170e7 	.word	0x080170e7
 8016968:	080170e7 	.word	0x080170e7
 801696c:	080170e7 	.word	0x080170e7
 8016970:	080170e7 	.word	0x080170e7
 8016974:	080170e7 	.word	0x080170e7
 8016978:	080170e7 	.word	0x080170e7
 801697c:	080170e7 	.word	0x080170e7
 8016980:	080170e7 	.word	0x080170e7
 8016984:	080170e7 	.word	0x080170e7
 8016988:	080170e7 	.word	0x080170e7
 801698c:	080170e7 	.word	0x080170e7
 8016990:	080170e7 	.word	0x080170e7
 8016994:	080170e7 	.word	0x080170e7
 8016998:	080170e7 	.word	0x080170e7
 801699c:	080170e7 	.word	0x080170e7
 80169a0:	080170e7 	.word	0x080170e7
 80169a4:	080170e7 	.word	0x080170e7
 80169a8:	080170e7 	.word	0x080170e7
 80169ac:	080170e7 	.word	0x080170e7
 80169b0:	080170e7 	.word	0x080170e7
 80169b4:	080170e7 	.word	0x080170e7
 80169b8:	080170e7 	.word	0x080170e7
 80169bc:	080170e7 	.word	0x080170e7
 80169c0:	080170e7 	.word	0x080170e7
 80169c4:	080170e7 	.word	0x080170e7
 80169c8:	080170e7 	.word	0x080170e7
 80169cc:	080170e7 	.word	0x080170e7
 80169d0:	080170e7 	.word	0x080170e7
 80169d4:	08016a07 	.word	0x08016a07
		case '\"':
			APPEND_STRING("\\\"");
 80169d8:	494b      	ldr	r1, [pc, #300]	; (8016b08 <json_serialize_string+0x310>)
 80169da:	6878      	ldr	r0, [r7, #4]
 80169dc:	f000 fbf0 	bl	80171c0 <append_string>
 80169e0:	6138      	str	r0, [r7, #16]
 80169e2:	693b      	ldr	r3, [r7, #16]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	da02      	bge.n	80169ee <json_serialize_string+0x1f6>
 80169e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80169ec:	e3a7      	b.n	801713e <json_serialize_string+0x946>
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d003      	beq.n	80169fc <json_serialize_string+0x204>
 80169f4:	693b      	ldr	r3, [r7, #16]
 80169f6:	687a      	ldr	r2, [r7, #4]
 80169f8:	4413      	add	r3, r2
 80169fa:	607b      	str	r3, [r7, #4]
 80169fc:	69ba      	ldr	r2, [r7, #24]
 80169fe:	693b      	ldr	r3, [r7, #16]
 8016a00:	4413      	add	r3, r2
 8016a02:	61bb      	str	r3, [r7, #24]
			break;
 8016a04:	e37c      	b.n	8017100 <json_serialize_string+0x908>
		case '\\':
			APPEND_STRING("\\\\");
 8016a06:	4941      	ldr	r1, [pc, #260]	; (8016b0c <json_serialize_string+0x314>)
 8016a08:	6878      	ldr	r0, [r7, #4]
 8016a0a:	f000 fbd9 	bl	80171c0 <append_string>
 8016a0e:	6138      	str	r0, [r7, #16]
 8016a10:	693b      	ldr	r3, [r7, #16]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	da02      	bge.n	8016a1c <json_serialize_string+0x224>
 8016a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a1a:	e390      	b.n	801713e <json_serialize_string+0x946>
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d003      	beq.n	8016a2a <json_serialize_string+0x232>
 8016a22:	693b      	ldr	r3, [r7, #16]
 8016a24:	687a      	ldr	r2, [r7, #4]
 8016a26:	4413      	add	r3, r2
 8016a28:	607b      	str	r3, [r7, #4]
 8016a2a:	69ba      	ldr	r2, [r7, #24]
 8016a2c:	693b      	ldr	r3, [r7, #16]
 8016a2e:	4413      	add	r3, r2
 8016a30:	61bb      	str	r3, [r7, #24]
			break;
 8016a32:	e365      	b.n	8017100 <json_serialize_string+0x908>
		case '\b':
			APPEND_STRING("\\b");
 8016a34:	4936      	ldr	r1, [pc, #216]	; (8016b10 <json_serialize_string+0x318>)
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f000 fbc2 	bl	80171c0 <append_string>
 8016a3c:	6138      	str	r0, [r7, #16]
 8016a3e:	693b      	ldr	r3, [r7, #16]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	da02      	bge.n	8016a4a <json_serialize_string+0x252>
 8016a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a48:	e379      	b.n	801713e <json_serialize_string+0x946>
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d003      	beq.n	8016a58 <json_serialize_string+0x260>
 8016a50:	693b      	ldr	r3, [r7, #16]
 8016a52:	687a      	ldr	r2, [r7, #4]
 8016a54:	4413      	add	r3, r2
 8016a56:	607b      	str	r3, [r7, #4]
 8016a58:	69ba      	ldr	r2, [r7, #24]
 8016a5a:	693b      	ldr	r3, [r7, #16]
 8016a5c:	4413      	add	r3, r2
 8016a5e:	61bb      	str	r3, [r7, #24]
			break;
 8016a60:	e34e      	b.n	8017100 <json_serialize_string+0x908>
		case '\f':
			APPEND_STRING("\\f");
 8016a62:	492c      	ldr	r1, [pc, #176]	; (8016b14 <json_serialize_string+0x31c>)
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f000 fbab 	bl	80171c0 <append_string>
 8016a6a:	6138      	str	r0, [r7, #16]
 8016a6c:	693b      	ldr	r3, [r7, #16]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	da02      	bge.n	8016a78 <json_serialize_string+0x280>
 8016a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a76:	e362      	b.n	801713e <json_serialize_string+0x946>
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d003      	beq.n	8016a86 <json_serialize_string+0x28e>
 8016a7e:	693b      	ldr	r3, [r7, #16]
 8016a80:	687a      	ldr	r2, [r7, #4]
 8016a82:	4413      	add	r3, r2
 8016a84:	607b      	str	r3, [r7, #4]
 8016a86:	69ba      	ldr	r2, [r7, #24]
 8016a88:	693b      	ldr	r3, [r7, #16]
 8016a8a:	4413      	add	r3, r2
 8016a8c:	61bb      	str	r3, [r7, #24]
			break;
 8016a8e:	e337      	b.n	8017100 <json_serialize_string+0x908>
		case '\n':
			APPEND_STRING("\\n");
 8016a90:	4921      	ldr	r1, [pc, #132]	; (8016b18 <json_serialize_string+0x320>)
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	f000 fb94 	bl	80171c0 <append_string>
 8016a98:	6138      	str	r0, [r7, #16]
 8016a9a:	693b      	ldr	r3, [r7, #16]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	da02      	bge.n	8016aa6 <json_serialize_string+0x2ae>
 8016aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016aa4:	e34b      	b.n	801713e <json_serialize_string+0x946>
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d003      	beq.n	8016ab4 <json_serialize_string+0x2bc>
 8016aac:	693b      	ldr	r3, [r7, #16]
 8016aae:	687a      	ldr	r2, [r7, #4]
 8016ab0:	4413      	add	r3, r2
 8016ab2:	607b      	str	r3, [r7, #4]
 8016ab4:	69ba      	ldr	r2, [r7, #24]
 8016ab6:	693b      	ldr	r3, [r7, #16]
 8016ab8:	4413      	add	r3, r2
 8016aba:	61bb      	str	r3, [r7, #24]
			break;
 8016abc:	e320      	b.n	8017100 <json_serialize_string+0x908>
		case '\r':
			APPEND_STRING("\\r");
 8016abe:	4917      	ldr	r1, [pc, #92]	; (8016b1c <json_serialize_string+0x324>)
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f000 fb7d 	bl	80171c0 <append_string>
 8016ac6:	6138      	str	r0, [r7, #16]
 8016ac8:	693b      	ldr	r3, [r7, #16]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	da02      	bge.n	8016ad4 <json_serialize_string+0x2dc>
 8016ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ad2:	e334      	b.n	801713e <json_serialize_string+0x946>
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d003      	beq.n	8016ae2 <json_serialize_string+0x2ea>
 8016ada:	693b      	ldr	r3, [r7, #16]
 8016adc:	687a      	ldr	r2, [r7, #4]
 8016ade:	4413      	add	r3, r2
 8016ae0:	607b      	str	r3, [r7, #4]
 8016ae2:	69ba      	ldr	r2, [r7, #24]
 8016ae4:	693b      	ldr	r3, [r7, #16]
 8016ae6:	4413      	add	r3, r2
 8016ae8:	61bb      	str	r3, [r7, #24]
			break;
 8016aea:	e309      	b.n	8017100 <json_serialize_string+0x908>
		case '\t':
			APPEND_STRING("\\t");
 8016aec:	490c      	ldr	r1, [pc, #48]	; (8016b20 <json_serialize_string+0x328>)
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f000 fb66 	bl	80171c0 <append_string>
 8016af4:	6138      	str	r0, [r7, #16]
 8016af6:	693b      	ldr	r3, [r7, #16]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	da13      	bge.n	8016b24 <json_serialize_string+0x32c>
 8016afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b00:	e31d      	b.n	801713e <json_serialize_string+0x946>
 8016b02:	bf00      	nop
 8016b04:	0801e810 	.word	0x0801e810
 8016b08:	0801e814 	.word	0x0801e814
 8016b0c:	0801e818 	.word	0x0801e818
 8016b10:	0801e81c 	.word	0x0801e81c
 8016b14:	0801e820 	.word	0x0801e820
 8016b18:	0801e824 	.word	0x0801e824
 8016b1c:	0801e828 	.word	0x0801e828
 8016b20:	0801e82c 	.word	0x0801e82c
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d003      	beq.n	8016b32 <json_serialize_string+0x33a>
 8016b2a:	693b      	ldr	r3, [r7, #16]
 8016b2c:	687a      	ldr	r2, [r7, #4]
 8016b2e:	4413      	add	r3, r2
 8016b30:	607b      	str	r3, [r7, #4]
 8016b32:	69ba      	ldr	r2, [r7, #24]
 8016b34:	693b      	ldr	r3, [r7, #16]
 8016b36:	4413      	add	r3, r2
 8016b38:	61bb      	str	r3, [r7, #24]
			break;
 8016b3a:	e2e1      	b.n	8017100 <json_serialize_string+0x908>
		case '\x00':
			APPEND_STRING("\\u0000");
 8016b3c:	4995      	ldr	r1, [pc, #596]	; (8016d94 <json_serialize_string+0x59c>)
 8016b3e:	6878      	ldr	r0, [r7, #4]
 8016b40:	f000 fb3e 	bl	80171c0 <append_string>
 8016b44:	6138      	str	r0, [r7, #16]
 8016b46:	693b      	ldr	r3, [r7, #16]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	da02      	bge.n	8016b52 <json_serialize_string+0x35a>
 8016b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b50:	e2f5      	b.n	801713e <json_serialize_string+0x946>
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d003      	beq.n	8016b60 <json_serialize_string+0x368>
 8016b58:	693b      	ldr	r3, [r7, #16]
 8016b5a:	687a      	ldr	r2, [r7, #4]
 8016b5c:	4413      	add	r3, r2
 8016b5e:	607b      	str	r3, [r7, #4]
 8016b60:	69ba      	ldr	r2, [r7, #24]
 8016b62:	693b      	ldr	r3, [r7, #16]
 8016b64:	4413      	add	r3, r2
 8016b66:	61bb      	str	r3, [r7, #24]
			break;
 8016b68:	e2ca      	b.n	8017100 <json_serialize_string+0x908>
		case '\x01':
			APPEND_STRING("\\u0001");
 8016b6a:	498b      	ldr	r1, [pc, #556]	; (8016d98 <json_serialize_string+0x5a0>)
 8016b6c:	6878      	ldr	r0, [r7, #4]
 8016b6e:	f000 fb27 	bl	80171c0 <append_string>
 8016b72:	6138      	str	r0, [r7, #16]
 8016b74:	693b      	ldr	r3, [r7, #16]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	da02      	bge.n	8016b80 <json_serialize_string+0x388>
 8016b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b7e:	e2de      	b.n	801713e <json_serialize_string+0x946>
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d003      	beq.n	8016b8e <json_serialize_string+0x396>
 8016b86:	693b      	ldr	r3, [r7, #16]
 8016b88:	687a      	ldr	r2, [r7, #4]
 8016b8a:	4413      	add	r3, r2
 8016b8c:	607b      	str	r3, [r7, #4]
 8016b8e:	69ba      	ldr	r2, [r7, #24]
 8016b90:	693b      	ldr	r3, [r7, #16]
 8016b92:	4413      	add	r3, r2
 8016b94:	61bb      	str	r3, [r7, #24]
			break;
 8016b96:	e2b3      	b.n	8017100 <json_serialize_string+0x908>
		case '\x02':
			APPEND_STRING("\\u0002");
 8016b98:	4980      	ldr	r1, [pc, #512]	; (8016d9c <json_serialize_string+0x5a4>)
 8016b9a:	6878      	ldr	r0, [r7, #4]
 8016b9c:	f000 fb10 	bl	80171c0 <append_string>
 8016ba0:	6138      	str	r0, [r7, #16]
 8016ba2:	693b      	ldr	r3, [r7, #16]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	da02      	bge.n	8016bae <json_serialize_string+0x3b6>
 8016ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bac:	e2c7      	b.n	801713e <json_serialize_string+0x946>
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d003      	beq.n	8016bbc <json_serialize_string+0x3c4>
 8016bb4:	693b      	ldr	r3, [r7, #16]
 8016bb6:	687a      	ldr	r2, [r7, #4]
 8016bb8:	4413      	add	r3, r2
 8016bba:	607b      	str	r3, [r7, #4]
 8016bbc:	69ba      	ldr	r2, [r7, #24]
 8016bbe:	693b      	ldr	r3, [r7, #16]
 8016bc0:	4413      	add	r3, r2
 8016bc2:	61bb      	str	r3, [r7, #24]
			break;
 8016bc4:	e29c      	b.n	8017100 <json_serialize_string+0x908>
		case '\x03':
			APPEND_STRING("\\u0003");
 8016bc6:	4976      	ldr	r1, [pc, #472]	; (8016da0 <json_serialize_string+0x5a8>)
 8016bc8:	6878      	ldr	r0, [r7, #4]
 8016bca:	f000 faf9 	bl	80171c0 <append_string>
 8016bce:	6138      	str	r0, [r7, #16]
 8016bd0:	693b      	ldr	r3, [r7, #16]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	da02      	bge.n	8016bdc <json_serialize_string+0x3e4>
 8016bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bda:	e2b0      	b.n	801713e <json_serialize_string+0x946>
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d003      	beq.n	8016bea <json_serialize_string+0x3f2>
 8016be2:	693b      	ldr	r3, [r7, #16]
 8016be4:	687a      	ldr	r2, [r7, #4]
 8016be6:	4413      	add	r3, r2
 8016be8:	607b      	str	r3, [r7, #4]
 8016bea:	69ba      	ldr	r2, [r7, #24]
 8016bec:	693b      	ldr	r3, [r7, #16]
 8016bee:	4413      	add	r3, r2
 8016bf0:	61bb      	str	r3, [r7, #24]
			break;
 8016bf2:	e285      	b.n	8017100 <json_serialize_string+0x908>
		case '\x04':
			APPEND_STRING("\\u0004");
 8016bf4:	496b      	ldr	r1, [pc, #428]	; (8016da4 <json_serialize_string+0x5ac>)
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f000 fae2 	bl	80171c0 <append_string>
 8016bfc:	6138      	str	r0, [r7, #16]
 8016bfe:	693b      	ldr	r3, [r7, #16]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	da02      	bge.n	8016c0a <json_serialize_string+0x412>
 8016c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c08:	e299      	b.n	801713e <json_serialize_string+0x946>
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d003      	beq.n	8016c18 <json_serialize_string+0x420>
 8016c10:	693b      	ldr	r3, [r7, #16]
 8016c12:	687a      	ldr	r2, [r7, #4]
 8016c14:	4413      	add	r3, r2
 8016c16:	607b      	str	r3, [r7, #4]
 8016c18:	69ba      	ldr	r2, [r7, #24]
 8016c1a:	693b      	ldr	r3, [r7, #16]
 8016c1c:	4413      	add	r3, r2
 8016c1e:	61bb      	str	r3, [r7, #24]
			break;
 8016c20:	e26e      	b.n	8017100 <json_serialize_string+0x908>
		case '\x05':
			APPEND_STRING("\\u0005");
 8016c22:	4961      	ldr	r1, [pc, #388]	; (8016da8 <json_serialize_string+0x5b0>)
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	f000 facb 	bl	80171c0 <append_string>
 8016c2a:	6138      	str	r0, [r7, #16]
 8016c2c:	693b      	ldr	r3, [r7, #16]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	da02      	bge.n	8016c38 <json_serialize_string+0x440>
 8016c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c36:	e282      	b.n	801713e <json_serialize_string+0x946>
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d003      	beq.n	8016c46 <json_serialize_string+0x44e>
 8016c3e:	693b      	ldr	r3, [r7, #16]
 8016c40:	687a      	ldr	r2, [r7, #4]
 8016c42:	4413      	add	r3, r2
 8016c44:	607b      	str	r3, [r7, #4]
 8016c46:	69ba      	ldr	r2, [r7, #24]
 8016c48:	693b      	ldr	r3, [r7, #16]
 8016c4a:	4413      	add	r3, r2
 8016c4c:	61bb      	str	r3, [r7, #24]
			break;
 8016c4e:	e257      	b.n	8017100 <json_serialize_string+0x908>
		case '\x06':
			APPEND_STRING("\\u0006");
 8016c50:	4956      	ldr	r1, [pc, #344]	; (8016dac <json_serialize_string+0x5b4>)
 8016c52:	6878      	ldr	r0, [r7, #4]
 8016c54:	f000 fab4 	bl	80171c0 <append_string>
 8016c58:	6138      	str	r0, [r7, #16]
 8016c5a:	693b      	ldr	r3, [r7, #16]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	da02      	bge.n	8016c66 <json_serialize_string+0x46e>
 8016c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c64:	e26b      	b.n	801713e <json_serialize_string+0x946>
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d003      	beq.n	8016c74 <json_serialize_string+0x47c>
 8016c6c:	693b      	ldr	r3, [r7, #16]
 8016c6e:	687a      	ldr	r2, [r7, #4]
 8016c70:	4413      	add	r3, r2
 8016c72:	607b      	str	r3, [r7, #4]
 8016c74:	69ba      	ldr	r2, [r7, #24]
 8016c76:	693b      	ldr	r3, [r7, #16]
 8016c78:	4413      	add	r3, r2
 8016c7a:	61bb      	str	r3, [r7, #24]
			break;
 8016c7c:	e240      	b.n	8017100 <json_serialize_string+0x908>
		case '\x07':
			APPEND_STRING("\\u0007");
 8016c7e:	494c      	ldr	r1, [pc, #304]	; (8016db0 <json_serialize_string+0x5b8>)
 8016c80:	6878      	ldr	r0, [r7, #4]
 8016c82:	f000 fa9d 	bl	80171c0 <append_string>
 8016c86:	6138      	str	r0, [r7, #16]
 8016c88:	693b      	ldr	r3, [r7, #16]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	da02      	bge.n	8016c94 <json_serialize_string+0x49c>
 8016c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c92:	e254      	b.n	801713e <json_serialize_string+0x946>
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d003      	beq.n	8016ca2 <json_serialize_string+0x4aa>
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	687a      	ldr	r2, [r7, #4]
 8016c9e:	4413      	add	r3, r2
 8016ca0:	607b      	str	r3, [r7, #4]
 8016ca2:	69ba      	ldr	r2, [r7, #24]
 8016ca4:	693b      	ldr	r3, [r7, #16]
 8016ca6:	4413      	add	r3, r2
 8016ca8:	61bb      	str	r3, [r7, #24]
			break;
 8016caa:	e229      	b.n	8017100 <json_serialize_string+0x908>
			/* '\x08' duplicate: '\b' */
			/* '\x09' duplicate: '\t' */
			/* '\x0a' duplicate: '\n' */
		case '\x0b':
			APPEND_STRING("\\u000b");
 8016cac:	4941      	ldr	r1, [pc, #260]	; (8016db4 <json_serialize_string+0x5bc>)
 8016cae:	6878      	ldr	r0, [r7, #4]
 8016cb0:	f000 fa86 	bl	80171c0 <append_string>
 8016cb4:	6138      	str	r0, [r7, #16]
 8016cb6:	693b      	ldr	r3, [r7, #16]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	da02      	bge.n	8016cc2 <json_serialize_string+0x4ca>
 8016cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cc0:	e23d      	b.n	801713e <json_serialize_string+0x946>
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d003      	beq.n	8016cd0 <json_serialize_string+0x4d8>
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	687a      	ldr	r2, [r7, #4]
 8016ccc:	4413      	add	r3, r2
 8016cce:	607b      	str	r3, [r7, #4]
 8016cd0:	69ba      	ldr	r2, [r7, #24]
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	4413      	add	r3, r2
 8016cd6:	61bb      	str	r3, [r7, #24]
			break;
 8016cd8:	e212      	b.n	8017100 <json_serialize_string+0x908>
			/* '\x0c' duplicate: '\f' */
			/* '\x0d' duplicate: '\r' */
		case '\x0e':
			APPEND_STRING("\\u000e");
 8016cda:	4937      	ldr	r1, [pc, #220]	; (8016db8 <json_serialize_string+0x5c0>)
 8016cdc:	6878      	ldr	r0, [r7, #4]
 8016cde:	f000 fa6f 	bl	80171c0 <append_string>
 8016ce2:	6138      	str	r0, [r7, #16]
 8016ce4:	693b      	ldr	r3, [r7, #16]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	da02      	bge.n	8016cf0 <json_serialize_string+0x4f8>
 8016cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cee:	e226      	b.n	801713e <json_serialize_string+0x946>
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d003      	beq.n	8016cfe <json_serialize_string+0x506>
 8016cf6:	693b      	ldr	r3, [r7, #16]
 8016cf8:	687a      	ldr	r2, [r7, #4]
 8016cfa:	4413      	add	r3, r2
 8016cfc:	607b      	str	r3, [r7, #4]
 8016cfe:	69ba      	ldr	r2, [r7, #24]
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	4413      	add	r3, r2
 8016d04:	61bb      	str	r3, [r7, #24]
			break;
 8016d06:	e1fb      	b.n	8017100 <json_serialize_string+0x908>
		case '\x0f':
			APPEND_STRING("\\u000f");
 8016d08:	492c      	ldr	r1, [pc, #176]	; (8016dbc <json_serialize_string+0x5c4>)
 8016d0a:	6878      	ldr	r0, [r7, #4]
 8016d0c:	f000 fa58 	bl	80171c0 <append_string>
 8016d10:	6138      	str	r0, [r7, #16]
 8016d12:	693b      	ldr	r3, [r7, #16]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	da02      	bge.n	8016d1e <json_serialize_string+0x526>
 8016d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d1c:	e20f      	b.n	801713e <json_serialize_string+0x946>
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d003      	beq.n	8016d2c <json_serialize_string+0x534>
 8016d24:	693b      	ldr	r3, [r7, #16]
 8016d26:	687a      	ldr	r2, [r7, #4]
 8016d28:	4413      	add	r3, r2
 8016d2a:	607b      	str	r3, [r7, #4]
 8016d2c:	69ba      	ldr	r2, [r7, #24]
 8016d2e:	693b      	ldr	r3, [r7, #16]
 8016d30:	4413      	add	r3, r2
 8016d32:	61bb      	str	r3, [r7, #24]
			break;
 8016d34:	e1e4      	b.n	8017100 <json_serialize_string+0x908>
		case '\x10':
			APPEND_STRING("\\u0010");
 8016d36:	4922      	ldr	r1, [pc, #136]	; (8016dc0 <json_serialize_string+0x5c8>)
 8016d38:	6878      	ldr	r0, [r7, #4]
 8016d3a:	f000 fa41 	bl	80171c0 <append_string>
 8016d3e:	6138      	str	r0, [r7, #16]
 8016d40:	693b      	ldr	r3, [r7, #16]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	da02      	bge.n	8016d4c <json_serialize_string+0x554>
 8016d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d4a:	e1f8      	b.n	801713e <json_serialize_string+0x946>
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d003      	beq.n	8016d5a <json_serialize_string+0x562>
 8016d52:	693b      	ldr	r3, [r7, #16]
 8016d54:	687a      	ldr	r2, [r7, #4]
 8016d56:	4413      	add	r3, r2
 8016d58:	607b      	str	r3, [r7, #4]
 8016d5a:	69ba      	ldr	r2, [r7, #24]
 8016d5c:	693b      	ldr	r3, [r7, #16]
 8016d5e:	4413      	add	r3, r2
 8016d60:	61bb      	str	r3, [r7, #24]
			break;
 8016d62:	e1cd      	b.n	8017100 <json_serialize_string+0x908>
		case '\x11':
			APPEND_STRING("\\u0011");
 8016d64:	4917      	ldr	r1, [pc, #92]	; (8016dc4 <json_serialize_string+0x5cc>)
 8016d66:	6878      	ldr	r0, [r7, #4]
 8016d68:	f000 fa2a 	bl	80171c0 <append_string>
 8016d6c:	6138      	str	r0, [r7, #16]
 8016d6e:	693b      	ldr	r3, [r7, #16]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	da02      	bge.n	8016d7a <json_serialize_string+0x582>
 8016d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d78:	e1e1      	b.n	801713e <json_serialize_string+0x946>
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d003      	beq.n	8016d88 <json_serialize_string+0x590>
 8016d80:	693b      	ldr	r3, [r7, #16]
 8016d82:	687a      	ldr	r2, [r7, #4]
 8016d84:	4413      	add	r3, r2
 8016d86:	607b      	str	r3, [r7, #4]
 8016d88:	69ba      	ldr	r2, [r7, #24]
 8016d8a:	693b      	ldr	r3, [r7, #16]
 8016d8c:	4413      	add	r3, r2
 8016d8e:	61bb      	str	r3, [r7, #24]
			break;
 8016d90:	e1b6      	b.n	8017100 <json_serialize_string+0x908>
 8016d92:	bf00      	nop
 8016d94:	0801e830 	.word	0x0801e830
 8016d98:	0801e838 	.word	0x0801e838
 8016d9c:	0801e840 	.word	0x0801e840
 8016da0:	0801e848 	.word	0x0801e848
 8016da4:	0801e850 	.word	0x0801e850
 8016da8:	0801e858 	.word	0x0801e858
 8016dac:	0801e860 	.word	0x0801e860
 8016db0:	0801e868 	.word	0x0801e868
 8016db4:	0801e870 	.word	0x0801e870
 8016db8:	0801e878 	.word	0x0801e878
 8016dbc:	0801e880 	.word	0x0801e880
 8016dc0:	0801e888 	.word	0x0801e888
 8016dc4:	0801e890 	.word	0x0801e890
		case '\x12':
			APPEND_STRING("\\u0012");
 8016dc8:	4995      	ldr	r1, [pc, #596]	; (8017020 <json_serialize_string+0x828>)
 8016dca:	6878      	ldr	r0, [r7, #4]
 8016dcc:	f000 f9f8 	bl	80171c0 <append_string>
 8016dd0:	6138      	str	r0, [r7, #16]
 8016dd2:	693b      	ldr	r3, [r7, #16]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	da02      	bge.n	8016dde <json_serialize_string+0x5e6>
 8016dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ddc:	e1af      	b.n	801713e <json_serialize_string+0x946>
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d003      	beq.n	8016dec <json_serialize_string+0x5f4>
 8016de4:	693b      	ldr	r3, [r7, #16]
 8016de6:	687a      	ldr	r2, [r7, #4]
 8016de8:	4413      	add	r3, r2
 8016dea:	607b      	str	r3, [r7, #4]
 8016dec:	69ba      	ldr	r2, [r7, #24]
 8016dee:	693b      	ldr	r3, [r7, #16]
 8016df0:	4413      	add	r3, r2
 8016df2:	61bb      	str	r3, [r7, #24]
			break;
 8016df4:	e184      	b.n	8017100 <json_serialize_string+0x908>
		case '\x13':
			APPEND_STRING("\\u0013");
 8016df6:	498b      	ldr	r1, [pc, #556]	; (8017024 <json_serialize_string+0x82c>)
 8016df8:	6878      	ldr	r0, [r7, #4]
 8016dfa:	f000 f9e1 	bl	80171c0 <append_string>
 8016dfe:	6138      	str	r0, [r7, #16]
 8016e00:	693b      	ldr	r3, [r7, #16]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	da02      	bge.n	8016e0c <json_serialize_string+0x614>
 8016e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e0a:	e198      	b.n	801713e <json_serialize_string+0x946>
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d003      	beq.n	8016e1a <json_serialize_string+0x622>
 8016e12:	693b      	ldr	r3, [r7, #16]
 8016e14:	687a      	ldr	r2, [r7, #4]
 8016e16:	4413      	add	r3, r2
 8016e18:	607b      	str	r3, [r7, #4]
 8016e1a:	69ba      	ldr	r2, [r7, #24]
 8016e1c:	693b      	ldr	r3, [r7, #16]
 8016e1e:	4413      	add	r3, r2
 8016e20:	61bb      	str	r3, [r7, #24]
			break;
 8016e22:	e16d      	b.n	8017100 <json_serialize_string+0x908>
		case '\x14':
			APPEND_STRING("\\u0014");
 8016e24:	4980      	ldr	r1, [pc, #512]	; (8017028 <json_serialize_string+0x830>)
 8016e26:	6878      	ldr	r0, [r7, #4]
 8016e28:	f000 f9ca 	bl	80171c0 <append_string>
 8016e2c:	6138      	str	r0, [r7, #16]
 8016e2e:	693b      	ldr	r3, [r7, #16]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	da02      	bge.n	8016e3a <json_serialize_string+0x642>
 8016e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e38:	e181      	b.n	801713e <json_serialize_string+0x946>
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d003      	beq.n	8016e48 <json_serialize_string+0x650>
 8016e40:	693b      	ldr	r3, [r7, #16]
 8016e42:	687a      	ldr	r2, [r7, #4]
 8016e44:	4413      	add	r3, r2
 8016e46:	607b      	str	r3, [r7, #4]
 8016e48:	69ba      	ldr	r2, [r7, #24]
 8016e4a:	693b      	ldr	r3, [r7, #16]
 8016e4c:	4413      	add	r3, r2
 8016e4e:	61bb      	str	r3, [r7, #24]
			break;
 8016e50:	e156      	b.n	8017100 <json_serialize_string+0x908>
		case '\x15':
			APPEND_STRING("\\u0015");
 8016e52:	4976      	ldr	r1, [pc, #472]	; (801702c <json_serialize_string+0x834>)
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f000 f9b3 	bl	80171c0 <append_string>
 8016e5a:	6138      	str	r0, [r7, #16]
 8016e5c:	693b      	ldr	r3, [r7, #16]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	da02      	bge.n	8016e68 <json_serialize_string+0x670>
 8016e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e66:	e16a      	b.n	801713e <json_serialize_string+0x946>
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d003      	beq.n	8016e76 <json_serialize_string+0x67e>
 8016e6e:	693b      	ldr	r3, [r7, #16]
 8016e70:	687a      	ldr	r2, [r7, #4]
 8016e72:	4413      	add	r3, r2
 8016e74:	607b      	str	r3, [r7, #4]
 8016e76:	69ba      	ldr	r2, [r7, #24]
 8016e78:	693b      	ldr	r3, [r7, #16]
 8016e7a:	4413      	add	r3, r2
 8016e7c:	61bb      	str	r3, [r7, #24]
			break;
 8016e7e:	e13f      	b.n	8017100 <json_serialize_string+0x908>
		case '\x16':
			APPEND_STRING("\\u0016");
 8016e80:	496b      	ldr	r1, [pc, #428]	; (8017030 <json_serialize_string+0x838>)
 8016e82:	6878      	ldr	r0, [r7, #4]
 8016e84:	f000 f99c 	bl	80171c0 <append_string>
 8016e88:	6138      	str	r0, [r7, #16]
 8016e8a:	693b      	ldr	r3, [r7, #16]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	da02      	bge.n	8016e96 <json_serialize_string+0x69e>
 8016e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e94:	e153      	b.n	801713e <json_serialize_string+0x946>
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d003      	beq.n	8016ea4 <json_serialize_string+0x6ac>
 8016e9c:	693b      	ldr	r3, [r7, #16]
 8016e9e:	687a      	ldr	r2, [r7, #4]
 8016ea0:	4413      	add	r3, r2
 8016ea2:	607b      	str	r3, [r7, #4]
 8016ea4:	69ba      	ldr	r2, [r7, #24]
 8016ea6:	693b      	ldr	r3, [r7, #16]
 8016ea8:	4413      	add	r3, r2
 8016eaa:	61bb      	str	r3, [r7, #24]
			break;
 8016eac:	e128      	b.n	8017100 <json_serialize_string+0x908>
		case '\x17':
			APPEND_STRING("\\u0017");
 8016eae:	4961      	ldr	r1, [pc, #388]	; (8017034 <json_serialize_string+0x83c>)
 8016eb0:	6878      	ldr	r0, [r7, #4]
 8016eb2:	f000 f985 	bl	80171c0 <append_string>
 8016eb6:	6138      	str	r0, [r7, #16]
 8016eb8:	693b      	ldr	r3, [r7, #16]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	da02      	bge.n	8016ec4 <json_serialize_string+0x6cc>
 8016ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ec2:	e13c      	b.n	801713e <json_serialize_string+0x946>
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d003      	beq.n	8016ed2 <json_serialize_string+0x6da>
 8016eca:	693b      	ldr	r3, [r7, #16]
 8016ecc:	687a      	ldr	r2, [r7, #4]
 8016ece:	4413      	add	r3, r2
 8016ed0:	607b      	str	r3, [r7, #4]
 8016ed2:	69ba      	ldr	r2, [r7, #24]
 8016ed4:	693b      	ldr	r3, [r7, #16]
 8016ed6:	4413      	add	r3, r2
 8016ed8:	61bb      	str	r3, [r7, #24]
			break;
 8016eda:	e111      	b.n	8017100 <json_serialize_string+0x908>
		case '\x18':
			APPEND_STRING("\\u0018");
 8016edc:	4956      	ldr	r1, [pc, #344]	; (8017038 <json_serialize_string+0x840>)
 8016ede:	6878      	ldr	r0, [r7, #4]
 8016ee0:	f000 f96e 	bl	80171c0 <append_string>
 8016ee4:	6138      	str	r0, [r7, #16]
 8016ee6:	693b      	ldr	r3, [r7, #16]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	da02      	bge.n	8016ef2 <json_serialize_string+0x6fa>
 8016eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ef0:	e125      	b.n	801713e <json_serialize_string+0x946>
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d003      	beq.n	8016f00 <json_serialize_string+0x708>
 8016ef8:	693b      	ldr	r3, [r7, #16]
 8016efa:	687a      	ldr	r2, [r7, #4]
 8016efc:	4413      	add	r3, r2
 8016efe:	607b      	str	r3, [r7, #4]
 8016f00:	69ba      	ldr	r2, [r7, #24]
 8016f02:	693b      	ldr	r3, [r7, #16]
 8016f04:	4413      	add	r3, r2
 8016f06:	61bb      	str	r3, [r7, #24]
			break;
 8016f08:	e0fa      	b.n	8017100 <json_serialize_string+0x908>
		case '\x19':
			APPEND_STRING("\\u0019");
 8016f0a:	494c      	ldr	r1, [pc, #304]	; (801703c <json_serialize_string+0x844>)
 8016f0c:	6878      	ldr	r0, [r7, #4]
 8016f0e:	f000 f957 	bl	80171c0 <append_string>
 8016f12:	6138      	str	r0, [r7, #16]
 8016f14:	693b      	ldr	r3, [r7, #16]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	da02      	bge.n	8016f20 <json_serialize_string+0x728>
 8016f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f1e:	e10e      	b.n	801713e <json_serialize_string+0x946>
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d003      	beq.n	8016f2e <json_serialize_string+0x736>
 8016f26:	693b      	ldr	r3, [r7, #16]
 8016f28:	687a      	ldr	r2, [r7, #4]
 8016f2a:	4413      	add	r3, r2
 8016f2c:	607b      	str	r3, [r7, #4]
 8016f2e:	69ba      	ldr	r2, [r7, #24]
 8016f30:	693b      	ldr	r3, [r7, #16]
 8016f32:	4413      	add	r3, r2
 8016f34:	61bb      	str	r3, [r7, #24]
			break;
 8016f36:	e0e3      	b.n	8017100 <json_serialize_string+0x908>
		case '\x1a':
			APPEND_STRING("\\u001a");
 8016f38:	4941      	ldr	r1, [pc, #260]	; (8017040 <json_serialize_string+0x848>)
 8016f3a:	6878      	ldr	r0, [r7, #4]
 8016f3c:	f000 f940 	bl	80171c0 <append_string>
 8016f40:	6138      	str	r0, [r7, #16]
 8016f42:	693b      	ldr	r3, [r7, #16]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	da02      	bge.n	8016f4e <json_serialize_string+0x756>
 8016f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f4c:	e0f7      	b.n	801713e <json_serialize_string+0x946>
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d003      	beq.n	8016f5c <json_serialize_string+0x764>
 8016f54:	693b      	ldr	r3, [r7, #16]
 8016f56:	687a      	ldr	r2, [r7, #4]
 8016f58:	4413      	add	r3, r2
 8016f5a:	607b      	str	r3, [r7, #4]
 8016f5c:	69ba      	ldr	r2, [r7, #24]
 8016f5e:	693b      	ldr	r3, [r7, #16]
 8016f60:	4413      	add	r3, r2
 8016f62:	61bb      	str	r3, [r7, #24]
			break;
 8016f64:	e0cc      	b.n	8017100 <json_serialize_string+0x908>
		case '\x1b':
			APPEND_STRING("\\u001b");
 8016f66:	4937      	ldr	r1, [pc, #220]	; (8017044 <json_serialize_string+0x84c>)
 8016f68:	6878      	ldr	r0, [r7, #4]
 8016f6a:	f000 f929 	bl	80171c0 <append_string>
 8016f6e:	6138      	str	r0, [r7, #16]
 8016f70:	693b      	ldr	r3, [r7, #16]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	da02      	bge.n	8016f7c <json_serialize_string+0x784>
 8016f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f7a:	e0e0      	b.n	801713e <json_serialize_string+0x946>
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d003      	beq.n	8016f8a <json_serialize_string+0x792>
 8016f82:	693b      	ldr	r3, [r7, #16]
 8016f84:	687a      	ldr	r2, [r7, #4]
 8016f86:	4413      	add	r3, r2
 8016f88:	607b      	str	r3, [r7, #4]
 8016f8a:	69ba      	ldr	r2, [r7, #24]
 8016f8c:	693b      	ldr	r3, [r7, #16]
 8016f8e:	4413      	add	r3, r2
 8016f90:	61bb      	str	r3, [r7, #24]
			break;
 8016f92:	e0b5      	b.n	8017100 <json_serialize_string+0x908>
		case '\x1c':
			APPEND_STRING("\\u001c");
 8016f94:	492c      	ldr	r1, [pc, #176]	; (8017048 <json_serialize_string+0x850>)
 8016f96:	6878      	ldr	r0, [r7, #4]
 8016f98:	f000 f912 	bl	80171c0 <append_string>
 8016f9c:	6138      	str	r0, [r7, #16]
 8016f9e:	693b      	ldr	r3, [r7, #16]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	da02      	bge.n	8016faa <json_serialize_string+0x7b2>
 8016fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fa8:	e0c9      	b.n	801713e <json_serialize_string+0x946>
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d003      	beq.n	8016fb8 <json_serialize_string+0x7c0>
 8016fb0:	693b      	ldr	r3, [r7, #16]
 8016fb2:	687a      	ldr	r2, [r7, #4]
 8016fb4:	4413      	add	r3, r2
 8016fb6:	607b      	str	r3, [r7, #4]
 8016fb8:	69ba      	ldr	r2, [r7, #24]
 8016fba:	693b      	ldr	r3, [r7, #16]
 8016fbc:	4413      	add	r3, r2
 8016fbe:	61bb      	str	r3, [r7, #24]
			break;
 8016fc0:	e09e      	b.n	8017100 <json_serialize_string+0x908>
		case '\x1d':
			APPEND_STRING("\\u001d");
 8016fc2:	4922      	ldr	r1, [pc, #136]	; (801704c <json_serialize_string+0x854>)
 8016fc4:	6878      	ldr	r0, [r7, #4]
 8016fc6:	f000 f8fb 	bl	80171c0 <append_string>
 8016fca:	6138      	str	r0, [r7, #16]
 8016fcc:	693b      	ldr	r3, [r7, #16]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	da02      	bge.n	8016fd8 <json_serialize_string+0x7e0>
 8016fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fd6:	e0b2      	b.n	801713e <json_serialize_string+0x946>
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d003      	beq.n	8016fe6 <json_serialize_string+0x7ee>
 8016fde:	693b      	ldr	r3, [r7, #16]
 8016fe0:	687a      	ldr	r2, [r7, #4]
 8016fe2:	4413      	add	r3, r2
 8016fe4:	607b      	str	r3, [r7, #4]
 8016fe6:	69ba      	ldr	r2, [r7, #24]
 8016fe8:	693b      	ldr	r3, [r7, #16]
 8016fea:	4413      	add	r3, r2
 8016fec:	61bb      	str	r3, [r7, #24]
			break;
 8016fee:	e087      	b.n	8017100 <json_serialize_string+0x908>
		case '\x1e':
			APPEND_STRING("\\u001e");
 8016ff0:	4917      	ldr	r1, [pc, #92]	; (8017050 <json_serialize_string+0x858>)
 8016ff2:	6878      	ldr	r0, [r7, #4]
 8016ff4:	f000 f8e4 	bl	80171c0 <append_string>
 8016ff8:	6138      	str	r0, [r7, #16]
 8016ffa:	693b      	ldr	r3, [r7, #16]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	da02      	bge.n	8017006 <json_serialize_string+0x80e>
 8017000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017004:	e09b      	b.n	801713e <json_serialize_string+0x946>
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d003      	beq.n	8017014 <json_serialize_string+0x81c>
 801700c:	693b      	ldr	r3, [r7, #16]
 801700e:	687a      	ldr	r2, [r7, #4]
 8017010:	4413      	add	r3, r2
 8017012:	607b      	str	r3, [r7, #4]
 8017014:	69ba      	ldr	r2, [r7, #24]
 8017016:	693b      	ldr	r3, [r7, #16]
 8017018:	4413      	add	r3, r2
 801701a:	61bb      	str	r3, [r7, #24]
			break;
 801701c:	e070      	b.n	8017100 <json_serialize_string+0x908>
 801701e:	bf00      	nop
 8017020:	0801e898 	.word	0x0801e898
 8017024:	0801e8a0 	.word	0x0801e8a0
 8017028:	0801e8a8 	.word	0x0801e8a8
 801702c:	0801e8b0 	.word	0x0801e8b0
 8017030:	0801e8b8 	.word	0x0801e8b8
 8017034:	0801e8c0 	.word	0x0801e8c0
 8017038:	0801e8c8 	.word	0x0801e8c8
 801703c:	0801e8d0 	.word	0x0801e8d0
 8017040:	0801e8d8 	.word	0x0801e8d8
 8017044:	0801e8e0 	.word	0x0801e8e0
 8017048:	0801e8e8 	.word	0x0801e8e8
 801704c:	0801e8f0 	.word	0x0801e8f0
 8017050:	0801e8f8 	.word	0x0801e8f8
		case '\x1f':
			APPEND_STRING("\\u001f");
 8017054:	493c      	ldr	r1, [pc, #240]	; (8017148 <json_serialize_string+0x950>)
 8017056:	6878      	ldr	r0, [r7, #4]
 8017058:	f000 f8b2 	bl	80171c0 <append_string>
 801705c:	6138      	str	r0, [r7, #16]
 801705e:	693b      	ldr	r3, [r7, #16]
 8017060:	2b00      	cmp	r3, #0
 8017062:	da02      	bge.n	801706a <json_serialize_string+0x872>
 8017064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017068:	e069      	b.n	801713e <json_serialize_string+0x946>
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d003      	beq.n	8017078 <json_serialize_string+0x880>
 8017070:	693b      	ldr	r3, [r7, #16]
 8017072:	687a      	ldr	r2, [r7, #4]
 8017074:	4413      	add	r3, r2
 8017076:	607b      	str	r3, [r7, #4]
 8017078:	69ba      	ldr	r2, [r7, #24]
 801707a:	693b      	ldr	r3, [r7, #16]
 801707c:	4413      	add	r3, r2
 801707e:	61bb      	str	r3, [r7, #24]
			break;
 8017080:	e03e      	b.n	8017100 <json_serialize_string+0x908>
		case '/':
			if (parson_escape_slashes) {
 8017082:	4b32      	ldr	r3, [pc, #200]	; (801714c <json_serialize_string+0x954>)
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d016      	beq.n	80170b8 <json_serialize_string+0x8c0>
				APPEND_STRING("\\/"); /* to make json embeddable in xml\/html */
 801708a:	4931      	ldr	r1, [pc, #196]	; (8017150 <json_serialize_string+0x958>)
 801708c:	6878      	ldr	r0, [r7, #4]
 801708e:	f000 f897 	bl	80171c0 <append_string>
 8017092:	6138      	str	r0, [r7, #16]
 8017094:	693b      	ldr	r3, [r7, #16]
 8017096:	2b00      	cmp	r3, #0
 8017098:	da02      	bge.n	80170a0 <json_serialize_string+0x8a8>
 801709a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801709e:	e04e      	b.n	801713e <json_serialize_string+0x946>
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d003      	beq.n	80170ae <json_serialize_string+0x8b6>
 80170a6:	693b      	ldr	r3, [r7, #16]
 80170a8:	687a      	ldr	r2, [r7, #4]
 80170aa:	4413      	add	r3, r2
 80170ac:	607b      	str	r3, [r7, #4]
 80170ae:	69ba      	ldr	r2, [r7, #24]
 80170b0:	693b      	ldr	r3, [r7, #16]
 80170b2:	4413      	add	r3, r2
 80170b4:	61bb      	str	r3, [r7, #24]
			} else {
				APPEND_STRING("/");
			}
			break;
 80170b6:	e023      	b.n	8017100 <json_serialize_string+0x908>
				APPEND_STRING("/");
 80170b8:	4926      	ldr	r1, [pc, #152]	; (8017154 <json_serialize_string+0x95c>)
 80170ba:	6878      	ldr	r0, [r7, #4]
 80170bc:	f000 f880 	bl	80171c0 <append_string>
 80170c0:	6138      	str	r0, [r7, #16]
 80170c2:	693b      	ldr	r3, [r7, #16]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	da02      	bge.n	80170ce <json_serialize_string+0x8d6>
 80170c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170cc:	e037      	b.n	801713e <json_serialize_string+0x946>
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d003      	beq.n	80170dc <json_serialize_string+0x8e4>
 80170d4:	693b      	ldr	r3, [r7, #16]
 80170d6:	687a      	ldr	r2, [r7, #4]
 80170d8:	4413      	add	r3, r2
 80170da:	607b      	str	r3, [r7, #4]
 80170dc:	69ba      	ldr	r2, [r7, #24]
 80170de:	693b      	ldr	r3, [r7, #16]
 80170e0:	4413      	add	r3, r2
 80170e2:	61bb      	str	r3, [r7, #24]
			break;
 80170e4:	e00c      	b.n	8017100 <json_serialize_string+0x908>
		default:
			if (buf != NULL) {
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d005      	beq.n	80170f8 <json_serialize_string+0x900>
				buf[0] = c;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	7dfa      	ldrb	r2, [r7, #23]
 80170f0:	701a      	strb	r2, [r3, #0]
				buf += 1;
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	3301      	adds	r3, #1
 80170f6:	607b      	str	r3, [r7, #4]
			}
			written_total += 1;
 80170f8:	69bb      	ldr	r3, [r7, #24]
 80170fa:	3301      	adds	r3, #1
 80170fc:	61bb      	str	r3, [r7, #24]
			break;
 80170fe:	bf00      	nop
	for (i = 0; i < len; i++) {
 8017100:	69fb      	ldr	r3, [r7, #28]
 8017102:	3301      	adds	r3, #1
 8017104:	61fb      	str	r3, [r7, #28]
 8017106:	69fa      	ldr	r2, [r7, #28]
 8017108:	68bb      	ldr	r3, [r7, #8]
 801710a:	429a      	cmp	r2, r3
 801710c:	f4ff ab9e 	bcc.w	801684c <json_serialize_string+0x54>
		}
	}
	APPEND_STRING("\"");
 8017110:	4911      	ldr	r1, [pc, #68]	; (8017158 <json_serialize_string+0x960>)
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f000 f854 	bl	80171c0 <append_string>
 8017118:	6138      	str	r0, [r7, #16]
 801711a:	693b      	ldr	r3, [r7, #16]
 801711c:	2b00      	cmp	r3, #0
 801711e:	da02      	bge.n	8017126 <json_serialize_string+0x92e>
 8017120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017124:	e00b      	b.n	801713e <json_serialize_string+0x946>
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d003      	beq.n	8017134 <json_serialize_string+0x93c>
 801712c:	693b      	ldr	r3, [r7, #16]
 801712e:	687a      	ldr	r2, [r7, #4]
 8017130:	4413      	add	r3, r2
 8017132:	607b      	str	r3, [r7, #4]
 8017134:	69ba      	ldr	r2, [r7, #24]
 8017136:	693b      	ldr	r3, [r7, #16]
 8017138:	4413      	add	r3, r2
 801713a:	61bb      	str	r3, [r7, #24]
	return written_total;
 801713c:	69bb      	ldr	r3, [r7, #24]
}
 801713e:	4618      	mov	r0, r3
 8017140:	3720      	adds	r7, #32
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}
 8017146:	bf00      	nop
 8017148:	0801e900 	.word	0x0801e900
 801714c:	24000040 	.word	0x24000040
 8017150:	0801e908 	.word	0x0801e908
 8017154:	0801e90c 	.word	0x0801e90c
 8017158:	0801e810 	.word	0x0801e810

0801715c <append_indent>:

static int append_indent(char *buf, int level) {
 801715c:	b580      	push	{r7, lr}
 801715e:	b086      	sub	sp, #24
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
 8017164:	6039      	str	r1, [r7, #0]
	int i;
	int written = -1, written_total = 0;
 8017166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801716a:	60fb      	str	r3, [r7, #12]
 801716c:	2300      	movs	r3, #0
 801716e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < level; i++) {
 8017170:	2300      	movs	r3, #0
 8017172:	617b      	str	r3, [r7, #20]
 8017174:	e018      	b.n	80171a8 <append_indent+0x4c>
		APPEND_STRING("    ");
 8017176:	4911      	ldr	r1, [pc, #68]	; (80171bc <append_indent+0x60>)
 8017178:	6878      	ldr	r0, [r7, #4]
 801717a:	f000 f821 	bl	80171c0 <append_string>
 801717e:	60f8      	str	r0, [r7, #12]
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	2b00      	cmp	r3, #0
 8017184:	da02      	bge.n	801718c <append_indent+0x30>
 8017186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801718a:	e012      	b.n	80171b2 <append_indent+0x56>
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d003      	beq.n	801719a <append_indent+0x3e>
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	687a      	ldr	r2, [r7, #4]
 8017196:	4413      	add	r3, r2
 8017198:	607b      	str	r3, [r7, #4]
 801719a:	693a      	ldr	r2, [r7, #16]
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	4413      	add	r3, r2
 80171a0:	613b      	str	r3, [r7, #16]
	for (i = 0; i < level; i++) {
 80171a2:	697b      	ldr	r3, [r7, #20]
 80171a4:	3301      	adds	r3, #1
 80171a6:	617b      	str	r3, [r7, #20]
 80171a8:	697a      	ldr	r2, [r7, #20]
 80171aa:	683b      	ldr	r3, [r7, #0]
 80171ac:	429a      	cmp	r2, r3
 80171ae:	dbe2      	blt.n	8017176 <append_indent+0x1a>
	}
	return written_total;
 80171b0:	693b      	ldr	r3, [r7, #16]
}
 80171b2:	4618      	mov	r0, r3
 80171b4:	3718      	adds	r7, #24
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}
 80171ba:	bf00      	nop
 80171bc:	0801e910 	.word	0x0801e910

080171c0 <append_string>:

static int append_string(char *buf, const char *string) {
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b082      	sub	sp, #8
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	6039      	str	r1, [r7, #0]
	if (buf == NULL) {
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d104      	bne.n	80171da <append_string+0x1a>
		return (int) strlen(string);
 80171d0:	6838      	ldr	r0, [r7, #0]
 80171d2:	f7e9 f88f 	bl	80002f4 <strlen>
 80171d6:	4603      	mov	r3, r0
 80171d8:	e005      	b.n	80171e6 <append_string+0x26>
	}
	return sprintf(buf, "%s", string);
 80171da:	683a      	ldr	r2, [r7, #0]
 80171dc:	4904      	ldr	r1, [pc, #16]	; (80171f0 <append_string+0x30>)
 80171de:	6878      	ldr	r0, [r7, #4]
 80171e0:	f001 fa40 	bl	8018664 <siprintf>
 80171e4:	4603      	mov	r3, r0
}
 80171e6:	4618      	mov	r0, r3
 80171e8:	3708      	adds	r7, #8
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bd80      	pop	{r7, pc}
 80171ee:	bf00      	nop
 80171f0:	0801e918 	.word	0x0801e918

080171f4 <json_parse_string>:
	output_value = json_parse_string_with_comments(file_contents);
	parson_free(file_contents);
	return output_value;
}

JSON_Value* json_parse_string(const char *string) {
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b082      	sub	sp, #8
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
	if (string == NULL) {
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d101      	bne.n	8017206 <json_parse_string+0x12>
		return NULL;
 8017202:	2300      	movs	r3, #0
 8017204:	e016      	b.n	8017234 <json_parse_string+0x40>
	}
	if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	781b      	ldrb	r3, [r3, #0]
 801720a:	2bef      	cmp	r3, #239	; 0xef
 801720c:	d10c      	bne.n	8017228 <json_parse_string+0x34>
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	3301      	adds	r3, #1
 8017212:	781b      	ldrb	r3, [r3, #0]
 8017214:	2bbb      	cmp	r3, #187	; 0xbb
 8017216:	d107      	bne.n	8017228 <json_parse_string+0x34>
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	3302      	adds	r3, #2
 801721c:	781b      	ldrb	r3, [r3, #0]
 801721e:	2bbf      	cmp	r3, #191	; 0xbf
 8017220:	d102      	bne.n	8017228 <json_parse_string+0x34>
		string = string + 3; /* Support for UTF-8 BOM */
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	3303      	adds	r3, #3
 8017226:	607b      	str	r3, [r7, #4]
	}
	return parse_value((const char**) &string, 0);
 8017228:	1d3b      	adds	r3, r7, #4
 801722a:	2100      	movs	r1, #0
 801722c:	4618      	mov	r0, r3
 801722e:	f7fe fc63 	bl	8015af8 <parse_value>
 8017232:	4603      	mov	r3, r0
}
 8017234:	4618      	mov	r0, r3
 8017236:	3708      	adds	r7, #8
 8017238:	46bd      	mov	sp, r7
 801723a:	bd80      	pop	{r7, pc}

0801723c <json_object_get_value>:
	return result;
}

/* JSON Object API */

JSON_Value* json_object_get_value(const JSON_Object *object, const char *name) {
 801723c:	b580      	push	{r7, lr}
 801723e:	b082      	sub	sp, #8
 8017240:	af00      	add	r7, sp, #0
 8017242:	6078      	str	r0, [r7, #4]
 8017244:	6039      	str	r1, [r7, #0]
	if (object == NULL || name == NULL) {
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d002      	beq.n	8017252 <json_object_get_value+0x16>
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d101      	bne.n	8017256 <json_object_get_value+0x1a>
		return NULL;
 8017252:	2300      	movs	r3, #0
 8017254:	e009      	b.n	801726a <json_object_get_value+0x2e>
	}
	return json_object_getn_value(object, name, strlen(name));
 8017256:	6838      	ldr	r0, [r7, #0]
 8017258:	f7e9 f84c 	bl	80002f4 <strlen>
 801725c:	4603      	mov	r3, r0
 801725e:	461a      	mov	r2, r3
 8017260:	6839      	ldr	r1, [r7, #0]
 8017262:	6878      	ldr	r0, [r7, #4]
 8017264:	f7fe f8d1 	bl	801540a <json_object_getn_value>
 8017268:	4603      	mov	r3, r0
}
 801726a:	4618      	mov	r0, r3
 801726c:	3708      	adds	r7, #8
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}

08017272 <json_object_get_string>:

const char* json_object_get_string(const JSON_Object *object, const char *name) {
 8017272:	b580      	push	{r7, lr}
 8017274:	b082      	sub	sp, #8
 8017276:	af00      	add	r7, sp, #0
 8017278:	6078      	str	r0, [r7, #4]
 801727a:	6039      	str	r1, [r7, #0]
	return json_value_get_string(json_object_get_value(object, name));
 801727c:	6839      	ldr	r1, [r7, #0]
 801727e:	6878      	ldr	r0, [r7, #4]
 8017280:	f7ff ffdc 	bl	801723c <json_object_get_value>
 8017284:	4603      	mov	r3, r0
 8017286:	4618      	mov	r0, r3
 8017288:	f000 f8f6 	bl	8017478 <json_value_get_string>
 801728c:	4603      	mov	r3, r0
}
 801728e:	4618      	mov	r0, r3
 8017290:	3708      	adds	r7, #8
 8017292:	46bd      	mov	sp, r7
 8017294:	bd80      	pop	{r7, pc}

08017296 <json_object_get_number>:

size_t json_object_get_string_len(const JSON_Object *object, const char *name) {
	return json_value_get_string_len(json_object_get_value(object, name));
}

double json_object_get_number(const JSON_Object *object, const char *name) {
 8017296:	b580      	push	{r7, lr}
 8017298:	b082      	sub	sp, #8
 801729a:	af00      	add	r7, sp, #0
 801729c:	6078      	str	r0, [r7, #4]
 801729e:	6039      	str	r1, [r7, #0]
	return json_value_get_number(json_object_get_value(object, name));
 80172a0:	6839      	ldr	r1, [r7, #0]
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	f7ff ffca 	bl	801723c <json_object_get_value>
 80172a8:	4603      	mov	r3, r0
 80172aa:	4618      	mov	r0, r3
 80172ac:	f000 f90a 	bl	80174c4 <json_value_get_number>
 80172b0:	eeb0 7b40 	vmov.f64	d7, d0
}
 80172b4:	eeb0 0b47 	vmov.f64	d0, d7
 80172b8:	3708      	adds	r7, #8
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd80      	pop	{r7, pc}

080172be <json_object_get_count>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
	return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
 80172be:	b480      	push	{r7}
 80172c0:	b083      	sub	sp, #12
 80172c2:	af00      	add	r7, sp, #0
 80172c4:	6078      	str	r0, [r7, #4]
	return object ? object->count : 0;
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d002      	beq.n	80172d2 <json_object_get_count+0x14>
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	699b      	ldr	r3, [r3, #24]
 80172d0:	e000      	b.n	80172d4 <json_object_get_count+0x16>
 80172d2:	2300      	movs	r3, #0
}
 80172d4:	4618      	mov	r0, r3
 80172d6:	370c      	adds	r7, #12
 80172d8:	46bd      	mov	sp, r7
 80172da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172de:	4770      	bx	lr

080172e0 <json_object_get_name>:

const char* json_object_get_name(const JSON_Object *object, size_t index) {
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b082      	sub	sp, #8
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
 80172e8:	6039      	str	r1, [r7, #0]
	if (object == NULL || index >= json_object_get_count(object)) {
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d006      	beq.n	80172fe <json_object_get_name+0x1e>
 80172f0:	6878      	ldr	r0, [r7, #4]
 80172f2:	f7ff ffe4 	bl	80172be <json_object_get_count>
 80172f6:	4602      	mov	r2, r0
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	4293      	cmp	r3, r2
 80172fc:	d301      	bcc.n	8017302 <json_object_get_name+0x22>
		return NULL;
 80172fe:	2300      	movs	r3, #0
 8017300:	e005      	b.n	801730e <json_object_get_name+0x2e>
	}
	return object->names[index];
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	68da      	ldr	r2, [r3, #12]
 8017306:	683b      	ldr	r3, [r7, #0]
 8017308:	009b      	lsls	r3, r3, #2
 801730a:	4413      	add	r3, r2
 801730c:	681b      	ldr	r3, [r3, #0]
}
 801730e:	4618      	mov	r0, r3
 8017310:	3708      	adds	r7, #8
 8017312:	46bd      	mov	sp, r7
 8017314:	bd80      	pop	{r7, pc}

08017316 <json_object_get_value_at>:

JSON_Value* json_object_get_value_at(const JSON_Object *object, size_t index) {
 8017316:	b580      	push	{r7, lr}
 8017318:	b082      	sub	sp, #8
 801731a:	af00      	add	r7, sp, #0
 801731c:	6078      	str	r0, [r7, #4]
 801731e:	6039      	str	r1, [r7, #0]
	if (object == NULL || index >= json_object_get_count(object)) {
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d006      	beq.n	8017334 <json_object_get_value_at+0x1e>
 8017326:	6878      	ldr	r0, [r7, #4]
 8017328:	f7ff ffc9 	bl	80172be <json_object_get_count>
 801732c:	4602      	mov	r2, r0
 801732e:	683b      	ldr	r3, [r7, #0]
 8017330:	4293      	cmp	r3, r2
 8017332:	d301      	bcc.n	8017338 <json_object_get_value_at+0x22>
		return NULL;
 8017334:	2300      	movs	r3, #0
 8017336:	e005      	b.n	8017344 <json_object_get_value_at+0x2e>
	}
	return object->values[index];
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	691a      	ldr	r2, [r3, #16]
 801733c:	683b      	ldr	r3, [r7, #0]
 801733e:	009b      	lsls	r3, r3, #2
 8017340:	4413      	add	r3, r2
 8017342:	681b      	ldr	r3, [r3, #0]
}
 8017344:	4618      	mov	r0, r3
 8017346:	3708      	adds	r7, #8
 8017348:	46bd      	mov	sp, r7
 801734a:	bd80      	pop	{r7, pc}

0801734c <json_object_get_wrapping_value>:

JSON_Value* json_object_get_wrapping_value(const JSON_Object *object) {
 801734c:	b480      	push	{r7}
 801734e:	b083      	sub	sp, #12
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
	if (!object) {
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d101      	bne.n	801735e <json_object_get_wrapping_value+0x12>
		return NULL;
 801735a:	2300      	movs	r3, #0
 801735c:	e001      	b.n	8017362 <json_object_get_wrapping_value+0x16>
	}
	return object->wrapping_value;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	681b      	ldr	r3, [r3, #0]
}
 8017362:	4618      	mov	r0, r3
 8017364:	370c      	adds	r7, #12
 8017366:	46bd      	mov	sp, r7
 8017368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801736c:	4770      	bx	lr

0801736e <json_array_get_value>:
	JSON_Value *val = json_object_dotget_value(object, name);
	return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value* json_array_get_value(const JSON_Array *array, size_t index) {
 801736e:	b580      	push	{r7, lr}
 8017370:	b082      	sub	sp, #8
 8017372:	af00      	add	r7, sp, #0
 8017374:	6078      	str	r0, [r7, #4]
 8017376:	6039      	str	r1, [r7, #0]
	if (array == NULL || index >= json_array_get_count(array)) {
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d006      	beq.n	801738c <json_array_get_value+0x1e>
 801737e:	6878      	ldr	r0, [r7, #4]
 8017380:	f000 f810 	bl	80173a4 <json_array_get_count>
 8017384:	4602      	mov	r2, r0
 8017386:	683b      	ldr	r3, [r7, #0]
 8017388:	4293      	cmp	r3, r2
 801738a:	d301      	bcc.n	8017390 <json_array_get_value+0x22>
		return NULL;
 801738c:	2300      	movs	r3, #0
 801738e:	e005      	b.n	801739c <json_array_get_value+0x2e>
	}
	return array->items[index];
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	685a      	ldr	r2, [r3, #4]
 8017394:	683b      	ldr	r3, [r7, #0]
 8017396:	009b      	lsls	r3, r3, #2
 8017398:	4413      	add	r3, r2
 801739a:	681b      	ldr	r3, [r3, #0]
}
 801739c:	4618      	mov	r0, r3
 801739e:	3708      	adds	r7, #8
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}

080173a4 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
	return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 80173a4:	b480      	push	{r7}
 80173a6:	b083      	sub	sp, #12
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	6078      	str	r0, [r7, #4]
	return array ? array->count : 0;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d002      	beq.n	80173b8 <json_array_get_count+0x14>
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	689b      	ldr	r3, [r3, #8]
 80173b6:	e000      	b.n	80173ba <json_array_get_count+0x16>
 80173b8:	2300      	movs	r3, #0
}
 80173ba:	4618      	mov	r0, r3
 80173bc:	370c      	adds	r7, #12
 80173be:	46bd      	mov	sp, r7
 80173c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c4:	4770      	bx	lr

080173c6 <json_array_get_wrapping_value>:

JSON_Value* json_array_get_wrapping_value(const JSON_Array *array) {
 80173c6:	b480      	push	{r7}
 80173c8:	b083      	sub	sp, #12
 80173ca:	af00      	add	r7, sp, #0
 80173cc:	6078      	str	r0, [r7, #4]
	if (!array) {
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d101      	bne.n	80173d8 <json_array_get_wrapping_value+0x12>
		return NULL;
 80173d4:	2300      	movs	r3, #0
 80173d6:	e001      	b.n	80173dc <json_array_get_wrapping_value+0x16>
	}
	return array->wrapping_value;
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	681b      	ldr	r3, [r3, #0]
}
 80173dc:	4618      	mov	r0, r3
 80173de:	370c      	adds	r7, #12
 80173e0:	46bd      	mov	sp, r7
 80173e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e6:	4770      	bx	lr

080173e8 <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 80173e8:	b480      	push	{r7}
 80173ea:	b083      	sub	sp, #12
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
	return value ? value->type : JSONError;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d002      	beq.n	80173fc <json_value_get_type+0x14>
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	685b      	ldr	r3, [r3, #4]
 80173fa:	e001      	b.n	8017400 <json_value_get_type+0x18>
 80173fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017400:	4618      	mov	r0, r3
 8017402:	370c      	adds	r7, #12
 8017404:	46bd      	mov	sp, r7
 8017406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740a:	4770      	bx	lr

0801740c <json_value_get_object>:

JSON_Object* json_value_get_object(const JSON_Value *value) {
 801740c:	b580      	push	{r7, lr}
 801740e:	b082      	sub	sp, #8
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
	return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8017414:	6878      	ldr	r0, [r7, #4]
 8017416:	f7ff ffe7 	bl	80173e8 <json_value_get_type>
 801741a:	4603      	mov	r3, r0
 801741c:	2b04      	cmp	r3, #4
 801741e:	d102      	bne.n	8017426 <json_value_get_object+0x1a>
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	689b      	ldr	r3, [r3, #8]
 8017424:	e000      	b.n	8017428 <json_value_get_object+0x1c>
 8017426:	2300      	movs	r3, #0
}
 8017428:	4618      	mov	r0, r3
 801742a:	3708      	adds	r7, #8
 801742c:	46bd      	mov	sp, r7
 801742e:	bd80      	pop	{r7, pc}

08017430 <json_value_get_array>:

JSON_Array* json_value_get_array(const JSON_Value *value) {
 8017430:	b580      	push	{r7, lr}
 8017432:	b082      	sub	sp, #8
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
	return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	f7ff ffd5 	bl	80173e8 <json_value_get_type>
 801743e:	4603      	mov	r3, r0
 8017440:	2b05      	cmp	r3, #5
 8017442:	d102      	bne.n	801744a <json_value_get_array+0x1a>
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	689b      	ldr	r3, [r3, #8]
 8017448:	e000      	b.n	801744c <json_value_get_array+0x1c>
 801744a:	2300      	movs	r3, #0
}
 801744c:	4618      	mov	r0, r3
 801744e:	3708      	adds	r7, #8
 8017450:	46bd      	mov	sp, r7
 8017452:	bd80      	pop	{r7, pc}

08017454 <json_value_get_string_desc>:

static const JSON_String* json_value_get_string_desc(const JSON_Value *value) {
 8017454:	b580      	push	{r7, lr}
 8017456:	b082      	sub	sp, #8
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]
	return json_value_get_type(value) == JSONString ?
 801745c:	6878      	ldr	r0, [r7, #4]
 801745e:	f7ff ffc3 	bl	80173e8 <json_value_get_type>
 8017462:	4603      	mov	r3, r0
			&value->value.string : NULL;
 8017464:	2b02      	cmp	r3, #2
 8017466:	d102      	bne.n	801746e <json_value_get_string_desc+0x1a>
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	3308      	adds	r3, #8
 801746c:	e000      	b.n	8017470 <json_value_get_string_desc+0x1c>
 801746e:	2300      	movs	r3, #0
}
 8017470:	4618      	mov	r0, r3
 8017472:	3708      	adds	r7, #8
 8017474:	46bd      	mov	sp, r7
 8017476:	bd80      	pop	{r7, pc}

08017478 <json_value_get_string>:

const char* json_value_get_string(const JSON_Value *value) {
 8017478:	b580      	push	{r7, lr}
 801747a:	b084      	sub	sp, #16
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
	const JSON_String *str = json_value_get_string_desc(value);
 8017480:	6878      	ldr	r0, [r7, #4]
 8017482:	f7ff ffe7 	bl	8017454 <json_value_get_string_desc>
 8017486:	60f8      	str	r0, [r7, #12]
	return str ? str->chars : NULL;
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	2b00      	cmp	r3, #0
 801748c:	d002      	beq.n	8017494 <json_value_get_string+0x1c>
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	e000      	b.n	8017496 <json_value_get_string+0x1e>
 8017494:	2300      	movs	r3, #0
}
 8017496:	4618      	mov	r0, r3
 8017498:	3710      	adds	r7, #16
 801749a:	46bd      	mov	sp, r7
 801749c:	bd80      	pop	{r7, pc}

0801749e <json_value_get_string_len>:

size_t json_value_get_string_len(const JSON_Value *value) {
 801749e:	b580      	push	{r7, lr}
 80174a0:	b084      	sub	sp, #16
 80174a2:	af00      	add	r7, sp, #0
 80174a4:	6078      	str	r0, [r7, #4]
	const JSON_String *str = json_value_get_string_desc(value);
 80174a6:	6878      	ldr	r0, [r7, #4]
 80174a8:	f7ff ffd4 	bl	8017454 <json_value_get_string_desc>
 80174ac:	60f8      	str	r0, [r7, #12]
	return str ? str->length : 0;
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d002      	beq.n	80174ba <json_value_get_string_len+0x1c>
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	685b      	ldr	r3, [r3, #4]
 80174b8:	e000      	b.n	80174bc <json_value_get_string_len+0x1e>
 80174ba:	2300      	movs	r3, #0
}
 80174bc:	4618      	mov	r0, r3
 80174be:	3710      	adds	r7, #16
 80174c0:	46bd      	mov	sp, r7
 80174c2:	bd80      	pop	{r7, pc}

080174c4 <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b082      	sub	sp, #8
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
	return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 80174cc:	6878      	ldr	r0, [r7, #4]
 80174ce:	f7ff ff8b 	bl	80173e8 <json_value_get_type>
 80174d2:	4603      	mov	r3, r0
 80174d4:	2b03      	cmp	r3, #3
 80174d6:	d103      	bne.n	80174e0 <json_value_get_number+0x1c>
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80174de:	e003      	b.n	80174e8 <json_value_get_number+0x24>
 80174e0:	f04f 0200 	mov.w	r2, #0
 80174e4:	f04f 0300 	mov.w	r3, #0
 80174e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80174ec:	eeb0 0b47 	vmov.f64	d0, d7
 80174f0:	3708      	adds	r7, #8
 80174f2:	46bd      	mov	sp, r7
 80174f4:	bd80      	pop	{r7, pc}

080174f6 <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 80174f6:	b580      	push	{r7, lr}
 80174f8:	b082      	sub	sp, #8
 80174fa:	af00      	add	r7, sp, #0
 80174fc:	6078      	str	r0, [r7, #4]
	return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 80174fe:	6878      	ldr	r0, [r7, #4]
 8017500:	f7ff ff72 	bl	80173e8 <json_value_get_type>
 8017504:	4603      	mov	r3, r0
 8017506:	2b06      	cmp	r3, #6
 8017508:	d102      	bne.n	8017510 <json_value_get_boolean+0x1a>
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	689b      	ldr	r3, [r3, #8]
 801750e:	e001      	b.n	8017514 <json_value_get_boolean+0x1e>
 8017510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017514:	4618      	mov	r0, r3
 8017516:	3708      	adds	r7, #8
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}

0801751c <json_value_free>:

JSON_Value* json_value_get_parent(const JSON_Value *value) {
	return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 801751c:	b580      	push	{r7, lr}
 801751e:	b082      	sub	sp, #8
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
	switch (json_value_get_type(value)) {
 8017524:	6878      	ldr	r0, [r7, #4]
 8017526:	f7ff ff5f 	bl	80173e8 <json_value_get_type>
 801752a:	4603      	mov	r3, r0
 801752c:	2b05      	cmp	r3, #5
 801752e:	d012      	beq.n	8017556 <json_value_free+0x3a>
 8017530:	2b05      	cmp	r3, #5
 8017532:	dc16      	bgt.n	8017562 <json_value_free+0x46>
 8017534:	2b02      	cmp	r3, #2
 8017536:	d007      	beq.n	8017548 <json_value_free+0x2c>
 8017538:	2b04      	cmp	r3, #4
 801753a:	d112      	bne.n	8017562 <json_value_free+0x46>
	case JSONObject:
		json_object_free(value->value.object);
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	689b      	ldr	r3, [r3, #8]
 8017540:	4618      	mov	r0, r3
 8017542:	f7fd ff9f 	bl	8015484 <json_object_free>
		break;
 8017546:	e00d      	b.n	8017564 <json_value_free+0x48>
	case JSONString:
		parson_free(value->value.string.chars);
 8017548:	4b0a      	ldr	r3, [pc, #40]	; (8017574 <json_value_free+0x58>)
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	687a      	ldr	r2, [r7, #4]
 801754e:	6892      	ldr	r2, [r2, #8]
 8017550:	4610      	mov	r0, r2
 8017552:	4798      	blx	r3
		break;
 8017554:	e006      	b.n	8017564 <json_value_free+0x48>
	case JSONArray:
		json_array_free(value->value.array);
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	689b      	ldr	r3, [r3, #8]
 801755a:	4618      	mov	r0, r3
 801755c:	f7fe f83c 	bl	80155d8 <json_array_free>
		break;
 8017560:	e000      	b.n	8017564 <json_value_free+0x48>
	default:
		break;
 8017562:	bf00      	nop
	}
	parson_free(value);
 8017564:	4b03      	ldr	r3, [pc, #12]	; (8017574 <json_value_free+0x58>)
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	6878      	ldr	r0, [r7, #4]
 801756a:	4798      	blx	r3
}
 801756c:	bf00      	nop
 801756e:	3708      	adds	r7, #8
 8017570:	46bd      	mov	sp, r7
 8017572:	bd80      	pop	{r7, pc}
 8017574:	2400003c 	.word	0x2400003c

08017578 <json_value_init_object>:

JSON_Value* json_value_init_object(void) {
 8017578:	b580      	push	{r7, lr}
 801757a:	b082      	sub	sp, #8
 801757c:	af00      	add	r7, sp, #0
	JSON_Value *new_value = (JSON_Value*) parson_malloc(sizeof(JSON_Value));
 801757e:	4b12      	ldr	r3, [pc, #72]	; (80175c8 <json_value_init_object+0x50>)
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	2010      	movs	r0, #16
 8017584:	4798      	blx	r3
 8017586:	6078      	str	r0, [r7, #4]
	if (!new_value) {
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d101      	bne.n	8017592 <json_value_init_object+0x1a>
		return NULL;
 801758e:	2300      	movs	r3, #0
 8017590:	e016      	b.n	80175c0 <json_value_init_object+0x48>
	}
	new_value->parent = NULL;
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	2200      	movs	r2, #0
 8017596:	601a      	str	r2, [r3, #0]
	new_value->type = JSONObject;
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	2204      	movs	r2, #4
 801759c:	605a      	str	r2, [r3, #4]
	new_value->value.object = json_object_make(new_value);
 801759e:	6878      	ldr	r0, [r7, #4]
 80175a0:	f7fd fc86 	bl	8014eb0 <json_object_make>
 80175a4:	4602      	mov	r2, r0
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	609a      	str	r2, [r3, #8]
	if (!new_value->value.object) {
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	689b      	ldr	r3, [r3, #8]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d105      	bne.n	80175be <json_value_init_object+0x46>
		parson_free(new_value);
 80175b2:	4b06      	ldr	r3, [pc, #24]	; (80175cc <json_value_init_object+0x54>)
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	6878      	ldr	r0, [r7, #4]
 80175b8:	4798      	blx	r3
		return NULL;
 80175ba:	2300      	movs	r3, #0
 80175bc:	e000      	b.n	80175c0 <json_value_init_object+0x48>
	}
	return new_value;
 80175be:	687b      	ldr	r3, [r7, #4]
}
 80175c0:	4618      	mov	r0, r3
 80175c2:	3708      	adds	r7, #8
 80175c4:	46bd      	mov	sp, r7
 80175c6:	bd80      	pop	{r7, pc}
 80175c8:	24000038 	.word	0x24000038
 80175cc:	2400003c 	.word	0x2400003c

080175d0 <json_value_init_array>:

JSON_Value* json_value_init_array(void) {
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b082      	sub	sp, #8
 80175d4:	af00      	add	r7, sp, #0
	JSON_Value *new_value = (JSON_Value*) parson_malloc(sizeof(JSON_Value));
 80175d6:	4b12      	ldr	r3, [pc, #72]	; (8017620 <json_value_init_array+0x50>)
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	2010      	movs	r0, #16
 80175dc:	4798      	blx	r3
 80175de:	6078      	str	r0, [r7, #4]
	if (!new_value) {
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d101      	bne.n	80175ea <json_value_init_array+0x1a>
		return NULL;
 80175e6:	2300      	movs	r3, #0
 80175e8:	e016      	b.n	8017618 <json_value_init_array+0x48>
	}
	new_value->parent = NULL;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	2200      	movs	r2, #0
 80175ee:	601a      	str	r2, [r3, #0]
	new_value->type = JSONArray;
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	2205      	movs	r2, #5
 80175f4:	605a      	str	r2, [r3, #4]
	new_value->value.array = json_array_make(new_value);
 80175f6:	6878      	ldr	r0, [r7, #4]
 80175f8:	f7fd ff58 	bl	80154ac <json_array_make>
 80175fc:	4602      	mov	r2, r0
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	609a      	str	r2, [r3, #8]
	if (!new_value->value.array) {
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	689b      	ldr	r3, [r3, #8]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d105      	bne.n	8017616 <json_value_init_array+0x46>
		parson_free(new_value);
 801760a:	4b06      	ldr	r3, [pc, #24]	; (8017624 <json_value_init_array+0x54>)
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	4798      	blx	r3
		return NULL;
 8017612:	2300      	movs	r3, #0
 8017614:	e000      	b.n	8017618 <json_value_init_array+0x48>
	}
	return new_value;
 8017616:	687b      	ldr	r3, [r7, #4]
}
 8017618:	4618      	mov	r0, r3
 801761a:	3708      	adds	r7, #8
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}
 8017620:	24000038 	.word	0x24000038
 8017624:	2400003c 	.word	0x2400003c

08017628 <json_value_init_string>:

JSON_Value* json_value_init_string(const char *string) {
 8017628:	b580      	push	{r7, lr}
 801762a:	b082      	sub	sp, #8
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
	if (string == NULL) {
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d101      	bne.n	801763a <json_value_init_string+0x12>
		return NULL;
 8017636:	2300      	movs	r3, #0
 8017638:	e008      	b.n	801764c <json_value_init_string+0x24>
	}
	return json_value_init_string_with_len(string, strlen(string));
 801763a:	6878      	ldr	r0, [r7, #4]
 801763c:	f7e8 fe5a 	bl	80002f4 <strlen>
 8017640:	4603      	mov	r3, r0
 8017642:	4619      	mov	r1, r3
 8017644:	6878      	ldr	r0, [r7, #4]
 8017646:	f000 f805 	bl	8017654 <json_value_init_string_with_len>
 801764a:	4603      	mov	r3, r0
}
 801764c:	4618      	mov	r0, r3
 801764e:	3708      	adds	r7, #8
 8017650:	46bd      	mov	sp, r7
 8017652:	bd80      	pop	{r7, pc}

08017654 <json_value_init_string_with_len>:

JSON_Value* json_value_init_string_with_len(const char *string, size_t length) {
 8017654:	b580      	push	{r7, lr}
 8017656:	b084      	sub	sp, #16
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
 801765c:	6039      	str	r1, [r7, #0]
	char *copy = NULL;
 801765e:	2300      	movs	r3, #0
 8017660:	60fb      	str	r3, [r7, #12]
	JSON_Value *value;
	if (string == NULL) {
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d101      	bne.n	801766c <json_value_init_string_with_len+0x18>
		return NULL;
 8017668:	2300      	movs	r3, #0
 801766a:	e01f      	b.n	80176ac <json_value_init_string_with_len+0x58>
	}
	if (!is_valid_utf8(string, length)) {
 801766c:	6839      	ldr	r1, [r7, #0]
 801766e:	6878      	ldr	r0, [r7, #4]
 8017670:	f7fd fb8c 	bl	8014d8c <is_valid_utf8>
 8017674:	4603      	mov	r3, r0
 8017676:	2b00      	cmp	r3, #0
 8017678:	d101      	bne.n	801767e <json_value_init_string_with_len+0x2a>
		return NULL;
 801767a:	2300      	movs	r3, #0
 801767c:	e016      	b.n	80176ac <json_value_init_string_with_len+0x58>
	}
	copy = parson_strndup(string, length);
 801767e:	6839      	ldr	r1, [r7, #0]
 8017680:	6878      	ldr	r0, [r7, #4]
 8017682:	f7fd f9cd 	bl	8014a20 <parson_strndup>
 8017686:	60f8      	str	r0, [r7, #12]
	if (copy == NULL) {
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d101      	bne.n	8017692 <json_value_init_string_with_len+0x3e>
		return NULL;
 801768e:	2300      	movs	r3, #0
 8017690:	e00c      	b.n	80176ac <json_value_init_string_with_len+0x58>
	}
	value = json_value_init_string_no_copy(copy, length);
 8017692:	6839      	ldr	r1, [r7, #0]
 8017694:	68f8      	ldr	r0, [r7, #12]
 8017696:	f7fd ffc7 	bl	8015628 <json_value_init_string_no_copy>
 801769a:	60b8      	str	r0, [r7, #8]
	if (value == NULL) {
 801769c:	68bb      	ldr	r3, [r7, #8]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d103      	bne.n	80176aa <json_value_init_string_with_len+0x56>
		parson_free(copy);
 80176a2:	4b04      	ldr	r3, [pc, #16]	; (80176b4 <json_value_init_string_with_len+0x60>)
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	68f8      	ldr	r0, [r7, #12]
 80176a8:	4798      	blx	r3
	}
	return value;
 80176aa:	68bb      	ldr	r3, [r7, #8]
}
 80176ac:	4618      	mov	r0, r3
 80176ae:	3710      	adds	r7, #16
 80176b0:	46bd      	mov	sp, r7
 80176b2:	bd80      	pop	{r7, pc}
 80176b4:	2400003c 	.word	0x2400003c

080176b8 <json_value_init_number>:

JSON_Value* json_value_init_number(double number) {
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b084      	sub	sp, #16
 80176bc:	af00      	add	r7, sp, #0
 80176be:	ed87 0b00 	vstr	d0, [r7]
	JSON_Value *new_value = NULL;
 80176c2:	2300      	movs	r3, #0
 80176c4:	60fb      	str	r3, [r7, #12]
	if (IS_NUMBER_INVALID(number)) {
 80176c6:	ed97 6b00 	vldr	d6, [r7]
 80176ca:	ed97 7b00 	vldr	d7, [r7]
 80176ce:	eeb4 6b47 	vcmp.f64	d6, d7
 80176d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176d6:	d612      	bvs.n	80176fe <json_value_init_number+0x46>
 80176d8:	ed97 7b00 	vldr	d7, [r7]
 80176dc:	eeb0 7bc7 	vabs.f64	d7, d7
 80176e0:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8017738 <json_value_init_number+0x80>
 80176e4:	eeb4 7b46 	vcmp.f64	d7, d6
 80176e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ec:	bfd4      	ite	le
 80176ee:	2301      	movle	r3, #1
 80176f0:	2300      	movgt	r3, #0
 80176f2:	b2db      	uxtb	r3, r3
 80176f4:	f083 0301 	eor.w	r3, r3, #1
 80176f8:	b2db      	uxtb	r3, r3
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d001      	beq.n	8017702 <json_value_init_number+0x4a>
		return NULL;
 80176fe:	2300      	movs	r3, #0
 8017700:	e015      	b.n	801772e <json_value_init_number+0x76>
	}
	new_value = (JSON_Value*) parson_malloc(sizeof(JSON_Value));
 8017702:	4b0f      	ldr	r3, [pc, #60]	; (8017740 <json_value_init_number+0x88>)
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	2010      	movs	r0, #16
 8017708:	4798      	blx	r3
 801770a:	60f8      	str	r0, [r7, #12]
	if (new_value == NULL) {
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d101      	bne.n	8017716 <json_value_init_number+0x5e>
		return NULL;
 8017712:	2300      	movs	r3, #0
 8017714:	e00b      	b.n	801772e <json_value_init_number+0x76>
	}
	new_value->parent = NULL;
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	2200      	movs	r2, #0
 801771a:	601a      	str	r2, [r3, #0]
	new_value->type = JSONNumber;
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	2203      	movs	r2, #3
 8017720:	605a      	str	r2, [r3, #4]
	new_value->value.number = number;
 8017722:	68f9      	ldr	r1, [r7, #12]
 8017724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017728:	e9c1 2302 	strd	r2, r3, [r1, #8]
	return new_value;
 801772c:	68fb      	ldr	r3, [r7, #12]
}
 801772e:	4618      	mov	r0, r3
 8017730:	3710      	adds	r7, #16
 8017732:	46bd      	mov	sp, r7
 8017734:	bd80      	pop	{r7, pc}
 8017736:	bf00      	nop
 8017738:	ffffffff 	.word	0xffffffff
 801773c:	7fefffff 	.word	0x7fefffff
 8017740:	24000038 	.word	0x24000038

08017744 <json_value_init_boolean>:

JSON_Value* json_value_init_boolean(int boolean) {
 8017744:	b580      	push	{r7, lr}
 8017746:	b084      	sub	sp, #16
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
	JSON_Value *new_value = (JSON_Value*) parson_malloc(sizeof(JSON_Value));
 801774c:	4b0e      	ldr	r3, [pc, #56]	; (8017788 <json_value_init_boolean+0x44>)
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	2010      	movs	r0, #16
 8017752:	4798      	blx	r3
 8017754:	60f8      	str	r0, [r7, #12]
	if (!new_value) {
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d101      	bne.n	8017760 <json_value_init_boolean+0x1c>
		return NULL;
 801775c:	2300      	movs	r3, #0
 801775e:	e00f      	b.n	8017780 <json_value_init_boolean+0x3c>
	}
	new_value->parent = NULL;
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	2200      	movs	r2, #0
 8017764:	601a      	str	r2, [r3, #0]
	new_value->type = JSONBoolean;
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	2206      	movs	r2, #6
 801776a:	605a      	str	r2, [r3, #4]
	new_value->value.boolean = boolean ? 1 : 0;
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	2b00      	cmp	r3, #0
 8017770:	bf14      	ite	ne
 8017772:	2301      	movne	r3, #1
 8017774:	2300      	moveq	r3, #0
 8017776:	b2db      	uxtb	r3, r3
 8017778:	461a      	mov	r2, r3
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	609a      	str	r2, [r3, #8]
	return new_value;
 801777e:	68fb      	ldr	r3, [r7, #12]
}
 8017780:	4618      	mov	r0, r3
 8017782:	3710      	adds	r7, #16
 8017784:	46bd      	mov	sp, r7
 8017786:	bd80      	pop	{r7, pc}
 8017788:	24000038 	.word	0x24000038

0801778c <json_value_init_null>:

JSON_Value* json_value_init_null(void) {
 801778c:	b580      	push	{r7, lr}
 801778e:	b082      	sub	sp, #8
 8017790:	af00      	add	r7, sp, #0
	JSON_Value *new_value = (JSON_Value*) parson_malloc(sizeof(JSON_Value));
 8017792:	4b0a      	ldr	r3, [pc, #40]	; (80177bc <json_value_init_null+0x30>)
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	2010      	movs	r0, #16
 8017798:	4798      	blx	r3
 801779a:	6078      	str	r0, [r7, #4]
	if (!new_value) {
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d101      	bne.n	80177a6 <json_value_init_null+0x1a>
		return NULL;
 80177a2:	2300      	movs	r3, #0
 80177a4:	e006      	b.n	80177b4 <json_value_init_null+0x28>
	}
	new_value->parent = NULL;
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	2200      	movs	r2, #0
 80177aa:	601a      	str	r2, [r3, #0]
	new_value->type = JSONNull;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	2201      	movs	r2, #1
 80177b0:	605a      	str	r2, [r3, #4]
	return new_value;
 80177b2:	687b      	ldr	r3, [r7, #4]
}
 80177b4:	4618      	mov	r0, r3
 80177b6:	3708      	adds	r7, #8
 80177b8:	46bd      	mov	sp, r7
 80177ba:	bd80      	pop	{r7, pc}
 80177bc:	24000038 	.word	0x24000038

080177c0 <json_serialization_size>:
	default:
		return NULL;
	}
}

size_t json_serialization_size(const JSON_Value *value) {
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b096      	sub	sp, #88	; 0x58
 80177c4:	af02      	add	r7, sp, #8
 80177c6:	6078      	str	r0, [r7, #4]
	char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
	int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 80177c8:	f107 030c 	add.w	r3, r7, #12
 80177cc:	9300      	str	r3, [sp, #0]
 80177ce:	2300      	movs	r3, #0
 80177d0:	2200      	movs	r2, #0
 80177d2:	2100      	movs	r1, #0
 80177d4:	6878      	ldr	r0, [r7, #4]
 80177d6:	f7fe fceb 	bl	80161b0 <json_serialize_to_buffer_r>
 80177da:	64f8      	str	r0, [r7, #76]	; 0x4c
	return res < 0 ? 0 : (size_t) (res) + 1;
 80177dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177de:	2b00      	cmp	r3, #0
 80177e0:	db02      	blt.n	80177e8 <json_serialization_size+0x28>
 80177e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177e4:	3301      	adds	r3, #1
 80177e6:	e000      	b.n	80177ea <json_serialization_size+0x2a>
 80177e8:	2300      	movs	r3, #0
}
 80177ea:	4618      	mov	r0, r3
 80177ec:	3750      	adds	r7, #80	; 0x50
 80177ee:	46bd      	mov	sp, r7
 80177f0:	bd80      	pop	{r7, pc}

080177f2 <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf,
		size_t buf_size_in_bytes) {
 80177f2:	b580      	push	{r7, lr}
 80177f4:	b088      	sub	sp, #32
 80177f6:	af02      	add	r7, sp, #8
 80177f8:	60f8      	str	r0, [r7, #12]
 80177fa:	60b9      	str	r1, [r7, #8]
 80177fc:	607a      	str	r2, [r7, #4]
	int written = -1;
 80177fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017802:	617b      	str	r3, [r7, #20]
	size_t needed_size_in_bytes = json_serialization_size(value);
 8017804:	68f8      	ldr	r0, [r7, #12]
 8017806:	f7ff ffdb 	bl	80177c0 <json_serialization_size>
 801780a:	6138      	str	r0, [r7, #16]
	if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801780c:	693b      	ldr	r3, [r7, #16]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d003      	beq.n	801781a <json_serialize_to_buffer+0x28>
 8017812:	687a      	ldr	r2, [r7, #4]
 8017814:	693b      	ldr	r3, [r7, #16]
 8017816:	429a      	cmp	r2, r3
 8017818:	d202      	bcs.n	8017820 <json_serialize_to_buffer+0x2e>
		return JSONFailure;
 801781a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801781e:	e00f      	b.n	8017840 <json_serialize_to_buffer+0x4e>
	}
	written = json_serialize_to_buffer_r(value, buf, 0, PARSON_FALSE, NULL);
 8017820:	2300      	movs	r3, #0
 8017822:	9300      	str	r3, [sp, #0]
 8017824:	2300      	movs	r3, #0
 8017826:	2200      	movs	r2, #0
 8017828:	68b9      	ldr	r1, [r7, #8]
 801782a:	68f8      	ldr	r0, [r7, #12]
 801782c:	f7fe fcc0 	bl	80161b0 <json_serialize_to_buffer_r>
 8017830:	6178      	str	r0, [r7, #20]
	if (written < 0) {
 8017832:	697b      	ldr	r3, [r7, #20]
 8017834:	2b00      	cmp	r3, #0
 8017836:	da02      	bge.n	801783e <json_serialize_to_buffer+0x4c>
		return JSONFailure;
 8017838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801783c:	e000      	b.n	8017840 <json_serialize_to_buffer+0x4e>
	}
	return JSONSuccess;
 801783e:	2300      	movs	r3, #0
}
 8017840:	4618      	mov	r0, r3
 8017842:	3718      	adds	r7, #24
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}

08017848 <json_object_set_value>:
	}
	return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name,
		JSON_Value *value) {
 8017848:	b580      	push	{r7, lr}
 801784a:	b08e      	sub	sp, #56	; 0x38
 801784c:	af02      	add	r7, sp, #8
 801784e:	60f8      	str	r0, [r7, #12]
 8017850:	60b9      	str	r1, [r7, #8]
 8017852:	607a      	str	r2, [r7, #4]
	unsigned long hash = 0;
 8017854:	2300      	movs	r3, #0
 8017856:	62bb      	str	r3, [r7, #40]	; 0x28
	parson_bool_t found = PARSON_FALSE;
 8017858:	2300      	movs	r3, #0
 801785a:	617b      	str	r3, [r7, #20]
	size_t cell_ix = 0;
 801785c:	2300      	movs	r3, #0
 801785e:	62fb      	str	r3, [r7, #44]	; 0x2c
	size_t item_ix = 0;
 8017860:	2300      	movs	r3, #0
 8017862:	627b      	str	r3, [r7, #36]	; 0x24
	JSON_Value *old_value = NULL;
 8017864:	2300      	movs	r3, #0
 8017866:	623b      	str	r3, [r7, #32]
	char *key_copy = NULL;
 8017868:	2300      	movs	r3, #0
 801786a:	61fb      	str	r3, [r7, #28]

	if (!object || !name || !value || value->parent) {
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d009      	beq.n	8017886 <json_object_set_value+0x3e>
 8017872:	68bb      	ldr	r3, [r7, #8]
 8017874:	2b00      	cmp	r3, #0
 8017876:	d006      	beq.n	8017886 <json_object_set_value+0x3e>
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d003      	beq.n	8017886 <json_object_set_value+0x3e>
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d002      	beq.n	801788c <json_object_set_value+0x44>
		return JSONFailure;
 8017886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801788a:	e095      	b.n	80179b8 <json_object_set_value+0x170>
	}
	hash = hash_string(name, strlen(name));
 801788c:	68b8      	ldr	r0, [r7, #8]
 801788e:	f7e8 fd31 	bl	80002f4 <strlen>
 8017892:	4603      	mov	r3, r0
 8017894:	4619      	mov	r1, r3
 8017896:	68b8      	ldr	r0, [r7, #8]
 8017898:	f7fd fade 	bl	8014e58 <hash_string>
 801789c:	62b8      	str	r0, [r7, #40]	; 0x28
	found = PARSON_FALSE;
 801789e:	2300      	movs	r3, #0
 80178a0:	617b      	str	r3, [r7, #20]
	cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 80178a2:	68b8      	ldr	r0, [r7, #8]
 80178a4:	f7e8 fd26 	bl	80002f4 <strlen>
 80178a8:	4602      	mov	r2, r0
 80178aa:	f107 0314 	add.w	r3, r7, #20
 80178ae:	9300      	str	r3, [sp, #0]
 80178b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178b2:	68b9      	ldr	r1, [r7, #8]
 80178b4:	68f8      	ldr	r0, [r7, #12]
 80178b6:	f7fd fcb0 	bl	801521a <json_object_get_cell_ix>
 80178ba:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (found) {
 80178bc:	697b      	ldr	r3, [r7, #20]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d01f      	beq.n	8017902 <json_object_set_value+0xba>
		item_ix = object->cells[cell_ix];
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	685a      	ldr	r2, [r3, #4]
 80178c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178c8:	009b      	lsls	r3, r3, #2
 80178ca:	4413      	add	r3, r2
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	627b      	str	r3, [r7, #36]	; 0x24
		old_value = object->values[item_ix];
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	691a      	ldr	r2, [r3, #16]
 80178d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178d6:	009b      	lsls	r3, r3, #2
 80178d8:	4413      	add	r3, r2
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	623b      	str	r3, [r7, #32]
		json_value_free(old_value);
 80178de:	6a38      	ldr	r0, [r7, #32]
 80178e0:	f7ff fe1c 	bl	801751c <json_value_free>
		object->values[item_ix] = value;
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	691a      	ldr	r2, [r3, #16]
 80178e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178ea:	009b      	lsls	r3, r3, #2
 80178ec:	4413      	add	r3, r2
 80178ee:	687a      	ldr	r2, [r7, #4]
 80178f0:	601a      	str	r2, [r3, #0]
		value->parent = json_object_get_wrapping_value(object);
 80178f2:	68f8      	ldr	r0, [r7, #12]
 80178f4:	f7ff fd2a 	bl	801734c <json_object_get_wrapping_value>
 80178f8:	4602      	mov	r2, r0
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	601a      	str	r2, [r3, #0]
		return JSONSuccess;
 80178fe:	2300      	movs	r3, #0
 8017900:	e05a      	b.n	80179b8 <json_object_set_value+0x170>
	}
	if (object->count >= object->item_capacity) {
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	699a      	ldr	r2, [r3, #24]
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	69db      	ldr	r3, [r3, #28]
 801790a:	429a      	cmp	r2, r3
 801790c:	d316      	bcc.n	801793c <json_object_set_value+0xf4>
		JSON_Status res = json_object_grow_and_rehash(object);
 801790e:	68f8      	ldr	r0, [r7, #12]
 8017910:	f7fd fc18 	bl	8015144 <json_object_grow_and_rehash>
 8017914:	61b8      	str	r0, [r7, #24]
		if (res != JSONSuccess) {
 8017916:	69bb      	ldr	r3, [r7, #24]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d002      	beq.n	8017922 <json_object_set_value+0xda>
			return JSONFailure;
 801791c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017920:	e04a      	b.n	80179b8 <json_object_set_value+0x170>
		}
		cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash,
 8017922:	68b8      	ldr	r0, [r7, #8]
 8017924:	f7e8 fce6 	bl	80002f4 <strlen>
 8017928:	4602      	mov	r2, r0
 801792a:	f107 0314 	add.w	r3, r7, #20
 801792e:	9300      	str	r3, [sp, #0]
 8017930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017932:	68b9      	ldr	r1, [r7, #8]
 8017934:	68f8      	ldr	r0, [r7, #12]
 8017936:	f7fd fc70 	bl	801521a <json_object_get_cell_ix>
 801793a:	62f8      	str	r0, [r7, #44]	; 0x2c
				&found);
	}
	key_copy = parson_strdup(name);
 801793c:	68b8      	ldr	r0, [r7, #8]
 801793e:	f7fd f891 	bl	8014a64 <parson_strdup>
 8017942:	61f8      	str	r0, [r7, #28]
	if (!key_copy) {
 8017944:	69fb      	ldr	r3, [r7, #28]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d102      	bne.n	8017950 <json_object_set_value+0x108>
		return JSONFailure;
 801794a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801794e:	e033      	b.n	80179b8 <json_object_set_value+0x170>
	}
	object->names[object->count] = key_copy;
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	68da      	ldr	r2, [r3, #12]
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	699b      	ldr	r3, [r3, #24]
 8017958:	009b      	lsls	r3, r3, #2
 801795a:	4413      	add	r3, r2
 801795c:	69fa      	ldr	r2, [r7, #28]
 801795e:	601a      	str	r2, [r3, #0]
	object->cells[cell_ix] = object->count;
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	685a      	ldr	r2, [r3, #4]
 8017964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017966:	009b      	lsls	r3, r3, #2
 8017968:	4413      	add	r3, r2
 801796a:	68fa      	ldr	r2, [r7, #12]
 801796c:	6992      	ldr	r2, [r2, #24]
 801796e:	601a      	str	r2, [r3, #0]
	object->values[object->count] = value;
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	691a      	ldr	r2, [r3, #16]
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	699b      	ldr	r3, [r3, #24]
 8017978:	009b      	lsls	r3, r3, #2
 801797a:	4413      	add	r3, r2
 801797c:	687a      	ldr	r2, [r7, #4]
 801797e:	601a      	str	r2, [r3, #0]
	object->cell_ixs[object->count] = cell_ix;
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	695a      	ldr	r2, [r3, #20]
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	699b      	ldr	r3, [r3, #24]
 8017988:	009b      	lsls	r3, r3, #2
 801798a:	4413      	add	r3, r2
 801798c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801798e:	601a      	str	r2, [r3, #0]
	object->hashes[object->count] = hash;
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	689a      	ldr	r2, [r3, #8]
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	699b      	ldr	r3, [r3, #24]
 8017998:	009b      	lsls	r3, r3, #2
 801799a:	4413      	add	r3, r2
 801799c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801799e:	601a      	str	r2, [r3, #0]
	object->count++;
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	699b      	ldr	r3, [r3, #24]
 80179a4:	1c5a      	adds	r2, r3, #1
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	619a      	str	r2, [r3, #24]
	value->parent = json_object_get_wrapping_value(object);
 80179aa:	68f8      	ldr	r0, [r7, #12]
 80179ac:	f7ff fcce 	bl	801734c <json_object_get_wrapping_value>
 80179b0:	4602      	mov	r2, r0
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	601a      	str	r2, [r3, #0]
	return JSONSuccess;
 80179b6:	2300      	movs	r3, #0
}
 80179b8:	4618      	mov	r0, r3
 80179ba:	3730      	adds	r7, #48	; 0x30
 80179bc:	46bd      	mov	sp, r7
 80179be:	bd80      	pop	{r7, pc}

080179c0 <json_object_set_string>:

JSON_Status json_object_set_string(JSON_Object *object, const char *name,
		const char *string) {
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b086      	sub	sp, #24
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	60f8      	str	r0, [r7, #12]
 80179c8:	60b9      	str	r1, [r7, #8]
 80179ca:	607a      	str	r2, [r7, #4]
	JSON_Value *value = json_value_init_string(string);
 80179cc:	6878      	ldr	r0, [r7, #4]
 80179ce:	f7ff fe2b 	bl	8017628 <json_value_init_string>
 80179d2:	6178      	str	r0, [r7, #20]
	JSON_Status status = json_object_set_value(object, name, value);
 80179d4:	697a      	ldr	r2, [r7, #20]
 80179d6:	68b9      	ldr	r1, [r7, #8]
 80179d8:	68f8      	ldr	r0, [r7, #12]
 80179da:	f7ff ff35 	bl	8017848 <json_object_set_value>
 80179de:	6138      	str	r0, [r7, #16]
	if (status != JSONSuccess) {
 80179e0:	693b      	ldr	r3, [r7, #16]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d002      	beq.n	80179ec <json_object_set_string+0x2c>
		json_value_free(value);
 80179e6:	6978      	ldr	r0, [r7, #20]
 80179e8:	f7ff fd98 	bl	801751c <json_value_free>
	}
	return status;
 80179ec:	693b      	ldr	r3, [r7, #16]
}
 80179ee:	4618      	mov	r0, r3
 80179f0:	3718      	adds	r7, #24
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bd80      	pop	{r7, pc}

080179f6 <json_object_set_number>:
	}
	return status;
}

JSON_Status json_object_set_number(JSON_Object *object, const char *name,
		double number) {
 80179f6:	b580      	push	{r7, lr}
 80179f8:	b086      	sub	sp, #24
 80179fa:	af00      	add	r7, sp, #0
 80179fc:	60f8      	str	r0, [r7, #12]
 80179fe:	60b9      	str	r1, [r7, #8]
 8017a00:	ed87 0b00 	vstr	d0, [r7]
	JSON_Value *value = json_value_init_number(number);
 8017a04:	ed97 0b00 	vldr	d0, [r7]
 8017a08:	f7ff fe56 	bl	80176b8 <json_value_init_number>
 8017a0c:	6178      	str	r0, [r7, #20]
	JSON_Status status = json_object_set_value(object, name, value);
 8017a0e:	697a      	ldr	r2, [r7, #20]
 8017a10:	68b9      	ldr	r1, [r7, #8]
 8017a12:	68f8      	ldr	r0, [r7, #12]
 8017a14:	f7ff ff18 	bl	8017848 <json_object_set_value>
 8017a18:	6138      	str	r0, [r7, #16]
	if (status != JSONSuccess) {
 8017a1a:	693b      	ldr	r3, [r7, #16]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d002      	beq.n	8017a26 <json_object_set_number+0x30>
		json_value_free(value);
 8017a20:	6978      	ldr	r0, [r7, #20]
 8017a22:	f7ff fd7b 	bl	801751c <json_value_free>
	}
	return status;
 8017a26:	693b      	ldr	r3, [r7, #16]
}
 8017a28:	4618      	mov	r0, r3
 8017a2a:	3718      	adds	r7, #24
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}

08017a30 <json_set_allocation_functions>:
int json_boolean(const JSON_Value *value) {
	return json_value_get_boolean(value);
}

void json_set_allocation_functions(JSON_Malloc_Function malloc_fun,
		JSON_Free_Function free_fun) {
 8017a30:	b480      	push	{r7}
 8017a32:	b083      	sub	sp, #12
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
 8017a38:	6039      	str	r1, [r7, #0]
	parson_malloc = malloc_fun;
 8017a3a:	4a06      	ldr	r2, [pc, #24]	; (8017a54 <json_set_allocation_functions+0x24>)
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	6013      	str	r3, [r2, #0]
	parson_free = free_fun;
 8017a40:	4a05      	ldr	r2, [pc, #20]	; (8017a58 <json_set_allocation_functions+0x28>)
 8017a42:	683b      	ldr	r3, [r7, #0]
 8017a44:	6013      	str	r3, [r2, #0]
}
 8017a46:	bf00      	nop
 8017a48:	370c      	adds	r7, #12
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a50:	4770      	bx	lr
 8017a52:	bf00      	nop
 8017a54:	24000038 	.word	0x24000038
 8017a58:	2400003c 	.word	0x2400003c

08017a5c <share_malloc>:
static osMutexId_t ShareMutex;

extern int ReadyShare;
static char ShareMessage[256];

static void* share_malloc (unsigned int size){
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b084      	sub	sp, #16
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
	void* result=malloc(size);
 8017a64:	6878      	ldr	r0, [r7, #4]
 8017a66:	f000 fc33 	bl	80182d0 <malloc>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	60fb      	str	r3, [r7, #12]
	return result;
 8017a6e:	68fb      	ldr	r3, [r7, #12]
}
 8017a70:	4618      	mov	r0, r3
 8017a72:	3710      	adds	r7, #16
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}

08017a78 <share_free>:
static void share_free(void* buffer){
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
	free(buffer);
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	f000 fc2d 	bl	80182e0 <free>
}
 8017a86:	bf00      	nop
 8017a88:	3708      	adds	r7, #8
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	bd80      	pop	{r7, pc}
	...

08017a90 <ShareSaveChange>:

void ShareSaveChange() {
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b088      	sub	sp, #32
 8017a94:	af00      	add	r7, sp, #0
	int count=0;
 8017a96:	2300      	movs	r3, #0
 8017a98:	61fb      	str	r3, [r7, #28]
	if (osMutexAcquire(ShareMutex, osWaitForever) == osOK) {
 8017a9a:	4b33      	ldr	r3, [pc, #204]	; (8017b68 <ShareSaveChange+0xd8>)
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f7ee fbf3 	bl	800628e <osMutexAcquire>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d146      	bne.n	8017b3c <ShareSaveChange+0xac>
		int size=sizeof(charts)/sizeof(charts[0]);
 8017aae:	2304      	movs	r3, #4
 8017ab0:	617b      	str	r3, [r7, #20]
		for (size_t i = 0; i < size; i++) {
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	61bb      	str	r3, [r7, #24]
 8017ab6:	e03d      	b.n	8017b34 <ShareSaveChange+0xa4>
			ENTRY e, *ep;
//			ShareValue *value;
			e.key = charts[i];
 8017ab8:	4a2c      	ldr	r2, [pc, #176]	; (8017b6c <ShareSaveChange+0xdc>)
 8017aba:	69bb      	ldr	r3, [r7, #24]
 8017abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ac0:	607b      	str	r3, [r7, #4]
			ep = hsearch(e, FIND);
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	1d3b      	adds	r3, r7, #4
 8017ac6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017aca:	f000 faf1 	bl	80180b0 <hsearch>
 8017ace:	6138      	str	r0, [r7, #16]
			if (ep != NULL) {
 8017ad0:	693b      	ldr	r3, [r7, #16]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d01e      	beq.n	8017b14 <ShareSaveChange+0x84>
				if (((ShareValue*) ep->data)->changed) {
 8017ad6:	693b      	ldr	r3, [r7, #16]
 8017ad8:	685b      	ldr	r3, [r3, #4]
 8017ada:	685b      	ldr	r3, [r3, #4]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d026      	beq.n	8017b2e <ShareSaveChange+0x9e>
					JSON_Value *value = ((ShareValue*) ep->data)->json_root;
 8017ae0:	693b      	ldr	r3, [r7, #16]
 8017ae2:	685b      	ldr	r3, [r3, #4]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	60fb      	str	r3, [r7, #12]
//					char *string =
					json_serialize_to_buffer(value, ShareMessage, 80);
 8017ae8:	2250      	movs	r2, #80	; 0x50
 8017aea:	4921      	ldr	r1, [pc, #132]	; (8017b70 <ShareSaveChange+0xe0>)
 8017aec:	68f8      	ldr	r0, [r7, #12]
 8017aee:	f7ff fe80 	bl	80177f2 <json_serialize_to_buffer>
//					Debug_Message(LOG_INFO, ShareMessage);
					// Save to EEPROM
					count++;
 8017af2:	69fb      	ldr	r3, [r7, #28]
 8017af4:	3301      	adds	r3, #1
 8017af6:	61fb      	str	r3, [r7, #28]
					((ShareValue*) ep->data)->changed=0;
 8017af8:	693b      	ldr	r3, [r7, #16]
 8017afa:	685b      	ldr	r3, [r3, #4]
 8017afc:	2200      	movs	r2, #0
 8017afe:	605a      	str	r2, [r3, #4]
					e.data=ep->data;
 8017b00:	693b      	ldr	r3, [r7, #16]
 8017b02:	685b      	ldr	r3, [r3, #4]
 8017b04:	60bb      	str	r3, [r7, #8]
					hsearch(e, ENTER);
 8017b06:	2201      	movs	r2, #1
 8017b08:	1d3b      	adds	r3, r7, #4
 8017b0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017b0e:	f000 facf 	bl	80180b0 <hsearch>
 8017b12:	e00c      	b.n	8017b2e <ShareSaveChange+0x9e>
//					sprintf(ShareMessage, "save json %s", charts[i]);
//					Debug_Message(LOG_INFO, ShareMessage);
				}
			} else {
				sprintf(ShareMessage, "Раздел %s испорчен", charts[i]);
 8017b14:	4a15      	ldr	r2, [pc, #84]	; (8017b6c <ShareSaveChange+0xdc>)
 8017b16:	69bb      	ldr	r3, [r7, #24]
 8017b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b1c:	461a      	mov	r2, r3
 8017b1e:	4915      	ldr	r1, [pc, #84]	; (8017b74 <ShareSaveChange+0xe4>)
 8017b20:	4813      	ldr	r0, [pc, #76]	; (8017b70 <ShareSaveChange+0xe0>)
 8017b22:	f000 fd9f 	bl	8018664 <siprintf>
				Debug_Message(LOG_INFO, ShareMessage);
 8017b26:	4912      	ldr	r1, [pc, #72]	; (8017b70 <ShareSaveChange+0xe0>)
 8017b28:	2009      	movs	r0, #9
 8017b2a:	f7e9 fb43 	bl	80011b4 <Debug_Message>
		for (size_t i = 0; i < size; i++) {
 8017b2e:	69bb      	ldr	r3, [r7, #24]
 8017b30:	3301      	adds	r3, #1
 8017b32:	61bb      	str	r3, [r7, #24]
 8017b34:	697b      	ldr	r3, [r7, #20]
 8017b36:	69ba      	ldr	r2, [r7, #24]
 8017b38:	429a      	cmp	r2, r3
 8017b3a:	d3bd      	bcc.n	8017ab8 <ShareSaveChange+0x28>
			}
		}
	}
	osMutexRelease(ShareMutex);
 8017b3c:	4b0a      	ldr	r3, [pc, #40]	; (8017b68 <ShareSaveChange+0xd8>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7ee fbef 	bl	8006324 <osMutexRelease>
	if(count) 	Debug_Message(LOG_INFO, "share сохранено");
 8017b46:	69fb      	ldr	r3, [r7, #28]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d004      	beq.n	8017b56 <ShareSaveChange+0xc6>
 8017b4c:	490a      	ldr	r1, [pc, #40]	; (8017b78 <ShareSaveChange+0xe8>)
 8017b4e:	2009      	movs	r0, #9
 8017b50:	f7e9 fb30 	bl	80011b4 <Debug_Message>
	else Debug_Message(LOG_INFO, "share не изменялось");
}
 8017b54:	e003      	b.n	8017b5e <ShareSaveChange+0xce>
	else Debug_Message(LOG_INFO, "share не изменялось");
 8017b56:	4909      	ldr	r1, [pc, #36]	; (8017b7c <ShareSaveChange+0xec>)
 8017b58:	2009      	movs	r0, #9
 8017b5a:	f7e9 fb2b 	bl	80011b4 <Debug_Message>
}
 8017b5e:	bf00      	nop
 8017b60:	3720      	adds	r7, #32
 8017b62:	46bd      	mov	sp, r7
 8017b64:	bd80      	pop	{r7, pc}
 8017b66:	bf00      	nop
 8017b68:	2400b7f8 	.word	0x2400b7f8
 8017b6c:	24000044 	.word	0x24000044
 8017b70:	2400b7fc 	.word	0x2400b7fc
 8017b74:	0801e9e8 	.word	0x0801e9e8
 8017b78:	0801ea0c 	.word	0x0801ea0c
 8017b7c:	0801ea28 	.word	0x0801ea28

08017b80 <ShareInit>:
void ShareInit() {
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b086      	sub	sp, #24
 8017b84:	af00      	add	r7, sp, #0
	ENTRY e, *ep;
	ShareValue *value;
	ShareMutex=osMutexNew(NULL);
 8017b86:	2000      	movs	r0, #0
 8017b88:	f7ee fafb 	bl	8006182 <osMutexNew>
 8017b8c:	4603      	mov	r3, r0
 8017b8e:	4a25      	ldr	r2, [pc, #148]	; (8017c24 <ShareInit+0xa4>)
 8017b90:	6013      	str	r3, [r2, #0]
	json_set_allocation_functions(share_malloc, share_free);
 8017b92:	4925      	ldr	r1, [pc, #148]	; (8017c28 <ShareInit+0xa8>)
 8017b94:	4825      	ldr	r0, [pc, #148]	; (8017c2c <ShareInit+0xac>)
 8017b96:	f7ff ff4b 	bl	8017a30 <json_set_allocation_functions>
	const size_t capacity = sizeof charts / sizeof charts[0];
 8017b9a:	2304      	movs	r3, #4
 8017b9c:	613b      	str	r3, [r7, #16]
	hcreate(capacity);
 8017b9e:	6938      	ldr	r0, [r7, #16]
 8017ba0:	f000 fa80 	bl	80180a4 <hcreate>
	for (size_t i = 0; i < capacity; i++) {
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	617b      	str	r3, [r7, #20]
 8017ba8:	e02e      	b.n	8017c08 <ShareInit+0x88>
		value = malloc(sizeof(ShareValue));
 8017baa:	2008      	movs	r0, #8
 8017bac:	f000 fb90 	bl	80182d0 <malloc>
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	60fb      	str	r3, [r7, #12]
		e.key = charts[i];
 8017bb4:	4a1e      	ldr	r2, [pc, #120]	; (8017c30 <ShareInit+0xb0>)
 8017bb6:	697b      	ldr	r3, [r7, #20]
 8017bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017bbc:	603b      	str	r3, [r7, #0]
		//Load string
//		sprintf(ShareMessage, "string json %s", values[i]);
//		Debug_Message(LOG_INFO, ShareMessage);
		value->json_root = json_parse_string(values[i]);
 8017bbe:	4a1d      	ldr	r2, [pc, #116]	; (8017c34 <ShareInit+0xb4>)
 8017bc0:	697b      	ldr	r3, [r7, #20]
 8017bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	f7ff fb14 	bl	80171f4 <json_parse_string>
 8017bcc:	4602      	mov	r2, r0
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	601a      	str	r2, [r3, #0]
		if(value->json_root!=NULL){
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d013      	beq.n	8017c02 <ShareInit+0x82>
//			json_serialize_to_buffer(value->json_root, &ShareMessage, 120);
//			Debug_Message(LOG_INFO, ShareMessage);
//			sprintf(ShareMessage, "load json %s", charts[i]);
//			Debug_Message(LOG_INFO, ShareMessage);
			value->changed = 0;
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	2200      	movs	r2, #0
 8017bde:	605a      	str	r2, [r3, #4]
			e.data = (void*) value;
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	607b      	str	r3, [r7, #4]
			ep = hsearch(e, ENTER);
 8017be4:	2201      	movs	r2, #1
 8017be6:	463b      	mov	r3, r7
 8017be8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017bec:	f000 fa60 	bl	80180b0 <hsearch>
 8017bf0:	60b8      	str	r0, [r7, #8]
			if (ep == NULL) {
 8017bf2:	68bb      	ldr	r3, [r7, #8]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d104      	bne.n	8017c02 <ShareInit+0x82>
				Debug_Message(LOG_FATAL, "Ошибка словаря");
 8017bf8:	490f      	ldr	r1, [pc, #60]	; (8017c38 <ShareInit+0xb8>)
 8017bfa:	2000      	movs	r0, #0
 8017bfc:	f7e9 fada 	bl	80011b4 <Debug_Message>
 8017c00:	e00d      	b.n	8017c1e <ShareInit+0x9e>
	for (size_t i = 0; i < capacity; i++) {
 8017c02:	697b      	ldr	r3, [r7, #20]
 8017c04:	3301      	adds	r3, #1
 8017c06:	617b      	str	r3, [r7, #20]
 8017c08:	697a      	ldr	r2, [r7, #20]
 8017c0a:	693b      	ldr	r3, [r7, #16]
 8017c0c:	429a      	cmp	r2, r3
 8017c0e:	d3cc      	bcc.n	8017baa <ShareInit+0x2a>
				return;
			}
		}
	}
	ReadyShare = 1;
 8017c10:	4b0a      	ldr	r3, [pc, #40]	; (8017c3c <ShareInit+0xbc>)
 8017c12:	2201      	movs	r2, #1
 8017c14:	601a      	str	r2, [r3, #0]
	Debug_Message(LOG_INFO, "Share загружена");
 8017c16:	490a      	ldr	r1, [pc, #40]	; (8017c40 <ShareInit+0xc0>)
 8017c18:	2009      	movs	r0, #9
 8017c1a:	f7e9 facb 	bl	80011b4 <Debug_Message>
}
 8017c1e:	3718      	adds	r7, #24
 8017c20:	46bd      	mov	sp, r7
 8017c22:	bd80      	pop	{r7, pc}
 8017c24:	2400b7f8 	.word	0x2400b7f8
 8017c28:	08017a79 	.word	0x08017a79
 8017c2c:	08017a5d 	.word	0x08017a5d
 8017c30:	24000044 	.word	0x24000044
 8017c34:	24000054 	.word	0x24000054
 8017c38:	0801ea48 	.word	0x0801ea48
 8017c3c:	24000260 	.word	0x24000260
 8017c40:	0801ea64 	.word	0x0801ea64

08017c44 <ShareGetJson>:


JSON_Value* ShareGetJson(char *chart) {
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b086      	sub	sp, #24
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
	JSON_Value *result = NULL;
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	617b      	str	r3, [r7, #20]
	if (osMutexAcquire(ShareMutex, osWaitForever) == osOK) {
 8017c50:	4b12      	ldr	r3, [pc, #72]	; (8017c9c <ShareGetJson+0x58>)
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f7ee fb18 	bl	800628e <osMutexAcquire>
 8017c5e:	4603      	mov	r3, r0
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d115      	bne.n	8017c90 <ShareGetJson+0x4c>
		ENTRY e, *ep;
//		ShareValue *value;
		e.key = chart;
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	60bb      	str	r3, [r7, #8]
		ep = hsearch(e, FIND);
 8017c68:	2200      	movs	r2, #0
 8017c6a:	f107 0308 	add.w	r3, r7, #8
 8017c6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c72:	f000 fa1d 	bl	80180b0 <hsearch>
 8017c76:	6138      	str	r0, [r7, #16]
		if (ep != NULL) {
 8017c78:	693b      	ldr	r3, [r7, #16]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d003      	beq.n	8017c86 <ShareGetJson+0x42>
			result = ((ShareValue*) ep->data)->json_root;
 8017c7e:	693b      	ldr	r3, [r7, #16]
 8017c80:	685b      	ldr	r3, [r3, #4]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	617b      	str	r3, [r7, #20]
		}
		osMutexRelease(ShareMutex);
 8017c86:	4b05      	ldr	r3, [pc, #20]	; (8017c9c <ShareGetJson+0x58>)
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	f7ee fb4a 	bl	8006324 <osMutexRelease>
	}
	return result;
 8017c90:	697b      	ldr	r3, [r7, #20]
}
 8017c92:	4618      	mov	r0, r3
 8017c94:	3718      	adds	r7, #24
 8017c96:	46bd      	mov	sp, r7
 8017c98:	bd80      	pop	{r7, pc}
 8017c9a:	bf00      	nop
 8017c9c:	2400b7f8 	.word	0x2400b7f8

08017ca0 <ShareSetJson>:
void ShareSetJson(char *chart, JSON_Value *rvalue) {
 8017ca0:	b580      	push	{r7, lr}
 8017ca2:	b086      	sub	sp, #24
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	6078      	str	r0, [r7, #4]
 8017ca8:	6039      	str	r1, [r7, #0]
	if (osMutexAcquire(ShareMutex, osWaitForever) == osOK) {
 8017caa:	4b20      	ldr	r3, [pc, #128]	; (8017d2c <ShareSetJson+0x8c>)
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f7ee faeb 	bl	800628e <osMutexAcquire>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d131      	bne.n	8017d22 <ShareSetJson+0x82>
		ENTRY e, *ep;
		ShareValue *value;
		e.key = chart;
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	60bb      	str	r3, [r7, #8]
		ep = hsearch(e, FIND);
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	f107 0308 	add.w	r3, r7, #8
 8017cc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017ccc:	f000 f9f0 	bl	80180b0 <hsearch>
 8017cd0:	6178      	str	r0, [r7, #20]
		if (ep != NULL) {
 8017cd2:	697b      	ldr	r3, [r7, #20]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d01f      	beq.n	8017d18 <ShareSetJson+0x78>
			free(ep->data);
 8017cd8:	697b      	ldr	r3, [r7, #20]
 8017cda:	685b      	ldr	r3, [r3, #4]
 8017cdc:	4618      	mov	r0, r3
 8017cde:	f000 faff 	bl	80182e0 <free>
			value = malloc(sizeof(ShareValue));
 8017ce2:	2008      	movs	r0, #8
 8017ce4:	f000 faf4 	bl	80182d0 <malloc>
 8017ce8:	4603      	mov	r3, r0
 8017cea:	613b      	str	r3, [r7, #16]
			value->changed = 1;
 8017cec:	693b      	ldr	r3, [r7, #16]
 8017cee:	2201      	movs	r2, #1
 8017cf0:	605a      	str	r2, [r3, #4]
			value->json_root = rvalue;
 8017cf2:	693b      	ldr	r3, [r7, #16]
 8017cf4:	683a      	ldr	r2, [r7, #0]
 8017cf6:	601a      	str	r2, [r3, #0]
			e.data = (void*) value;
 8017cf8:	693b      	ldr	r3, [r7, #16]
 8017cfa:	60fb      	str	r3, [r7, #12]
			if (hsearch(e, ENTER) == NULL)
 8017cfc:	2201      	movs	r2, #1
 8017cfe:	f107 0308 	add.w	r3, r7, #8
 8017d02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017d06:	f000 f9d3 	bl	80180b0 <hsearch>
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d103      	bne.n	8017d18 <ShareSetJson+0x78>
				Debug_Message(LOG_FATAL, "Ошибка словаря");
 8017d10:	4907      	ldr	r1, [pc, #28]	; (8017d30 <ShareSetJson+0x90>)
 8017d12:	2000      	movs	r0, #0
 8017d14:	f7e9 fa4e 	bl	80011b4 <Debug_Message>
		}
		osMutexRelease(ShareMutex);
 8017d18:	4b04      	ldr	r3, [pc, #16]	; (8017d2c <ShareSetJson+0x8c>)
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7ee fb01 	bl	8006324 <osMutexRelease>
	}
}
 8017d22:	bf00      	nop
 8017d24:	3718      	adds	r7, #24
 8017d26:	46bd      	mov	sp, r7
 8017d28:	bd80      	pop	{r7, pc}
 8017d2a:	bf00      	nop
 8017d2c:	2400b7f8 	.word	0x2400b7f8
 8017d30:	0801ea48 	.word	0x0801ea48

08017d34 <__sflush_r>:
 8017d34:	898a      	ldrh	r2, [r1, #12]
 8017d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d3a:	4605      	mov	r5, r0
 8017d3c:	0710      	lsls	r0, r2, #28
 8017d3e:	460c      	mov	r4, r1
 8017d40:	d458      	bmi.n	8017df4 <__sflush_r+0xc0>
 8017d42:	684b      	ldr	r3, [r1, #4]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	dc05      	bgt.n	8017d54 <__sflush_r+0x20>
 8017d48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	dc02      	bgt.n	8017d54 <__sflush_r+0x20>
 8017d4e:	2000      	movs	r0, #0
 8017d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d56:	2e00      	cmp	r6, #0
 8017d58:	d0f9      	beq.n	8017d4e <__sflush_r+0x1a>
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017d60:	682f      	ldr	r7, [r5, #0]
 8017d62:	602b      	str	r3, [r5, #0]
 8017d64:	d032      	beq.n	8017dcc <__sflush_r+0x98>
 8017d66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017d68:	89a3      	ldrh	r3, [r4, #12]
 8017d6a:	075a      	lsls	r2, r3, #29
 8017d6c:	d505      	bpl.n	8017d7a <__sflush_r+0x46>
 8017d6e:	6863      	ldr	r3, [r4, #4]
 8017d70:	1ac0      	subs	r0, r0, r3
 8017d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017d74:	b10b      	cbz	r3, 8017d7a <__sflush_r+0x46>
 8017d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017d78:	1ac0      	subs	r0, r0, r3
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	4602      	mov	r2, r0
 8017d7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d80:	6a21      	ldr	r1, [r4, #32]
 8017d82:	4628      	mov	r0, r5
 8017d84:	47b0      	blx	r6
 8017d86:	1c43      	adds	r3, r0, #1
 8017d88:	89a3      	ldrh	r3, [r4, #12]
 8017d8a:	d106      	bne.n	8017d9a <__sflush_r+0x66>
 8017d8c:	6829      	ldr	r1, [r5, #0]
 8017d8e:	291d      	cmp	r1, #29
 8017d90:	d82c      	bhi.n	8017dec <__sflush_r+0xb8>
 8017d92:	4a2a      	ldr	r2, [pc, #168]	; (8017e3c <__sflush_r+0x108>)
 8017d94:	40ca      	lsrs	r2, r1
 8017d96:	07d6      	lsls	r6, r2, #31
 8017d98:	d528      	bpl.n	8017dec <__sflush_r+0xb8>
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	6062      	str	r2, [r4, #4]
 8017d9e:	04d9      	lsls	r1, r3, #19
 8017da0:	6922      	ldr	r2, [r4, #16]
 8017da2:	6022      	str	r2, [r4, #0]
 8017da4:	d504      	bpl.n	8017db0 <__sflush_r+0x7c>
 8017da6:	1c42      	adds	r2, r0, #1
 8017da8:	d101      	bne.n	8017dae <__sflush_r+0x7a>
 8017daa:	682b      	ldr	r3, [r5, #0]
 8017dac:	b903      	cbnz	r3, 8017db0 <__sflush_r+0x7c>
 8017dae:	6560      	str	r0, [r4, #84]	; 0x54
 8017db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017db2:	602f      	str	r7, [r5, #0]
 8017db4:	2900      	cmp	r1, #0
 8017db6:	d0ca      	beq.n	8017d4e <__sflush_r+0x1a>
 8017db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017dbc:	4299      	cmp	r1, r3
 8017dbe:	d002      	beq.n	8017dc6 <__sflush_r+0x92>
 8017dc0:	4628      	mov	r0, r5
 8017dc2:	f000 fad3 	bl	801836c <_free_r>
 8017dc6:	2000      	movs	r0, #0
 8017dc8:	6360      	str	r0, [r4, #52]	; 0x34
 8017dca:	e7c1      	b.n	8017d50 <__sflush_r+0x1c>
 8017dcc:	6a21      	ldr	r1, [r4, #32]
 8017dce:	2301      	movs	r3, #1
 8017dd0:	4628      	mov	r0, r5
 8017dd2:	47b0      	blx	r6
 8017dd4:	1c41      	adds	r1, r0, #1
 8017dd6:	d1c7      	bne.n	8017d68 <__sflush_r+0x34>
 8017dd8:	682b      	ldr	r3, [r5, #0]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d0c4      	beq.n	8017d68 <__sflush_r+0x34>
 8017dde:	2b1d      	cmp	r3, #29
 8017de0:	d001      	beq.n	8017de6 <__sflush_r+0xb2>
 8017de2:	2b16      	cmp	r3, #22
 8017de4:	d101      	bne.n	8017dea <__sflush_r+0xb6>
 8017de6:	602f      	str	r7, [r5, #0]
 8017de8:	e7b1      	b.n	8017d4e <__sflush_r+0x1a>
 8017dea:	89a3      	ldrh	r3, [r4, #12]
 8017dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017df0:	81a3      	strh	r3, [r4, #12]
 8017df2:	e7ad      	b.n	8017d50 <__sflush_r+0x1c>
 8017df4:	690f      	ldr	r7, [r1, #16]
 8017df6:	2f00      	cmp	r7, #0
 8017df8:	d0a9      	beq.n	8017d4e <__sflush_r+0x1a>
 8017dfa:	0793      	lsls	r3, r2, #30
 8017dfc:	680e      	ldr	r6, [r1, #0]
 8017dfe:	bf08      	it	eq
 8017e00:	694b      	ldreq	r3, [r1, #20]
 8017e02:	600f      	str	r7, [r1, #0]
 8017e04:	bf18      	it	ne
 8017e06:	2300      	movne	r3, #0
 8017e08:	eba6 0807 	sub.w	r8, r6, r7
 8017e0c:	608b      	str	r3, [r1, #8]
 8017e0e:	f1b8 0f00 	cmp.w	r8, #0
 8017e12:	dd9c      	ble.n	8017d4e <__sflush_r+0x1a>
 8017e14:	6a21      	ldr	r1, [r4, #32]
 8017e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e18:	4643      	mov	r3, r8
 8017e1a:	463a      	mov	r2, r7
 8017e1c:	4628      	mov	r0, r5
 8017e1e:	47b0      	blx	r6
 8017e20:	2800      	cmp	r0, #0
 8017e22:	dc06      	bgt.n	8017e32 <__sflush_r+0xfe>
 8017e24:	89a3      	ldrh	r3, [r4, #12]
 8017e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e2a:	81a3      	strh	r3, [r4, #12]
 8017e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017e30:	e78e      	b.n	8017d50 <__sflush_r+0x1c>
 8017e32:	4407      	add	r7, r0
 8017e34:	eba8 0800 	sub.w	r8, r8, r0
 8017e38:	e7e9      	b.n	8017e0e <__sflush_r+0xda>
 8017e3a:	bf00      	nop
 8017e3c:	20400001 	.word	0x20400001

08017e40 <_fflush_r>:
 8017e40:	b538      	push	{r3, r4, r5, lr}
 8017e42:	690b      	ldr	r3, [r1, #16]
 8017e44:	4605      	mov	r5, r0
 8017e46:	460c      	mov	r4, r1
 8017e48:	b913      	cbnz	r3, 8017e50 <_fflush_r+0x10>
 8017e4a:	2500      	movs	r5, #0
 8017e4c:	4628      	mov	r0, r5
 8017e4e:	bd38      	pop	{r3, r4, r5, pc}
 8017e50:	b118      	cbz	r0, 8017e5a <_fflush_r+0x1a>
 8017e52:	6983      	ldr	r3, [r0, #24]
 8017e54:	b90b      	cbnz	r3, 8017e5a <_fflush_r+0x1a>
 8017e56:	f000 f887 	bl	8017f68 <__sinit>
 8017e5a:	4b14      	ldr	r3, [pc, #80]	; (8017eac <_fflush_r+0x6c>)
 8017e5c:	429c      	cmp	r4, r3
 8017e5e:	d11b      	bne.n	8017e98 <_fflush_r+0x58>
 8017e60:	686c      	ldr	r4, [r5, #4]
 8017e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d0ef      	beq.n	8017e4a <_fflush_r+0xa>
 8017e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017e6c:	07d0      	lsls	r0, r2, #31
 8017e6e:	d404      	bmi.n	8017e7a <_fflush_r+0x3a>
 8017e70:	0599      	lsls	r1, r3, #22
 8017e72:	d402      	bmi.n	8017e7a <_fflush_r+0x3a>
 8017e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e76:	f000 f9c4 	bl	8018202 <__retarget_lock_acquire_recursive>
 8017e7a:	4628      	mov	r0, r5
 8017e7c:	4621      	mov	r1, r4
 8017e7e:	f7ff ff59 	bl	8017d34 <__sflush_r>
 8017e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017e84:	07da      	lsls	r2, r3, #31
 8017e86:	4605      	mov	r5, r0
 8017e88:	d4e0      	bmi.n	8017e4c <_fflush_r+0xc>
 8017e8a:	89a3      	ldrh	r3, [r4, #12]
 8017e8c:	059b      	lsls	r3, r3, #22
 8017e8e:	d4dd      	bmi.n	8017e4c <_fflush_r+0xc>
 8017e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e92:	f000 f9b7 	bl	8018204 <__retarget_lock_release_recursive>
 8017e96:	e7d9      	b.n	8017e4c <_fflush_r+0xc>
 8017e98:	4b05      	ldr	r3, [pc, #20]	; (8017eb0 <_fflush_r+0x70>)
 8017e9a:	429c      	cmp	r4, r3
 8017e9c:	d101      	bne.n	8017ea2 <_fflush_r+0x62>
 8017e9e:	68ac      	ldr	r4, [r5, #8]
 8017ea0:	e7df      	b.n	8017e62 <_fflush_r+0x22>
 8017ea2:	4b04      	ldr	r3, [pc, #16]	; (8017eb4 <_fflush_r+0x74>)
 8017ea4:	429c      	cmp	r4, r3
 8017ea6:	bf08      	it	eq
 8017ea8:	68ec      	ldreq	r4, [r5, #12]
 8017eaa:	e7da      	b.n	8017e62 <_fflush_r+0x22>
 8017eac:	0801ed58 	.word	0x0801ed58
 8017eb0:	0801ed78 	.word	0x0801ed78
 8017eb4:	0801ed38 	.word	0x0801ed38

08017eb8 <std>:
 8017eb8:	2300      	movs	r3, #0
 8017eba:	b510      	push	{r4, lr}
 8017ebc:	4604      	mov	r4, r0
 8017ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8017ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017ec6:	6083      	str	r3, [r0, #8]
 8017ec8:	8181      	strh	r1, [r0, #12]
 8017eca:	6643      	str	r3, [r0, #100]	; 0x64
 8017ecc:	81c2      	strh	r2, [r0, #14]
 8017ece:	6183      	str	r3, [r0, #24]
 8017ed0:	4619      	mov	r1, r3
 8017ed2:	2208      	movs	r2, #8
 8017ed4:	305c      	adds	r0, #92	; 0x5c
 8017ed6:	f000 fa41 	bl	801835c <memset>
 8017eda:	4b05      	ldr	r3, [pc, #20]	; (8017ef0 <std+0x38>)
 8017edc:	6263      	str	r3, [r4, #36]	; 0x24
 8017ede:	4b05      	ldr	r3, [pc, #20]	; (8017ef4 <std+0x3c>)
 8017ee0:	62a3      	str	r3, [r4, #40]	; 0x28
 8017ee2:	4b05      	ldr	r3, [pc, #20]	; (8017ef8 <std+0x40>)
 8017ee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017ee6:	4b05      	ldr	r3, [pc, #20]	; (8017efc <std+0x44>)
 8017ee8:	6224      	str	r4, [r4, #32]
 8017eea:	6323      	str	r3, [r4, #48]	; 0x30
 8017eec:	bd10      	pop	{r4, pc}
 8017eee:	bf00      	nop
 8017ef0:	080186fd 	.word	0x080186fd
 8017ef4:	08018723 	.word	0x08018723
 8017ef8:	0801875b 	.word	0x0801875b
 8017efc:	0801877f 	.word	0x0801877f

08017f00 <_cleanup_r>:
 8017f00:	4901      	ldr	r1, [pc, #4]	; (8017f08 <_cleanup_r+0x8>)
 8017f02:	f000 b8af 	b.w	8018064 <_fwalk_reent>
 8017f06:	bf00      	nop
 8017f08:	08017e41 	.word	0x08017e41

08017f0c <__sfmoreglue>:
 8017f0c:	b570      	push	{r4, r5, r6, lr}
 8017f0e:	1e4a      	subs	r2, r1, #1
 8017f10:	2568      	movs	r5, #104	; 0x68
 8017f12:	4355      	muls	r5, r2
 8017f14:	460e      	mov	r6, r1
 8017f16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017f1a:	f000 fa77 	bl	801840c <_malloc_r>
 8017f1e:	4604      	mov	r4, r0
 8017f20:	b140      	cbz	r0, 8017f34 <__sfmoreglue+0x28>
 8017f22:	2100      	movs	r1, #0
 8017f24:	e9c0 1600 	strd	r1, r6, [r0]
 8017f28:	300c      	adds	r0, #12
 8017f2a:	60a0      	str	r0, [r4, #8]
 8017f2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017f30:	f000 fa14 	bl	801835c <memset>
 8017f34:	4620      	mov	r0, r4
 8017f36:	bd70      	pop	{r4, r5, r6, pc}

08017f38 <__sfp_lock_acquire>:
 8017f38:	4801      	ldr	r0, [pc, #4]	; (8017f40 <__sfp_lock_acquire+0x8>)
 8017f3a:	f000 b962 	b.w	8018202 <__retarget_lock_acquire_recursive>
 8017f3e:	bf00      	nop
 8017f40:	2400f68c 	.word	0x2400f68c

08017f44 <__sfp_lock_release>:
 8017f44:	4801      	ldr	r0, [pc, #4]	; (8017f4c <__sfp_lock_release+0x8>)
 8017f46:	f000 b95d 	b.w	8018204 <__retarget_lock_release_recursive>
 8017f4a:	bf00      	nop
 8017f4c:	2400f68c 	.word	0x2400f68c

08017f50 <__sinit_lock_acquire>:
 8017f50:	4801      	ldr	r0, [pc, #4]	; (8017f58 <__sinit_lock_acquire+0x8>)
 8017f52:	f000 b956 	b.w	8018202 <__retarget_lock_acquire_recursive>
 8017f56:	bf00      	nop
 8017f58:	2400f687 	.word	0x2400f687

08017f5c <__sinit_lock_release>:
 8017f5c:	4801      	ldr	r0, [pc, #4]	; (8017f64 <__sinit_lock_release+0x8>)
 8017f5e:	f000 b951 	b.w	8018204 <__retarget_lock_release_recursive>
 8017f62:	bf00      	nop
 8017f64:	2400f687 	.word	0x2400f687

08017f68 <__sinit>:
 8017f68:	b510      	push	{r4, lr}
 8017f6a:	4604      	mov	r4, r0
 8017f6c:	f7ff fff0 	bl	8017f50 <__sinit_lock_acquire>
 8017f70:	69a3      	ldr	r3, [r4, #24]
 8017f72:	b11b      	cbz	r3, 8017f7c <__sinit+0x14>
 8017f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f78:	f7ff bff0 	b.w	8017f5c <__sinit_lock_release>
 8017f7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017f80:	6523      	str	r3, [r4, #80]	; 0x50
 8017f82:	4b13      	ldr	r3, [pc, #76]	; (8017fd0 <__sinit+0x68>)
 8017f84:	4a13      	ldr	r2, [pc, #76]	; (8017fd4 <__sinit+0x6c>)
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	62a2      	str	r2, [r4, #40]	; 0x28
 8017f8a:	42a3      	cmp	r3, r4
 8017f8c:	bf04      	itt	eq
 8017f8e:	2301      	moveq	r3, #1
 8017f90:	61a3      	streq	r3, [r4, #24]
 8017f92:	4620      	mov	r0, r4
 8017f94:	f000 f820 	bl	8017fd8 <__sfp>
 8017f98:	6060      	str	r0, [r4, #4]
 8017f9a:	4620      	mov	r0, r4
 8017f9c:	f000 f81c 	bl	8017fd8 <__sfp>
 8017fa0:	60a0      	str	r0, [r4, #8]
 8017fa2:	4620      	mov	r0, r4
 8017fa4:	f000 f818 	bl	8017fd8 <__sfp>
 8017fa8:	2200      	movs	r2, #0
 8017faa:	60e0      	str	r0, [r4, #12]
 8017fac:	2104      	movs	r1, #4
 8017fae:	6860      	ldr	r0, [r4, #4]
 8017fb0:	f7ff ff82 	bl	8017eb8 <std>
 8017fb4:	68a0      	ldr	r0, [r4, #8]
 8017fb6:	2201      	movs	r2, #1
 8017fb8:	2109      	movs	r1, #9
 8017fba:	f7ff ff7d 	bl	8017eb8 <std>
 8017fbe:	68e0      	ldr	r0, [r4, #12]
 8017fc0:	2202      	movs	r2, #2
 8017fc2:	2112      	movs	r1, #18
 8017fc4:	f7ff ff78 	bl	8017eb8 <std>
 8017fc8:	2301      	movs	r3, #1
 8017fca:	61a3      	str	r3, [r4, #24]
 8017fcc:	e7d2      	b.n	8017f74 <__sinit+0xc>
 8017fce:	bf00      	nop
 8017fd0:	0801ed98 	.word	0x0801ed98
 8017fd4:	08017f01 	.word	0x08017f01

08017fd8 <__sfp>:
 8017fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fda:	4607      	mov	r7, r0
 8017fdc:	f7ff ffac 	bl	8017f38 <__sfp_lock_acquire>
 8017fe0:	4b1e      	ldr	r3, [pc, #120]	; (801805c <__sfp+0x84>)
 8017fe2:	681e      	ldr	r6, [r3, #0]
 8017fe4:	69b3      	ldr	r3, [r6, #24]
 8017fe6:	b913      	cbnz	r3, 8017fee <__sfp+0x16>
 8017fe8:	4630      	mov	r0, r6
 8017fea:	f7ff ffbd 	bl	8017f68 <__sinit>
 8017fee:	3648      	adds	r6, #72	; 0x48
 8017ff0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017ff4:	3b01      	subs	r3, #1
 8017ff6:	d503      	bpl.n	8018000 <__sfp+0x28>
 8017ff8:	6833      	ldr	r3, [r6, #0]
 8017ffa:	b30b      	cbz	r3, 8018040 <__sfp+0x68>
 8017ffc:	6836      	ldr	r6, [r6, #0]
 8017ffe:	e7f7      	b.n	8017ff0 <__sfp+0x18>
 8018000:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018004:	b9d5      	cbnz	r5, 801803c <__sfp+0x64>
 8018006:	4b16      	ldr	r3, [pc, #88]	; (8018060 <__sfp+0x88>)
 8018008:	60e3      	str	r3, [r4, #12]
 801800a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801800e:	6665      	str	r5, [r4, #100]	; 0x64
 8018010:	f000 f8f6 	bl	8018200 <__retarget_lock_init_recursive>
 8018014:	f7ff ff96 	bl	8017f44 <__sfp_lock_release>
 8018018:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801801c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018020:	6025      	str	r5, [r4, #0]
 8018022:	61a5      	str	r5, [r4, #24]
 8018024:	2208      	movs	r2, #8
 8018026:	4629      	mov	r1, r5
 8018028:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801802c:	f000 f996 	bl	801835c <memset>
 8018030:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018034:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018038:	4620      	mov	r0, r4
 801803a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801803c:	3468      	adds	r4, #104	; 0x68
 801803e:	e7d9      	b.n	8017ff4 <__sfp+0x1c>
 8018040:	2104      	movs	r1, #4
 8018042:	4638      	mov	r0, r7
 8018044:	f7ff ff62 	bl	8017f0c <__sfmoreglue>
 8018048:	4604      	mov	r4, r0
 801804a:	6030      	str	r0, [r6, #0]
 801804c:	2800      	cmp	r0, #0
 801804e:	d1d5      	bne.n	8017ffc <__sfp+0x24>
 8018050:	f7ff ff78 	bl	8017f44 <__sfp_lock_release>
 8018054:	230c      	movs	r3, #12
 8018056:	603b      	str	r3, [r7, #0]
 8018058:	e7ee      	b.n	8018038 <__sfp+0x60>
 801805a:	bf00      	nop
 801805c:	0801ed98 	.word	0x0801ed98
 8018060:	ffff0001 	.word	0xffff0001

08018064 <_fwalk_reent>:
 8018064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018068:	4606      	mov	r6, r0
 801806a:	4688      	mov	r8, r1
 801806c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018070:	2700      	movs	r7, #0
 8018072:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018076:	f1b9 0901 	subs.w	r9, r9, #1
 801807a:	d505      	bpl.n	8018088 <_fwalk_reent+0x24>
 801807c:	6824      	ldr	r4, [r4, #0]
 801807e:	2c00      	cmp	r4, #0
 8018080:	d1f7      	bne.n	8018072 <_fwalk_reent+0xe>
 8018082:	4638      	mov	r0, r7
 8018084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018088:	89ab      	ldrh	r3, [r5, #12]
 801808a:	2b01      	cmp	r3, #1
 801808c:	d907      	bls.n	801809e <_fwalk_reent+0x3a>
 801808e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018092:	3301      	adds	r3, #1
 8018094:	d003      	beq.n	801809e <_fwalk_reent+0x3a>
 8018096:	4629      	mov	r1, r5
 8018098:	4630      	mov	r0, r6
 801809a:	47c0      	blx	r8
 801809c:	4307      	orrs	r7, r0
 801809e:	3568      	adds	r5, #104	; 0x68
 80180a0:	e7e9      	b.n	8018076 <_fwalk_reent+0x12>
	...

080180a4 <hcreate>:
 80180a4:	4901      	ldr	r1, [pc, #4]	; (80180ac <hcreate+0x8>)
 80180a6:	f000 b815 	b.w	80180d4 <hcreate_r>
 80180aa:	bf00      	nop
 80180ac:	2400b8fc 	.word	0x2400b8fc

080180b0 <hsearch>:
 80180b0:	b510      	push	{r4, lr}
 80180b2:	b086      	sub	sp, #24
 80180b4:	ac02      	add	r4, sp, #8
 80180b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80180ba:	4b05      	ldr	r3, [pc, #20]	; (80180d0 <hsearch+0x20>)
 80180bc:	9300      	str	r3, [sp, #0]
 80180be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80180c2:	ab05      	add	r3, sp, #20
 80180c4:	f000 f838 	bl	8018138 <hsearch_r>
 80180c8:	9805      	ldr	r0, [sp, #20]
 80180ca:	b006      	add	sp, #24
 80180cc:	bd10      	pop	{r4, pc}
 80180ce:	bf00      	nop
 80180d0:	2400b8fc 	.word	0x2400b8fc

080180d4 <hcreate_r>:
 80180d4:	b538      	push	{r3, r4, r5, lr}
 80180d6:	680b      	ldr	r3, [r1, #0]
 80180d8:	460d      	mov	r5, r1
 80180da:	b12b      	cbz	r3, 80180e8 <hcreate_r+0x14>
 80180dc:	f001 faf4 	bl	80196c8 <__errno>
 80180e0:	2316      	movs	r3, #22
 80180e2:	6003      	str	r3, [r0, #0]
 80180e4:	2000      	movs	r0, #0
 80180e6:	bd38      	pop	{r3, r4, r5, pc}
 80180e8:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 80180ec:	bf28      	it	cs
 80180ee:	f04f 6080 	movcs.w	r0, #67108864	; 0x4000000
 80180f2:	2810      	cmp	r0, #16
 80180f4:	bf38      	it	cc
 80180f6:	2010      	movcc	r0, #16
 80180f8:	1e42      	subs	r2, r0, #1
 80180fa:	4202      	tst	r2, r0
 80180fc:	d005      	beq.n	801810a <hcreate_r+0x36>
 80180fe:	0840      	lsrs	r0, r0, #1
 8018100:	f103 0301 	add.w	r3, r3, #1
 8018104:	d1fb      	bne.n	80180fe <hcreate_r+0x2a>
 8018106:	2001      	movs	r0, #1
 8018108:	4098      	lsls	r0, r3
 801810a:	6068      	str	r0, [r5, #4]
 801810c:	0080      	lsls	r0, r0, #2
 801810e:	f000 f8df 	bl	80182d0 <malloc>
 8018112:	4604      	mov	r4, r0
 8018114:	6028      	str	r0, [r5, #0]
 8018116:	b138      	cbz	r0, 8018128 <hcreate_r+0x54>
 8018118:	686b      	ldr	r3, [r5, #4]
 801811a:	2200      	movs	r2, #0
 801811c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8018120:	42a3      	cmp	r3, r4
 8018122:	d105      	bne.n	8018130 <hcreate_r+0x5c>
 8018124:	2001      	movs	r0, #1
 8018126:	e7de      	b.n	80180e6 <hcreate_r+0x12>
 8018128:	f001 face 	bl	80196c8 <__errno>
 801812c:	230c      	movs	r3, #12
 801812e:	e7d8      	b.n	80180e2 <hcreate_r+0xe>
 8018130:	f844 2b04 	str.w	r2, [r4], #4
 8018134:	e7f4      	b.n	8018120 <hcreate_r+0x4c>
	...

08018138 <hsearch_r>:
 8018138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801813c:	ac02      	add	r4, sp, #8
 801813e:	e904 0003 	stmdb	r4, {r0, r1}
 8018142:	f8dd 8000 	ldr.w	r8, [sp]
 8018146:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018148:	4640      	mov	r0, r8
 801814a:	4691      	mov	r9, r2
 801814c:	461e      	mov	r6, r3
 801814e:	f7e8 f8d1 	bl	80002f4 <strlen>
 8018152:	4b18      	ldr	r3, [pc, #96]	; (80181b4 <hsearch_r+0x7c>)
 8018154:	4601      	mov	r1, r0
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	4640      	mov	r0, r8
 801815a:	4798      	blx	r3
 801815c:	686b      	ldr	r3, [r5, #4]
 801815e:	682f      	ldr	r7, [r5, #0]
 8018160:	3b01      	subs	r3, #1
 8018162:	ea03 0400 	and.w	r4, r3, r0
 8018166:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801816a:	b99d      	cbnz	r5, 8018194 <hsearch_r+0x5c>
 801816c:	f1b9 0f00 	cmp.w	r9, #0
 8018170:	d017      	beq.n	80181a2 <hsearch_r+0x6a>
 8018172:	200c      	movs	r0, #12
 8018174:	f000 f8ac 	bl	80182d0 <malloc>
 8018178:	b198      	cbz	r0, 80181a2 <hsearch_r+0x6a>
 801817a:	9b01      	ldr	r3, [sp, #4]
 801817c:	6083      	str	r3, [r0, #8]
 801817e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8018182:	f8c0 8004 	str.w	r8, [r0, #4]
 8018186:	6003      	str	r3, [r0, #0]
 8018188:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 801818c:	3004      	adds	r0, #4
 801818e:	6030      	str	r0, [r6, #0]
 8018190:	2001      	movs	r0, #1
 8018192:	e008      	b.n	80181a6 <hsearch_r+0x6e>
 8018194:	6868      	ldr	r0, [r5, #4]
 8018196:	4641      	mov	r1, r8
 8018198:	f7e8 f8a2 	bl	80002e0 <strcmp>
 801819c:	b130      	cbz	r0, 80181ac <hsearch_r+0x74>
 801819e:	682d      	ldr	r5, [r5, #0]
 80181a0:	e7e3      	b.n	801816a <hsearch_r+0x32>
 80181a2:	2000      	movs	r0, #0
 80181a4:	6030      	str	r0, [r6, #0]
 80181a6:	b003      	add	sp, #12
 80181a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181ac:	3504      	adds	r5, #4
 80181ae:	6035      	str	r5, [r6, #0]
 80181b0:	e7ee      	b.n	8018190 <hsearch_r+0x58>
 80181b2:	bf00      	nop
 80181b4:	240000c8 	.word	0x240000c8

080181b8 <__libc_init_array>:
 80181b8:	b570      	push	{r4, r5, r6, lr}
 80181ba:	4d0d      	ldr	r5, [pc, #52]	; (80181f0 <__libc_init_array+0x38>)
 80181bc:	4c0d      	ldr	r4, [pc, #52]	; (80181f4 <__libc_init_array+0x3c>)
 80181be:	1b64      	subs	r4, r4, r5
 80181c0:	10a4      	asrs	r4, r4, #2
 80181c2:	2600      	movs	r6, #0
 80181c4:	42a6      	cmp	r6, r4
 80181c6:	d109      	bne.n	80181dc <__libc_init_array+0x24>
 80181c8:	4d0b      	ldr	r5, [pc, #44]	; (80181f8 <__libc_init_array+0x40>)
 80181ca:	4c0c      	ldr	r4, [pc, #48]	; (80181fc <__libc_init_array+0x44>)
 80181cc:	f003 fc68 	bl	801baa0 <_init>
 80181d0:	1b64      	subs	r4, r4, r5
 80181d2:	10a4      	asrs	r4, r4, #2
 80181d4:	2600      	movs	r6, #0
 80181d6:	42a6      	cmp	r6, r4
 80181d8:	d105      	bne.n	80181e6 <__libc_init_array+0x2e>
 80181da:	bd70      	pop	{r4, r5, r6, pc}
 80181dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80181e0:	4798      	blx	r3
 80181e2:	3601      	adds	r6, #1
 80181e4:	e7ee      	b.n	80181c4 <__libc_init_array+0xc>
 80181e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80181ea:	4798      	blx	r3
 80181ec:	3601      	adds	r6, #1
 80181ee:	e7f2      	b.n	80181d6 <__libc_init_array+0x1e>
 80181f0:	0801f0ec 	.word	0x0801f0ec
 80181f4:	0801f0ec 	.word	0x0801f0ec
 80181f8:	0801f0ec 	.word	0x0801f0ec
 80181fc:	0801f0f0 	.word	0x0801f0f0

08018200 <__retarget_lock_init_recursive>:
 8018200:	4770      	bx	lr

08018202 <__retarget_lock_acquire_recursive>:
 8018202:	4770      	bx	lr

08018204 <__retarget_lock_release_recursive>:
 8018204:	4770      	bx	lr

08018206 <__swhatbuf_r>:
 8018206:	b570      	push	{r4, r5, r6, lr}
 8018208:	460e      	mov	r6, r1
 801820a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801820e:	2900      	cmp	r1, #0
 8018210:	b096      	sub	sp, #88	; 0x58
 8018212:	4614      	mov	r4, r2
 8018214:	461d      	mov	r5, r3
 8018216:	da07      	bge.n	8018228 <__swhatbuf_r+0x22>
 8018218:	2300      	movs	r3, #0
 801821a:	602b      	str	r3, [r5, #0]
 801821c:	89b3      	ldrh	r3, [r6, #12]
 801821e:	061a      	lsls	r2, r3, #24
 8018220:	d410      	bmi.n	8018244 <__swhatbuf_r+0x3e>
 8018222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018226:	e00e      	b.n	8018246 <__swhatbuf_r+0x40>
 8018228:	466a      	mov	r2, sp
 801822a:	f001 fa65 	bl	80196f8 <_fstat_r>
 801822e:	2800      	cmp	r0, #0
 8018230:	dbf2      	blt.n	8018218 <__swhatbuf_r+0x12>
 8018232:	9a01      	ldr	r2, [sp, #4]
 8018234:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018238:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801823c:	425a      	negs	r2, r3
 801823e:	415a      	adcs	r2, r3
 8018240:	602a      	str	r2, [r5, #0]
 8018242:	e7ee      	b.n	8018222 <__swhatbuf_r+0x1c>
 8018244:	2340      	movs	r3, #64	; 0x40
 8018246:	2000      	movs	r0, #0
 8018248:	6023      	str	r3, [r4, #0]
 801824a:	b016      	add	sp, #88	; 0x58
 801824c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018250 <__smakebuf_r>:
 8018250:	898b      	ldrh	r3, [r1, #12]
 8018252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018254:	079d      	lsls	r5, r3, #30
 8018256:	4606      	mov	r6, r0
 8018258:	460c      	mov	r4, r1
 801825a:	d507      	bpl.n	801826c <__smakebuf_r+0x1c>
 801825c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018260:	6023      	str	r3, [r4, #0]
 8018262:	6123      	str	r3, [r4, #16]
 8018264:	2301      	movs	r3, #1
 8018266:	6163      	str	r3, [r4, #20]
 8018268:	b002      	add	sp, #8
 801826a:	bd70      	pop	{r4, r5, r6, pc}
 801826c:	ab01      	add	r3, sp, #4
 801826e:	466a      	mov	r2, sp
 8018270:	f7ff ffc9 	bl	8018206 <__swhatbuf_r>
 8018274:	9900      	ldr	r1, [sp, #0]
 8018276:	4605      	mov	r5, r0
 8018278:	4630      	mov	r0, r6
 801827a:	f000 f8c7 	bl	801840c <_malloc_r>
 801827e:	b948      	cbnz	r0, 8018294 <__smakebuf_r+0x44>
 8018280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018284:	059a      	lsls	r2, r3, #22
 8018286:	d4ef      	bmi.n	8018268 <__smakebuf_r+0x18>
 8018288:	f023 0303 	bic.w	r3, r3, #3
 801828c:	f043 0302 	orr.w	r3, r3, #2
 8018290:	81a3      	strh	r3, [r4, #12]
 8018292:	e7e3      	b.n	801825c <__smakebuf_r+0xc>
 8018294:	4b0d      	ldr	r3, [pc, #52]	; (80182cc <__smakebuf_r+0x7c>)
 8018296:	62b3      	str	r3, [r6, #40]	; 0x28
 8018298:	89a3      	ldrh	r3, [r4, #12]
 801829a:	6020      	str	r0, [r4, #0]
 801829c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80182a0:	81a3      	strh	r3, [r4, #12]
 80182a2:	9b00      	ldr	r3, [sp, #0]
 80182a4:	6163      	str	r3, [r4, #20]
 80182a6:	9b01      	ldr	r3, [sp, #4]
 80182a8:	6120      	str	r0, [r4, #16]
 80182aa:	b15b      	cbz	r3, 80182c4 <__smakebuf_r+0x74>
 80182ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182b0:	4630      	mov	r0, r6
 80182b2:	f001 fdf1 	bl	8019e98 <_isatty_r>
 80182b6:	b128      	cbz	r0, 80182c4 <__smakebuf_r+0x74>
 80182b8:	89a3      	ldrh	r3, [r4, #12]
 80182ba:	f023 0303 	bic.w	r3, r3, #3
 80182be:	f043 0301 	orr.w	r3, r3, #1
 80182c2:	81a3      	strh	r3, [r4, #12]
 80182c4:	89a0      	ldrh	r0, [r4, #12]
 80182c6:	4305      	orrs	r5, r0
 80182c8:	81a5      	strh	r5, [r4, #12]
 80182ca:	e7cd      	b.n	8018268 <__smakebuf_r+0x18>
 80182cc:	08017f01 	.word	0x08017f01

080182d0 <malloc>:
 80182d0:	4b02      	ldr	r3, [pc, #8]	; (80182dc <malloc+0xc>)
 80182d2:	4601      	mov	r1, r0
 80182d4:	6818      	ldr	r0, [r3, #0]
 80182d6:	f000 b899 	b.w	801840c <_malloc_r>
 80182da:	bf00      	nop
 80182dc:	24000064 	.word	0x24000064

080182e0 <free>:
 80182e0:	4b02      	ldr	r3, [pc, #8]	; (80182ec <free+0xc>)
 80182e2:	4601      	mov	r1, r0
 80182e4:	6818      	ldr	r0, [r3, #0]
 80182e6:	f000 b841 	b.w	801836c <_free_r>
 80182ea:	bf00      	nop
 80182ec:	24000064 	.word	0x24000064

080182f0 <memcmp>:
 80182f0:	b530      	push	{r4, r5, lr}
 80182f2:	3901      	subs	r1, #1
 80182f4:	2400      	movs	r4, #0
 80182f6:	42a2      	cmp	r2, r4
 80182f8:	d101      	bne.n	80182fe <memcmp+0xe>
 80182fa:	2000      	movs	r0, #0
 80182fc:	e005      	b.n	801830a <memcmp+0x1a>
 80182fe:	5d03      	ldrb	r3, [r0, r4]
 8018300:	3401      	adds	r4, #1
 8018302:	5d0d      	ldrb	r5, [r1, r4]
 8018304:	42ab      	cmp	r3, r5
 8018306:	d0f6      	beq.n	80182f6 <memcmp+0x6>
 8018308:	1b58      	subs	r0, r3, r5
 801830a:	bd30      	pop	{r4, r5, pc}

0801830c <memcpy>:
 801830c:	440a      	add	r2, r1
 801830e:	4291      	cmp	r1, r2
 8018310:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018314:	d100      	bne.n	8018318 <memcpy+0xc>
 8018316:	4770      	bx	lr
 8018318:	b510      	push	{r4, lr}
 801831a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801831e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018322:	4291      	cmp	r1, r2
 8018324:	d1f9      	bne.n	801831a <memcpy+0xe>
 8018326:	bd10      	pop	{r4, pc}

08018328 <memmove>:
 8018328:	4288      	cmp	r0, r1
 801832a:	b510      	push	{r4, lr}
 801832c:	eb01 0402 	add.w	r4, r1, r2
 8018330:	d902      	bls.n	8018338 <memmove+0x10>
 8018332:	4284      	cmp	r4, r0
 8018334:	4623      	mov	r3, r4
 8018336:	d807      	bhi.n	8018348 <memmove+0x20>
 8018338:	1e43      	subs	r3, r0, #1
 801833a:	42a1      	cmp	r1, r4
 801833c:	d008      	beq.n	8018350 <memmove+0x28>
 801833e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018342:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018346:	e7f8      	b.n	801833a <memmove+0x12>
 8018348:	4402      	add	r2, r0
 801834a:	4601      	mov	r1, r0
 801834c:	428a      	cmp	r2, r1
 801834e:	d100      	bne.n	8018352 <memmove+0x2a>
 8018350:	bd10      	pop	{r4, pc}
 8018352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801835a:	e7f7      	b.n	801834c <memmove+0x24>

0801835c <memset>:
 801835c:	4402      	add	r2, r0
 801835e:	4603      	mov	r3, r0
 8018360:	4293      	cmp	r3, r2
 8018362:	d100      	bne.n	8018366 <memset+0xa>
 8018364:	4770      	bx	lr
 8018366:	f803 1b01 	strb.w	r1, [r3], #1
 801836a:	e7f9      	b.n	8018360 <memset+0x4>

0801836c <_free_r>:
 801836c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801836e:	2900      	cmp	r1, #0
 8018370:	d048      	beq.n	8018404 <_free_r+0x98>
 8018372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018376:	9001      	str	r0, [sp, #4]
 8018378:	2b00      	cmp	r3, #0
 801837a:	f1a1 0404 	sub.w	r4, r1, #4
 801837e:	bfb8      	it	lt
 8018380:	18e4      	addlt	r4, r4, r3
 8018382:	f001 fdbd 	bl	8019f00 <__malloc_lock>
 8018386:	4a20      	ldr	r2, [pc, #128]	; (8018408 <_free_r+0x9c>)
 8018388:	9801      	ldr	r0, [sp, #4]
 801838a:	6813      	ldr	r3, [r2, #0]
 801838c:	4615      	mov	r5, r2
 801838e:	b933      	cbnz	r3, 801839e <_free_r+0x32>
 8018390:	6063      	str	r3, [r4, #4]
 8018392:	6014      	str	r4, [r2, #0]
 8018394:	b003      	add	sp, #12
 8018396:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801839a:	f001 bdb7 	b.w	8019f0c <__malloc_unlock>
 801839e:	42a3      	cmp	r3, r4
 80183a0:	d90b      	bls.n	80183ba <_free_r+0x4e>
 80183a2:	6821      	ldr	r1, [r4, #0]
 80183a4:	1862      	adds	r2, r4, r1
 80183a6:	4293      	cmp	r3, r2
 80183a8:	bf04      	itt	eq
 80183aa:	681a      	ldreq	r2, [r3, #0]
 80183ac:	685b      	ldreq	r3, [r3, #4]
 80183ae:	6063      	str	r3, [r4, #4]
 80183b0:	bf04      	itt	eq
 80183b2:	1852      	addeq	r2, r2, r1
 80183b4:	6022      	streq	r2, [r4, #0]
 80183b6:	602c      	str	r4, [r5, #0]
 80183b8:	e7ec      	b.n	8018394 <_free_r+0x28>
 80183ba:	461a      	mov	r2, r3
 80183bc:	685b      	ldr	r3, [r3, #4]
 80183be:	b10b      	cbz	r3, 80183c4 <_free_r+0x58>
 80183c0:	42a3      	cmp	r3, r4
 80183c2:	d9fa      	bls.n	80183ba <_free_r+0x4e>
 80183c4:	6811      	ldr	r1, [r2, #0]
 80183c6:	1855      	adds	r5, r2, r1
 80183c8:	42a5      	cmp	r5, r4
 80183ca:	d10b      	bne.n	80183e4 <_free_r+0x78>
 80183cc:	6824      	ldr	r4, [r4, #0]
 80183ce:	4421      	add	r1, r4
 80183d0:	1854      	adds	r4, r2, r1
 80183d2:	42a3      	cmp	r3, r4
 80183d4:	6011      	str	r1, [r2, #0]
 80183d6:	d1dd      	bne.n	8018394 <_free_r+0x28>
 80183d8:	681c      	ldr	r4, [r3, #0]
 80183da:	685b      	ldr	r3, [r3, #4]
 80183dc:	6053      	str	r3, [r2, #4]
 80183de:	4421      	add	r1, r4
 80183e0:	6011      	str	r1, [r2, #0]
 80183e2:	e7d7      	b.n	8018394 <_free_r+0x28>
 80183e4:	d902      	bls.n	80183ec <_free_r+0x80>
 80183e6:	230c      	movs	r3, #12
 80183e8:	6003      	str	r3, [r0, #0]
 80183ea:	e7d3      	b.n	8018394 <_free_r+0x28>
 80183ec:	6825      	ldr	r5, [r4, #0]
 80183ee:	1961      	adds	r1, r4, r5
 80183f0:	428b      	cmp	r3, r1
 80183f2:	bf04      	itt	eq
 80183f4:	6819      	ldreq	r1, [r3, #0]
 80183f6:	685b      	ldreq	r3, [r3, #4]
 80183f8:	6063      	str	r3, [r4, #4]
 80183fa:	bf04      	itt	eq
 80183fc:	1949      	addeq	r1, r1, r5
 80183fe:	6021      	streq	r1, [r4, #0]
 8018400:	6054      	str	r4, [r2, #4]
 8018402:	e7c7      	b.n	8018394 <_free_r+0x28>
 8018404:	b003      	add	sp, #12
 8018406:	bd30      	pop	{r4, r5, pc}
 8018408:	2400b904 	.word	0x2400b904

0801840c <_malloc_r>:
 801840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801840e:	1ccd      	adds	r5, r1, #3
 8018410:	f025 0503 	bic.w	r5, r5, #3
 8018414:	3508      	adds	r5, #8
 8018416:	2d0c      	cmp	r5, #12
 8018418:	bf38      	it	cc
 801841a:	250c      	movcc	r5, #12
 801841c:	2d00      	cmp	r5, #0
 801841e:	4606      	mov	r6, r0
 8018420:	db01      	blt.n	8018426 <_malloc_r+0x1a>
 8018422:	42a9      	cmp	r1, r5
 8018424:	d903      	bls.n	801842e <_malloc_r+0x22>
 8018426:	230c      	movs	r3, #12
 8018428:	6033      	str	r3, [r6, #0]
 801842a:	2000      	movs	r0, #0
 801842c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801842e:	f001 fd67 	bl	8019f00 <__malloc_lock>
 8018432:	4921      	ldr	r1, [pc, #132]	; (80184b8 <_malloc_r+0xac>)
 8018434:	680a      	ldr	r2, [r1, #0]
 8018436:	4614      	mov	r4, r2
 8018438:	b99c      	cbnz	r4, 8018462 <_malloc_r+0x56>
 801843a:	4f20      	ldr	r7, [pc, #128]	; (80184bc <_malloc_r+0xb0>)
 801843c:	683b      	ldr	r3, [r7, #0]
 801843e:	b923      	cbnz	r3, 801844a <_malloc_r+0x3e>
 8018440:	4621      	mov	r1, r4
 8018442:	4630      	mov	r0, r6
 8018444:	f000 f8fe 	bl	8018644 <_sbrk_r>
 8018448:	6038      	str	r0, [r7, #0]
 801844a:	4629      	mov	r1, r5
 801844c:	4630      	mov	r0, r6
 801844e:	f000 f8f9 	bl	8018644 <_sbrk_r>
 8018452:	1c43      	adds	r3, r0, #1
 8018454:	d123      	bne.n	801849e <_malloc_r+0x92>
 8018456:	230c      	movs	r3, #12
 8018458:	6033      	str	r3, [r6, #0]
 801845a:	4630      	mov	r0, r6
 801845c:	f001 fd56 	bl	8019f0c <__malloc_unlock>
 8018460:	e7e3      	b.n	801842a <_malloc_r+0x1e>
 8018462:	6823      	ldr	r3, [r4, #0]
 8018464:	1b5b      	subs	r3, r3, r5
 8018466:	d417      	bmi.n	8018498 <_malloc_r+0x8c>
 8018468:	2b0b      	cmp	r3, #11
 801846a:	d903      	bls.n	8018474 <_malloc_r+0x68>
 801846c:	6023      	str	r3, [r4, #0]
 801846e:	441c      	add	r4, r3
 8018470:	6025      	str	r5, [r4, #0]
 8018472:	e004      	b.n	801847e <_malloc_r+0x72>
 8018474:	6863      	ldr	r3, [r4, #4]
 8018476:	42a2      	cmp	r2, r4
 8018478:	bf0c      	ite	eq
 801847a:	600b      	streq	r3, [r1, #0]
 801847c:	6053      	strne	r3, [r2, #4]
 801847e:	4630      	mov	r0, r6
 8018480:	f001 fd44 	bl	8019f0c <__malloc_unlock>
 8018484:	f104 000b 	add.w	r0, r4, #11
 8018488:	1d23      	adds	r3, r4, #4
 801848a:	f020 0007 	bic.w	r0, r0, #7
 801848e:	1ac2      	subs	r2, r0, r3
 8018490:	d0cc      	beq.n	801842c <_malloc_r+0x20>
 8018492:	1a1b      	subs	r3, r3, r0
 8018494:	50a3      	str	r3, [r4, r2]
 8018496:	e7c9      	b.n	801842c <_malloc_r+0x20>
 8018498:	4622      	mov	r2, r4
 801849a:	6864      	ldr	r4, [r4, #4]
 801849c:	e7cc      	b.n	8018438 <_malloc_r+0x2c>
 801849e:	1cc4      	adds	r4, r0, #3
 80184a0:	f024 0403 	bic.w	r4, r4, #3
 80184a4:	42a0      	cmp	r0, r4
 80184a6:	d0e3      	beq.n	8018470 <_malloc_r+0x64>
 80184a8:	1a21      	subs	r1, r4, r0
 80184aa:	4630      	mov	r0, r6
 80184ac:	f000 f8ca 	bl	8018644 <_sbrk_r>
 80184b0:	3001      	adds	r0, #1
 80184b2:	d1dd      	bne.n	8018470 <_malloc_r+0x64>
 80184b4:	e7cf      	b.n	8018456 <_malloc_r+0x4a>
 80184b6:	bf00      	nop
 80184b8:	2400b904 	.word	0x2400b904
 80184bc:	2400b908 	.word	0x2400b908

080184c0 <iprintf>:
 80184c0:	b40f      	push	{r0, r1, r2, r3}
 80184c2:	4b0a      	ldr	r3, [pc, #40]	; (80184ec <iprintf+0x2c>)
 80184c4:	b513      	push	{r0, r1, r4, lr}
 80184c6:	681c      	ldr	r4, [r3, #0]
 80184c8:	b124      	cbz	r4, 80184d4 <iprintf+0x14>
 80184ca:	69a3      	ldr	r3, [r4, #24]
 80184cc:	b913      	cbnz	r3, 80184d4 <iprintf+0x14>
 80184ce:	4620      	mov	r0, r4
 80184d0:	f7ff fd4a 	bl	8017f68 <__sinit>
 80184d4:	ab05      	add	r3, sp, #20
 80184d6:	9a04      	ldr	r2, [sp, #16]
 80184d8:	68a1      	ldr	r1, [r4, #8]
 80184da:	9301      	str	r3, [sp, #4]
 80184dc:	4620      	mov	r0, r4
 80184de:	f002 fd3d 	bl	801af5c <_vfiprintf_r>
 80184e2:	b002      	add	sp, #8
 80184e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184e8:	b004      	add	sp, #16
 80184ea:	4770      	bx	lr
 80184ec:	24000064 	.word	0x24000064

080184f0 <rand>:
 80184f0:	4b17      	ldr	r3, [pc, #92]	; (8018550 <rand+0x60>)
 80184f2:	b510      	push	{r4, lr}
 80184f4:	681c      	ldr	r4, [r3, #0]
 80184f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80184f8:	b9b3      	cbnz	r3, 8018528 <rand+0x38>
 80184fa:	2018      	movs	r0, #24
 80184fc:	f7ff fee8 	bl	80182d0 <malloc>
 8018500:	63a0      	str	r0, [r4, #56]	; 0x38
 8018502:	b928      	cbnz	r0, 8018510 <rand+0x20>
 8018504:	4602      	mov	r2, r0
 8018506:	4b13      	ldr	r3, [pc, #76]	; (8018554 <rand+0x64>)
 8018508:	4813      	ldr	r0, [pc, #76]	; (8018558 <rand+0x68>)
 801850a:	214e      	movs	r1, #78	; 0x4e
 801850c:	f001 f8ae 	bl	801966c <__assert_func>
 8018510:	4a12      	ldr	r2, [pc, #72]	; (801855c <rand+0x6c>)
 8018512:	4b13      	ldr	r3, [pc, #76]	; (8018560 <rand+0x70>)
 8018514:	e9c0 2300 	strd	r2, r3, [r0]
 8018518:	4b12      	ldr	r3, [pc, #72]	; (8018564 <rand+0x74>)
 801851a:	6083      	str	r3, [r0, #8]
 801851c:	230b      	movs	r3, #11
 801851e:	8183      	strh	r3, [r0, #12]
 8018520:	2201      	movs	r2, #1
 8018522:	2300      	movs	r3, #0
 8018524:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018528:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801852a:	480f      	ldr	r0, [pc, #60]	; (8018568 <rand+0x78>)
 801852c:	690a      	ldr	r2, [r1, #16]
 801852e:	694b      	ldr	r3, [r1, #20]
 8018530:	4c0e      	ldr	r4, [pc, #56]	; (801856c <rand+0x7c>)
 8018532:	4350      	muls	r0, r2
 8018534:	fb04 0003 	mla	r0, r4, r3, r0
 8018538:	fba2 3404 	umull	r3, r4, r2, r4
 801853c:	1c5a      	adds	r2, r3, #1
 801853e:	4404      	add	r4, r0
 8018540:	f144 0000 	adc.w	r0, r4, #0
 8018544:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018548:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801854c:	bd10      	pop	{r4, pc}
 801854e:	bf00      	nop
 8018550:	24000064 	.word	0x24000064
 8018554:	0801ed9c 	.word	0x0801ed9c
 8018558:	0801edb3 	.word	0x0801edb3
 801855c:	abcd330e 	.word	0xabcd330e
 8018560:	e66d1234 	.word	0xe66d1234
 8018564:	0005deec 	.word	0x0005deec
 8018568:	5851f42d 	.word	0x5851f42d
 801856c:	4c957f2d 	.word	0x4c957f2d

08018570 <cleanup_glue>:
 8018570:	b538      	push	{r3, r4, r5, lr}
 8018572:	460c      	mov	r4, r1
 8018574:	6809      	ldr	r1, [r1, #0]
 8018576:	4605      	mov	r5, r0
 8018578:	b109      	cbz	r1, 801857e <cleanup_glue+0xe>
 801857a:	f7ff fff9 	bl	8018570 <cleanup_glue>
 801857e:	4621      	mov	r1, r4
 8018580:	4628      	mov	r0, r5
 8018582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018586:	f7ff bef1 	b.w	801836c <_free_r>
	...

0801858c <_reclaim_reent>:
 801858c:	4b2c      	ldr	r3, [pc, #176]	; (8018640 <_reclaim_reent+0xb4>)
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	4283      	cmp	r3, r0
 8018592:	b570      	push	{r4, r5, r6, lr}
 8018594:	4604      	mov	r4, r0
 8018596:	d051      	beq.n	801863c <_reclaim_reent+0xb0>
 8018598:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801859a:	b143      	cbz	r3, 80185ae <_reclaim_reent+0x22>
 801859c:	68db      	ldr	r3, [r3, #12]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d14a      	bne.n	8018638 <_reclaim_reent+0xac>
 80185a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80185a4:	6819      	ldr	r1, [r3, #0]
 80185a6:	b111      	cbz	r1, 80185ae <_reclaim_reent+0x22>
 80185a8:	4620      	mov	r0, r4
 80185aa:	f7ff fedf 	bl	801836c <_free_r>
 80185ae:	6961      	ldr	r1, [r4, #20]
 80185b0:	b111      	cbz	r1, 80185b8 <_reclaim_reent+0x2c>
 80185b2:	4620      	mov	r0, r4
 80185b4:	f7ff feda 	bl	801836c <_free_r>
 80185b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80185ba:	b111      	cbz	r1, 80185c2 <_reclaim_reent+0x36>
 80185bc:	4620      	mov	r0, r4
 80185be:	f7ff fed5 	bl	801836c <_free_r>
 80185c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80185c4:	b111      	cbz	r1, 80185cc <_reclaim_reent+0x40>
 80185c6:	4620      	mov	r0, r4
 80185c8:	f7ff fed0 	bl	801836c <_free_r>
 80185cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80185ce:	b111      	cbz	r1, 80185d6 <_reclaim_reent+0x4a>
 80185d0:	4620      	mov	r0, r4
 80185d2:	f7ff fecb 	bl	801836c <_free_r>
 80185d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80185d8:	b111      	cbz	r1, 80185e0 <_reclaim_reent+0x54>
 80185da:	4620      	mov	r0, r4
 80185dc:	f7ff fec6 	bl	801836c <_free_r>
 80185e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80185e2:	b111      	cbz	r1, 80185ea <_reclaim_reent+0x5e>
 80185e4:	4620      	mov	r0, r4
 80185e6:	f7ff fec1 	bl	801836c <_free_r>
 80185ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80185ec:	b111      	cbz	r1, 80185f4 <_reclaim_reent+0x68>
 80185ee:	4620      	mov	r0, r4
 80185f0:	f7ff febc 	bl	801836c <_free_r>
 80185f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80185f6:	b111      	cbz	r1, 80185fe <_reclaim_reent+0x72>
 80185f8:	4620      	mov	r0, r4
 80185fa:	f7ff feb7 	bl	801836c <_free_r>
 80185fe:	69a3      	ldr	r3, [r4, #24]
 8018600:	b1e3      	cbz	r3, 801863c <_reclaim_reent+0xb0>
 8018602:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018604:	4620      	mov	r0, r4
 8018606:	4798      	blx	r3
 8018608:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801860a:	b1b9      	cbz	r1, 801863c <_reclaim_reent+0xb0>
 801860c:	4620      	mov	r0, r4
 801860e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018612:	f7ff bfad 	b.w	8018570 <cleanup_glue>
 8018616:	5949      	ldr	r1, [r1, r5]
 8018618:	b941      	cbnz	r1, 801862c <_reclaim_reent+0xa0>
 801861a:	3504      	adds	r5, #4
 801861c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801861e:	2d80      	cmp	r5, #128	; 0x80
 8018620:	68d9      	ldr	r1, [r3, #12]
 8018622:	d1f8      	bne.n	8018616 <_reclaim_reent+0x8a>
 8018624:	4620      	mov	r0, r4
 8018626:	f7ff fea1 	bl	801836c <_free_r>
 801862a:	e7ba      	b.n	80185a2 <_reclaim_reent+0x16>
 801862c:	680e      	ldr	r6, [r1, #0]
 801862e:	4620      	mov	r0, r4
 8018630:	f7ff fe9c 	bl	801836c <_free_r>
 8018634:	4631      	mov	r1, r6
 8018636:	e7ef      	b.n	8018618 <_reclaim_reent+0x8c>
 8018638:	2500      	movs	r5, #0
 801863a:	e7ef      	b.n	801861c <_reclaim_reent+0x90>
 801863c:	bd70      	pop	{r4, r5, r6, pc}
 801863e:	bf00      	nop
 8018640:	24000064 	.word	0x24000064

08018644 <_sbrk_r>:
 8018644:	b538      	push	{r3, r4, r5, lr}
 8018646:	4d06      	ldr	r5, [pc, #24]	; (8018660 <_sbrk_r+0x1c>)
 8018648:	2300      	movs	r3, #0
 801864a:	4604      	mov	r4, r0
 801864c:	4608      	mov	r0, r1
 801864e:	602b      	str	r3, [r5, #0]
 8018650:	f7e8 fcc2 	bl	8000fd8 <_sbrk>
 8018654:	1c43      	adds	r3, r0, #1
 8018656:	d102      	bne.n	801865e <_sbrk_r+0x1a>
 8018658:	682b      	ldr	r3, [r5, #0]
 801865a:	b103      	cbz	r3, 801865e <_sbrk_r+0x1a>
 801865c:	6023      	str	r3, [r4, #0]
 801865e:	bd38      	pop	{r3, r4, r5, pc}
 8018660:	2400ee5c 	.word	0x2400ee5c

08018664 <siprintf>:
 8018664:	b40e      	push	{r1, r2, r3}
 8018666:	b500      	push	{lr}
 8018668:	b09c      	sub	sp, #112	; 0x70
 801866a:	ab1d      	add	r3, sp, #116	; 0x74
 801866c:	9002      	str	r0, [sp, #8]
 801866e:	9006      	str	r0, [sp, #24]
 8018670:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018674:	4809      	ldr	r0, [pc, #36]	; (801869c <siprintf+0x38>)
 8018676:	9107      	str	r1, [sp, #28]
 8018678:	9104      	str	r1, [sp, #16]
 801867a:	4909      	ldr	r1, [pc, #36]	; (80186a0 <siprintf+0x3c>)
 801867c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018680:	9105      	str	r1, [sp, #20]
 8018682:	6800      	ldr	r0, [r0, #0]
 8018684:	9301      	str	r3, [sp, #4]
 8018686:	a902      	add	r1, sp, #8
 8018688:	f002 f96c 	bl	801a964 <_svfiprintf_r>
 801868c:	9b02      	ldr	r3, [sp, #8]
 801868e:	2200      	movs	r2, #0
 8018690:	701a      	strb	r2, [r3, #0]
 8018692:	b01c      	add	sp, #112	; 0x70
 8018694:	f85d eb04 	ldr.w	lr, [sp], #4
 8018698:	b003      	add	sp, #12
 801869a:	4770      	bx	lr
 801869c:	24000064 	.word	0x24000064
 80186a0:	ffff0208 	.word	0xffff0208

080186a4 <siscanf>:
 80186a4:	b40e      	push	{r1, r2, r3}
 80186a6:	b510      	push	{r4, lr}
 80186a8:	b09f      	sub	sp, #124	; 0x7c
 80186aa:	ac21      	add	r4, sp, #132	; 0x84
 80186ac:	f44f 7101 	mov.w	r1, #516	; 0x204
 80186b0:	f854 2b04 	ldr.w	r2, [r4], #4
 80186b4:	9201      	str	r2, [sp, #4]
 80186b6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80186ba:	9004      	str	r0, [sp, #16]
 80186bc:	9008      	str	r0, [sp, #32]
 80186be:	f7e7 fe19 	bl	80002f4 <strlen>
 80186c2:	4b0c      	ldr	r3, [pc, #48]	; (80186f4 <siscanf+0x50>)
 80186c4:	9005      	str	r0, [sp, #20]
 80186c6:	9009      	str	r0, [sp, #36]	; 0x24
 80186c8:	930d      	str	r3, [sp, #52]	; 0x34
 80186ca:	480b      	ldr	r0, [pc, #44]	; (80186f8 <siscanf+0x54>)
 80186cc:	9a01      	ldr	r2, [sp, #4]
 80186ce:	6800      	ldr	r0, [r0, #0]
 80186d0:	9403      	str	r4, [sp, #12]
 80186d2:	2300      	movs	r3, #0
 80186d4:	9311      	str	r3, [sp, #68]	; 0x44
 80186d6:	9316      	str	r3, [sp, #88]	; 0x58
 80186d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80186e0:	a904      	add	r1, sp, #16
 80186e2:	4623      	mov	r3, r4
 80186e4:	f002 fa98 	bl	801ac18 <__ssvfiscanf_r>
 80186e8:	b01f      	add	sp, #124	; 0x7c
 80186ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186ee:	b003      	add	sp, #12
 80186f0:	4770      	bx	lr
 80186f2:	bf00      	nop
 80186f4:	0801871f 	.word	0x0801871f
 80186f8:	24000064 	.word	0x24000064

080186fc <__sread>:
 80186fc:	b510      	push	{r4, lr}
 80186fe:	460c      	mov	r4, r1
 8018700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018704:	f003 f83a 	bl	801b77c <_read_r>
 8018708:	2800      	cmp	r0, #0
 801870a:	bfab      	itete	ge
 801870c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801870e:	89a3      	ldrhlt	r3, [r4, #12]
 8018710:	181b      	addge	r3, r3, r0
 8018712:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018716:	bfac      	ite	ge
 8018718:	6563      	strge	r3, [r4, #84]	; 0x54
 801871a:	81a3      	strhlt	r3, [r4, #12]
 801871c:	bd10      	pop	{r4, pc}

0801871e <__seofread>:
 801871e:	2000      	movs	r0, #0
 8018720:	4770      	bx	lr

08018722 <__swrite>:
 8018722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018726:	461f      	mov	r7, r3
 8018728:	898b      	ldrh	r3, [r1, #12]
 801872a:	05db      	lsls	r3, r3, #23
 801872c:	4605      	mov	r5, r0
 801872e:	460c      	mov	r4, r1
 8018730:	4616      	mov	r6, r2
 8018732:	d505      	bpl.n	8018740 <__swrite+0x1e>
 8018734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018738:	2302      	movs	r3, #2
 801873a:	2200      	movs	r2, #0
 801873c:	f001 fbbc 	bl	8019eb8 <_lseek_r>
 8018740:	89a3      	ldrh	r3, [r4, #12]
 8018742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801874a:	81a3      	strh	r3, [r4, #12]
 801874c:	4632      	mov	r2, r6
 801874e:	463b      	mov	r3, r7
 8018750:	4628      	mov	r0, r5
 8018752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018756:	f000 bf09 	b.w	801956c <_write_r>

0801875a <__sseek>:
 801875a:	b510      	push	{r4, lr}
 801875c:	460c      	mov	r4, r1
 801875e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018762:	f001 fba9 	bl	8019eb8 <_lseek_r>
 8018766:	1c43      	adds	r3, r0, #1
 8018768:	89a3      	ldrh	r3, [r4, #12]
 801876a:	bf15      	itete	ne
 801876c:	6560      	strne	r0, [r4, #84]	; 0x54
 801876e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018776:	81a3      	strheq	r3, [r4, #12]
 8018778:	bf18      	it	ne
 801877a:	81a3      	strhne	r3, [r4, #12]
 801877c:	bd10      	pop	{r4, pc}

0801877e <__sclose>:
 801877e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018782:	f000 bf91 	b.w	80196a8 <_close_r>

08018786 <strchr>:
 8018786:	b2c9      	uxtb	r1, r1
 8018788:	4603      	mov	r3, r0
 801878a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801878e:	b11a      	cbz	r2, 8018798 <strchr+0x12>
 8018790:	428a      	cmp	r2, r1
 8018792:	d1f9      	bne.n	8018788 <strchr+0x2>
 8018794:	4618      	mov	r0, r3
 8018796:	4770      	bx	lr
 8018798:	2900      	cmp	r1, #0
 801879a:	bf18      	it	ne
 801879c:	2300      	movne	r3, #0
 801879e:	e7f9      	b.n	8018794 <strchr+0xe>

080187a0 <strncmp>:
 80187a0:	b510      	push	{r4, lr}
 80187a2:	b16a      	cbz	r2, 80187c0 <strncmp+0x20>
 80187a4:	3901      	subs	r1, #1
 80187a6:	1884      	adds	r4, r0, r2
 80187a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80187ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80187b0:	4293      	cmp	r3, r2
 80187b2:	d103      	bne.n	80187bc <strncmp+0x1c>
 80187b4:	42a0      	cmp	r0, r4
 80187b6:	d001      	beq.n	80187bc <strncmp+0x1c>
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d1f5      	bne.n	80187a8 <strncmp+0x8>
 80187bc:	1a98      	subs	r0, r3, r2
 80187be:	bd10      	pop	{r4, pc}
 80187c0:	4610      	mov	r0, r2
 80187c2:	e7fc      	b.n	80187be <strncmp+0x1e>

080187c4 <sulp>:
 80187c4:	b570      	push	{r4, r5, r6, lr}
 80187c6:	4604      	mov	r4, r0
 80187c8:	460d      	mov	r5, r1
 80187ca:	4616      	mov	r6, r2
 80187cc:	ec45 4b10 	vmov	d0, r4, r5
 80187d0:	f001 ff0e 	bl	801a5f0 <__ulp>
 80187d4:	b17e      	cbz	r6, 80187f6 <sulp+0x32>
 80187d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80187da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80187de:	2b00      	cmp	r3, #0
 80187e0:	dd09      	ble.n	80187f6 <sulp+0x32>
 80187e2:	051b      	lsls	r3, r3, #20
 80187e4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80187e8:	2000      	movs	r0, #0
 80187ea:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80187ee:	ec41 0b17 	vmov	d7, r0, r1
 80187f2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80187f6:	bd70      	pop	{r4, r5, r6, pc}

080187f8 <_strtod_l>:
 80187f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187fc:	ed2d 8b0c 	vpush	{d8-d13}
 8018800:	b09d      	sub	sp, #116	; 0x74
 8018802:	461f      	mov	r7, r3
 8018804:	2300      	movs	r3, #0
 8018806:	9318      	str	r3, [sp, #96]	; 0x60
 8018808:	4ba6      	ldr	r3, [pc, #664]	; (8018aa4 <_strtod_l+0x2ac>)
 801880a:	9213      	str	r2, [sp, #76]	; 0x4c
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	9308      	str	r3, [sp, #32]
 8018810:	4604      	mov	r4, r0
 8018812:	4618      	mov	r0, r3
 8018814:	468a      	mov	sl, r1
 8018816:	f7e7 fd6d 	bl	80002f4 <strlen>
 801881a:	f04f 0800 	mov.w	r8, #0
 801881e:	4605      	mov	r5, r0
 8018820:	f04f 0900 	mov.w	r9, #0
 8018824:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8018828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801882a:	781a      	ldrb	r2, [r3, #0]
 801882c:	2a2b      	cmp	r2, #43	; 0x2b
 801882e:	d04d      	beq.n	80188cc <_strtod_l+0xd4>
 8018830:	d83a      	bhi.n	80188a8 <_strtod_l+0xb0>
 8018832:	2a0d      	cmp	r2, #13
 8018834:	d833      	bhi.n	801889e <_strtod_l+0xa6>
 8018836:	2a08      	cmp	r2, #8
 8018838:	d833      	bhi.n	80188a2 <_strtod_l+0xaa>
 801883a:	2a00      	cmp	r2, #0
 801883c:	d03d      	beq.n	80188ba <_strtod_l+0xc2>
 801883e:	2300      	movs	r3, #0
 8018840:	930b      	str	r3, [sp, #44]	; 0x2c
 8018842:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8018844:	7833      	ldrb	r3, [r6, #0]
 8018846:	2b30      	cmp	r3, #48	; 0x30
 8018848:	f040 80b6 	bne.w	80189b8 <_strtod_l+0x1c0>
 801884c:	7873      	ldrb	r3, [r6, #1]
 801884e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018852:	2b58      	cmp	r3, #88	; 0x58
 8018854:	d16d      	bne.n	8018932 <_strtod_l+0x13a>
 8018856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018858:	9301      	str	r3, [sp, #4]
 801885a:	ab18      	add	r3, sp, #96	; 0x60
 801885c:	9702      	str	r7, [sp, #8]
 801885e:	9300      	str	r3, [sp, #0]
 8018860:	4a91      	ldr	r2, [pc, #580]	; (8018aa8 <_strtod_l+0x2b0>)
 8018862:	ab19      	add	r3, sp, #100	; 0x64
 8018864:	a917      	add	r1, sp, #92	; 0x5c
 8018866:	4620      	mov	r0, r4
 8018868:	f000 ffc0 	bl	80197ec <__gethex>
 801886c:	f010 0507 	ands.w	r5, r0, #7
 8018870:	4607      	mov	r7, r0
 8018872:	d005      	beq.n	8018880 <_strtod_l+0x88>
 8018874:	2d06      	cmp	r5, #6
 8018876:	d12b      	bne.n	80188d0 <_strtod_l+0xd8>
 8018878:	3601      	adds	r6, #1
 801887a:	2300      	movs	r3, #0
 801887c:	9617      	str	r6, [sp, #92]	; 0x5c
 801887e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018880:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018882:	2b00      	cmp	r3, #0
 8018884:	f040 856e 	bne.w	8019364 <_strtod_l+0xb6c>
 8018888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801888a:	b1e3      	cbz	r3, 80188c6 <_strtod_l+0xce>
 801888c:	ec49 8b17 	vmov	d7, r8, r9
 8018890:	eeb1 0b47 	vneg.f64	d0, d7
 8018894:	b01d      	add	sp, #116	; 0x74
 8018896:	ecbd 8b0c 	vpop	{d8-d13}
 801889a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801889e:	2a20      	cmp	r2, #32
 80188a0:	d1cd      	bne.n	801883e <_strtod_l+0x46>
 80188a2:	3301      	adds	r3, #1
 80188a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80188a6:	e7bf      	b.n	8018828 <_strtod_l+0x30>
 80188a8:	2a2d      	cmp	r2, #45	; 0x2d
 80188aa:	d1c8      	bne.n	801883e <_strtod_l+0x46>
 80188ac:	2201      	movs	r2, #1
 80188ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80188b0:	1c5a      	adds	r2, r3, #1
 80188b2:	9217      	str	r2, [sp, #92]	; 0x5c
 80188b4:	785b      	ldrb	r3, [r3, #1]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d1c3      	bne.n	8018842 <_strtod_l+0x4a>
 80188ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80188bc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	f040 854d 	bne.w	8019360 <_strtod_l+0xb68>
 80188c6:	ec49 8b10 	vmov	d0, r8, r9
 80188ca:	e7e3      	b.n	8018894 <_strtod_l+0x9c>
 80188cc:	2200      	movs	r2, #0
 80188ce:	e7ee      	b.n	80188ae <_strtod_l+0xb6>
 80188d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80188d2:	b13a      	cbz	r2, 80188e4 <_strtod_l+0xec>
 80188d4:	2135      	movs	r1, #53	; 0x35
 80188d6:	a81a      	add	r0, sp, #104	; 0x68
 80188d8:	f001 ff96 	bl	801a808 <__copybits>
 80188dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80188de:	4620      	mov	r0, r4
 80188e0:	f001 fb5a 	bl	8019f98 <_Bfree>
 80188e4:	3d01      	subs	r5, #1
 80188e6:	2d05      	cmp	r5, #5
 80188e8:	d807      	bhi.n	80188fa <_strtod_l+0x102>
 80188ea:	e8df f005 	tbb	[pc, r5]
 80188ee:	0b0e      	.short	0x0b0e
 80188f0:	030e1d18 	.word	0x030e1d18
 80188f4:	f04f 0900 	mov.w	r9, #0
 80188f8:	46c8      	mov	r8, r9
 80188fa:	073b      	lsls	r3, r7, #28
 80188fc:	d5c0      	bpl.n	8018880 <_strtod_l+0x88>
 80188fe:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8018902:	e7bd      	b.n	8018880 <_strtod_l+0x88>
 8018904:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8018908:	e7f7      	b.n	80188fa <_strtod_l+0x102>
 801890a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 801890e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018910:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018914:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018918:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801891c:	e7ed      	b.n	80188fa <_strtod_l+0x102>
 801891e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8018aac <_strtod_l+0x2b4>
 8018922:	f04f 0800 	mov.w	r8, #0
 8018926:	e7e8      	b.n	80188fa <_strtod_l+0x102>
 8018928:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801892c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8018930:	e7e3      	b.n	80188fa <_strtod_l+0x102>
 8018932:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018934:	1c5a      	adds	r2, r3, #1
 8018936:	9217      	str	r2, [sp, #92]	; 0x5c
 8018938:	785b      	ldrb	r3, [r3, #1]
 801893a:	2b30      	cmp	r3, #48	; 0x30
 801893c:	d0f9      	beq.n	8018932 <_strtod_l+0x13a>
 801893e:	2b00      	cmp	r3, #0
 8018940:	d09e      	beq.n	8018880 <_strtod_l+0x88>
 8018942:	2301      	movs	r3, #1
 8018944:	9306      	str	r3, [sp, #24]
 8018946:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018948:	930c      	str	r3, [sp, #48]	; 0x30
 801894a:	2300      	movs	r3, #0
 801894c:	9304      	str	r3, [sp, #16]
 801894e:	930a      	str	r3, [sp, #40]	; 0x28
 8018950:	461e      	mov	r6, r3
 8018952:	220a      	movs	r2, #10
 8018954:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018956:	f890 b000 	ldrb.w	fp, [r0]
 801895a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 801895e:	b2d9      	uxtb	r1, r3
 8018960:	2909      	cmp	r1, #9
 8018962:	d92b      	bls.n	80189bc <_strtod_l+0x1c4>
 8018964:	9908      	ldr	r1, [sp, #32]
 8018966:	462a      	mov	r2, r5
 8018968:	f7ff ff1a 	bl	80187a0 <strncmp>
 801896c:	2800      	cmp	r0, #0
 801896e:	d035      	beq.n	80189dc <_strtod_l+0x1e4>
 8018970:	2000      	movs	r0, #0
 8018972:	465a      	mov	r2, fp
 8018974:	4633      	mov	r3, r6
 8018976:	4683      	mov	fp, r0
 8018978:	4601      	mov	r1, r0
 801897a:	2a65      	cmp	r2, #101	; 0x65
 801897c:	d001      	beq.n	8018982 <_strtod_l+0x18a>
 801897e:	2a45      	cmp	r2, #69	; 0x45
 8018980:	d118      	bne.n	80189b4 <_strtod_l+0x1bc>
 8018982:	b91b      	cbnz	r3, 801898c <_strtod_l+0x194>
 8018984:	9b06      	ldr	r3, [sp, #24]
 8018986:	4303      	orrs	r3, r0
 8018988:	d097      	beq.n	80188ba <_strtod_l+0xc2>
 801898a:	2300      	movs	r3, #0
 801898c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8018990:	f10a 0201 	add.w	r2, sl, #1
 8018994:	9217      	str	r2, [sp, #92]	; 0x5c
 8018996:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801899a:	2a2b      	cmp	r2, #43	; 0x2b
 801899c:	d077      	beq.n	8018a8e <_strtod_l+0x296>
 801899e:	2a2d      	cmp	r2, #45	; 0x2d
 80189a0:	d07d      	beq.n	8018a9e <_strtod_l+0x2a6>
 80189a2:	f04f 0e00 	mov.w	lr, #0
 80189a6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80189aa:	2d09      	cmp	r5, #9
 80189ac:	f240 8084 	bls.w	8018ab8 <_strtod_l+0x2c0>
 80189b0:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80189b4:	2500      	movs	r5, #0
 80189b6:	e09f      	b.n	8018af8 <_strtod_l+0x300>
 80189b8:	2300      	movs	r3, #0
 80189ba:	e7c3      	b.n	8018944 <_strtod_l+0x14c>
 80189bc:	2e08      	cmp	r6, #8
 80189be:	bfd5      	itete	le
 80189c0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80189c2:	9904      	ldrgt	r1, [sp, #16]
 80189c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80189c8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80189cc:	f100 0001 	add.w	r0, r0, #1
 80189d0:	bfd4      	ite	le
 80189d2:	930a      	strle	r3, [sp, #40]	; 0x28
 80189d4:	9304      	strgt	r3, [sp, #16]
 80189d6:	3601      	adds	r6, #1
 80189d8:	9017      	str	r0, [sp, #92]	; 0x5c
 80189da:	e7bb      	b.n	8018954 <_strtod_l+0x15c>
 80189dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80189de:	195a      	adds	r2, r3, r5
 80189e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80189e2:	5d5a      	ldrb	r2, [r3, r5]
 80189e4:	b3ae      	cbz	r6, 8018a52 <_strtod_l+0x25a>
 80189e6:	4683      	mov	fp, r0
 80189e8:	4633      	mov	r3, r6
 80189ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80189ee:	2909      	cmp	r1, #9
 80189f0:	d912      	bls.n	8018a18 <_strtod_l+0x220>
 80189f2:	2101      	movs	r1, #1
 80189f4:	e7c1      	b.n	801897a <_strtod_l+0x182>
 80189f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80189f8:	1c5a      	adds	r2, r3, #1
 80189fa:	9217      	str	r2, [sp, #92]	; 0x5c
 80189fc:	785a      	ldrb	r2, [r3, #1]
 80189fe:	3001      	adds	r0, #1
 8018a00:	2a30      	cmp	r2, #48	; 0x30
 8018a02:	d0f8      	beq.n	80189f6 <_strtod_l+0x1fe>
 8018a04:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8018a08:	2b08      	cmp	r3, #8
 8018a0a:	f200 84b0 	bhi.w	801936e <_strtod_l+0xb76>
 8018a0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018a10:	930c      	str	r3, [sp, #48]	; 0x30
 8018a12:	4683      	mov	fp, r0
 8018a14:	2000      	movs	r0, #0
 8018a16:	4603      	mov	r3, r0
 8018a18:	3a30      	subs	r2, #48	; 0x30
 8018a1a:	f100 0101 	add.w	r1, r0, #1
 8018a1e:	d012      	beq.n	8018a46 <_strtod_l+0x24e>
 8018a20:	448b      	add	fp, r1
 8018a22:	eb00 0c03 	add.w	ip, r0, r3
 8018a26:	4619      	mov	r1, r3
 8018a28:	250a      	movs	r5, #10
 8018a2a:	4561      	cmp	r1, ip
 8018a2c:	d113      	bne.n	8018a56 <_strtod_l+0x25e>
 8018a2e:	1819      	adds	r1, r3, r0
 8018a30:	2908      	cmp	r1, #8
 8018a32:	f103 0301 	add.w	r3, r3, #1
 8018a36:	4403      	add	r3, r0
 8018a38:	dc1d      	bgt.n	8018a76 <_strtod_l+0x27e>
 8018a3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018a3c:	210a      	movs	r1, #10
 8018a3e:	fb01 2200 	mla	r2, r1, r0, r2
 8018a42:	920a      	str	r2, [sp, #40]	; 0x28
 8018a44:	2100      	movs	r1, #0
 8018a46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018a48:	1c50      	adds	r0, r2, #1
 8018a4a:	9017      	str	r0, [sp, #92]	; 0x5c
 8018a4c:	7852      	ldrb	r2, [r2, #1]
 8018a4e:	4608      	mov	r0, r1
 8018a50:	e7cb      	b.n	80189ea <_strtod_l+0x1f2>
 8018a52:	4630      	mov	r0, r6
 8018a54:	e7d4      	b.n	8018a00 <_strtod_l+0x208>
 8018a56:	2908      	cmp	r1, #8
 8018a58:	dc04      	bgt.n	8018a64 <_strtod_l+0x26c>
 8018a5a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018a5c:	436f      	muls	r7, r5
 8018a5e:	970a      	str	r7, [sp, #40]	; 0x28
 8018a60:	3101      	adds	r1, #1
 8018a62:	e7e2      	b.n	8018a2a <_strtod_l+0x232>
 8018a64:	f101 0e01 	add.w	lr, r1, #1
 8018a68:	f1be 0f10 	cmp.w	lr, #16
 8018a6c:	bfde      	ittt	le
 8018a6e:	9f04      	ldrle	r7, [sp, #16]
 8018a70:	436f      	mulle	r7, r5
 8018a72:	9704      	strle	r7, [sp, #16]
 8018a74:	e7f4      	b.n	8018a60 <_strtod_l+0x268>
 8018a76:	2b10      	cmp	r3, #16
 8018a78:	bfdf      	itttt	le
 8018a7a:	9804      	ldrle	r0, [sp, #16]
 8018a7c:	210a      	movle	r1, #10
 8018a7e:	fb01 2200 	mlale	r2, r1, r0, r2
 8018a82:	9204      	strle	r2, [sp, #16]
 8018a84:	e7de      	b.n	8018a44 <_strtod_l+0x24c>
 8018a86:	f04f 0b00 	mov.w	fp, #0
 8018a8a:	2101      	movs	r1, #1
 8018a8c:	e77a      	b.n	8018984 <_strtod_l+0x18c>
 8018a8e:	f04f 0e00 	mov.w	lr, #0
 8018a92:	f10a 0202 	add.w	r2, sl, #2
 8018a96:	9217      	str	r2, [sp, #92]	; 0x5c
 8018a98:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8018a9c:	e783      	b.n	80189a6 <_strtod_l+0x1ae>
 8018a9e:	f04f 0e01 	mov.w	lr, #1
 8018aa2:	e7f6      	b.n	8018a92 <_strtod_l+0x29a>
 8018aa4:	0801ef28 	.word	0x0801ef28
 8018aa8:	0801ee20 	.word	0x0801ee20
 8018aac:	7ff00000 	.word	0x7ff00000
 8018ab0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018ab2:	1c55      	adds	r5, r2, #1
 8018ab4:	9517      	str	r5, [sp, #92]	; 0x5c
 8018ab6:	7852      	ldrb	r2, [r2, #1]
 8018ab8:	2a30      	cmp	r2, #48	; 0x30
 8018aba:	d0f9      	beq.n	8018ab0 <_strtod_l+0x2b8>
 8018abc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8018ac0:	2d08      	cmp	r5, #8
 8018ac2:	f63f af77 	bhi.w	80189b4 <_strtod_l+0x1bc>
 8018ac6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8018aca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018acc:	9208      	str	r2, [sp, #32]
 8018ace:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018ad0:	1c55      	adds	r5, r2, #1
 8018ad2:	9517      	str	r5, [sp, #92]	; 0x5c
 8018ad4:	7852      	ldrb	r2, [r2, #1]
 8018ad6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8018ada:	2f09      	cmp	r7, #9
 8018adc:	d937      	bls.n	8018b4e <_strtod_l+0x356>
 8018ade:	9f08      	ldr	r7, [sp, #32]
 8018ae0:	1bed      	subs	r5, r5, r7
 8018ae2:	2d08      	cmp	r5, #8
 8018ae4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8018ae8:	dc02      	bgt.n	8018af0 <_strtod_l+0x2f8>
 8018aea:	4565      	cmp	r5, ip
 8018aec:	bfa8      	it	ge
 8018aee:	4665      	movge	r5, ip
 8018af0:	f1be 0f00 	cmp.w	lr, #0
 8018af4:	d000      	beq.n	8018af8 <_strtod_l+0x300>
 8018af6:	426d      	negs	r5, r5
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d14f      	bne.n	8018b9c <_strtod_l+0x3a4>
 8018afc:	9b06      	ldr	r3, [sp, #24]
 8018afe:	4303      	orrs	r3, r0
 8018b00:	f47f aebe 	bne.w	8018880 <_strtod_l+0x88>
 8018b04:	2900      	cmp	r1, #0
 8018b06:	f47f aed8 	bne.w	80188ba <_strtod_l+0xc2>
 8018b0a:	2a69      	cmp	r2, #105	; 0x69
 8018b0c:	d027      	beq.n	8018b5e <_strtod_l+0x366>
 8018b0e:	dc24      	bgt.n	8018b5a <_strtod_l+0x362>
 8018b10:	2a49      	cmp	r2, #73	; 0x49
 8018b12:	d024      	beq.n	8018b5e <_strtod_l+0x366>
 8018b14:	2a4e      	cmp	r2, #78	; 0x4e
 8018b16:	f47f aed0 	bne.w	80188ba <_strtod_l+0xc2>
 8018b1a:	499b      	ldr	r1, [pc, #620]	; (8018d88 <_strtod_l+0x590>)
 8018b1c:	a817      	add	r0, sp, #92	; 0x5c
 8018b1e:	f001 f8bd 	bl	8019c9c <__match>
 8018b22:	2800      	cmp	r0, #0
 8018b24:	f43f aec9 	beq.w	80188ba <_strtod_l+0xc2>
 8018b28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018b2a:	781b      	ldrb	r3, [r3, #0]
 8018b2c:	2b28      	cmp	r3, #40	; 0x28
 8018b2e:	d12d      	bne.n	8018b8c <_strtod_l+0x394>
 8018b30:	4996      	ldr	r1, [pc, #600]	; (8018d8c <_strtod_l+0x594>)
 8018b32:	aa1a      	add	r2, sp, #104	; 0x68
 8018b34:	a817      	add	r0, sp, #92	; 0x5c
 8018b36:	f001 f8c5 	bl	8019cc4 <__hexnan>
 8018b3a:	2805      	cmp	r0, #5
 8018b3c:	d126      	bne.n	8018b8c <_strtod_l+0x394>
 8018b3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018b40:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8018b44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8018b48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8018b4c:	e698      	b.n	8018880 <_strtod_l+0x88>
 8018b4e:	250a      	movs	r5, #10
 8018b50:	fb05 250c 	mla	r5, r5, ip, r2
 8018b54:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8018b58:	e7b9      	b.n	8018ace <_strtod_l+0x2d6>
 8018b5a:	2a6e      	cmp	r2, #110	; 0x6e
 8018b5c:	e7db      	b.n	8018b16 <_strtod_l+0x31e>
 8018b5e:	498c      	ldr	r1, [pc, #560]	; (8018d90 <_strtod_l+0x598>)
 8018b60:	a817      	add	r0, sp, #92	; 0x5c
 8018b62:	f001 f89b 	bl	8019c9c <__match>
 8018b66:	2800      	cmp	r0, #0
 8018b68:	f43f aea7 	beq.w	80188ba <_strtod_l+0xc2>
 8018b6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018b6e:	4989      	ldr	r1, [pc, #548]	; (8018d94 <_strtod_l+0x59c>)
 8018b70:	3b01      	subs	r3, #1
 8018b72:	a817      	add	r0, sp, #92	; 0x5c
 8018b74:	9317      	str	r3, [sp, #92]	; 0x5c
 8018b76:	f001 f891 	bl	8019c9c <__match>
 8018b7a:	b910      	cbnz	r0, 8018b82 <_strtod_l+0x38a>
 8018b7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018b7e:	3301      	adds	r3, #1
 8018b80:	9317      	str	r3, [sp, #92]	; 0x5c
 8018b82:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8018da8 <_strtod_l+0x5b0>
 8018b86:	f04f 0800 	mov.w	r8, #0
 8018b8a:	e679      	b.n	8018880 <_strtod_l+0x88>
 8018b8c:	4882      	ldr	r0, [pc, #520]	; (8018d98 <_strtod_l+0x5a0>)
 8018b8e:	f002 fe07 	bl	801b7a0 <nan>
 8018b92:	ed8d 0b04 	vstr	d0, [sp, #16]
 8018b96:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018b9a:	e671      	b.n	8018880 <_strtod_l+0x88>
 8018b9c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8018ba0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018ba4:	eba5 020b 	sub.w	r2, r5, fp
 8018ba8:	2e00      	cmp	r6, #0
 8018baa:	bf08      	it	eq
 8018bac:	461e      	moveq	r6, r3
 8018bae:	2b10      	cmp	r3, #16
 8018bb0:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018bb4:	9206      	str	r2, [sp, #24]
 8018bb6:	461a      	mov	r2, r3
 8018bb8:	bfa8      	it	ge
 8018bba:	2210      	movge	r2, #16
 8018bbc:	2b09      	cmp	r3, #9
 8018bbe:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8018bc2:	dd0e      	ble.n	8018be2 <_strtod_l+0x3ea>
 8018bc4:	4975      	ldr	r1, [pc, #468]	; (8018d9c <_strtod_l+0x5a4>)
 8018bc6:	eddd 7a04 	vldr	s15, [sp, #16]
 8018bca:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018bce:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8018bd2:	ed9d 5b08 	vldr	d5, [sp, #32]
 8018bd6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018bda:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018bde:	ec59 8b17 	vmov	r8, r9, d7
 8018be2:	2b0f      	cmp	r3, #15
 8018be4:	dc37      	bgt.n	8018c56 <_strtod_l+0x45e>
 8018be6:	9906      	ldr	r1, [sp, #24]
 8018be8:	2900      	cmp	r1, #0
 8018bea:	f43f ae49 	beq.w	8018880 <_strtod_l+0x88>
 8018bee:	dd23      	ble.n	8018c38 <_strtod_l+0x440>
 8018bf0:	2916      	cmp	r1, #22
 8018bf2:	dc0b      	bgt.n	8018c0c <_strtod_l+0x414>
 8018bf4:	4b69      	ldr	r3, [pc, #420]	; (8018d9c <_strtod_l+0x5a4>)
 8018bf6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8018bfa:	ed93 7b00 	vldr	d7, [r3]
 8018bfe:	ec49 8b16 	vmov	d6, r8, r9
 8018c02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018c06:	ec59 8b17 	vmov	r8, r9, d7
 8018c0a:	e639      	b.n	8018880 <_strtod_l+0x88>
 8018c0c:	9806      	ldr	r0, [sp, #24]
 8018c0e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8018c12:	4281      	cmp	r1, r0
 8018c14:	db1f      	blt.n	8018c56 <_strtod_l+0x45e>
 8018c16:	4a61      	ldr	r2, [pc, #388]	; (8018d9c <_strtod_l+0x5a4>)
 8018c18:	f1c3 030f 	rsb	r3, r3, #15
 8018c1c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8018c20:	ed91 7b00 	vldr	d7, [r1]
 8018c24:	ec49 8b16 	vmov	d6, r8, r9
 8018c28:	1ac3      	subs	r3, r0, r3
 8018c2a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018c2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018c32:	ed92 6b00 	vldr	d6, [r2]
 8018c36:	e7e4      	b.n	8018c02 <_strtod_l+0x40a>
 8018c38:	9906      	ldr	r1, [sp, #24]
 8018c3a:	3116      	adds	r1, #22
 8018c3c:	db0b      	blt.n	8018c56 <_strtod_l+0x45e>
 8018c3e:	4b57      	ldr	r3, [pc, #348]	; (8018d9c <_strtod_l+0x5a4>)
 8018c40:	ebab 0505 	sub.w	r5, fp, r5
 8018c44:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8018c48:	ed95 7b00 	vldr	d7, [r5]
 8018c4c:	ec49 8b16 	vmov	d6, r8, r9
 8018c50:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018c54:	e7d7      	b.n	8018c06 <_strtod_l+0x40e>
 8018c56:	9906      	ldr	r1, [sp, #24]
 8018c58:	1a9a      	subs	r2, r3, r2
 8018c5a:	440a      	add	r2, r1
 8018c5c:	2a00      	cmp	r2, #0
 8018c5e:	dd74      	ble.n	8018d4a <_strtod_l+0x552>
 8018c60:	f012 000f 	ands.w	r0, r2, #15
 8018c64:	d00a      	beq.n	8018c7c <_strtod_l+0x484>
 8018c66:	494d      	ldr	r1, [pc, #308]	; (8018d9c <_strtod_l+0x5a4>)
 8018c68:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018c6c:	ed91 7b00 	vldr	d7, [r1]
 8018c70:	ec49 8b16 	vmov	d6, r8, r9
 8018c74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018c78:	ec59 8b17 	vmov	r8, r9, d7
 8018c7c:	f032 020f 	bics.w	r2, r2, #15
 8018c80:	d04f      	beq.n	8018d22 <_strtod_l+0x52a>
 8018c82:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8018c86:	dd22      	ble.n	8018cce <_strtod_l+0x4d6>
 8018c88:	2500      	movs	r5, #0
 8018c8a:	462e      	mov	r6, r5
 8018c8c:	950a      	str	r5, [sp, #40]	; 0x28
 8018c8e:	462f      	mov	r7, r5
 8018c90:	2322      	movs	r3, #34	; 0x22
 8018c92:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8018da8 <_strtod_l+0x5b0>
 8018c96:	6023      	str	r3, [r4, #0]
 8018c98:	f04f 0800 	mov.w	r8, #0
 8018c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	f43f adee 	beq.w	8018880 <_strtod_l+0x88>
 8018ca4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018ca6:	4620      	mov	r0, r4
 8018ca8:	f001 f976 	bl	8019f98 <_Bfree>
 8018cac:	4639      	mov	r1, r7
 8018cae:	4620      	mov	r0, r4
 8018cb0:	f001 f972 	bl	8019f98 <_Bfree>
 8018cb4:	4631      	mov	r1, r6
 8018cb6:	4620      	mov	r0, r4
 8018cb8:	f001 f96e 	bl	8019f98 <_Bfree>
 8018cbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018cbe:	4620      	mov	r0, r4
 8018cc0:	f001 f96a 	bl	8019f98 <_Bfree>
 8018cc4:	4629      	mov	r1, r5
 8018cc6:	4620      	mov	r0, r4
 8018cc8:	f001 f966 	bl	8019f98 <_Bfree>
 8018ccc:	e5d8      	b.n	8018880 <_strtod_l+0x88>
 8018cce:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8018cd2:	2000      	movs	r0, #0
 8018cd4:	4f32      	ldr	r7, [pc, #200]	; (8018da0 <_strtod_l+0x5a8>)
 8018cd6:	1112      	asrs	r2, r2, #4
 8018cd8:	4601      	mov	r1, r0
 8018cda:	2a01      	cmp	r2, #1
 8018cdc:	dc24      	bgt.n	8018d28 <_strtod_l+0x530>
 8018cde:	b108      	cbz	r0, 8018ce4 <_strtod_l+0x4ec>
 8018ce0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018ce4:	4a2e      	ldr	r2, [pc, #184]	; (8018da0 <_strtod_l+0x5a8>)
 8018ce6:	482f      	ldr	r0, [pc, #188]	; (8018da4 <_strtod_l+0x5ac>)
 8018ce8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8018cec:	ed91 7b00 	vldr	d7, [r1]
 8018cf0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8018cf4:	ec49 8b16 	vmov	d6, r8, r9
 8018cf8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018cfc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018d00:	9905      	ldr	r1, [sp, #20]
 8018d02:	4a29      	ldr	r2, [pc, #164]	; (8018da8 <_strtod_l+0x5b0>)
 8018d04:	400a      	ands	r2, r1
 8018d06:	4282      	cmp	r2, r0
 8018d08:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018d0c:	d8bc      	bhi.n	8018c88 <_strtod_l+0x490>
 8018d0e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8018d12:	4282      	cmp	r2, r0
 8018d14:	bf86      	itte	hi
 8018d16:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8018dac <_strtod_l+0x5b4>
 8018d1a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8018d1e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8018d22:	2200      	movs	r2, #0
 8018d24:	9204      	str	r2, [sp, #16]
 8018d26:	e07f      	b.n	8018e28 <_strtod_l+0x630>
 8018d28:	f012 0f01 	tst.w	r2, #1
 8018d2c:	d00a      	beq.n	8018d44 <_strtod_l+0x54c>
 8018d2e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8018d32:	ed90 7b00 	vldr	d7, [r0]
 8018d36:	ed9d 6b04 	vldr	d6, [sp, #16]
 8018d3a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018d3e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018d42:	2001      	movs	r0, #1
 8018d44:	3101      	adds	r1, #1
 8018d46:	1052      	asrs	r2, r2, #1
 8018d48:	e7c7      	b.n	8018cda <_strtod_l+0x4e2>
 8018d4a:	d0ea      	beq.n	8018d22 <_strtod_l+0x52a>
 8018d4c:	4252      	negs	r2, r2
 8018d4e:	f012 000f 	ands.w	r0, r2, #15
 8018d52:	d00a      	beq.n	8018d6a <_strtod_l+0x572>
 8018d54:	4911      	ldr	r1, [pc, #68]	; (8018d9c <_strtod_l+0x5a4>)
 8018d56:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018d5a:	ed91 7b00 	vldr	d7, [r1]
 8018d5e:	ec49 8b16 	vmov	d6, r8, r9
 8018d62:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018d66:	ec59 8b17 	vmov	r8, r9, d7
 8018d6a:	1112      	asrs	r2, r2, #4
 8018d6c:	d0d9      	beq.n	8018d22 <_strtod_l+0x52a>
 8018d6e:	2a1f      	cmp	r2, #31
 8018d70:	dd1e      	ble.n	8018db0 <_strtod_l+0x5b8>
 8018d72:	2500      	movs	r5, #0
 8018d74:	462e      	mov	r6, r5
 8018d76:	950a      	str	r5, [sp, #40]	; 0x28
 8018d78:	462f      	mov	r7, r5
 8018d7a:	2322      	movs	r3, #34	; 0x22
 8018d7c:	f04f 0800 	mov.w	r8, #0
 8018d80:	f04f 0900 	mov.w	r9, #0
 8018d84:	6023      	str	r3, [r4, #0]
 8018d86:	e789      	b.n	8018c9c <_strtod_l+0x4a4>
 8018d88:	0801ee1b 	.word	0x0801ee1b
 8018d8c:	0801ee34 	.word	0x0801ee34
 8018d90:	0801ee12 	.word	0x0801ee12
 8018d94:	0801ee15 	.word	0x0801ee15
 8018d98:	0801eeab 	.word	0x0801eeab
 8018d9c:	0801efc8 	.word	0x0801efc8
 8018da0:	0801efa0 	.word	0x0801efa0
 8018da4:	7ca00000 	.word	0x7ca00000
 8018da8:	7ff00000 	.word	0x7ff00000
 8018dac:	7fefffff 	.word	0x7fefffff
 8018db0:	f012 0110 	ands.w	r1, r2, #16
 8018db4:	bf18      	it	ne
 8018db6:	216a      	movne	r1, #106	; 0x6a
 8018db8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8018dbc:	9104      	str	r1, [sp, #16]
 8018dbe:	49c0      	ldr	r1, [pc, #768]	; (80190c0 <_strtod_l+0x8c8>)
 8018dc0:	2000      	movs	r0, #0
 8018dc2:	07d7      	lsls	r7, r2, #31
 8018dc4:	d508      	bpl.n	8018dd8 <_strtod_l+0x5e0>
 8018dc6:	ed9d 6b08 	vldr	d6, [sp, #32]
 8018dca:	ed91 7b00 	vldr	d7, [r1]
 8018dce:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018dd2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018dd6:	2001      	movs	r0, #1
 8018dd8:	1052      	asrs	r2, r2, #1
 8018dda:	f101 0108 	add.w	r1, r1, #8
 8018dde:	d1f0      	bne.n	8018dc2 <_strtod_l+0x5ca>
 8018de0:	b108      	cbz	r0, 8018de6 <_strtod_l+0x5ee>
 8018de2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8018de6:	9a04      	ldr	r2, [sp, #16]
 8018de8:	b1ba      	cbz	r2, 8018e1a <_strtod_l+0x622>
 8018dea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8018dee:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8018df2:	2a00      	cmp	r2, #0
 8018df4:	4649      	mov	r1, r9
 8018df6:	dd10      	ble.n	8018e1a <_strtod_l+0x622>
 8018df8:	2a1f      	cmp	r2, #31
 8018dfa:	f340 8132 	ble.w	8019062 <_strtod_l+0x86a>
 8018dfe:	2a34      	cmp	r2, #52	; 0x34
 8018e00:	bfde      	ittt	le
 8018e02:	3a20      	suble	r2, #32
 8018e04:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 8018e08:	fa00 f202 	lslle.w	r2, r0, r2
 8018e0c:	f04f 0800 	mov.w	r8, #0
 8018e10:	bfcc      	ite	gt
 8018e12:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8018e16:	ea02 0901 	andle.w	r9, r2, r1
 8018e1a:	ec49 8b17 	vmov	d7, r8, r9
 8018e1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e26:	d0a4      	beq.n	8018d72 <_strtod_l+0x57a>
 8018e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e2a:	9200      	str	r2, [sp, #0]
 8018e2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018e2e:	4632      	mov	r2, r6
 8018e30:	4620      	mov	r0, r4
 8018e32:	f001 f91d 	bl	801a070 <__s2b>
 8018e36:	900a      	str	r0, [sp, #40]	; 0x28
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	f43f af25 	beq.w	8018c88 <_strtod_l+0x490>
 8018e3e:	9b06      	ldr	r3, [sp, #24]
 8018e40:	ebab 0505 	sub.w	r5, fp, r5
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	bfb4      	ite	lt
 8018e48:	462b      	movlt	r3, r5
 8018e4a:	2300      	movge	r3, #0
 8018e4c:	930c      	str	r3, [sp, #48]	; 0x30
 8018e4e:	9b06      	ldr	r3, [sp, #24]
 8018e50:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80190a8 <_strtod_l+0x8b0>
 8018e54:	ed9f ab96 	vldr	d10, [pc, #600]	; 80190b0 <_strtod_l+0x8b8>
 8018e58:	ed9f bb97 	vldr	d11, [pc, #604]	; 80190b8 <_strtod_l+0x8c0>
 8018e5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018e60:	2500      	movs	r5, #0
 8018e62:	9312      	str	r3, [sp, #72]	; 0x48
 8018e64:	462e      	mov	r6, r5
 8018e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e68:	4620      	mov	r0, r4
 8018e6a:	6859      	ldr	r1, [r3, #4]
 8018e6c:	f001 f854 	bl	8019f18 <_Balloc>
 8018e70:	4607      	mov	r7, r0
 8018e72:	2800      	cmp	r0, #0
 8018e74:	f43f af0c 	beq.w	8018c90 <_strtod_l+0x498>
 8018e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e7a:	691a      	ldr	r2, [r3, #16]
 8018e7c:	3202      	adds	r2, #2
 8018e7e:	f103 010c 	add.w	r1, r3, #12
 8018e82:	0092      	lsls	r2, r2, #2
 8018e84:	300c      	adds	r0, #12
 8018e86:	f7ff fa41 	bl	801830c <memcpy>
 8018e8a:	ec49 8b10 	vmov	d0, r8, r9
 8018e8e:	aa1a      	add	r2, sp, #104	; 0x68
 8018e90:	a919      	add	r1, sp, #100	; 0x64
 8018e92:	4620      	mov	r0, r4
 8018e94:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8018e98:	f001 fc26 	bl	801a6e8 <__d2b>
 8018e9c:	9018      	str	r0, [sp, #96]	; 0x60
 8018e9e:	2800      	cmp	r0, #0
 8018ea0:	f43f aef6 	beq.w	8018c90 <_strtod_l+0x498>
 8018ea4:	2101      	movs	r1, #1
 8018ea6:	4620      	mov	r0, r4
 8018ea8:	f001 f97c 	bl	801a1a4 <__i2b>
 8018eac:	4606      	mov	r6, r0
 8018eae:	2800      	cmp	r0, #0
 8018eb0:	f43f aeee 	beq.w	8018c90 <_strtod_l+0x498>
 8018eb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018eb6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	bfab      	itete	ge
 8018ebc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8018ebe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8018ec0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8018ec4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8018ec8:	bfac      	ite	ge
 8018eca:	eb03 0b02 	addge.w	fp, r3, r2
 8018ece:	eba2 0a03 	sublt.w	sl, r2, r3
 8018ed2:	9a04      	ldr	r2, [sp, #16]
 8018ed4:	1a9b      	subs	r3, r3, r2
 8018ed6:	440b      	add	r3, r1
 8018ed8:	4a7a      	ldr	r2, [pc, #488]	; (80190c4 <_strtod_l+0x8cc>)
 8018eda:	3b01      	subs	r3, #1
 8018edc:	4293      	cmp	r3, r2
 8018ede:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8018ee2:	f280 80d1 	bge.w	8019088 <_strtod_l+0x890>
 8018ee6:	1ad2      	subs	r2, r2, r3
 8018ee8:	2a1f      	cmp	r2, #31
 8018eea:	eba1 0102 	sub.w	r1, r1, r2
 8018eee:	f04f 0001 	mov.w	r0, #1
 8018ef2:	f300 80bd 	bgt.w	8019070 <_strtod_l+0x878>
 8018ef6:	fa00 f302 	lsl.w	r3, r0, r2
 8018efa:	930e      	str	r3, [sp, #56]	; 0x38
 8018efc:	2300      	movs	r3, #0
 8018efe:	930d      	str	r3, [sp, #52]	; 0x34
 8018f00:	eb0b 0301 	add.w	r3, fp, r1
 8018f04:	9a04      	ldr	r2, [sp, #16]
 8018f06:	459b      	cmp	fp, r3
 8018f08:	448a      	add	sl, r1
 8018f0a:	4492      	add	sl, r2
 8018f0c:	465a      	mov	r2, fp
 8018f0e:	bfa8      	it	ge
 8018f10:	461a      	movge	r2, r3
 8018f12:	4552      	cmp	r2, sl
 8018f14:	bfa8      	it	ge
 8018f16:	4652      	movge	r2, sl
 8018f18:	2a00      	cmp	r2, #0
 8018f1a:	bfc2      	ittt	gt
 8018f1c:	1a9b      	subgt	r3, r3, r2
 8018f1e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8018f22:	ebab 0b02 	subgt.w	fp, fp, r2
 8018f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018f28:	2a00      	cmp	r2, #0
 8018f2a:	dd18      	ble.n	8018f5e <_strtod_l+0x766>
 8018f2c:	4631      	mov	r1, r6
 8018f2e:	4620      	mov	r0, r4
 8018f30:	9315      	str	r3, [sp, #84]	; 0x54
 8018f32:	f001 f9f3 	bl	801a31c <__pow5mult>
 8018f36:	4606      	mov	r6, r0
 8018f38:	2800      	cmp	r0, #0
 8018f3a:	f43f aea9 	beq.w	8018c90 <_strtod_l+0x498>
 8018f3e:	4601      	mov	r1, r0
 8018f40:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018f42:	4620      	mov	r0, r4
 8018f44:	f001 f944 	bl	801a1d0 <__multiply>
 8018f48:	9014      	str	r0, [sp, #80]	; 0x50
 8018f4a:	2800      	cmp	r0, #0
 8018f4c:	f43f aea0 	beq.w	8018c90 <_strtod_l+0x498>
 8018f50:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018f52:	4620      	mov	r0, r4
 8018f54:	f001 f820 	bl	8019f98 <_Bfree>
 8018f58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018f5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f5c:	9218      	str	r2, [sp, #96]	; 0x60
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	f300 8097 	bgt.w	8019092 <_strtod_l+0x89a>
 8018f64:	9b06      	ldr	r3, [sp, #24]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	dd08      	ble.n	8018f7c <_strtod_l+0x784>
 8018f6a:	4639      	mov	r1, r7
 8018f6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018f6e:	4620      	mov	r0, r4
 8018f70:	f001 f9d4 	bl	801a31c <__pow5mult>
 8018f74:	4607      	mov	r7, r0
 8018f76:	2800      	cmp	r0, #0
 8018f78:	f43f ae8a 	beq.w	8018c90 <_strtod_l+0x498>
 8018f7c:	f1ba 0f00 	cmp.w	sl, #0
 8018f80:	dd08      	ble.n	8018f94 <_strtod_l+0x79c>
 8018f82:	4639      	mov	r1, r7
 8018f84:	4652      	mov	r2, sl
 8018f86:	4620      	mov	r0, r4
 8018f88:	f001 fa22 	bl	801a3d0 <__lshift>
 8018f8c:	4607      	mov	r7, r0
 8018f8e:	2800      	cmp	r0, #0
 8018f90:	f43f ae7e 	beq.w	8018c90 <_strtod_l+0x498>
 8018f94:	f1bb 0f00 	cmp.w	fp, #0
 8018f98:	dd08      	ble.n	8018fac <_strtod_l+0x7b4>
 8018f9a:	4631      	mov	r1, r6
 8018f9c:	465a      	mov	r2, fp
 8018f9e:	4620      	mov	r0, r4
 8018fa0:	f001 fa16 	bl	801a3d0 <__lshift>
 8018fa4:	4606      	mov	r6, r0
 8018fa6:	2800      	cmp	r0, #0
 8018fa8:	f43f ae72 	beq.w	8018c90 <_strtod_l+0x498>
 8018fac:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018fae:	463a      	mov	r2, r7
 8018fb0:	4620      	mov	r0, r4
 8018fb2:	f001 fa95 	bl	801a4e0 <__mdiff>
 8018fb6:	4605      	mov	r5, r0
 8018fb8:	2800      	cmp	r0, #0
 8018fba:	f43f ae69 	beq.w	8018c90 <_strtod_l+0x498>
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8018fc4:	60c3      	str	r3, [r0, #12]
 8018fc6:	4631      	mov	r1, r6
 8018fc8:	f001 fa6e 	bl	801a4a8 <__mcmp>
 8018fcc:	2800      	cmp	r0, #0
 8018fce:	da7f      	bge.n	80190d0 <_strtod_l+0x8d8>
 8018fd0:	ea5a 0308 	orrs.w	r3, sl, r8
 8018fd4:	f040 80a5 	bne.w	8019122 <_strtod_l+0x92a>
 8018fd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	f040 80a0 	bne.w	8019122 <_strtod_l+0x92a>
 8018fe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018fe6:	0d1b      	lsrs	r3, r3, #20
 8018fe8:	051b      	lsls	r3, r3, #20
 8018fea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018fee:	f240 8098 	bls.w	8019122 <_strtod_l+0x92a>
 8018ff2:	696b      	ldr	r3, [r5, #20]
 8018ff4:	b91b      	cbnz	r3, 8018ffe <_strtod_l+0x806>
 8018ff6:	692b      	ldr	r3, [r5, #16]
 8018ff8:	2b01      	cmp	r3, #1
 8018ffa:	f340 8092 	ble.w	8019122 <_strtod_l+0x92a>
 8018ffe:	4629      	mov	r1, r5
 8019000:	2201      	movs	r2, #1
 8019002:	4620      	mov	r0, r4
 8019004:	f001 f9e4 	bl	801a3d0 <__lshift>
 8019008:	4631      	mov	r1, r6
 801900a:	4605      	mov	r5, r0
 801900c:	f001 fa4c 	bl	801a4a8 <__mcmp>
 8019010:	2800      	cmp	r0, #0
 8019012:	f340 8086 	ble.w	8019122 <_strtod_l+0x92a>
 8019016:	9904      	ldr	r1, [sp, #16]
 8019018:	4a2b      	ldr	r2, [pc, #172]	; (80190c8 <_strtod_l+0x8d0>)
 801901a:	464b      	mov	r3, r9
 801901c:	2900      	cmp	r1, #0
 801901e:	f000 80a1 	beq.w	8019164 <_strtod_l+0x96c>
 8019022:	ea02 0109 	and.w	r1, r2, r9
 8019026:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801902a:	f300 809b 	bgt.w	8019164 <_strtod_l+0x96c>
 801902e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019032:	f77f aea2 	ble.w	8018d7a <_strtod_l+0x582>
 8019036:	4a25      	ldr	r2, [pc, #148]	; (80190cc <_strtod_l+0x8d4>)
 8019038:	2300      	movs	r3, #0
 801903a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801903e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8019042:	ec49 8b17 	vmov	d7, r8, r9
 8019046:	ee27 7b06 	vmul.f64	d7, d7, d6
 801904a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801904e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8019052:	4313      	orrs	r3, r2
 8019054:	bf08      	it	eq
 8019056:	2322      	moveq	r3, #34	; 0x22
 8019058:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801905c:	bf08      	it	eq
 801905e:	6023      	streq	r3, [r4, #0]
 8019060:	e620      	b.n	8018ca4 <_strtod_l+0x4ac>
 8019062:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019066:	fa01 f202 	lsl.w	r2, r1, r2
 801906a:	ea02 0808 	and.w	r8, r2, r8
 801906e:	e6d4      	b.n	8018e1a <_strtod_l+0x622>
 8019070:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8019074:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8019078:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801907c:	33e2      	adds	r3, #226	; 0xe2
 801907e:	fa00 f303 	lsl.w	r3, r0, r3
 8019082:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8019086:	e73b      	b.n	8018f00 <_strtod_l+0x708>
 8019088:	2000      	movs	r0, #0
 801908a:	2301      	movs	r3, #1
 801908c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8019090:	e736      	b.n	8018f00 <_strtod_l+0x708>
 8019092:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019094:	461a      	mov	r2, r3
 8019096:	4620      	mov	r0, r4
 8019098:	f001 f99a 	bl	801a3d0 <__lshift>
 801909c:	9018      	str	r0, [sp, #96]	; 0x60
 801909e:	2800      	cmp	r0, #0
 80190a0:	f47f af60 	bne.w	8018f64 <_strtod_l+0x76c>
 80190a4:	e5f4      	b.n	8018c90 <_strtod_l+0x498>
 80190a6:	bf00      	nop
 80190a8:	94a03595 	.word	0x94a03595
 80190ac:	3fcfffff 	.word	0x3fcfffff
 80190b0:	94a03595 	.word	0x94a03595
 80190b4:	3fdfffff 	.word	0x3fdfffff
 80190b8:	35afe535 	.word	0x35afe535
 80190bc:	3fe00000 	.word	0x3fe00000
 80190c0:	0801ee48 	.word	0x0801ee48
 80190c4:	fffffc02 	.word	0xfffffc02
 80190c8:	7ff00000 	.word	0x7ff00000
 80190cc:	39500000 	.word	0x39500000
 80190d0:	46cb      	mov	fp, r9
 80190d2:	d165      	bne.n	80191a0 <_strtod_l+0x9a8>
 80190d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80190d8:	f1ba 0f00 	cmp.w	sl, #0
 80190dc:	d02a      	beq.n	8019134 <_strtod_l+0x93c>
 80190de:	4aaa      	ldr	r2, [pc, #680]	; (8019388 <_strtod_l+0xb90>)
 80190e0:	4293      	cmp	r3, r2
 80190e2:	d12b      	bne.n	801913c <_strtod_l+0x944>
 80190e4:	9b04      	ldr	r3, [sp, #16]
 80190e6:	4641      	mov	r1, r8
 80190e8:	b1fb      	cbz	r3, 801912a <_strtod_l+0x932>
 80190ea:	4aa8      	ldr	r2, [pc, #672]	; (801938c <_strtod_l+0xb94>)
 80190ec:	ea09 0202 	and.w	r2, r9, r2
 80190f0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80190f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190f8:	d81a      	bhi.n	8019130 <_strtod_l+0x938>
 80190fa:	0d12      	lsrs	r2, r2, #20
 80190fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8019100:	fa00 f303 	lsl.w	r3, r0, r3
 8019104:	4299      	cmp	r1, r3
 8019106:	d119      	bne.n	801913c <_strtod_l+0x944>
 8019108:	4ba1      	ldr	r3, [pc, #644]	; (8019390 <_strtod_l+0xb98>)
 801910a:	459b      	cmp	fp, r3
 801910c:	d102      	bne.n	8019114 <_strtod_l+0x91c>
 801910e:	3101      	adds	r1, #1
 8019110:	f43f adbe 	beq.w	8018c90 <_strtod_l+0x498>
 8019114:	4b9d      	ldr	r3, [pc, #628]	; (801938c <_strtod_l+0xb94>)
 8019116:	ea0b 0303 	and.w	r3, fp, r3
 801911a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801911e:	f04f 0800 	mov.w	r8, #0
 8019122:	9b04      	ldr	r3, [sp, #16]
 8019124:	2b00      	cmp	r3, #0
 8019126:	d186      	bne.n	8019036 <_strtod_l+0x83e>
 8019128:	e5bc      	b.n	8018ca4 <_strtod_l+0x4ac>
 801912a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801912e:	e7e9      	b.n	8019104 <_strtod_l+0x90c>
 8019130:	4603      	mov	r3, r0
 8019132:	e7e7      	b.n	8019104 <_strtod_l+0x90c>
 8019134:	ea53 0308 	orrs.w	r3, r3, r8
 8019138:	f43f af6d 	beq.w	8019016 <_strtod_l+0x81e>
 801913c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801913e:	b1db      	cbz	r3, 8019178 <_strtod_l+0x980>
 8019140:	ea13 0f0b 	tst.w	r3, fp
 8019144:	d0ed      	beq.n	8019122 <_strtod_l+0x92a>
 8019146:	9a04      	ldr	r2, [sp, #16]
 8019148:	4640      	mov	r0, r8
 801914a:	4649      	mov	r1, r9
 801914c:	f1ba 0f00 	cmp.w	sl, #0
 8019150:	d016      	beq.n	8019180 <_strtod_l+0x988>
 8019152:	f7ff fb37 	bl	80187c4 <sulp>
 8019156:	ed9d 7b08 	vldr	d7, [sp, #32]
 801915a:	ee37 7b00 	vadd.f64	d7, d7, d0
 801915e:	ec59 8b17 	vmov	r8, r9, d7
 8019162:	e7de      	b.n	8019122 <_strtod_l+0x92a>
 8019164:	4013      	ands	r3, r2
 8019166:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801916a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801916e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8019172:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019176:	e7d4      	b.n	8019122 <_strtod_l+0x92a>
 8019178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801917a:	ea13 0f08 	tst.w	r3, r8
 801917e:	e7e1      	b.n	8019144 <_strtod_l+0x94c>
 8019180:	f7ff fb20 	bl	80187c4 <sulp>
 8019184:	ed9d 7b08 	vldr	d7, [sp, #32]
 8019188:	ee37 7b40 	vsub.f64	d7, d7, d0
 801918c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019190:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019198:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801919c:	d1c1      	bne.n	8019122 <_strtod_l+0x92a>
 801919e:	e5ec      	b.n	8018d7a <_strtod_l+0x582>
 80191a0:	4631      	mov	r1, r6
 80191a2:	4628      	mov	r0, r5
 80191a4:	f001 fafc 	bl	801a7a0 <__ratio>
 80191a8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80191ac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80191b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191b4:	d867      	bhi.n	8019286 <_strtod_l+0xa8e>
 80191b6:	f1ba 0f00 	cmp.w	sl, #0
 80191ba:	d044      	beq.n	8019246 <_strtod_l+0xa4e>
 80191bc:	4b75      	ldr	r3, [pc, #468]	; (8019394 <_strtod_l+0xb9c>)
 80191be:	2200      	movs	r2, #0
 80191c0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80191c4:	4971      	ldr	r1, [pc, #452]	; (801938c <_strtod_l+0xb94>)
 80191c6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80193a0 <_strtod_l+0xba8>
 80191ca:	ea0b 0001 	and.w	r0, fp, r1
 80191ce:	4560      	cmp	r0, ip
 80191d0:	900d      	str	r0, [sp, #52]	; 0x34
 80191d2:	f040 808b 	bne.w	80192ec <_strtod_l+0xaf4>
 80191d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80191da:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80191de:	ec49 8b10 	vmov	d0, r8, r9
 80191e2:	ec43 2b1c 	vmov	d12, r2, r3
 80191e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80191ea:	f001 fa01 	bl	801a5f0 <__ulp>
 80191ee:	ec49 8b1d 	vmov	d13, r8, r9
 80191f2:	eeac db00 	vfma.f64	d13, d12, d0
 80191f6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 80191fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80191fc:	4963      	ldr	r1, [pc, #396]	; (801938c <_strtod_l+0xb94>)
 80191fe:	4a66      	ldr	r2, [pc, #408]	; (8019398 <_strtod_l+0xba0>)
 8019200:	4019      	ands	r1, r3
 8019202:	4291      	cmp	r1, r2
 8019204:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8019208:	d947      	bls.n	801929a <_strtod_l+0xaa2>
 801920a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801920c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8019210:	4293      	cmp	r3, r2
 8019212:	d103      	bne.n	801921c <_strtod_l+0xa24>
 8019214:	9b08      	ldr	r3, [sp, #32]
 8019216:	3301      	adds	r3, #1
 8019218:	f43f ad3a 	beq.w	8018c90 <_strtod_l+0x498>
 801921c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8019390 <_strtod_l+0xb98>
 8019220:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019224:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019226:	4620      	mov	r0, r4
 8019228:	f000 feb6 	bl	8019f98 <_Bfree>
 801922c:	4639      	mov	r1, r7
 801922e:	4620      	mov	r0, r4
 8019230:	f000 feb2 	bl	8019f98 <_Bfree>
 8019234:	4631      	mov	r1, r6
 8019236:	4620      	mov	r0, r4
 8019238:	f000 feae 	bl	8019f98 <_Bfree>
 801923c:	4629      	mov	r1, r5
 801923e:	4620      	mov	r0, r4
 8019240:	f000 feaa 	bl	8019f98 <_Bfree>
 8019244:	e60f      	b.n	8018e66 <_strtod_l+0x66e>
 8019246:	f1b8 0f00 	cmp.w	r8, #0
 801924a:	d112      	bne.n	8019272 <_strtod_l+0xa7a>
 801924c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019250:	b9b3      	cbnz	r3, 8019280 <_strtod_l+0xa88>
 8019252:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8019256:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801925a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801925e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8019262:	d401      	bmi.n	8019268 <_strtod_l+0xa70>
 8019264:	ee20 8b08 	vmul.f64	d8, d0, d8
 8019268:	eeb1 7b48 	vneg.f64	d7, d8
 801926c:	ec53 2b17 	vmov	r2, r3, d7
 8019270:	e7a8      	b.n	80191c4 <_strtod_l+0x9cc>
 8019272:	f1b8 0f01 	cmp.w	r8, #1
 8019276:	d103      	bne.n	8019280 <_strtod_l+0xa88>
 8019278:	f1b9 0f00 	cmp.w	r9, #0
 801927c:	f43f ad7d 	beq.w	8018d7a <_strtod_l+0x582>
 8019280:	4b46      	ldr	r3, [pc, #280]	; (801939c <_strtod_l+0xba4>)
 8019282:	2200      	movs	r2, #0
 8019284:	e79c      	b.n	80191c0 <_strtod_l+0x9c8>
 8019286:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801928a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801928e:	f1ba 0f00 	cmp.w	sl, #0
 8019292:	d0e9      	beq.n	8019268 <_strtod_l+0xa70>
 8019294:	ec53 2b18 	vmov	r2, r3, d8
 8019298:	e794      	b.n	80191c4 <_strtod_l+0x9cc>
 801929a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801929e:	9b04      	ldr	r3, [sp, #16]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d1bf      	bne.n	8019224 <_strtod_l+0xa2c>
 80192a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80192a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80192aa:	0d1b      	lsrs	r3, r3, #20
 80192ac:	051b      	lsls	r3, r3, #20
 80192ae:	429a      	cmp	r2, r3
 80192b0:	d1b8      	bne.n	8019224 <_strtod_l+0xa2c>
 80192b2:	ec51 0b18 	vmov	r0, r1, d8
 80192b6:	f7e7 fa37 	bl	8000728 <__aeabi_d2lz>
 80192ba:	f7e7 fa07 	bl	80006cc <__aeabi_l2d>
 80192be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80192c2:	ec41 0b17 	vmov	d7, r0, r1
 80192c6:	ea43 0308 	orr.w	r3, r3, r8
 80192ca:	ea53 030a 	orrs.w	r3, r3, sl
 80192ce:	ee38 8b47 	vsub.f64	d8, d8, d7
 80192d2:	d03e      	beq.n	8019352 <_strtod_l+0xb5a>
 80192d4:	eeb4 8bca 	vcmpe.f64	d8, d10
 80192d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192dc:	f53f ace2 	bmi.w	8018ca4 <_strtod_l+0x4ac>
 80192e0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80192e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192e8:	dd9c      	ble.n	8019224 <_strtod_l+0xa2c>
 80192ea:	e4db      	b.n	8018ca4 <_strtod_l+0x4ac>
 80192ec:	9904      	ldr	r1, [sp, #16]
 80192ee:	b301      	cbz	r1, 8019332 <_strtod_l+0xb3a>
 80192f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80192f2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80192f6:	d81c      	bhi.n	8019332 <_strtod_l+0xb3a>
 80192f8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8019380 <_strtod_l+0xb88>
 80192fc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019304:	d811      	bhi.n	801932a <_strtod_l+0xb32>
 8019306:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801930a:	ee18 3a10 	vmov	r3, s16
 801930e:	2b01      	cmp	r3, #1
 8019310:	bf38      	it	cc
 8019312:	2301      	movcc	r3, #1
 8019314:	ee08 3a10 	vmov	s16, r3
 8019318:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801931c:	f1ba 0f00 	cmp.w	sl, #0
 8019320:	d114      	bne.n	801934c <_strtod_l+0xb54>
 8019322:	eeb1 7b48 	vneg.f64	d7, d8
 8019326:	ec53 2b17 	vmov	r2, r3, d7
 801932a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801932c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8019330:	1a0b      	subs	r3, r1, r0
 8019332:	ed9d 0b08 	vldr	d0, [sp, #32]
 8019336:	ec43 2b1c 	vmov	d12, r2, r3
 801933a:	f001 f959 	bl	801a5f0 <__ulp>
 801933e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8019342:	eeac 7b00 	vfma.f64	d7, d12, d0
 8019346:	ec59 8b17 	vmov	r8, r9, d7
 801934a:	e7a8      	b.n	801929e <_strtod_l+0xaa6>
 801934c:	ec53 2b18 	vmov	r2, r3, d8
 8019350:	e7eb      	b.n	801932a <_strtod_l+0xb32>
 8019352:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8019356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801935a:	f57f af63 	bpl.w	8019224 <_strtod_l+0xa2c>
 801935e:	e4a1      	b.n	8018ca4 <_strtod_l+0x4ac>
 8019360:	2300      	movs	r3, #0
 8019362:	930b      	str	r3, [sp, #44]	; 0x2c
 8019364:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019366:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019368:	6013      	str	r3, [r2, #0]
 801936a:	f7ff ba8d 	b.w	8018888 <_strtod_l+0x90>
 801936e:	2a65      	cmp	r2, #101	; 0x65
 8019370:	f43f ab89 	beq.w	8018a86 <_strtod_l+0x28e>
 8019374:	2a45      	cmp	r2, #69	; 0x45
 8019376:	f43f ab86 	beq.w	8018a86 <_strtod_l+0x28e>
 801937a:	2101      	movs	r1, #1
 801937c:	f7ff bbbe 	b.w	8018afc <_strtod_l+0x304>
 8019380:	ffc00000 	.word	0xffc00000
 8019384:	41dfffff 	.word	0x41dfffff
 8019388:	000fffff 	.word	0x000fffff
 801938c:	7ff00000 	.word	0x7ff00000
 8019390:	7fefffff 	.word	0x7fefffff
 8019394:	3ff00000 	.word	0x3ff00000
 8019398:	7c9fffff 	.word	0x7c9fffff
 801939c:	bff00000 	.word	0xbff00000
 80193a0:	7fe00000 	.word	0x7fe00000

080193a4 <strtod>:
 80193a4:	460a      	mov	r2, r1
 80193a6:	4601      	mov	r1, r0
 80193a8:	4802      	ldr	r0, [pc, #8]	; (80193b4 <strtod+0x10>)
 80193aa:	4b03      	ldr	r3, [pc, #12]	; (80193b8 <strtod+0x14>)
 80193ac:	6800      	ldr	r0, [r0, #0]
 80193ae:	f7ff ba23 	b.w	80187f8 <_strtod_l>
 80193b2:	bf00      	nop
 80193b4:	24000064 	.word	0x24000064
 80193b8:	240000d0 	.word	0x240000d0

080193bc <_strtol_l.isra.0>:
 80193bc:	2b01      	cmp	r3, #1
 80193be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193c2:	d001      	beq.n	80193c8 <_strtol_l.isra.0+0xc>
 80193c4:	2b24      	cmp	r3, #36	; 0x24
 80193c6:	d906      	bls.n	80193d6 <_strtol_l.isra.0+0x1a>
 80193c8:	f000 f97e 	bl	80196c8 <__errno>
 80193cc:	2316      	movs	r3, #22
 80193ce:	6003      	str	r3, [r0, #0]
 80193d0:	2000      	movs	r0, #0
 80193d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193d6:	4f3a      	ldr	r7, [pc, #232]	; (80194c0 <_strtol_l.isra.0+0x104>)
 80193d8:	468e      	mov	lr, r1
 80193da:	4676      	mov	r6, lr
 80193dc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80193e0:	5de5      	ldrb	r5, [r4, r7]
 80193e2:	f015 0508 	ands.w	r5, r5, #8
 80193e6:	d1f8      	bne.n	80193da <_strtol_l.isra.0+0x1e>
 80193e8:	2c2d      	cmp	r4, #45	; 0x2d
 80193ea:	d134      	bne.n	8019456 <_strtol_l.isra.0+0x9a>
 80193ec:	f89e 4000 	ldrb.w	r4, [lr]
 80193f0:	f04f 0801 	mov.w	r8, #1
 80193f4:	f106 0e02 	add.w	lr, r6, #2
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d05c      	beq.n	80194b6 <_strtol_l.isra.0+0xfa>
 80193fc:	2b10      	cmp	r3, #16
 80193fe:	d10c      	bne.n	801941a <_strtol_l.isra.0+0x5e>
 8019400:	2c30      	cmp	r4, #48	; 0x30
 8019402:	d10a      	bne.n	801941a <_strtol_l.isra.0+0x5e>
 8019404:	f89e 4000 	ldrb.w	r4, [lr]
 8019408:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801940c:	2c58      	cmp	r4, #88	; 0x58
 801940e:	d14d      	bne.n	80194ac <_strtol_l.isra.0+0xf0>
 8019410:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8019414:	2310      	movs	r3, #16
 8019416:	f10e 0e02 	add.w	lr, lr, #2
 801941a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801941e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8019422:	2600      	movs	r6, #0
 8019424:	fbbc f9f3 	udiv	r9, ip, r3
 8019428:	4635      	mov	r5, r6
 801942a:	fb03 ca19 	mls	sl, r3, r9, ip
 801942e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019432:	2f09      	cmp	r7, #9
 8019434:	d818      	bhi.n	8019468 <_strtol_l.isra.0+0xac>
 8019436:	463c      	mov	r4, r7
 8019438:	42a3      	cmp	r3, r4
 801943a:	dd24      	ble.n	8019486 <_strtol_l.isra.0+0xca>
 801943c:	2e00      	cmp	r6, #0
 801943e:	db1f      	blt.n	8019480 <_strtol_l.isra.0+0xc4>
 8019440:	45a9      	cmp	r9, r5
 8019442:	d31d      	bcc.n	8019480 <_strtol_l.isra.0+0xc4>
 8019444:	d101      	bne.n	801944a <_strtol_l.isra.0+0x8e>
 8019446:	45a2      	cmp	sl, r4
 8019448:	db1a      	blt.n	8019480 <_strtol_l.isra.0+0xc4>
 801944a:	fb05 4503 	mla	r5, r5, r3, r4
 801944e:	2601      	movs	r6, #1
 8019450:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8019454:	e7eb      	b.n	801942e <_strtol_l.isra.0+0x72>
 8019456:	2c2b      	cmp	r4, #43	; 0x2b
 8019458:	bf08      	it	eq
 801945a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801945e:	46a8      	mov	r8, r5
 8019460:	bf08      	it	eq
 8019462:	f106 0e02 	addeq.w	lr, r6, #2
 8019466:	e7c7      	b.n	80193f8 <_strtol_l.isra.0+0x3c>
 8019468:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801946c:	2f19      	cmp	r7, #25
 801946e:	d801      	bhi.n	8019474 <_strtol_l.isra.0+0xb8>
 8019470:	3c37      	subs	r4, #55	; 0x37
 8019472:	e7e1      	b.n	8019438 <_strtol_l.isra.0+0x7c>
 8019474:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019478:	2f19      	cmp	r7, #25
 801947a:	d804      	bhi.n	8019486 <_strtol_l.isra.0+0xca>
 801947c:	3c57      	subs	r4, #87	; 0x57
 801947e:	e7db      	b.n	8019438 <_strtol_l.isra.0+0x7c>
 8019480:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8019484:	e7e4      	b.n	8019450 <_strtol_l.isra.0+0x94>
 8019486:	2e00      	cmp	r6, #0
 8019488:	da05      	bge.n	8019496 <_strtol_l.isra.0+0xda>
 801948a:	2322      	movs	r3, #34	; 0x22
 801948c:	6003      	str	r3, [r0, #0]
 801948e:	4665      	mov	r5, ip
 8019490:	b942      	cbnz	r2, 80194a4 <_strtol_l.isra.0+0xe8>
 8019492:	4628      	mov	r0, r5
 8019494:	e79d      	b.n	80193d2 <_strtol_l.isra.0+0x16>
 8019496:	f1b8 0f00 	cmp.w	r8, #0
 801949a:	d000      	beq.n	801949e <_strtol_l.isra.0+0xe2>
 801949c:	426d      	negs	r5, r5
 801949e:	2a00      	cmp	r2, #0
 80194a0:	d0f7      	beq.n	8019492 <_strtol_l.isra.0+0xd6>
 80194a2:	b10e      	cbz	r6, 80194a8 <_strtol_l.isra.0+0xec>
 80194a4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80194a8:	6011      	str	r1, [r2, #0]
 80194aa:	e7f2      	b.n	8019492 <_strtol_l.isra.0+0xd6>
 80194ac:	2430      	movs	r4, #48	; 0x30
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d1b3      	bne.n	801941a <_strtol_l.isra.0+0x5e>
 80194b2:	2308      	movs	r3, #8
 80194b4:	e7b1      	b.n	801941a <_strtol_l.isra.0+0x5e>
 80194b6:	2c30      	cmp	r4, #48	; 0x30
 80194b8:	d0a4      	beq.n	8019404 <_strtol_l.isra.0+0x48>
 80194ba:	230a      	movs	r3, #10
 80194bc:	e7ad      	b.n	801941a <_strtol_l.isra.0+0x5e>
 80194be:	bf00      	nop
 80194c0:	0801ec37 	.word	0x0801ec37

080194c4 <_strtol_r>:
 80194c4:	f7ff bf7a 	b.w	80193bc <_strtol_l.isra.0>

080194c8 <__swbuf_r>:
 80194c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194ca:	460e      	mov	r6, r1
 80194cc:	4614      	mov	r4, r2
 80194ce:	4605      	mov	r5, r0
 80194d0:	b118      	cbz	r0, 80194da <__swbuf_r+0x12>
 80194d2:	6983      	ldr	r3, [r0, #24]
 80194d4:	b90b      	cbnz	r3, 80194da <__swbuf_r+0x12>
 80194d6:	f7fe fd47 	bl	8017f68 <__sinit>
 80194da:	4b21      	ldr	r3, [pc, #132]	; (8019560 <__swbuf_r+0x98>)
 80194dc:	429c      	cmp	r4, r3
 80194de:	d12b      	bne.n	8019538 <__swbuf_r+0x70>
 80194e0:	686c      	ldr	r4, [r5, #4]
 80194e2:	69a3      	ldr	r3, [r4, #24]
 80194e4:	60a3      	str	r3, [r4, #8]
 80194e6:	89a3      	ldrh	r3, [r4, #12]
 80194e8:	071a      	lsls	r2, r3, #28
 80194ea:	d52f      	bpl.n	801954c <__swbuf_r+0x84>
 80194ec:	6923      	ldr	r3, [r4, #16]
 80194ee:	b36b      	cbz	r3, 801954c <__swbuf_r+0x84>
 80194f0:	6923      	ldr	r3, [r4, #16]
 80194f2:	6820      	ldr	r0, [r4, #0]
 80194f4:	1ac0      	subs	r0, r0, r3
 80194f6:	6963      	ldr	r3, [r4, #20]
 80194f8:	b2f6      	uxtb	r6, r6
 80194fa:	4283      	cmp	r3, r0
 80194fc:	4637      	mov	r7, r6
 80194fe:	dc04      	bgt.n	801950a <__swbuf_r+0x42>
 8019500:	4621      	mov	r1, r4
 8019502:	4628      	mov	r0, r5
 8019504:	f7fe fc9c 	bl	8017e40 <_fflush_r>
 8019508:	bb30      	cbnz	r0, 8019558 <__swbuf_r+0x90>
 801950a:	68a3      	ldr	r3, [r4, #8]
 801950c:	3b01      	subs	r3, #1
 801950e:	60a3      	str	r3, [r4, #8]
 8019510:	6823      	ldr	r3, [r4, #0]
 8019512:	1c5a      	adds	r2, r3, #1
 8019514:	6022      	str	r2, [r4, #0]
 8019516:	701e      	strb	r6, [r3, #0]
 8019518:	6963      	ldr	r3, [r4, #20]
 801951a:	3001      	adds	r0, #1
 801951c:	4283      	cmp	r3, r0
 801951e:	d004      	beq.n	801952a <__swbuf_r+0x62>
 8019520:	89a3      	ldrh	r3, [r4, #12]
 8019522:	07db      	lsls	r3, r3, #31
 8019524:	d506      	bpl.n	8019534 <__swbuf_r+0x6c>
 8019526:	2e0a      	cmp	r6, #10
 8019528:	d104      	bne.n	8019534 <__swbuf_r+0x6c>
 801952a:	4621      	mov	r1, r4
 801952c:	4628      	mov	r0, r5
 801952e:	f7fe fc87 	bl	8017e40 <_fflush_r>
 8019532:	b988      	cbnz	r0, 8019558 <__swbuf_r+0x90>
 8019534:	4638      	mov	r0, r7
 8019536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019538:	4b0a      	ldr	r3, [pc, #40]	; (8019564 <__swbuf_r+0x9c>)
 801953a:	429c      	cmp	r4, r3
 801953c:	d101      	bne.n	8019542 <__swbuf_r+0x7a>
 801953e:	68ac      	ldr	r4, [r5, #8]
 8019540:	e7cf      	b.n	80194e2 <__swbuf_r+0x1a>
 8019542:	4b09      	ldr	r3, [pc, #36]	; (8019568 <__swbuf_r+0xa0>)
 8019544:	429c      	cmp	r4, r3
 8019546:	bf08      	it	eq
 8019548:	68ec      	ldreq	r4, [r5, #12]
 801954a:	e7ca      	b.n	80194e2 <__swbuf_r+0x1a>
 801954c:	4621      	mov	r1, r4
 801954e:	4628      	mov	r0, r5
 8019550:	f000 f81e 	bl	8019590 <__swsetup_r>
 8019554:	2800      	cmp	r0, #0
 8019556:	d0cb      	beq.n	80194f0 <__swbuf_r+0x28>
 8019558:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801955c:	e7ea      	b.n	8019534 <__swbuf_r+0x6c>
 801955e:	bf00      	nop
 8019560:	0801ed58 	.word	0x0801ed58
 8019564:	0801ed78 	.word	0x0801ed78
 8019568:	0801ed38 	.word	0x0801ed38

0801956c <_write_r>:
 801956c:	b538      	push	{r3, r4, r5, lr}
 801956e:	4d07      	ldr	r5, [pc, #28]	; (801958c <_write_r+0x20>)
 8019570:	4604      	mov	r4, r0
 8019572:	4608      	mov	r0, r1
 8019574:	4611      	mov	r1, r2
 8019576:	2200      	movs	r2, #0
 8019578:	602a      	str	r2, [r5, #0]
 801957a:	461a      	mov	r2, r3
 801957c:	f7e7 fcdb 	bl	8000f36 <_write>
 8019580:	1c43      	adds	r3, r0, #1
 8019582:	d102      	bne.n	801958a <_write_r+0x1e>
 8019584:	682b      	ldr	r3, [r5, #0]
 8019586:	b103      	cbz	r3, 801958a <_write_r+0x1e>
 8019588:	6023      	str	r3, [r4, #0]
 801958a:	bd38      	pop	{r3, r4, r5, pc}
 801958c:	2400ee5c 	.word	0x2400ee5c

08019590 <__swsetup_r>:
 8019590:	4b32      	ldr	r3, [pc, #200]	; (801965c <__swsetup_r+0xcc>)
 8019592:	b570      	push	{r4, r5, r6, lr}
 8019594:	681d      	ldr	r5, [r3, #0]
 8019596:	4606      	mov	r6, r0
 8019598:	460c      	mov	r4, r1
 801959a:	b125      	cbz	r5, 80195a6 <__swsetup_r+0x16>
 801959c:	69ab      	ldr	r3, [r5, #24]
 801959e:	b913      	cbnz	r3, 80195a6 <__swsetup_r+0x16>
 80195a0:	4628      	mov	r0, r5
 80195a2:	f7fe fce1 	bl	8017f68 <__sinit>
 80195a6:	4b2e      	ldr	r3, [pc, #184]	; (8019660 <__swsetup_r+0xd0>)
 80195a8:	429c      	cmp	r4, r3
 80195aa:	d10f      	bne.n	80195cc <__swsetup_r+0x3c>
 80195ac:	686c      	ldr	r4, [r5, #4]
 80195ae:	89a3      	ldrh	r3, [r4, #12]
 80195b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80195b4:	0719      	lsls	r1, r3, #28
 80195b6:	d42c      	bmi.n	8019612 <__swsetup_r+0x82>
 80195b8:	06dd      	lsls	r5, r3, #27
 80195ba:	d411      	bmi.n	80195e0 <__swsetup_r+0x50>
 80195bc:	2309      	movs	r3, #9
 80195be:	6033      	str	r3, [r6, #0]
 80195c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80195c4:	81a3      	strh	r3, [r4, #12]
 80195c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80195ca:	e03e      	b.n	801964a <__swsetup_r+0xba>
 80195cc:	4b25      	ldr	r3, [pc, #148]	; (8019664 <__swsetup_r+0xd4>)
 80195ce:	429c      	cmp	r4, r3
 80195d0:	d101      	bne.n	80195d6 <__swsetup_r+0x46>
 80195d2:	68ac      	ldr	r4, [r5, #8]
 80195d4:	e7eb      	b.n	80195ae <__swsetup_r+0x1e>
 80195d6:	4b24      	ldr	r3, [pc, #144]	; (8019668 <__swsetup_r+0xd8>)
 80195d8:	429c      	cmp	r4, r3
 80195da:	bf08      	it	eq
 80195dc:	68ec      	ldreq	r4, [r5, #12]
 80195de:	e7e6      	b.n	80195ae <__swsetup_r+0x1e>
 80195e0:	0758      	lsls	r0, r3, #29
 80195e2:	d512      	bpl.n	801960a <__swsetup_r+0x7a>
 80195e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80195e6:	b141      	cbz	r1, 80195fa <__swsetup_r+0x6a>
 80195e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80195ec:	4299      	cmp	r1, r3
 80195ee:	d002      	beq.n	80195f6 <__swsetup_r+0x66>
 80195f0:	4630      	mov	r0, r6
 80195f2:	f7fe febb 	bl	801836c <_free_r>
 80195f6:	2300      	movs	r3, #0
 80195f8:	6363      	str	r3, [r4, #52]	; 0x34
 80195fa:	89a3      	ldrh	r3, [r4, #12]
 80195fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019600:	81a3      	strh	r3, [r4, #12]
 8019602:	2300      	movs	r3, #0
 8019604:	6063      	str	r3, [r4, #4]
 8019606:	6923      	ldr	r3, [r4, #16]
 8019608:	6023      	str	r3, [r4, #0]
 801960a:	89a3      	ldrh	r3, [r4, #12]
 801960c:	f043 0308 	orr.w	r3, r3, #8
 8019610:	81a3      	strh	r3, [r4, #12]
 8019612:	6923      	ldr	r3, [r4, #16]
 8019614:	b94b      	cbnz	r3, 801962a <__swsetup_r+0x9a>
 8019616:	89a3      	ldrh	r3, [r4, #12]
 8019618:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801961c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019620:	d003      	beq.n	801962a <__swsetup_r+0x9a>
 8019622:	4621      	mov	r1, r4
 8019624:	4630      	mov	r0, r6
 8019626:	f7fe fe13 	bl	8018250 <__smakebuf_r>
 801962a:	89a0      	ldrh	r0, [r4, #12]
 801962c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019630:	f010 0301 	ands.w	r3, r0, #1
 8019634:	d00a      	beq.n	801964c <__swsetup_r+0xbc>
 8019636:	2300      	movs	r3, #0
 8019638:	60a3      	str	r3, [r4, #8]
 801963a:	6963      	ldr	r3, [r4, #20]
 801963c:	425b      	negs	r3, r3
 801963e:	61a3      	str	r3, [r4, #24]
 8019640:	6923      	ldr	r3, [r4, #16]
 8019642:	b943      	cbnz	r3, 8019656 <__swsetup_r+0xc6>
 8019644:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019648:	d1ba      	bne.n	80195c0 <__swsetup_r+0x30>
 801964a:	bd70      	pop	{r4, r5, r6, pc}
 801964c:	0781      	lsls	r1, r0, #30
 801964e:	bf58      	it	pl
 8019650:	6963      	ldrpl	r3, [r4, #20]
 8019652:	60a3      	str	r3, [r4, #8]
 8019654:	e7f4      	b.n	8019640 <__swsetup_r+0xb0>
 8019656:	2000      	movs	r0, #0
 8019658:	e7f7      	b.n	801964a <__swsetup_r+0xba>
 801965a:	bf00      	nop
 801965c:	24000064 	.word	0x24000064
 8019660:	0801ed58 	.word	0x0801ed58
 8019664:	0801ed78 	.word	0x0801ed78
 8019668:	0801ed38 	.word	0x0801ed38

0801966c <__assert_func>:
 801966c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801966e:	4614      	mov	r4, r2
 8019670:	461a      	mov	r2, r3
 8019672:	4b09      	ldr	r3, [pc, #36]	; (8019698 <__assert_func+0x2c>)
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	4605      	mov	r5, r0
 8019678:	68d8      	ldr	r0, [r3, #12]
 801967a:	b14c      	cbz	r4, 8019690 <__assert_func+0x24>
 801967c:	4b07      	ldr	r3, [pc, #28]	; (801969c <__assert_func+0x30>)
 801967e:	9100      	str	r1, [sp, #0]
 8019680:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019684:	4906      	ldr	r1, [pc, #24]	; (80196a0 <__assert_func+0x34>)
 8019686:	462b      	mov	r3, r5
 8019688:	f000 f824 	bl	80196d4 <fiprintf>
 801968c:	f002 f98f 	bl	801b9ae <abort>
 8019690:	4b04      	ldr	r3, [pc, #16]	; (80196a4 <__assert_func+0x38>)
 8019692:	461c      	mov	r4, r3
 8019694:	e7f3      	b.n	801967e <__assert_func+0x12>
 8019696:	bf00      	nop
 8019698:	24000064 	.word	0x24000064
 801969c:	0801ee70 	.word	0x0801ee70
 80196a0:	0801ee7d 	.word	0x0801ee7d
 80196a4:	0801eeab 	.word	0x0801eeab

080196a8 <_close_r>:
 80196a8:	b538      	push	{r3, r4, r5, lr}
 80196aa:	4d06      	ldr	r5, [pc, #24]	; (80196c4 <_close_r+0x1c>)
 80196ac:	2300      	movs	r3, #0
 80196ae:	4604      	mov	r4, r0
 80196b0:	4608      	mov	r0, r1
 80196b2:	602b      	str	r3, [r5, #0]
 80196b4:	f7e7 fc5b 	bl	8000f6e <_close>
 80196b8:	1c43      	adds	r3, r0, #1
 80196ba:	d102      	bne.n	80196c2 <_close_r+0x1a>
 80196bc:	682b      	ldr	r3, [r5, #0]
 80196be:	b103      	cbz	r3, 80196c2 <_close_r+0x1a>
 80196c0:	6023      	str	r3, [r4, #0]
 80196c2:	bd38      	pop	{r3, r4, r5, pc}
 80196c4:	2400ee5c 	.word	0x2400ee5c

080196c8 <__errno>:
 80196c8:	4b01      	ldr	r3, [pc, #4]	; (80196d0 <__errno+0x8>)
 80196ca:	6818      	ldr	r0, [r3, #0]
 80196cc:	4770      	bx	lr
 80196ce:	bf00      	nop
 80196d0:	24000064 	.word	0x24000064

080196d4 <fiprintf>:
 80196d4:	b40e      	push	{r1, r2, r3}
 80196d6:	b503      	push	{r0, r1, lr}
 80196d8:	4601      	mov	r1, r0
 80196da:	ab03      	add	r3, sp, #12
 80196dc:	4805      	ldr	r0, [pc, #20]	; (80196f4 <fiprintf+0x20>)
 80196de:	f853 2b04 	ldr.w	r2, [r3], #4
 80196e2:	6800      	ldr	r0, [r0, #0]
 80196e4:	9301      	str	r3, [sp, #4]
 80196e6:	f001 fc39 	bl	801af5c <_vfiprintf_r>
 80196ea:	b002      	add	sp, #8
 80196ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80196f0:	b003      	add	sp, #12
 80196f2:	4770      	bx	lr
 80196f4:	24000064 	.word	0x24000064

080196f8 <_fstat_r>:
 80196f8:	b538      	push	{r3, r4, r5, lr}
 80196fa:	4d07      	ldr	r5, [pc, #28]	; (8019718 <_fstat_r+0x20>)
 80196fc:	2300      	movs	r3, #0
 80196fe:	4604      	mov	r4, r0
 8019700:	4608      	mov	r0, r1
 8019702:	4611      	mov	r1, r2
 8019704:	602b      	str	r3, [r5, #0]
 8019706:	f7e7 fc3e 	bl	8000f86 <_fstat>
 801970a:	1c43      	adds	r3, r0, #1
 801970c:	d102      	bne.n	8019714 <_fstat_r+0x1c>
 801970e:	682b      	ldr	r3, [r5, #0]
 8019710:	b103      	cbz	r3, 8019714 <_fstat_r+0x1c>
 8019712:	6023      	str	r3, [r4, #0]
 8019714:	bd38      	pop	{r3, r4, r5, pc}
 8019716:	bf00      	nop
 8019718:	2400ee5c 	.word	0x2400ee5c

0801971c <rshift>:
 801971c:	6903      	ldr	r3, [r0, #16]
 801971e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019726:	ea4f 1261 	mov.w	r2, r1, asr #5
 801972a:	f100 0414 	add.w	r4, r0, #20
 801972e:	dd45      	ble.n	80197bc <rshift+0xa0>
 8019730:	f011 011f 	ands.w	r1, r1, #31
 8019734:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019738:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801973c:	d10c      	bne.n	8019758 <rshift+0x3c>
 801973e:	f100 0710 	add.w	r7, r0, #16
 8019742:	4629      	mov	r1, r5
 8019744:	42b1      	cmp	r1, r6
 8019746:	d334      	bcc.n	80197b2 <rshift+0x96>
 8019748:	1a9b      	subs	r3, r3, r2
 801974a:	009b      	lsls	r3, r3, #2
 801974c:	1eea      	subs	r2, r5, #3
 801974e:	4296      	cmp	r6, r2
 8019750:	bf38      	it	cc
 8019752:	2300      	movcc	r3, #0
 8019754:	4423      	add	r3, r4
 8019756:	e015      	b.n	8019784 <rshift+0x68>
 8019758:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801975c:	f1c1 0820 	rsb	r8, r1, #32
 8019760:	40cf      	lsrs	r7, r1
 8019762:	f105 0e04 	add.w	lr, r5, #4
 8019766:	46a1      	mov	r9, r4
 8019768:	4576      	cmp	r6, lr
 801976a:	46f4      	mov	ip, lr
 801976c:	d815      	bhi.n	801979a <rshift+0x7e>
 801976e:	1a9b      	subs	r3, r3, r2
 8019770:	009a      	lsls	r2, r3, #2
 8019772:	3a04      	subs	r2, #4
 8019774:	3501      	adds	r5, #1
 8019776:	42ae      	cmp	r6, r5
 8019778:	bf38      	it	cc
 801977a:	2200      	movcc	r2, #0
 801977c:	18a3      	adds	r3, r4, r2
 801977e:	50a7      	str	r7, [r4, r2]
 8019780:	b107      	cbz	r7, 8019784 <rshift+0x68>
 8019782:	3304      	adds	r3, #4
 8019784:	1b1a      	subs	r2, r3, r4
 8019786:	42a3      	cmp	r3, r4
 8019788:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801978c:	bf08      	it	eq
 801978e:	2300      	moveq	r3, #0
 8019790:	6102      	str	r2, [r0, #16]
 8019792:	bf08      	it	eq
 8019794:	6143      	streq	r3, [r0, #20]
 8019796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801979a:	f8dc c000 	ldr.w	ip, [ip]
 801979e:	fa0c fc08 	lsl.w	ip, ip, r8
 80197a2:	ea4c 0707 	orr.w	r7, ip, r7
 80197a6:	f849 7b04 	str.w	r7, [r9], #4
 80197aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80197ae:	40cf      	lsrs	r7, r1
 80197b0:	e7da      	b.n	8019768 <rshift+0x4c>
 80197b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80197b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80197ba:	e7c3      	b.n	8019744 <rshift+0x28>
 80197bc:	4623      	mov	r3, r4
 80197be:	e7e1      	b.n	8019784 <rshift+0x68>

080197c0 <__hexdig_fun>:
 80197c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80197c4:	2b09      	cmp	r3, #9
 80197c6:	d802      	bhi.n	80197ce <__hexdig_fun+0xe>
 80197c8:	3820      	subs	r0, #32
 80197ca:	b2c0      	uxtb	r0, r0
 80197cc:	4770      	bx	lr
 80197ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80197d2:	2b05      	cmp	r3, #5
 80197d4:	d801      	bhi.n	80197da <__hexdig_fun+0x1a>
 80197d6:	3847      	subs	r0, #71	; 0x47
 80197d8:	e7f7      	b.n	80197ca <__hexdig_fun+0xa>
 80197da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80197de:	2b05      	cmp	r3, #5
 80197e0:	d801      	bhi.n	80197e6 <__hexdig_fun+0x26>
 80197e2:	3827      	subs	r0, #39	; 0x27
 80197e4:	e7f1      	b.n	80197ca <__hexdig_fun+0xa>
 80197e6:	2000      	movs	r0, #0
 80197e8:	4770      	bx	lr
	...

080197ec <__gethex>:
 80197ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197f0:	ed2d 8b02 	vpush	{d8}
 80197f4:	b089      	sub	sp, #36	; 0x24
 80197f6:	ee08 0a10 	vmov	s16, r0
 80197fa:	9304      	str	r3, [sp, #16]
 80197fc:	4bbc      	ldr	r3, [pc, #752]	; (8019af0 <__gethex+0x304>)
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	9301      	str	r3, [sp, #4]
 8019802:	4618      	mov	r0, r3
 8019804:	468b      	mov	fp, r1
 8019806:	4690      	mov	r8, r2
 8019808:	f7e6 fd74 	bl	80002f4 <strlen>
 801980c:	9b01      	ldr	r3, [sp, #4]
 801980e:	f8db 2000 	ldr.w	r2, [fp]
 8019812:	4403      	add	r3, r0
 8019814:	4682      	mov	sl, r0
 8019816:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801981a:	9305      	str	r3, [sp, #20]
 801981c:	1c93      	adds	r3, r2, #2
 801981e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019822:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019826:	32fe      	adds	r2, #254	; 0xfe
 8019828:	18d1      	adds	r1, r2, r3
 801982a:	461f      	mov	r7, r3
 801982c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019830:	9100      	str	r1, [sp, #0]
 8019832:	2830      	cmp	r0, #48	; 0x30
 8019834:	d0f8      	beq.n	8019828 <__gethex+0x3c>
 8019836:	f7ff ffc3 	bl	80197c0 <__hexdig_fun>
 801983a:	4604      	mov	r4, r0
 801983c:	2800      	cmp	r0, #0
 801983e:	d13a      	bne.n	80198b6 <__gethex+0xca>
 8019840:	9901      	ldr	r1, [sp, #4]
 8019842:	4652      	mov	r2, sl
 8019844:	4638      	mov	r0, r7
 8019846:	f7fe ffab 	bl	80187a0 <strncmp>
 801984a:	4605      	mov	r5, r0
 801984c:	2800      	cmp	r0, #0
 801984e:	d168      	bne.n	8019922 <__gethex+0x136>
 8019850:	f817 000a 	ldrb.w	r0, [r7, sl]
 8019854:	eb07 060a 	add.w	r6, r7, sl
 8019858:	f7ff ffb2 	bl	80197c0 <__hexdig_fun>
 801985c:	2800      	cmp	r0, #0
 801985e:	d062      	beq.n	8019926 <__gethex+0x13a>
 8019860:	4633      	mov	r3, r6
 8019862:	7818      	ldrb	r0, [r3, #0]
 8019864:	2830      	cmp	r0, #48	; 0x30
 8019866:	461f      	mov	r7, r3
 8019868:	f103 0301 	add.w	r3, r3, #1
 801986c:	d0f9      	beq.n	8019862 <__gethex+0x76>
 801986e:	f7ff ffa7 	bl	80197c0 <__hexdig_fun>
 8019872:	2301      	movs	r3, #1
 8019874:	fab0 f480 	clz	r4, r0
 8019878:	0964      	lsrs	r4, r4, #5
 801987a:	4635      	mov	r5, r6
 801987c:	9300      	str	r3, [sp, #0]
 801987e:	463a      	mov	r2, r7
 8019880:	4616      	mov	r6, r2
 8019882:	3201      	adds	r2, #1
 8019884:	7830      	ldrb	r0, [r6, #0]
 8019886:	f7ff ff9b 	bl	80197c0 <__hexdig_fun>
 801988a:	2800      	cmp	r0, #0
 801988c:	d1f8      	bne.n	8019880 <__gethex+0x94>
 801988e:	9901      	ldr	r1, [sp, #4]
 8019890:	4652      	mov	r2, sl
 8019892:	4630      	mov	r0, r6
 8019894:	f7fe ff84 	bl	80187a0 <strncmp>
 8019898:	b980      	cbnz	r0, 80198bc <__gethex+0xd0>
 801989a:	b94d      	cbnz	r5, 80198b0 <__gethex+0xc4>
 801989c:	eb06 050a 	add.w	r5, r6, sl
 80198a0:	462a      	mov	r2, r5
 80198a2:	4616      	mov	r6, r2
 80198a4:	3201      	adds	r2, #1
 80198a6:	7830      	ldrb	r0, [r6, #0]
 80198a8:	f7ff ff8a 	bl	80197c0 <__hexdig_fun>
 80198ac:	2800      	cmp	r0, #0
 80198ae:	d1f8      	bne.n	80198a2 <__gethex+0xb6>
 80198b0:	1bad      	subs	r5, r5, r6
 80198b2:	00ad      	lsls	r5, r5, #2
 80198b4:	e004      	b.n	80198c0 <__gethex+0xd4>
 80198b6:	2400      	movs	r4, #0
 80198b8:	4625      	mov	r5, r4
 80198ba:	e7e0      	b.n	801987e <__gethex+0x92>
 80198bc:	2d00      	cmp	r5, #0
 80198be:	d1f7      	bne.n	80198b0 <__gethex+0xc4>
 80198c0:	7833      	ldrb	r3, [r6, #0]
 80198c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80198c6:	2b50      	cmp	r3, #80	; 0x50
 80198c8:	d13b      	bne.n	8019942 <__gethex+0x156>
 80198ca:	7873      	ldrb	r3, [r6, #1]
 80198cc:	2b2b      	cmp	r3, #43	; 0x2b
 80198ce:	d02c      	beq.n	801992a <__gethex+0x13e>
 80198d0:	2b2d      	cmp	r3, #45	; 0x2d
 80198d2:	d02e      	beq.n	8019932 <__gethex+0x146>
 80198d4:	1c71      	adds	r1, r6, #1
 80198d6:	f04f 0900 	mov.w	r9, #0
 80198da:	7808      	ldrb	r0, [r1, #0]
 80198dc:	f7ff ff70 	bl	80197c0 <__hexdig_fun>
 80198e0:	1e43      	subs	r3, r0, #1
 80198e2:	b2db      	uxtb	r3, r3
 80198e4:	2b18      	cmp	r3, #24
 80198e6:	d82c      	bhi.n	8019942 <__gethex+0x156>
 80198e8:	f1a0 0210 	sub.w	r2, r0, #16
 80198ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80198f0:	f7ff ff66 	bl	80197c0 <__hexdig_fun>
 80198f4:	1e43      	subs	r3, r0, #1
 80198f6:	b2db      	uxtb	r3, r3
 80198f8:	2b18      	cmp	r3, #24
 80198fa:	d91d      	bls.n	8019938 <__gethex+0x14c>
 80198fc:	f1b9 0f00 	cmp.w	r9, #0
 8019900:	d000      	beq.n	8019904 <__gethex+0x118>
 8019902:	4252      	negs	r2, r2
 8019904:	4415      	add	r5, r2
 8019906:	f8cb 1000 	str.w	r1, [fp]
 801990a:	b1e4      	cbz	r4, 8019946 <__gethex+0x15a>
 801990c:	9b00      	ldr	r3, [sp, #0]
 801990e:	2b00      	cmp	r3, #0
 8019910:	bf14      	ite	ne
 8019912:	2700      	movne	r7, #0
 8019914:	2706      	moveq	r7, #6
 8019916:	4638      	mov	r0, r7
 8019918:	b009      	add	sp, #36	; 0x24
 801991a:	ecbd 8b02 	vpop	{d8}
 801991e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019922:	463e      	mov	r6, r7
 8019924:	4625      	mov	r5, r4
 8019926:	2401      	movs	r4, #1
 8019928:	e7ca      	b.n	80198c0 <__gethex+0xd4>
 801992a:	f04f 0900 	mov.w	r9, #0
 801992e:	1cb1      	adds	r1, r6, #2
 8019930:	e7d3      	b.n	80198da <__gethex+0xee>
 8019932:	f04f 0901 	mov.w	r9, #1
 8019936:	e7fa      	b.n	801992e <__gethex+0x142>
 8019938:	230a      	movs	r3, #10
 801993a:	fb03 0202 	mla	r2, r3, r2, r0
 801993e:	3a10      	subs	r2, #16
 8019940:	e7d4      	b.n	80198ec <__gethex+0x100>
 8019942:	4631      	mov	r1, r6
 8019944:	e7df      	b.n	8019906 <__gethex+0x11a>
 8019946:	1bf3      	subs	r3, r6, r7
 8019948:	3b01      	subs	r3, #1
 801994a:	4621      	mov	r1, r4
 801994c:	2b07      	cmp	r3, #7
 801994e:	dc0b      	bgt.n	8019968 <__gethex+0x17c>
 8019950:	ee18 0a10 	vmov	r0, s16
 8019954:	f000 fae0 	bl	8019f18 <_Balloc>
 8019958:	4604      	mov	r4, r0
 801995a:	b940      	cbnz	r0, 801996e <__gethex+0x182>
 801995c:	4b65      	ldr	r3, [pc, #404]	; (8019af4 <__gethex+0x308>)
 801995e:	4602      	mov	r2, r0
 8019960:	21de      	movs	r1, #222	; 0xde
 8019962:	4865      	ldr	r0, [pc, #404]	; (8019af8 <__gethex+0x30c>)
 8019964:	f7ff fe82 	bl	801966c <__assert_func>
 8019968:	3101      	adds	r1, #1
 801996a:	105b      	asrs	r3, r3, #1
 801996c:	e7ee      	b.n	801994c <__gethex+0x160>
 801996e:	f100 0914 	add.w	r9, r0, #20
 8019972:	f04f 0b00 	mov.w	fp, #0
 8019976:	f1ca 0301 	rsb	r3, sl, #1
 801997a:	f8cd 9008 	str.w	r9, [sp, #8]
 801997e:	f8cd b000 	str.w	fp, [sp]
 8019982:	9306      	str	r3, [sp, #24]
 8019984:	42b7      	cmp	r7, r6
 8019986:	d340      	bcc.n	8019a0a <__gethex+0x21e>
 8019988:	9802      	ldr	r0, [sp, #8]
 801998a:	9b00      	ldr	r3, [sp, #0]
 801998c:	f840 3b04 	str.w	r3, [r0], #4
 8019990:	eba0 0009 	sub.w	r0, r0, r9
 8019994:	1080      	asrs	r0, r0, #2
 8019996:	0146      	lsls	r6, r0, #5
 8019998:	6120      	str	r0, [r4, #16]
 801999a:	4618      	mov	r0, r3
 801999c:	f000 fbb2 	bl	801a104 <__hi0bits>
 80199a0:	1a30      	subs	r0, r6, r0
 80199a2:	f8d8 6000 	ldr.w	r6, [r8]
 80199a6:	42b0      	cmp	r0, r6
 80199a8:	dd63      	ble.n	8019a72 <__gethex+0x286>
 80199aa:	1b87      	subs	r7, r0, r6
 80199ac:	4639      	mov	r1, r7
 80199ae:	4620      	mov	r0, r4
 80199b0:	f000 ff4d 	bl	801a84e <__any_on>
 80199b4:	4682      	mov	sl, r0
 80199b6:	b1a8      	cbz	r0, 80199e4 <__gethex+0x1f8>
 80199b8:	1e7b      	subs	r3, r7, #1
 80199ba:	1159      	asrs	r1, r3, #5
 80199bc:	f003 021f 	and.w	r2, r3, #31
 80199c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80199c4:	f04f 0a01 	mov.w	sl, #1
 80199c8:	fa0a f202 	lsl.w	r2, sl, r2
 80199cc:	420a      	tst	r2, r1
 80199ce:	d009      	beq.n	80199e4 <__gethex+0x1f8>
 80199d0:	4553      	cmp	r3, sl
 80199d2:	dd05      	ble.n	80199e0 <__gethex+0x1f4>
 80199d4:	1eb9      	subs	r1, r7, #2
 80199d6:	4620      	mov	r0, r4
 80199d8:	f000 ff39 	bl	801a84e <__any_on>
 80199dc:	2800      	cmp	r0, #0
 80199de:	d145      	bne.n	8019a6c <__gethex+0x280>
 80199e0:	f04f 0a02 	mov.w	sl, #2
 80199e4:	4639      	mov	r1, r7
 80199e6:	4620      	mov	r0, r4
 80199e8:	f7ff fe98 	bl	801971c <rshift>
 80199ec:	443d      	add	r5, r7
 80199ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80199f2:	42ab      	cmp	r3, r5
 80199f4:	da4c      	bge.n	8019a90 <__gethex+0x2a4>
 80199f6:	ee18 0a10 	vmov	r0, s16
 80199fa:	4621      	mov	r1, r4
 80199fc:	f000 facc 	bl	8019f98 <_Bfree>
 8019a00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019a02:	2300      	movs	r3, #0
 8019a04:	6013      	str	r3, [r2, #0]
 8019a06:	27a3      	movs	r7, #163	; 0xa3
 8019a08:	e785      	b.n	8019916 <__gethex+0x12a>
 8019a0a:	1e73      	subs	r3, r6, #1
 8019a0c:	9a05      	ldr	r2, [sp, #20]
 8019a0e:	9303      	str	r3, [sp, #12]
 8019a10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019a14:	4293      	cmp	r3, r2
 8019a16:	d019      	beq.n	8019a4c <__gethex+0x260>
 8019a18:	f1bb 0f20 	cmp.w	fp, #32
 8019a1c:	d107      	bne.n	8019a2e <__gethex+0x242>
 8019a1e:	9b02      	ldr	r3, [sp, #8]
 8019a20:	9a00      	ldr	r2, [sp, #0]
 8019a22:	f843 2b04 	str.w	r2, [r3], #4
 8019a26:	9302      	str	r3, [sp, #8]
 8019a28:	2300      	movs	r3, #0
 8019a2a:	9300      	str	r3, [sp, #0]
 8019a2c:	469b      	mov	fp, r3
 8019a2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019a32:	f7ff fec5 	bl	80197c0 <__hexdig_fun>
 8019a36:	9b00      	ldr	r3, [sp, #0]
 8019a38:	f000 000f 	and.w	r0, r0, #15
 8019a3c:	fa00 f00b 	lsl.w	r0, r0, fp
 8019a40:	4303      	orrs	r3, r0
 8019a42:	9300      	str	r3, [sp, #0]
 8019a44:	f10b 0b04 	add.w	fp, fp, #4
 8019a48:	9b03      	ldr	r3, [sp, #12]
 8019a4a:	e00d      	b.n	8019a68 <__gethex+0x27c>
 8019a4c:	9b03      	ldr	r3, [sp, #12]
 8019a4e:	9a06      	ldr	r2, [sp, #24]
 8019a50:	4413      	add	r3, r2
 8019a52:	42bb      	cmp	r3, r7
 8019a54:	d3e0      	bcc.n	8019a18 <__gethex+0x22c>
 8019a56:	4618      	mov	r0, r3
 8019a58:	9901      	ldr	r1, [sp, #4]
 8019a5a:	9307      	str	r3, [sp, #28]
 8019a5c:	4652      	mov	r2, sl
 8019a5e:	f7fe fe9f 	bl	80187a0 <strncmp>
 8019a62:	9b07      	ldr	r3, [sp, #28]
 8019a64:	2800      	cmp	r0, #0
 8019a66:	d1d7      	bne.n	8019a18 <__gethex+0x22c>
 8019a68:	461e      	mov	r6, r3
 8019a6a:	e78b      	b.n	8019984 <__gethex+0x198>
 8019a6c:	f04f 0a03 	mov.w	sl, #3
 8019a70:	e7b8      	b.n	80199e4 <__gethex+0x1f8>
 8019a72:	da0a      	bge.n	8019a8a <__gethex+0x29e>
 8019a74:	1a37      	subs	r7, r6, r0
 8019a76:	4621      	mov	r1, r4
 8019a78:	ee18 0a10 	vmov	r0, s16
 8019a7c:	463a      	mov	r2, r7
 8019a7e:	f000 fca7 	bl	801a3d0 <__lshift>
 8019a82:	1bed      	subs	r5, r5, r7
 8019a84:	4604      	mov	r4, r0
 8019a86:	f100 0914 	add.w	r9, r0, #20
 8019a8a:	f04f 0a00 	mov.w	sl, #0
 8019a8e:	e7ae      	b.n	80199ee <__gethex+0x202>
 8019a90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019a94:	42a8      	cmp	r0, r5
 8019a96:	dd72      	ble.n	8019b7e <__gethex+0x392>
 8019a98:	1b45      	subs	r5, r0, r5
 8019a9a:	42ae      	cmp	r6, r5
 8019a9c:	dc36      	bgt.n	8019b0c <__gethex+0x320>
 8019a9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019aa2:	2b02      	cmp	r3, #2
 8019aa4:	d02a      	beq.n	8019afc <__gethex+0x310>
 8019aa6:	2b03      	cmp	r3, #3
 8019aa8:	d02c      	beq.n	8019b04 <__gethex+0x318>
 8019aaa:	2b01      	cmp	r3, #1
 8019aac:	d115      	bne.n	8019ada <__gethex+0x2ee>
 8019aae:	42ae      	cmp	r6, r5
 8019ab0:	d113      	bne.n	8019ada <__gethex+0x2ee>
 8019ab2:	2e01      	cmp	r6, #1
 8019ab4:	d10b      	bne.n	8019ace <__gethex+0x2e2>
 8019ab6:	9a04      	ldr	r2, [sp, #16]
 8019ab8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019abc:	6013      	str	r3, [r2, #0]
 8019abe:	2301      	movs	r3, #1
 8019ac0:	6123      	str	r3, [r4, #16]
 8019ac2:	f8c9 3000 	str.w	r3, [r9]
 8019ac6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ac8:	2762      	movs	r7, #98	; 0x62
 8019aca:	601c      	str	r4, [r3, #0]
 8019acc:	e723      	b.n	8019916 <__gethex+0x12a>
 8019ace:	1e71      	subs	r1, r6, #1
 8019ad0:	4620      	mov	r0, r4
 8019ad2:	f000 febc 	bl	801a84e <__any_on>
 8019ad6:	2800      	cmp	r0, #0
 8019ad8:	d1ed      	bne.n	8019ab6 <__gethex+0x2ca>
 8019ada:	ee18 0a10 	vmov	r0, s16
 8019ade:	4621      	mov	r1, r4
 8019ae0:	f000 fa5a 	bl	8019f98 <_Bfree>
 8019ae4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019ae6:	2300      	movs	r3, #0
 8019ae8:	6013      	str	r3, [r2, #0]
 8019aea:	2750      	movs	r7, #80	; 0x50
 8019aec:	e713      	b.n	8019916 <__gethex+0x12a>
 8019aee:	bf00      	nop
 8019af0:	0801ef28 	.word	0x0801ef28
 8019af4:	0801eeac 	.word	0x0801eeac
 8019af8:	0801eebd 	.word	0x0801eebd
 8019afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d1eb      	bne.n	8019ada <__gethex+0x2ee>
 8019b02:	e7d8      	b.n	8019ab6 <__gethex+0x2ca>
 8019b04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d1d5      	bne.n	8019ab6 <__gethex+0x2ca>
 8019b0a:	e7e6      	b.n	8019ada <__gethex+0x2ee>
 8019b0c:	1e6f      	subs	r7, r5, #1
 8019b0e:	f1ba 0f00 	cmp.w	sl, #0
 8019b12:	d131      	bne.n	8019b78 <__gethex+0x38c>
 8019b14:	b127      	cbz	r7, 8019b20 <__gethex+0x334>
 8019b16:	4639      	mov	r1, r7
 8019b18:	4620      	mov	r0, r4
 8019b1a:	f000 fe98 	bl	801a84e <__any_on>
 8019b1e:	4682      	mov	sl, r0
 8019b20:	117b      	asrs	r3, r7, #5
 8019b22:	2101      	movs	r1, #1
 8019b24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019b28:	f007 071f 	and.w	r7, r7, #31
 8019b2c:	fa01 f707 	lsl.w	r7, r1, r7
 8019b30:	421f      	tst	r7, r3
 8019b32:	4629      	mov	r1, r5
 8019b34:	4620      	mov	r0, r4
 8019b36:	bf18      	it	ne
 8019b38:	f04a 0a02 	orrne.w	sl, sl, #2
 8019b3c:	1b76      	subs	r6, r6, r5
 8019b3e:	f7ff fded 	bl	801971c <rshift>
 8019b42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019b46:	2702      	movs	r7, #2
 8019b48:	f1ba 0f00 	cmp.w	sl, #0
 8019b4c:	d048      	beq.n	8019be0 <__gethex+0x3f4>
 8019b4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019b52:	2b02      	cmp	r3, #2
 8019b54:	d015      	beq.n	8019b82 <__gethex+0x396>
 8019b56:	2b03      	cmp	r3, #3
 8019b58:	d017      	beq.n	8019b8a <__gethex+0x39e>
 8019b5a:	2b01      	cmp	r3, #1
 8019b5c:	d109      	bne.n	8019b72 <__gethex+0x386>
 8019b5e:	f01a 0f02 	tst.w	sl, #2
 8019b62:	d006      	beq.n	8019b72 <__gethex+0x386>
 8019b64:	f8d9 0000 	ldr.w	r0, [r9]
 8019b68:	ea4a 0a00 	orr.w	sl, sl, r0
 8019b6c:	f01a 0f01 	tst.w	sl, #1
 8019b70:	d10e      	bne.n	8019b90 <__gethex+0x3a4>
 8019b72:	f047 0710 	orr.w	r7, r7, #16
 8019b76:	e033      	b.n	8019be0 <__gethex+0x3f4>
 8019b78:	f04f 0a01 	mov.w	sl, #1
 8019b7c:	e7d0      	b.n	8019b20 <__gethex+0x334>
 8019b7e:	2701      	movs	r7, #1
 8019b80:	e7e2      	b.n	8019b48 <__gethex+0x35c>
 8019b82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b84:	f1c3 0301 	rsb	r3, r3, #1
 8019b88:	9315      	str	r3, [sp, #84]	; 0x54
 8019b8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d0f0      	beq.n	8019b72 <__gethex+0x386>
 8019b90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019b94:	f104 0314 	add.w	r3, r4, #20
 8019b98:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019b9c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019ba0:	f04f 0c00 	mov.w	ip, #0
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8019baa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8019bae:	d01c      	beq.n	8019bea <__gethex+0x3fe>
 8019bb0:	3201      	adds	r2, #1
 8019bb2:	6002      	str	r2, [r0, #0]
 8019bb4:	2f02      	cmp	r7, #2
 8019bb6:	f104 0314 	add.w	r3, r4, #20
 8019bba:	d13f      	bne.n	8019c3c <__gethex+0x450>
 8019bbc:	f8d8 2000 	ldr.w	r2, [r8]
 8019bc0:	3a01      	subs	r2, #1
 8019bc2:	42b2      	cmp	r2, r6
 8019bc4:	d10a      	bne.n	8019bdc <__gethex+0x3f0>
 8019bc6:	1171      	asrs	r1, r6, #5
 8019bc8:	2201      	movs	r2, #1
 8019bca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019bce:	f006 061f 	and.w	r6, r6, #31
 8019bd2:	fa02 f606 	lsl.w	r6, r2, r6
 8019bd6:	421e      	tst	r6, r3
 8019bd8:	bf18      	it	ne
 8019bda:	4617      	movne	r7, r2
 8019bdc:	f047 0720 	orr.w	r7, r7, #32
 8019be0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019be2:	601c      	str	r4, [r3, #0]
 8019be4:	9b04      	ldr	r3, [sp, #16]
 8019be6:	601d      	str	r5, [r3, #0]
 8019be8:	e695      	b.n	8019916 <__gethex+0x12a>
 8019bea:	4299      	cmp	r1, r3
 8019bec:	f843 cc04 	str.w	ip, [r3, #-4]
 8019bf0:	d8d8      	bhi.n	8019ba4 <__gethex+0x3b8>
 8019bf2:	68a3      	ldr	r3, [r4, #8]
 8019bf4:	459b      	cmp	fp, r3
 8019bf6:	db19      	blt.n	8019c2c <__gethex+0x440>
 8019bf8:	6861      	ldr	r1, [r4, #4]
 8019bfa:	ee18 0a10 	vmov	r0, s16
 8019bfe:	3101      	adds	r1, #1
 8019c00:	f000 f98a 	bl	8019f18 <_Balloc>
 8019c04:	4681      	mov	r9, r0
 8019c06:	b918      	cbnz	r0, 8019c10 <__gethex+0x424>
 8019c08:	4b1a      	ldr	r3, [pc, #104]	; (8019c74 <__gethex+0x488>)
 8019c0a:	4602      	mov	r2, r0
 8019c0c:	2184      	movs	r1, #132	; 0x84
 8019c0e:	e6a8      	b.n	8019962 <__gethex+0x176>
 8019c10:	6922      	ldr	r2, [r4, #16]
 8019c12:	3202      	adds	r2, #2
 8019c14:	f104 010c 	add.w	r1, r4, #12
 8019c18:	0092      	lsls	r2, r2, #2
 8019c1a:	300c      	adds	r0, #12
 8019c1c:	f7fe fb76 	bl	801830c <memcpy>
 8019c20:	4621      	mov	r1, r4
 8019c22:	ee18 0a10 	vmov	r0, s16
 8019c26:	f000 f9b7 	bl	8019f98 <_Bfree>
 8019c2a:	464c      	mov	r4, r9
 8019c2c:	6923      	ldr	r3, [r4, #16]
 8019c2e:	1c5a      	adds	r2, r3, #1
 8019c30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019c34:	6122      	str	r2, [r4, #16]
 8019c36:	2201      	movs	r2, #1
 8019c38:	615a      	str	r2, [r3, #20]
 8019c3a:	e7bb      	b.n	8019bb4 <__gethex+0x3c8>
 8019c3c:	6922      	ldr	r2, [r4, #16]
 8019c3e:	455a      	cmp	r2, fp
 8019c40:	dd0b      	ble.n	8019c5a <__gethex+0x46e>
 8019c42:	2101      	movs	r1, #1
 8019c44:	4620      	mov	r0, r4
 8019c46:	f7ff fd69 	bl	801971c <rshift>
 8019c4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019c4e:	3501      	adds	r5, #1
 8019c50:	42ab      	cmp	r3, r5
 8019c52:	f6ff aed0 	blt.w	80199f6 <__gethex+0x20a>
 8019c56:	2701      	movs	r7, #1
 8019c58:	e7c0      	b.n	8019bdc <__gethex+0x3f0>
 8019c5a:	f016 061f 	ands.w	r6, r6, #31
 8019c5e:	d0fa      	beq.n	8019c56 <__gethex+0x46a>
 8019c60:	449a      	add	sl, r3
 8019c62:	f1c6 0620 	rsb	r6, r6, #32
 8019c66:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019c6a:	f000 fa4b 	bl	801a104 <__hi0bits>
 8019c6e:	42b0      	cmp	r0, r6
 8019c70:	dbe7      	blt.n	8019c42 <__gethex+0x456>
 8019c72:	e7f0      	b.n	8019c56 <__gethex+0x46a>
 8019c74:	0801eeac 	.word	0x0801eeac

08019c78 <L_shift>:
 8019c78:	f1c2 0208 	rsb	r2, r2, #8
 8019c7c:	0092      	lsls	r2, r2, #2
 8019c7e:	b570      	push	{r4, r5, r6, lr}
 8019c80:	f1c2 0620 	rsb	r6, r2, #32
 8019c84:	6843      	ldr	r3, [r0, #4]
 8019c86:	6804      	ldr	r4, [r0, #0]
 8019c88:	fa03 f506 	lsl.w	r5, r3, r6
 8019c8c:	432c      	orrs	r4, r5
 8019c8e:	40d3      	lsrs	r3, r2
 8019c90:	6004      	str	r4, [r0, #0]
 8019c92:	f840 3f04 	str.w	r3, [r0, #4]!
 8019c96:	4288      	cmp	r0, r1
 8019c98:	d3f4      	bcc.n	8019c84 <L_shift+0xc>
 8019c9a:	bd70      	pop	{r4, r5, r6, pc}

08019c9c <__match>:
 8019c9c:	b530      	push	{r4, r5, lr}
 8019c9e:	6803      	ldr	r3, [r0, #0]
 8019ca0:	3301      	adds	r3, #1
 8019ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ca6:	b914      	cbnz	r4, 8019cae <__match+0x12>
 8019ca8:	6003      	str	r3, [r0, #0]
 8019caa:	2001      	movs	r0, #1
 8019cac:	bd30      	pop	{r4, r5, pc}
 8019cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019cb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019cb6:	2d19      	cmp	r5, #25
 8019cb8:	bf98      	it	ls
 8019cba:	3220      	addls	r2, #32
 8019cbc:	42a2      	cmp	r2, r4
 8019cbe:	d0f0      	beq.n	8019ca2 <__match+0x6>
 8019cc0:	2000      	movs	r0, #0
 8019cc2:	e7f3      	b.n	8019cac <__match+0x10>

08019cc4 <__hexnan>:
 8019cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cc8:	680b      	ldr	r3, [r1, #0]
 8019cca:	6801      	ldr	r1, [r0, #0]
 8019ccc:	115e      	asrs	r6, r3, #5
 8019cce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019cd2:	f013 031f 	ands.w	r3, r3, #31
 8019cd6:	b087      	sub	sp, #28
 8019cd8:	bf18      	it	ne
 8019cda:	3604      	addne	r6, #4
 8019cdc:	2500      	movs	r5, #0
 8019cde:	1f37      	subs	r7, r6, #4
 8019ce0:	4682      	mov	sl, r0
 8019ce2:	4690      	mov	r8, r2
 8019ce4:	9301      	str	r3, [sp, #4]
 8019ce6:	f846 5c04 	str.w	r5, [r6, #-4]
 8019cea:	46b9      	mov	r9, r7
 8019cec:	463c      	mov	r4, r7
 8019cee:	9502      	str	r5, [sp, #8]
 8019cf0:	46ab      	mov	fp, r5
 8019cf2:	784a      	ldrb	r2, [r1, #1]
 8019cf4:	1c4b      	adds	r3, r1, #1
 8019cf6:	9303      	str	r3, [sp, #12]
 8019cf8:	b342      	cbz	r2, 8019d4c <__hexnan+0x88>
 8019cfa:	4610      	mov	r0, r2
 8019cfc:	9105      	str	r1, [sp, #20]
 8019cfe:	9204      	str	r2, [sp, #16]
 8019d00:	f7ff fd5e 	bl	80197c0 <__hexdig_fun>
 8019d04:	2800      	cmp	r0, #0
 8019d06:	d14f      	bne.n	8019da8 <__hexnan+0xe4>
 8019d08:	9a04      	ldr	r2, [sp, #16]
 8019d0a:	9905      	ldr	r1, [sp, #20]
 8019d0c:	2a20      	cmp	r2, #32
 8019d0e:	d818      	bhi.n	8019d42 <__hexnan+0x7e>
 8019d10:	9b02      	ldr	r3, [sp, #8]
 8019d12:	459b      	cmp	fp, r3
 8019d14:	dd13      	ble.n	8019d3e <__hexnan+0x7a>
 8019d16:	454c      	cmp	r4, r9
 8019d18:	d206      	bcs.n	8019d28 <__hexnan+0x64>
 8019d1a:	2d07      	cmp	r5, #7
 8019d1c:	dc04      	bgt.n	8019d28 <__hexnan+0x64>
 8019d1e:	462a      	mov	r2, r5
 8019d20:	4649      	mov	r1, r9
 8019d22:	4620      	mov	r0, r4
 8019d24:	f7ff ffa8 	bl	8019c78 <L_shift>
 8019d28:	4544      	cmp	r4, r8
 8019d2a:	d950      	bls.n	8019dce <__hexnan+0x10a>
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	f1a4 0904 	sub.w	r9, r4, #4
 8019d32:	f844 3c04 	str.w	r3, [r4, #-4]
 8019d36:	f8cd b008 	str.w	fp, [sp, #8]
 8019d3a:	464c      	mov	r4, r9
 8019d3c:	461d      	mov	r5, r3
 8019d3e:	9903      	ldr	r1, [sp, #12]
 8019d40:	e7d7      	b.n	8019cf2 <__hexnan+0x2e>
 8019d42:	2a29      	cmp	r2, #41	; 0x29
 8019d44:	d156      	bne.n	8019df4 <__hexnan+0x130>
 8019d46:	3102      	adds	r1, #2
 8019d48:	f8ca 1000 	str.w	r1, [sl]
 8019d4c:	f1bb 0f00 	cmp.w	fp, #0
 8019d50:	d050      	beq.n	8019df4 <__hexnan+0x130>
 8019d52:	454c      	cmp	r4, r9
 8019d54:	d206      	bcs.n	8019d64 <__hexnan+0xa0>
 8019d56:	2d07      	cmp	r5, #7
 8019d58:	dc04      	bgt.n	8019d64 <__hexnan+0xa0>
 8019d5a:	462a      	mov	r2, r5
 8019d5c:	4649      	mov	r1, r9
 8019d5e:	4620      	mov	r0, r4
 8019d60:	f7ff ff8a 	bl	8019c78 <L_shift>
 8019d64:	4544      	cmp	r4, r8
 8019d66:	d934      	bls.n	8019dd2 <__hexnan+0x10e>
 8019d68:	f1a8 0204 	sub.w	r2, r8, #4
 8019d6c:	4623      	mov	r3, r4
 8019d6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8019d72:	f842 1f04 	str.w	r1, [r2, #4]!
 8019d76:	429f      	cmp	r7, r3
 8019d78:	d2f9      	bcs.n	8019d6e <__hexnan+0xaa>
 8019d7a:	1b3b      	subs	r3, r7, r4
 8019d7c:	f023 0303 	bic.w	r3, r3, #3
 8019d80:	3304      	adds	r3, #4
 8019d82:	3401      	adds	r4, #1
 8019d84:	3e03      	subs	r6, #3
 8019d86:	42b4      	cmp	r4, r6
 8019d88:	bf88      	it	hi
 8019d8a:	2304      	movhi	r3, #4
 8019d8c:	4443      	add	r3, r8
 8019d8e:	2200      	movs	r2, #0
 8019d90:	f843 2b04 	str.w	r2, [r3], #4
 8019d94:	429f      	cmp	r7, r3
 8019d96:	d2fb      	bcs.n	8019d90 <__hexnan+0xcc>
 8019d98:	683b      	ldr	r3, [r7, #0]
 8019d9a:	b91b      	cbnz	r3, 8019da4 <__hexnan+0xe0>
 8019d9c:	4547      	cmp	r7, r8
 8019d9e:	d127      	bne.n	8019df0 <__hexnan+0x12c>
 8019da0:	2301      	movs	r3, #1
 8019da2:	603b      	str	r3, [r7, #0]
 8019da4:	2005      	movs	r0, #5
 8019da6:	e026      	b.n	8019df6 <__hexnan+0x132>
 8019da8:	3501      	adds	r5, #1
 8019daa:	2d08      	cmp	r5, #8
 8019dac:	f10b 0b01 	add.w	fp, fp, #1
 8019db0:	dd06      	ble.n	8019dc0 <__hexnan+0xfc>
 8019db2:	4544      	cmp	r4, r8
 8019db4:	d9c3      	bls.n	8019d3e <__hexnan+0x7a>
 8019db6:	2300      	movs	r3, #0
 8019db8:	f844 3c04 	str.w	r3, [r4, #-4]
 8019dbc:	2501      	movs	r5, #1
 8019dbe:	3c04      	subs	r4, #4
 8019dc0:	6822      	ldr	r2, [r4, #0]
 8019dc2:	f000 000f 	and.w	r0, r0, #15
 8019dc6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019dca:	6022      	str	r2, [r4, #0]
 8019dcc:	e7b7      	b.n	8019d3e <__hexnan+0x7a>
 8019dce:	2508      	movs	r5, #8
 8019dd0:	e7b5      	b.n	8019d3e <__hexnan+0x7a>
 8019dd2:	9b01      	ldr	r3, [sp, #4]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d0df      	beq.n	8019d98 <__hexnan+0xd4>
 8019dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019ddc:	f1c3 0320 	rsb	r3, r3, #32
 8019de0:	fa22 f303 	lsr.w	r3, r2, r3
 8019de4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019de8:	401a      	ands	r2, r3
 8019dea:	f846 2c04 	str.w	r2, [r6, #-4]
 8019dee:	e7d3      	b.n	8019d98 <__hexnan+0xd4>
 8019df0:	3f04      	subs	r7, #4
 8019df2:	e7d1      	b.n	8019d98 <__hexnan+0xd4>
 8019df4:	2004      	movs	r0, #4
 8019df6:	b007      	add	sp, #28
 8019df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019dfc <hash4>:
 8019dfc:	4603      	mov	r3, r0
 8019dfe:	b510      	push	{r4, lr}
 8019e00:	4608      	mov	r0, r1
 8019e02:	2900      	cmp	r1, #0
 8019e04:	d046      	beq.n	8019e94 <hash4+0x98>
 8019e06:	1dcc      	adds	r4, r1, #7
 8019e08:	f001 0107 	and.w	r1, r1, #7
 8019e0c:	3901      	subs	r1, #1
 8019e0e:	08e4      	lsrs	r4, r4, #3
 8019e10:	2906      	cmp	r1, #6
 8019e12:	d805      	bhi.n	8019e20 <hash4+0x24>
 8019e14:	e8df f001 	tbb	[pc, r1]
 8019e18:	36383a3c 	.word	0x36383a3c
 8019e1c:	3234      	.short	0x3234
 8019e1e:	30          	.byte	0x30
 8019e1f:	00          	.byte	0x00
 8019e20:	2000      	movs	r0, #0
 8019e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e26:	eb00 1140 	add.w	r1, r0, r0, lsl #5
 8019e2a:	4411      	add	r1, r2
 8019e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e30:	eb01 1141 	add.w	r1, r1, r1, lsl #5
 8019e34:	4411      	add	r1, r2
 8019e36:	eb01 1241 	add.w	r2, r1, r1, lsl #5
 8019e3a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019e3e:	4411      	add	r1, r2
 8019e40:	eb01 1241 	add.w	r2, r1, r1, lsl #5
 8019e44:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019e48:	4411      	add	r1, r2
 8019e4a:	eb01 1241 	add.w	r2, r1, r1, lsl #5
 8019e4e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019e52:	4411      	add	r1, r2
 8019e54:	eb01 1241 	add.w	r2, r1, r1, lsl #5
 8019e58:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019e5c:	4411      	add	r1, r2
 8019e5e:	eb01 1241 	add.w	r2, r1, r1, lsl #5
 8019e62:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019e66:	4411      	add	r1, r2
 8019e68:	eb01 1041 	add.w	r0, r1, r1, lsl #5
 8019e6c:	7819      	ldrb	r1, [r3, #0]
 8019e6e:	3c01      	subs	r4, #1
 8019e70:	4408      	add	r0, r1
 8019e72:	d00f      	beq.n	8019e94 <hash4+0x98>
 8019e74:	3301      	adds	r3, #1
 8019e76:	e7d4      	b.n	8019e22 <hash4+0x26>
 8019e78:	2100      	movs	r1, #0
 8019e7a:	e7d7      	b.n	8019e2c <hash4+0x30>
 8019e7c:	2100      	movs	r1, #0
 8019e7e:	e7da      	b.n	8019e36 <hash4+0x3a>
 8019e80:	2100      	movs	r1, #0
 8019e82:	e7dd      	b.n	8019e40 <hash4+0x44>
 8019e84:	2100      	movs	r1, #0
 8019e86:	e7e0      	b.n	8019e4a <hash4+0x4e>
 8019e88:	2100      	movs	r1, #0
 8019e8a:	e7e3      	b.n	8019e54 <hash4+0x58>
 8019e8c:	2100      	movs	r1, #0
 8019e8e:	e7e6      	b.n	8019e5e <hash4+0x62>
 8019e90:	2100      	movs	r1, #0
 8019e92:	e7e9      	b.n	8019e68 <hash4+0x6c>
 8019e94:	bd10      	pop	{r4, pc}
	...

08019e98 <_isatty_r>:
 8019e98:	b538      	push	{r3, r4, r5, lr}
 8019e9a:	4d06      	ldr	r5, [pc, #24]	; (8019eb4 <_isatty_r+0x1c>)
 8019e9c:	2300      	movs	r3, #0
 8019e9e:	4604      	mov	r4, r0
 8019ea0:	4608      	mov	r0, r1
 8019ea2:	602b      	str	r3, [r5, #0]
 8019ea4:	f7e7 f87f 	bl	8000fa6 <_isatty>
 8019ea8:	1c43      	adds	r3, r0, #1
 8019eaa:	d102      	bne.n	8019eb2 <_isatty_r+0x1a>
 8019eac:	682b      	ldr	r3, [r5, #0]
 8019eae:	b103      	cbz	r3, 8019eb2 <_isatty_r+0x1a>
 8019eb0:	6023      	str	r3, [r4, #0]
 8019eb2:	bd38      	pop	{r3, r4, r5, pc}
 8019eb4:	2400ee5c 	.word	0x2400ee5c

08019eb8 <_lseek_r>:
 8019eb8:	b538      	push	{r3, r4, r5, lr}
 8019eba:	4d07      	ldr	r5, [pc, #28]	; (8019ed8 <_lseek_r+0x20>)
 8019ebc:	4604      	mov	r4, r0
 8019ebe:	4608      	mov	r0, r1
 8019ec0:	4611      	mov	r1, r2
 8019ec2:	2200      	movs	r2, #0
 8019ec4:	602a      	str	r2, [r5, #0]
 8019ec6:	461a      	mov	r2, r3
 8019ec8:	f7e7 f878 	bl	8000fbc <_lseek>
 8019ecc:	1c43      	adds	r3, r0, #1
 8019ece:	d102      	bne.n	8019ed6 <_lseek_r+0x1e>
 8019ed0:	682b      	ldr	r3, [r5, #0]
 8019ed2:	b103      	cbz	r3, 8019ed6 <_lseek_r+0x1e>
 8019ed4:	6023      	str	r3, [r4, #0]
 8019ed6:	bd38      	pop	{r3, r4, r5, pc}
 8019ed8:	2400ee5c 	.word	0x2400ee5c

08019edc <__ascii_mbtowc>:
 8019edc:	b082      	sub	sp, #8
 8019ede:	b901      	cbnz	r1, 8019ee2 <__ascii_mbtowc+0x6>
 8019ee0:	a901      	add	r1, sp, #4
 8019ee2:	b142      	cbz	r2, 8019ef6 <__ascii_mbtowc+0x1a>
 8019ee4:	b14b      	cbz	r3, 8019efa <__ascii_mbtowc+0x1e>
 8019ee6:	7813      	ldrb	r3, [r2, #0]
 8019ee8:	600b      	str	r3, [r1, #0]
 8019eea:	7812      	ldrb	r2, [r2, #0]
 8019eec:	1e10      	subs	r0, r2, #0
 8019eee:	bf18      	it	ne
 8019ef0:	2001      	movne	r0, #1
 8019ef2:	b002      	add	sp, #8
 8019ef4:	4770      	bx	lr
 8019ef6:	4610      	mov	r0, r2
 8019ef8:	e7fb      	b.n	8019ef2 <__ascii_mbtowc+0x16>
 8019efa:	f06f 0001 	mvn.w	r0, #1
 8019efe:	e7f8      	b.n	8019ef2 <__ascii_mbtowc+0x16>

08019f00 <__malloc_lock>:
 8019f00:	4801      	ldr	r0, [pc, #4]	; (8019f08 <__malloc_lock+0x8>)
 8019f02:	f7fe b97e 	b.w	8018202 <__retarget_lock_acquire_recursive>
 8019f06:	bf00      	nop
 8019f08:	2400f688 	.word	0x2400f688

08019f0c <__malloc_unlock>:
 8019f0c:	4801      	ldr	r0, [pc, #4]	; (8019f14 <__malloc_unlock+0x8>)
 8019f0e:	f7fe b979 	b.w	8018204 <__retarget_lock_release_recursive>
 8019f12:	bf00      	nop
 8019f14:	2400f688 	.word	0x2400f688

08019f18 <_Balloc>:
 8019f18:	b570      	push	{r4, r5, r6, lr}
 8019f1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019f1c:	4604      	mov	r4, r0
 8019f1e:	460d      	mov	r5, r1
 8019f20:	b976      	cbnz	r6, 8019f40 <_Balloc+0x28>
 8019f22:	2010      	movs	r0, #16
 8019f24:	f7fe f9d4 	bl	80182d0 <malloc>
 8019f28:	4602      	mov	r2, r0
 8019f2a:	6260      	str	r0, [r4, #36]	; 0x24
 8019f2c:	b920      	cbnz	r0, 8019f38 <_Balloc+0x20>
 8019f2e:	4b18      	ldr	r3, [pc, #96]	; (8019f90 <_Balloc+0x78>)
 8019f30:	4818      	ldr	r0, [pc, #96]	; (8019f94 <_Balloc+0x7c>)
 8019f32:	2166      	movs	r1, #102	; 0x66
 8019f34:	f7ff fb9a 	bl	801966c <__assert_func>
 8019f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019f3c:	6006      	str	r6, [r0, #0]
 8019f3e:	60c6      	str	r6, [r0, #12]
 8019f40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019f42:	68f3      	ldr	r3, [r6, #12]
 8019f44:	b183      	cbz	r3, 8019f68 <_Balloc+0x50>
 8019f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019f48:	68db      	ldr	r3, [r3, #12]
 8019f4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019f4e:	b9b8      	cbnz	r0, 8019f80 <_Balloc+0x68>
 8019f50:	2101      	movs	r1, #1
 8019f52:	fa01 f605 	lsl.w	r6, r1, r5
 8019f56:	1d72      	adds	r2, r6, #5
 8019f58:	0092      	lsls	r2, r2, #2
 8019f5a:	4620      	mov	r0, r4
 8019f5c:	f000 fc98 	bl	801a890 <_calloc_r>
 8019f60:	b160      	cbz	r0, 8019f7c <_Balloc+0x64>
 8019f62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019f66:	e00e      	b.n	8019f86 <_Balloc+0x6e>
 8019f68:	2221      	movs	r2, #33	; 0x21
 8019f6a:	2104      	movs	r1, #4
 8019f6c:	4620      	mov	r0, r4
 8019f6e:	f000 fc8f 	bl	801a890 <_calloc_r>
 8019f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019f74:	60f0      	str	r0, [r6, #12]
 8019f76:	68db      	ldr	r3, [r3, #12]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d1e4      	bne.n	8019f46 <_Balloc+0x2e>
 8019f7c:	2000      	movs	r0, #0
 8019f7e:	bd70      	pop	{r4, r5, r6, pc}
 8019f80:	6802      	ldr	r2, [r0, #0]
 8019f82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019f86:	2300      	movs	r3, #0
 8019f88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019f8c:	e7f7      	b.n	8019f7e <_Balloc+0x66>
 8019f8e:	bf00      	nop
 8019f90:	0801ed9c 	.word	0x0801ed9c
 8019f94:	0801ef3c 	.word	0x0801ef3c

08019f98 <_Bfree>:
 8019f98:	b570      	push	{r4, r5, r6, lr}
 8019f9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019f9c:	4605      	mov	r5, r0
 8019f9e:	460c      	mov	r4, r1
 8019fa0:	b976      	cbnz	r6, 8019fc0 <_Bfree+0x28>
 8019fa2:	2010      	movs	r0, #16
 8019fa4:	f7fe f994 	bl	80182d0 <malloc>
 8019fa8:	4602      	mov	r2, r0
 8019faa:	6268      	str	r0, [r5, #36]	; 0x24
 8019fac:	b920      	cbnz	r0, 8019fb8 <_Bfree+0x20>
 8019fae:	4b09      	ldr	r3, [pc, #36]	; (8019fd4 <_Bfree+0x3c>)
 8019fb0:	4809      	ldr	r0, [pc, #36]	; (8019fd8 <_Bfree+0x40>)
 8019fb2:	218a      	movs	r1, #138	; 0x8a
 8019fb4:	f7ff fb5a 	bl	801966c <__assert_func>
 8019fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019fbc:	6006      	str	r6, [r0, #0]
 8019fbe:	60c6      	str	r6, [r0, #12]
 8019fc0:	b13c      	cbz	r4, 8019fd2 <_Bfree+0x3a>
 8019fc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019fc4:	6862      	ldr	r2, [r4, #4]
 8019fc6:	68db      	ldr	r3, [r3, #12]
 8019fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019fcc:	6021      	str	r1, [r4, #0]
 8019fce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019fd2:	bd70      	pop	{r4, r5, r6, pc}
 8019fd4:	0801ed9c 	.word	0x0801ed9c
 8019fd8:	0801ef3c 	.word	0x0801ef3c

08019fdc <__multadd>:
 8019fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fe0:	690e      	ldr	r6, [r1, #16]
 8019fe2:	4607      	mov	r7, r0
 8019fe4:	4698      	mov	r8, r3
 8019fe6:	460c      	mov	r4, r1
 8019fe8:	f101 0014 	add.w	r0, r1, #20
 8019fec:	2300      	movs	r3, #0
 8019fee:	6805      	ldr	r5, [r0, #0]
 8019ff0:	b2a9      	uxth	r1, r5
 8019ff2:	fb02 8101 	mla	r1, r2, r1, r8
 8019ff6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8019ffa:	0c2d      	lsrs	r5, r5, #16
 8019ffc:	fb02 c505 	mla	r5, r2, r5, ip
 801a000:	b289      	uxth	r1, r1
 801a002:	3301      	adds	r3, #1
 801a004:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801a008:	429e      	cmp	r6, r3
 801a00a:	f840 1b04 	str.w	r1, [r0], #4
 801a00e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801a012:	dcec      	bgt.n	8019fee <__multadd+0x12>
 801a014:	f1b8 0f00 	cmp.w	r8, #0
 801a018:	d022      	beq.n	801a060 <__multadd+0x84>
 801a01a:	68a3      	ldr	r3, [r4, #8]
 801a01c:	42b3      	cmp	r3, r6
 801a01e:	dc19      	bgt.n	801a054 <__multadd+0x78>
 801a020:	6861      	ldr	r1, [r4, #4]
 801a022:	4638      	mov	r0, r7
 801a024:	3101      	adds	r1, #1
 801a026:	f7ff ff77 	bl	8019f18 <_Balloc>
 801a02a:	4605      	mov	r5, r0
 801a02c:	b928      	cbnz	r0, 801a03a <__multadd+0x5e>
 801a02e:	4602      	mov	r2, r0
 801a030:	4b0d      	ldr	r3, [pc, #52]	; (801a068 <__multadd+0x8c>)
 801a032:	480e      	ldr	r0, [pc, #56]	; (801a06c <__multadd+0x90>)
 801a034:	21b5      	movs	r1, #181	; 0xb5
 801a036:	f7ff fb19 	bl	801966c <__assert_func>
 801a03a:	6922      	ldr	r2, [r4, #16]
 801a03c:	3202      	adds	r2, #2
 801a03e:	f104 010c 	add.w	r1, r4, #12
 801a042:	0092      	lsls	r2, r2, #2
 801a044:	300c      	adds	r0, #12
 801a046:	f7fe f961 	bl	801830c <memcpy>
 801a04a:	4621      	mov	r1, r4
 801a04c:	4638      	mov	r0, r7
 801a04e:	f7ff ffa3 	bl	8019f98 <_Bfree>
 801a052:	462c      	mov	r4, r5
 801a054:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a058:	3601      	adds	r6, #1
 801a05a:	f8c3 8014 	str.w	r8, [r3, #20]
 801a05e:	6126      	str	r6, [r4, #16]
 801a060:	4620      	mov	r0, r4
 801a062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a066:	bf00      	nop
 801a068:	0801eeac 	.word	0x0801eeac
 801a06c:	0801ef3c 	.word	0x0801ef3c

0801a070 <__s2b>:
 801a070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a074:	460c      	mov	r4, r1
 801a076:	4615      	mov	r5, r2
 801a078:	461f      	mov	r7, r3
 801a07a:	2209      	movs	r2, #9
 801a07c:	3308      	adds	r3, #8
 801a07e:	4606      	mov	r6, r0
 801a080:	fb93 f3f2 	sdiv	r3, r3, r2
 801a084:	2100      	movs	r1, #0
 801a086:	2201      	movs	r2, #1
 801a088:	429a      	cmp	r2, r3
 801a08a:	db09      	blt.n	801a0a0 <__s2b+0x30>
 801a08c:	4630      	mov	r0, r6
 801a08e:	f7ff ff43 	bl	8019f18 <_Balloc>
 801a092:	b940      	cbnz	r0, 801a0a6 <__s2b+0x36>
 801a094:	4602      	mov	r2, r0
 801a096:	4b19      	ldr	r3, [pc, #100]	; (801a0fc <__s2b+0x8c>)
 801a098:	4819      	ldr	r0, [pc, #100]	; (801a100 <__s2b+0x90>)
 801a09a:	21ce      	movs	r1, #206	; 0xce
 801a09c:	f7ff fae6 	bl	801966c <__assert_func>
 801a0a0:	0052      	lsls	r2, r2, #1
 801a0a2:	3101      	adds	r1, #1
 801a0a4:	e7f0      	b.n	801a088 <__s2b+0x18>
 801a0a6:	9b08      	ldr	r3, [sp, #32]
 801a0a8:	6143      	str	r3, [r0, #20]
 801a0aa:	2d09      	cmp	r5, #9
 801a0ac:	f04f 0301 	mov.w	r3, #1
 801a0b0:	6103      	str	r3, [r0, #16]
 801a0b2:	dd16      	ble.n	801a0e2 <__s2b+0x72>
 801a0b4:	f104 0909 	add.w	r9, r4, #9
 801a0b8:	46c8      	mov	r8, r9
 801a0ba:	442c      	add	r4, r5
 801a0bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a0c0:	4601      	mov	r1, r0
 801a0c2:	3b30      	subs	r3, #48	; 0x30
 801a0c4:	220a      	movs	r2, #10
 801a0c6:	4630      	mov	r0, r6
 801a0c8:	f7ff ff88 	bl	8019fdc <__multadd>
 801a0cc:	45a0      	cmp	r8, r4
 801a0ce:	d1f5      	bne.n	801a0bc <__s2b+0x4c>
 801a0d0:	f1a5 0408 	sub.w	r4, r5, #8
 801a0d4:	444c      	add	r4, r9
 801a0d6:	1b2d      	subs	r5, r5, r4
 801a0d8:	1963      	adds	r3, r4, r5
 801a0da:	42bb      	cmp	r3, r7
 801a0dc:	db04      	blt.n	801a0e8 <__s2b+0x78>
 801a0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0e2:	340a      	adds	r4, #10
 801a0e4:	2509      	movs	r5, #9
 801a0e6:	e7f6      	b.n	801a0d6 <__s2b+0x66>
 801a0e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a0ec:	4601      	mov	r1, r0
 801a0ee:	3b30      	subs	r3, #48	; 0x30
 801a0f0:	220a      	movs	r2, #10
 801a0f2:	4630      	mov	r0, r6
 801a0f4:	f7ff ff72 	bl	8019fdc <__multadd>
 801a0f8:	e7ee      	b.n	801a0d8 <__s2b+0x68>
 801a0fa:	bf00      	nop
 801a0fc:	0801eeac 	.word	0x0801eeac
 801a100:	0801ef3c 	.word	0x0801ef3c

0801a104 <__hi0bits>:
 801a104:	0c03      	lsrs	r3, r0, #16
 801a106:	041b      	lsls	r3, r3, #16
 801a108:	b9d3      	cbnz	r3, 801a140 <__hi0bits+0x3c>
 801a10a:	0400      	lsls	r0, r0, #16
 801a10c:	2310      	movs	r3, #16
 801a10e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a112:	bf04      	itt	eq
 801a114:	0200      	lsleq	r0, r0, #8
 801a116:	3308      	addeq	r3, #8
 801a118:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a11c:	bf04      	itt	eq
 801a11e:	0100      	lsleq	r0, r0, #4
 801a120:	3304      	addeq	r3, #4
 801a122:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a126:	bf04      	itt	eq
 801a128:	0080      	lsleq	r0, r0, #2
 801a12a:	3302      	addeq	r3, #2
 801a12c:	2800      	cmp	r0, #0
 801a12e:	db05      	blt.n	801a13c <__hi0bits+0x38>
 801a130:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a134:	f103 0301 	add.w	r3, r3, #1
 801a138:	bf08      	it	eq
 801a13a:	2320      	moveq	r3, #32
 801a13c:	4618      	mov	r0, r3
 801a13e:	4770      	bx	lr
 801a140:	2300      	movs	r3, #0
 801a142:	e7e4      	b.n	801a10e <__hi0bits+0xa>

0801a144 <__lo0bits>:
 801a144:	6803      	ldr	r3, [r0, #0]
 801a146:	f013 0207 	ands.w	r2, r3, #7
 801a14a:	4601      	mov	r1, r0
 801a14c:	d00b      	beq.n	801a166 <__lo0bits+0x22>
 801a14e:	07da      	lsls	r2, r3, #31
 801a150:	d424      	bmi.n	801a19c <__lo0bits+0x58>
 801a152:	0798      	lsls	r0, r3, #30
 801a154:	bf49      	itett	mi
 801a156:	085b      	lsrmi	r3, r3, #1
 801a158:	089b      	lsrpl	r3, r3, #2
 801a15a:	2001      	movmi	r0, #1
 801a15c:	600b      	strmi	r3, [r1, #0]
 801a15e:	bf5c      	itt	pl
 801a160:	600b      	strpl	r3, [r1, #0]
 801a162:	2002      	movpl	r0, #2
 801a164:	4770      	bx	lr
 801a166:	b298      	uxth	r0, r3
 801a168:	b9b0      	cbnz	r0, 801a198 <__lo0bits+0x54>
 801a16a:	0c1b      	lsrs	r3, r3, #16
 801a16c:	2010      	movs	r0, #16
 801a16e:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a172:	bf04      	itt	eq
 801a174:	0a1b      	lsreq	r3, r3, #8
 801a176:	3008      	addeq	r0, #8
 801a178:	071a      	lsls	r2, r3, #28
 801a17a:	bf04      	itt	eq
 801a17c:	091b      	lsreq	r3, r3, #4
 801a17e:	3004      	addeq	r0, #4
 801a180:	079a      	lsls	r2, r3, #30
 801a182:	bf04      	itt	eq
 801a184:	089b      	lsreq	r3, r3, #2
 801a186:	3002      	addeq	r0, #2
 801a188:	07da      	lsls	r2, r3, #31
 801a18a:	d403      	bmi.n	801a194 <__lo0bits+0x50>
 801a18c:	085b      	lsrs	r3, r3, #1
 801a18e:	f100 0001 	add.w	r0, r0, #1
 801a192:	d005      	beq.n	801a1a0 <__lo0bits+0x5c>
 801a194:	600b      	str	r3, [r1, #0]
 801a196:	4770      	bx	lr
 801a198:	4610      	mov	r0, r2
 801a19a:	e7e8      	b.n	801a16e <__lo0bits+0x2a>
 801a19c:	2000      	movs	r0, #0
 801a19e:	4770      	bx	lr
 801a1a0:	2020      	movs	r0, #32
 801a1a2:	4770      	bx	lr

0801a1a4 <__i2b>:
 801a1a4:	b510      	push	{r4, lr}
 801a1a6:	460c      	mov	r4, r1
 801a1a8:	2101      	movs	r1, #1
 801a1aa:	f7ff feb5 	bl	8019f18 <_Balloc>
 801a1ae:	4602      	mov	r2, r0
 801a1b0:	b928      	cbnz	r0, 801a1be <__i2b+0x1a>
 801a1b2:	4b05      	ldr	r3, [pc, #20]	; (801a1c8 <__i2b+0x24>)
 801a1b4:	4805      	ldr	r0, [pc, #20]	; (801a1cc <__i2b+0x28>)
 801a1b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a1ba:	f7ff fa57 	bl	801966c <__assert_func>
 801a1be:	2301      	movs	r3, #1
 801a1c0:	6144      	str	r4, [r0, #20]
 801a1c2:	6103      	str	r3, [r0, #16]
 801a1c4:	bd10      	pop	{r4, pc}
 801a1c6:	bf00      	nop
 801a1c8:	0801eeac 	.word	0x0801eeac
 801a1cc:	0801ef3c 	.word	0x0801ef3c

0801a1d0 <__multiply>:
 801a1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1d4:	4614      	mov	r4, r2
 801a1d6:	690a      	ldr	r2, [r1, #16]
 801a1d8:	6923      	ldr	r3, [r4, #16]
 801a1da:	429a      	cmp	r2, r3
 801a1dc:	bfb8      	it	lt
 801a1de:	460b      	movlt	r3, r1
 801a1e0:	460d      	mov	r5, r1
 801a1e2:	bfbc      	itt	lt
 801a1e4:	4625      	movlt	r5, r4
 801a1e6:	461c      	movlt	r4, r3
 801a1e8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801a1ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a1f0:	68ab      	ldr	r3, [r5, #8]
 801a1f2:	6869      	ldr	r1, [r5, #4]
 801a1f4:	eb0a 0709 	add.w	r7, sl, r9
 801a1f8:	42bb      	cmp	r3, r7
 801a1fa:	b085      	sub	sp, #20
 801a1fc:	bfb8      	it	lt
 801a1fe:	3101      	addlt	r1, #1
 801a200:	f7ff fe8a 	bl	8019f18 <_Balloc>
 801a204:	b930      	cbnz	r0, 801a214 <__multiply+0x44>
 801a206:	4602      	mov	r2, r0
 801a208:	4b42      	ldr	r3, [pc, #264]	; (801a314 <__multiply+0x144>)
 801a20a:	4843      	ldr	r0, [pc, #268]	; (801a318 <__multiply+0x148>)
 801a20c:	f240 115d 	movw	r1, #349	; 0x15d
 801a210:	f7ff fa2c 	bl	801966c <__assert_func>
 801a214:	f100 0614 	add.w	r6, r0, #20
 801a218:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801a21c:	4633      	mov	r3, r6
 801a21e:	2200      	movs	r2, #0
 801a220:	4543      	cmp	r3, r8
 801a222:	d31e      	bcc.n	801a262 <__multiply+0x92>
 801a224:	f105 0c14 	add.w	ip, r5, #20
 801a228:	f104 0314 	add.w	r3, r4, #20
 801a22c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801a230:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801a234:	9202      	str	r2, [sp, #8]
 801a236:	ebac 0205 	sub.w	r2, ip, r5
 801a23a:	3a15      	subs	r2, #21
 801a23c:	f022 0203 	bic.w	r2, r2, #3
 801a240:	3204      	adds	r2, #4
 801a242:	f105 0115 	add.w	r1, r5, #21
 801a246:	458c      	cmp	ip, r1
 801a248:	bf38      	it	cc
 801a24a:	2204      	movcc	r2, #4
 801a24c:	9201      	str	r2, [sp, #4]
 801a24e:	9a02      	ldr	r2, [sp, #8]
 801a250:	9303      	str	r3, [sp, #12]
 801a252:	429a      	cmp	r2, r3
 801a254:	d808      	bhi.n	801a268 <__multiply+0x98>
 801a256:	2f00      	cmp	r7, #0
 801a258:	dc55      	bgt.n	801a306 <__multiply+0x136>
 801a25a:	6107      	str	r7, [r0, #16]
 801a25c:	b005      	add	sp, #20
 801a25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a262:	f843 2b04 	str.w	r2, [r3], #4
 801a266:	e7db      	b.n	801a220 <__multiply+0x50>
 801a268:	f8b3 a000 	ldrh.w	sl, [r3]
 801a26c:	f1ba 0f00 	cmp.w	sl, #0
 801a270:	d020      	beq.n	801a2b4 <__multiply+0xe4>
 801a272:	f105 0e14 	add.w	lr, r5, #20
 801a276:	46b1      	mov	r9, r6
 801a278:	2200      	movs	r2, #0
 801a27a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801a27e:	f8d9 b000 	ldr.w	fp, [r9]
 801a282:	b2a1      	uxth	r1, r4
 801a284:	fa1f fb8b 	uxth.w	fp, fp
 801a288:	fb0a b101 	mla	r1, sl, r1, fp
 801a28c:	4411      	add	r1, r2
 801a28e:	f8d9 2000 	ldr.w	r2, [r9]
 801a292:	0c24      	lsrs	r4, r4, #16
 801a294:	0c12      	lsrs	r2, r2, #16
 801a296:	fb0a 2404 	mla	r4, sl, r4, r2
 801a29a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801a29e:	b289      	uxth	r1, r1
 801a2a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801a2a4:	45f4      	cmp	ip, lr
 801a2a6:	f849 1b04 	str.w	r1, [r9], #4
 801a2aa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801a2ae:	d8e4      	bhi.n	801a27a <__multiply+0xaa>
 801a2b0:	9901      	ldr	r1, [sp, #4]
 801a2b2:	5072      	str	r2, [r6, r1]
 801a2b4:	9a03      	ldr	r2, [sp, #12]
 801a2b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a2ba:	3304      	adds	r3, #4
 801a2bc:	f1b9 0f00 	cmp.w	r9, #0
 801a2c0:	d01f      	beq.n	801a302 <__multiply+0x132>
 801a2c2:	6834      	ldr	r4, [r6, #0]
 801a2c4:	f105 0114 	add.w	r1, r5, #20
 801a2c8:	46b6      	mov	lr, r6
 801a2ca:	f04f 0a00 	mov.w	sl, #0
 801a2ce:	880a      	ldrh	r2, [r1, #0]
 801a2d0:	f8be b002 	ldrh.w	fp, [lr, #2]
 801a2d4:	fb09 b202 	mla	r2, r9, r2, fp
 801a2d8:	4492      	add	sl, r2
 801a2da:	b2a4      	uxth	r4, r4
 801a2dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a2e0:	f84e 4b04 	str.w	r4, [lr], #4
 801a2e4:	f851 4b04 	ldr.w	r4, [r1], #4
 801a2e8:	f8be 2000 	ldrh.w	r2, [lr]
 801a2ec:	0c24      	lsrs	r4, r4, #16
 801a2ee:	fb09 2404 	mla	r4, r9, r4, r2
 801a2f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801a2f6:	458c      	cmp	ip, r1
 801a2f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a2fc:	d8e7      	bhi.n	801a2ce <__multiply+0xfe>
 801a2fe:	9a01      	ldr	r2, [sp, #4]
 801a300:	50b4      	str	r4, [r6, r2]
 801a302:	3604      	adds	r6, #4
 801a304:	e7a3      	b.n	801a24e <__multiply+0x7e>
 801a306:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d1a5      	bne.n	801a25a <__multiply+0x8a>
 801a30e:	3f01      	subs	r7, #1
 801a310:	e7a1      	b.n	801a256 <__multiply+0x86>
 801a312:	bf00      	nop
 801a314:	0801eeac 	.word	0x0801eeac
 801a318:	0801ef3c 	.word	0x0801ef3c

0801a31c <__pow5mult>:
 801a31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a320:	4615      	mov	r5, r2
 801a322:	f012 0203 	ands.w	r2, r2, #3
 801a326:	4606      	mov	r6, r0
 801a328:	460f      	mov	r7, r1
 801a32a:	d007      	beq.n	801a33c <__pow5mult+0x20>
 801a32c:	4c25      	ldr	r4, [pc, #148]	; (801a3c4 <__pow5mult+0xa8>)
 801a32e:	3a01      	subs	r2, #1
 801a330:	2300      	movs	r3, #0
 801a332:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a336:	f7ff fe51 	bl	8019fdc <__multadd>
 801a33a:	4607      	mov	r7, r0
 801a33c:	10ad      	asrs	r5, r5, #2
 801a33e:	d03d      	beq.n	801a3bc <__pow5mult+0xa0>
 801a340:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a342:	b97c      	cbnz	r4, 801a364 <__pow5mult+0x48>
 801a344:	2010      	movs	r0, #16
 801a346:	f7fd ffc3 	bl	80182d0 <malloc>
 801a34a:	4602      	mov	r2, r0
 801a34c:	6270      	str	r0, [r6, #36]	; 0x24
 801a34e:	b928      	cbnz	r0, 801a35c <__pow5mult+0x40>
 801a350:	4b1d      	ldr	r3, [pc, #116]	; (801a3c8 <__pow5mult+0xac>)
 801a352:	481e      	ldr	r0, [pc, #120]	; (801a3cc <__pow5mult+0xb0>)
 801a354:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a358:	f7ff f988 	bl	801966c <__assert_func>
 801a35c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a360:	6004      	str	r4, [r0, #0]
 801a362:	60c4      	str	r4, [r0, #12]
 801a364:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a368:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a36c:	b94c      	cbnz	r4, 801a382 <__pow5mult+0x66>
 801a36e:	f240 2171 	movw	r1, #625	; 0x271
 801a372:	4630      	mov	r0, r6
 801a374:	f7ff ff16 	bl	801a1a4 <__i2b>
 801a378:	2300      	movs	r3, #0
 801a37a:	f8c8 0008 	str.w	r0, [r8, #8]
 801a37e:	4604      	mov	r4, r0
 801a380:	6003      	str	r3, [r0, #0]
 801a382:	f04f 0900 	mov.w	r9, #0
 801a386:	07eb      	lsls	r3, r5, #31
 801a388:	d50a      	bpl.n	801a3a0 <__pow5mult+0x84>
 801a38a:	4639      	mov	r1, r7
 801a38c:	4622      	mov	r2, r4
 801a38e:	4630      	mov	r0, r6
 801a390:	f7ff ff1e 	bl	801a1d0 <__multiply>
 801a394:	4639      	mov	r1, r7
 801a396:	4680      	mov	r8, r0
 801a398:	4630      	mov	r0, r6
 801a39a:	f7ff fdfd 	bl	8019f98 <_Bfree>
 801a39e:	4647      	mov	r7, r8
 801a3a0:	106d      	asrs	r5, r5, #1
 801a3a2:	d00b      	beq.n	801a3bc <__pow5mult+0xa0>
 801a3a4:	6820      	ldr	r0, [r4, #0]
 801a3a6:	b938      	cbnz	r0, 801a3b8 <__pow5mult+0x9c>
 801a3a8:	4622      	mov	r2, r4
 801a3aa:	4621      	mov	r1, r4
 801a3ac:	4630      	mov	r0, r6
 801a3ae:	f7ff ff0f 	bl	801a1d0 <__multiply>
 801a3b2:	6020      	str	r0, [r4, #0]
 801a3b4:	f8c0 9000 	str.w	r9, [r0]
 801a3b8:	4604      	mov	r4, r0
 801a3ba:	e7e4      	b.n	801a386 <__pow5mult+0x6a>
 801a3bc:	4638      	mov	r0, r7
 801a3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3c2:	bf00      	nop
 801a3c4:	0801f090 	.word	0x0801f090
 801a3c8:	0801ed9c 	.word	0x0801ed9c
 801a3cc:	0801ef3c 	.word	0x0801ef3c

0801a3d0 <__lshift>:
 801a3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3d4:	460c      	mov	r4, r1
 801a3d6:	6849      	ldr	r1, [r1, #4]
 801a3d8:	6923      	ldr	r3, [r4, #16]
 801a3da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a3de:	68a3      	ldr	r3, [r4, #8]
 801a3e0:	4607      	mov	r7, r0
 801a3e2:	4691      	mov	r9, r2
 801a3e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a3e8:	f108 0601 	add.w	r6, r8, #1
 801a3ec:	42b3      	cmp	r3, r6
 801a3ee:	db0b      	blt.n	801a408 <__lshift+0x38>
 801a3f0:	4638      	mov	r0, r7
 801a3f2:	f7ff fd91 	bl	8019f18 <_Balloc>
 801a3f6:	4605      	mov	r5, r0
 801a3f8:	b948      	cbnz	r0, 801a40e <__lshift+0x3e>
 801a3fa:	4602      	mov	r2, r0
 801a3fc:	4b28      	ldr	r3, [pc, #160]	; (801a4a0 <__lshift+0xd0>)
 801a3fe:	4829      	ldr	r0, [pc, #164]	; (801a4a4 <__lshift+0xd4>)
 801a400:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a404:	f7ff f932 	bl	801966c <__assert_func>
 801a408:	3101      	adds	r1, #1
 801a40a:	005b      	lsls	r3, r3, #1
 801a40c:	e7ee      	b.n	801a3ec <__lshift+0x1c>
 801a40e:	2300      	movs	r3, #0
 801a410:	f100 0114 	add.w	r1, r0, #20
 801a414:	f100 0210 	add.w	r2, r0, #16
 801a418:	4618      	mov	r0, r3
 801a41a:	4553      	cmp	r3, sl
 801a41c:	db33      	blt.n	801a486 <__lshift+0xb6>
 801a41e:	6920      	ldr	r0, [r4, #16]
 801a420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a424:	f104 0314 	add.w	r3, r4, #20
 801a428:	f019 091f 	ands.w	r9, r9, #31
 801a42c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a430:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a434:	d02b      	beq.n	801a48e <__lshift+0xbe>
 801a436:	f1c9 0e20 	rsb	lr, r9, #32
 801a43a:	468a      	mov	sl, r1
 801a43c:	2200      	movs	r2, #0
 801a43e:	6818      	ldr	r0, [r3, #0]
 801a440:	fa00 f009 	lsl.w	r0, r0, r9
 801a444:	4302      	orrs	r2, r0
 801a446:	f84a 2b04 	str.w	r2, [sl], #4
 801a44a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a44e:	459c      	cmp	ip, r3
 801a450:	fa22 f20e 	lsr.w	r2, r2, lr
 801a454:	d8f3      	bhi.n	801a43e <__lshift+0x6e>
 801a456:	ebac 0304 	sub.w	r3, ip, r4
 801a45a:	3b15      	subs	r3, #21
 801a45c:	f023 0303 	bic.w	r3, r3, #3
 801a460:	3304      	adds	r3, #4
 801a462:	f104 0015 	add.w	r0, r4, #21
 801a466:	4584      	cmp	ip, r0
 801a468:	bf38      	it	cc
 801a46a:	2304      	movcc	r3, #4
 801a46c:	50ca      	str	r2, [r1, r3]
 801a46e:	b10a      	cbz	r2, 801a474 <__lshift+0xa4>
 801a470:	f108 0602 	add.w	r6, r8, #2
 801a474:	3e01      	subs	r6, #1
 801a476:	4638      	mov	r0, r7
 801a478:	612e      	str	r6, [r5, #16]
 801a47a:	4621      	mov	r1, r4
 801a47c:	f7ff fd8c 	bl	8019f98 <_Bfree>
 801a480:	4628      	mov	r0, r5
 801a482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a486:	f842 0f04 	str.w	r0, [r2, #4]!
 801a48a:	3301      	adds	r3, #1
 801a48c:	e7c5      	b.n	801a41a <__lshift+0x4a>
 801a48e:	3904      	subs	r1, #4
 801a490:	f853 2b04 	ldr.w	r2, [r3], #4
 801a494:	f841 2f04 	str.w	r2, [r1, #4]!
 801a498:	459c      	cmp	ip, r3
 801a49a:	d8f9      	bhi.n	801a490 <__lshift+0xc0>
 801a49c:	e7ea      	b.n	801a474 <__lshift+0xa4>
 801a49e:	bf00      	nop
 801a4a0:	0801eeac 	.word	0x0801eeac
 801a4a4:	0801ef3c 	.word	0x0801ef3c

0801a4a8 <__mcmp>:
 801a4a8:	b530      	push	{r4, r5, lr}
 801a4aa:	6902      	ldr	r2, [r0, #16]
 801a4ac:	690c      	ldr	r4, [r1, #16]
 801a4ae:	1b12      	subs	r2, r2, r4
 801a4b0:	d10e      	bne.n	801a4d0 <__mcmp+0x28>
 801a4b2:	f100 0314 	add.w	r3, r0, #20
 801a4b6:	3114      	adds	r1, #20
 801a4b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a4bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a4c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a4c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a4c8:	42a5      	cmp	r5, r4
 801a4ca:	d003      	beq.n	801a4d4 <__mcmp+0x2c>
 801a4cc:	d305      	bcc.n	801a4da <__mcmp+0x32>
 801a4ce:	2201      	movs	r2, #1
 801a4d0:	4610      	mov	r0, r2
 801a4d2:	bd30      	pop	{r4, r5, pc}
 801a4d4:	4283      	cmp	r3, r0
 801a4d6:	d3f3      	bcc.n	801a4c0 <__mcmp+0x18>
 801a4d8:	e7fa      	b.n	801a4d0 <__mcmp+0x28>
 801a4da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a4de:	e7f7      	b.n	801a4d0 <__mcmp+0x28>

0801a4e0 <__mdiff>:
 801a4e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4e4:	460c      	mov	r4, r1
 801a4e6:	4606      	mov	r6, r0
 801a4e8:	4611      	mov	r1, r2
 801a4ea:	4620      	mov	r0, r4
 801a4ec:	4617      	mov	r7, r2
 801a4ee:	f7ff ffdb 	bl	801a4a8 <__mcmp>
 801a4f2:	1e05      	subs	r5, r0, #0
 801a4f4:	d110      	bne.n	801a518 <__mdiff+0x38>
 801a4f6:	4629      	mov	r1, r5
 801a4f8:	4630      	mov	r0, r6
 801a4fa:	f7ff fd0d 	bl	8019f18 <_Balloc>
 801a4fe:	b930      	cbnz	r0, 801a50e <__mdiff+0x2e>
 801a500:	4b39      	ldr	r3, [pc, #228]	; (801a5e8 <__mdiff+0x108>)
 801a502:	4602      	mov	r2, r0
 801a504:	f240 2132 	movw	r1, #562	; 0x232
 801a508:	4838      	ldr	r0, [pc, #224]	; (801a5ec <__mdiff+0x10c>)
 801a50a:	f7ff f8af 	bl	801966c <__assert_func>
 801a50e:	2301      	movs	r3, #1
 801a510:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a518:	bfa4      	itt	ge
 801a51a:	463b      	movge	r3, r7
 801a51c:	4627      	movge	r7, r4
 801a51e:	4630      	mov	r0, r6
 801a520:	6879      	ldr	r1, [r7, #4]
 801a522:	bfa6      	itte	ge
 801a524:	461c      	movge	r4, r3
 801a526:	2500      	movge	r5, #0
 801a528:	2501      	movlt	r5, #1
 801a52a:	f7ff fcf5 	bl	8019f18 <_Balloc>
 801a52e:	b920      	cbnz	r0, 801a53a <__mdiff+0x5a>
 801a530:	4b2d      	ldr	r3, [pc, #180]	; (801a5e8 <__mdiff+0x108>)
 801a532:	4602      	mov	r2, r0
 801a534:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a538:	e7e6      	b.n	801a508 <__mdiff+0x28>
 801a53a:	693e      	ldr	r6, [r7, #16]
 801a53c:	60c5      	str	r5, [r0, #12]
 801a53e:	6925      	ldr	r5, [r4, #16]
 801a540:	f107 0114 	add.w	r1, r7, #20
 801a544:	f104 0914 	add.w	r9, r4, #20
 801a548:	f100 0e14 	add.w	lr, r0, #20
 801a54c:	f107 0210 	add.w	r2, r7, #16
 801a550:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801a554:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801a558:	46f2      	mov	sl, lr
 801a55a:	2700      	movs	r7, #0
 801a55c:	f859 3b04 	ldr.w	r3, [r9], #4
 801a560:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a564:	fa1f f883 	uxth.w	r8, r3
 801a568:	fa17 f78b 	uxtah	r7, r7, fp
 801a56c:	0c1b      	lsrs	r3, r3, #16
 801a56e:	eba7 0808 	sub.w	r8, r7, r8
 801a572:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a576:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a57a:	fa1f f888 	uxth.w	r8, r8
 801a57e:	141f      	asrs	r7, r3, #16
 801a580:	454d      	cmp	r5, r9
 801a582:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a586:	f84a 3b04 	str.w	r3, [sl], #4
 801a58a:	d8e7      	bhi.n	801a55c <__mdiff+0x7c>
 801a58c:	1b2b      	subs	r3, r5, r4
 801a58e:	3b15      	subs	r3, #21
 801a590:	f023 0303 	bic.w	r3, r3, #3
 801a594:	3304      	adds	r3, #4
 801a596:	3415      	adds	r4, #21
 801a598:	42a5      	cmp	r5, r4
 801a59a:	bf38      	it	cc
 801a59c:	2304      	movcc	r3, #4
 801a59e:	4419      	add	r1, r3
 801a5a0:	4473      	add	r3, lr
 801a5a2:	469e      	mov	lr, r3
 801a5a4:	460d      	mov	r5, r1
 801a5a6:	4565      	cmp	r5, ip
 801a5a8:	d30e      	bcc.n	801a5c8 <__mdiff+0xe8>
 801a5aa:	f10c 0203 	add.w	r2, ip, #3
 801a5ae:	1a52      	subs	r2, r2, r1
 801a5b0:	f022 0203 	bic.w	r2, r2, #3
 801a5b4:	3903      	subs	r1, #3
 801a5b6:	458c      	cmp	ip, r1
 801a5b8:	bf38      	it	cc
 801a5ba:	2200      	movcc	r2, #0
 801a5bc:	441a      	add	r2, r3
 801a5be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a5c2:	b17b      	cbz	r3, 801a5e4 <__mdiff+0x104>
 801a5c4:	6106      	str	r6, [r0, #16]
 801a5c6:	e7a5      	b.n	801a514 <__mdiff+0x34>
 801a5c8:	f855 8b04 	ldr.w	r8, [r5], #4
 801a5cc:	fa17 f488 	uxtah	r4, r7, r8
 801a5d0:	1422      	asrs	r2, r4, #16
 801a5d2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801a5d6:	b2a4      	uxth	r4, r4
 801a5d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801a5dc:	f84e 4b04 	str.w	r4, [lr], #4
 801a5e0:	1417      	asrs	r7, r2, #16
 801a5e2:	e7e0      	b.n	801a5a6 <__mdiff+0xc6>
 801a5e4:	3e01      	subs	r6, #1
 801a5e6:	e7ea      	b.n	801a5be <__mdiff+0xde>
 801a5e8:	0801eeac 	.word	0x0801eeac
 801a5ec:	0801ef3c 	.word	0x0801ef3c

0801a5f0 <__ulp>:
 801a5f0:	b082      	sub	sp, #8
 801a5f2:	ed8d 0b00 	vstr	d0, [sp]
 801a5f6:	9b01      	ldr	r3, [sp, #4]
 801a5f8:	4912      	ldr	r1, [pc, #72]	; (801a644 <__ulp+0x54>)
 801a5fa:	4019      	ands	r1, r3
 801a5fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801a600:	2900      	cmp	r1, #0
 801a602:	dd05      	ble.n	801a610 <__ulp+0x20>
 801a604:	2200      	movs	r2, #0
 801a606:	460b      	mov	r3, r1
 801a608:	ec43 2b10 	vmov	d0, r2, r3
 801a60c:	b002      	add	sp, #8
 801a60e:	4770      	bx	lr
 801a610:	4249      	negs	r1, r1
 801a612:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801a616:	ea4f 5021 	mov.w	r0, r1, asr #20
 801a61a:	f04f 0200 	mov.w	r2, #0
 801a61e:	f04f 0300 	mov.w	r3, #0
 801a622:	da04      	bge.n	801a62e <__ulp+0x3e>
 801a624:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a628:	fa41 f300 	asr.w	r3, r1, r0
 801a62c:	e7ec      	b.n	801a608 <__ulp+0x18>
 801a62e:	f1a0 0114 	sub.w	r1, r0, #20
 801a632:	291e      	cmp	r1, #30
 801a634:	bfda      	itte	le
 801a636:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801a63a:	fa20 f101 	lsrle.w	r1, r0, r1
 801a63e:	2101      	movgt	r1, #1
 801a640:	460a      	mov	r2, r1
 801a642:	e7e1      	b.n	801a608 <__ulp+0x18>
 801a644:	7ff00000 	.word	0x7ff00000

0801a648 <__b2d>:
 801a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a64a:	6905      	ldr	r5, [r0, #16]
 801a64c:	f100 0714 	add.w	r7, r0, #20
 801a650:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a654:	1f2e      	subs	r6, r5, #4
 801a656:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a65a:	4620      	mov	r0, r4
 801a65c:	f7ff fd52 	bl	801a104 <__hi0bits>
 801a660:	f1c0 0320 	rsb	r3, r0, #32
 801a664:	280a      	cmp	r0, #10
 801a666:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801a6e4 <__b2d+0x9c>
 801a66a:	600b      	str	r3, [r1, #0]
 801a66c:	dc14      	bgt.n	801a698 <__b2d+0x50>
 801a66e:	f1c0 0e0b 	rsb	lr, r0, #11
 801a672:	fa24 f10e 	lsr.w	r1, r4, lr
 801a676:	42b7      	cmp	r7, r6
 801a678:	ea41 030c 	orr.w	r3, r1, ip
 801a67c:	bf34      	ite	cc
 801a67e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a682:	2100      	movcs	r1, #0
 801a684:	3015      	adds	r0, #21
 801a686:	fa04 f000 	lsl.w	r0, r4, r0
 801a68a:	fa21 f10e 	lsr.w	r1, r1, lr
 801a68e:	ea40 0201 	orr.w	r2, r0, r1
 801a692:	ec43 2b10 	vmov	d0, r2, r3
 801a696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a698:	42b7      	cmp	r7, r6
 801a69a:	bf3a      	itte	cc
 801a69c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a6a0:	f1a5 0608 	subcc.w	r6, r5, #8
 801a6a4:	2100      	movcs	r1, #0
 801a6a6:	380b      	subs	r0, #11
 801a6a8:	d017      	beq.n	801a6da <__b2d+0x92>
 801a6aa:	f1c0 0c20 	rsb	ip, r0, #32
 801a6ae:	fa04 f500 	lsl.w	r5, r4, r0
 801a6b2:	42be      	cmp	r6, r7
 801a6b4:	fa21 f40c 	lsr.w	r4, r1, ip
 801a6b8:	ea45 0504 	orr.w	r5, r5, r4
 801a6bc:	bf8c      	ite	hi
 801a6be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a6c2:	2400      	movls	r4, #0
 801a6c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801a6c8:	fa01 f000 	lsl.w	r0, r1, r0
 801a6cc:	fa24 f40c 	lsr.w	r4, r4, ip
 801a6d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a6d4:	ea40 0204 	orr.w	r2, r0, r4
 801a6d8:	e7db      	b.n	801a692 <__b2d+0x4a>
 801a6da:	ea44 030c 	orr.w	r3, r4, ip
 801a6de:	460a      	mov	r2, r1
 801a6e0:	e7d7      	b.n	801a692 <__b2d+0x4a>
 801a6e2:	bf00      	nop
 801a6e4:	3ff00000 	.word	0x3ff00000

0801a6e8 <__d2b>:
 801a6e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a6ec:	4689      	mov	r9, r1
 801a6ee:	2101      	movs	r1, #1
 801a6f0:	ec57 6b10 	vmov	r6, r7, d0
 801a6f4:	4690      	mov	r8, r2
 801a6f6:	f7ff fc0f 	bl	8019f18 <_Balloc>
 801a6fa:	4604      	mov	r4, r0
 801a6fc:	b930      	cbnz	r0, 801a70c <__d2b+0x24>
 801a6fe:	4602      	mov	r2, r0
 801a700:	4b25      	ldr	r3, [pc, #148]	; (801a798 <__d2b+0xb0>)
 801a702:	4826      	ldr	r0, [pc, #152]	; (801a79c <__d2b+0xb4>)
 801a704:	f240 310a 	movw	r1, #778	; 0x30a
 801a708:	f7fe ffb0 	bl	801966c <__assert_func>
 801a70c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a714:	bb35      	cbnz	r5, 801a764 <__d2b+0x7c>
 801a716:	2e00      	cmp	r6, #0
 801a718:	9301      	str	r3, [sp, #4]
 801a71a:	d028      	beq.n	801a76e <__d2b+0x86>
 801a71c:	4668      	mov	r0, sp
 801a71e:	9600      	str	r6, [sp, #0]
 801a720:	f7ff fd10 	bl	801a144 <__lo0bits>
 801a724:	9900      	ldr	r1, [sp, #0]
 801a726:	b300      	cbz	r0, 801a76a <__d2b+0x82>
 801a728:	9a01      	ldr	r2, [sp, #4]
 801a72a:	f1c0 0320 	rsb	r3, r0, #32
 801a72e:	fa02 f303 	lsl.w	r3, r2, r3
 801a732:	430b      	orrs	r3, r1
 801a734:	40c2      	lsrs	r2, r0
 801a736:	6163      	str	r3, [r4, #20]
 801a738:	9201      	str	r2, [sp, #4]
 801a73a:	9b01      	ldr	r3, [sp, #4]
 801a73c:	61a3      	str	r3, [r4, #24]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	bf14      	ite	ne
 801a742:	2202      	movne	r2, #2
 801a744:	2201      	moveq	r2, #1
 801a746:	6122      	str	r2, [r4, #16]
 801a748:	b1d5      	cbz	r5, 801a780 <__d2b+0x98>
 801a74a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a74e:	4405      	add	r5, r0
 801a750:	f8c9 5000 	str.w	r5, [r9]
 801a754:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a758:	f8c8 0000 	str.w	r0, [r8]
 801a75c:	4620      	mov	r0, r4
 801a75e:	b003      	add	sp, #12
 801a760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a768:	e7d5      	b.n	801a716 <__d2b+0x2e>
 801a76a:	6161      	str	r1, [r4, #20]
 801a76c:	e7e5      	b.n	801a73a <__d2b+0x52>
 801a76e:	a801      	add	r0, sp, #4
 801a770:	f7ff fce8 	bl	801a144 <__lo0bits>
 801a774:	9b01      	ldr	r3, [sp, #4]
 801a776:	6163      	str	r3, [r4, #20]
 801a778:	2201      	movs	r2, #1
 801a77a:	6122      	str	r2, [r4, #16]
 801a77c:	3020      	adds	r0, #32
 801a77e:	e7e3      	b.n	801a748 <__d2b+0x60>
 801a780:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a784:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a788:	f8c9 0000 	str.w	r0, [r9]
 801a78c:	6918      	ldr	r0, [r3, #16]
 801a78e:	f7ff fcb9 	bl	801a104 <__hi0bits>
 801a792:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a796:	e7df      	b.n	801a758 <__d2b+0x70>
 801a798:	0801eeac 	.word	0x0801eeac
 801a79c:	0801ef3c 	.word	0x0801ef3c

0801a7a0 <__ratio>:
 801a7a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7a4:	468a      	mov	sl, r1
 801a7a6:	4669      	mov	r1, sp
 801a7a8:	4683      	mov	fp, r0
 801a7aa:	f7ff ff4d 	bl	801a648 <__b2d>
 801a7ae:	a901      	add	r1, sp, #4
 801a7b0:	4650      	mov	r0, sl
 801a7b2:	ec59 8b10 	vmov	r8, r9, d0
 801a7b6:	ee10 6a10 	vmov	r6, s0
 801a7ba:	f7ff ff45 	bl	801a648 <__b2d>
 801a7be:	f8db 3010 	ldr.w	r3, [fp, #16]
 801a7c2:	f8da 2010 	ldr.w	r2, [sl, #16]
 801a7c6:	eba3 0c02 	sub.w	ip, r3, r2
 801a7ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a7ce:	1a9b      	subs	r3, r3, r2
 801a7d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a7d4:	ec55 4b10 	vmov	r4, r5, d0
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	ee10 0a10 	vmov	r0, s0
 801a7de:	bfce      	itee	gt
 801a7e0:	464a      	movgt	r2, r9
 801a7e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a7e6:	462a      	movle	r2, r5
 801a7e8:	464f      	mov	r7, r9
 801a7ea:	4629      	mov	r1, r5
 801a7ec:	bfcc      	ite	gt
 801a7ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a7f2:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801a7f6:	ec47 6b17 	vmov	d7, r6, r7
 801a7fa:	ec41 0b16 	vmov	d6, r0, r1
 801a7fe:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801a802:	b003      	add	sp, #12
 801a804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a808 <__copybits>:
 801a808:	3901      	subs	r1, #1
 801a80a:	b570      	push	{r4, r5, r6, lr}
 801a80c:	1149      	asrs	r1, r1, #5
 801a80e:	6914      	ldr	r4, [r2, #16]
 801a810:	3101      	adds	r1, #1
 801a812:	f102 0314 	add.w	r3, r2, #20
 801a816:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a81a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a81e:	1f05      	subs	r5, r0, #4
 801a820:	42a3      	cmp	r3, r4
 801a822:	d30c      	bcc.n	801a83e <__copybits+0x36>
 801a824:	1aa3      	subs	r3, r4, r2
 801a826:	3b11      	subs	r3, #17
 801a828:	f023 0303 	bic.w	r3, r3, #3
 801a82c:	3211      	adds	r2, #17
 801a82e:	42a2      	cmp	r2, r4
 801a830:	bf88      	it	hi
 801a832:	2300      	movhi	r3, #0
 801a834:	4418      	add	r0, r3
 801a836:	2300      	movs	r3, #0
 801a838:	4288      	cmp	r0, r1
 801a83a:	d305      	bcc.n	801a848 <__copybits+0x40>
 801a83c:	bd70      	pop	{r4, r5, r6, pc}
 801a83e:	f853 6b04 	ldr.w	r6, [r3], #4
 801a842:	f845 6f04 	str.w	r6, [r5, #4]!
 801a846:	e7eb      	b.n	801a820 <__copybits+0x18>
 801a848:	f840 3b04 	str.w	r3, [r0], #4
 801a84c:	e7f4      	b.n	801a838 <__copybits+0x30>

0801a84e <__any_on>:
 801a84e:	f100 0214 	add.w	r2, r0, #20
 801a852:	6900      	ldr	r0, [r0, #16]
 801a854:	114b      	asrs	r3, r1, #5
 801a856:	4298      	cmp	r0, r3
 801a858:	b510      	push	{r4, lr}
 801a85a:	db11      	blt.n	801a880 <__any_on+0x32>
 801a85c:	dd0a      	ble.n	801a874 <__any_on+0x26>
 801a85e:	f011 011f 	ands.w	r1, r1, #31
 801a862:	d007      	beq.n	801a874 <__any_on+0x26>
 801a864:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a868:	fa24 f001 	lsr.w	r0, r4, r1
 801a86c:	fa00 f101 	lsl.w	r1, r0, r1
 801a870:	428c      	cmp	r4, r1
 801a872:	d10b      	bne.n	801a88c <__any_on+0x3e>
 801a874:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a878:	4293      	cmp	r3, r2
 801a87a:	d803      	bhi.n	801a884 <__any_on+0x36>
 801a87c:	2000      	movs	r0, #0
 801a87e:	bd10      	pop	{r4, pc}
 801a880:	4603      	mov	r3, r0
 801a882:	e7f7      	b.n	801a874 <__any_on+0x26>
 801a884:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a888:	2900      	cmp	r1, #0
 801a88a:	d0f5      	beq.n	801a878 <__any_on+0x2a>
 801a88c:	2001      	movs	r0, #1
 801a88e:	e7f6      	b.n	801a87e <__any_on+0x30>

0801a890 <_calloc_r>:
 801a890:	b513      	push	{r0, r1, r4, lr}
 801a892:	434a      	muls	r2, r1
 801a894:	4611      	mov	r1, r2
 801a896:	9201      	str	r2, [sp, #4]
 801a898:	f7fd fdb8 	bl	801840c <_malloc_r>
 801a89c:	4604      	mov	r4, r0
 801a89e:	b118      	cbz	r0, 801a8a8 <_calloc_r+0x18>
 801a8a0:	9a01      	ldr	r2, [sp, #4]
 801a8a2:	2100      	movs	r1, #0
 801a8a4:	f7fd fd5a 	bl	801835c <memset>
 801a8a8:	4620      	mov	r0, r4
 801a8aa:	b002      	add	sp, #8
 801a8ac:	bd10      	pop	{r4, pc}

0801a8ae <__ssputs_r>:
 801a8ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8b2:	688e      	ldr	r6, [r1, #8]
 801a8b4:	429e      	cmp	r6, r3
 801a8b6:	4682      	mov	sl, r0
 801a8b8:	460c      	mov	r4, r1
 801a8ba:	4690      	mov	r8, r2
 801a8bc:	461f      	mov	r7, r3
 801a8be:	d838      	bhi.n	801a932 <__ssputs_r+0x84>
 801a8c0:	898a      	ldrh	r2, [r1, #12]
 801a8c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a8c6:	d032      	beq.n	801a92e <__ssputs_r+0x80>
 801a8c8:	6825      	ldr	r5, [r4, #0]
 801a8ca:	6909      	ldr	r1, [r1, #16]
 801a8cc:	eba5 0901 	sub.w	r9, r5, r1
 801a8d0:	6965      	ldr	r5, [r4, #20]
 801a8d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a8d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a8da:	3301      	adds	r3, #1
 801a8dc:	444b      	add	r3, r9
 801a8de:	106d      	asrs	r5, r5, #1
 801a8e0:	429d      	cmp	r5, r3
 801a8e2:	bf38      	it	cc
 801a8e4:	461d      	movcc	r5, r3
 801a8e6:	0553      	lsls	r3, r2, #21
 801a8e8:	d531      	bpl.n	801a94e <__ssputs_r+0xa0>
 801a8ea:	4629      	mov	r1, r5
 801a8ec:	f7fd fd8e 	bl	801840c <_malloc_r>
 801a8f0:	4606      	mov	r6, r0
 801a8f2:	b950      	cbnz	r0, 801a90a <__ssputs_r+0x5c>
 801a8f4:	230c      	movs	r3, #12
 801a8f6:	f8ca 3000 	str.w	r3, [sl]
 801a8fa:	89a3      	ldrh	r3, [r4, #12]
 801a8fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a900:	81a3      	strh	r3, [r4, #12]
 801a902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a90a:	6921      	ldr	r1, [r4, #16]
 801a90c:	464a      	mov	r2, r9
 801a90e:	f7fd fcfd 	bl	801830c <memcpy>
 801a912:	89a3      	ldrh	r3, [r4, #12]
 801a914:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a91c:	81a3      	strh	r3, [r4, #12]
 801a91e:	6126      	str	r6, [r4, #16]
 801a920:	6165      	str	r5, [r4, #20]
 801a922:	444e      	add	r6, r9
 801a924:	eba5 0509 	sub.w	r5, r5, r9
 801a928:	6026      	str	r6, [r4, #0]
 801a92a:	60a5      	str	r5, [r4, #8]
 801a92c:	463e      	mov	r6, r7
 801a92e:	42be      	cmp	r6, r7
 801a930:	d900      	bls.n	801a934 <__ssputs_r+0x86>
 801a932:	463e      	mov	r6, r7
 801a934:	4632      	mov	r2, r6
 801a936:	6820      	ldr	r0, [r4, #0]
 801a938:	4641      	mov	r1, r8
 801a93a:	f7fd fcf5 	bl	8018328 <memmove>
 801a93e:	68a3      	ldr	r3, [r4, #8]
 801a940:	6822      	ldr	r2, [r4, #0]
 801a942:	1b9b      	subs	r3, r3, r6
 801a944:	4432      	add	r2, r6
 801a946:	60a3      	str	r3, [r4, #8]
 801a948:	6022      	str	r2, [r4, #0]
 801a94a:	2000      	movs	r0, #0
 801a94c:	e7db      	b.n	801a906 <__ssputs_r+0x58>
 801a94e:	462a      	mov	r2, r5
 801a950:	f001 f834 	bl	801b9bc <_realloc_r>
 801a954:	4606      	mov	r6, r0
 801a956:	2800      	cmp	r0, #0
 801a958:	d1e1      	bne.n	801a91e <__ssputs_r+0x70>
 801a95a:	6921      	ldr	r1, [r4, #16]
 801a95c:	4650      	mov	r0, sl
 801a95e:	f7fd fd05 	bl	801836c <_free_r>
 801a962:	e7c7      	b.n	801a8f4 <__ssputs_r+0x46>

0801a964 <_svfiprintf_r>:
 801a964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a968:	4698      	mov	r8, r3
 801a96a:	898b      	ldrh	r3, [r1, #12]
 801a96c:	061b      	lsls	r3, r3, #24
 801a96e:	b09d      	sub	sp, #116	; 0x74
 801a970:	4607      	mov	r7, r0
 801a972:	460d      	mov	r5, r1
 801a974:	4614      	mov	r4, r2
 801a976:	d50e      	bpl.n	801a996 <_svfiprintf_r+0x32>
 801a978:	690b      	ldr	r3, [r1, #16]
 801a97a:	b963      	cbnz	r3, 801a996 <_svfiprintf_r+0x32>
 801a97c:	2140      	movs	r1, #64	; 0x40
 801a97e:	f7fd fd45 	bl	801840c <_malloc_r>
 801a982:	6028      	str	r0, [r5, #0]
 801a984:	6128      	str	r0, [r5, #16]
 801a986:	b920      	cbnz	r0, 801a992 <_svfiprintf_r+0x2e>
 801a988:	230c      	movs	r3, #12
 801a98a:	603b      	str	r3, [r7, #0]
 801a98c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a990:	e0d1      	b.n	801ab36 <_svfiprintf_r+0x1d2>
 801a992:	2340      	movs	r3, #64	; 0x40
 801a994:	616b      	str	r3, [r5, #20]
 801a996:	2300      	movs	r3, #0
 801a998:	9309      	str	r3, [sp, #36]	; 0x24
 801a99a:	2320      	movs	r3, #32
 801a99c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a9a0:	f8cd 800c 	str.w	r8, [sp, #12]
 801a9a4:	2330      	movs	r3, #48	; 0x30
 801a9a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ab50 <_svfiprintf_r+0x1ec>
 801a9aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a9ae:	f04f 0901 	mov.w	r9, #1
 801a9b2:	4623      	mov	r3, r4
 801a9b4:	469a      	mov	sl, r3
 801a9b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a9ba:	b10a      	cbz	r2, 801a9c0 <_svfiprintf_r+0x5c>
 801a9bc:	2a25      	cmp	r2, #37	; 0x25
 801a9be:	d1f9      	bne.n	801a9b4 <_svfiprintf_r+0x50>
 801a9c0:	ebba 0b04 	subs.w	fp, sl, r4
 801a9c4:	d00b      	beq.n	801a9de <_svfiprintf_r+0x7a>
 801a9c6:	465b      	mov	r3, fp
 801a9c8:	4622      	mov	r2, r4
 801a9ca:	4629      	mov	r1, r5
 801a9cc:	4638      	mov	r0, r7
 801a9ce:	f7ff ff6e 	bl	801a8ae <__ssputs_r>
 801a9d2:	3001      	adds	r0, #1
 801a9d4:	f000 80aa 	beq.w	801ab2c <_svfiprintf_r+0x1c8>
 801a9d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a9da:	445a      	add	r2, fp
 801a9dc:	9209      	str	r2, [sp, #36]	; 0x24
 801a9de:	f89a 3000 	ldrb.w	r3, [sl]
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	f000 80a2 	beq.w	801ab2c <_svfiprintf_r+0x1c8>
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a9ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a9f2:	f10a 0a01 	add.w	sl, sl, #1
 801a9f6:	9304      	str	r3, [sp, #16]
 801a9f8:	9307      	str	r3, [sp, #28]
 801a9fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a9fe:	931a      	str	r3, [sp, #104]	; 0x68
 801aa00:	4654      	mov	r4, sl
 801aa02:	2205      	movs	r2, #5
 801aa04:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa08:	4851      	ldr	r0, [pc, #324]	; (801ab50 <_svfiprintf_r+0x1ec>)
 801aa0a:	f7e5 fc81 	bl	8000310 <memchr>
 801aa0e:	9a04      	ldr	r2, [sp, #16]
 801aa10:	b9d8      	cbnz	r0, 801aa4a <_svfiprintf_r+0xe6>
 801aa12:	06d0      	lsls	r0, r2, #27
 801aa14:	bf44      	itt	mi
 801aa16:	2320      	movmi	r3, #32
 801aa18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aa1c:	0711      	lsls	r1, r2, #28
 801aa1e:	bf44      	itt	mi
 801aa20:	232b      	movmi	r3, #43	; 0x2b
 801aa22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aa26:	f89a 3000 	ldrb.w	r3, [sl]
 801aa2a:	2b2a      	cmp	r3, #42	; 0x2a
 801aa2c:	d015      	beq.n	801aa5a <_svfiprintf_r+0xf6>
 801aa2e:	9a07      	ldr	r2, [sp, #28]
 801aa30:	4654      	mov	r4, sl
 801aa32:	2000      	movs	r0, #0
 801aa34:	f04f 0c0a 	mov.w	ip, #10
 801aa38:	4621      	mov	r1, r4
 801aa3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aa3e:	3b30      	subs	r3, #48	; 0x30
 801aa40:	2b09      	cmp	r3, #9
 801aa42:	d94e      	bls.n	801aae2 <_svfiprintf_r+0x17e>
 801aa44:	b1b0      	cbz	r0, 801aa74 <_svfiprintf_r+0x110>
 801aa46:	9207      	str	r2, [sp, #28]
 801aa48:	e014      	b.n	801aa74 <_svfiprintf_r+0x110>
 801aa4a:	eba0 0308 	sub.w	r3, r0, r8
 801aa4e:	fa09 f303 	lsl.w	r3, r9, r3
 801aa52:	4313      	orrs	r3, r2
 801aa54:	9304      	str	r3, [sp, #16]
 801aa56:	46a2      	mov	sl, r4
 801aa58:	e7d2      	b.n	801aa00 <_svfiprintf_r+0x9c>
 801aa5a:	9b03      	ldr	r3, [sp, #12]
 801aa5c:	1d19      	adds	r1, r3, #4
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	9103      	str	r1, [sp, #12]
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	bfbb      	ittet	lt
 801aa66:	425b      	neglt	r3, r3
 801aa68:	f042 0202 	orrlt.w	r2, r2, #2
 801aa6c:	9307      	strge	r3, [sp, #28]
 801aa6e:	9307      	strlt	r3, [sp, #28]
 801aa70:	bfb8      	it	lt
 801aa72:	9204      	strlt	r2, [sp, #16]
 801aa74:	7823      	ldrb	r3, [r4, #0]
 801aa76:	2b2e      	cmp	r3, #46	; 0x2e
 801aa78:	d10c      	bne.n	801aa94 <_svfiprintf_r+0x130>
 801aa7a:	7863      	ldrb	r3, [r4, #1]
 801aa7c:	2b2a      	cmp	r3, #42	; 0x2a
 801aa7e:	d135      	bne.n	801aaec <_svfiprintf_r+0x188>
 801aa80:	9b03      	ldr	r3, [sp, #12]
 801aa82:	1d1a      	adds	r2, r3, #4
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	9203      	str	r2, [sp, #12]
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	bfb8      	it	lt
 801aa8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801aa90:	3402      	adds	r4, #2
 801aa92:	9305      	str	r3, [sp, #20]
 801aa94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ab60 <_svfiprintf_r+0x1fc>
 801aa98:	7821      	ldrb	r1, [r4, #0]
 801aa9a:	2203      	movs	r2, #3
 801aa9c:	4650      	mov	r0, sl
 801aa9e:	f7e5 fc37 	bl	8000310 <memchr>
 801aaa2:	b140      	cbz	r0, 801aab6 <_svfiprintf_r+0x152>
 801aaa4:	2340      	movs	r3, #64	; 0x40
 801aaa6:	eba0 000a 	sub.w	r0, r0, sl
 801aaaa:	fa03 f000 	lsl.w	r0, r3, r0
 801aaae:	9b04      	ldr	r3, [sp, #16]
 801aab0:	4303      	orrs	r3, r0
 801aab2:	3401      	adds	r4, #1
 801aab4:	9304      	str	r3, [sp, #16]
 801aab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aaba:	4826      	ldr	r0, [pc, #152]	; (801ab54 <_svfiprintf_r+0x1f0>)
 801aabc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aac0:	2206      	movs	r2, #6
 801aac2:	f7e5 fc25 	bl	8000310 <memchr>
 801aac6:	2800      	cmp	r0, #0
 801aac8:	d038      	beq.n	801ab3c <_svfiprintf_r+0x1d8>
 801aaca:	4b23      	ldr	r3, [pc, #140]	; (801ab58 <_svfiprintf_r+0x1f4>)
 801aacc:	bb1b      	cbnz	r3, 801ab16 <_svfiprintf_r+0x1b2>
 801aace:	9b03      	ldr	r3, [sp, #12]
 801aad0:	3307      	adds	r3, #7
 801aad2:	f023 0307 	bic.w	r3, r3, #7
 801aad6:	3308      	adds	r3, #8
 801aad8:	9303      	str	r3, [sp, #12]
 801aada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aadc:	4433      	add	r3, r6
 801aade:	9309      	str	r3, [sp, #36]	; 0x24
 801aae0:	e767      	b.n	801a9b2 <_svfiprintf_r+0x4e>
 801aae2:	fb0c 3202 	mla	r2, ip, r2, r3
 801aae6:	460c      	mov	r4, r1
 801aae8:	2001      	movs	r0, #1
 801aaea:	e7a5      	b.n	801aa38 <_svfiprintf_r+0xd4>
 801aaec:	2300      	movs	r3, #0
 801aaee:	3401      	adds	r4, #1
 801aaf0:	9305      	str	r3, [sp, #20]
 801aaf2:	4619      	mov	r1, r3
 801aaf4:	f04f 0c0a 	mov.w	ip, #10
 801aaf8:	4620      	mov	r0, r4
 801aafa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aafe:	3a30      	subs	r2, #48	; 0x30
 801ab00:	2a09      	cmp	r2, #9
 801ab02:	d903      	bls.n	801ab0c <_svfiprintf_r+0x1a8>
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d0c5      	beq.n	801aa94 <_svfiprintf_r+0x130>
 801ab08:	9105      	str	r1, [sp, #20]
 801ab0a:	e7c3      	b.n	801aa94 <_svfiprintf_r+0x130>
 801ab0c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ab10:	4604      	mov	r4, r0
 801ab12:	2301      	movs	r3, #1
 801ab14:	e7f0      	b.n	801aaf8 <_svfiprintf_r+0x194>
 801ab16:	ab03      	add	r3, sp, #12
 801ab18:	9300      	str	r3, [sp, #0]
 801ab1a:	462a      	mov	r2, r5
 801ab1c:	4b0f      	ldr	r3, [pc, #60]	; (801ab5c <_svfiprintf_r+0x1f8>)
 801ab1e:	a904      	add	r1, sp, #16
 801ab20:	4638      	mov	r0, r7
 801ab22:	f3af 8000 	nop.w
 801ab26:	1c42      	adds	r2, r0, #1
 801ab28:	4606      	mov	r6, r0
 801ab2a:	d1d6      	bne.n	801aada <_svfiprintf_r+0x176>
 801ab2c:	89ab      	ldrh	r3, [r5, #12]
 801ab2e:	065b      	lsls	r3, r3, #25
 801ab30:	f53f af2c 	bmi.w	801a98c <_svfiprintf_r+0x28>
 801ab34:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab36:	b01d      	add	sp, #116	; 0x74
 801ab38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab3c:	ab03      	add	r3, sp, #12
 801ab3e:	9300      	str	r3, [sp, #0]
 801ab40:	462a      	mov	r2, r5
 801ab42:	4b06      	ldr	r3, [pc, #24]	; (801ab5c <_svfiprintf_r+0x1f8>)
 801ab44:	a904      	add	r1, sp, #16
 801ab46:	4638      	mov	r0, r7
 801ab48:	f000 fba6 	bl	801b298 <_printf_i>
 801ab4c:	e7eb      	b.n	801ab26 <_svfiprintf_r+0x1c2>
 801ab4e:	bf00      	nop
 801ab50:	0801f09c 	.word	0x0801f09c
 801ab54:	0801f0a6 	.word	0x0801f0a6
 801ab58:	00000000 	.word	0x00000000
 801ab5c:	0801a8af 	.word	0x0801a8af
 801ab60:	0801f0a2 	.word	0x0801f0a2

0801ab64 <_sungetc_r>:
 801ab64:	b538      	push	{r3, r4, r5, lr}
 801ab66:	1c4b      	adds	r3, r1, #1
 801ab68:	4614      	mov	r4, r2
 801ab6a:	d103      	bne.n	801ab74 <_sungetc_r+0x10>
 801ab6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801ab70:	4628      	mov	r0, r5
 801ab72:	bd38      	pop	{r3, r4, r5, pc}
 801ab74:	8993      	ldrh	r3, [r2, #12]
 801ab76:	f023 0320 	bic.w	r3, r3, #32
 801ab7a:	8193      	strh	r3, [r2, #12]
 801ab7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ab7e:	6852      	ldr	r2, [r2, #4]
 801ab80:	b2cd      	uxtb	r5, r1
 801ab82:	b18b      	cbz	r3, 801aba8 <_sungetc_r+0x44>
 801ab84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ab86:	4293      	cmp	r3, r2
 801ab88:	dd08      	ble.n	801ab9c <_sungetc_r+0x38>
 801ab8a:	6823      	ldr	r3, [r4, #0]
 801ab8c:	1e5a      	subs	r2, r3, #1
 801ab8e:	6022      	str	r2, [r4, #0]
 801ab90:	f803 5c01 	strb.w	r5, [r3, #-1]
 801ab94:	6863      	ldr	r3, [r4, #4]
 801ab96:	3301      	adds	r3, #1
 801ab98:	6063      	str	r3, [r4, #4]
 801ab9a:	e7e9      	b.n	801ab70 <_sungetc_r+0xc>
 801ab9c:	4621      	mov	r1, r4
 801ab9e:	f000 febf 	bl	801b920 <__submore>
 801aba2:	2800      	cmp	r0, #0
 801aba4:	d0f1      	beq.n	801ab8a <_sungetc_r+0x26>
 801aba6:	e7e1      	b.n	801ab6c <_sungetc_r+0x8>
 801aba8:	6921      	ldr	r1, [r4, #16]
 801abaa:	6823      	ldr	r3, [r4, #0]
 801abac:	b151      	cbz	r1, 801abc4 <_sungetc_r+0x60>
 801abae:	4299      	cmp	r1, r3
 801abb0:	d208      	bcs.n	801abc4 <_sungetc_r+0x60>
 801abb2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801abb6:	42a9      	cmp	r1, r5
 801abb8:	d104      	bne.n	801abc4 <_sungetc_r+0x60>
 801abba:	3b01      	subs	r3, #1
 801abbc:	3201      	adds	r2, #1
 801abbe:	6023      	str	r3, [r4, #0]
 801abc0:	6062      	str	r2, [r4, #4]
 801abc2:	e7d5      	b.n	801ab70 <_sungetc_r+0xc>
 801abc4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801abc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801abcc:	6363      	str	r3, [r4, #52]	; 0x34
 801abce:	2303      	movs	r3, #3
 801abd0:	63a3      	str	r3, [r4, #56]	; 0x38
 801abd2:	4623      	mov	r3, r4
 801abd4:	f803 5f46 	strb.w	r5, [r3, #70]!
 801abd8:	6023      	str	r3, [r4, #0]
 801abda:	2301      	movs	r3, #1
 801abdc:	e7dc      	b.n	801ab98 <_sungetc_r+0x34>

0801abde <__ssrefill_r>:
 801abde:	b510      	push	{r4, lr}
 801abe0:	460c      	mov	r4, r1
 801abe2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801abe4:	b169      	cbz	r1, 801ac02 <__ssrefill_r+0x24>
 801abe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801abea:	4299      	cmp	r1, r3
 801abec:	d001      	beq.n	801abf2 <__ssrefill_r+0x14>
 801abee:	f7fd fbbd 	bl	801836c <_free_r>
 801abf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801abf4:	6063      	str	r3, [r4, #4]
 801abf6:	2000      	movs	r0, #0
 801abf8:	6360      	str	r0, [r4, #52]	; 0x34
 801abfa:	b113      	cbz	r3, 801ac02 <__ssrefill_r+0x24>
 801abfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801abfe:	6023      	str	r3, [r4, #0]
 801ac00:	bd10      	pop	{r4, pc}
 801ac02:	6923      	ldr	r3, [r4, #16]
 801ac04:	6023      	str	r3, [r4, #0]
 801ac06:	2300      	movs	r3, #0
 801ac08:	6063      	str	r3, [r4, #4]
 801ac0a:	89a3      	ldrh	r3, [r4, #12]
 801ac0c:	f043 0320 	orr.w	r3, r3, #32
 801ac10:	81a3      	strh	r3, [r4, #12]
 801ac12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ac16:	e7f3      	b.n	801ac00 <__ssrefill_r+0x22>

0801ac18 <__ssvfiscanf_r>:
 801ac18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac1c:	460c      	mov	r4, r1
 801ac1e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801ac22:	2100      	movs	r1, #0
 801ac24:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801ac28:	49b2      	ldr	r1, [pc, #712]	; (801aef4 <__ssvfiscanf_r+0x2dc>)
 801ac2a:	91a0      	str	r1, [sp, #640]	; 0x280
 801ac2c:	f10d 0804 	add.w	r8, sp, #4
 801ac30:	49b1      	ldr	r1, [pc, #708]	; (801aef8 <__ssvfiscanf_r+0x2e0>)
 801ac32:	4fb2      	ldr	r7, [pc, #712]	; (801aefc <__ssvfiscanf_r+0x2e4>)
 801ac34:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801af00 <__ssvfiscanf_r+0x2e8>
 801ac38:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801ac3c:	4606      	mov	r6, r0
 801ac3e:	91a1      	str	r1, [sp, #644]	; 0x284
 801ac40:	9300      	str	r3, [sp, #0]
 801ac42:	f892 a000 	ldrb.w	sl, [r2]
 801ac46:	f1ba 0f00 	cmp.w	sl, #0
 801ac4a:	f000 8151 	beq.w	801aef0 <__ssvfiscanf_r+0x2d8>
 801ac4e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801ac52:	f013 0308 	ands.w	r3, r3, #8
 801ac56:	f102 0501 	add.w	r5, r2, #1
 801ac5a:	d019      	beq.n	801ac90 <__ssvfiscanf_r+0x78>
 801ac5c:	6863      	ldr	r3, [r4, #4]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	dd0f      	ble.n	801ac82 <__ssvfiscanf_r+0x6a>
 801ac62:	6823      	ldr	r3, [r4, #0]
 801ac64:	781a      	ldrb	r2, [r3, #0]
 801ac66:	5cba      	ldrb	r2, [r7, r2]
 801ac68:	0712      	lsls	r2, r2, #28
 801ac6a:	d401      	bmi.n	801ac70 <__ssvfiscanf_r+0x58>
 801ac6c:	462a      	mov	r2, r5
 801ac6e:	e7e8      	b.n	801ac42 <__ssvfiscanf_r+0x2a>
 801ac70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ac72:	3201      	adds	r2, #1
 801ac74:	9245      	str	r2, [sp, #276]	; 0x114
 801ac76:	6862      	ldr	r2, [r4, #4]
 801ac78:	3301      	adds	r3, #1
 801ac7a:	3a01      	subs	r2, #1
 801ac7c:	6062      	str	r2, [r4, #4]
 801ac7e:	6023      	str	r3, [r4, #0]
 801ac80:	e7ec      	b.n	801ac5c <__ssvfiscanf_r+0x44>
 801ac82:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ac84:	4621      	mov	r1, r4
 801ac86:	4630      	mov	r0, r6
 801ac88:	4798      	blx	r3
 801ac8a:	2800      	cmp	r0, #0
 801ac8c:	d0e9      	beq.n	801ac62 <__ssvfiscanf_r+0x4a>
 801ac8e:	e7ed      	b.n	801ac6c <__ssvfiscanf_r+0x54>
 801ac90:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801ac94:	f040 8083 	bne.w	801ad9e <__ssvfiscanf_r+0x186>
 801ac98:	9341      	str	r3, [sp, #260]	; 0x104
 801ac9a:	9343      	str	r3, [sp, #268]	; 0x10c
 801ac9c:	7853      	ldrb	r3, [r2, #1]
 801ac9e:	2b2a      	cmp	r3, #42	; 0x2a
 801aca0:	bf02      	ittt	eq
 801aca2:	2310      	moveq	r3, #16
 801aca4:	1c95      	addeq	r5, r2, #2
 801aca6:	9341      	streq	r3, [sp, #260]	; 0x104
 801aca8:	220a      	movs	r2, #10
 801acaa:	46ab      	mov	fp, r5
 801acac:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801acb0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801acb4:	2b09      	cmp	r3, #9
 801acb6:	d91d      	bls.n	801acf4 <__ssvfiscanf_r+0xdc>
 801acb8:	4891      	ldr	r0, [pc, #580]	; (801af00 <__ssvfiscanf_r+0x2e8>)
 801acba:	2203      	movs	r2, #3
 801acbc:	f7e5 fb28 	bl	8000310 <memchr>
 801acc0:	b140      	cbz	r0, 801acd4 <__ssvfiscanf_r+0xbc>
 801acc2:	2301      	movs	r3, #1
 801acc4:	eba0 0009 	sub.w	r0, r0, r9
 801acc8:	fa03 f000 	lsl.w	r0, r3, r0
 801accc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801acce:	4318      	orrs	r0, r3
 801acd0:	9041      	str	r0, [sp, #260]	; 0x104
 801acd2:	465d      	mov	r5, fp
 801acd4:	f815 3b01 	ldrb.w	r3, [r5], #1
 801acd8:	2b78      	cmp	r3, #120	; 0x78
 801acda:	d806      	bhi.n	801acea <__ssvfiscanf_r+0xd2>
 801acdc:	2b57      	cmp	r3, #87	; 0x57
 801acde:	d810      	bhi.n	801ad02 <__ssvfiscanf_r+0xea>
 801ace0:	2b25      	cmp	r3, #37	; 0x25
 801ace2:	d05c      	beq.n	801ad9e <__ssvfiscanf_r+0x186>
 801ace4:	d856      	bhi.n	801ad94 <__ssvfiscanf_r+0x17c>
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d074      	beq.n	801add4 <__ssvfiscanf_r+0x1bc>
 801acea:	2303      	movs	r3, #3
 801acec:	9347      	str	r3, [sp, #284]	; 0x11c
 801acee:	230a      	movs	r3, #10
 801acf0:	9342      	str	r3, [sp, #264]	; 0x108
 801acf2:	e081      	b.n	801adf8 <__ssvfiscanf_r+0x1e0>
 801acf4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801acf6:	fb02 1303 	mla	r3, r2, r3, r1
 801acfa:	3b30      	subs	r3, #48	; 0x30
 801acfc:	9343      	str	r3, [sp, #268]	; 0x10c
 801acfe:	465d      	mov	r5, fp
 801ad00:	e7d3      	b.n	801acaa <__ssvfiscanf_r+0x92>
 801ad02:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801ad06:	2a20      	cmp	r2, #32
 801ad08:	d8ef      	bhi.n	801acea <__ssvfiscanf_r+0xd2>
 801ad0a:	a101      	add	r1, pc, #4	; (adr r1, 801ad10 <__ssvfiscanf_r+0xf8>)
 801ad0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ad10:	0801ade3 	.word	0x0801ade3
 801ad14:	0801aceb 	.word	0x0801aceb
 801ad18:	0801aceb 	.word	0x0801aceb
 801ad1c:	0801ae41 	.word	0x0801ae41
 801ad20:	0801aceb 	.word	0x0801aceb
 801ad24:	0801aceb 	.word	0x0801aceb
 801ad28:	0801aceb 	.word	0x0801aceb
 801ad2c:	0801aceb 	.word	0x0801aceb
 801ad30:	0801aceb 	.word	0x0801aceb
 801ad34:	0801aceb 	.word	0x0801aceb
 801ad38:	0801aceb 	.word	0x0801aceb
 801ad3c:	0801ae57 	.word	0x0801ae57
 801ad40:	0801ae2d 	.word	0x0801ae2d
 801ad44:	0801ad9b 	.word	0x0801ad9b
 801ad48:	0801ad9b 	.word	0x0801ad9b
 801ad4c:	0801ad9b 	.word	0x0801ad9b
 801ad50:	0801aceb 	.word	0x0801aceb
 801ad54:	0801ae31 	.word	0x0801ae31
 801ad58:	0801aceb 	.word	0x0801aceb
 801ad5c:	0801aceb 	.word	0x0801aceb
 801ad60:	0801aceb 	.word	0x0801aceb
 801ad64:	0801aceb 	.word	0x0801aceb
 801ad68:	0801ae67 	.word	0x0801ae67
 801ad6c:	0801ae39 	.word	0x0801ae39
 801ad70:	0801addb 	.word	0x0801addb
 801ad74:	0801aceb 	.word	0x0801aceb
 801ad78:	0801aceb 	.word	0x0801aceb
 801ad7c:	0801ae63 	.word	0x0801ae63
 801ad80:	0801aceb 	.word	0x0801aceb
 801ad84:	0801ae2d 	.word	0x0801ae2d
 801ad88:	0801aceb 	.word	0x0801aceb
 801ad8c:	0801aceb 	.word	0x0801aceb
 801ad90:	0801ade3 	.word	0x0801ade3
 801ad94:	3b45      	subs	r3, #69	; 0x45
 801ad96:	2b02      	cmp	r3, #2
 801ad98:	d8a7      	bhi.n	801acea <__ssvfiscanf_r+0xd2>
 801ad9a:	2305      	movs	r3, #5
 801ad9c:	e02b      	b.n	801adf6 <__ssvfiscanf_r+0x1de>
 801ad9e:	6863      	ldr	r3, [r4, #4]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	dd0d      	ble.n	801adc0 <__ssvfiscanf_r+0x1a8>
 801ada4:	6823      	ldr	r3, [r4, #0]
 801ada6:	781a      	ldrb	r2, [r3, #0]
 801ada8:	4552      	cmp	r2, sl
 801adaa:	f040 80a1 	bne.w	801aef0 <__ssvfiscanf_r+0x2d8>
 801adae:	3301      	adds	r3, #1
 801adb0:	6862      	ldr	r2, [r4, #4]
 801adb2:	6023      	str	r3, [r4, #0]
 801adb4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801adb6:	3a01      	subs	r2, #1
 801adb8:	3301      	adds	r3, #1
 801adba:	6062      	str	r2, [r4, #4]
 801adbc:	9345      	str	r3, [sp, #276]	; 0x114
 801adbe:	e755      	b.n	801ac6c <__ssvfiscanf_r+0x54>
 801adc0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801adc2:	4621      	mov	r1, r4
 801adc4:	4630      	mov	r0, r6
 801adc6:	4798      	blx	r3
 801adc8:	2800      	cmp	r0, #0
 801adca:	d0eb      	beq.n	801ada4 <__ssvfiscanf_r+0x18c>
 801adcc:	9844      	ldr	r0, [sp, #272]	; 0x110
 801adce:	2800      	cmp	r0, #0
 801add0:	f040 8084 	bne.w	801aedc <__ssvfiscanf_r+0x2c4>
 801add4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801add8:	e086      	b.n	801aee8 <__ssvfiscanf_r+0x2d0>
 801adda:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801addc:	f042 0220 	orr.w	r2, r2, #32
 801ade0:	9241      	str	r2, [sp, #260]	; 0x104
 801ade2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ade4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ade8:	9241      	str	r2, [sp, #260]	; 0x104
 801adea:	2210      	movs	r2, #16
 801adec:	2b6f      	cmp	r3, #111	; 0x6f
 801adee:	9242      	str	r2, [sp, #264]	; 0x108
 801adf0:	bf34      	ite	cc
 801adf2:	2303      	movcc	r3, #3
 801adf4:	2304      	movcs	r3, #4
 801adf6:	9347      	str	r3, [sp, #284]	; 0x11c
 801adf8:	6863      	ldr	r3, [r4, #4]
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	dd41      	ble.n	801ae82 <__ssvfiscanf_r+0x26a>
 801adfe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ae00:	0659      	lsls	r1, r3, #25
 801ae02:	d404      	bmi.n	801ae0e <__ssvfiscanf_r+0x1f6>
 801ae04:	6823      	ldr	r3, [r4, #0]
 801ae06:	781a      	ldrb	r2, [r3, #0]
 801ae08:	5cba      	ldrb	r2, [r7, r2]
 801ae0a:	0712      	lsls	r2, r2, #28
 801ae0c:	d440      	bmi.n	801ae90 <__ssvfiscanf_r+0x278>
 801ae0e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801ae10:	2b02      	cmp	r3, #2
 801ae12:	dc4f      	bgt.n	801aeb4 <__ssvfiscanf_r+0x29c>
 801ae14:	466b      	mov	r3, sp
 801ae16:	4622      	mov	r2, r4
 801ae18:	a941      	add	r1, sp, #260	; 0x104
 801ae1a:	4630      	mov	r0, r6
 801ae1c:	f000 fb62 	bl	801b4e4 <_scanf_chars>
 801ae20:	2801      	cmp	r0, #1
 801ae22:	d065      	beq.n	801aef0 <__ssvfiscanf_r+0x2d8>
 801ae24:	2802      	cmp	r0, #2
 801ae26:	f47f af21 	bne.w	801ac6c <__ssvfiscanf_r+0x54>
 801ae2a:	e7cf      	b.n	801adcc <__ssvfiscanf_r+0x1b4>
 801ae2c:	220a      	movs	r2, #10
 801ae2e:	e7dd      	b.n	801adec <__ssvfiscanf_r+0x1d4>
 801ae30:	2300      	movs	r3, #0
 801ae32:	9342      	str	r3, [sp, #264]	; 0x108
 801ae34:	2303      	movs	r3, #3
 801ae36:	e7de      	b.n	801adf6 <__ssvfiscanf_r+0x1de>
 801ae38:	2308      	movs	r3, #8
 801ae3a:	9342      	str	r3, [sp, #264]	; 0x108
 801ae3c:	2304      	movs	r3, #4
 801ae3e:	e7da      	b.n	801adf6 <__ssvfiscanf_r+0x1de>
 801ae40:	4629      	mov	r1, r5
 801ae42:	4640      	mov	r0, r8
 801ae44:	f000 fcb4 	bl	801b7b0 <__sccl>
 801ae48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ae4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae4e:	9341      	str	r3, [sp, #260]	; 0x104
 801ae50:	4605      	mov	r5, r0
 801ae52:	2301      	movs	r3, #1
 801ae54:	e7cf      	b.n	801adf6 <__ssvfiscanf_r+0x1de>
 801ae56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ae58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae5c:	9341      	str	r3, [sp, #260]	; 0x104
 801ae5e:	2300      	movs	r3, #0
 801ae60:	e7c9      	b.n	801adf6 <__ssvfiscanf_r+0x1de>
 801ae62:	2302      	movs	r3, #2
 801ae64:	e7c7      	b.n	801adf6 <__ssvfiscanf_r+0x1de>
 801ae66:	9841      	ldr	r0, [sp, #260]	; 0x104
 801ae68:	06c3      	lsls	r3, r0, #27
 801ae6a:	f53f aeff 	bmi.w	801ac6c <__ssvfiscanf_r+0x54>
 801ae6e:	9b00      	ldr	r3, [sp, #0]
 801ae70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ae72:	1d19      	adds	r1, r3, #4
 801ae74:	9100      	str	r1, [sp, #0]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	07c0      	lsls	r0, r0, #31
 801ae7a:	bf4c      	ite	mi
 801ae7c:	801a      	strhmi	r2, [r3, #0]
 801ae7e:	601a      	strpl	r2, [r3, #0]
 801ae80:	e6f4      	b.n	801ac6c <__ssvfiscanf_r+0x54>
 801ae82:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ae84:	4621      	mov	r1, r4
 801ae86:	4630      	mov	r0, r6
 801ae88:	4798      	blx	r3
 801ae8a:	2800      	cmp	r0, #0
 801ae8c:	d0b7      	beq.n	801adfe <__ssvfiscanf_r+0x1e6>
 801ae8e:	e79d      	b.n	801adcc <__ssvfiscanf_r+0x1b4>
 801ae90:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ae92:	3201      	adds	r2, #1
 801ae94:	9245      	str	r2, [sp, #276]	; 0x114
 801ae96:	6862      	ldr	r2, [r4, #4]
 801ae98:	3a01      	subs	r2, #1
 801ae9a:	2a00      	cmp	r2, #0
 801ae9c:	6062      	str	r2, [r4, #4]
 801ae9e:	dd02      	ble.n	801aea6 <__ssvfiscanf_r+0x28e>
 801aea0:	3301      	adds	r3, #1
 801aea2:	6023      	str	r3, [r4, #0]
 801aea4:	e7ae      	b.n	801ae04 <__ssvfiscanf_r+0x1ec>
 801aea6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801aea8:	4621      	mov	r1, r4
 801aeaa:	4630      	mov	r0, r6
 801aeac:	4798      	blx	r3
 801aeae:	2800      	cmp	r0, #0
 801aeb0:	d0a8      	beq.n	801ae04 <__ssvfiscanf_r+0x1ec>
 801aeb2:	e78b      	b.n	801adcc <__ssvfiscanf_r+0x1b4>
 801aeb4:	2b04      	cmp	r3, #4
 801aeb6:	dc06      	bgt.n	801aec6 <__ssvfiscanf_r+0x2ae>
 801aeb8:	466b      	mov	r3, sp
 801aeba:	4622      	mov	r2, r4
 801aebc:	a941      	add	r1, sp, #260	; 0x104
 801aebe:	4630      	mov	r0, r6
 801aec0:	f000 fb68 	bl	801b594 <_scanf_i>
 801aec4:	e7ac      	b.n	801ae20 <__ssvfiscanf_r+0x208>
 801aec6:	4b0f      	ldr	r3, [pc, #60]	; (801af04 <__ssvfiscanf_r+0x2ec>)
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	f43f aecf 	beq.w	801ac6c <__ssvfiscanf_r+0x54>
 801aece:	466b      	mov	r3, sp
 801aed0:	4622      	mov	r2, r4
 801aed2:	a941      	add	r1, sp, #260	; 0x104
 801aed4:	4630      	mov	r0, r6
 801aed6:	f3af 8000 	nop.w
 801aeda:	e7a1      	b.n	801ae20 <__ssvfiscanf_r+0x208>
 801aedc:	89a3      	ldrh	r3, [r4, #12]
 801aede:	f013 0f40 	tst.w	r3, #64	; 0x40
 801aee2:	bf18      	it	ne
 801aee4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801aee8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801aeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aef0:	9844      	ldr	r0, [sp, #272]	; 0x110
 801aef2:	e7f9      	b.n	801aee8 <__ssvfiscanf_r+0x2d0>
 801aef4:	0801ab65 	.word	0x0801ab65
 801aef8:	0801abdf 	.word	0x0801abdf
 801aefc:	0801ec37 	.word	0x0801ec37
 801af00:	0801f0a2 	.word	0x0801f0a2
 801af04:	00000000 	.word	0x00000000

0801af08 <__sfputc_r>:
 801af08:	6893      	ldr	r3, [r2, #8]
 801af0a:	3b01      	subs	r3, #1
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	b410      	push	{r4}
 801af10:	6093      	str	r3, [r2, #8]
 801af12:	da08      	bge.n	801af26 <__sfputc_r+0x1e>
 801af14:	6994      	ldr	r4, [r2, #24]
 801af16:	42a3      	cmp	r3, r4
 801af18:	db01      	blt.n	801af1e <__sfputc_r+0x16>
 801af1a:	290a      	cmp	r1, #10
 801af1c:	d103      	bne.n	801af26 <__sfputc_r+0x1e>
 801af1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af22:	f7fe bad1 	b.w	80194c8 <__swbuf_r>
 801af26:	6813      	ldr	r3, [r2, #0]
 801af28:	1c58      	adds	r0, r3, #1
 801af2a:	6010      	str	r0, [r2, #0]
 801af2c:	7019      	strb	r1, [r3, #0]
 801af2e:	4608      	mov	r0, r1
 801af30:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af34:	4770      	bx	lr

0801af36 <__sfputs_r>:
 801af36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af38:	4606      	mov	r6, r0
 801af3a:	460f      	mov	r7, r1
 801af3c:	4614      	mov	r4, r2
 801af3e:	18d5      	adds	r5, r2, r3
 801af40:	42ac      	cmp	r4, r5
 801af42:	d101      	bne.n	801af48 <__sfputs_r+0x12>
 801af44:	2000      	movs	r0, #0
 801af46:	e007      	b.n	801af58 <__sfputs_r+0x22>
 801af48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af4c:	463a      	mov	r2, r7
 801af4e:	4630      	mov	r0, r6
 801af50:	f7ff ffda 	bl	801af08 <__sfputc_r>
 801af54:	1c43      	adds	r3, r0, #1
 801af56:	d1f3      	bne.n	801af40 <__sfputs_r+0xa>
 801af58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801af5c <_vfiprintf_r>:
 801af5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af60:	460d      	mov	r5, r1
 801af62:	b09d      	sub	sp, #116	; 0x74
 801af64:	4614      	mov	r4, r2
 801af66:	4698      	mov	r8, r3
 801af68:	4606      	mov	r6, r0
 801af6a:	b118      	cbz	r0, 801af74 <_vfiprintf_r+0x18>
 801af6c:	6983      	ldr	r3, [r0, #24]
 801af6e:	b90b      	cbnz	r3, 801af74 <_vfiprintf_r+0x18>
 801af70:	f7fc fffa 	bl	8017f68 <__sinit>
 801af74:	4b89      	ldr	r3, [pc, #548]	; (801b19c <_vfiprintf_r+0x240>)
 801af76:	429d      	cmp	r5, r3
 801af78:	d11b      	bne.n	801afb2 <_vfiprintf_r+0x56>
 801af7a:	6875      	ldr	r5, [r6, #4]
 801af7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801af7e:	07d9      	lsls	r1, r3, #31
 801af80:	d405      	bmi.n	801af8e <_vfiprintf_r+0x32>
 801af82:	89ab      	ldrh	r3, [r5, #12]
 801af84:	059a      	lsls	r2, r3, #22
 801af86:	d402      	bmi.n	801af8e <_vfiprintf_r+0x32>
 801af88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af8a:	f7fd f93a 	bl	8018202 <__retarget_lock_acquire_recursive>
 801af8e:	89ab      	ldrh	r3, [r5, #12]
 801af90:	071b      	lsls	r3, r3, #28
 801af92:	d501      	bpl.n	801af98 <_vfiprintf_r+0x3c>
 801af94:	692b      	ldr	r3, [r5, #16]
 801af96:	b9eb      	cbnz	r3, 801afd4 <_vfiprintf_r+0x78>
 801af98:	4629      	mov	r1, r5
 801af9a:	4630      	mov	r0, r6
 801af9c:	f7fe faf8 	bl	8019590 <__swsetup_r>
 801afa0:	b1c0      	cbz	r0, 801afd4 <_vfiprintf_r+0x78>
 801afa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801afa4:	07dc      	lsls	r4, r3, #31
 801afa6:	d50e      	bpl.n	801afc6 <_vfiprintf_r+0x6a>
 801afa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801afac:	b01d      	add	sp, #116	; 0x74
 801afae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afb2:	4b7b      	ldr	r3, [pc, #492]	; (801b1a0 <_vfiprintf_r+0x244>)
 801afb4:	429d      	cmp	r5, r3
 801afb6:	d101      	bne.n	801afbc <_vfiprintf_r+0x60>
 801afb8:	68b5      	ldr	r5, [r6, #8]
 801afba:	e7df      	b.n	801af7c <_vfiprintf_r+0x20>
 801afbc:	4b79      	ldr	r3, [pc, #484]	; (801b1a4 <_vfiprintf_r+0x248>)
 801afbe:	429d      	cmp	r5, r3
 801afc0:	bf08      	it	eq
 801afc2:	68f5      	ldreq	r5, [r6, #12]
 801afc4:	e7da      	b.n	801af7c <_vfiprintf_r+0x20>
 801afc6:	89ab      	ldrh	r3, [r5, #12]
 801afc8:	0598      	lsls	r0, r3, #22
 801afca:	d4ed      	bmi.n	801afa8 <_vfiprintf_r+0x4c>
 801afcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801afce:	f7fd f919 	bl	8018204 <__retarget_lock_release_recursive>
 801afd2:	e7e9      	b.n	801afa8 <_vfiprintf_r+0x4c>
 801afd4:	2300      	movs	r3, #0
 801afd6:	9309      	str	r3, [sp, #36]	; 0x24
 801afd8:	2320      	movs	r3, #32
 801afda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801afde:	f8cd 800c 	str.w	r8, [sp, #12]
 801afe2:	2330      	movs	r3, #48	; 0x30
 801afe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b1a8 <_vfiprintf_r+0x24c>
 801afe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801afec:	f04f 0901 	mov.w	r9, #1
 801aff0:	4623      	mov	r3, r4
 801aff2:	469a      	mov	sl, r3
 801aff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aff8:	b10a      	cbz	r2, 801affe <_vfiprintf_r+0xa2>
 801affa:	2a25      	cmp	r2, #37	; 0x25
 801affc:	d1f9      	bne.n	801aff2 <_vfiprintf_r+0x96>
 801affe:	ebba 0b04 	subs.w	fp, sl, r4
 801b002:	d00b      	beq.n	801b01c <_vfiprintf_r+0xc0>
 801b004:	465b      	mov	r3, fp
 801b006:	4622      	mov	r2, r4
 801b008:	4629      	mov	r1, r5
 801b00a:	4630      	mov	r0, r6
 801b00c:	f7ff ff93 	bl	801af36 <__sfputs_r>
 801b010:	3001      	adds	r0, #1
 801b012:	f000 80aa 	beq.w	801b16a <_vfiprintf_r+0x20e>
 801b016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b018:	445a      	add	r2, fp
 801b01a:	9209      	str	r2, [sp, #36]	; 0x24
 801b01c:	f89a 3000 	ldrb.w	r3, [sl]
 801b020:	2b00      	cmp	r3, #0
 801b022:	f000 80a2 	beq.w	801b16a <_vfiprintf_r+0x20e>
 801b026:	2300      	movs	r3, #0
 801b028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b02c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b030:	f10a 0a01 	add.w	sl, sl, #1
 801b034:	9304      	str	r3, [sp, #16]
 801b036:	9307      	str	r3, [sp, #28]
 801b038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b03c:	931a      	str	r3, [sp, #104]	; 0x68
 801b03e:	4654      	mov	r4, sl
 801b040:	2205      	movs	r2, #5
 801b042:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b046:	4858      	ldr	r0, [pc, #352]	; (801b1a8 <_vfiprintf_r+0x24c>)
 801b048:	f7e5 f962 	bl	8000310 <memchr>
 801b04c:	9a04      	ldr	r2, [sp, #16]
 801b04e:	b9d8      	cbnz	r0, 801b088 <_vfiprintf_r+0x12c>
 801b050:	06d1      	lsls	r1, r2, #27
 801b052:	bf44      	itt	mi
 801b054:	2320      	movmi	r3, #32
 801b056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b05a:	0713      	lsls	r3, r2, #28
 801b05c:	bf44      	itt	mi
 801b05e:	232b      	movmi	r3, #43	; 0x2b
 801b060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b064:	f89a 3000 	ldrb.w	r3, [sl]
 801b068:	2b2a      	cmp	r3, #42	; 0x2a
 801b06a:	d015      	beq.n	801b098 <_vfiprintf_r+0x13c>
 801b06c:	9a07      	ldr	r2, [sp, #28]
 801b06e:	4654      	mov	r4, sl
 801b070:	2000      	movs	r0, #0
 801b072:	f04f 0c0a 	mov.w	ip, #10
 801b076:	4621      	mov	r1, r4
 801b078:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b07c:	3b30      	subs	r3, #48	; 0x30
 801b07e:	2b09      	cmp	r3, #9
 801b080:	d94e      	bls.n	801b120 <_vfiprintf_r+0x1c4>
 801b082:	b1b0      	cbz	r0, 801b0b2 <_vfiprintf_r+0x156>
 801b084:	9207      	str	r2, [sp, #28]
 801b086:	e014      	b.n	801b0b2 <_vfiprintf_r+0x156>
 801b088:	eba0 0308 	sub.w	r3, r0, r8
 801b08c:	fa09 f303 	lsl.w	r3, r9, r3
 801b090:	4313      	orrs	r3, r2
 801b092:	9304      	str	r3, [sp, #16]
 801b094:	46a2      	mov	sl, r4
 801b096:	e7d2      	b.n	801b03e <_vfiprintf_r+0xe2>
 801b098:	9b03      	ldr	r3, [sp, #12]
 801b09a:	1d19      	adds	r1, r3, #4
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	9103      	str	r1, [sp, #12]
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	bfbb      	ittet	lt
 801b0a4:	425b      	neglt	r3, r3
 801b0a6:	f042 0202 	orrlt.w	r2, r2, #2
 801b0aa:	9307      	strge	r3, [sp, #28]
 801b0ac:	9307      	strlt	r3, [sp, #28]
 801b0ae:	bfb8      	it	lt
 801b0b0:	9204      	strlt	r2, [sp, #16]
 801b0b2:	7823      	ldrb	r3, [r4, #0]
 801b0b4:	2b2e      	cmp	r3, #46	; 0x2e
 801b0b6:	d10c      	bne.n	801b0d2 <_vfiprintf_r+0x176>
 801b0b8:	7863      	ldrb	r3, [r4, #1]
 801b0ba:	2b2a      	cmp	r3, #42	; 0x2a
 801b0bc:	d135      	bne.n	801b12a <_vfiprintf_r+0x1ce>
 801b0be:	9b03      	ldr	r3, [sp, #12]
 801b0c0:	1d1a      	adds	r2, r3, #4
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	9203      	str	r2, [sp, #12]
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	bfb8      	it	lt
 801b0ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b0ce:	3402      	adds	r4, #2
 801b0d0:	9305      	str	r3, [sp, #20]
 801b0d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b1b8 <_vfiprintf_r+0x25c>
 801b0d6:	7821      	ldrb	r1, [r4, #0]
 801b0d8:	2203      	movs	r2, #3
 801b0da:	4650      	mov	r0, sl
 801b0dc:	f7e5 f918 	bl	8000310 <memchr>
 801b0e0:	b140      	cbz	r0, 801b0f4 <_vfiprintf_r+0x198>
 801b0e2:	2340      	movs	r3, #64	; 0x40
 801b0e4:	eba0 000a 	sub.w	r0, r0, sl
 801b0e8:	fa03 f000 	lsl.w	r0, r3, r0
 801b0ec:	9b04      	ldr	r3, [sp, #16]
 801b0ee:	4303      	orrs	r3, r0
 801b0f0:	3401      	adds	r4, #1
 801b0f2:	9304      	str	r3, [sp, #16]
 801b0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0f8:	482c      	ldr	r0, [pc, #176]	; (801b1ac <_vfiprintf_r+0x250>)
 801b0fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b0fe:	2206      	movs	r2, #6
 801b100:	f7e5 f906 	bl	8000310 <memchr>
 801b104:	2800      	cmp	r0, #0
 801b106:	d03f      	beq.n	801b188 <_vfiprintf_r+0x22c>
 801b108:	4b29      	ldr	r3, [pc, #164]	; (801b1b0 <_vfiprintf_r+0x254>)
 801b10a:	bb1b      	cbnz	r3, 801b154 <_vfiprintf_r+0x1f8>
 801b10c:	9b03      	ldr	r3, [sp, #12]
 801b10e:	3307      	adds	r3, #7
 801b110:	f023 0307 	bic.w	r3, r3, #7
 801b114:	3308      	adds	r3, #8
 801b116:	9303      	str	r3, [sp, #12]
 801b118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b11a:	443b      	add	r3, r7
 801b11c:	9309      	str	r3, [sp, #36]	; 0x24
 801b11e:	e767      	b.n	801aff0 <_vfiprintf_r+0x94>
 801b120:	fb0c 3202 	mla	r2, ip, r2, r3
 801b124:	460c      	mov	r4, r1
 801b126:	2001      	movs	r0, #1
 801b128:	e7a5      	b.n	801b076 <_vfiprintf_r+0x11a>
 801b12a:	2300      	movs	r3, #0
 801b12c:	3401      	adds	r4, #1
 801b12e:	9305      	str	r3, [sp, #20]
 801b130:	4619      	mov	r1, r3
 801b132:	f04f 0c0a 	mov.w	ip, #10
 801b136:	4620      	mov	r0, r4
 801b138:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b13c:	3a30      	subs	r2, #48	; 0x30
 801b13e:	2a09      	cmp	r2, #9
 801b140:	d903      	bls.n	801b14a <_vfiprintf_r+0x1ee>
 801b142:	2b00      	cmp	r3, #0
 801b144:	d0c5      	beq.n	801b0d2 <_vfiprintf_r+0x176>
 801b146:	9105      	str	r1, [sp, #20]
 801b148:	e7c3      	b.n	801b0d2 <_vfiprintf_r+0x176>
 801b14a:	fb0c 2101 	mla	r1, ip, r1, r2
 801b14e:	4604      	mov	r4, r0
 801b150:	2301      	movs	r3, #1
 801b152:	e7f0      	b.n	801b136 <_vfiprintf_r+0x1da>
 801b154:	ab03      	add	r3, sp, #12
 801b156:	9300      	str	r3, [sp, #0]
 801b158:	462a      	mov	r2, r5
 801b15a:	4b16      	ldr	r3, [pc, #88]	; (801b1b4 <_vfiprintf_r+0x258>)
 801b15c:	a904      	add	r1, sp, #16
 801b15e:	4630      	mov	r0, r6
 801b160:	f3af 8000 	nop.w
 801b164:	4607      	mov	r7, r0
 801b166:	1c78      	adds	r0, r7, #1
 801b168:	d1d6      	bne.n	801b118 <_vfiprintf_r+0x1bc>
 801b16a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b16c:	07d9      	lsls	r1, r3, #31
 801b16e:	d405      	bmi.n	801b17c <_vfiprintf_r+0x220>
 801b170:	89ab      	ldrh	r3, [r5, #12]
 801b172:	059a      	lsls	r2, r3, #22
 801b174:	d402      	bmi.n	801b17c <_vfiprintf_r+0x220>
 801b176:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b178:	f7fd f844 	bl	8018204 <__retarget_lock_release_recursive>
 801b17c:	89ab      	ldrh	r3, [r5, #12]
 801b17e:	065b      	lsls	r3, r3, #25
 801b180:	f53f af12 	bmi.w	801afa8 <_vfiprintf_r+0x4c>
 801b184:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b186:	e711      	b.n	801afac <_vfiprintf_r+0x50>
 801b188:	ab03      	add	r3, sp, #12
 801b18a:	9300      	str	r3, [sp, #0]
 801b18c:	462a      	mov	r2, r5
 801b18e:	4b09      	ldr	r3, [pc, #36]	; (801b1b4 <_vfiprintf_r+0x258>)
 801b190:	a904      	add	r1, sp, #16
 801b192:	4630      	mov	r0, r6
 801b194:	f000 f880 	bl	801b298 <_printf_i>
 801b198:	e7e4      	b.n	801b164 <_vfiprintf_r+0x208>
 801b19a:	bf00      	nop
 801b19c:	0801ed58 	.word	0x0801ed58
 801b1a0:	0801ed78 	.word	0x0801ed78
 801b1a4:	0801ed38 	.word	0x0801ed38
 801b1a8:	0801f09c 	.word	0x0801f09c
 801b1ac:	0801f0a6 	.word	0x0801f0a6
 801b1b0:	00000000 	.word	0x00000000
 801b1b4:	0801af37 	.word	0x0801af37
 801b1b8:	0801f0a2 	.word	0x0801f0a2

0801b1bc <_printf_common>:
 801b1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1c0:	4616      	mov	r6, r2
 801b1c2:	4699      	mov	r9, r3
 801b1c4:	688a      	ldr	r2, [r1, #8]
 801b1c6:	690b      	ldr	r3, [r1, #16]
 801b1c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b1cc:	4293      	cmp	r3, r2
 801b1ce:	bfb8      	it	lt
 801b1d0:	4613      	movlt	r3, r2
 801b1d2:	6033      	str	r3, [r6, #0]
 801b1d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b1d8:	4607      	mov	r7, r0
 801b1da:	460c      	mov	r4, r1
 801b1dc:	b10a      	cbz	r2, 801b1e2 <_printf_common+0x26>
 801b1de:	3301      	adds	r3, #1
 801b1e0:	6033      	str	r3, [r6, #0]
 801b1e2:	6823      	ldr	r3, [r4, #0]
 801b1e4:	0699      	lsls	r1, r3, #26
 801b1e6:	bf42      	ittt	mi
 801b1e8:	6833      	ldrmi	r3, [r6, #0]
 801b1ea:	3302      	addmi	r3, #2
 801b1ec:	6033      	strmi	r3, [r6, #0]
 801b1ee:	6825      	ldr	r5, [r4, #0]
 801b1f0:	f015 0506 	ands.w	r5, r5, #6
 801b1f4:	d106      	bne.n	801b204 <_printf_common+0x48>
 801b1f6:	f104 0a19 	add.w	sl, r4, #25
 801b1fa:	68e3      	ldr	r3, [r4, #12]
 801b1fc:	6832      	ldr	r2, [r6, #0]
 801b1fe:	1a9b      	subs	r3, r3, r2
 801b200:	42ab      	cmp	r3, r5
 801b202:	dc26      	bgt.n	801b252 <_printf_common+0x96>
 801b204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b208:	1e13      	subs	r3, r2, #0
 801b20a:	6822      	ldr	r2, [r4, #0]
 801b20c:	bf18      	it	ne
 801b20e:	2301      	movne	r3, #1
 801b210:	0692      	lsls	r2, r2, #26
 801b212:	d42b      	bmi.n	801b26c <_printf_common+0xb0>
 801b214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b218:	4649      	mov	r1, r9
 801b21a:	4638      	mov	r0, r7
 801b21c:	47c0      	blx	r8
 801b21e:	3001      	adds	r0, #1
 801b220:	d01e      	beq.n	801b260 <_printf_common+0xa4>
 801b222:	6823      	ldr	r3, [r4, #0]
 801b224:	68e5      	ldr	r5, [r4, #12]
 801b226:	6832      	ldr	r2, [r6, #0]
 801b228:	f003 0306 	and.w	r3, r3, #6
 801b22c:	2b04      	cmp	r3, #4
 801b22e:	bf08      	it	eq
 801b230:	1aad      	subeq	r5, r5, r2
 801b232:	68a3      	ldr	r3, [r4, #8]
 801b234:	6922      	ldr	r2, [r4, #16]
 801b236:	bf0c      	ite	eq
 801b238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b23c:	2500      	movne	r5, #0
 801b23e:	4293      	cmp	r3, r2
 801b240:	bfc4      	itt	gt
 801b242:	1a9b      	subgt	r3, r3, r2
 801b244:	18ed      	addgt	r5, r5, r3
 801b246:	2600      	movs	r6, #0
 801b248:	341a      	adds	r4, #26
 801b24a:	42b5      	cmp	r5, r6
 801b24c:	d11a      	bne.n	801b284 <_printf_common+0xc8>
 801b24e:	2000      	movs	r0, #0
 801b250:	e008      	b.n	801b264 <_printf_common+0xa8>
 801b252:	2301      	movs	r3, #1
 801b254:	4652      	mov	r2, sl
 801b256:	4649      	mov	r1, r9
 801b258:	4638      	mov	r0, r7
 801b25a:	47c0      	blx	r8
 801b25c:	3001      	adds	r0, #1
 801b25e:	d103      	bne.n	801b268 <_printf_common+0xac>
 801b260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b268:	3501      	adds	r5, #1
 801b26a:	e7c6      	b.n	801b1fa <_printf_common+0x3e>
 801b26c:	18e1      	adds	r1, r4, r3
 801b26e:	1c5a      	adds	r2, r3, #1
 801b270:	2030      	movs	r0, #48	; 0x30
 801b272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b276:	4422      	add	r2, r4
 801b278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b27c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b280:	3302      	adds	r3, #2
 801b282:	e7c7      	b.n	801b214 <_printf_common+0x58>
 801b284:	2301      	movs	r3, #1
 801b286:	4622      	mov	r2, r4
 801b288:	4649      	mov	r1, r9
 801b28a:	4638      	mov	r0, r7
 801b28c:	47c0      	blx	r8
 801b28e:	3001      	adds	r0, #1
 801b290:	d0e6      	beq.n	801b260 <_printf_common+0xa4>
 801b292:	3601      	adds	r6, #1
 801b294:	e7d9      	b.n	801b24a <_printf_common+0x8e>
	...

0801b298 <_printf_i>:
 801b298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b29c:	460c      	mov	r4, r1
 801b29e:	4691      	mov	r9, r2
 801b2a0:	7e27      	ldrb	r7, [r4, #24]
 801b2a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b2a4:	2f78      	cmp	r7, #120	; 0x78
 801b2a6:	4680      	mov	r8, r0
 801b2a8:	469a      	mov	sl, r3
 801b2aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b2ae:	d807      	bhi.n	801b2c0 <_printf_i+0x28>
 801b2b0:	2f62      	cmp	r7, #98	; 0x62
 801b2b2:	d80a      	bhi.n	801b2ca <_printf_i+0x32>
 801b2b4:	2f00      	cmp	r7, #0
 801b2b6:	f000 80d8 	beq.w	801b46a <_printf_i+0x1d2>
 801b2ba:	2f58      	cmp	r7, #88	; 0x58
 801b2bc:	f000 80a3 	beq.w	801b406 <_printf_i+0x16e>
 801b2c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b2c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b2c8:	e03a      	b.n	801b340 <_printf_i+0xa8>
 801b2ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b2ce:	2b15      	cmp	r3, #21
 801b2d0:	d8f6      	bhi.n	801b2c0 <_printf_i+0x28>
 801b2d2:	a001      	add	r0, pc, #4	; (adr r0, 801b2d8 <_printf_i+0x40>)
 801b2d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b2d8:	0801b331 	.word	0x0801b331
 801b2dc:	0801b345 	.word	0x0801b345
 801b2e0:	0801b2c1 	.word	0x0801b2c1
 801b2e4:	0801b2c1 	.word	0x0801b2c1
 801b2e8:	0801b2c1 	.word	0x0801b2c1
 801b2ec:	0801b2c1 	.word	0x0801b2c1
 801b2f0:	0801b345 	.word	0x0801b345
 801b2f4:	0801b2c1 	.word	0x0801b2c1
 801b2f8:	0801b2c1 	.word	0x0801b2c1
 801b2fc:	0801b2c1 	.word	0x0801b2c1
 801b300:	0801b2c1 	.word	0x0801b2c1
 801b304:	0801b451 	.word	0x0801b451
 801b308:	0801b375 	.word	0x0801b375
 801b30c:	0801b433 	.word	0x0801b433
 801b310:	0801b2c1 	.word	0x0801b2c1
 801b314:	0801b2c1 	.word	0x0801b2c1
 801b318:	0801b473 	.word	0x0801b473
 801b31c:	0801b2c1 	.word	0x0801b2c1
 801b320:	0801b375 	.word	0x0801b375
 801b324:	0801b2c1 	.word	0x0801b2c1
 801b328:	0801b2c1 	.word	0x0801b2c1
 801b32c:	0801b43b 	.word	0x0801b43b
 801b330:	680b      	ldr	r3, [r1, #0]
 801b332:	1d1a      	adds	r2, r3, #4
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	600a      	str	r2, [r1, #0]
 801b338:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b33c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b340:	2301      	movs	r3, #1
 801b342:	e0a3      	b.n	801b48c <_printf_i+0x1f4>
 801b344:	6825      	ldr	r5, [r4, #0]
 801b346:	6808      	ldr	r0, [r1, #0]
 801b348:	062e      	lsls	r6, r5, #24
 801b34a:	f100 0304 	add.w	r3, r0, #4
 801b34e:	d50a      	bpl.n	801b366 <_printf_i+0xce>
 801b350:	6805      	ldr	r5, [r0, #0]
 801b352:	600b      	str	r3, [r1, #0]
 801b354:	2d00      	cmp	r5, #0
 801b356:	da03      	bge.n	801b360 <_printf_i+0xc8>
 801b358:	232d      	movs	r3, #45	; 0x2d
 801b35a:	426d      	negs	r5, r5
 801b35c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b360:	485e      	ldr	r0, [pc, #376]	; (801b4dc <_printf_i+0x244>)
 801b362:	230a      	movs	r3, #10
 801b364:	e019      	b.n	801b39a <_printf_i+0x102>
 801b366:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b36a:	6805      	ldr	r5, [r0, #0]
 801b36c:	600b      	str	r3, [r1, #0]
 801b36e:	bf18      	it	ne
 801b370:	b22d      	sxthne	r5, r5
 801b372:	e7ef      	b.n	801b354 <_printf_i+0xbc>
 801b374:	680b      	ldr	r3, [r1, #0]
 801b376:	6825      	ldr	r5, [r4, #0]
 801b378:	1d18      	adds	r0, r3, #4
 801b37a:	6008      	str	r0, [r1, #0]
 801b37c:	0628      	lsls	r0, r5, #24
 801b37e:	d501      	bpl.n	801b384 <_printf_i+0xec>
 801b380:	681d      	ldr	r5, [r3, #0]
 801b382:	e002      	b.n	801b38a <_printf_i+0xf2>
 801b384:	0669      	lsls	r1, r5, #25
 801b386:	d5fb      	bpl.n	801b380 <_printf_i+0xe8>
 801b388:	881d      	ldrh	r5, [r3, #0]
 801b38a:	4854      	ldr	r0, [pc, #336]	; (801b4dc <_printf_i+0x244>)
 801b38c:	2f6f      	cmp	r7, #111	; 0x6f
 801b38e:	bf0c      	ite	eq
 801b390:	2308      	moveq	r3, #8
 801b392:	230a      	movne	r3, #10
 801b394:	2100      	movs	r1, #0
 801b396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b39a:	6866      	ldr	r6, [r4, #4]
 801b39c:	60a6      	str	r6, [r4, #8]
 801b39e:	2e00      	cmp	r6, #0
 801b3a0:	bfa2      	ittt	ge
 801b3a2:	6821      	ldrge	r1, [r4, #0]
 801b3a4:	f021 0104 	bicge.w	r1, r1, #4
 801b3a8:	6021      	strge	r1, [r4, #0]
 801b3aa:	b90d      	cbnz	r5, 801b3b0 <_printf_i+0x118>
 801b3ac:	2e00      	cmp	r6, #0
 801b3ae:	d04d      	beq.n	801b44c <_printf_i+0x1b4>
 801b3b0:	4616      	mov	r6, r2
 801b3b2:	fbb5 f1f3 	udiv	r1, r5, r3
 801b3b6:	fb03 5711 	mls	r7, r3, r1, r5
 801b3ba:	5dc7      	ldrb	r7, [r0, r7]
 801b3bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b3c0:	462f      	mov	r7, r5
 801b3c2:	42bb      	cmp	r3, r7
 801b3c4:	460d      	mov	r5, r1
 801b3c6:	d9f4      	bls.n	801b3b2 <_printf_i+0x11a>
 801b3c8:	2b08      	cmp	r3, #8
 801b3ca:	d10b      	bne.n	801b3e4 <_printf_i+0x14c>
 801b3cc:	6823      	ldr	r3, [r4, #0]
 801b3ce:	07df      	lsls	r7, r3, #31
 801b3d0:	d508      	bpl.n	801b3e4 <_printf_i+0x14c>
 801b3d2:	6923      	ldr	r3, [r4, #16]
 801b3d4:	6861      	ldr	r1, [r4, #4]
 801b3d6:	4299      	cmp	r1, r3
 801b3d8:	bfde      	ittt	le
 801b3da:	2330      	movle	r3, #48	; 0x30
 801b3dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b3e0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801b3e4:	1b92      	subs	r2, r2, r6
 801b3e6:	6122      	str	r2, [r4, #16]
 801b3e8:	f8cd a000 	str.w	sl, [sp]
 801b3ec:	464b      	mov	r3, r9
 801b3ee:	aa03      	add	r2, sp, #12
 801b3f0:	4621      	mov	r1, r4
 801b3f2:	4640      	mov	r0, r8
 801b3f4:	f7ff fee2 	bl	801b1bc <_printf_common>
 801b3f8:	3001      	adds	r0, #1
 801b3fa:	d14c      	bne.n	801b496 <_printf_i+0x1fe>
 801b3fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b400:	b004      	add	sp, #16
 801b402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b406:	4835      	ldr	r0, [pc, #212]	; (801b4dc <_printf_i+0x244>)
 801b408:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b40c:	6823      	ldr	r3, [r4, #0]
 801b40e:	680e      	ldr	r6, [r1, #0]
 801b410:	061f      	lsls	r7, r3, #24
 801b412:	f856 5b04 	ldr.w	r5, [r6], #4
 801b416:	600e      	str	r6, [r1, #0]
 801b418:	d514      	bpl.n	801b444 <_printf_i+0x1ac>
 801b41a:	07d9      	lsls	r1, r3, #31
 801b41c:	bf44      	itt	mi
 801b41e:	f043 0320 	orrmi.w	r3, r3, #32
 801b422:	6023      	strmi	r3, [r4, #0]
 801b424:	b91d      	cbnz	r5, 801b42e <_printf_i+0x196>
 801b426:	6823      	ldr	r3, [r4, #0]
 801b428:	f023 0320 	bic.w	r3, r3, #32
 801b42c:	6023      	str	r3, [r4, #0]
 801b42e:	2310      	movs	r3, #16
 801b430:	e7b0      	b.n	801b394 <_printf_i+0xfc>
 801b432:	6823      	ldr	r3, [r4, #0]
 801b434:	f043 0320 	orr.w	r3, r3, #32
 801b438:	6023      	str	r3, [r4, #0]
 801b43a:	2378      	movs	r3, #120	; 0x78
 801b43c:	4828      	ldr	r0, [pc, #160]	; (801b4e0 <_printf_i+0x248>)
 801b43e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b442:	e7e3      	b.n	801b40c <_printf_i+0x174>
 801b444:	065e      	lsls	r6, r3, #25
 801b446:	bf48      	it	mi
 801b448:	b2ad      	uxthmi	r5, r5
 801b44a:	e7e6      	b.n	801b41a <_printf_i+0x182>
 801b44c:	4616      	mov	r6, r2
 801b44e:	e7bb      	b.n	801b3c8 <_printf_i+0x130>
 801b450:	680b      	ldr	r3, [r1, #0]
 801b452:	6826      	ldr	r6, [r4, #0]
 801b454:	6960      	ldr	r0, [r4, #20]
 801b456:	1d1d      	adds	r5, r3, #4
 801b458:	600d      	str	r5, [r1, #0]
 801b45a:	0635      	lsls	r5, r6, #24
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	d501      	bpl.n	801b464 <_printf_i+0x1cc>
 801b460:	6018      	str	r0, [r3, #0]
 801b462:	e002      	b.n	801b46a <_printf_i+0x1d2>
 801b464:	0671      	lsls	r1, r6, #25
 801b466:	d5fb      	bpl.n	801b460 <_printf_i+0x1c8>
 801b468:	8018      	strh	r0, [r3, #0]
 801b46a:	2300      	movs	r3, #0
 801b46c:	6123      	str	r3, [r4, #16]
 801b46e:	4616      	mov	r6, r2
 801b470:	e7ba      	b.n	801b3e8 <_printf_i+0x150>
 801b472:	680b      	ldr	r3, [r1, #0]
 801b474:	1d1a      	adds	r2, r3, #4
 801b476:	600a      	str	r2, [r1, #0]
 801b478:	681e      	ldr	r6, [r3, #0]
 801b47a:	6862      	ldr	r2, [r4, #4]
 801b47c:	2100      	movs	r1, #0
 801b47e:	4630      	mov	r0, r6
 801b480:	f7e4 ff46 	bl	8000310 <memchr>
 801b484:	b108      	cbz	r0, 801b48a <_printf_i+0x1f2>
 801b486:	1b80      	subs	r0, r0, r6
 801b488:	6060      	str	r0, [r4, #4]
 801b48a:	6863      	ldr	r3, [r4, #4]
 801b48c:	6123      	str	r3, [r4, #16]
 801b48e:	2300      	movs	r3, #0
 801b490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b494:	e7a8      	b.n	801b3e8 <_printf_i+0x150>
 801b496:	6923      	ldr	r3, [r4, #16]
 801b498:	4632      	mov	r2, r6
 801b49a:	4649      	mov	r1, r9
 801b49c:	4640      	mov	r0, r8
 801b49e:	47d0      	blx	sl
 801b4a0:	3001      	adds	r0, #1
 801b4a2:	d0ab      	beq.n	801b3fc <_printf_i+0x164>
 801b4a4:	6823      	ldr	r3, [r4, #0]
 801b4a6:	079b      	lsls	r3, r3, #30
 801b4a8:	d413      	bmi.n	801b4d2 <_printf_i+0x23a>
 801b4aa:	68e0      	ldr	r0, [r4, #12]
 801b4ac:	9b03      	ldr	r3, [sp, #12]
 801b4ae:	4298      	cmp	r0, r3
 801b4b0:	bfb8      	it	lt
 801b4b2:	4618      	movlt	r0, r3
 801b4b4:	e7a4      	b.n	801b400 <_printf_i+0x168>
 801b4b6:	2301      	movs	r3, #1
 801b4b8:	4632      	mov	r2, r6
 801b4ba:	4649      	mov	r1, r9
 801b4bc:	4640      	mov	r0, r8
 801b4be:	47d0      	blx	sl
 801b4c0:	3001      	adds	r0, #1
 801b4c2:	d09b      	beq.n	801b3fc <_printf_i+0x164>
 801b4c4:	3501      	adds	r5, #1
 801b4c6:	68e3      	ldr	r3, [r4, #12]
 801b4c8:	9903      	ldr	r1, [sp, #12]
 801b4ca:	1a5b      	subs	r3, r3, r1
 801b4cc:	42ab      	cmp	r3, r5
 801b4ce:	dcf2      	bgt.n	801b4b6 <_printf_i+0x21e>
 801b4d0:	e7eb      	b.n	801b4aa <_printf_i+0x212>
 801b4d2:	2500      	movs	r5, #0
 801b4d4:	f104 0619 	add.w	r6, r4, #25
 801b4d8:	e7f5      	b.n	801b4c6 <_printf_i+0x22e>
 801b4da:	bf00      	nop
 801b4dc:	0801f0ad 	.word	0x0801f0ad
 801b4e0:	0801f0be 	.word	0x0801f0be

0801b4e4 <_scanf_chars>:
 801b4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b4e8:	4615      	mov	r5, r2
 801b4ea:	688a      	ldr	r2, [r1, #8]
 801b4ec:	4680      	mov	r8, r0
 801b4ee:	460c      	mov	r4, r1
 801b4f0:	b932      	cbnz	r2, 801b500 <_scanf_chars+0x1c>
 801b4f2:	698a      	ldr	r2, [r1, #24]
 801b4f4:	2a00      	cmp	r2, #0
 801b4f6:	bf0c      	ite	eq
 801b4f8:	2201      	moveq	r2, #1
 801b4fa:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 801b4fe:	608a      	str	r2, [r1, #8]
 801b500:	6822      	ldr	r2, [r4, #0]
 801b502:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801b590 <_scanf_chars+0xac>
 801b506:	06d1      	lsls	r1, r2, #27
 801b508:	bf5f      	itttt	pl
 801b50a:	681a      	ldrpl	r2, [r3, #0]
 801b50c:	1d11      	addpl	r1, r2, #4
 801b50e:	6019      	strpl	r1, [r3, #0]
 801b510:	6816      	ldrpl	r6, [r2, #0]
 801b512:	2700      	movs	r7, #0
 801b514:	69a0      	ldr	r0, [r4, #24]
 801b516:	b188      	cbz	r0, 801b53c <_scanf_chars+0x58>
 801b518:	2801      	cmp	r0, #1
 801b51a:	d107      	bne.n	801b52c <_scanf_chars+0x48>
 801b51c:	682b      	ldr	r3, [r5, #0]
 801b51e:	781a      	ldrb	r2, [r3, #0]
 801b520:	6963      	ldr	r3, [r4, #20]
 801b522:	5c9b      	ldrb	r3, [r3, r2]
 801b524:	b953      	cbnz	r3, 801b53c <_scanf_chars+0x58>
 801b526:	bb27      	cbnz	r7, 801b572 <_scanf_chars+0x8e>
 801b528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b52c:	2802      	cmp	r0, #2
 801b52e:	d120      	bne.n	801b572 <_scanf_chars+0x8e>
 801b530:	682b      	ldr	r3, [r5, #0]
 801b532:	781b      	ldrb	r3, [r3, #0]
 801b534:	f813 3009 	ldrb.w	r3, [r3, r9]
 801b538:	071b      	lsls	r3, r3, #28
 801b53a:	d41a      	bmi.n	801b572 <_scanf_chars+0x8e>
 801b53c:	6823      	ldr	r3, [r4, #0]
 801b53e:	06da      	lsls	r2, r3, #27
 801b540:	bf5e      	ittt	pl
 801b542:	682b      	ldrpl	r3, [r5, #0]
 801b544:	781b      	ldrbpl	r3, [r3, #0]
 801b546:	f806 3b01 	strbpl.w	r3, [r6], #1
 801b54a:	682a      	ldr	r2, [r5, #0]
 801b54c:	686b      	ldr	r3, [r5, #4]
 801b54e:	3201      	adds	r2, #1
 801b550:	602a      	str	r2, [r5, #0]
 801b552:	68a2      	ldr	r2, [r4, #8]
 801b554:	3b01      	subs	r3, #1
 801b556:	3a01      	subs	r2, #1
 801b558:	606b      	str	r3, [r5, #4]
 801b55a:	3701      	adds	r7, #1
 801b55c:	60a2      	str	r2, [r4, #8]
 801b55e:	b142      	cbz	r2, 801b572 <_scanf_chars+0x8e>
 801b560:	2b00      	cmp	r3, #0
 801b562:	dcd7      	bgt.n	801b514 <_scanf_chars+0x30>
 801b564:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b568:	4629      	mov	r1, r5
 801b56a:	4640      	mov	r0, r8
 801b56c:	4798      	blx	r3
 801b56e:	2800      	cmp	r0, #0
 801b570:	d0d0      	beq.n	801b514 <_scanf_chars+0x30>
 801b572:	6823      	ldr	r3, [r4, #0]
 801b574:	f013 0310 	ands.w	r3, r3, #16
 801b578:	d105      	bne.n	801b586 <_scanf_chars+0xa2>
 801b57a:	68e2      	ldr	r2, [r4, #12]
 801b57c:	3201      	adds	r2, #1
 801b57e:	60e2      	str	r2, [r4, #12]
 801b580:	69a2      	ldr	r2, [r4, #24]
 801b582:	b102      	cbz	r2, 801b586 <_scanf_chars+0xa2>
 801b584:	7033      	strb	r3, [r6, #0]
 801b586:	6923      	ldr	r3, [r4, #16]
 801b588:	441f      	add	r7, r3
 801b58a:	6127      	str	r7, [r4, #16]
 801b58c:	2000      	movs	r0, #0
 801b58e:	e7cb      	b.n	801b528 <_scanf_chars+0x44>
 801b590:	0801ec37 	.word	0x0801ec37

0801b594 <_scanf_i>:
 801b594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b598:	4698      	mov	r8, r3
 801b59a:	4b74      	ldr	r3, [pc, #464]	; (801b76c <_scanf_i+0x1d8>)
 801b59c:	460c      	mov	r4, r1
 801b59e:	4682      	mov	sl, r0
 801b5a0:	4616      	mov	r6, r2
 801b5a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b5a6:	b087      	sub	sp, #28
 801b5a8:	ab03      	add	r3, sp, #12
 801b5aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801b5ae:	4b70      	ldr	r3, [pc, #448]	; (801b770 <_scanf_i+0x1dc>)
 801b5b0:	69a1      	ldr	r1, [r4, #24]
 801b5b2:	4a70      	ldr	r2, [pc, #448]	; (801b774 <_scanf_i+0x1e0>)
 801b5b4:	2903      	cmp	r1, #3
 801b5b6:	bf18      	it	ne
 801b5b8:	461a      	movne	r2, r3
 801b5ba:	68a3      	ldr	r3, [r4, #8]
 801b5bc:	9201      	str	r2, [sp, #4]
 801b5be:	1e5a      	subs	r2, r3, #1
 801b5c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b5c4:	bf88      	it	hi
 801b5c6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b5ca:	4627      	mov	r7, r4
 801b5cc:	bf82      	ittt	hi
 801b5ce:	eb03 0905 	addhi.w	r9, r3, r5
 801b5d2:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b5d6:	60a3      	strhi	r3, [r4, #8]
 801b5d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 801b5dc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801b5e0:	bf98      	it	ls
 801b5e2:	f04f 0900 	movls.w	r9, #0
 801b5e6:	6023      	str	r3, [r4, #0]
 801b5e8:	463d      	mov	r5, r7
 801b5ea:	f04f 0b00 	mov.w	fp, #0
 801b5ee:	6831      	ldr	r1, [r6, #0]
 801b5f0:	ab03      	add	r3, sp, #12
 801b5f2:	7809      	ldrb	r1, [r1, #0]
 801b5f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801b5f8:	2202      	movs	r2, #2
 801b5fa:	f7e4 fe89 	bl	8000310 <memchr>
 801b5fe:	b328      	cbz	r0, 801b64c <_scanf_i+0xb8>
 801b600:	f1bb 0f01 	cmp.w	fp, #1
 801b604:	d159      	bne.n	801b6ba <_scanf_i+0x126>
 801b606:	6862      	ldr	r2, [r4, #4]
 801b608:	b92a      	cbnz	r2, 801b616 <_scanf_i+0x82>
 801b60a:	6822      	ldr	r2, [r4, #0]
 801b60c:	2308      	movs	r3, #8
 801b60e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b612:	6063      	str	r3, [r4, #4]
 801b614:	6022      	str	r2, [r4, #0]
 801b616:	6822      	ldr	r2, [r4, #0]
 801b618:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801b61c:	6022      	str	r2, [r4, #0]
 801b61e:	68a2      	ldr	r2, [r4, #8]
 801b620:	1e51      	subs	r1, r2, #1
 801b622:	60a1      	str	r1, [r4, #8]
 801b624:	b192      	cbz	r2, 801b64c <_scanf_i+0xb8>
 801b626:	6832      	ldr	r2, [r6, #0]
 801b628:	1c51      	adds	r1, r2, #1
 801b62a:	6031      	str	r1, [r6, #0]
 801b62c:	7812      	ldrb	r2, [r2, #0]
 801b62e:	f805 2b01 	strb.w	r2, [r5], #1
 801b632:	6872      	ldr	r2, [r6, #4]
 801b634:	3a01      	subs	r2, #1
 801b636:	2a00      	cmp	r2, #0
 801b638:	6072      	str	r2, [r6, #4]
 801b63a:	dc07      	bgt.n	801b64c <_scanf_i+0xb8>
 801b63c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801b640:	4631      	mov	r1, r6
 801b642:	4650      	mov	r0, sl
 801b644:	4790      	blx	r2
 801b646:	2800      	cmp	r0, #0
 801b648:	f040 8085 	bne.w	801b756 <_scanf_i+0x1c2>
 801b64c:	f10b 0b01 	add.w	fp, fp, #1
 801b650:	f1bb 0f03 	cmp.w	fp, #3
 801b654:	d1cb      	bne.n	801b5ee <_scanf_i+0x5a>
 801b656:	6863      	ldr	r3, [r4, #4]
 801b658:	b90b      	cbnz	r3, 801b65e <_scanf_i+0xca>
 801b65a:	230a      	movs	r3, #10
 801b65c:	6063      	str	r3, [r4, #4]
 801b65e:	6863      	ldr	r3, [r4, #4]
 801b660:	4945      	ldr	r1, [pc, #276]	; (801b778 <_scanf_i+0x1e4>)
 801b662:	6960      	ldr	r0, [r4, #20]
 801b664:	1ac9      	subs	r1, r1, r3
 801b666:	f000 f8a3 	bl	801b7b0 <__sccl>
 801b66a:	f04f 0b00 	mov.w	fp, #0
 801b66e:	68a3      	ldr	r3, [r4, #8]
 801b670:	6822      	ldr	r2, [r4, #0]
 801b672:	2b00      	cmp	r3, #0
 801b674:	d03d      	beq.n	801b6f2 <_scanf_i+0x15e>
 801b676:	6831      	ldr	r1, [r6, #0]
 801b678:	6960      	ldr	r0, [r4, #20]
 801b67a:	f891 c000 	ldrb.w	ip, [r1]
 801b67e:	f810 000c 	ldrb.w	r0, [r0, ip]
 801b682:	2800      	cmp	r0, #0
 801b684:	d035      	beq.n	801b6f2 <_scanf_i+0x15e>
 801b686:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801b68a:	d124      	bne.n	801b6d6 <_scanf_i+0x142>
 801b68c:	0510      	lsls	r0, r2, #20
 801b68e:	d522      	bpl.n	801b6d6 <_scanf_i+0x142>
 801b690:	f10b 0b01 	add.w	fp, fp, #1
 801b694:	f1b9 0f00 	cmp.w	r9, #0
 801b698:	d003      	beq.n	801b6a2 <_scanf_i+0x10e>
 801b69a:	3301      	adds	r3, #1
 801b69c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801b6a0:	60a3      	str	r3, [r4, #8]
 801b6a2:	6873      	ldr	r3, [r6, #4]
 801b6a4:	3b01      	subs	r3, #1
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	6073      	str	r3, [r6, #4]
 801b6aa:	dd1b      	ble.n	801b6e4 <_scanf_i+0x150>
 801b6ac:	6833      	ldr	r3, [r6, #0]
 801b6ae:	3301      	adds	r3, #1
 801b6b0:	6033      	str	r3, [r6, #0]
 801b6b2:	68a3      	ldr	r3, [r4, #8]
 801b6b4:	3b01      	subs	r3, #1
 801b6b6:	60a3      	str	r3, [r4, #8]
 801b6b8:	e7d9      	b.n	801b66e <_scanf_i+0xda>
 801b6ba:	f1bb 0f02 	cmp.w	fp, #2
 801b6be:	d1ae      	bne.n	801b61e <_scanf_i+0x8a>
 801b6c0:	6822      	ldr	r2, [r4, #0]
 801b6c2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801b6c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801b6ca:	d1bf      	bne.n	801b64c <_scanf_i+0xb8>
 801b6cc:	2310      	movs	r3, #16
 801b6ce:	6063      	str	r3, [r4, #4]
 801b6d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b6d4:	e7a2      	b.n	801b61c <_scanf_i+0x88>
 801b6d6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801b6da:	6022      	str	r2, [r4, #0]
 801b6dc:	780b      	ldrb	r3, [r1, #0]
 801b6de:	f805 3b01 	strb.w	r3, [r5], #1
 801b6e2:	e7de      	b.n	801b6a2 <_scanf_i+0x10e>
 801b6e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b6e8:	4631      	mov	r1, r6
 801b6ea:	4650      	mov	r0, sl
 801b6ec:	4798      	blx	r3
 801b6ee:	2800      	cmp	r0, #0
 801b6f0:	d0df      	beq.n	801b6b2 <_scanf_i+0x11e>
 801b6f2:	6823      	ldr	r3, [r4, #0]
 801b6f4:	05d9      	lsls	r1, r3, #23
 801b6f6:	d50d      	bpl.n	801b714 <_scanf_i+0x180>
 801b6f8:	42bd      	cmp	r5, r7
 801b6fa:	d909      	bls.n	801b710 <_scanf_i+0x17c>
 801b6fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801b700:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b704:	4632      	mov	r2, r6
 801b706:	4650      	mov	r0, sl
 801b708:	4798      	blx	r3
 801b70a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 801b70e:	464d      	mov	r5, r9
 801b710:	42bd      	cmp	r5, r7
 801b712:	d028      	beq.n	801b766 <_scanf_i+0x1d2>
 801b714:	6822      	ldr	r2, [r4, #0]
 801b716:	f012 0210 	ands.w	r2, r2, #16
 801b71a:	d113      	bne.n	801b744 <_scanf_i+0x1b0>
 801b71c:	702a      	strb	r2, [r5, #0]
 801b71e:	6863      	ldr	r3, [r4, #4]
 801b720:	9e01      	ldr	r6, [sp, #4]
 801b722:	4639      	mov	r1, r7
 801b724:	4650      	mov	r0, sl
 801b726:	47b0      	blx	r6
 801b728:	f8d8 3000 	ldr.w	r3, [r8]
 801b72c:	6821      	ldr	r1, [r4, #0]
 801b72e:	1d1a      	adds	r2, r3, #4
 801b730:	f8c8 2000 	str.w	r2, [r8]
 801b734:	f011 0f20 	tst.w	r1, #32
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	d00f      	beq.n	801b75c <_scanf_i+0x1c8>
 801b73c:	6018      	str	r0, [r3, #0]
 801b73e:	68e3      	ldr	r3, [r4, #12]
 801b740:	3301      	adds	r3, #1
 801b742:	60e3      	str	r3, [r4, #12]
 801b744:	1bed      	subs	r5, r5, r7
 801b746:	44ab      	add	fp, r5
 801b748:	6925      	ldr	r5, [r4, #16]
 801b74a:	445d      	add	r5, fp
 801b74c:	6125      	str	r5, [r4, #16]
 801b74e:	2000      	movs	r0, #0
 801b750:	b007      	add	sp, #28
 801b752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b756:	f04f 0b00 	mov.w	fp, #0
 801b75a:	e7ca      	b.n	801b6f2 <_scanf_i+0x15e>
 801b75c:	07ca      	lsls	r2, r1, #31
 801b75e:	bf4c      	ite	mi
 801b760:	8018      	strhmi	r0, [r3, #0]
 801b762:	6018      	strpl	r0, [r3, #0]
 801b764:	e7eb      	b.n	801b73e <_scanf_i+0x1aa>
 801b766:	2001      	movs	r0, #1
 801b768:	e7f2      	b.n	801b750 <_scanf_i+0x1bc>
 801b76a:	bf00      	nop
 801b76c:	0801ea80 	.word	0x0801ea80
 801b770:	0801b91d 	.word	0x0801b91d
 801b774:	080194c5 	.word	0x080194c5
 801b778:	0801f0e8 	.word	0x0801f0e8

0801b77c <_read_r>:
 801b77c:	b538      	push	{r3, r4, r5, lr}
 801b77e:	4d07      	ldr	r5, [pc, #28]	; (801b79c <_read_r+0x20>)
 801b780:	4604      	mov	r4, r0
 801b782:	4608      	mov	r0, r1
 801b784:	4611      	mov	r1, r2
 801b786:	2200      	movs	r2, #0
 801b788:	602a      	str	r2, [r5, #0]
 801b78a:	461a      	mov	r2, r3
 801b78c:	f7e5 fbb6 	bl	8000efc <_read>
 801b790:	1c43      	adds	r3, r0, #1
 801b792:	d102      	bne.n	801b79a <_read_r+0x1e>
 801b794:	682b      	ldr	r3, [r5, #0]
 801b796:	b103      	cbz	r3, 801b79a <_read_r+0x1e>
 801b798:	6023      	str	r3, [r4, #0]
 801b79a:	bd38      	pop	{r3, r4, r5, pc}
 801b79c:	2400ee5c 	.word	0x2400ee5c

0801b7a0 <nan>:
 801b7a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b7a8 <nan+0x8>
 801b7a4:	4770      	bx	lr
 801b7a6:	bf00      	nop
 801b7a8:	00000000 	.word	0x00000000
 801b7ac:	7ff80000 	.word	0x7ff80000

0801b7b0 <__sccl>:
 801b7b0:	b570      	push	{r4, r5, r6, lr}
 801b7b2:	780b      	ldrb	r3, [r1, #0]
 801b7b4:	4604      	mov	r4, r0
 801b7b6:	2b5e      	cmp	r3, #94	; 0x5e
 801b7b8:	bf0b      	itete	eq
 801b7ba:	784b      	ldrbeq	r3, [r1, #1]
 801b7bc:	1c48      	addne	r0, r1, #1
 801b7be:	1c88      	addeq	r0, r1, #2
 801b7c0:	2200      	movne	r2, #0
 801b7c2:	bf08      	it	eq
 801b7c4:	2201      	moveq	r2, #1
 801b7c6:	1e61      	subs	r1, r4, #1
 801b7c8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801b7cc:	f801 2f01 	strb.w	r2, [r1, #1]!
 801b7d0:	42a9      	cmp	r1, r5
 801b7d2:	d1fb      	bne.n	801b7cc <__sccl+0x1c>
 801b7d4:	b90b      	cbnz	r3, 801b7da <__sccl+0x2a>
 801b7d6:	3801      	subs	r0, #1
 801b7d8:	bd70      	pop	{r4, r5, r6, pc}
 801b7da:	f082 0101 	eor.w	r1, r2, #1
 801b7de:	54e1      	strb	r1, [r4, r3]
 801b7e0:	1c42      	adds	r2, r0, #1
 801b7e2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801b7e6:	2d2d      	cmp	r5, #45	; 0x2d
 801b7e8:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 801b7ec:	4610      	mov	r0, r2
 801b7ee:	d006      	beq.n	801b7fe <__sccl+0x4e>
 801b7f0:	2d5d      	cmp	r5, #93	; 0x5d
 801b7f2:	d0f1      	beq.n	801b7d8 <__sccl+0x28>
 801b7f4:	b90d      	cbnz	r5, 801b7fa <__sccl+0x4a>
 801b7f6:	4630      	mov	r0, r6
 801b7f8:	e7ee      	b.n	801b7d8 <__sccl+0x28>
 801b7fa:	462b      	mov	r3, r5
 801b7fc:	e7ef      	b.n	801b7de <__sccl+0x2e>
 801b7fe:	7816      	ldrb	r6, [r2, #0]
 801b800:	2e5d      	cmp	r6, #93	; 0x5d
 801b802:	d0fa      	beq.n	801b7fa <__sccl+0x4a>
 801b804:	42b3      	cmp	r3, r6
 801b806:	dcf8      	bgt.n	801b7fa <__sccl+0x4a>
 801b808:	4618      	mov	r0, r3
 801b80a:	3001      	adds	r0, #1
 801b80c:	4286      	cmp	r6, r0
 801b80e:	5421      	strb	r1, [r4, r0]
 801b810:	dcfb      	bgt.n	801b80a <__sccl+0x5a>
 801b812:	43d8      	mvns	r0, r3
 801b814:	4430      	add	r0, r6
 801b816:	1c5d      	adds	r5, r3, #1
 801b818:	42b3      	cmp	r3, r6
 801b81a:	bfa8      	it	ge
 801b81c:	2000      	movge	r0, #0
 801b81e:	182b      	adds	r3, r5, r0
 801b820:	3202      	adds	r2, #2
 801b822:	e7de      	b.n	801b7e2 <__sccl+0x32>

0801b824 <_strtoul_l.isra.0>:
 801b824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b828:	4e3b      	ldr	r6, [pc, #236]	; (801b918 <_strtoul_l.isra.0+0xf4>)
 801b82a:	4686      	mov	lr, r0
 801b82c:	468c      	mov	ip, r1
 801b82e:	4660      	mov	r0, ip
 801b830:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801b834:	5da5      	ldrb	r5, [r4, r6]
 801b836:	f015 0508 	ands.w	r5, r5, #8
 801b83a:	d1f8      	bne.n	801b82e <_strtoul_l.isra.0+0xa>
 801b83c:	2c2d      	cmp	r4, #45	; 0x2d
 801b83e:	d134      	bne.n	801b8aa <_strtoul_l.isra.0+0x86>
 801b840:	f89c 4000 	ldrb.w	r4, [ip]
 801b844:	f04f 0801 	mov.w	r8, #1
 801b848:	f100 0c02 	add.w	ip, r0, #2
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d05e      	beq.n	801b90e <_strtoul_l.isra.0+0xea>
 801b850:	2b10      	cmp	r3, #16
 801b852:	d10c      	bne.n	801b86e <_strtoul_l.isra.0+0x4a>
 801b854:	2c30      	cmp	r4, #48	; 0x30
 801b856:	d10a      	bne.n	801b86e <_strtoul_l.isra.0+0x4a>
 801b858:	f89c 0000 	ldrb.w	r0, [ip]
 801b85c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801b860:	2858      	cmp	r0, #88	; 0x58
 801b862:	d14f      	bne.n	801b904 <_strtoul_l.isra.0+0xe0>
 801b864:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801b868:	2310      	movs	r3, #16
 801b86a:	f10c 0c02 	add.w	ip, ip, #2
 801b86e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b872:	2500      	movs	r5, #0
 801b874:	fbb7 f7f3 	udiv	r7, r7, r3
 801b878:	fb03 f907 	mul.w	r9, r3, r7
 801b87c:	ea6f 0909 	mvn.w	r9, r9
 801b880:	4628      	mov	r0, r5
 801b882:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801b886:	2e09      	cmp	r6, #9
 801b888:	d818      	bhi.n	801b8bc <_strtoul_l.isra.0+0x98>
 801b88a:	4634      	mov	r4, r6
 801b88c:	42a3      	cmp	r3, r4
 801b88e:	dd24      	ble.n	801b8da <_strtoul_l.isra.0+0xb6>
 801b890:	2d00      	cmp	r5, #0
 801b892:	db1f      	blt.n	801b8d4 <_strtoul_l.isra.0+0xb0>
 801b894:	4287      	cmp	r7, r0
 801b896:	d31d      	bcc.n	801b8d4 <_strtoul_l.isra.0+0xb0>
 801b898:	d101      	bne.n	801b89e <_strtoul_l.isra.0+0x7a>
 801b89a:	45a1      	cmp	r9, r4
 801b89c:	db1a      	blt.n	801b8d4 <_strtoul_l.isra.0+0xb0>
 801b89e:	fb00 4003 	mla	r0, r0, r3, r4
 801b8a2:	2501      	movs	r5, #1
 801b8a4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801b8a8:	e7eb      	b.n	801b882 <_strtoul_l.isra.0+0x5e>
 801b8aa:	2c2b      	cmp	r4, #43	; 0x2b
 801b8ac:	bf08      	it	eq
 801b8ae:	f89c 4000 	ldrbeq.w	r4, [ip]
 801b8b2:	46a8      	mov	r8, r5
 801b8b4:	bf08      	it	eq
 801b8b6:	f100 0c02 	addeq.w	ip, r0, #2
 801b8ba:	e7c7      	b.n	801b84c <_strtoul_l.isra.0+0x28>
 801b8bc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801b8c0:	2e19      	cmp	r6, #25
 801b8c2:	d801      	bhi.n	801b8c8 <_strtoul_l.isra.0+0xa4>
 801b8c4:	3c37      	subs	r4, #55	; 0x37
 801b8c6:	e7e1      	b.n	801b88c <_strtoul_l.isra.0+0x68>
 801b8c8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801b8cc:	2e19      	cmp	r6, #25
 801b8ce:	d804      	bhi.n	801b8da <_strtoul_l.isra.0+0xb6>
 801b8d0:	3c57      	subs	r4, #87	; 0x57
 801b8d2:	e7db      	b.n	801b88c <_strtoul_l.isra.0+0x68>
 801b8d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b8d8:	e7e4      	b.n	801b8a4 <_strtoul_l.isra.0+0x80>
 801b8da:	2d00      	cmp	r5, #0
 801b8dc:	da07      	bge.n	801b8ee <_strtoul_l.isra.0+0xca>
 801b8de:	2322      	movs	r3, #34	; 0x22
 801b8e0:	f8ce 3000 	str.w	r3, [lr]
 801b8e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b8e8:	b942      	cbnz	r2, 801b8fc <_strtoul_l.isra.0+0xd8>
 801b8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b8ee:	f1b8 0f00 	cmp.w	r8, #0
 801b8f2:	d000      	beq.n	801b8f6 <_strtoul_l.isra.0+0xd2>
 801b8f4:	4240      	negs	r0, r0
 801b8f6:	2a00      	cmp	r2, #0
 801b8f8:	d0f7      	beq.n	801b8ea <_strtoul_l.isra.0+0xc6>
 801b8fa:	b10d      	cbz	r5, 801b900 <_strtoul_l.isra.0+0xdc>
 801b8fc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 801b900:	6011      	str	r1, [r2, #0]
 801b902:	e7f2      	b.n	801b8ea <_strtoul_l.isra.0+0xc6>
 801b904:	2430      	movs	r4, #48	; 0x30
 801b906:	2b00      	cmp	r3, #0
 801b908:	d1b1      	bne.n	801b86e <_strtoul_l.isra.0+0x4a>
 801b90a:	2308      	movs	r3, #8
 801b90c:	e7af      	b.n	801b86e <_strtoul_l.isra.0+0x4a>
 801b90e:	2c30      	cmp	r4, #48	; 0x30
 801b910:	d0a2      	beq.n	801b858 <_strtoul_l.isra.0+0x34>
 801b912:	230a      	movs	r3, #10
 801b914:	e7ab      	b.n	801b86e <_strtoul_l.isra.0+0x4a>
 801b916:	bf00      	nop
 801b918:	0801ec37 	.word	0x0801ec37

0801b91c <_strtoul_r>:
 801b91c:	f7ff bf82 	b.w	801b824 <_strtoul_l.isra.0>

0801b920 <__submore>:
 801b920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b924:	460c      	mov	r4, r1
 801b926:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b92c:	4299      	cmp	r1, r3
 801b92e:	d11d      	bne.n	801b96c <__submore+0x4c>
 801b930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b934:	f7fc fd6a 	bl	801840c <_malloc_r>
 801b938:	b918      	cbnz	r0, 801b942 <__submore+0x22>
 801b93a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b946:	63a3      	str	r3, [r4, #56]	; 0x38
 801b948:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801b94c:	6360      	str	r0, [r4, #52]	; 0x34
 801b94e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801b952:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801b956:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801b95a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801b95e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801b962:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801b966:	6020      	str	r0, [r4, #0]
 801b968:	2000      	movs	r0, #0
 801b96a:	e7e8      	b.n	801b93e <__submore+0x1e>
 801b96c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801b96e:	0077      	lsls	r7, r6, #1
 801b970:	463a      	mov	r2, r7
 801b972:	f000 f823 	bl	801b9bc <_realloc_r>
 801b976:	4605      	mov	r5, r0
 801b978:	2800      	cmp	r0, #0
 801b97a:	d0de      	beq.n	801b93a <__submore+0x1a>
 801b97c:	eb00 0806 	add.w	r8, r0, r6
 801b980:	4601      	mov	r1, r0
 801b982:	4632      	mov	r2, r6
 801b984:	4640      	mov	r0, r8
 801b986:	f7fc fcc1 	bl	801830c <memcpy>
 801b98a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801b98e:	f8c4 8000 	str.w	r8, [r4]
 801b992:	e7e9      	b.n	801b968 <__submore+0x48>

0801b994 <__ascii_wctomb>:
 801b994:	b149      	cbz	r1, 801b9aa <__ascii_wctomb+0x16>
 801b996:	2aff      	cmp	r2, #255	; 0xff
 801b998:	bf85      	ittet	hi
 801b99a:	238a      	movhi	r3, #138	; 0x8a
 801b99c:	6003      	strhi	r3, [r0, #0]
 801b99e:	700a      	strbls	r2, [r1, #0]
 801b9a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801b9a4:	bf98      	it	ls
 801b9a6:	2001      	movls	r0, #1
 801b9a8:	4770      	bx	lr
 801b9aa:	4608      	mov	r0, r1
 801b9ac:	4770      	bx	lr

0801b9ae <abort>:
 801b9ae:	b508      	push	{r3, lr}
 801b9b0:	2006      	movs	r0, #6
 801b9b2:	f000 f851 	bl	801ba58 <raise>
 801b9b6:	2001      	movs	r0, #1
 801b9b8:	f7e5 fa96 	bl	8000ee8 <_exit>

0801b9bc <_realloc_r>:
 801b9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9be:	4607      	mov	r7, r0
 801b9c0:	4614      	mov	r4, r2
 801b9c2:	460e      	mov	r6, r1
 801b9c4:	b921      	cbnz	r1, 801b9d0 <_realloc_r+0x14>
 801b9c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b9ca:	4611      	mov	r1, r2
 801b9cc:	f7fc bd1e 	b.w	801840c <_malloc_r>
 801b9d0:	b922      	cbnz	r2, 801b9dc <_realloc_r+0x20>
 801b9d2:	f7fc fccb 	bl	801836c <_free_r>
 801b9d6:	4625      	mov	r5, r4
 801b9d8:	4628      	mov	r0, r5
 801b9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b9dc:	f000 f858 	bl	801ba90 <_malloc_usable_size_r>
 801b9e0:	42a0      	cmp	r0, r4
 801b9e2:	d20f      	bcs.n	801ba04 <_realloc_r+0x48>
 801b9e4:	4621      	mov	r1, r4
 801b9e6:	4638      	mov	r0, r7
 801b9e8:	f7fc fd10 	bl	801840c <_malloc_r>
 801b9ec:	4605      	mov	r5, r0
 801b9ee:	2800      	cmp	r0, #0
 801b9f0:	d0f2      	beq.n	801b9d8 <_realloc_r+0x1c>
 801b9f2:	4631      	mov	r1, r6
 801b9f4:	4622      	mov	r2, r4
 801b9f6:	f7fc fc89 	bl	801830c <memcpy>
 801b9fa:	4631      	mov	r1, r6
 801b9fc:	4638      	mov	r0, r7
 801b9fe:	f7fc fcb5 	bl	801836c <_free_r>
 801ba02:	e7e9      	b.n	801b9d8 <_realloc_r+0x1c>
 801ba04:	4635      	mov	r5, r6
 801ba06:	e7e7      	b.n	801b9d8 <_realloc_r+0x1c>

0801ba08 <_raise_r>:
 801ba08:	291f      	cmp	r1, #31
 801ba0a:	b538      	push	{r3, r4, r5, lr}
 801ba0c:	4604      	mov	r4, r0
 801ba0e:	460d      	mov	r5, r1
 801ba10:	d904      	bls.n	801ba1c <_raise_r+0x14>
 801ba12:	2316      	movs	r3, #22
 801ba14:	6003      	str	r3, [r0, #0]
 801ba16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba1a:	bd38      	pop	{r3, r4, r5, pc}
 801ba1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ba1e:	b112      	cbz	r2, 801ba26 <_raise_r+0x1e>
 801ba20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ba24:	b94b      	cbnz	r3, 801ba3a <_raise_r+0x32>
 801ba26:	4620      	mov	r0, r4
 801ba28:	f000 f830 	bl	801ba8c <_getpid_r>
 801ba2c:	462a      	mov	r2, r5
 801ba2e:	4601      	mov	r1, r0
 801ba30:	4620      	mov	r0, r4
 801ba32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ba36:	f000 b817 	b.w	801ba68 <_kill_r>
 801ba3a:	2b01      	cmp	r3, #1
 801ba3c:	d00a      	beq.n	801ba54 <_raise_r+0x4c>
 801ba3e:	1c59      	adds	r1, r3, #1
 801ba40:	d103      	bne.n	801ba4a <_raise_r+0x42>
 801ba42:	2316      	movs	r3, #22
 801ba44:	6003      	str	r3, [r0, #0]
 801ba46:	2001      	movs	r0, #1
 801ba48:	e7e7      	b.n	801ba1a <_raise_r+0x12>
 801ba4a:	2400      	movs	r4, #0
 801ba4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ba50:	4628      	mov	r0, r5
 801ba52:	4798      	blx	r3
 801ba54:	2000      	movs	r0, #0
 801ba56:	e7e0      	b.n	801ba1a <_raise_r+0x12>

0801ba58 <raise>:
 801ba58:	4b02      	ldr	r3, [pc, #8]	; (801ba64 <raise+0xc>)
 801ba5a:	4601      	mov	r1, r0
 801ba5c:	6818      	ldr	r0, [r3, #0]
 801ba5e:	f7ff bfd3 	b.w	801ba08 <_raise_r>
 801ba62:	bf00      	nop
 801ba64:	24000064 	.word	0x24000064

0801ba68 <_kill_r>:
 801ba68:	b538      	push	{r3, r4, r5, lr}
 801ba6a:	4d07      	ldr	r5, [pc, #28]	; (801ba88 <_kill_r+0x20>)
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	4604      	mov	r4, r0
 801ba70:	4608      	mov	r0, r1
 801ba72:	4611      	mov	r1, r2
 801ba74:	602b      	str	r3, [r5, #0]
 801ba76:	f7e5 fa25 	bl	8000ec4 <_kill>
 801ba7a:	1c43      	adds	r3, r0, #1
 801ba7c:	d102      	bne.n	801ba84 <_kill_r+0x1c>
 801ba7e:	682b      	ldr	r3, [r5, #0]
 801ba80:	b103      	cbz	r3, 801ba84 <_kill_r+0x1c>
 801ba82:	6023      	str	r3, [r4, #0]
 801ba84:	bd38      	pop	{r3, r4, r5, pc}
 801ba86:	bf00      	nop
 801ba88:	2400ee5c 	.word	0x2400ee5c

0801ba8c <_getpid_r>:
 801ba8c:	f7e5 ba12 	b.w	8000eb4 <_getpid>

0801ba90 <_malloc_usable_size_r>:
 801ba90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ba94:	1f18      	subs	r0, r3, #4
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	bfbc      	itt	lt
 801ba9a:	580b      	ldrlt	r3, [r1, r0]
 801ba9c:	18c0      	addlt	r0, r0, r3
 801ba9e:	4770      	bx	lr

0801baa0 <_init>:
 801baa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801baa2:	bf00      	nop
 801baa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801baa6:	bc08      	pop	{r3}
 801baa8:	469e      	mov	lr, r3
 801baaa:	4770      	bx	lr

0801baac <_fini>:
 801baac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801baae:	bf00      	nop
 801bab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bab2:	bc08      	pop	{r3}
 801bab4:	469e      	mov	lr, r3
 801bab6:	4770      	bx	lr
